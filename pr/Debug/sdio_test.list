
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d410  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  0800d5b0  0800d5b0  0001d5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e06c  0800e06c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800e06c  0800e06c  0001e06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e074  0800e074  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e074  0800e074  0001e074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e078  0800e078  0001e078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800e07c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d94  20000080  0800e0fc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006e14  0800e0fc  00026e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c712  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cf5  00000000  00000000  0003c805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00041500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136c  00000000  00000000  00042e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007de3  00000000  00000000  000441dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002263e  00000000  00000000  0004bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad56  00000000  00000000  0006e5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000713c  00000000  00000000  00109354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  00110490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d598 	.word	0x0800d598

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800d598 	.word	0x0800d598

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80005d0:	f001 f9f4 	bl	80019bc <HAL_Init>
    SystemClock_Config();
 80005d4:	f000 f820 	bl	8000618 <SystemClock_Config>
	//MX_USART2_UART_Init();
    if(init_tasks()) printf("Tasks was initialized\n");
 80005d8:	f001 f952 	bl	8001880 <init_tasks>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <main+0x1c>
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0x40>)
 80005e4:	f00c f82e 	bl	800c644 <puts>
	if(i2c_init()) printf("I2C1 was init success\n");
 80005e8:	f001 f840 	bl	800166c <i2c_init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <main+0x2c>
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x44>)
 80005f4:	f00c f826 	bl	800c644 <puts>

	osKernelStart();
 80005f8:	f008 fa60 	bl	8008abc <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f001 fa4e 	bl	8001aa0 <HAL_Delay>
	  printf("test\n");
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <main+0x48>)
 8000606:	f00c f81d 	bl	800c644 <puts>
	  HAL_Delay(1000);
 800060a:	e7f7      	b.n	80005fc <main+0x30>
 800060c:	0800d5c4 	.word	0x0800d5c4
 8000610:	0800d5dc 	.word	0x0800d5dc
 8000614:	0800d5f4 	.word	0x0800d5f4

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f00c f920 	bl	800c86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd4>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000690:	2354      	movs	r3, #84	; 0x54
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fcb1 	bl	8003008 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f83c 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 ff12 	bl	80034f8 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006da:	f000 f825 	bl	8000728 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_write>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e009      	b.n	8000716 <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff36 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbf1      	blt.n	8000702 <_write+0x12>
	}
	return len;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <HAL_MspInit+0x54>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x54>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_MspInit+0x54>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_MspInit+0x54>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	210f      	movs	r1, #15
 8000776:	f06f 0001 	mvn.w	r0, #1
 800077a:	f001 fa90 	bl	8001c9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_I2C_MspInit+0x84>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d12b      	bne.n	8000806 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ca:	23c0      	movs	r3, #192	; 0xc0
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007da:	2304      	movs	r3, #4
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <HAL_I2C_MspInit+0x8c>)
 80007e6:	f001 fe0d 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40005400 	.word	0x40005400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a65      	ldr	r2, [pc, #404]	; (80009d0 <HAL_SD_MspInit+0x1b4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	f040 80c3 	bne.w	80009c6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	4b63      	ldr	r3, [pc, #396]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a62      	ldr	r2, [pc, #392]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800084a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
 8000850:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b5c      	ldr	r3, [pc, #368]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a5b      	ldr	r2, [pc, #364]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a54      	ldr	r2, [pc, #336]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b52      	ldr	r3, [pc, #328]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000894:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000898:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008a6:	230c      	movs	r3, #12
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4849      	ldr	r0, [pc, #292]	; (80009d8 <HAL_SD_MspInit+0x1bc>)
 80008b2:	f001 fda7 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008c6:	230c      	movs	r3, #12
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <HAL_SD_MspInit+0x1c0>)
 80008d2:	f001 fd97 	bl	8002404 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <HAL_SD_MspInit+0x1c8>)
 80008da:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008e2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000900:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000906:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800090a:	2220      	movs	r2, #32
 800090c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000910:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000914:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000918:	2204      	movs	r2, #4
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800091e:	2203      	movs	r2, #3
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000924:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800092c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000932:	482b      	ldr	r0, [pc, #172]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000934:	f001 f9ea 	bl	8001d0c <HAL_DMA_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800093e:	f7ff fef3 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000946:	641a      	str	r2, [r3, #64]	; 0x40
 8000948:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <HAL_SD_MspInit+0x1d0>)
 8000952:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800096a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000976:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000982:	2220      	movs	r2, #32
 8000984:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000988:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800098c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000990:	2204      	movs	r2, #4
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000996:	2203      	movs	r2, #3
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800099c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009ac:	f001 f9ae 	bl	8001d0c <HAL_DMA_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80009b6:	f7ff feb7 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c0:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	200021a4 	.word	0x200021a4
 80009e4:	40026458 	.word	0x40026458
 80009e8:	20002204 	.word	0x20002204
 80009ec:	400264a0 	.word	0x400264a0

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>
	...

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
   printf("HardFault_Handler\n");
 80009fc:	4801      	ldr	r0, [pc, #4]	; (8000a04 <HardFault_Handler+0xc>)
 80009fe:	f00b fe21 	bl	800c644 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0xa>
 8000a04:	0800d5fc 	.word	0x0800d5fc

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f001 f818 	bl	8001a60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a30:	f00a fac8 	bl	800afc4 <xTaskGetSchedulerState>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d001      	beq.n	8000a3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3a:	f00b f9ad 	bl	800bd98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DMA2_Stream3_IRQHandler+0x10>)
 8000a4a:	f001 fa65 	bl	8001f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200021a4 	.word	0x200021a4

08000a58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <DMA2_Stream6_IRQHandler+0x10>)
 8000a5e:	f001 fa5b 	bl	8001f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20002204 	.word	0x20002204

08000a6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e00a      	b.n	8000a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7e:	f3af 8000 	nop.w
 8000a82:	4601      	mov	r1, r0
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	b2ca      	uxtb	r2, r1
 8000a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf0      	blt.n	8000a7e <_read+0x12>
  }

  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f00b fef2 	bl	800c928 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20018000 	.word	0x20018000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	20006e18 	.word	0x20006e18

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd7 	bl	8000b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f00b feb1 	bl	800c934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcfb 	bl	80005cc <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000be4:	0800e07c 	.word	0x0800e07c
  ldr r2, =_sbss
 8000be8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000bec:	20006e14 	.word	0x20006e14

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <reverse_bits>:
        {
                0x0, 0x8, 0x4, 0xC, 0x2, 0xA, 0x6, 0xE,
                0x1, 0x9, 0x5, 0xD, 0x3, 0xB, 0x7, 0xF
        };

uint8_t reverse_bits(uint8_t byte) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    // Reverse the top and bottom nibble then swap them.
    return (reverse_table[byte & 0b1111] << 4) | reverse_table[byte >> 4];
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <reverse_bits+0x38>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	b25a      	sxtb	r2, r3
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <reverse_bits+0x38>)
 8000c16:	5c5b      	ldrb	r3, [r3, r1]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000004 	.word	0x20000004

08000c30 <reverse_word>:

uint16_t reverse_word(uint16_t word) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
    return ((reverse_bits(word & 0xFF) << 8) | reverse_bits(word >> 8));
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ffd8 	bl	8000bf4 <reverse_bits>
 8000c44:	4603      	mov	r3, r0
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21c      	sxth	r4, r3
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffce 	bl	8000bf4 <reverse_bits>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29b      	uxth	r3, r3
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}

08000c6a <crc16_common>:

uint16_t crc16_common(uint8_t *data, uint8_t len, uint16_t poly, uint16_t init,
                      uint16_t doXor, bool refIn, bool refOut) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	72fb      	strb	r3, [r7, #11]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	813b      	strh	r3, [r7, #8]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80fb      	strh	r3, [r7, #6]
    uint8_t y;
    uint16_t crc;

    crc = init;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	82bb      	strh	r3, [r7, #20]
    while (len--) {
 8000c88:	e037      	b.n	8000cfa <crc16_common+0x90>
        if (refIn)
 8000c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00f      	beq.n	8000cb2 <crc16_common+0x48>
            crc = ((uint16_t) reverse_bits(*data++) << 8) ^ crc;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	60fa      	str	r2, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffaa 	bl	8000bf4 <reverse_bits>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000caa:	4053      	eors	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	82bb      	strh	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <crc16_common+0x5e>
        else
            crc = ((uint16_t) * data++ << 8) ^ crc;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	60fa      	str	r2, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cc2:	4053      	eors	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	82bb      	strh	r3, [r7, #20]
        for (y = 0; y < 8; y++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	75fb      	strb	r3, [r7, #23]
 8000ccc:	e012      	b.n	8000cf4 <crc16_common+0x8a>
            if (crc & 0x8000)
 8000cce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da08      	bge.n	8000ce8 <crc16_common+0x7e>
                crc = (crc << 1) ^ poly;
 8000cd6:	8abb      	ldrh	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ce0:	4053      	eors	r3, r2
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	82bb      	strh	r3, [r7, #20]
 8000ce6:	e002      	b.n	8000cee <crc16_common+0x84>
            else
                crc = crc << 1;
 8000ce8:	8abb      	ldrh	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	82bb      	strh	r3, [r7, #20]
        for (y = 0; y < 8; y++) {
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	75fb      	strb	r3, [r7, #23]
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d9e9      	bls.n	8000cce <crc16_common+0x64>
    while (len--) {
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	72fa      	strb	r2, [r7, #11]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1c2      	bne.n	8000c8a <crc16_common+0x20>
        }
    }

    if (refOut)
 8000d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <crc16_common+0xae>
        crc = reverse_word(crc);
 8000d0c:	8abb      	ldrh	r3, [r7, #20]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff8e 	bl	8000c30 <reverse_word>
 8000d14:	4603      	mov	r3, r0
 8000d16:	82bb      	strh	r3, [r7, #20]
    return (crc ^ doXor);
 8000d18:	8aba      	ldrh	r2, [r7, #20]
 8000d1a:	8c3b      	ldrh	r3, [r7, #32]
 8000d1c:	4053      	eors	r3, r2
 8000d1e:	b29b      	uxth	r3, r3
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <crc16_augccitt_false>:

//uint16_t crc16_augccitt(uint8_t *data, uint8_t len) {
//    return crc16_common(data, len, 0x1021, 0x1d0f, 0x0000, false, false);
//}

uint16_t crc16_augccitt_false(uint8_t *data, uint8_t len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
    return crc16_common(data, len, 0x1021, 0xFFFF, 0x0000, false, false);
 8000d34:	78f9      	ldrb	r1, [r7, #3]
 8000d36:	2300      	movs	r3, #0
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	f241 0221 	movw	r2, #4129	; 0x1021
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff8d 	bl	8000c6a <crc16_common>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <init_sd>:
static BOOLEAN init_sd(void);
static BOOLEAN read_sd_and_firmware(void);
static BOOLEAN check_firmware(void);
static BOOLEAN finish_firmware(void);

static BOOLEAN init_sd(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	if(is_init == FALSE){
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <init_sd+0x40>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d113      	bne.n	8000d90 <init_sd+0x34>
	   readBuff = (char*) malloc(100);
 8000d68:	2064      	movs	r0, #100	; 0x64
 8000d6a:	f00b fa8f 	bl	800c28c <malloc>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <init_sd+0x44>)
 8000d74:	601a      	str	r2, [r3, #0]
	   content = (char*) malloc(100);
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f00b fa88 	bl	800c28c <malloc>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <init_sd+0x48>)
 8000d82:	601a      	str	r2, [r3, #0]
	   MX_DMA_Init();
 8000d84:	f000 fac4 	bl	8001310 <MX_DMA_Init>
	   MX_SDIO_SD_Init();
 8000d88:	f000 fa60 	bl	800124c <MX_SDIO_SD_Init>
	   MX_FATFS_Init();
 8000d8c:	f004 fbbc 	bl	8005508 <MX_FATFS_Init>
	}
	is_init = TRUE;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <init_sd+0x40>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20002266 	.word	0x20002266
 8000da0:	20002114 	.word	0x20002114
 8000da4:	20002118 	.word	0x20002118

08000da8 <read_sd_and_firmware>:



static BOOLEAN read_sd_and_firmware(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	  f_addr = 0x0000; // Сброс адреса регистров
 8000dac:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <read_sd_and_firmware+0x1d0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	801a      	strh	r2, [r3, #0]

	  // Подключение флешки
	  fr = f_mount(&FatFs, "", 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	4971      	ldr	r1, [pc, #452]	; (8000f7c <read_sd_and_firmware+0x1d4>)
 8000db6:	4872      	ldr	r0, [pc, #456]	; (8000f80 <read_sd_and_firmware+0x1d8>)
 8000db8:	f006 fff4 	bl	8007da4 <f_mount>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b70      	ldr	r3, [pc, #448]	; (8000f84 <read_sd_and_firmware+0x1dc>)
 8000dc2:	701a      	strb	r2, [r3, #0]
	  if(fr != FR_OK){
 8000dc4:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <read_sd_and_firmware+0x1dc>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <read_sd_and_firmware+0x34>
		  printf("SD card detection error %d\n", fr);
 8000dcc:	4b6d      	ldr	r3, [pc, #436]	; (8000f84 <read_sd_and_firmware+0x1dc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	486d      	ldr	r0, [pc, #436]	; (8000f88 <read_sd_and_firmware+0x1e0>)
 8000dd4:	f00b fbd0 	bl	800c578 <iprintf>
		  return FALSE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e0ca      	b.n	8000f72 <read_sd_and_firmware+0x1ca>
	  }
	  printf("SD card detected\n");
 8000ddc:	486b      	ldr	r0, [pc, #428]	; (8000f8c <read_sd_and_firmware+0x1e4>)
 8000dde:	f00b fc31 	bl	800c644 <puts>

      // Открытие файла
	  fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 8000de2:	2201      	movs	r2, #1
 8000de4:	496a      	ldr	r1, [pc, #424]	; (8000f90 <read_sd_and_firmware+0x1e8>)
 8000de6:	486b      	ldr	r0, [pc, #428]	; (8000f94 <read_sd_and_firmware+0x1ec>)
 8000de8:	f007 f840 	bl	8007e6c <f_open>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b64      	ldr	r3, [pc, #400]	; (8000f84 <read_sd_and_firmware+0x1dc>)
 8000df2:	701a      	strb	r2, [r3, #0]
	  if(fr != FR_OK){
 8000df4:	4b63      	ldr	r3, [pc, #396]	; (8000f84 <read_sd_and_firmware+0x1dc>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <read_sd_and_firmware+0x64>
		  printf("Can't open file >senasic_app_snp736.bin<  %d\n", fr);
 8000dfc:	4b61      	ldr	r3, [pc, #388]	; (8000f84 <read_sd_and_firmware+0x1dc>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4865      	ldr	r0, [pc, #404]	; (8000f98 <read_sd_and_firmware+0x1f0>)
 8000e04:	f00b fbb8 	bl	800c578 <iprintf>
		  return FALSE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e0b2      	b.n	8000f72 <read_sd_and_firmware+0x1ca>
	  }
	  printf("File >senasic_app_snp736.bin< was opened success\n");
 8000e0c:	4863      	ldr	r0, [pc, #396]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e0e:	f00b fc19 	bl	800c644 <puts>

	  memset(&readBuff[0], 0x00, 100);
 8000e12:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2264      	movs	r2, #100	; 0x64
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f00b fd26 	bl	800c86c <memset>
	  memset(&content[0], 0x00, 100);
 8000e20:	4b60      	ldr	r3, [pc, #384]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2264      	movs	r2, #100	; 0x64
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00b fd1f 	bl	800c86c <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){
 8000e2e:	e08c      	b.n	8000f4a <read_sd_and_firmware+0x1a2>
		  if(bytesRead == 0) goto down; // Если ничего не прочитано
 8000e30:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 8094 	beq.w	8000f62 <read_sd_and_firmware+0x1ba>
        //  osDelay(20);
		  // Добавляем адрес регистра
		  content[0] = f_addr >> 8;
 8000e3a:	4b4f      	ldr	r3, [pc, #316]	; (8000f78 <read_sd_and_firmware+0x1d0>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	701a      	strb	r2, [r3, #0]
		  content[1] = f_addr;
 8000e4a:	4b4b      	ldr	r3, [pc, #300]	; (8000f78 <read_sd_and_firmware+0x1d0>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	4b55      	ldr	r3, [pc, #340]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	701a      	strb	r2, [r3, #0]
		  memcpy(&content[2], &readBuff[0], bytesRead);
 8000e58:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000e60:	6811      	ldr	r1, [r2, #0]
 8000e62:	4a51      	ldr	r2, [pc, #324]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00b fd8b 	bl	800c982 <memcpy>

		  if(f_addr == 0x1FC0){
 8000e6c:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <read_sd_and_firmware+0x1d0>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 8000e74:	d116      	bne.n	8000ea4 <read_sd_and_firmware+0xfc>
		 	 content[bytesRead + 1] = 0xEF;
 8000e76:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	22ef      	movs	r2, #239	; 0xef
 8000e84:	701a      	strb	r2, [r3, #0]
		 	 content[bytesRead] = 0xCD;
 8000e86:	4b47      	ldr	r3, [pc, #284]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	22cd      	movs	r2, #205	; 0xcd
 8000e92:	701a      	strb	r2, [r3, #0]
		 	 content[bytesRead - 1] = 0xAB;
 8000e94:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	22ab      	movs	r2, #171	; 0xab
 8000ea2:	701a      	strb	r2, [r3, #0]
		 	 //print_hex("SPC: ", content, bytesRead + 4);
		 }

		  // Добавляем контрольную сумму
		  crc16 = crc16_augccitt_false(&content[0], bytesRead + 2);
 8000ea4:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3302      	adds	r3, #2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	f7ff ff39 	bl	8000d28 <crc16_augccitt_false>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <read_sd_and_firmware+0x204>)
 8000ebc:	801a      	strh	r2, [r3, #0]
		  content[bytesRead + 2] = crc16 >> 8;
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <read_sd_and_firmware+0x204>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
		  content[bytesRead + 3] = crc16;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <read_sd_and_firmware+0x204>)
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3303      	adds	r3, #3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b2ca      	uxtb	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
		  //osDelay(100);

		  // Отправка
		  if(!i2c_send_data_to_device(0x36, content, bytesRead + 4)) {
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2036      	movs	r0, #54	; 0x36
 8000efc:	f000 fc4e 	bl	800179c <i2c_send_data_to_device>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <read_sd_and_firmware+0x174>
			  print_hex("ERROR TO SEND: ", content, bytesRead + 4);
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	461a      	mov	r2, r3
 8000f12:	4827      	ldr	r0, [pc, #156]	; (8000fb0 <read_sd_and_firmware+0x208>)
 8000f14:	f000 fbdc 	bl	80016d0 <print_hex>
			  return FALSE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e02a      	b.n	8000f72 <read_sd_and_firmware+0x1ca>
		  }

		  f_addr += bytesRead;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <read_sd_and_firmware+0x1d0>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <read_sd_and_firmware+0x1d0>)
 8000f2c:	801a      	strh	r2, [r3, #0]

		  memset(&readBuff[0], 0x00, 100);
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00b fc98 	bl	800c86c <memset>
		  memset(&content[0], 0x00, 100);
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2264      	movs	r2, #100	; 0x64
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00b fc91 	bl	800c86c <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	4810      	ldr	r0, [pc, #64]	; (8000f94 <read_sd_and_firmware+0x1ec>)
 8000f54:	f007 f972 	bl	800823c <f_read>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f43f af68 	beq.w	8000e30 <read_sd_and_firmware+0x88>
	  }
	  down:
 8000f60:	e000      	b.n	8000f64 <read_sd_and_firmware+0x1bc>
		  if(bytesRead == 0) goto down; // Если ничего не прочитано
 8000f62:	bf00      	nop

	  // Закрытие файла
      f_close(&fil);
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <read_sd_and_firmware+0x1ec>)
 8000f66:	f007 fb80 	bl	800866a <f_close>
      printf("ss");
 8000f6a:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <read_sd_and_firmware+0x20c>)
 8000f6c:	f00b fb04 	bl	800c578 <iprintf>
      return TRUE;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20002264 	.word	0x20002264
 8000f7c:	0800d610 	.word	0x0800d610
 8000f80:	200000a0 	.word	0x200000a0
 8000f84:	2000210c 	.word	0x2000210c
 8000f88:	0800d614 	.word	0x0800d614
 8000f8c:	0800d630 	.word	0x0800d630
 8000f90:	0800d644 	.word	0x0800d644
 8000f94:	200010dc 	.word	0x200010dc
 8000f98:	0800d65c 	.word	0x0800d65c
 8000f9c:	0800d68c 	.word	0x0800d68c
 8000fa0:	20002114 	.word	0x20002114
 8000fa4:	20002118 	.word	0x20002118
 8000fa8:	20002110 	.word	0x20002110
 8000fac:	2000211c 	.word	0x2000211c
 8000fb0:	0800d6c0 	.word	0x0800d6c0
 8000fb4:	0800d6d0 	.word	0x0800d6d0

08000fb8 <reset_to_factory>:
			 if(f_addr == 0x4000) return TRUE;
	  }
	  return TRUE;
}

static BOOLEAN reset_to_factory(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
     // 1) write to 0x36 ack data: 0xA2 0x01 0x76 0x32
     uint8_t reset_cmd_1[4] = {0xA2, 0x01, 0x76, 0x32};
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <reset_to_factory+0x4c>)
 8000fc0:	607b      	str	r3, [r7, #4]
     if(!i2c_send_data_to_device(SNP_ADDR, &reset_cmd_1, 4)) return FALSE;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2036      	movs	r0, #54	; 0x36
 8000fca:	f000 fbe7 	bl	800179c <i2c_send_data_to_device>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <reset_to_factory+0x20>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e010      	b.n	8000ffa <reset_to_factory+0x42>
     osDelay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f007 fe3c 	bl	8008c56 <osDelay>
     // 2) write to 0x36 ack data: 0xA2, 0x02, 0x46, 0x51
     uint8_t reset_cmd_2[4] = {0xA2, 0x02, 0x46, 0x51};
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <reset_to_factory+0x50>)
 8000fe0:	603b      	str	r3, [r7, #0]
     if(!i2c_send_data_to_device(SNP_ADDR, reset_cmd_2, 4)) return FALSE;
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2036      	movs	r0, #54	; 0x36
 8000fea:	f000 fbd7 	bl	800179c <i2c_send_data_to_device>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <reset_to_factory+0x40>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e000      	b.n	8000ffa <reset_to_factory+0x42>
     return TRUE;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	327601a2 	.word	0x327601a2
 8001008:	514602a2 	.word	0x514602a2

0800100c <update_firmware>:

extern BOOLEAN update_firmware(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	b09a      	sub	sp, #104	; 0x68
 8001010:	af00      	add	r7, sp, #0
	// Подготовка к прошивке
    if(!prep_firmware()) {
 8001012:	f000 f93b 	bl	800128c <prep_firmware>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <update_firmware+0x1a>
    	printf("Can't switch SNP73X to programming mode\n");
 800101c:	4883      	ldr	r0, [pc, #524]	; (800122c <update_firmware+0x220>)
 800101e:	f00b fb11 	bl	800c644 <puts>
    	return FALSE;
 8001022:	2300      	movs	r3, #0
 8001024:	e0fd      	b.n	8001222 <update_firmware+0x216>
    }
    printf("Switch SNP73X to factory state was success\n");
 8001026:	4882      	ldr	r0, [pc, #520]	; (8001230 <update_firmware+0x224>)
 8001028:	f00b fb0c 	bl	800c644 <puts>

    // Возврат заводской прошивки
    if(!reset_to_factory()) {
 800102c:	f7ff ffc4 	bl	8000fb8 <reset_to_factory>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d104      	bne.n	8001040 <update_firmware+0x34>
    	printf("Can't rollback SNP76X to factory state\n");
 8001036:	487f      	ldr	r0, [pc, #508]	; (8001234 <update_firmware+0x228>)
 8001038:	f00b fb04 	bl	800c644 <puts>
    	return FALSE;
 800103c:	2300      	movs	r3, #0
 800103e:	e0f0      	b.n	8001222 <update_firmware+0x216>
    }
    printf("Reset to factory was success\n");
 8001040:	487d      	ldr	r0, [pc, #500]	; (8001238 <update_firmware+0x22c>)
 8001042:	f00b faff 	bl	800c644 <puts>
    osDelay(125);
 8001046:	207d      	movs	r0, #125	; 0x7d
 8001048:	f007 fe05 	bl	8008c56 <osDelay>
    finish_firmware();
 800104c:	f000 f942 	bl	80012d4 <finish_firmware>
    // Инит SD карты
    init_sd();
 8001050:	f7ff fe84 	bl	8000d5c <init_sd>
    // Чтение файла с SD карты и прошивка датчика
    if(!read_sd_and_firmware()){
 8001054:	f7ff fea8 	bl	8000da8 <read_sd_and_firmware>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <update_firmware+0x5c>
    	printf("Firmware error\n");
 800105e:	4877      	ldr	r0, [pc, #476]	; (800123c <update_firmware+0x230>)
 8001060:	f00b faf0 	bl	800c644 <puts>
    	return FALSE;
 8001064:	2300      	movs	r3, #0
 8001066:	e0dc      	b.n	8001222 <update_firmware+0x216>
    }

    // Запись OPT
    char opt_data[100] = {0x40, 0x00, sensor_number, 0x00, 0x00, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001068:	463b      	mov	r3, r7
 800106a:	2264      	movs	r2, #100	; 0x64
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00b fbfc 	bl	800c86c <memset>
 8001074:	2340      	movs	r3, #64	; 0x40
 8001076:	703b      	strb	r3, [r7, #0]
 8001078:	4b71      	ldr	r3, [pc, #452]	; (8001240 <update_firmware+0x234>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	70bb      	strb	r3, [r7, #2]
 800107e:	2309      	movs	r3, #9
 8001080:	717b      	strb	r3, [r7, #5]
 8001082:	23ff      	movs	r3, #255	; 0xff
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	23ff      	movs	r3, #255	; 0xff
 8001088:	71fb      	strb	r3, [r7, #7]
 800108a:	23ff      	movs	r3, #255	; 0xff
 800108c:	723b      	strb	r3, [r7, #8]
 800108e:	23ff      	movs	r3, #255	; 0xff
 8001090:	727b      	strb	r3, [r7, #9]
 8001092:	23ff      	movs	r3, #255	; 0xff
 8001094:	72bb      	strb	r3, [r7, #10]
 8001096:	23ff      	movs	r3, #255	; 0xff
 8001098:	72fb      	strb	r3, [r7, #11]
 800109a:	23ff      	movs	r3, #255	; 0xff
 800109c:	733b      	strb	r3, [r7, #12]
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	737b      	strb	r3, [r7, #13]
 80010a2:	23ff      	movs	r3, #255	; 0xff
 80010a4:	73bb      	strb	r3, [r7, #14]
 80010a6:	23ff      	movs	r3, #255	; 0xff
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	23ff      	movs	r3, #255	; 0xff
 80010ac:	743b      	strb	r3, [r7, #16]
 80010ae:	23ff      	movs	r3, #255	; 0xff
 80010b0:	747b      	strb	r3, [r7, #17]
 80010b2:	23ff      	movs	r3, #255	; 0xff
 80010b4:	74bb      	strb	r3, [r7, #18]
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	74fb      	strb	r3, [r7, #19]
 80010ba:	23ff      	movs	r3, #255	; 0xff
 80010bc:	753b      	strb	r3, [r7, #20]
 80010be:	23ff      	movs	r3, #255	; 0xff
 80010c0:	757b      	strb	r3, [r7, #21]
 80010c2:	23ff      	movs	r3, #255	; 0xff
 80010c4:	75bb      	strb	r3, [r7, #22]
 80010c6:	23ff      	movs	r3, #255	; 0xff
 80010c8:	75fb      	strb	r3, [r7, #23]
 80010ca:	23ff      	movs	r3, #255	; 0xff
 80010cc:	763b      	strb	r3, [r7, #24]
 80010ce:	23ff      	movs	r3, #255	; 0xff
 80010d0:	767b      	strb	r3, [r7, #25]
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	76bb      	strb	r3, [r7, #26]
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	76fb      	strb	r3, [r7, #27]
 80010da:	23ff      	movs	r3, #255	; 0xff
 80010dc:	773b      	strb	r3, [r7, #28]
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	777b      	strb	r3, [r7, #29]
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	77bb      	strb	r3, [r7, #30]
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	77fb      	strb	r3, [r7, #31]
 80010ea:	23ff      	movs	r3, #255	; 0xff
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
 80010f0:	23ff      	movs	r3, #255	; 0xff
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80010f6:	23ff      	movs	r3, #255	; 0xff
 80010f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80010fc:	23ff      	movs	r3, #255	; 0xff
 80010fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001102:	23ff      	movs	r3, #255	; 0xff
 8001104:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001108:	23ff      	movs	r3, #255	; 0xff
 800110a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001114:	23ff      	movs	r3, #255	; 0xff
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800111a:	23ff      	movs	r3, #255	; 0xff
 800111c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001120:	23ff      	movs	r3, #255	; 0xff
 8001122:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001126:	23ff      	movs	r3, #255	; 0xff
 8001128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800112c:	23ff      	movs	r3, #255	; 0xff
 800112e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001132:	23ff      	movs	r3, #255	; 0xff
 8001134:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001138:	23ff      	movs	r3, #255	; 0xff
 800113a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800113e:	23ff      	movs	r3, #255	; 0xff
 8001140:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001144:	23ff      	movs	r3, #255	; 0xff
 8001146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800114a:	23ff      	movs	r3, #255	; 0xff
 800114c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001150:	23ff      	movs	r3, #255	; 0xff
 8001152:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001156:	23ff      	movs	r3, #255	; 0xff
 8001158:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800115c:	23ff      	movs	r3, #255	; 0xff
 800115e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001162:	23ff      	movs	r3, #255	; 0xff
 8001164:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800116e:	23ff      	movs	r3, #255	; 0xff
 8001170:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001174:	23ff      	movs	r3, #255	; 0xff
 8001176:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001180:	23ff      	movs	r3, #255	; 0xff
 8001182:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001186:	23ff      	movs	r3, #255	; 0xff
 8001188:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001198:	23ff      	movs	r3, #255	; 0xff
 800119a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800119e:	23ff      	movs	r3, #255	; 0xff
 80011a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80011a4:	23ff      	movs	r3, #255	; 0xff
 80011a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80011aa:	23ff      	movs	r3, #255	; 0xff
 80011ac:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80011b0:	23ff      	movs	r3, #255	; 0xff
 80011b2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                       // 0x40, 0x00, sensor_number, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
                       //  1     2         3          4     5     6     7     8      9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39   40     41    42    43    44    45   46     47    48    49    50    51    52    53    54    55   56     57    58    59    60    61    62     63    64   65    66
    UINT8 opt_data_size = 66;
 80011b6:	2342      	movs	r3, #66	; 0x42
 80011b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    crc16 = crc16_augccitt_false(&opt_data[0], opt_data_size);
 80011bc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80011c0:	463b      	mov	r3, r7
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdaf 	bl	8000d28 <crc16_augccitt_false>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <update_firmware+0x238>)
 80011d0:	801a      	strh	r2, [r3, #0]
    opt_data[opt_data_size] = crc16 >> 8;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <update_firmware+0x238>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	3368      	adds	r3, #104	; 0x68
 80011e2:	443b      	add	r3, r7
 80011e4:	f803 2c68 	strb.w	r2, [r3, #-104]
    opt_data[opt_data_size + 1] = crc16;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <update_firmware+0x238>)
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	3368      	adds	r3, #104	; 0x68
 80011f6:	443b      	add	r3, r7
 80011f8:	f803 2c68 	strb.w	r2, [r3, #-104]

    // 0x40 0x00 0x02 0x00 0x00 0x09 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF0 0x5C
    //   1    2    3    4   5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68
    i2c_send_data_to_device(0x36, opt_data, opt_data_size + 2);
 80011fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001200:	b29b      	uxth	r3, r3
 8001202:	3302      	adds	r3, #2
 8001204:	b29a      	uxth	r2, r3
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f000 fac6 	bl	800179c <i2c_send_data_to_device>
//    // Прочитать все записанные данные (0x0000 > 0x4000)
//    if(!check_firmware()){
//    	printf("error while check");
//    }

    printf("FW was finish\n");
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <update_firmware+0x23c>)
 8001212:	f00b fa17 	bl	800c644 <puts>
    osDelay(45);
 8001216:	202d      	movs	r0, #45	; 0x2d
 8001218:	f007 fd1d 	bl	8008c56 <osDelay>
    finish_firmware();
 800121c:	f000 f85a 	bl	80012d4 <finish_firmware>
    return TRUE;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	3768      	adds	r7, #104	; 0x68
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	0800d704 	.word	0x0800d704
 8001230:	0800d72c 	.word	0x0800d72c
 8001234:	0800d758 	.word	0x0800d758
 8001238:	0800d780 	.word	0x0800d780
 800123c:	0800d7a0 	.word	0x0800d7a0
 8001240:	20000014 	.word	0x20000014
 8001244:	2000211c 	.word	0x2000211c
 8001248:	0800d7b0 	.word	0x0800d7b0

0800124c <MX_SDIO_SD_Init>:

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */static void MX_SDIO_SD_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    hsd.Instance = SDIO;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <MX_SDIO_SD_Init+0x3c>)
 8001254:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
    HAL_SD_Init(&hsd);
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <MX_SDIO_SD_Init+0x38>)
 800127c:	f002 fb48 	bl	8003910 <HAL_SD_Init>
  }
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20002120 	.word	0x20002120
 8001288:	40012c00 	.word	0x40012c00

0800128c <prep_firmware>:

static BOOLEAN prep_firmware(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// Перевод SDA/SCL пинов в режим GPIO
		switch_mode_sda_scl(GPIO_M);
 8001290:	2000      	movs	r0, #0
 8001292:	f000 f87b 	bl	800138c <switch_mode_sda_scl>

		set_sda(GPIO_PIN_RESET);   // SDA off
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f996 	bl	80015c8 <set_sda>
		set_scl(GPIO_PIN_RESET);   // SCL off
 800129c:	2000      	movs	r0, #0
 800129e:	f000 f9ad 	bl	80015fc <set_scl>
		set_power(GPIO_PIN_RESET); // VDD off
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f97e 	bl	80015a4 <set_power>
		osDelay(80);
 80012a8:	2050      	movs	r0, #80	; 0x50
 80012aa:	f007 fcd4 	bl	8008c56 <osDelay>
	 	set_power(GPIO_PIN_SET);   // VDD on
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 f978 	bl	80015a4 <set_power>

		// GPIO0(SCL) GPIO1(SDA) должны удерживаться в состояниий  GPIO1 = 1, GPIO0 = 0 не менее 256 мсек
		set_sda(GPIO_PIN_RESET);    // SDA on
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f987 	bl	80015c8 <set_sda>
		set_scl(GPIO_PIN_SET);  // SCL off
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 f99e 	bl	80015fc <set_scl>
		osDelay(500);
 80012c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c4:	f007 fcc7 	bl	8008c56 <osDelay>

		// Перевод SDA/SCL пинов в режим I2C
		switch_mode_sda_scl(I2C_M);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 f85f 	bl	800138c <switch_mode_sda_scl>
		return TRUE;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <finish_firmware>:

static BOOLEAN finish_firmware(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	switch_mode_sda_scl(GPIO_M);
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 f857 	bl	800138c <switch_mode_sda_scl>
	set_sda(GPIO_PIN_RESET);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f972 	bl	80015c8 <set_sda>
	set_scl(GPIO_PIN_RESET);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f000 f989 	bl	80015fc <set_scl>
	osDelay(80);
 80012ea:	2050      	movs	r0, #80	; 0x50
 80012ec:	f007 fcb3 	bl	8008c56 <osDelay>
	set_scl(GPIO_PIN_SET);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f000 f983 	bl	80015fc <set_scl>
	osDelay(320);
 80012f6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80012fa:	f007 fcac 	bl	8008c56 <osDelay>
	set_sda(GPIO_PIN_SET);
 80012fe:	2001      	movs	r0, #1
 8001300:	f000 f962 	bl	80015c8 <set_sda>
	switch_mode_sda_scl(I2C_M);
 8001304:	2001      	movs	r0, #1
 8001306:	f000 f841 	bl	800138c <switch_mode_sda_scl>
	return TRUE;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_DMA_Init+0x4c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <MX_DMA_Init+0x4c>)
 8001320:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_DMA_Init+0x4c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	203b      	movs	r0, #59	; 0x3b
 8001338:	f000 fcb1 	bl	8001c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800133c:	203b      	movs	r0, #59	; 0x3b
 800133e:	f000 fcca 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2105      	movs	r1, #5
 8001346:	2045      	movs	r0, #69	; 0x45
 8001348:	f000 fca9 	bl	8001c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800134c:	2045      	movs	r0, #69	; 0x45
 800134e:	f000 fcc2 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <gpio_start>:

static BOOLEAN init_io(void);
static void gpio_watcher(void);


extern BOOLEAN gpio_start(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
   if(is_init) return TRUE;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <gpio_start+0x28>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <gpio_start+0x10>
 800136c:	2301      	movs	r3, #1
 800136e:	e008      	b.n	8001382 <gpio_start+0x22>
   is_init = init_io();
 8001370:	f000 f88c 	bl	800148c <init_io>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <gpio_start+0x28>)
 800137a:	701a      	strb	r2, [r3, #0]
   gpio_watcher();
 800137c:	f000 f876 	bl	800146c <gpio_watcher>
   return TRUE;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20002267 	.word	0x20002267

0800138c <switch_mode_sda_scl>:


extern BOOLEAN switch_mode_sda_scl(SDA_SCL_MODE mode){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <switch_mode_sda_scl+0x16>
 800139c:	2b01      	cmp	r3, #1
 800139e:	d00d      	beq.n	80013bc <switch_mode_sda_scl+0x30>
 80013a0:	e01f      	b.n	80013e2 <switch_mode_sda_scl+0x56>
	case GPIO_M:
		printf("SDA/SCL has GPIO_MODE\n");
 80013a2:	482a      	ldr	r0, [pc, #168]	; (800144c <switch_mode_sda_scl+0xc0>)
 80013a4:	f00b f94e 	bl	800c644 <puts>
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <switch_mode_sda_scl+0xc4>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <switch_mode_sda_scl+0xc8>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	605a      	str	r2, [r3, #4]
		current_mode = GPIO_M;
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <switch_mode_sda_scl+0xcc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
		break;
 80013ba:	e017      	b.n	80013ec <switch_mode_sda_scl+0x60>
	case I2C_M:
		printf("SDA/SCL has I2C_MODE\n");
 80013bc:	4827      	ldr	r0, [pc, #156]	; (800145c <switch_mode_sda_scl+0xd0>)
 80013be:	f00b f941 	bl	800c644 <puts>
	    GPIO_InitStruct_i2c_sda.Alternate = GPIO_AF4_I2C1;
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <switch_mode_sda_scl+0xc8>)
 80013c4:	2204      	movs	r2, #4
 80013c6:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Alternate = GPIO_AF4_I2C1;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <switch_mode_sda_scl+0xc4>)
 80013ca:	2204      	movs	r2, #4
 80013cc:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_AF_OD;
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <switch_mode_sda_scl+0xc4>)
 80013d0:	2212      	movs	r2, #18
 80013d2:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_AF_OD;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <switch_mode_sda_scl+0xc8>)
 80013d6:	2212      	movs	r2, #18
 80013d8:	605a      	str	r2, [r3, #4]
		current_mode = I2C_M;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <switch_mode_sda_scl+0xcc>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
        break;
 80013e0:	e004      	b.n	80013ec <switch_mode_sda_scl+0x60>
	default:
		printf("Unknown state for SDA/SCL pins\n");
 80013e2:	481f      	ldr	r0, [pc, #124]	; (8001460 <switch_mode_sda_scl+0xd4>)
 80013e4:	f00b f92e 	bl	800c644 <puts>
		return FALSE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e02a      	b.n	8001442 <switch_mode_sda_scl+0xb6>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <switch_mode_sda_scl+0xd8>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <switch_mode_sda_scl+0xd8>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <switch_mode_sda_scl+0xd8>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct_i2c_scl.Pin = SCL;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <switch_mode_sda_scl+0xc4>)
 800140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct_i2c_sda.Pin = SDA;
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <switch_mode_sda_scl+0xc8>)
 8001412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001416:	601a      	str	r2, [r3, #0]

	GPIO_InitStruct_i2c_scl.Pull = GPIO_PULLUP;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <switch_mode_sda_scl+0xc4>)
 800141a:	2201      	movs	r2, #1
 800141c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct_i2c_sda.Pull = GPIO_PULLUP;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <switch_mode_sda_scl+0xc8>)
 8001420:	2201      	movs	r2, #1
 8001422:	609a      	str	r2, [r3, #8]

	GPIO_InitStruct_i2c_scl.Speed = GPIO_SPEED_HIGH;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <switch_mode_sda_scl+0xc4>)
 8001426:	2203      	movs	r2, #3
 8001428:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct_i2c_sda.Speed = GPIO_SPEED_HIGH;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <switch_mode_sda_scl+0xc8>)
 800142c:	2203      	movs	r2, #3
 800142e:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct_i2c_sda);
 8001430:	4908      	ldr	r1, [pc, #32]	; (8001454 <switch_mode_sda_scl+0xc8>)
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <switch_mode_sda_scl+0xdc>)
 8001434:	f000 ffe6 	bl	8002404 <HAL_GPIO_Init>
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct_i2c_scl);
 8001438:	4905      	ldr	r1, [pc, #20]	; (8001450 <switch_mode_sda_scl+0xc4>)
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <switch_mode_sda_scl+0xdc>)
 800143c:	f000 ffe2 	bl	8002404 <HAL_GPIO_Init>
	return TRUE;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	0800d958 	.word	0x0800d958
 8001450:	200022a4 	.word	0x200022a4
 8001454:	20002290 	.word	0x20002290
 8001458:	20000015 	.word	0x20000015
 800145c:	0800d970 	.word	0x0800d970
 8001460:	0800d988 	.word	0x0800d988
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400

0800146c <gpio_watcher>:

static void gpio_watcher(void){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	while(is_init){
 8001470:	bf00      	nop
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <gpio_watcher+0x1c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1fb      	bne.n	8001472 <gpio_watcher+0x6>

	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20002267 	.word	0x20002267

0800148c <init_io>:

extern void gpio_stop(void){
	is_init = FALSE;
}

static BOOLEAN init_io(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <init_io+0x100>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a3c      	ldr	r2, [pc, #240]	; (800158c <init_io+0x100>)
 800149c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <init_io+0x100>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <init_io+0x100>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a35      	ldr	r2, [pc, #212]	; (800158c <init_io+0x100>)
 80014b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <init_io+0x100>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_SDIO_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <init_io+0x100>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a2e      	ldr	r2, [pc, #184]	; (800158c <init_io+0x100>)
 80014d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <init_io+0x100>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

	 // Инит кнопки
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <init_io+0x100>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a27      	ldr	r2, [pc, #156]	; (800158c <init_io+0x100>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <init_io+0x100>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
	 GPIO_InitStruct_green_led.Pin = BLUE_BUTTON;
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <init_io+0x104>)
 8001504:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001508:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_green_led.Mode = GPIO_MODE_INPUT; // вход
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <init_io+0x104>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_green_led.Pull = GPIO_PULLDOWN;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <init_io+0x104>)
 8001512:	2202      	movs	r2, #2
 8001514:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_green_led.Speed = GPIO_SPEED_HIGH;
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <init_io+0x104>)
 8001518:	2203      	movs	r2, #3
 800151a:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(BLUE_BUTTON_PORT, &GPIO_InitStruct_green_led);
 800151c:	491c      	ldr	r1, [pc, #112]	; (8001590 <init_io+0x104>)
 800151e:	481d      	ldr	r0, [pc, #116]	; (8001594 <init_io+0x108>)
 8001520:	f000 ff70 	bl	8002404 <HAL_GPIO_Init>

	 // Инит индикатора
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <init_io+0x100>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <init_io+0x100>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <init_io+0x100>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
	 GPIO_InitStruct_blue_button.Pin = LED_GREEN;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <init_io+0x10c>)
 8001542:	2220      	movs	r2, #32
 8001544:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_blue_button.Mode = GPIO_MODE_OUTPUT_PP; // выход
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <init_io+0x10c>)
 8001548:	2201      	movs	r2, #1
 800154a:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_blue_button.Pull = GPIO_NOPULL;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <init_io+0x10c>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_blue_button.Speed = GPIO_SPEED_HIGH;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <init_io+0x10c>)
 8001554:	2203      	movs	r2, #3
 8001556:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct_blue_button);
 8001558:	490f      	ldr	r1, [pc, #60]	; (8001598 <init_io+0x10c>)
 800155a:	4810      	ldr	r0, [pc, #64]	; (800159c <init_io+0x110>)
 800155c:	f000 ff52 	bl	8002404 <HAL_GPIO_Init>


	 // Инит питания
	 GPIO_InitStruct_power.Pin = POWER;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <init_io+0x114>)
 8001562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001566:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_power.Mode = GPIO_MODE_OUTPUT_PP; // выход
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <init_io+0x114>)
 800156a:	2201      	movs	r2, #1
 800156c:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_power.Pull = GPIO_PULLDOWN;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <init_io+0x114>)
 8001570:	2202      	movs	r2, #2
 8001572:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_power.Speed = GPIO_SPEED_HIGH;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <init_io+0x114>)
 8001576:	2203      	movs	r2, #3
 8001578:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(POWER_PORT, &GPIO_InitStruct_power);
 800157a:	4909      	ldr	r1, [pc, #36]	; (80015a0 <init_io+0x114>)
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <init_io+0x110>)
 800157e:	f000 ff41 	bl	8002404 <HAL_GPIO_Init>

	 return TRUE;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	20002268 	.word	0x20002268
 8001594:	40020800 	.word	0x40020800
 8001598:	2000227c 	.word	0x2000227c
 800159c:	40020000 	.word	0x40020000
 80015a0:	200022b8 	.word	0x200022b8

080015a4 <set_power>:

extern void set_power(GPIO_PinState state){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
     HAL_GPIO_WritePin(POWER_PORT, POWER, state);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <set_power+0x20>)
 80015b8:	f001 f8c0 	bl	800273c <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020000 	.word	0x40020000

080015c8 <set_sda>:

extern void set_sda(GPIO_PinState state){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
     if(current_mode != GPIO_M) return;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <set_sda+0x2c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d107      	bne.n	80015ea <set_sda+0x22>
	 HAL_GPIO_WritePin(SDA_PORT, SDA, state);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	461a      	mov	r2, r3
 80015de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <set_sda+0x30>)
 80015e4:	f001 f8aa 	bl	800273c <HAL_GPIO_WritePin>
 80015e8:	e000      	b.n	80015ec <set_sda+0x24>
     if(current_mode != GPIO_M) return;
 80015ea:	bf00      	nop
}
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000015 	.word	0x20000015
 80015f8:	40020400 	.word	0x40020400

080015fc <set_scl>:

extern void set_scl(GPIO_PinState state){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	 if(current_mode != GPIO_M) return;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <set_scl+0x2c>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d107      	bne.n	800161e <set_scl+0x22>
	 HAL_GPIO_WritePin(SCL_PORT, SCL, state);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	461a      	mov	r2, r3
 8001612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <set_scl+0x30>)
 8001618:	f001 f890 	bl	800273c <HAL_GPIO_WritePin>
 800161c:	e000      	b.n	8001620 <set_scl+0x24>
	 if(current_mode != GPIO_M) return;
 800161e:	bf00      	nop
}
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000015 	.word	0x20000015
 800162c:	40020400 	.word	0x40020400

08001630 <set_green_led>:

extern GPIO_PinState get_current_green_led(){
	 return HAL_GPIO_ReadPin(LED_GREEN_PORT, LED_GREEN);
}

extern void set_green_led(GPIO_PinState state){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN, state);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	461a      	mov	r2, r3
 800163e:	2120      	movs	r1, #32
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <set_green_led+0x20>)
 8001642:	f001 f87b 	bl	800273c <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020000 	.word	0x40020000

08001654 <get_current_button_state>:

extern GPIO_PinState get_current_button_state(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLUE_BUTTON_PORT, BLUE_BUTTON);
 8001658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <get_current_button_state+0x14>)
 800165e:	f001 f855 	bl	800270c <HAL_GPIO_ReadPin>
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020800 	.word	0x40020800

0800166c <i2c_init>:
#include "i2c_manager.h"

static I2C_HandleTypeDef hi2c1;

extern BOOLEAN i2c_init(void){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <i2c_init+0x58>)
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <i2c_init+0x5c>)
 8001674:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <i2c_init+0x58>)
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <i2c_init+0x60>)
 800167a:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <i2c_init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0x0;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <i2c_init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <i2c_init+0x58>)
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <i2c_init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <i2c_init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <i2c_init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <i2c_init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]

	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <i2c_init+0x58>)
 80016aa:	f001 f861 	bl	8002770 <HAL_I2C_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <i2c_init+0x4c>
	  {
	    return FALSE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e003      	b.n	80016c0 <i2c_init+0x54>
	  }
	  switch_mode_sda_scl(I2C_M);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fe67 	bl	800138c <switch_mode_sda_scl>
      return TRUE;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200022cc 	.word	0x200022cc
 80016c8:	40005400 	.word	0x40005400
 80016cc:	00061a80 	.word	0x00061a80

080016d0 <print_hex>:

void print_hex(char *caption, unsigned char *m, int length) {
 80016d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d4:	b08d      	sub	sp, #52	; 0x34
 80016d6:	af02      	add	r7, sp, #8
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	466b      	mov	r3, sp
 80016e0:	461e      	mov	r6, r3
    int size = sizeof(caption) + 30 + length * 3 + 1;
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	3323      	adds	r3, #35	; 0x23
 80016ec:	61fb      	str	r3, [r7, #28]
    char buf[size];
 80016ee:	69f9      	ldr	r1, [r7, #28]
 80016f0:	1e4b      	subs	r3, r1, #1
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	460a      	mov	r2, r1
 80016f6:	2300      	movs	r3, #0
 80016f8:	4690      	mov	r8, r2
 80016fa:	4699      	mov	r9, r3
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800170c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001710:	460a      	mov	r2, r1
 8001712:	2300      	movs	r3, #0
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	00eb      	lsls	r3, r5, #3
 8001722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001726:	00e2      	lsls	r2, r4, #3
 8001728:	460b      	mov	r3, r1
 800172a:	3307      	adds	r3, #7
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	ebad 0d03 	sub.w	sp, sp, r3
 8001734:	ab02      	add	r3, sp, #8
 8001736:	3300      	adds	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
    unsigned int pos = snprintf(buf, size, "%s [%i]: ", caption, length);
 800173a:	69f9      	ldr	r1, [r7, #28]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <print_hex+0xc4>)
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f00a ff85 	bl	800c654 <sniprintf>
 800174a:	4603      	mov	r3, r0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < length; i++) pos += snprintf(buf + pos, 4, "%2.2X ", m[i]);
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	e012      	b.n	800177a <print_hex+0xaa>
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	18d0      	adds	r0, r2, r3
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <print_hex+0xc8>)
 8001764:	2104      	movs	r1, #4
 8001766:	f00a ff75 	bl	800c654 <sniprintf>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	4413      	add	r3, r2
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	3301      	adds	r3, #1
 8001778:	623b      	str	r3, [r7, #32]
 800177a:	6a3a      	ldr	r2, [r7, #32]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	dbe8      	blt.n	8001754 <print_hex+0x84>
    printf("%s\n", buf);
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f00a ff5e 	bl	800c644 <puts>
 8001788:	46b5      	mov	sp, r6
}
 800178a:	bf00      	nop
 800178c:	372c      	adds	r7, #44	; 0x2c
 800178e:	46bd      	mov	sp, r7
 8001790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001794:	0800d9a8 	.word	0x0800d9a8
 8001798:	0800d9b4 	.word	0x0800d9b4

0800179c <i2c_send_data_to_device>:
     }
     print_hex("read data: ", buffer, buffer_size);
     return TRUE;
}

extern BOOLEAN i2c_send_data_to_device(uint16_t device_addr, uint8_t *data, uint16_t data_size){
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	4613      	mov	r3, r2
 80017aa:	80bb      	strh	r3, [r7, #4]
    if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) device_addr << 1, &data[0], data_size, HAL_MAX_DELAY) != HAL_OK){
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	b299      	uxth	r1, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <i2c_send_data_to_device+0x4c>)
 80017be:	f001 f91b 	bl	80029f8 <HAL_I2C_Master_Transmit>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <i2c_send_data_to_device+0x36>
    	printf("Error during data transfer\n");
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <i2c_send_data_to_device+0x50>)
 80017ca:	f00a ff3b 	bl	800c644 <puts>
    	return FALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e006      	b.n	80017e0 <i2c_send_data_to_device+0x44>
    }
    print_hex("ack data: ", data, data_size);
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	461a      	mov	r2, r3
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <i2c_send_data_to_device+0x54>)
 80017da:	f7ff ff79 	bl	80016d0 <print_hex>
	return TRUE;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200022cc 	.word	0x200022cc
 80017ec:	0800da10 	.word	0x0800da10
 80017f0:	0800d9e8 	.word	0x0800d9e8

080017f4 <start_indication>:
static UINT8 state = 0;
static void reset_task(void);
static void firmware_update(void);


extern void start_indication(void *argument){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	while(1){
        switch(current_task){
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <start_indication+0x1c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <start_indication+0x16>
             case 1:
            	 firmware_update();
 8001804:	f000 f806 	bl	8001814 <firmware_update>
            	 break;
 8001808:	e000      	b.n	800180c <start_indication+0x18>
             default:
            	 break;
 800180a:	bf00      	nop
        switch(current_task){
 800180c:	e7f6      	b.n	80017fc <start_indication+0x8>
 800180e:	bf00      	nop
 8001810:	20002320 	.word	0x20002320

08001814 <firmware_update>:
        }
	}
}

static void firmware_update(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	if(state == 0){
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <firmware_update+0x30>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d106      	bne.n	800182e <firmware_update+0x1a>
		state = 1;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <firmware_update+0x30>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_RESET);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff ff02 	bl	8001630 <set_green_led>
 800182c:	e005      	b.n	800183a <firmware_update+0x26>
	} else {
	    state = 0;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <firmware_update+0x30>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_SET);
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff fefb 	bl	8001630 <set_green_led>
	}
	osDelay(50);
 800183a:	2032      	movs	r0, #50	; 0x32
 800183c:	f007 fa0b 	bl	8008c56 <osDelay>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20002321 	.word	0x20002321

08001848 <set_indication_task>:

extern void set_indication_task(UINT8 cmd){
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	reset_task();
 8001852:	f000 f809 	bl	8001868 <reset_task>
	current_task = cmd;
 8001856:	4a03      	ldr	r2, [pc, #12]	; (8001864 <set_indication_task+0x1c>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	7013      	strb	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20002320 	.word	0x20002320

08001868 <reset_task>:

static void reset_task(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	state = 0;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <reset_task+0x14>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
	set_green_led(GPIO_PIN_RESET);
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fedc 	bl	8001630 <set_green_led>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20002321 	.word	0x20002321

08001880 <init_tasks>:
static void init_gpio_task(void *argument);
static void init_i2c_task(void *argument);
static void init_ind_task(void *argument);


extern BOOLEAN init_tasks(void){
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
	  osKernelInitialize();
 8001886:	f007 f8d3 	bl	8008a30 <osKernelInitialize>

	  UINT8 fail_cnt = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	71fb      	strb	r3, [r7, #7]
	  gpio_taskHandle = osThreadNew(init_gpio_task, NULL, &gpio_task_attributes);
 800188e:	4a20      	ldr	r2, [pc, #128]	; (8001910 <init_tasks+0x90>)
 8001890:	2100      	movs	r1, #0
 8001892:	4820      	ldr	r0, [pc, #128]	; (8001914 <init_tasks+0x94>)
 8001894:	f007 f94d 	bl	8008b32 <osThreadNew>
 8001898:	4603      	mov	r3, r0
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <init_tasks+0x98>)
 800189c:	6013      	str	r3, [r2, #0]
	  if(gpio_taskHandle == NULL){
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <init_tasks+0x98>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d105      	bne.n	80018b2 <init_tasks+0x32>
		 printf("Error init gpio task\n");
 80018a6:	481d      	ldr	r0, [pc, #116]	; (800191c <init_tasks+0x9c>)
 80018a8:	f00a fecc 	bl	800c644 <puts>
		 fail_cnt++;
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	3301      	adds	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
	  }

	  i2c_taskHandle = osThreadNew(init_i2c_task, NULL, &i2c_task_attributes);
 80018b2:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <init_tasks+0xa0>)
 80018b4:	2100      	movs	r1, #0
 80018b6:	481b      	ldr	r0, [pc, #108]	; (8001924 <init_tasks+0xa4>)
 80018b8:	f007 f93b 	bl	8008b32 <osThreadNew>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <init_tasks+0xa8>)
 80018c0:	6013      	str	r3, [r2, #0]
	  if(i2c_taskHandle == NULL){
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <init_tasks+0xa8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <init_tasks+0x56>
		 printf("Error init i2c task\n");
 80018ca:	4818      	ldr	r0, [pc, #96]	; (800192c <init_tasks+0xac>)
 80018cc:	f00a feba 	bl	800c644 <puts>
		 fail_cnt++;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	3301      	adds	r3, #1
 80018d4:	71fb      	strb	r3, [r7, #7]
	  }

	  ind_taskHandle = osThreadNew(init_ind_task, NULL, &ind_task_attributes);
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <init_tasks+0xb0>)
 80018d8:	2100      	movs	r1, #0
 80018da:	4816      	ldr	r0, [pc, #88]	; (8001934 <init_tasks+0xb4>)
 80018dc:	f007 f929 	bl	8008b32 <osThreadNew>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <init_tasks+0xb8>)
 80018e4:	6013      	str	r3, [r2, #0]
	  if(ind_taskHandle == NULL){
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <init_tasks+0xb8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <init_tasks+0x7a>
	 	 printf("Error init ind task\n");
 80018ee:	4813      	ldr	r0, [pc, #76]	; (800193c <init_tasks+0xbc>)
 80018f0:	f00a fea8 	bl	800c644 <puts>
	 	 fail_cnt++;
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3301      	adds	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
	  }

	  return (fail_cnt == 0) ? TRUE : FALSE;
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	0800db70 	.word	0x0800db70
 8001914:	08001941 	.word	0x08001941
 8001918:	20002324 	.word	0x20002324
 800191c:	0800dab8 	.word	0x0800dab8
 8001920:	0800db94 	.word	0x0800db94
 8001924:	0800196d 	.word	0x0800196d
 8001928:	20002328 	.word	0x20002328
 800192c:	0800dad0 	.word	0x0800dad0
 8001930:	0800dbb8 	.word	0x0800dbb8
 8001934:	08001955 	.word	0x08001955
 8001938:	2000232c 	.word	0x2000232c
 800193c:	0800dae4 	.word	0x0800dae4

08001940 <init_gpio_task>:


static void init_gpio_task(void *argument){
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	gpio_start();
 8001948:	f7ff fd0a 	bl	8001360 <gpio_start>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <init_ind_task>:

static void init_ind_task(void *argument){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	start_indication(NULL);
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ff49 	bl	80017f4 <start_indication>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <init_i2c_task>:



static BOOLEAN is_start = FALSE;

static void init_i2c_task(void *argument){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	set_power(GPIO_PIN_SET);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fe15 	bl	80015a4 <set_power>
	osDelay(1000);
 800197a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800197e:	f007 f96a 	bl	8008c56 <osDelay>
	while(1){
		osDelay(100);
 8001982:	2064      	movs	r0, #100	; 0x64
 8001984:	f007 f967 	bl	8008c56 <osDelay>
		if(get_current_button_state() == GPIO_PIN_RESET){
 8001988:	f7ff fe64 	bl	8001654 <get_current_button_state>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f7      	bne.n	8001982 <init_i2c_task+0x16>
			if(!is_start){
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <init_i2c_task+0x4c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f3      	bne.n	8001982 <init_i2c_task+0x16>
				is_start = TRUE;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <init_i2c_task+0x4c>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
				set_indication_task(1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff ff51 	bl	8001848 <set_indication_task>
				update_firmware();
 80019a6:	f7ff fb31 	bl	800100c <update_firmware>
				is_start = FALSE;
 80019aa:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <init_i2c_task+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
				set_indication_task(0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff ff49 	bl	8001848 <set_indication_task>
		osDelay(100);
 80019b6:	e7e4      	b.n	8001982 <init_i2c_task+0x16>
 80019b8:	20002330 	.word	0x20002330

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_Init+0x40>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_Init+0x40>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x40>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f94f 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7fe fea0 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f967 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f000 f92f 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	2000001c 	.word	0x2000001c
 8001a5c:	20000018 	.word	0x20000018

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	2000001c 	.word	0x2000001c
 8001a84:	20002334 	.word	0x20002334

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20002334 	.word	0x20002334

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000001c 	.word	0x2000001c

08001ae8 <__NVIC_SetPriorityGrouping>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff3e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff31 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa2 	bl	8001c44 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff feb6 	bl	8001a88 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e099      	b.n	8001e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d48:	e00f      	b.n	8001d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4a:	f7ff fe9d 	bl	8001a88 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d908      	bls.n	8001d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e078      	b.n	8001e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e8      	bne.n	8001d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_DMA_Init+0x158>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 0307 	bic.w	r3, r3, #7
 8001dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d117      	bne.n	8001e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa7b 	bl	800230c <DMA_CheckFifoParam>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2240      	movs	r2, #64	; 0x40
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e016      	b.n	8001e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fa32 	bl	80022a0 <DMA_CalcBaseAndBitshift>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	223f      	movs	r2, #63	; 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	f010803f 	.word	0xf010803f

08001e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_DMA_Start_IT+0x26>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e040      	b.n	8001f10 <HAL_DMA_Start_IT+0xa8>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d12f      	bne.n	8001f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f9c4 	bl	8002244 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	223f      	movs	r2, #63	; 0x3f
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0216 	orr.w	r2, r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e005      	b.n	8001f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f24:	4b8e      	ldr	r3, [pc, #568]	; (8002160 <HAL_DMA_IRQHandler+0x248>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a8e      	ldr	r2, [pc, #568]	; (8002164 <HAL_DMA_IRQHandler+0x24c>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a9b      	lsrs	r3, r3, #10
 8001f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2208      	movs	r2, #8
 8001f44:	409a      	lsls	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01a      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2208      	movs	r2, #8
 8001f72:	409a      	lsls	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2201      	movs	r2, #1
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	2204      	movs	r2, #4
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d043      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03c      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	2210      	movs	r2, #16
 8002014:	409a      	lsls	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d018      	beq.n	800205a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d024      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e01f      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e016      	b.n	8002088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0208 	bic.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2220      	movs	r2, #32
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 808f 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8087 	beq.w	80021b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2220      	movs	r2, #32
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d136      	bne.n	8002130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0216 	bic.w	r2, r2, #22
 80020d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x1da>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0208 	bic.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	223f      	movs	r2, #63	; 0x3f
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002122:	2b00      	cmp	r3, #0
 8002124:	d07e      	beq.n	8002224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
        }
        return;
 800212e:	e079      	b.n	8002224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01d      	beq.n	800217a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	2b00      	cmp	r3, #0
 8002152:	d031      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e02c      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
 800215e:	bf00      	nop
 8002160:	20000000 	.word	0x20000000
 8002164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
 8002178:	e01e      	b.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10f      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d032      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3301      	adds	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d307      	bcc.n	8002200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f2      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x2cc>
 80021fe:	e000      	b.n	8002202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
 8002222:	e000      	b.n	8002226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002224:	bf00      	nop
    }
  }
}
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002260:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d108      	bne.n	8002284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002282:	e007      	b.n	8002294 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3b10      	subs	r3, #16
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <DMA_CalcBaseAndBitshift+0x64>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <DMA_CalcBaseAndBitshift+0x68>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d909      	bls.n	80022e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	659a      	str	r2, [r3, #88]	; 0x58
 80022e0:	e007      	b.n	80022f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	aaaaaaab 	.word	0xaaaaaaab
 8002308:	0800dbdc 	.word	0x0800dbdc

0800230c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11f      	bne.n	8002366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d856      	bhi.n	80023da <DMA_CheckFifoParam+0xce>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <DMA_CheckFifoParam+0x28>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002345 	.word	0x08002345
 8002338:	08002357 	.word	0x08002357
 800233c:	08002345 	.word	0x08002345
 8002340:	080023db 	.word	0x080023db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d046      	beq.n	80023de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002354:	e043      	b.n	80023de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800235e:	d140      	bne.n	80023e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002364:	e03d      	b.n	80023e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	d121      	bne.n	80023b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d837      	bhi.n	80023e6 <DMA_CheckFifoParam+0xda>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <DMA_CheckFifoParam+0x70>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	08002393 	.word	0x08002393
 8002384:	0800238d 	.word	0x0800238d
 8002388:	080023a5 	.word	0x080023a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e030      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d025      	beq.n	80023ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a2:	e022      	b.n	80023ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ac:	d11f      	bne.n	80023ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023b2:	e01c      	b.n	80023ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d903      	bls.n	80023c2 <DMA_CheckFifoParam+0xb6>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d003      	beq.n	80023c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023c0:	e018      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      break;
 80023c6:	e015      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e00b      	b.n	80023f2 <DMA_CheckFifoParam+0xe6>
      break;
 80023da:	bf00      	nop
 80023dc:	e00a      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e008      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e006      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e6:	bf00      	nop
 80023e8:	e004      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023ea:	bf00      	nop
 80023ec:	e002      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
    }
  } 
  
  return status; 
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e159      	b.n	80026d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8148 	bne.w	80026ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a2 	beq.w	80026ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_GPIO_Init+0x2ec>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a49      	ldr	r2, [pc, #292]	; (80026f4 <HAL_GPIO_Init+0x2f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x202>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	; (80026f8 <HAL_GPIO_Init+0x2f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x1fe>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a47      	ldr	r2, [pc, #284]	; (80026fc <HAL_GPIO_Init+0x2f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x1fa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a46      	ldr	r2, [pc, #280]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x1f6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	; (8002704 <HAL_GPIO_Init+0x300>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x1f2>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002618:	4935      	ldr	r1, [pc, #212]	; (80026f0 <HAL_GPIO_Init+0x2ec>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264a:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002674:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_GPIO_Init+0x304>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269e:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_GPIO_Init+0x304>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f aea2 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e001      	b.n	800272e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fd fff8 	bl	800078c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f001 f888 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	; (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	; (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	; (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	; (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	461a      	mov	r2, r3
 8002a04:	460b      	mov	r3, r1
 8002a06:	817b      	strh	r3, [r7, #10]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff f83c 	bl	8001a88 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	f040 80e0 	bne.w	8002be0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2319      	movs	r3, #25
 8002a26:	2201      	movs	r2, #1
 8002a28:	4970      	ldr	r1, [pc, #448]	; (8002bec <HAL_I2C_Master_Transmit+0x1f4>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f964 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	e0d3      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x50>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0cc      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d007      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	; 0x21
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a50      	ldr	r2, [pc, #320]	; (8002bf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f89c 	bl	8002bf4 <I2C_MasterRequestWrite>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08d      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002adc:	e066      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	6a39      	ldr	r1, [r7, #32]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f9de 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d107      	bne.n	8002b06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06b      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	781a      	ldrb	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_I2C_Master_Transmit+0x188>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	6a39      	ldr	r1, [r7, #32]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f9ce 	bl	8002f26 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e01a      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d194      	bne.n	8002ade <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	00100002 	.word	0x00100002
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d006      	beq.n	8002c1e <I2C_MasterRequestWrite+0x2a>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d003      	beq.n	8002c1e <I2C_MasterRequestWrite+0x2a>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c1c:	d108      	bne.n	8002c30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e00b      	b.n	8002c48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	2b12      	cmp	r3, #18
 8002c36:	d107      	bne.n	8002c48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f84f 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d103      	bne.n	8002c78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e035      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c84:	d108      	bne.n	8002c98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c86:	897b      	ldrh	r3, [r7, #10]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	e01b      	b.n	8002cd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c98:	897b      	ldrh	r3, [r7, #10]
 8002c9a:	11db      	asrs	r3, r3, #7
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 0306 	and.w	r3, r3, #6
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f063 030f 	orn	r3, r3, #15
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <I2C_MasterRequestWrite+0xfc>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f875 	bl	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e010      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4907      	ldr	r1, [pc, #28]	; (8002cf4 <I2C_MasterRequestWrite+0x100>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f865 	bl	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	00010008 	.word	0x00010008
 8002cf4:	00010002 	.word	0x00010002

08002cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d08:	e025      	b.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d021      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fe feb9 	bl	8001a88 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d116      	bne.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e023      	b.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10d      	bne.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	e00c      	b.n	8002d96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0b6      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db4:	e051      	b.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d123      	bne.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e046      	b.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d021      	beq.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fe37 	bl	8001a88 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d116      	bne.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e020      	b.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d10c      	bne.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	e00b      	b.n	8002e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	43da      	mvns	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d18d      	bne.n	8002db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb0:	e02d      	b.n	8002f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f878 	bl	8002fa8 <I2C_IsAcknowledgeFailed>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e02d      	b.n	8002f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d021      	beq.n	8002f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe fddd 	bl	8001a88 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d116      	bne.n	8002f0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e007      	b.n	8002f1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	2b80      	cmp	r3, #128	; 0x80
 8002f1a:	d1ca      	bne.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f32:	e02d      	b.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f837 	bl	8002fa8 <I2C_IsAcknowledgeFailed>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e02d      	b.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d021      	beq.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4c:	f7fe fd9c 	bl	8001a88 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d302      	bcc.n	8002f62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d116      	bne.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e007      	b.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d1ca      	bne.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	d11b      	bne.n	8002ff8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e267      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d075      	beq.n	8003112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d00c      	beq.n	800304c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303a:	2b08      	cmp	r3, #8
 800303c:	d112      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303e:	4b82      	ldr	r3, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304a:	d10b      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	4b7e      	ldr	r3, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05b      	beq.n	8003110 <HAL_RCC_OscConfig+0x108>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d157      	bne.n	8003110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e242      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x74>
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x98>
 8003086:	4b70      	ldr	r3, [pc, #448]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6f      	ldr	r2, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6c      	ldr	r2, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 80030a0:	4b69      	ldr	r3, [pc, #420]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fce2 	bl	8001a88 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fcde 	bl	8001a88 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e207      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xc0>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fcce 	bl	8001a88 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fcca 	bl	8001a88 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1f3      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0xe8>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1c7      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x244>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe fc83 	bl	8001a88 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003186:	f7fe fc7f 	bl	8001a88 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1a8      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4925      	ldr	r1, [pc, #148]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x244>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fc62 	bl	8001a88 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe fc5e 	bl	8001a88 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e187      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d036      	beq.n	8003260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe fc42 	bl	8001a88 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7fe fc3e 	bl	8001a88 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e167      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x200>
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fe fc2b 	bl	8001a88 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003236:	f7fe fc27 	bl	8001a88 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e150      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ea      	bne.n	8003236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8097 	beq.w	800339c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b7d      	ldr	r3, [pc, #500]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b77      	ldr	r3, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b74      	ldr	r3, [pc, #464]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a73      	ldr	r2, [pc, #460]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fbe7 	bl	8001a88 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fe fbe3 	bl	8001a88 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e10c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2ea>
 80032e4:	4b64      	ldr	r3, [pc, #400]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a63      	ldr	r2, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x30c>
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a5e      	ldr	r2, [pc, #376]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b5c      	ldr	r3, [pc, #368]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a5b      	ldr	r2, [pc, #364]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 8003314:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a57      	ldr	r2, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe fba8 	bl	8001a88 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe fba4 	bl	8001a88 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0cb      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b49      	ldr	r3, [pc, #292]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x334>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fe fb92 	bl	8001a88 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fe fb8e 	bl	8001a88 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0b5      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4a38      	ldr	r2, [pc, #224]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a1 	beq.w	80034e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d05c      	beq.n	800346c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d141      	bne.n	800343e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fb62 	bl	8001a88 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fb5e 	bl	8001a88 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e087      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	491b      	ldr	r1, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fb37 	bl	8001a88 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe fb33 	bl	8001a88 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e05c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x416>
 800343c:	e054      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fb20 	bl	8001a88 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fb1c 	bl	8001a88 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e045      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x444>
 800346a:	e03d      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e038      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x4ec>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d028      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d11a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0cc      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b68      	ldr	r3, [pc, #416]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d90c      	bls.n	8003534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b65      	ldr	r3, [pc, #404]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d044      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e067      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4934      	ldr	r1, [pc, #208]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7fe fa4e 	bl	8001a88 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fe fa4a 	bl	8001a88 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e04f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d20c      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f9ae 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	0800db58 	.word	0x0800db58
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000018 	.word	0x20000018

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b094      	sub	sp, #80	; 0x50
 80036ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	647b      	str	r3, [r7, #68]	; 0x44
 80036d0:	2300      	movs	r3, #0
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d4:	2300      	movs	r3, #0
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036dc:	4b79      	ldr	r3, [pc, #484]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d00d      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f200 80e1 	bhi.w	80038b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x3a>
 80036f6:	e0db      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036fc:	e0db      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003702:	e0d8      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4b6f      	ldr	r3, [pc, #444]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370e:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d063      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
 8003724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
 8003732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003736:	4622      	mov	r2, r4
 8003738:	462b      	mov	r3, r5
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	0159      	lsls	r1, r3, #5
 8003744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003748:	0150      	lsls	r0, r2, #5
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4621      	mov	r1, r4
 8003750:	1a51      	subs	r1, r2, r1
 8003752:	6139      	str	r1, [r7, #16]
 8003754:	4629      	mov	r1, r5
 8003756:	eb63 0301 	sbc.w	r3, r3, r1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003768:	4659      	mov	r1, fp
 800376a:	018b      	lsls	r3, r1, #6
 800376c:	4651      	mov	r1, sl
 800376e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003772:	4651      	mov	r1, sl
 8003774:	018a      	lsls	r2, r1, #6
 8003776:	4651      	mov	r1, sl
 8003778:	ebb2 0801 	subs.w	r8, r2, r1
 800377c:	4659      	mov	r1, fp
 800377e:	eb63 0901 	sbc.w	r9, r3, r1
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800378e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003796:	4690      	mov	r8, r2
 8003798:	4699      	mov	r9, r3
 800379a:	4623      	mov	r3, r4
 800379c:	eb18 0303 	adds.w	r3, r8, r3
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	462b      	mov	r3, r5
 80037a4:	eb49 0303 	adc.w	r3, r9, r3
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037b6:	4629      	mov	r1, r5
 80037b8:	024b      	lsls	r3, r1, #9
 80037ba:	4621      	mov	r1, r4
 80037bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037c0:	4621      	mov	r1, r4
 80037c2:	024a      	lsls	r2, r1, #9
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ca:	2200      	movs	r2, #0
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037d4:	f7fc fd54 	bl	8000280 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4613      	mov	r3, r2
 80037de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e0:	e058      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	2200      	movs	r2, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	4611      	mov	r1, r2
 80037ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	f04f 0000 	mov.w	r0, #0
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	0159      	lsls	r1, r3, #5
 800380a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800380e:	0150      	lsls	r0, r2, #5
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4641      	mov	r1, r8
 8003816:	ebb2 0a01 	subs.w	sl, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800382c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003834:	ebb2 040a 	subs.w	r4, r2, sl
 8003838:	eb63 050b 	sbc.w	r5, r3, fp
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	00eb      	lsls	r3, r5, #3
 8003846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384a:	00e2      	lsls	r2, r4, #3
 800384c:	4614      	mov	r4, r2
 800384e:	461d      	mov	r5, r3
 8003850:	4643      	mov	r3, r8
 8003852:	18e3      	adds	r3, r4, r3
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	464b      	mov	r3, r9
 8003858:	eb45 0303 	adc.w	r3, r5, r3
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386a:	4629      	mov	r1, r5
 800386c:	028b      	lsls	r3, r1, #10
 800386e:	4621      	mov	r1, r4
 8003870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003874:	4621      	mov	r1, r4
 8003876:	028a      	lsls	r2, r1, #10
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387e:	2200      	movs	r2, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	61fa      	str	r2, [r7, #28]
 8003884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003888:	f7fc fcfa 	bl	8000280 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3750      	adds	r7, #80	; 0x50
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038ec:	f7ff fff0 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	; (800390c <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	0800db68 	.word	0x0800db68

08003910 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fc ff71 	bl	800081c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2203      	movs	r2, #3
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f814 	bl	8003970 <HAL_SD_InitCard>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e00a      	b.n	8003968 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af04      	add	r7, sp, #16
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800398c:	2376      	movs	r3, #118	; 0x76
 800398e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681d      	ldr	r5, [r3, #0]
 8003994:	466c      	mov	r4, sp
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800399e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a8:	4628      	mov	r0, r5
 80039aa:	f001 f84a 	bl	8004a42 <SDIO_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80039b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e04f      	b.n	8003a60 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_SD_InitCard+0xf8>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f871 	bl	8004ab2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80039d0:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_SD_InitCard+0xf8>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80039d6:	2002      	movs	r0, #2
 80039d8:	f7fe f862 	bl	8001aa0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fe11 	bl	8004604 <SD_PowerON>
 80039e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e02e      	b.n	8003a60 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fd30 	bl	8004468 <SD_InitCard>
 8003a08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e01b      	b.n	8003a60 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f8d0 	bl	8004bd6 <SDMMC_CmdBlockLength>
 8003a36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00f      	beq.n	8003a5e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_SD_InitCard+0xfc>)
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bdb0      	pop	{r4, r5, r7, pc}
 8003a68:	422580a0 	.word	0x422580a0
 8003a6c:	004005ff 	.word	0x004005ff

08003a70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	; 0x30
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0c0      	b.n	8003c1a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f040 80b9 	bne.w	8003c18 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d907      	bls.n	8003aca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0a7      	b.n	8003c1a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2203      	movs	r2, #3
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a4c      	ldr	r2, [pc, #304]	; (8003c24 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a4b      	ldr	r2, [pc, #300]	; (8003c28 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003afc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	2200      	movs	r2, #0
 8003b04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3380      	adds	r3, #128	; 0x80
 8003b34:	4619      	mov	r1, r3
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	025b      	lsls	r3, r3, #9
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	f7fe f993 	bl	8001e68 <HAL_DMA_Start_IT>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d017      	beq.n	8003b78 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e050      	b.n	8003c1a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003b78:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d002      	beq.n	8003b8c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	025b      	lsls	r3, r3, #9
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	025b      	lsls	r3, r3, #9
 8003b96:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b98:	2390      	movs	r3, #144	; 0x90
 8003b9a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f107 0210 	add.w	r2, r7, #16
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 ffe3 	bl	8004b7e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d90a      	bls.n	8003bd4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2282      	movs	r2, #130	; 0x82
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f847 	bl	8004c5e <SDMMC_CmdReadMultiBlock>
 8003bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003bd2:	e009      	b.n	8003be8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2281      	movs	r2, #129	; 0x81
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 f81a 	bl	8004c1a <SDMMC_CmdReadSingleBlock>
 8003be6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d012      	beq.n	8003c14 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e002      	b.n	8003c1a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3730      	adds	r7, #48	; 0x30
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	08004353 	.word	0x08004353
 8003c28:	080043c5 	.word	0x080043c5
 8003c2c:	004005ff 	.word	0x004005ff
 8003c30:	4225858c 	.word	0x4225858c

08003c34 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	; 0x30
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d107      	bne.n	8003c5c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0c5      	b.n	8003de8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	f040 80be 	bne.w	8003de6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	441a      	add	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d907      	bls.n	8003c8e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0ac      	b.n	8003de8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2203      	movs	r2, #3
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	4a4e      	ldr	r2, [pc, #312]	; (8003df0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	4a4d      	ldr	r2, [pc, #308]	; (8003df4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003cc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	025b      	lsls	r3, r3, #9
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d90a      	bls.n	8003cf4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	22a0      	movs	r2, #160	; 0xa0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fffb 	bl	8004ce6 <SDMMC_CmdWriteMultiBlock>
 8003cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003cf2:	e009      	b.n	8003d08 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2290      	movs	r2, #144	; 0x90
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 ffce 	bl	8004ca2 <SDMMC_CmdWriteSingleBlock>
 8003d06:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a39      	ldr	r2, [pc, #228]	; (8003df8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e059      	b.n	8003de8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3380      	adds	r3, #128	; 0x80
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	025b      	lsls	r3, r3, #9
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	f7fe f879 	bl	8001e68 <HAL_DMA_Start_IT>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01c      	beq.n	8003db6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003d8a:	f023 0302 	bic.w	r3, r3, #2
 8003d8e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e018      	b.n	8003de8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	025b      	lsls	r3, r3, #9
 8003dc0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003dc2:	2390      	movs	r3, #144	; 0x90
 8003dc4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f107 0210 	add.w	r2, r7, #16
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fece 	bl	8004b7e <SDIO_ConfigData>

      return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	; 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08004329 	.word	0x08004329
 8003df4:	080043c5 	.word	0x080043c5
 8003df8:	004005ff 	.word	0x004005ff
 8003dfc:	4225858c 	.word	0x4225858c

08003e00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e22:	0f9b      	lsrs	r3, r3, #30
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2e:	0e9b      	lsrs	r3, r3, #26
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e40:	0e1b      	lsrs	r3, r3, #24
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e74:	0d1b      	lsrs	r3, r3, #20
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e92:	0bdb      	lsrs	r3, r3, #15
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea4:	0b9b      	lsrs	r3, r3, #14
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb6:	0b5b      	lsrs	r3, r3, #13
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec8:	0b1b      	lsrs	r3, r3, #12
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d163      	bne.n	8003fac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003eee:	4013      	ands	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ef4:	0f92      	lsrs	r2, r2, #30
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f00:	0edb      	lsrs	r3, r3, #27
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f12:	0e1b      	lsrs	r3, r3, #24
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f24:	0d5b      	lsrs	r3, r3, #21
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f36:	0c9b      	lsrs	r3, r3, #18
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f48:	0bdb      	lsrs	r3, r3, #15
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	7e1b      	ldrb	r3, [r3, #24]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f76:	fb03 f202 	mul.w	r2, r3, r2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	7a1b      	ldrb	r3, [r3, #8]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	2201      	movs	r2, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003f98:	0a52      	lsrs	r2, r2, #9
 8003f9a:	fb03 f202 	mul.w	r2, r3, r2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60
 8003faa:	e031      	b.n	8004010 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d11d      	bne.n	8003ff0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	029a      	lsls	r2, r3, #10
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60
 8003fee:	e00f      	b.n	8004010 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a58      	ldr	r2, [pc, #352]	; (8004158 <HAL_SD_GetCardCSD+0x344>)
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e09d      	b.n	800414c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004014:	0b9b      	lsrs	r3, r3, #14
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	b2da      	uxtb	r2, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004026:	09db      	lsrs	r3, r3, #7
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402e:	b2da      	uxtb	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403e:	b2da      	uxtb	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	0fdb      	lsrs	r3, r3, #31
 800404a:	b2da      	uxtb	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	0f5b      	lsrs	r3, r3, #29
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	b2da      	uxtb	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	0e9b      	lsrs	r3, r3, #26
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	b2da      	uxtb	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	0d9b      	lsrs	r3, r3, #22
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	b2da      	uxtb	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	0d5b      	lsrs	r3, r3, #21
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	0bdb      	lsrs	r3, r3, #15
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	0b9b      	lsrs	r3, r3, #14
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	0b5b      	lsrs	r3, r3, #13
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	0b1b      	lsrs	r3, r3, #12
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	0a9b      	lsrs	r3, r3, #10
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	b2da      	uxtb	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	b2da      	uxtb	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800413a:	b2da      	uxtb	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	004005ff 	.word	0x004005ff

0800415c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b08e      	sub	sp, #56	; 0x38
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2203      	movs	r2, #3
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d02e      	beq.n	8004232 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041da:	d106      	bne.n	80041ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
 80041e8:	e029      	b.n	800423e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f0:	d10a      	bne.n	8004208 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fabc 	bl	8004770 <SD_WideBus_Enable>
 80041f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
 8004206:	e01a      	b.n	800423e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 faf9 	bl	8004806 <SD_WideBus_Disable>
 8004214:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
 8004222:	e00c      	b.n	800423e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
 8004230:	e005      	b.n	800423e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800425c:	e01f      	b.n	800429e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681d      	ldr	r5, [r3, #0]
 8004284:	466c      	mov	r4, sp
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800428e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004292:	f107 0308 	add.w	r3, r7, #8
 8004296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004298:	4628      	mov	r0, r5
 800429a:	f000 fbd2 	bl	8004a42 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fc95 	bl	8004bd6 <SDMMC_CmdBlockLength>
 80042ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00c      	beq.n	80042ce <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80042d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3728      	adds	r7, #40	; 0x28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bdb0      	pop	{r4, r5, r7, pc}
 80042e2:	bf00      	nop
 80042e4:	004005ff 	.word	0x004005ff

080042e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80042f4:	f107 030c 	add.w	r3, r7, #12
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa10 	bl	8004720 <SD_SendStatus>
 8004300:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	0a5b      	lsrs	r3, r3, #9
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800431e:	693b      	ldr	r3, [r7, #16]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	2b82      	cmp	r3, #130	; 0x82
 8004366:	d111      	bne.n	800438c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fcdd 	bl	8004d2c <SDMMC_CmdStopTransfer>
 8004372:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fd3a 	bl	8003e00 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0208 	bic.w	r2, r2, #8
 800439a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f001 f939 	bl	800562c <HAL_SD_RxCpltCallback>
#endif
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd ff2a 	bl	800222c <HAL_DMA_GetError>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d03e      	beq.n	800445c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d002      	beq.n	80043fa <SD_DMAError+0x36>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d12d      	bne.n	8004456 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a19      	ldr	r2, [pc, #100]	; (8004464 <SD_DMAError+0xa0>)
 8004400:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004410:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff ff62 	bl	80042e8 <HAL_SD_GetCardState>
 8004424:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b06      	cmp	r3, #6
 800442a:	d002      	beq.n	8004432 <SD_DMAError+0x6e>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b05      	cmp	r3, #5
 8004430:	d10a      	bne.n	8004448 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fc78 	bl	8004d2c <SDMMC_CmdStopTransfer>
 800443c:	4602      	mov	r2, r0
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	431a      	orrs	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f7ff fcd2 	bl	8003e00 <HAL_SD_ErrorCallback>
#endif
  }
}
 800445c:	bf00      	nop
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	004005ff 	.word	0x004005ff

08004468 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b094      	sub	sp, #80	; 0x50
 800446c:	af04      	add	r7, sp, #16
 800446e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004470:	2301      	movs	r3, #1
 8004472:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fb28 	bl	8004ace <SDIO_GetPowerState>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004484:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004488:	e0b8      	b.n	80045fc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	2b03      	cmp	r3, #3
 8004490:	d02f      	beq.n	80044f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fd52 	bl	8004f40 <SDMMC_CmdSendCID>
 800449c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	e0a9      	b.n	80045fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fb52 	bl	8004b58 <SDIO_GetResponse>
 80044b4:	4602      	mov	r2, r0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2104      	movs	r1, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fb49 	bl	8004b58 <SDIO_GetResponse>
 80044c6:	4602      	mov	r2, r0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2108      	movs	r1, #8
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb40 	bl	8004b58 <SDIO_GetResponse>
 80044d8:	4602      	mov	r2, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	210c      	movs	r1, #12
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb37 	bl	8004b58 <SDIO_GetResponse>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d00d      	beq.n	8004516 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f107 020e 	add.w	r2, r7, #14
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fd58 	bl	8004fba <SDMMC_CmdSetRelAdd>
 800450a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <SD_InitCard+0xae>
    {
      return errorstate;
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	e072      	b.n	80045fc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	2b03      	cmp	r3, #3
 800451c:	d036      	beq.n	800458c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	461a      	mov	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 fd22 	bl	8004f7c <SDMMC_CmdSendCSD>
 8004538:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800453a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	e05b      	b.n	80045fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb04 	bl	8004b58 <SDIO_GetResponse>
 8004550:	4602      	mov	r2, r0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2104      	movs	r1, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fafb 	bl	8004b58 <SDIO_GetResponse>
 8004562:	4602      	mov	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2108      	movs	r1, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f000 faf2 	bl	8004b58 <SDIO_GetResponse>
 8004574:	4602      	mov	r2, r0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	210c      	movs	r1, #12
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fae9 	bl	8004b58 <SDIO_GetResponse>
 8004586:	4602      	mov	r2, r0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2104      	movs	r1, #4
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fae0 	bl	8004b58 <SDIO_GetResponse>
 8004598:	4603      	mov	r3, r0
 800459a:	0d1a      	lsrs	r2, r3, #20
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80045a0:	f107 0310 	add.w	r3, r7, #16
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff fc34 	bl	8003e14 <HAL_SD_GetCardCSD>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045b6:	e021      	b.n	80045fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	041b      	lsls	r3, r3, #16
 80045c2:	2200      	movs	r2, #0
 80045c4:	461c      	mov	r4, r3
 80045c6:	4615      	mov	r5, r2
 80045c8:	4622      	mov	r2, r4
 80045ca:	462b      	mov	r3, r5
 80045cc:	4608      	mov	r0, r1
 80045ce:	f000 fbcf 	bl	8004d70 <SDMMC_CmdSelDesel>
 80045d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80045d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <SD_InitCard+0x176>
  {
    return errorstate;
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	e00e      	b.n	80045fc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	466c      	mov	r4, sp
 80045e6:	f103 0210 	add.w	r2, r3, #16
 80045ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80045ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045f0:	3304      	adds	r3, #4
 80045f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 fa24 	bl	8004a42 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3740      	adds	r7, #64	; 0x40
 8004600:	46bd      	mov	sp, r7
 8004602:	bdb0      	pop	{r4, r5, r7, pc}

08004604 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fbca 	bl	8004db6 <SDMMC_CmdGoIdleState>
 8004622:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <SD_PowerON+0x2a>
  {
    return errorstate;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	e072      	b.n	8004714 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fbdd 	bl	8004df2 <SDMMC_CmdOperCond>
 8004638:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fbb3 	bl	8004db6 <SDMMC_CmdGoIdleState>
 8004650:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	e05b      	b.n	8004714 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004666:	2b01      	cmp	r3, #1
 8004668:	d137      	bne.n	80046da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fbdd 	bl	8004e30 <SDMMC_CmdAppCommand>
 8004676:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02d      	beq.n	80046da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800467e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004682:	e047      	b.n	8004714 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fbd0 	bl	8004e30 <SDMMC_CmdAppCommand>
 8004690:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <SD_PowerON+0x98>
    {
      return errorstate;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	e03b      	b.n	8004714 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	491e      	ldr	r1, [pc, #120]	; (800471c <SD_PowerON+0x118>)
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fbe6 	bl	8004e74 <SDMMC_CmdAppOperCommand>
 80046a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046b4:	e02e      	b.n	8004714 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fa4b 	bl	8004b58 <SDIO_GetResponse>
 80046c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	0fdb      	lsrs	r3, r3, #31
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <SD_PowerON+0xcc>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <SD_PowerON+0xce>
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]

    count++;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	3301      	adds	r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d802      	bhi.n	80046ea <SD_PowerON+0xe6>
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0cc      	beq.n	8004684 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d902      	bls.n	80046fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80046f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046f8:	e00c      	b.n	8004714 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
 800470a:	e002      	b.n	8004712 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	c1100000 	.word	0xc1100000

08004720 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004730:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004734:	e018      	b.n	8004768 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 fc5a 	bl	8004ffc <SDMMC_CmdSendStatus>
 8004748:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	e009      	b.n	8004768 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f9fc 	bl	8004b58 <SDIO_GetResponse>
 8004760:	4602      	mov	r2, r0
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	2300      	movs	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f9e6 	bl	8004b58 <SDIO_GetResponse>
 800478c:	4603      	mov	r3, r0
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004796:	d102      	bne.n	800479e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800479c:	e02f      	b.n	80047fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f879 	bl	800489c <SD_FindSCR>
 80047aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	e023      	b.n	80047fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01c      	beq.n	80047fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 fb2f 	bl	8004e30 <SDMMC_CmdAppCommand>
 80047d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	e00f      	b.n	80047fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fb68 	bl	8004eba <SDMMC_CmdBusWidth>
 80047ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	e003      	b.n	80047fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e001      	b.n	80047fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f000 f99b 	bl	8004b58 <SDIO_GetResponse>
 8004822:	4603      	mov	r3, r0
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800482c:	d102      	bne.n	8004834 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800482e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004832:	e02f      	b.n	8004894 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f82e 	bl	800489c <SD_FindSCR>
 8004840:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	e023      	b.n	8004894 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01c      	beq.n	8004890 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f000 fae4 	bl	8004e30 <SDMMC_CmdAppCommand>
 8004868:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	e00f      	b.n	8004894 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fb1d 	bl	8004eba <SDMMC_CmdBusWidth>
 8004880:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	e003      	b.n	8004894 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800488c:	2300      	movs	r3, #0
 800488e:	e001      	b.n	8004894 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004890:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b08f      	sub	sp, #60	; 0x3c
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80048a6:	f7fd f8ef 	bl	8001a88 <HAL_GetTick>
 80048aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2108      	movs	r1, #8
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f987 	bl	8004bd6 <SDMMC_CmdBlockLength>
 80048c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	e0b2      	b.n	8004a3a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 faa5 	bl	8004e30 <SDMMC_CmdAppCommand>
 80048e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	e0a3      	b.n	8004a3a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80048f8:	2308      	movs	r3, #8
 80048fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80048fc:	2330      	movs	r3, #48	; 0x30
 80048fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004900:	2302      	movs	r3, #2
 8004902:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004904:	2300      	movs	r3, #0
 8004906:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004908:	2301      	movs	r3, #1
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f107 0210 	add.w	r2, r7, #16
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f931 	bl	8004b7e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 faec 	bl	8004efe <SDMMC_CmdSendSCR>
 8004926:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02a      	beq.n	8004984 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	e083      	b.n	8004a3a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00f      	beq.n	8004960 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	f107 0208 	add.w	r2, r7, #8
 800494c:	18d4      	adds	r4, r2, r3
 800494e:	4608      	mov	r0, r1
 8004950:	f000 f8a2 	bl	8004a98 <SDIO_ReadFIFO>
 8004954:	4603      	mov	r3, r0
 8004956:	6023      	str	r3, [r4, #0]
      index++;
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	3301      	adds	r3, #1
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
 800495e:	e006      	b.n	800496e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d012      	beq.n	8004994 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800496e:	f7fd f88b 	bl	8001a88 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d102      	bne.n	8004984 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800497e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004982:	e05a      	b.n	8004a3a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0cf      	beq.n	8004932 <SD_FindSCR+0x96>
 8004992:	e000      	b.n	8004996 <SD_FindSCR+0xfa>
      break;
 8004994:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2208      	movs	r2, #8
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80049ac:	2308      	movs	r3, #8
 80049ae:	e044      	b.n	8004a3a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2202      	movs	r2, #2
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e037      	b.n	8004a3a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2220      	movs	r2, #32
 80049de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e02a      	b.n	8004a3a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	061a      	lsls	r2, r3, #24
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a04:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	0e1b      	lsrs	r3, r3, #24
 8004a0a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	601a      	str	r2, [r3, #0]
    scr++;
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	3304      	adds	r3, #4
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	061a      	lsls	r2, r3, #24
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a2c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	0e1b      	lsrs	r3, r3, #24
 8004a32:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	373c      	adds	r7, #60	; 0x3c
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd90      	pop	{r4, r7, pc}

08004a42 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004a42:	b084      	sub	sp, #16
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	f107 001c 	add.w	r0, r7, #28
 8004a50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a58:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004a5c:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004a60:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004a64:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004a68:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004a6c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004a7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	b004      	add	sp, #16
 8004a96:	4770      	bx	lr

08004a98 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2203      	movs	r2, #3
 8004abe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0303 	and.w	r3, r3, #3
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b08:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004b0e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004b14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b24:	f023 030f 	bic.w	r3, r3, #15
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	b2db      	uxtb	r3, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3314      	adds	r3, #20
 8004b66:	461a      	mov	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
}  
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ba4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004baa:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004bb0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0

}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b088      	sub	sp, #32
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004be4:	2310      	movs	r3, #16
 8004be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004be8:	2340      	movs	r3, #64	; 0x40
 8004bea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bf6:	f107 0308 	add.w	r3, r7, #8
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ff74 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	2110      	movs	r1, #16
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa19 	bl	8005040 <SDMMC_GetCmdResp1>
 8004c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c10:	69fb      	ldr	r3, [r7, #28]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b088      	sub	sp, #32
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004c28:	2311      	movs	r3, #17
 8004c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c2c:	2340      	movs	r3, #64	; 0x40
 8004c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff52 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	2111      	movs	r1, #17
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f9f7 	bl	8005040 <SDMMC_GetCmdResp1>
 8004c52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c54:	69fb      	ldr	r3, [r7, #28]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c6c:	2312      	movs	r3, #18
 8004c6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c70:	2340      	movs	r3, #64	; 0x40
 8004c72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff30 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	2112      	movs	r1, #18
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f9d5 	bl	8005040 <SDMMC_GetCmdResp1>
 8004c96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c98:	69fb      	ldr	r3, [r7, #28]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b088      	sub	sp, #32
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004cb0:	2318      	movs	r3, #24
 8004cb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cc2:	f107 0308 	add.w	r3, r7, #8
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ff0e 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	2118      	movs	r1, #24
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f9b3 	bl	8005040 <SDMMC_GetCmdResp1>
 8004cda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b088      	sub	sp, #32
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004cf4:	2319      	movs	r3, #25
 8004cf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cf8:	2340      	movs	r3, #64	; 0x40
 8004cfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff feec 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	2119      	movs	r1, #25
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f991 	bl	8005040 <SDMMC_GetCmdResp1>
 8004d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d20:	69fb      	ldr	r3, [r7, #28]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004d38:	230c      	movs	r3, #12
 8004d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d3c:	2340      	movs	r3, #64	; 0x40
 8004d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff feca 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004d56:	4a05      	ldr	r2, [pc, #20]	; (8004d6c <SDMMC_CmdStopTransfer+0x40>)
 8004d58:	210c      	movs	r1, #12
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f970 	bl	8005040 <SDMMC_GetCmdResp1>
 8004d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d62:	69fb      	ldr	r3, [r7, #28]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	05f5e100 	.word	0x05f5e100

08004d70 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d80:	2307      	movs	r3, #7
 8004d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d90:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d92:	f107 0310 	add.w	r3, r7, #16
 8004d96:	4619      	mov	r1, r3
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fea6 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	2107      	movs	r1, #7
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f94b 	bl	8005040 <SDMMC_GetCmdResp1>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b088      	sub	sp, #32
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dd4:	f107 0308 	add.w	r3, r7, #8
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff fe85 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb65 	bl	80054b0 <SDMMC_GetCmdError>
 8004de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004de8:	69fb      	ldr	r3, [r7, #28]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b088      	sub	sp, #32
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004dfa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e00:	2308      	movs	r3, #8
 8004e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff fe66 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 faf8 	bl	8005414 <SDMMC_GetCmdResp7>
 8004e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e26:	69fb      	ldr	r3, [r7, #28]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004e3e:	2337      	movs	r3, #55	; 0x37
 8004e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e42:	2340      	movs	r3, #64	; 0x40
 8004e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e50:	f107 0308 	add.w	r3, r7, #8
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fe47 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	2137      	movs	r1, #55	; 0x37
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8ec 	bl	8005040 <SDMMC_GetCmdResp1>
 8004e68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004e8a:	2329      	movs	r3, #41	; 0x29
 8004e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e8e:	2340      	movs	r3, #64	; 0x40
 8004e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fe21 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9ff 	bl	80052ac <SDMMC_GetCmdResp3>
 8004eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b088      	sub	sp, #32
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004ec8:	2306      	movs	r3, #6
 8004eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ecc:	2340      	movs	r3, #64	; 0x40
 8004ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eda:	f107 0308 	add.w	r3, r7, #8
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fe02 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	2106      	movs	r1, #6
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f8a7 	bl	8005040 <SDMMC_GetCmdResp1>
 8004ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b088      	sub	sp, #32
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004f0a:	2333      	movs	r3, #51	; 0x33
 8004f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f0e:	2340      	movs	r3, #64	; 0x40
 8004f10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f1c:	f107 0308 	add.w	r3, r7, #8
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fde1 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	2133      	movs	r1, #51	; 0x33
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f886 	bl	8005040 <SDMMC_GetCmdResp1>
 8004f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f36:	69fb      	ldr	r3, [r7, #28]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f50:	23c0      	movs	r3, #192	; 0xc0
 8004f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f5e:	f107 0308 	add.w	r3, r7, #8
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff fdc0 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f956 	bl	800521c <SDMMC_GetCmdResp2>
 8004f70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f72:	69fb      	ldr	r3, [r7, #28]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f8a:	2309      	movs	r3, #9
 8004f8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f8e:	23c0      	movs	r3, #192	; 0xc0
 8004f90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f9c:	f107 0308 	add.w	r3, r7, #8
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff fda1 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f937 	bl	800521c <SDMMC_GetCmdResp2>
 8004fae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b088      	sub	sp, #32
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fd82 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	2103      	movs	r1, #3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f99c 	bl	8005328 <SDMMC_GetCmdResp6>
 8004ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800500a:	230d      	movs	r3, #13
 800500c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800500e:	2340      	movs	r3, #64	; 0x40
 8005010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800501c:	f107 0308 	add.w	r3, r7, #8
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fd61 	bl	8004aea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005028:	f241 3288 	movw	r2, #5000	; 0x1388
 800502c:	210d      	movs	r1, #13
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f806 	bl	8005040 <SDMMC_GetCmdResp1>
 8005034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005036:	69fb      	ldr	r3, [r7, #28]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	460b      	mov	r3, r1
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800504e:	4b70      	ldr	r3, [pc, #448]	; (8005210 <SDMMC_GetCmdResp1+0x1d0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a70      	ldr	r2, [pc, #448]	; (8005214 <SDMMC_GetCmdResp1+0x1d4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	0a5a      	lsrs	r2, r3, #9
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1e5a      	subs	r2, r3, #1
 8005066:	61fa      	str	r2, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800506c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005070:	e0c9      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0ef      	beq.n	8005062 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1ea      	bne.n	8005062 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2204      	movs	r2, #4
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800509e:	2304      	movs	r3, #4
 80050a0:	e0b1      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0a6      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	22c5      	movs	r2, #197	; 0xc5
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff fd3d 	bl	8004b3e <SDIO_GetCommandResponse>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d001      	beq.n	80050d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e099      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050d2:	2100      	movs	r1, #0
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fd3f 	bl	8004b58 <SDIO_GetResponse>
 80050da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4b4e      	ldr	r3, [pc, #312]	; (8005218 <SDMMC_GetCmdResp1+0x1d8>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e08d      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da02      	bge.n	80050f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80050f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050f4:	e087      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	e080      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	e079      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800511c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005120:	e071      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800512c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005130:	e069      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800513c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005140:	e061      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800514c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005150:	e059      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800515c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005160:	e051      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800516c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005170:	e049      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800517c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005180:	e041      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800518c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005190:	e039      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800519c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051a0:	e031      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80051ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051b0:	e029      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80051bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80051c0:	e021      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80051cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80051d0:	e019      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80051dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051e0:	e011      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80051ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051f0:	e009      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80051fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005200:	e001      	b.n	8005206 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000000 	.word	0x20000000
 8005214:	10624dd3 	.word	0x10624dd3
 8005218:	fdffe008 	.word	0xfdffe008

0800521c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005224:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <SDMMC_GetCmdResp2+0x88>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <SDMMC_GetCmdResp2+0x8c>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0a5b      	lsrs	r3, r3, #9
 8005230:	f241 3288 	movw	r2, #5000	; 0x1388
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	60fa      	str	r2, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d102      	bne.n	800524a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005248:	e026      	b.n	8005298 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0ef      	beq.n	800523a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ea      	bne.n	800523a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005276:	2304      	movs	r3, #4
 8005278:	e00e      	b.n	8005298 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800528c:	2301      	movs	r3, #1
 800528e:	e003      	b.n	8005298 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	22c5      	movs	r2, #197	; 0xc5
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	20000000 	.word	0x20000000
 80052a8:	10624dd3 	.word	0x10624dd3

080052ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052b4:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <SDMMC_GetCmdResp3+0x74>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1a      	ldr	r2, [pc, #104]	; (8005324 <SDMMC_GetCmdResp3+0x78>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	0a5b      	lsrs	r3, r3, #9
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1e5a      	subs	r2, r3, #1
 80052ce:	60fa      	str	r2, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052d8:	e01b      	b.n	8005312 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0ef      	beq.n	80052ca <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1ea      	bne.n	80052ca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2204      	movs	r2, #4
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005306:	2304      	movs	r3, #4
 8005308:	e003      	b.n	8005312 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	22c5      	movs	r2, #197	; 0xc5
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000000 	.word	0x20000000
 8005324:	10624dd3 	.word	0x10624dd3

08005328 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	460b      	mov	r3, r1
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005336:	4b35      	ldr	r3, [pc, #212]	; (800540c <SDMMC_GetCmdResp6+0xe4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a35      	ldr	r2, [pc, #212]	; (8005410 <SDMMC_GetCmdResp6+0xe8>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	0a5b      	lsrs	r3, r3, #9
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	1e5a      	subs	r2, r3, #1
 8005350:	61fa      	str	r2, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d102      	bne.n	800535c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005356:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800535a:	e052      	b.n	8005402 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ef      	beq.n	800534c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1ea      	bne.n	800534c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2204      	movs	r2, #4
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005388:	2304      	movs	r3, #4
 800538a:	e03a      	b.n	8005402 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800539e:	2301      	movs	r3, #1
 80053a0:	e02f      	b.n	8005402 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fbcb 	bl	8004b3e <SDIO_GetCommandResponse>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	7afb      	ldrb	r3, [r7, #11]
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d001      	beq.n	80053b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e025      	b.n	8005402 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	22c5      	movs	r2, #197	; 0xc5
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80053bc:	2100      	movs	r1, #0
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7ff fbca 	bl	8004b58 <SDIO_GetResponse>
 80053c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	0c1b      	lsrs	r3, r3, #16
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80053da:	2300      	movs	r3, #0
 80053dc:	e011      	b.n	8005402 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ec:	e009      	b.n	8005402 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80053f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fc:	e001      	b.n	8005402 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000000 	.word	0x20000000
 8005410:	10624dd3 	.word	0x10624dd3

08005414 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800541c:	4b22      	ldr	r3, [pc, #136]	; (80054a8 <SDMMC_GetCmdResp7+0x94>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a22      	ldr	r2, [pc, #136]	; (80054ac <SDMMC_GetCmdResp7+0x98>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	0a5b      	lsrs	r3, r3, #9
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	60fa      	str	r2, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800543c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005440:	e02c      	b.n	800549c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ef      	beq.n	8005432 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ea      	bne.n	8005432 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2204      	movs	r2, #4
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800546e:	2304      	movs	r3, #4
 8005470:	e014      	b.n	800549c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005484:	2301      	movs	r3, #1
 8005486:	e009      	b.n	800549c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800549a:	2300      	movs	r3, #0
  
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20000000 	.word	0x20000000
 80054ac:	10624dd3 	.word	0x10624dd3

080054b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <SDMMC_GetCmdError+0x50>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a11      	ldr	r2, [pc, #68]	; (8005504 <SDMMC_GetCmdError+0x54>)
 80054be:	fba2 2303 	umull	r2, r3, r2, r3
 80054c2:	0a5b      	lsrs	r3, r3, #9
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
 80054cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	60fa      	str	r2, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054dc:	e009      	b.n	80054f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f1      	beq.n	80054ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	22c5      	movs	r2, #197	; 0xc5
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000000 	.word	0x20000000
 8005504:	10624dd3 	.word	0x10624dd3

08005508 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800550c:	4904      	ldr	r1, [pc, #16]	; (8005520 <MX_FATFS_Init+0x18>)
 800550e:	4805      	ldr	r0, [pc, #20]	; (8005524 <MX_FATFS_Init+0x1c>)
 8005510:	f003 f926 	bl	8008760 <FATFS_LinkDriver>
 8005514:	4603      	mov	r3, r0
 8005516:	461a      	mov	r2, r3
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <MX_FATFS_Init+0x20>)
 800551a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	2000233c 	.word	0x2000233c
 8005524:	0800dbe4 	.word	0x0800dbe4
 8005528:	20002338 	.word	0x20002338

0800552c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005530:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005532:	4618      	mov	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005546:	f000 f87b 	bl	8005640 <BSP_SD_IsDetected>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	d001      	beq.n	8005554 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e012      	b.n	800557a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005554:	480b      	ldr	r0, [pc, #44]	; (8005584 <BSP_SD_Init+0x48>)
 8005556:	f7fe f9db 	bl	8003910 <HAL_SD_Init>
 800555a:	4603      	mov	r3, r0
 800555c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005568:	4806      	ldr	r0, [pc, #24]	; (8005584 <BSP_SD_Init+0x48>)
 800556a:	f7fe fe23 	bl	80041b4 <HAL_SD_ConfigWideBusOperation>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005578:	79fb      	ldrb	r3, [r7, #7]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20002120 	.word	0x20002120

08005588 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	68f9      	ldr	r1, [r7, #12]
 800559e:	4806      	ldr	r0, [pc, #24]	; (80055b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80055a0:	f7fe fa66 	bl	8003a70 <HAL_SD_ReadBlocks_DMA>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20002120 	.word	0x20002120

080055bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	4806      	ldr	r0, [pc, #24]	; (80055ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80055d4:	f7fe fb2e 	bl	8003c34 <HAL_SD_WriteBlocks_DMA>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20002120 	.word	0x20002120

080055f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80055f4:	4805      	ldr	r0, [pc, #20]	; (800560c <BSP_SD_GetCardState+0x1c>)
 80055f6:	f7fe fe77 	bl	80042e8 <HAL_SD_GetCardState>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
}
 8005606:	4618      	mov	r0, r3
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20002120 	.word	0x20002120

08005610 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4803      	ldr	r0, [pc, #12]	; (8005628 <BSP_SD_GetCardInfo+0x18>)
 800561c:	f7fe fd9e 	bl	800415c <HAL_SD_GetCardInfo>
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20002120 	.word	0x20002120

0800562c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005634:	f000 f986 	bl	8005944 <BSP_SD_ReadCpltCallback>
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005646:	2301      	movs	r3, #1
 8005648:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	b2db      	uxtb	r3, r3
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005662:	f003 fa51 	bl	8008b08 <osKernelGetTickCount>
 8005666:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005668:	e006      	b.n	8005678 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800566a:	f7ff ffc1 	bl	80055f0 <BSP_SD_GetCardState>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005674:	2300      	movs	r3, #0
 8005676:	e009      	b.n	800568c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005678:	f003 fa46 	bl	8008b08 <osKernelGetTickCount>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d8f0      	bhi.n	800566a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <SD_CheckStatus+0x38>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80056a4:	f7ff ffa4 	bl	80055f0 <BSP_SD_GetCardState>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d107      	bne.n	80056be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80056ae:	4b07      	ldr	r3, [pc, #28]	; (80056cc <SD_CheckStatus+0x38>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <SD_CheckStatus+0x38>)
 80056bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80056be:	4b03      	ldr	r3, [pc, #12]	; (80056cc <SD_CheckStatus+0x38>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b2db      	uxtb	r3, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	2000001d 	.word	0x2000001d

080056d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80056da:	4b1c      	ldr	r3, [pc, #112]	; (800574c <SD_initialize+0x7c>)
 80056dc:	2201      	movs	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80056e0:	f003 f9ca 	bl	8008a78 <osKernelGetState>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d129      	bne.n	800573e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80056ea:	f7ff ff27 	bl	800553c <BSP_SD_Init>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ffcc 	bl	8005694 <SD_CheckStatus>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <SD_initialize+0x7c>)
 8005702:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <SD_initialize+0x7c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d017      	beq.n	800573e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <SD_initialize+0x80>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d107      	bne.n	8005726 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005716:	2200      	movs	r2, #0
 8005718:	2102      	movs	r1, #2
 800571a:	200a      	movs	r0, #10
 800571c:	f003 fbfa 	bl	8008f14 <osMessageQueueNew>
 8005720:	4603      	mov	r3, r0
 8005722:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <SD_initialize+0x80>)
 8005724:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <SD_initialize+0x80>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <SD_initialize+0x7c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	b2da      	uxtb	r2, r3
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <SD_initialize+0x7c>)
 800573c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800573e:	4b03      	ldr	r3, [pc, #12]	; (800574c <SD_initialize+0x7c>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b2db      	uxtb	r3, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	2000001d 	.word	0x2000001d
 8005750:	20002340 	.word	0x20002340

08005754 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff97 	bl	8005694 <SD_CheckStatus>
 8005766:	4603      	mov	r3, r0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005784:	f247 5030 	movw	r0, #30000	; 0x7530
 8005788:	f7ff ff67 	bl	800565a <SD_CheckStatusWithTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	da01      	bge.n	8005796 <SD_read+0x26>
  {
    return res;
 8005792:	7ffb      	ldrb	r3, [r7, #31]
 8005794:	e02f      	b.n	80057f6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	68b8      	ldr	r0, [r7, #8]
 800579c:	f7ff fef4 	bl	8005588 <BSP_SD_ReadBlocks_DMA>
 80057a0:	4603      	mov	r3, r0
 80057a2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80057a4:	7fbb      	ldrb	r3, [r7, #30]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d124      	bne.n	80057f4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <SD_read+0x90>)
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	f107 0112 	add.w	r1, r7, #18
 80057b2:	f247 5330 	movw	r3, #30000	; 0x7530
 80057b6:	2200      	movs	r2, #0
 80057b8:	f003 fc80 	bl	80090bc <osMessageQueueGet>
 80057bc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d117      	bne.n	80057f4 <SD_read+0x84>
 80057c4:	8a7b      	ldrh	r3, [r7, #18]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d114      	bne.n	80057f4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80057ca:	f003 f99d 	bl	8008b08 <osKernelGetTickCount>
 80057ce:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80057d0:	e007      	b.n	80057e2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80057d2:	f7ff ff0d 	bl	80055f0 <BSP_SD_GetCardState>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <SD_read+0x72>
              {
                res = RES_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80057e0:	e008      	b.n	80057f4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80057e2:	f003 f991 	bl	8008b08 <osKernelGetTickCount>
 80057e6:	4602      	mov	r2, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d9ee      	bls.n	80057d2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80057f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20002340 	.word	0x20002340

08005804 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005818:	f247 5030 	movw	r0, #30000	; 0x7530
 800581c:	f7ff ff1d 	bl	800565a <SD_CheckStatusWithTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	da01      	bge.n	800582a <SD_write+0x26>
  {
    return res;
 8005826:	7ffb      	ldrb	r3, [r7, #31]
 8005828:	e02d      	b.n	8005886 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	68b8      	ldr	r0, [r7, #8]
 8005830:	f7ff fec4 	bl	80055bc <BSP_SD_WriteBlocks_DMA>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d124      	bne.n	8005884 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800583a:	4b15      	ldr	r3, [pc, #84]	; (8005890 <SD_write+0x8c>)
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	f107 0112 	add.w	r1, r7, #18
 8005842:	f247 5330 	movw	r3, #30000	; 0x7530
 8005846:	2200      	movs	r2, #0
 8005848:	f003 fc38 	bl	80090bc <osMessageQueueGet>
 800584c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d117      	bne.n	8005884 <SD_write+0x80>
 8005854:	8a7b      	ldrh	r3, [r7, #18]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d114      	bne.n	8005884 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800585a:	f003 f955 	bl	8008b08 <osKernelGetTickCount>
 800585e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005860:	e007      	b.n	8005872 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005862:	f7ff fec5 	bl	80055f0 <BSP_SD_GetCardState>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <SD_write+0x6e>
          {
            res = RES_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	77fb      	strb	r3, [r7, #31]
            break;
 8005870:	e008      	b.n	8005884 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005872:	f003 f949 	bl	8008b08 <osKernelGetTickCount>
 8005876:	4602      	mov	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005880:	4293      	cmp	r3, r2
 8005882:	d9ee      	bls.n	8005862 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8005884:	7ffb      	ldrb	r3, [r7, #31]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20002340 	.word	0x20002340

08005894 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	; 0x30
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	603a      	str	r2, [r7, #0]
 800589e:	71fb      	strb	r3, [r7, #7]
 80058a0:	460b      	mov	r3, r1
 80058a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80058aa:	4b25      	ldr	r3, [pc, #148]	; (8005940 <SD_ioctl+0xac>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <SD_ioctl+0x28>
 80058b8:	2303      	movs	r3, #3
 80058ba:	e03c      	b.n	8005936 <SD_ioctl+0xa2>

  switch (cmd)
 80058bc:	79bb      	ldrb	r3, [r7, #6]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d834      	bhi.n	800592c <SD_ioctl+0x98>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <SD_ioctl+0x34>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058e1 	.word	0x080058e1
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	08005913 	.word	0x08005913
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80058de:	e028      	b.n	8005932 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80058e0:	f107 030c 	add.w	r3, r7, #12
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fe93 	bl	8005610 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80058f6:	e01c      	b.n	8005932 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80058f8:	f107 030c 	add.w	r3, r7, #12
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fe87 	bl	8005610 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	b29a      	uxth	r2, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005910:	e00f      	b.n	8005932 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005912:	f107 030c 	add.w	r3, r7, #12
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fe7a 	bl	8005610 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	0a5a      	lsrs	r2, r3, #9
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800592a:	e002      	b.n	8005932 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800592c:	2304      	movs	r3, #4
 800592e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005936:	4618      	mov	r0, r3
 8005938:	3730      	adds	r7, #48	; 0x30
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	2000001d 	.word	0x2000001d

08005944 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800594a:	2301      	movs	r3, #1
 800594c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <BSP_SD_ReadCpltCallback+0x20>)
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	1db9      	adds	r1, r7, #6
 8005954:	2300      	movs	r3, #0
 8005956:	2200      	movs	r2, #0
 8005958:	f003 fb50 	bl	8008ffc <osMessageQueuePut>
#endif
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20002340 	.word	0x20002340

08005968 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	4a08      	ldr	r2, [pc, #32]	; (8005998 <disk_status+0x30>)
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	79fa      	ldrb	r2, [r7, #7]
 8005980:	4905      	ldr	r1, [pc, #20]	; (8005998 <disk_status+0x30>)
 8005982:	440a      	add	r2, r1
 8005984:	7a12      	ldrb	r2, [r2, #8]
 8005986:	4610      	mov	r0, r2
 8005988:	4798      	blx	r3
 800598a:	4603      	mov	r3, r0
 800598c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2000236c 	.word	0x2000236c

0800599c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	4a0d      	ldr	r2, [pc, #52]	; (80059e4 <disk_initialize+0x48>)
 80059ae:	5cd3      	ldrb	r3, [r2, r3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d111      	bne.n	80059d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	4a0b      	ldr	r2, [pc, #44]	; (80059e4 <disk_initialize+0x48>)
 80059b8:	2101      	movs	r1, #1
 80059ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <disk_initialize+0x48>)
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	79fa      	ldrb	r2, [r7, #7]
 80059ca:	4906      	ldr	r1, [pc, #24]	; (80059e4 <disk_initialize+0x48>)
 80059cc:	440a      	add	r2, r1
 80059ce:	7a12      	ldrb	r2, [r2, #8]
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	2000236c 	.word	0x2000236c

080059e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <disk_read+0x3c>)
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	689c      	ldr	r4, [r3, #8]
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	4a07      	ldr	r2, [pc, #28]	; (8005a24 <disk_read+0x3c>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	7a18      	ldrb	r0, [r3, #8]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	47a0      	blx	r4
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd90      	pop	{r4, r7, pc}
 8005a22:	bf00      	nop
 8005a24:	2000236c 	.word	0x2000236c

08005a28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005a28:	b590      	push	{r4, r7, lr}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <disk_write+0x3c>)
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68dc      	ldr	r4, [r3, #12]
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	4a07      	ldr	r2, [pc, #28]	; (8005a64 <disk_write+0x3c>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	7a18      	ldrb	r0, [r3, #8]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	47a0      	blx	r4
 8005a54:	4603      	mov	r3, r0
 8005a56:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd90      	pop	{r4, r7, pc}
 8005a62:	bf00      	nop
 8005a64:	2000236c 	.word	0x2000236c

08005a68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	603a      	str	r2, [r7, #0]
 8005a72:	71fb      	strb	r3, [r7, #7]
 8005a74:	460b      	mov	r3, r1
 8005a76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <disk_ioctl+0x38>)
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	79fa      	ldrb	r2, [r7, #7]
 8005a86:	4906      	ldr	r1, [pc, #24]	; (8005aa0 <disk_ioctl+0x38>)
 8005a88:	440a      	add	r2, r1
 8005a8a:	7a10      	ldrb	r0, [r2, #8]
 8005a8c:	79b9      	ldrb	r1, [r7, #6]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	4798      	blx	r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	73fb      	strb	r3, [r7, #15]
  return res;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	2000236c 	.word	0x2000236c

08005aa4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	b21a      	sxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b21b      	sxth	r3, r3
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b21b      	sxth	r3, r3
 8005ac4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3303      	adds	r3, #3
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	3202      	adds	r2, #2
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	3201      	adds	r2, #1
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	460b      	mov	r3, r1
 8005b24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	887a      	ldrh	r2, [r7, #2]
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	887a      	ldrh	r2, [r7, #2]
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	0a1b      	lsrs	r3, r3, #8
 8005b6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	607a      	str	r2, [r7, #4]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	1c53      	adds	r3, r2, #1
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	1c59      	adds	r1, r3, #1
 8005bcc:	6179      	str	r1, [r7, #20]
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f1      	bne.n	8005bc2 <mem_cpy+0x1a>
	}
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005bea:	b480      	push	{r7}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	617a      	str	r2, [r7, #20]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	607b      	str	r3, [r7, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f3      	bne.n	8005bfa <mem_set+0x10>
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	; 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	61fa      	str	r2, [r7, #28]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	4619      	mov	r1, r3
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	61ba      	str	r2, [r7, #24]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	1acb      	subs	r3, r1, r3
 8005c4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	607b      	str	r3, [r7, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <mem_cmp+0x40>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0eb      	beq.n	8005c38 <mem_cmp+0x18>

	return r;
 8005c60:	697b      	ldr	r3, [r7, #20]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005c78:	e002      	b.n	8005c80 <chk_chr+0x12>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	607b      	str	r3, [r7, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <chk_chr+0x26>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d1f2      	bne.n	8005c7a <chk_chr+0xc>
	return *str;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	781b      	ldrb	r3, [r3, #0]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <lock_fs+0x22>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f002 fe4f 	bl	800895a <ff_req_grant>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <lock_fs+0x22>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <lock_fs+0x24>
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <unlock_fs+0x2e>
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	2b0c      	cmp	r3, #12
 8005ce6:	d00a      	beq.n	8005cfe <unlock_fs+0x2e>
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	2b0b      	cmp	r3, #11
 8005cec:	d007      	beq.n	8005cfe <unlock_fs+0x2e>
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	2b0f      	cmp	r3, #15
 8005cf2:	d004      	beq.n	8005cfe <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f002 fe43 	bl	8008984 <ff_rel_grant>
	}
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e029      	b.n	8005d70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005d1c:	4a27      	ldr	r2, [pc, #156]	; (8005dbc <chk_lock+0xb4>)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01d      	beq.n	8005d66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d2a:	4a24      	ldr	r2, [pc, #144]	; (8005dbc <chk_lock+0xb4>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	4413      	add	r3, r2
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d116      	bne.n	8005d6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005d3c:	4a1f      	ldr	r2, [pc, #124]	; (8005dbc <chk_lock+0xb4>)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	4413      	add	r3, r2
 8005d44:	3304      	adds	r3, #4
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d10c      	bne.n	8005d6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <chk_lock+0xb4>)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	4413      	add	r3, r2
 8005d58:	3308      	adds	r3, #8
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d102      	bne.n	8005d6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d64:	e007      	b.n	8005d76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005d66:	2301      	movs	r3, #1
 8005d68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d9d2      	bls.n	8005d1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d109      	bne.n	8005d90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <chk_lock+0x80>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d101      	bne.n	8005d8c <chk_lock+0x84>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e010      	b.n	8005dae <chk_lock+0xa6>
 8005d8c:	2312      	movs	r3, #18
 8005d8e:	e00e      	b.n	8005dae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d108      	bne.n	8005da8 <chk_lock+0xa0>
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <chk_lock+0xb4>)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4413      	add	r3, r2
 8005d9e:	330c      	adds	r3, #12
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da6:	d101      	bne.n	8005dac <chk_lock+0xa4>
 8005da8:	2310      	movs	r3, #16
 8005daa:	e000      	b.n	8005dae <chk_lock+0xa6>
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	2000234c 	.word	0x2000234c

08005dc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	607b      	str	r3, [r7, #4]
 8005dca:	e002      	b.n	8005dd2 <enq_lock+0x12>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d806      	bhi.n	8005de6 <enq_lock+0x26>
 8005dd8:	4a09      	ldr	r2, [pc, #36]	; (8005e00 <enq_lock+0x40>)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	4413      	add	r3, r2
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f2      	bne.n	8005dcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	2000234c 	.word	0x2000234c

08005e04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	e01f      	b.n	8005e54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005e14:	4a41      	ldr	r2, [pc, #260]	; (8005f1c <inc_lock+0x118>)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d113      	bne.n	8005e4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005e26:	4a3d      	ldr	r2, [pc, #244]	; (8005f1c <inc_lock+0x118>)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3304      	adds	r3, #4
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d109      	bne.n	8005e4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005e3a:	4a38      	ldr	r2, [pc, #224]	; (8005f1c <inc_lock+0x118>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	4413      	add	r3, r2
 8005e42:	3308      	adds	r3, #8
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d006      	beq.n	8005e5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d9dc      	bls.n	8005e14 <inc_lock+0x10>
 8005e5a:	e000      	b.n	8005e5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005e5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d132      	bne.n	8005eca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e002      	b.n	8005e70 <inc_lock+0x6c>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d806      	bhi.n	8005e84 <inc_lock+0x80>
 8005e76:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <inc_lock+0x118>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	4413      	add	r3, r2
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f2      	bne.n	8005e6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d101      	bne.n	8005e8e <inc_lock+0x8a>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e040      	b.n	8005f10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4922      	ldr	r1, [pc, #136]	; (8005f1c <inc_lock+0x118>)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	440b      	add	r3, r1
 8005e9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	491e      	ldr	r1, [pc, #120]	; (8005f1c <inc_lock+0x118>)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	491a      	ldr	r1, [pc, #104]	; (8005f1c <inc_lock+0x118>)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3308      	adds	r3, #8
 8005eba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ebc:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <inc_lock+0x118>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	4413      	add	r3, r2
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <inc_lock+0xe0>
 8005ed0:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <inc_lock+0x118>)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	4413      	add	r3, r2
 8005ed8:	330c      	adds	r3, #12
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <inc_lock+0xe0>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e015      	b.n	8005f10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d108      	bne.n	8005efc <inc_lock+0xf8>
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <inc_lock+0x118>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	4413      	add	r3, r2
 8005ef2:	330c      	adds	r3, #12
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	e001      	b.n	8005f00 <inc_lock+0xfc>
 8005efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f00:	4906      	ldr	r1, [pc, #24]	; (8005f1c <inc_lock+0x118>)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	440b      	add	r3, r1
 8005f08:	330c      	adds	r3, #12
 8005f0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	2000234c 	.word	0x2000234c

08005f20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d825      	bhi.n	8005f80 <dec_lock+0x60>
		n = Files[i].ctr;
 8005f34:	4a17      	ldr	r2, [pc, #92]	; (8005f94 <dec_lock+0x74>)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	4413      	add	r3, r2
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005f42:	89fb      	ldrh	r3, [r7, #14]
 8005f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f48:	d101      	bne.n	8005f4e <dec_lock+0x2e>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005f4e:	89fb      	ldrh	r3, [r7, #14]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <dec_lock+0x3a>
 8005f54:	89fb      	ldrh	r3, [r7, #14]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005f5a:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <dec_lock+0x74>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	4413      	add	r3, r2
 8005f62:	330c      	adds	r3, #12
 8005f64:	89fa      	ldrh	r2, [r7, #14]
 8005f66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005f68:	89fb      	ldrh	r3, [r7, #14]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d105      	bne.n	8005f7a <dec_lock+0x5a>
 8005f6e:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <dec_lock+0x74>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	4413      	add	r3, r2
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	737b      	strb	r3, [r7, #13]
 8005f7e:	e001      	b.n	8005f84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005f80:	2302      	movs	r3, #2
 8005f82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005f84:	7b7b      	ldrb	r3, [r7, #13]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2000234c 	.word	0x2000234c

08005f98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e010      	b.n	8005fc8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005fa6:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <clear_lock+0x44>)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	4413      	add	r3, r2
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d105      	bne.n	8005fc2 <clear_lock+0x2a>
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <clear_lock+0x44>)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d9eb      	bls.n	8005fa6 <clear_lock+0xe>
	}
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	2000234c 	.word	0x2000234c

08005fe0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d034      	beq.n	800605e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	7858      	ldrb	r0, [r3, #1]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006004:	2301      	movs	r3, #1
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	f7ff fd0e 	bl	8005a28 <disk_write>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e022      	b.n	800605e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	1ad2      	subs	r2, r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	429a      	cmp	r2, r3
 800602c:	d217      	bcs.n	800605e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	789b      	ldrb	r3, [r3, #2]
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e010      	b.n	8006058 <sync_window+0x78>
					wsect += fs->fsize;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4413      	add	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	7858      	ldrb	r0, [r3, #1]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800604a:	2301      	movs	r3, #1
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	f7ff fceb 	bl	8005a28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	3b01      	subs	r3, #1
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d8eb      	bhi.n	8006036 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d01b      	beq.n	80060b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff ffad 	bl	8005fe0 <sync_window>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d113      	bne.n	80060b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7858      	ldrb	r0, [r3, #1]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800609a:	2301      	movs	r3, #1
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	f7ff fca3 	bl	80059e8 <disk_read>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff87 	bl	8005fe0 <sync_window>
 80060d2:	4603      	mov	r3, r0
 80060d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d159      	bne.n	8006190 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d149      	bne.n	8006178 <sync_fs+0xb4>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	791b      	ldrb	r3, [r3, #4]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d145      	bne.n	8006178 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	899b      	ldrh	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	2100      	movs	r1, #0
 80060fa:	f7ff fd76 	bl	8005bea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	333c      	adds	r3, #60	; 0x3c
 8006102:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006106:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fd05 	bl	8005b1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	333c      	adds	r3, #60	; 0x3c
 8006114:	4921      	ldr	r1, [pc, #132]	; (800619c <sync_fs+0xd8>)
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fd1a 	bl	8005b50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	333c      	adds	r3, #60	; 0x3c
 8006120:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006124:	491e      	ldr	r1, [pc, #120]	; (80061a0 <sync_fs+0xdc>)
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fd12 	bl	8005b50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	333c      	adds	r3, #60	; 0x3c
 8006130:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7ff fd08 	bl	8005b50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	333c      	adds	r3, #60	; 0x3c
 8006144:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	4619      	mov	r1, r3
 800614e:	4610      	mov	r0, r2
 8006150:	f7ff fcfe 	bl	8005b50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7858      	ldrb	r0, [r3, #1]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800616c:	2301      	movs	r3, #1
 800616e:	f7ff fc5b 	bl	8005a28 <disk_write>
			fs->fsi_flag = 0;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2200      	movs	r2, #0
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fc71 	bl	8005a68 <disk_ioctl>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <sync_fs+0xcc>
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	41615252 	.word	0x41615252
 80061a0:	61417272 	.word	0x61417272

080061a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	3b02      	subs	r3, #2
 80061b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	3b02      	subs	r3, #2
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d301      	bcc.n	80061c4 <clust2sect+0x20>
 80061c0:	2300      	movs	r3, #0
 80061c2:	e008      	b.n	80061d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	895b      	ldrh	r3, [r3, #10]
 80061c8:	461a      	mov	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	fb03 f202 	mul.w	r2, r3, r2
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	4413      	add	r3, r2
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d904      	bls.n	8006202 <get_fat+0x20>
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006202:	2301      	movs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e0bb      	b.n	8006380 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006208:	f04f 33ff 	mov.w	r3, #4294967295
 800620c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b03      	cmp	r3, #3
 8006214:	f000 8083 	beq.w	800631e <get_fat+0x13c>
 8006218:	2b03      	cmp	r3, #3
 800621a:	f300 80a7 	bgt.w	800636c <get_fat+0x18a>
 800621e:	2b01      	cmp	r3, #1
 8006220:	d002      	beq.n	8006228 <get_fat+0x46>
 8006222:	2b02      	cmp	r3, #2
 8006224:	d056      	beq.n	80062d4 <get_fat+0xf2>
 8006226:	e0a1      	b.n	800636c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	899b      	ldrh	r3, [r3, #12]
 800623e:	4619      	mov	r1, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	fbb3 f3f1 	udiv	r3, r3, r1
 8006246:	4413      	add	r3, r2
 8006248:	4619      	mov	r1, r3
 800624a:	6938      	ldr	r0, [r7, #16]
 800624c:	f7ff ff0c 	bl	8006068 <move_window>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 808d 	bne.w	8006372 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	60fa      	str	r2, [r7, #12]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	8992      	ldrh	r2, [r2, #12]
 8006262:	fbb3 f1f2 	udiv	r1, r3, r2
 8006266:	fb01 f202 	mul.w	r2, r1, r2
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	899b      	ldrh	r3, [r3, #12]
 800627e:	4619      	mov	r1, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	fbb3 f3f1 	udiv	r3, r3, r1
 8006286:	4413      	add	r3, r2
 8006288:	4619      	mov	r1, r3
 800628a:	6938      	ldr	r0, [r7, #16]
 800628c:	f7ff feec 	bl	8006068 <move_window>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d16f      	bne.n	8006376 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	899b      	ldrh	r3, [r3, #12]
 800629a:	461a      	mov	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	fbb3 f1f2 	udiv	r1, r3, r2
 80062a2:	fb01 f202 	mul.w	r2, r1, r2
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	461a      	mov	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <get_fat+0xe8>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	e002      	b.n	80062d0 <get_fat+0xee>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d0:	617b      	str	r3, [r7, #20]
			break;
 80062d2:	e055      	b.n	8006380 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	899b      	ldrh	r3, [r3, #12]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	b29b      	uxth	r3, r3
 80062e0:	4619      	mov	r1, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80062e8:	4413      	add	r3, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	6938      	ldr	r0, [r7, #16]
 80062ee:	f7ff febb 	bl	8006068 <move_window>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d140      	bne.n	800637a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	8992      	ldrh	r2, [r2, #12]
 8006306:	fbb3 f0f2 	udiv	r0, r3, r2
 800630a:	fb00 f202 	mul.w	r2, r0, r2
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	440b      	add	r3, r1
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fbc6 	bl	8005aa4 <ld_word>
 8006318:	4603      	mov	r3, r0
 800631a:	617b      	str	r3, [r7, #20]
			break;
 800631c:	e030      	b.n	8006380 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	899b      	ldrh	r3, [r3, #12]
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	b29b      	uxth	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006332:	4413      	add	r3, r2
 8006334:	4619      	mov	r1, r3
 8006336:	6938      	ldr	r0, [r7, #16]
 8006338:	f7ff fe96 	bl	8006068 <move_window>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d11d      	bne.n	800637e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	8992      	ldrh	r2, [r2, #12]
 8006350:	fbb3 f0f2 	udiv	r0, r3, r2
 8006354:	fb00 f202 	mul.w	r2, r0, r2
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	440b      	add	r3, r1
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fbb9 	bl	8005ad4 <ld_dword>
 8006362:	4603      	mov	r3, r0
 8006364:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006368:	617b      	str	r3, [r7, #20]
			break;
 800636a:	e009      	b.n	8006380 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800636c:	2301      	movs	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e006      	b.n	8006380 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006372:	bf00      	nop
 8006374:	e004      	b.n	8006380 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006376:	bf00      	nop
 8006378:	e002      	b.n	8006380 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800637e:	bf00      	nop
		}
	}

	return val;
 8006380:	697b      	ldr	r3, [r7, #20]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800638a:	b590      	push	{r4, r7, lr}
 800638c:	b089      	sub	sp, #36	; 0x24
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006396:	2302      	movs	r3, #2
 8006398:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b01      	cmp	r3, #1
 800639e:	f240 8109 	bls.w	80065b4 <put_fat+0x22a>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	f080 8103 	bcs.w	80065b4 <put_fat+0x22a>
		switch (fs->fs_type) {
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	f000 80b6 	beq.w	8006524 <put_fat+0x19a>
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	f300 80fb 	bgt.w	80065b4 <put_fat+0x22a>
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d003      	beq.n	80063ca <put_fat+0x40>
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	f000 8083 	beq.w	80064ce <put_fat+0x144>
 80063c8:	e0f4      	b.n	80065b4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	4413      	add	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	899b      	ldrh	r3, [r3, #12]
 80063e0:	4619      	mov	r1, r3
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80063e8:	4413      	add	r3, r2
 80063ea:	4619      	mov	r1, r3
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff fe3b 	bl	8006068 <move_window>
 80063f2:	4603      	mov	r3, r0
 80063f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f040 80d4 	bne.w	80065a6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	61ba      	str	r2, [r7, #24]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	8992      	ldrh	r2, [r2, #12]
 800640e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006412:	fb00 f202 	mul.w	r2, r0, r2
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	440b      	add	r3, r1
 800641a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <put_fat+0xb8>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	b25b      	sxtb	r3, r3
 800642c:	f003 030f 	and.w	r3, r3, #15
 8006430:	b25a      	sxtb	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	b25b      	sxtb	r3, r3
 800643a:	4313      	orrs	r3, r2
 800643c:	b25b      	sxtb	r3, r3
 800643e:	b2db      	uxtb	r3, r3
 8006440:	e001      	b.n	8006446 <put_fat+0xbc>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	899b      	ldrh	r3, [r3, #12]
 8006458:	4619      	mov	r1, r3
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006460:	4413      	add	r3, r2
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f7ff fdff 	bl	8006068 <move_window>
 800646a:	4603      	mov	r3, r0
 800646c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800646e:	7ffb      	ldrb	r3, [r7, #31]
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 809a 	bne.w	80065aa <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	899b      	ldrh	r3, [r3, #12]
 8006480:	461a      	mov	r2, r3
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	fbb3 f0f2 	udiv	r0, r3, r2
 8006488:	fb00 f202 	mul.w	r2, r0, r2
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	440b      	add	r3, r1
 8006490:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <put_fat+0x11a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	091b      	lsrs	r3, r3, #4
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e00e      	b.n	80064c2 <put_fat+0x138>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	b25b      	sxtb	r3, r3
 80064aa:	f023 030f 	bic.w	r3, r3, #15
 80064ae:	b25a      	sxtb	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	b25b      	sxtb	r3, r3
 80064bc:	4313      	orrs	r3, r2
 80064be:	b25b      	sxtb	r3, r3
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	70da      	strb	r2, [r3, #3]
			break;
 80064cc:	e072      	b.n	80065b4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	899b      	ldrh	r3, [r3, #12]
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	fbb3 f3f1 	udiv	r3, r3, r1
 80064e2:	4413      	add	r3, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff fdbe 	bl	8006068 <move_window>
 80064ec:	4603      	mov	r3, r0
 80064ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064f0:	7ffb      	ldrb	r3, [r7, #31]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d15b      	bne.n	80065ae <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	8992      	ldrh	r2, [r2, #12]
 8006504:	fbb3 f0f2 	udiv	r0, r3, r2
 8006508:	fb00 f202 	mul.w	r2, r0, r2
 800650c:	1a9b      	subs	r3, r3, r2
 800650e:	440b      	add	r3, r1
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	b292      	uxth	r2, r2
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff faff 	bl	8005b1a <st_word>
			fs->wflag = 1;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	70da      	strb	r2, [r3, #3]
			break;
 8006522:	e047      	b.n	80065b4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	899b      	ldrh	r3, [r3, #12]
 800652c:	089b      	lsrs	r3, r3, #2
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	fbb3 f3f1 	udiv	r3, r3, r1
 8006538:	4413      	add	r3, r2
 800653a:	4619      	mov	r1, r3
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fd93 	bl	8006068 <move_window>
 8006542:	4603      	mov	r3, r0
 8006544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006546:	7ffb      	ldrb	r3, [r7, #31]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d132      	bne.n	80065b2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	8992      	ldrh	r2, [r2, #12]
 8006560:	fbb3 f0f2 	udiv	r0, r3, r2
 8006564:	fb00 f202 	mul.w	r2, r0, r2
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	440b      	add	r3, r1
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fab1 	bl	8005ad4 <ld_dword>
 8006572:	4603      	mov	r3, r0
 8006574:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006578:	4323      	orrs	r3, r4
 800657a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	8992      	ldrh	r2, [r2, #12]
 800658a:	fbb3 f0f2 	udiv	r0, r3, r2
 800658e:	fb00 f202 	mul.w	r2, r0, r2
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	440b      	add	r3, r1
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fad9 	bl	8005b50 <st_dword>
			fs->wflag = 1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	70da      	strb	r2, [r3, #3]
			break;
 80065a4:	e006      	b.n	80065b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80065a6:	bf00      	nop
 80065a8:	e004      	b.n	80065b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80065aa:	bf00      	nop
 80065ac:	e002      	b.n	80065b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80065ae:	bf00      	nop
 80065b0:	e000      	b.n	80065b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80065b2:	bf00      	nop
		}
	}
	return res;
 80065b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3724      	adds	r7, #36	; 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd90      	pop	{r4, r7, pc}

080065be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b088      	sub	sp, #32
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d904      	bls.n	80065e4 <remove_chain+0x26>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d301      	bcc.n	80065e8 <remove_chain+0x2a>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e04b      	b.n	8006680 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80065ee:	f04f 32ff 	mov.w	r2, #4294967295
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	69b8      	ldr	r0, [r7, #24]
 80065f6:	f7ff fec8 	bl	800638a <put_fat>
 80065fa:	4603      	mov	r3, r0
 80065fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <remove_chain+0x4a>
 8006604:	7ffb      	ldrb	r3, [r7, #31]
 8006606:	e03b      	b.n	8006680 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fde9 	bl	80061e2 <get_fat>
 8006610:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d031      	beq.n	800667c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <remove_chain+0x64>
 800661e:	2302      	movs	r3, #2
 8006620:	e02e      	b.n	8006680 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d101      	bne.n	800662e <remove_chain+0x70>
 800662a:	2301      	movs	r3, #1
 800662c:	e028      	b.n	8006680 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800662e:	2200      	movs	r2, #0
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	69b8      	ldr	r0, [r7, #24]
 8006634:	f7ff fea9 	bl	800638a <put_fat>
 8006638:	4603      	mov	r3, r0
 800663a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800663c:	7ffb      	ldrb	r3, [r7, #31]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <remove_chain+0x88>
 8006642:	7ffb      	ldrb	r3, [r7, #31]
 8006644:	e01c      	b.n	8006680 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	3b02      	subs	r3, #2
 8006650:	429a      	cmp	r2, r3
 8006652:	d20b      	bcs.n	800666c <remove_chain+0xae>
			fs->free_clst++;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	791b      	ldrb	r3, [r3, #4]
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	429a      	cmp	r2, r3
 8006678:	d3c6      	bcc.n	8006608 <remove_chain+0x4a>
 800667a:	e000      	b.n	800667e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800667c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3720      	adds	r7, #32
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <create_chain+0x2c>
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d31b      	bcc.n	80066ec <create_chain+0x64>
 80066b4:	2301      	movs	r3, #1
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e018      	b.n	80066ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fd90 	bl	80061e2 <get_fat>
 80066c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d801      	bhi.n	80066ce <create_chain+0x46>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e070      	b.n	80067b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d101      	bne.n	80066da <create_chain+0x52>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	e06a      	b.n	80067b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d201      	bcs.n	80066e8 <create_chain+0x60>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	e063      	b.n	80067b0 <create_chain+0x128>
		scl = clst;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d307      	bcc.n	8006710 <create_chain+0x88>
				ncl = 2;
 8006700:	2302      	movs	r3, #2
 8006702:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	429a      	cmp	r2, r3
 800670a:	d901      	bls.n	8006710 <create_chain+0x88>
 800670c:	2300      	movs	r3, #0
 800670e:	e04f      	b.n	80067b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006710:	69f9      	ldr	r1, [r7, #28]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fd65 	bl	80061e2 <get_fat>
 8006718:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d003      	beq.n	800672e <create_chain+0xa6>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d101      	bne.n	8006732 <create_chain+0xaa>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	e03e      	b.n	80067b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	429a      	cmp	r2, r3
 8006738:	d1da      	bne.n	80066f0 <create_chain+0x68>
 800673a:	2300      	movs	r3, #0
 800673c:	e038      	b.n	80067b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800673e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006740:	f04f 32ff 	mov.w	r2, #4294967295
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f7ff fe1f 	bl	800638a <put_fat>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <create_chain+0xe2>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d006      	beq.n	800676a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f7ff fe12 	bl	800638a <put_fat>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d116      	bne.n	800679e <create_chain+0x116>
		fs->last_clst = ncl;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	3b02      	subs	r3, #2
 8006780:	429a      	cmp	r2, r3
 8006782:	d804      	bhi.n	800678e <create_chain+0x106>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	1e5a      	subs	r2, r3, #1
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	791b      	ldrb	r3, [r3, #4]
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	711a      	strb	r2, [r3, #4]
 800679c:	e007      	b.n	80067ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d102      	bne.n	80067aa <create_chain+0x122>
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	e000      	b.n	80067ac <create_chain+0x124>
 80067aa:	2301      	movs	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80067ae:	69fb      	ldr	r3, [r7, #28]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	3304      	adds	r3, #4
 80067ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	899b      	ldrh	r3, [r3, #12]
 80067d4:	461a      	mov	r2, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	8952      	ldrh	r2, [r2, #10]
 80067e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	613a      	str	r2, [r7, #16]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <clmt_clust+0x42>
 80067f6:	2300      	movs	r3, #0
 80067f8:	e010      	b.n	800681c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d307      	bcc.n	8006812 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3304      	adds	r3, #4
 800680e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006810:	e7e9      	b.n	80067e6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006812:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	4413      	add	r3, r2
}
 800681c:	4618      	mov	r0, r3
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800683e:	d204      	bcs.n	800684a <dir_sdi+0x22>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <dir_sdi+0x26>
		return FR_INT_ERR;
 800684a:	2302      	movs	r3, #2
 800684c:	e071      	b.n	8006932 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <dir_sdi+0x46>
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d902      	bls.n	800686e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10c      	bne.n	800688e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	8912      	ldrh	r2, [r2, #8]
 800687c:	4293      	cmp	r3, r2
 800687e:	d301      	bcc.n	8006884 <dir_sdi+0x5c>
 8006880:	2302      	movs	r3, #2
 8006882:	e056      	b.n	8006932 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	61da      	str	r2, [r3, #28]
 800688c:	e02d      	b.n	80068ea <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	895b      	ldrh	r3, [r3, #10]
 8006892:	461a      	mov	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	899b      	ldrh	r3, [r3, #12]
 8006898:	fb02 f303 	mul.w	r3, r2, r3
 800689c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800689e:	e019      	b.n	80068d4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6979      	ldr	r1, [r7, #20]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff fc9c 	bl	80061e2 <get_fat>
 80068aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	d101      	bne.n	80068b8 <dir_sdi+0x90>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e03c      	b.n	8006932 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d904      	bls.n	80068c8 <dir_sdi+0xa0>
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d301      	bcc.n	80068cc <dir_sdi+0xa4>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e032      	b.n	8006932 <dir_sdi+0x10a>
			ofs -= csz;
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d2e1      	bcs.n	80068a0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	6938      	ldr	r0, [r7, #16]
 80068e0:	f7ff fc60 	bl	80061a4 <clust2sect>
 80068e4:	4602      	mov	r2, r0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <dir_sdi+0xd4>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e01a      	b.n	8006932 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	899b      	ldrh	r3, [r3, #12]
 8006904:	4619      	mov	r1, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	fbb3 f3f1 	udiv	r3, r3, r1
 800690c:	441a      	add	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	899b      	ldrh	r3, [r3, #12]
 800691c:	461a      	mov	r2, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	fbb3 f0f2 	udiv	r0, r3, r2
 8006924:	fb00 f202 	mul.w	r2, r0, r2
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	18ca      	adds	r2, r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	3320      	adds	r3, #32
 8006950:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <dir_next+0x28>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006960:	d301      	bcc.n	8006966 <dir_next+0x2c>
 8006962:	2304      	movs	r3, #4
 8006964:	e0bb      	b.n	8006ade <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	899b      	ldrh	r3, [r3, #12]
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006972:	fb01 f202 	mul.w	r2, r1, r2
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	f040 809d 	bne.w	8006ab8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	8912      	ldrh	r2, [r2, #8]
 8006998:	4293      	cmp	r3, r2
 800699a:	f0c0 808d 	bcc.w	8006ab8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	61da      	str	r2, [r3, #28]
 80069a4:	2304      	movs	r3, #4
 80069a6:	e09a      	b.n	8006ade <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	899b      	ldrh	r3, [r3, #12]
 80069ac:	461a      	mov	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	8952      	ldrh	r2, [r2, #10]
 80069b8:	3a01      	subs	r2, #1
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d17b      	bne.n	8006ab8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	4619      	mov	r1, r3
 80069c8:	4610      	mov	r0, r2
 80069ca:	f7ff fc0a 	bl	80061e2 <get_fat>
 80069ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d801      	bhi.n	80069da <dir_next+0xa0>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e081      	b.n	8006ade <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d101      	bne.n	80069e6 <dir_next+0xac>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e07b      	b.n	8006ade <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d359      	bcc.n	8006aa4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	61da      	str	r2, [r3, #28]
 80069fc:	2304      	movs	r3, #4
 80069fe:	e06e      	b.n	8006ade <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7ff fe3d 	bl	8006688 <create_chain>
 8006a0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <dir_next+0xe0>
 8006a16:	2307      	movs	r3, #7
 8006a18:	e061      	b.n	8006ade <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <dir_next+0xea>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e05c      	b.n	8006ade <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d101      	bne.n	8006a30 <dir_next+0xf6>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e056      	b.n	8006ade <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff fad5 	bl	8005fe0 <sync_window>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <dir_next+0x106>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e04e      	b.n	8006ade <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	899b      	ldrh	r3, [r3, #12]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	f7ff f8cc 	bl	8005bea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a52:	2300      	movs	r3, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	6979      	ldr	r1, [r7, #20]
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff fba3 	bl	80061a4 <clust2sect>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
 8006a64:	e012      	b.n	8006a8c <dir_next+0x152>
						fs->wflag = 1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff fab7 	bl	8005fe0 <sync_window>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <dir_next+0x142>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e030      	b.n	8006ade <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	895b      	ldrh	r3, [r3, #10]
 8006a90:	461a      	mov	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d3e6      	bcc.n	8006a66 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006aaa:	6979      	ldr	r1, [r7, #20]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff fb79 	bl	80061a4 <clust2sect>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	899b      	ldrh	r3, [r3, #12]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ad0:	fb00 f202 	mul.w	r2, r0, r2
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	18ca      	adds	r2, r1, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006af6:	2100      	movs	r1, #0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fe95 	bl	8006828 <dir_sdi>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d12b      	bne.n	8006b60 <dir_alloc+0x7a>
		n = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4619      	mov	r1, r3
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff faa8 	bl	8006068 <move_window>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11d      	bne.n	8006b5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2be5      	cmp	r3, #229	; 0xe5
 8006b2a:	d004      	beq.n	8006b36 <dir_alloc+0x50>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d102      	bne.n	8006b4a <dir_alloc+0x64>
 8006b44:	e00c      	b.n	8006b60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b46:	2300      	movs	r3, #0
 8006b48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fef4 	bl	800693a <dir_next>
 8006b52:	4603      	mov	r3, r0
 8006b54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0d7      	beq.n	8006b0c <dir_alloc+0x26>
 8006b5c:	e000      	b.n	8006b60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006b5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d101      	bne.n	8006b6a <dir_alloc+0x84>
 8006b66:	2307      	movs	r3, #7
 8006b68:	75fb      	strb	r3, [r7, #23]
	return res;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	331a      	adds	r3, #26
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe ff8e 	bl	8005aa4 <ld_word>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d109      	bne.n	8006ba8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe ff83 	bl	8005aa4 <ld_word>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	331a      	adds	r3, #26
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe ffa6 	bl	8005b1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d109      	bne.n	8006bea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f103 0214 	add.w	r2, r3, #20
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0c1b      	lsrs	r3, r3, #16
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fe ff98 	bl	8005b1a <st_word>
	}
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	331a      	adds	r3, #26
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe ff4e 	bl	8005aa4 <ld_word>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <cmp_lfn+0x1e>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e059      	b.n	8006cc6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c1a:	1e5a      	subs	r2, r3, #1
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006c28:	2301      	movs	r3, #1
 8006c2a:	81fb      	strh	r3, [r7, #14]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	e033      	b.n	8006c9a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006c32:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <cmp_lfn+0xdc>)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4413      	add	r3, r2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe ff2f 	bl	8005aa4 <ld_word>
 8006c46:	4603      	mov	r3, r0
 8006c48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006c4a:	89fb      	ldrh	r3, [r7, #14]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01a      	beq.n	8006c86 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2bfe      	cmp	r3, #254	; 0xfe
 8006c54:	d812      	bhi.n	8006c7c <cmp_lfn+0x88>
 8006c56:	89bb      	ldrh	r3, [r7, #12]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 fdcd 	bl	80087f8 <ff_wtoupper>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461c      	mov	r4, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	617a      	str	r2, [r7, #20]
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fdc1 	bl	80087f8 <ff_wtoupper>
 8006c76:	4603      	mov	r3, r0
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	d001      	beq.n	8006c80 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e022      	b.n	8006cc6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006c80:	89bb      	ldrh	r3, [r7, #12]
 8006c82:	81fb      	strh	r3, [r7, #14]
 8006c84:	e006      	b.n	8006c94 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006c86:	89bb      	ldrh	r3, [r7, #12]
 8006c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d001      	beq.n	8006c94 <cmp_lfn+0xa0>
 8006c90:	2300      	movs	r3, #0
 8006c92:	e018      	b.n	8006cc6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	3301      	adds	r3, #1
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b0c      	cmp	r3, #12
 8006c9e:	d9c8      	bls.n	8006c32 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <cmp_lfn+0xd0>
 8006cac:	89fb      	ldrh	r3, [r7, #14]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <cmp_lfn+0xd0>
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <cmp_lfn+0xd0>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006cc4:	2301      	movs	r3, #1
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd90      	pop	{r4, r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	0800dc78 	.word	0x0800dc78

08006cd4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	71fb      	strb	r3, [r7, #7]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	330d      	adds	r3, #13
 8006cee:	79ba      	ldrb	r2, [r7, #6]
 8006cf0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	330b      	adds	r3, #11
 8006cf6:	220f      	movs	r2, #15
 8006cf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	331a      	adds	r3, #26
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe ff06 	bl	8005b1a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	1e5a      	subs	r2, r3, #1
 8006d12:	4613      	mov	r3, r2
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	82fb      	strh	r3, [r7, #22]
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006d26:	8afb      	ldrh	r3, [r7, #22]
 8006d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <put_lfn+0x6c>
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	61fa      	str	r2, [r7, #28]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006d40:	4a17      	ldr	r2, [pc, #92]	; (8006da0 <put_lfn+0xcc>)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	4413      	add	r3, r2
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	8afa      	ldrh	r2, [r7, #22]
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fee1 	bl	8005b1a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006d58:	8afb      	ldrh	r3, [r7, #22]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <put_lfn+0x90>
 8006d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d62:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	3301      	adds	r3, #1
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b0c      	cmp	r3, #12
 8006d6e:	d9da      	bls.n	8006d26 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006d70:	8afb      	ldrh	r3, [r7, #22]
 8006d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d006      	beq.n	8006d88 <put_lfn+0xb4>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d103      	bne.n	8006d90 <put_lfn+0xbc>
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d8e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	79fa      	ldrb	r2, [r7, #7]
 8006d94:	701a      	strb	r2, [r3, #0]
}
 8006d96:	bf00      	nop
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	0800dc78 	.word	0x0800dc78

08006da4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	; 0x30
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006db2:	220b      	movs	r2, #11
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7fe fef6 	bl	8005ba8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d92b      	bls.n	8006e1a <gen_numname+0x76>
		sr = seq;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006dc6:	e022      	b.n	8006e0e <gen_numname+0x6a>
			wc = *lfn++;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	1c9a      	adds	r2, r3, #2
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd6:	e017      	b.n	8006e08 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	005a      	lsls	r2, r3, #1
 8006ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	4413      	add	r3, r2
 8006de4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <gen_numname+0x5e>
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006dfc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006e00:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	3301      	adds	r3, #1
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	2b0f      	cmp	r3, #15
 8006e0c:	d9e4      	bls.n	8006dd8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1d8      	bne.n	8006dc8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006e1a:	2307      	movs	r3, #7
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	3330      	adds	r3, #48	; 0x30
 8006e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e32:	2b39      	cmp	r3, #57	; 0x39
 8006e34:	d904      	bls.n	8006e40 <gen_numname+0x9c>
 8006e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e3a:	3307      	adds	r3, #7
 8006e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	1e5a      	subs	r2, r3, #1
 8006e44:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e46:	3330      	adds	r3, #48	; 0x30
 8006e48:	443b      	add	r3, r7
 8006e4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006e4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	091b      	lsrs	r3, r3, #4
 8006e56:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1df      	bne.n	8006e1e <gen_numname+0x7a>
	ns[i] = '~';
 8006e5e:	f107 0214 	add.w	r2, r7, #20
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	4413      	add	r3, r2
 8006e66:	227e      	movs	r2, #126	; 0x7e
 8006e68:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6e:	e002      	b.n	8006e76 <gen_numname+0xd2>
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	3301      	adds	r3, #1
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
 8006e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d205      	bcs.n	8006e8a <gen_numname+0xe6>
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	4413      	add	r3, r2
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d1f2      	bne.n	8006e70 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	d807      	bhi.n	8006ea0 <gen_numname+0xfc>
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e96:	3330      	adds	r3, #48	; 0x30
 8006e98:	443b      	add	r3, r7
 8006e9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006e9e:	e000      	b.n	8006ea2 <gen_numname+0xfe>
 8006ea0:	2120      	movs	r1, #32
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	460a      	mov	r2, r1
 8006eae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	2b07      	cmp	r3, #7
 8006eb4:	d9e9      	bls.n	8006e8a <gen_numname+0xe6>
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	3730      	adds	r7, #48	; 0x30
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006ecc:	230b      	movs	r3, #11
 8006ece:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	0852      	lsrs	r2, r2, #1
 8006ed6:	01db      	lsls	r3, r3, #7
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	6079      	str	r1, [r7, #4]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1ed      	bne.n	8006ed0 <sum_sfn+0x10>
	return sum;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f10:	2100      	movs	r1, #0
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fc88 	bl	8006828 <dir_sdi>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <dir_find+0x24>
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	e0a9      	b.n	800707a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f26:	23ff      	movs	r3, #255	; 0xff
 8006f28:	753b      	strb	r3, [r7, #20]
 8006f2a:	7d3b      	ldrb	r3, [r7, #20]
 8006f2c:	757b      	strb	r3, [r7, #21]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f04f 32ff 	mov.w	r2, #4294967295
 8006f34:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6938      	ldr	r0, [r7, #16]
 8006f3e:	f7ff f893 	bl	8006068 <move_window>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f040 8090 	bne.w	800706e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f56:	7dbb      	ldrb	r3, [r7, #22]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <dir_find+0x60>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	75fb      	strb	r3, [r7, #23]
 8006f60:	e08a      	b.n	8007078 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	330b      	adds	r3, #11
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f6e:	73fb      	strb	r3, [r7, #15]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	7bfa      	ldrb	r2, [r7, #15]
 8006f74:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006f76:	7dbb      	ldrb	r3, [r7, #22]
 8006f78:	2be5      	cmp	r3, #229	; 0xe5
 8006f7a:	d007      	beq.n	8006f8c <dir_find+0x8a>
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <dir_find+0x98>
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	2b0f      	cmp	r3, #15
 8006f8a:	d006      	beq.n	8006f9a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f8c:	23ff      	movs	r3, #255	; 0xff
 8006f8e:	757b      	strb	r3, [r7, #21]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f04f 32ff 	mov.w	r2, #4294967295
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30
 8006f98:	e05e      	b.n	8007058 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b0f      	cmp	r3, #15
 8006f9e:	d136      	bne.n	800700e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d154      	bne.n	8007058 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006fae:	7dbb      	ldrb	r3, [r7, #22]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	7b5b      	ldrb	r3, [r3, #13]
 8006fbe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006fc0:	7dbb      	ldrb	r3, [r7, #22]
 8006fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc6:	75bb      	strb	r3, [r7, #22]
 8006fc8:	7dbb      	ldrb	r3, [r7, #22]
 8006fca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	695a      	ldr	r2, [r3, #20]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006fd4:	7dba      	ldrb	r2, [r7, #22]
 8006fd6:	7d7b      	ldrb	r3, [r7, #21]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d115      	bne.n	8007008 <dir_find+0x106>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	330d      	adds	r3, #13
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	7d3a      	ldrb	r2, [r7, #20]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d10e      	bne.n	8007008 <dir_find+0x106>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7ff fdfd 	bl	8006bf4 <cmp_lfn>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <dir_find+0x106>
 8007000:	7d7b      	ldrb	r3, [r7, #21]
 8007002:	3b01      	subs	r3, #1
 8007004:	b2db      	uxtb	r3, r3
 8007006:	e000      	b.n	800700a <dir_find+0x108>
 8007008:	23ff      	movs	r3, #255	; 0xff
 800700a:	757b      	strb	r3, [r7, #21]
 800700c:	e024      	b.n	8007058 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800700e:	7d7b      	ldrb	r3, [r7, #21]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <dir_find+0x126>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ff51 	bl	8006ec0 <sum_sfn>
 800701e:	4603      	mov	r3, r0
 8007020:	461a      	mov	r2, r3
 8007022:	7d3b      	ldrb	r3, [r7, #20]
 8007024:	4293      	cmp	r3, r2
 8007026:	d024      	beq.n	8007072 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <dir_find+0x14a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a18      	ldr	r0, [r3, #32]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3324      	adds	r3, #36	; 0x24
 800703e:	220b      	movs	r2, #11
 8007040:	4619      	mov	r1, r3
 8007042:	f7fe fded 	bl	8005c20 <mem_cmp>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d014      	beq.n	8007076 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800704c:	23ff      	movs	r3, #255	; 0xff
 800704e:	757b      	strb	r3, [r7, #21]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f04f 32ff 	mov.w	r2, #4294967295
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007058:	2100      	movs	r1, #0
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fc6d 	bl	800693a <dir_next>
 8007060:	4603      	mov	r3, r0
 8007062:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f43f af65 	beq.w	8006f36 <dir_find+0x34>
 800706c:	e004      	b.n	8007078 <dir_find+0x176>
		if (res != FR_OK) break;
 800706e:	bf00      	nop
 8007070:	e002      	b.n	8007078 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007072:	bf00      	nop
 8007074:	e000      	b.n	8007078 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007076:	bf00      	nop

	return res;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007098:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <dir_register+0x20>
 80070a0:	2306      	movs	r3, #6
 80070a2:	e0e0      	b.n	8007266 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80070a4:	2300      	movs	r3, #0
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
 80070a8:	e002      	b.n	80070b0 <dir_register+0x2c>
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	3301      	adds	r3, #1
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4413      	add	r3, r2
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f4      	bne.n	80070aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80070c6:	f107 030c 	add.w	r3, r7, #12
 80070ca:	220c      	movs	r2, #12
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe fd6b 	bl	8005ba8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d032      	beq.n	8007142 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2240      	movs	r2, #64	; 0x40
 80070e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80070e4:	2301      	movs	r3, #1
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80070e8:	e016      	b.n	8007118 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	f107 010c 	add.w	r1, r7, #12
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	f7ff fe53 	bl	8006da4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff feff 	bl	8006f02 <dir_find>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800710a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	3301      	adds	r3, #1
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	2b63      	cmp	r3, #99	; 0x63
 800711c:	d9e5      	bls.n	80070ea <dir_register+0x66>
 800711e:	e000      	b.n	8007122 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007120:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	2b64      	cmp	r3, #100	; 0x64
 8007126:	d101      	bne.n	800712c <dir_register+0xa8>
 8007128:	2307      	movs	r3, #7
 800712a:	e09c      	b.n	8007266 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800712c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007130:	2b04      	cmp	r3, #4
 8007132:	d002      	beq.n	800713a <dir_register+0xb6>
 8007134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007138:	e095      	b.n	8007266 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800713a:	7dfa      	ldrb	r2, [r7, #23]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <dir_register+0xd8>
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	330c      	adds	r3, #12
 8007150:	4a47      	ldr	r2, [pc, #284]	; (8007270 <dir_register+0x1ec>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	3301      	adds	r3, #1
 800715a:	e000      	b.n	800715e <dir_register+0xda>
 800715c:	2301      	movs	r3, #1
 800715e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007160:	6a39      	ldr	r1, [r7, #32]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff fcbf 	bl	8006ae6 <dir_alloc>
 8007168:	4603      	mov	r3, r0
 800716a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800716e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007172:	2b00      	cmp	r3, #0
 8007174:	d148      	bne.n	8007208 <dir_register+0x184>
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	3b01      	subs	r3, #1
 800717a:	623b      	str	r3, [r7, #32]
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d042      	beq.n	8007208 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	015b      	lsls	r3, r3, #5
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fb4a 	bl	8006828 <dir_sdi>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800719a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d132      	bne.n	8007208 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3324      	adds	r3, #36	; 0x24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fe8a 	bl	8006ec0 <sum_sfn>
 80071ac:	4603      	mov	r3, r0
 80071ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	4619      	mov	r1, r3
 80071b6:	69f8      	ldr	r0, [r7, #28]
 80071b8:	f7fe ff56 	bl	8006068 <move_window>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80071c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11d      	bne.n	8007206 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	6918      	ldr	r0, [r3, #16]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a19      	ldr	r1, [r3, #32]
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	7efb      	ldrb	r3, [r7, #27]
 80071d8:	f7ff fd7c 	bl	8006cd4 <put_lfn>
				fs->wflag = 1;
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2201      	movs	r2, #1
 80071e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80071e2:	2100      	movs	r1, #0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff fba8 	bl	800693a <dir_next>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80071f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d107      	bne.n	8007208 <dir_register+0x184>
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	623b      	str	r3, [r7, #32]
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1d5      	bne.n	80071b0 <dir_register+0x12c>
 8007204:	e000      	b.n	8007208 <dir_register+0x184>
				if (res != FR_OK) break;
 8007206:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800720c:	2b00      	cmp	r3, #0
 800720e:	d128      	bne.n	8007262 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	4619      	mov	r1, r3
 8007216:	69f8      	ldr	r0, [r7, #28]
 8007218:	f7fe ff26 	bl	8006068 <move_window>
 800721c:	4603      	mov	r3, r0
 800721e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007226:	2b00      	cmp	r3, #0
 8007228:	d11b      	bne.n	8007262 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	2220      	movs	r2, #32
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fcd9 	bl	8005bea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a18      	ldr	r0, [r3, #32]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	220b      	movs	r2, #11
 8007242:	4619      	mov	r1, r3
 8007244:	f7fe fcb0 	bl	8005ba8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	330c      	adds	r3, #12
 8007254:	f002 0218 	and.w	r2, r2, #24
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2201      	movs	r2, #1
 8007260:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007266:	4618      	mov	r0, r3
 8007268:	3730      	adds	r7, #48	; 0x30
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	4ec4ec4f 	.word	0x4ec4ec4f

08007274 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	61ba      	str	r2, [r7, #24]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80072a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072a4:	2b1f      	cmp	r3, #31
 80072a6:	d940      	bls.n	800732a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80072a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072aa:	2b2f      	cmp	r3, #47	; 0x2f
 80072ac:	d006      	beq.n	80072bc <create_name+0x48>
 80072ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b0:	2b5c      	cmp	r3, #92	; 0x5c
 80072b2:	d110      	bne.n	80072d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80072b4:	e002      	b.n	80072bc <create_name+0x48>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	3301      	adds	r3, #1
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	4413      	add	r3, r2
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b2f      	cmp	r3, #47	; 0x2f
 80072c6:	d0f6      	beq.n	80072b6 <create_name+0x42>
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	4413      	add	r3, r2
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b5c      	cmp	r3, #92	; 0x5c
 80072d2:	d0f0      	beq.n	80072b6 <create_name+0x42>
			break;
 80072d4:	e02a      	b.n	800732c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2bfe      	cmp	r3, #254	; 0xfe
 80072da:	d901      	bls.n	80072e0 <create_name+0x6c>
 80072dc:	2306      	movs	r3, #6
 80072de:	e17d      	b.n	80075dc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80072e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80072e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 fa48 	bl	8008780 <ff_convert>
 80072f0:	4603      	mov	r3, r0
 80072f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80072f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <create_name+0x8a>
 80072fa:	2306      	movs	r3, #6
 80072fc:	e16e      	b.n	80075dc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80072fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007300:	2b7f      	cmp	r3, #127	; 0x7f
 8007302:	d809      	bhi.n	8007318 <create_name+0xa4>
 8007304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007306:	4619      	mov	r1, r3
 8007308:	488d      	ldr	r0, [pc, #564]	; (8007540 <create_name+0x2cc>)
 800730a:	f7fe fcb0 	bl	8005c6e <chk_chr>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <create_name+0xa4>
 8007314:	2306      	movs	r3, #6
 8007316:	e161      	b.n	80075dc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	617a      	str	r2, [r7, #20]
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007326:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007328:	e7b4      	b.n	8007294 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800732a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	441a      	add	r2, r3
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007338:	2b1f      	cmp	r3, #31
 800733a:	d801      	bhi.n	8007340 <create_name+0xcc>
 800733c:	2304      	movs	r3, #4
 800733e:	e000      	b.n	8007342 <create_name+0xce>
 8007340:	2300      	movs	r3, #0
 8007342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007346:	e011      	b.n	800736c <create_name+0xf8>
		w = lfn[di - 1];
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800734e:	3b01      	subs	r3, #1
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800735a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800735c:	2b20      	cmp	r3, #32
 800735e:	d002      	beq.n	8007366 <create_name+0xf2>
 8007360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007362:	2b2e      	cmp	r3, #46	; 0x2e
 8007364:	d106      	bne.n	8007374 <create_name+0x100>
		di--;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	3b01      	subs	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1ea      	bne.n	8007348 <create_name+0xd4>
 8007372:	e000      	b.n	8007376 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007374:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	2200      	movs	r2, #0
 8007380:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <create_name+0x118>
 8007388:	2306      	movs	r3, #6
 800738a:	e127      	b.n	80075dc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3324      	adds	r3, #36	; 0x24
 8007390:	220b      	movs	r2, #11
 8007392:	2120      	movs	r1, #32
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fc28 	bl	8005bea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800739a:	2300      	movs	r3, #0
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	e002      	b.n	80073a6 <create_name+0x132>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	3301      	adds	r3, #1
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d0f5      	beq.n	80073a0 <create_name+0x12c>
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	2b2e      	cmp	r3, #46	; 0x2e
 80073c0:	d0ee      	beq.n	80073a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <create_name+0x168>
 80073c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073cc:	f043 0303 	orr.w	r3, r3, #3
 80073d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80073d4:	e002      	b.n	80073dc <create_name+0x168>
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	3b01      	subs	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <create_name+0x182>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073e8:	3b01      	subs	r3, #1
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	2b2e      	cmp	r3, #46	; 0x2e
 80073f4:	d1ef      	bne.n	80073d6 <create_name+0x162>

	i = b = 0; ni = 8;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073fc:	2300      	movs	r3, #0
 80073fe:	623b      	str	r3, [r7, #32]
 8007400:	2308      	movs	r3, #8
 8007402:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	61ba      	str	r2, [r7, #24]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 8090 	beq.w	800753c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800741c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800741e:	2b20      	cmp	r3, #32
 8007420:	d006      	beq.n	8007430 <create_name+0x1bc>
 8007422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007424:	2b2e      	cmp	r3, #46	; 0x2e
 8007426:	d10a      	bne.n	800743e <create_name+0x1ca>
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	d006      	beq.n	800743e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007434:	f043 0303 	orr.w	r3, r3, #3
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800743c:	e07d      	b.n	800753a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800743e:	6a3a      	ldr	r2, [r7, #32]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	429a      	cmp	r2, r3
 8007444:	d203      	bcs.n	800744e <create_name+0x1da>
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	429a      	cmp	r2, r3
 800744c:	d123      	bne.n	8007496 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b0b      	cmp	r3, #11
 8007452:	d106      	bne.n	8007462 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007458:	f043 0303 	orr.w	r3, r3, #3
 800745c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007460:	e075      	b.n	800754e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	429a      	cmp	r2, r3
 8007468:	d005      	beq.n	8007476 <create_name+0x202>
 800746a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746e:	f043 0303 	orr.w	r3, r3, #3
 8007472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	429a      	cmp	r2, r3
 800747c:	d866      	bhi.n	800754c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	2308      	movs	r3, #8
 8007484:	623b      	str	r3, [r7, #32]
 8007486:	230b      	movs	r3, #11
 8007488:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800748a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007494:	e051      	b.n	800753a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007498:	2b7f      	cmp	r3, #127	; 0x7f
 800749a:	d914      	bls.n	80074c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800749c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800749e:	2100      	movs	r1, #0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 f96d 	bl	8008780 <ff_convert>
 80074a6:	4603      	mov	r3, r0
 80074a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80074aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <create_name+0x246>
 80074b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b2:	3b80      	subs	r3, #128	; 0x80
 80074b4:	4a23      	ldr	r2, [pc, #140]	; (8007544 <create_name+0x2d0>)
 80074b6:	5cd3      	ldrb	r3, [r2, r3]
 80074b8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80074ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074be:	f043 0302 	orr.w	r3, r3, #2
 80074c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80074c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d007      	beq.n	80074dc <create_name+0x268>
 80074cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ce:	4619      	mov	r1, r3
 80074d0:	481d      	ldr	r0, [pc, #116]	; (8007548 <create_name+0x2d4>)
 80074d2:	f7fe fbcc 	bl	8005c6e <chk_chr>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80074dc:	235f      	movs	r3, #95	; 0x5f
 80074de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e4:	f043 0303 	orr.w	r3, r3, #3
 80074e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074ec:	e01b      	b.n	8007526 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80074ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d909      	bls.n	8007508 <create_name+0x294>
 80074f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f6:	2b5a      	cmp	r3, #90	; 0x5a
 80074f8:	d806      	bhi.n	8007508 <create_name+0x294>
					b |= 2;
 80074fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074fe:	f043 0302 	orr.w	r3, r3, #2
 8007502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007506:	e00e      	b.n	8007526 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800750a:	2b60      	cmp	r3, #96	; 0x60
 800750c:	d90b      	bls.n	8007526 <create_name+0x2b2>
 800750e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007510:	2b7a      	cmp	r3, #122	; 0x7a
 8007512:	d808      	bhi.n	8007526 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007522:	3b20      	subs	r3, #32
 8007524:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	623a      	str	r2, [r7, #32]
 800752c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800752e:	b2d1      	uxtb	r1, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	4413      	add	r3, r2
 8007534:	460a      	mov	r2, r1
 8007536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800753a:	e763      	b.n	8007404 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800753c:	bf00      	nop
 800753e:	e006      	b.n	800754e <create_name+0x2da>
 8007540:	0800daf8 	.word	0x0800daf8
 8007544:	0800dbf8 	.word	0x0800dbf8
 8007548:	0800db04 	.word	0x0800db04
			if (si > di) break;			/* No extension */
 800754c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007554:	2be5      	cmp	r3, #229	; 0xe5
 8007556:	d103      	bne.n	8007560 <create_name+0x2ec>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2205      	movs	r2, #5
 800755c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2b08      	cmp	r3, #8
 8007564:	d104      	bne.n	8007570 <create_name+0x2fc>
 8007566:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b0c      	cmp	r3, #12
 800757a:	d005      	beq.n	8007588 <create_name+0x314>
 800757c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	2b03      	cmp	r3, #3
 8007586:	d105      	bne.n	8007594 <create_name+0x320>
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758c:	f043 0302 	orr.w	r3, r3, #2
 8007590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d117      	bne.n	80075d0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80075a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d105      	bne.n	80075b8 <create_name+0x344>
 80075ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b0:	f043 0310 	orr.w	r3, r3, #16
 80075b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80075b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075bc:	f003 030c 	and.w	r3, r3, #12
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d105      	bne.n	80075d0 <create_name+0x35c>
 80075c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c8:	f043 0308 	orr.w	r3, r3, #8
 80075cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80075da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3728      	adds	r7, #40	; 0x28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80075f8:	e002      	b.n	8007600 <follow_path+0x1c>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b2f      	cmp	r3, #47	; 0x2f
 8007606:	d0f8      	beq.n	80075fa <follow_path+0x16>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b5c      	cmp	r3, #92	; 0x5c
 800760e:	d0f4      	beq.n	80075fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2200      	movs	r2, #0
 8007614:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b1f      	cmp	r3, #31
 800761c:	d80a      	bhi.n	8007634 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2280      	movs	r2, #128	; 0x80
 8007622:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007626:	2100      	movs	r1, #0
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff f8fd 	bl	8006828 <dir_sdi>
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]
 8007632:	e048      	b.n	80076c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007634:	463b      	mov	r3, r7
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff fe1b 	bl	8007274 <create_name>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d139      	bne.n	80076bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff fc5a 	bl	8006f02 <dir_find>
 800764e:	4603      	mov	r3, r0
 8007650:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007658:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b04      	cmp	r3, #4
 8007664:	d12c      	bne.n	80076c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d127      	bne.n	80076c0 <follow_path+0xdc>
 8007670:	2305      	movs	r3, #5
 8007672:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007674:	e024      	b.n	80076c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d121      	bne.n	80076c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	799b      	ldrb	r3, [r3, #6]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800768c:	2305      	movs	r3, #5
 800768e:	75fb      	strb	r3, [r7, #23]
 8007690:	e019      	b.n	80076c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	8992      	ldrh	r2, [r2, #12]
 80076a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80076a4:	fb00 f202 	mul.w	r2, r0, r2
 80076a8:	1a9b      	subs	r3, r3, r2
 80076aa:	440b      	add	r3, r1
 80076ac:	4619      	mov	r1, r3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fa60 	bl	8006b74 <ld_clust>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80076ba:	e7bb      	b.n	8007634 <follow_path+0x50>
			if (res != FR_OK) break;
 80076bc:	bf00      	nop
 80076be:	e002      	b.n	80076c6 <follow_path+0xe2>
				break;
 80076c0:	bf00      	nop
 80076c2:	e000      	b.n	80076c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80076c4:	bf00      	nop
			}
		}
	}

	return res;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80076d8:	f04f 33ff 	mov.w	r3, #4294967295
 80076dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d031      	beq.n	800774a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e002      	b.n	80076f4 <get_ldnumber+0x24>
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	3301      	adds	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b1f      	cmp	r3, #31
 80076fa:	d903      	bls.n	8007704 <get_ldnumber+0x34>
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b3a      	cmp	r3, #58	; 0x3a
 8007702:	d1f4      	bne.n	80076ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b3a      	cmp	r3, #58	; 0x3a
 800770a:	d11c      	bne.n	8007746 <get_ldnumber+0x76>
			tp = *path;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	60fa      	str	r2, [r7, #12]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	3b30      	subs	r3, #48	; 0x30
 800771c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b09      	cmp	r3, #9
 8007722:	d80e      	bhi.n	8007742 <get_ldnumber+0x72>
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	429a      	cmp	r2, r3
 800772a:	d10a      	bne.n	8007742 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d107      	bne.n	8007742 <get_ldnumber+0x72>
					vol = (int)i;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	3301      	adds	r3, #1
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	e002      	b.n	800774c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800774a:	693b      	ldr	r3, [r7, #16]
}
 800774c:	4618      	mov	r0, r3
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	70da      	strb	r2, [r3, #3]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f04f 32ff 	mov.w	r2, #4294967295
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fe fc78 	bl	8006068 <move_window>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <check_fs+0x2a>
 800777e:	2304      	movs	r3, #4
 8007780:	e038      	b.n	80077f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	333c      	adds	r3, #60	; 0x3c
 8007786:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe f98a 	bl	8005aa4 <ld_word>
 8007790:	4603      	mov	r3, r0
 8007792:	461a      	mov	r2, r3
 8007794:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007798:	429a      	cmp	r2, r3
 800779a:	d001      	beq.n	80077a0 <check_fs+0x48>
 800779c:	2303      	movs	r3, #3
 800779e:	e029      	b.n	80077f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a6:	2be9      	cmp	r3, #233	; 0xe9
 80077a8:	d009      	beq.n	80077be <check_fs+0x66>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b0:	2beb      	cmp	r3, #235	; 0xeb
 80077b2:	d11e      	bne.n	80077f2 <check_fs+0x9a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ba:	2b90      	cmp	r3, #144	; 0x90
 80077bc:	d119      	bne.n	80077f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	333c      	adds	r3, #60	; 0x3c
 80077c2:	3336      	adds	r3, #54	; 0x36
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe f985 	bl	8005ad4 <ld_dword>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <check_fs+0xa4>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d101      	bne.n	80077da <check_fs+0x82>
 80077d6:	2300      	movs	r3, #0
 80077d8:	e00c      	b.n	80077f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	333c      	adds	r3, #60	; 0x3c
 80077de:	3352      	adds	r3, #82	; 0x52
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe f977 	bl	8005ad4 <ld_dword>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a05      	ldr	r2, [pc, #20]	; (8007800 <check_fs+0xa8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d101      	bne.n	80077f2 <check_fs+0x9a>
 80077ee:	2300      	movs	r3, #0
 80077f0:	e000      	b.n	80077f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80077f2:	2302      	movs	r3, #2
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	00544146 	.word	0x00544146
 8007800:	33544146 	.word	0x33544146

08007804 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b096      	sub	sp, #88	; 0x58
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff ff59 	bl	80076d0 <get_ldnumber>
 800781e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	da01      	bge.n	800782a <find_volume+0x26>
 8007826:	230b      	movs	r3, #11
 8007828:	e26a      	b.n	8007d00 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800782a:	4aa3      	ldr	r2, [pc, #652]	; (8007ab8 <find_volume+0x2b4>)
 800782c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <find_volume+0x3a>
 800783a:	230c      	movs	r3, #12
 800783c:	e260      	b.n	8007d00 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800783e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007840:	f7fe fa30 	bl	8005ca4 <lock_fs>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <find_volume+0x4a>
 800784a:	230f      	movs	r3, #15
 800784c:	e258      	b.n	8007d00 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007852:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01a      	beq.n	800789a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe f87d 	bl	8005968 <disk_status>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10c      	bne.n	800789a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <find_volume+0x92>
 8007886:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007892:	230a      	movs	r3, #10
 8007894:	e234      	b.n	8007d00 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8007896:	2300      	movs	r3, #0
 8007898:	e232      	b.n	8007d00 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80078a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe f875 	bl	800599c <disk_initialize>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80078b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80078c4:	2303      	movs	r3, #3
 80078c6:	e21b      	b.n	8007d00 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <find_volume+0xda>
 80078ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80078da:	230a      	movs	r3, #10
 80078dc:	e210      	b.n	8007d00 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	7858      	ldrb	r0, [r3, #1]
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	330c      	adds	r3, #12
 80078e6:	461a      	mov	r2, r3
 80078e8:	2102      	movs	r1, #2
 80078ea:	f7fe f8bd 	bl	8005a68 <disk_ioctl>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <find_volume+0xf4>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e203      	b.n	8007d00 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	899b      	ldrh	r3, [r3, #12]
 80078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007900:	d80d      	bhi.n	800791e <find_volume+0x11a>
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	899b      	ldrh	r3, [r3, #12]
 8007906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800790a:	d308      	bcc.n	800791e <find_volume+0x11a>
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	899b      	ldrh	r3, [r3, #12]
 8007910:	461a      	mov	r2, r3
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	899b      	ldrh	r3, [r3, #12]
 8007916:	3b01      	subs	r3, #1
 8007918:	4013      	ands	r3, r2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <find_volume+0x11e>
 800791e:	2301      	movs	r3, #1
 8007920:	e1ee      	b.n	8007d00 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800792a:	f7ff ff15 	bl	8007758 <check_fs>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007938:	2b02      	cmp	r3, #2
 800793a:	d149      	bne.n	80079d0 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800793c:	2300      	movs	r3, #0
 800793e:	643b      	str	r3, [r7, #64]	; 0x40
 8007940:	e01e      	b.n	8007980 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007950:	4413      	add	r3, r2
 8007952:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	3304      	adds	r3, #4
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <find_volume+0x168>
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	3308      	adds	r3, #8
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe f8b6 	bl	8005ad4 <ld_dword>
 8007968:	4602      	mov	r2, r0
 800796a:	e000      	b.n	800796e <find_volume+0x16a>
 800796c:	2200      	movs	r2, #0
 800796e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	3358      	adds	r3, #88	; 0x58
 8007974:	443b      	add	r3, r7
 8007976:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800797a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800797c:	3301      	adds	r3, #1
 800797e:	643b      	str	r3, [r7, #64]	; 0x40
 8007980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007982:	2b03      	cmp	r3, #3
 8007984:	d9dd      	bls.n	8007942 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007986:	2300      	movs	r3, #0
 8007988:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800798a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <find_volume+0x192>
 8007990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007992:	3b01      	subs	r3, #1
 8007994:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	3358      	adds	r3, #88	; 0x58
 800799c:	443b      	add	r3, r7
 800799e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80079a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80079a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <find_volume+0x1b2>
 80079aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079ae:	f7ff fed3 	bl	8007758 <check_fs>
 80079b2:	4603      	mov	r3, r0
 80079b4:	e000      	b.n	80079b8 <find_volume+0x1b4>
 80079b6:	2303      	movs	r3, #3
 80079b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80079bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d905      	bls.n	80079d0 <find_volume+0x1cc>
 80079c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c6:	3301      	adds	r3, #1
 80079c8:	643b      	str	r3, [r7, #64]	; 0x40
 80079ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d9e2      	bls.n	8007996 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80079d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d101      	bne.n	80079dc <find_volume+0x1d8>
 80079d8:	2301      	movs	r3, #1
 80079da:	e191      	b.n	8007d00 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80079dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d901      	bls.n	80079e8 <find_volume+0x1e4>
 80079e4:	230d      	movs	r3, #13
 80079e6:	e18b      	b.n	8007d00 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	333c      	adds	r3, #60	; 0x3c
 80079ec:	330b      	adds	r3, #11
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe f858 	bl	8005aa4 <ld_word>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	899b      	ldrh	r3, [r3, #12]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d001      	beq.n	8007a04 <find_volume+0x200>
 8007a00:	230d      	movs	r3, #13
 8007a02:	e17d      	b.n	8007d00 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	333c      	adds	r3, #60	; 0x3c
 8007a08:	3316      	adds	r3, #22
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe f84a 	bl	8005aa4 <ld_word>
 8007a10:	4603      	mov	r3, r0
 8007a12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <find_volume+0x224>
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	333c      	adds	r3, #60	; 0x3c
 8007a1e:	3324      	adds	r3, #36	; 0x24
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe f857 	bl	8005ad4 <ld_dword>
 8007a26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a2c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3a:	789b      	ldrb	r3, [r3, #2]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d005      	beq.n	8007a4c <find_volume+0x248>
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	789b      	ldrb	r3, [r3, #2]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d001      	beq.n	8007a4c <find_volume+0x248>
 8007a48:	230d      	movs	r3, #13
 8007a4a:	e159      	b.n	8007d00 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	789b      	ldrb	r3, [r3, #2]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a68:	895b      	ldrh	r3, [r3, #10]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <find_volume+0x27c>
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	895b      	ldrh	r3, [r3, #10]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	895b      	ldrh	r3, [r3, #10]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <find_volume+0x280>
 8007a80:	230d      	movs	r3, #13
 8007a82:	e13d      	b.n	8007d00 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	333c      	adds	r3, #60	; 0x3c
 8007a88:	3311      	adds	r3, #17
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe f80a 	bl	8005aa4 <ld_word>
 8007a90:	4603      	mov	r3, r0
 8007a92:	461a      	mov	r2, r3
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	891b      	ldrh	r3, [r3, #8]
 8007a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a9e:	8992      	ldrh	r2, [r2, #12]
 8007aa0:	0952      	lsrs	r2, r2, #5
 8007aa2:	b292      	uxth	r2, r2
 8007aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007aa8:	fb01 f202 	mul.w	r2, r1, r2
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <find_volume+0x2b8>
 8007ab4:	230d      	movs	r3, #13
 8007ab6:	e123      	b.n	8007d00 <find_volume+0x4fc>
 8007ab8:	20002344 	.word	0x20002344

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	333c      	adds	r3, #60	; 0x3c
 8007ac0:	3313      	adds	r3, #19
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd ffee 	bl	8005aa4 <ld_word>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <find_volume+0x2dc>
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	333c      	adds	r3, #60	; 0x3c
 8007ad6:	3320      	adds	r3, #32
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fd fffb 	bl	8005ad4 <ld_dword>
 8007ade:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	333c      	adds	r3, #60	; 0x3c
 8007ae4:	330e      	adds	r3, #14
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd ffdc 	bl	8005aa4 <ld_word>
 8007aec:	4603      	mov	r3, r0
 8007aee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007af0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <find_volume+0x2f6>
 8007af6:	230d      	movs	r3, #13
 8007af8:	e102      	b.n	8007d00 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007afa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afe:	4413      	add	r3, r2
 8007b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b02:	8911      	ldrh	r1, [r2, #8]
 8007b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b06:	8992      	ldrh	r2, [r2, #12]
 8007b08:	0952      	lsrs	r2, r2, #5
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b10:	b292      	uxth	r2, r2
 8007b12:	4413      	add	r3, r2
 8007b14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d201      	bcs.n	8007b22 <find_volume+0x31e>
 8007b1e:	230d      	movs	r3, #13
 8007b20:	e0ee      	b.n	8007d00 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b2a:	8952      	ldrh	r2, [r2, #10]
 8007b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <find_volume+0x338>
 8007b38:	230d      	movs	r3, #13
 8007b3a:	e0e1      	b.n	8007d00 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d802      	bhi.n	8007b52 <find_volume+0x34e>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d802      	bhi.n	8007b62 <find_volume+0x35e>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b6e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b74:	441a      	add	r2, r3
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8007b7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	441a      	add	r2, r3
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8007b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d11e      	bne.n	8007bca <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	333c      	adds	r3, #60	; 0x3c
 8007b90:	332a      	adds	r3, #42	; 0x2a
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fd ff86 	bl	8005aa4 <ld_word>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <find_volume+0x39e>
 8007b9e:	230d      	movs	r3, #13
 8007ba0:	e0ae      	b.n	8007d00 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	891b      	ldrh	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <find_volume+0x3aa>
 8007baa:	230d      	movs	r3, #13
 8007bac:	e0a8      	b.n	8007d00 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	333c      	adds	r3, #60	; 0x3c
 8007bb2:	332c      	adds	r3, #44	; 0x2c
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fd ff8d 	bl	8005ad4 <ld_dword>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc8:	e01f      	b.n	8007c0a <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	891b      	ldrh	r3, [r3, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <find_volume+0x3d2>
 8007bd2:	230d      	movs	r3, #13
 8007bd4:	e094      	b.n	8007d00 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bdc:	441a      	add	r2, r3
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007be2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d103      	bne.n	8007bf2 <find_volume+0x3ee>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	e00a      	b.n	8007c08 <find_volume+0x404>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	6a1a      	ldr	r2, [r3, #32]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	4413      	add	r3, r2
 8007bfc:	085a      	lsrs	r2, r3, #1
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007c08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	899b      	ldrh	r3, [r3, #12]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c16:	440b      	add	r3, r1
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c1c:	8989      	ldrh	r1, [r1, #12]
 8007c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d201      	bcs.n	8007c2a <find_volume+0x426>
 8007c26:	230d      	movs	r3, #13
 8007c28:	e06a      	b.n	8007d00 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c30:	61da      	str	r2, [r3, #28]
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	2280      	movs	r2, #128	; 0x80
 8007c3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d149      	bne.n	8007cdc <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	333c      	adds	r3, #60	; 0x3c
 8007c4c:	3330      	adds	r3, #48	; 0x30
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fd ff28 	bl	8005aa4 <ld_word>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d140      	bne.n	8007cdc <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c62:	f7fe fa01 	bl	8006068 <move_window>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d137      	bne.n	8007cdc <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	2200      	movs	r2, #0
 8007c70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	333c      	adds	r3, #60	; 0x3c
 8007c76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fd ff12 	bl	8005aa4 <ld_word>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d127      	bne.n	8007cdc <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	333c      	adds	r3, #60	; 0x3c
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd ff1f 	bl	8005ad4 <ld_dword>
 8007c96:	4603      	mov	r3, r0
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <find_volume+0x504>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d11e      	bne.n	8007cdc <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	333c      	adds	r3, #60	; 0x3c
 8007ca2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd ff14 	bl	8005ad4 <ld_dword>
 8007cac:	4603      	mov	r3, r0
 8007cae:	4a17      	ldr	r2, [pc, #92]	; (8007d0c <find_volume+0x508>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d113      	bne.n	8007cdc <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	333c      	adds	r3, #60	; 0x3c
 8007cb8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fd ff09 	bl	8005ad4 <ld_dword>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	333c      	adds	r3, #60	; 0x3c
 8007ccc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fd feff 	bl	8005ad4 <ld_dword>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007ce2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <find_volume+0x50c>)
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	4b08      	ldr	r3, [pc, #32]	; (8007d10 <find_volume+0x50c>)
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <find_volume+0x50c>)
 8007cf2:	881a      	ldrh	r2, [r3, #0]
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007cf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cfa:	f7fe f94d 	bl	8005f98 <clear_lock>
#endif
	return FR_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3758      	adds	r7, #88	; 0x58
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	41615252 	.word	0x41615252
 8007d0c:	61417272 	.word	0x61417272
 8007d10:	20002348 	.word	0x20002348

08007d14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007d1e:	2309      	movs	r3, #9
 8007d20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d02e      	beq.n	8007d86 <validate+0x72>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d02a      	beq.n	8007d86 <validate+0x72>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d025      	beq.n	8007d86 <validate+0x72>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	889a      	ldrh	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	88db      	ldrh	r3, [r3, #6]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d11e      	bne.n	8007d86 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd ffa9 	bl	8005ca4 <lock_fs>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d014      	beq.n	8007d82 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fd fe02 	bl	8005968 <disk_status>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <validate+0x60>
				res = FR_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	e008      	b.n	8007d86 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd ffa8 	bl	8005cd0 <unlock_fs>
 8007d80:	e001      	b.n	8007d86 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007d82:	230f      	movs	r3, #15
 8007d84:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <validate+0x7e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	e000      	b.n	8007d94 <validate+0x80>
 8007d92:	2300      	movs	r3, #0
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	6013      	str	r3, [r2, #0]
	return res;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007db6:	f107 0310 	add.w	r3, r7, #16
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff fc88 	bl	80076d0 <get_ldnumber>
 8007dc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da01      	bge.n	8007dcc <f_mount+0x28>
 8007dc8:	230b      	movs	r3, #11
 8007dca:	e048      	b.n	8007e5e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007dcc:	4a26      	ldr	r2, [pc, #152]	; (8007e68 <f_mount+0xc4>)
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00f      	beq.n	8007dfc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ddc:	69b8      	ldr	r0, [r7, #24]
 8007dde:	f7fe f8db 	bl	8005f98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fdab 	bl	8008942 <ff_del_syncobj>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <f_mount+0x52>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e033      	b.n	8007e5e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00f      	beq.n	8007e22 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	3314      	adds	r3, #20
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f000 fd7a 	bl	800890c <ff_cre_syncobj>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <f_mount+0x7e>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e01d      	b.n	8007e5e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4910      	ldr	r1, [pc, #64]	; (8007e68 <f_mount+0xc4>)
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <f_mount+0x94>
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d001      	beq.n	8007e3c <f_mount+0x98>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e010      	b.n	8007e5e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007e3c:	f107 010c 	add.w	r1, r7, #12
 8007e40:	f107 0308 	add.w	r3, r7, #8
 8007e44:	2200      	movs	r2, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fcdc 	bl	8007804 <find_volume>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	7dfa      	ldrb	r2, [r7, #23]
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fd ff3a 	bl	8005cd0 <unlock_fs>
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3720      	adds	r7, #32
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20002344 	.word	0x20002344

08007e6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b09a      	sub	sp, #104	; 0x68
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <f_open+0x18>
 8007e80:	2309      	movs	r3, #9
 8007e82:	e1d7      	b.n	8008234 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007e8c:	79fa      	ldrb	r2, [r7, #7]
 8007e8e:	f107 0110 	add.w	r1, r7, #16
 8007e92:	f107 0308 	add.w	r3, r7, #8
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fcb4 	bl	8007804 <find_volume>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007ea2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f040 81b4 	bne.w	8008214 <f_open+0x3a8>
		dj.obj.fs = fs;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8007eb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007eb4:	f000 fd71 	bl	800899a <ff_memalloc>
 8007eb8:	65b8      	str	r0, [r7, #88]	; 0x58
 8007eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <f_open+0x62>
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2111      	movs	r1, #17
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fd ff03 	bl	8005cd0 <unlock_fs>
 8007eca:	2311      	movs	r3, #17
 8007ecc:	e1b2      	b.n	8008234 <f_open+0x3c8>
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ed2:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	f107 0314 	add.w	r3, r7, #20
 8007eda:	4611      	mov	r1, r2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fb81 	bl	80075e4 <follow_path>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ee8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11a      	bne.n	8007f26 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ef0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ef4:	b25b      	sxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	da03      	bge.n	8007f02 <f_open+0x96>
				res = FR_INVALID_NAME;
 8007efa:	2306      	movs	r3, #6
 8007efc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f00:	e011      	b.n	8007f26 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	f107 0314 	add.w	r3, r7, #20
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fd fef4 	bl	8005d08 <chk_lock>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	f003 031c 	and.w	r3, r3, #28
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d07f      	beq.n	8008030 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 8007f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d017      	beq.n	8007f68 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d10e      	bne.n	8007f5e <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f40:	f7fd ff3e 	bl	8005dc0 <enq_lock>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d006      	beq.n	8007f58 <f_open+0xec>
 8007f4a:	f107 0314 	add.w	r3, r7, #20
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff f898 	bl	8007084 <dir_register>
 8007f54:	4603      	mov	r3, r0
 8007f56:	e000      	b.n	8007f5a <f_open+0xee>
 8007f58:	2312      	movs	r3, #18
 8007f5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	f043 0308 	orr.w	r3, r3, #8
 8007f64:	71fb      	strb	r3, [r7, #7]
 8007f66:	e010      	b.n	8007f8a <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f68:	7ebb      	ldrb	r3, [r7, #26]
 8007f6a:	f003 0311 	and.w	r3, r3, #17
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <f_open+0x10e>
					res = FR_DENIED;
 8007f72:	2307      	movs	r3, #7
 8007f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f78:	e007      	b.n	8007f8a <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <f_open+0x11e>
 8007f84:	2308      	movs	r3, #8
 8007f86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d168      	bne.n	8008064 <f_open+0x1f8>
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	f003 0308 	and.w	r3, r3, #8
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d063      	beq.n	8008064 <f_open+0x1f8>
				dw = GET_FATTIME();
 8007f9c:	f7fd fac6 	bl	800552c <get_fattime>
 8007fa0:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	330e      	adds	r3, #14
 8007fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fd fdd1 	bl	8005b50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	3316      	adds	r3, #22
 8007fb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fd fdcb 	bl	8005b50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fbc:	330b      	adds	r3, #11
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe fdd3 	bl	8006b74 <ld_clust>
 8007fce:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fdeb 	bl	8006bb2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fde:	331c      	adds	r3, #28
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd fdb4 	bl	8005b50 <st_dword>
					fs->wflag = 1;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2201      	movs	r2, #1
 8007fec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d037      	beq.n	8008064 <f_open+0x1f8>
						dw = fs->winsect;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8007ffa:	f107 0314 	add.w	r3, r7, #20
 8007ffe:	2200      	movs	r2, #0
 8008000:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fadb 	bl	80065be <remove_chain>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800800e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008012:	2b00      	cmp	r3, #0
 8008014:	d126      	bne.n	8008064 <f_open+0x1f8>
							res = move_window(fs, dw);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe f824 	bl	8006068 <move_window>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800802a:	3a01      	subs	r2, #1
 800802c:	619a      	str	r2, [r3, #24]
 800802e:	e019      	b.n	8008064 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008030:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008034:	2b00      	cmp	r3, #0
 8008036:	d115      	bne.n	8008064 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008038:	7ebb      	ldrb	r3, [r7, #26]
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <f_open+0x1de>
					res = FR_NO_FILE;
 8008042:	2304      	movs	r3, #4
 8008044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008048:	e00c      	b.n	8008064 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <f_open+0x1f8>
 8008054:	7ebb      	ldrb	r3, [r7, #26]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <f_open+0x1f8>
						res = FR_DENIED;
 800805e:	2307      	movs	r3, #7
 8008060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008064:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008068:	2b00      	cmp	r3, #0
 800806a:	d128      	bne.n	80080be <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <f_open+0x212>
				mode |= FA_MODIFIED;
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800807c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	f023 0301 	bic.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	bf14      	ite	ne
 8008096:	2301      	movne	r3, #1
 8008098:	2300      	moveq	r3, #0
 800809a:	b2db      	uxtb	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	f107 0314 	add.w	r3, r7, #20
 80080a2:	4611      	mov	r1, r2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fd fead 	bl	8005e04 <inc_lock>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d102      	bne.n	80080be <f_open+0x252>
 80080b8:	2302      	movs	r3, #2
 80080ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80080be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f040 80a3 	bne.w	800820e <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe fd50 	bl	8006b74 <ld_clust>
 80080d4:	4602      	mov	r2, r0
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080dc:	331c      	adds	r3, #28
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fd fcf8 	bl	8005ad4 <ld_dword>
 80080e4:	4602      	mov	r2, r0
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	88da      	ldrh	r2, [r3, #6]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	79fa      	ldrb	r2, [r7, #7]
 8008102:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3330      	adds	r3, #48	; 0x30
 800811a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f7fd fd62 	bl	8005bea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	d06e      	beq.n	800820e <f_open+0x3a2>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d06a      	beq.n	800820e <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	895b      	ldrh	r3, [r3, #10]
 8008144:	461a      	mov	r2, r3
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	899b      	ldrh	r3, [r3, #12]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
 800814e:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800815c:	e016      	b.n	800818c <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe f83d 	bl	80061e2 <get_fat>
 8008168:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800816a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800816c:	2b01      	cmp	r3, #1
 800816e:	d802      	bhi.n	8008176 <f_open+0x30a>
 8008170:	2302      	movs	r3, #2
 8008172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d102      	bne.n	8008184 <f_open+0x318>
 800817e:	2301      	movs	r3, #1
 8008180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008184:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800818c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <f_open+0x330>
 8008194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008198:	429a      	cmp	r2, r3
 800819a:	d8e0      	bhi.n	800815e <f_open+0x2f2>
				}
				fp->clust = clst;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80081a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d131      	bne.n	800820e <f_open+0x3a2>
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	899b      	ldrh	r3, [r3, #12]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80081b6:	fb01 f202 	mul.w	r2, r1, r2
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d026      	beq.n	800820e <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fd ffed 	bl	80061a4 <clust2sect>
 80081ca:	64b8      	str	r0, [r7, #72]	; 0x48
 80081cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d103      	bne.n	80081da <f_open+0x36e>
						res = FR_INT_ERR;
 80081d2:	2302      	movs	r3, #2
 80081d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081d8:	e019      	b.n	800820e <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	899b      	ldrh	r3, [r3, #12]
 80081de:	461a      	mov	r2, r3
 80081e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80081e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e8:	441a      	add	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	7858      	ldrb	r0, [r3, #1]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a1a      	ldr	r2, [r3, #32]
 80081fc:	2301      	movs	r3, #1
 80081fe:	f7fd fbf3 	bl	80059e8 <disk_read>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <f_open+0x3a2>
 8008208:	2301      	movs	r3, #1
 800820a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800820e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008210:	f000 fbcf 	bl	80089b2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008214:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <f_open+0x3b6>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f7fd fd50 	bl	8005cd0 <unlock_fs>
 8008230:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008234:	4618      	mov	r0, r3
 8008236:	3768      	adds	r7, #104	; 0x68
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08e      	sub	sp, #56	; 0x38
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f107 0214 	add.w	r2, r7, #20
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fd59 	bl	8007d14 <validate>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008268:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800826c:	2b00      	cmp	r3, #0
 800826e:	d107      	bne.n	8008280 <f_read+0x44>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	7d5b      	ldrb	r3, [r3, #21]
 8008274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800827c:	2b00      	cmp	r3, #0
 800827e:	d009      	beq.n	8008294 <f_read+0x58>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008286:	4611      	mov	r1, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f7fd fd21 	bl	8005cd0 <unlock_fs>
 800828e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008292:	e15d      	b.n	8008550 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	7d1b      	ldrb	r3, [r3, #20]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <f_read+0x72>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2107      	movs	r1, #7
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fd fd13 	bl	8005cd0 <unlock_fs>
 80082aa:	2307      	movs	r3, #7
 80082ac:	e150      	b.n	8008550 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	429a      	cmp	r2, r3
 80082c0:	f240 813c 	bls.w	800853c <f_read+0x300>
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80082c8:	e138      	b.n	800853c <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	8992      	ldrh	r2, [r2, #12]
 80082d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80082d6:	fb01 f202 	mul.w	r2, r1, r2
 80082da:	1a9b      	subs	r3, r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f040 80f3 	bne.w	80084c8 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	8992      	ldrh	r2, [r2, #12]
 80082ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	8952      	ldrh	r2, [r2, #10]
 80082f2:	3a01      	subs	r2, #1
 80082f4:	4013      	ands	r3, r2
 80082f6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d139      	bne.n	8008372 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d103      	bne.n	800830e <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	633b      	str	r3, [r7, #48]	; 0x30
 800830c:	e013      	b.n	8008336 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7fe fa4b 	bl	80067b8 <clmt_clust>
 8008322:	6338      	str	r0, [r7, #48]	; 0x30
 8008324:	e007      	b.n	8008336 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7fd ff57 	bl	80061e2 <get_fat>
 8008334:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	2b01      	cmp	r3, #1
 800833a:	d809      	bhi.n	8008350 <f_read+0x114>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2202      	movs	r2, #2
 8008340:	755a      	strb	r2, [r3, #21]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2102      	movs	r1, #2
 8008346:	4618      	mov	r0, r3
 8008348:	f7fd fcc2 	bl	8005cd0 <unlock_fs>
 800834c:	2302      	movs	r3, #2
 800834e:	e0ff      	b.n	8008550 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008356:	d109      	bne.n	800836c <f_read+0x130>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	755a      	strb	r2, [r3, #21]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2101      	movs	r1, #1
 8008362:	4618      	mov	r0, r3
 8008364:	f7fd fcb4 	bl	8005cd0 <unlock_fs>
 8008368:	2301      	movs	r3, #1
 800836a:	e0f1      	b.n	8008550 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008370:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f7fd ff12 	bl	80061a4 <clust2sect>
 8008380:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <f_read+0x160>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2202      	movs	r2, #2
 800838c:	755a      	strb	r2, [r3, #21]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2102      	movs	r1, #2
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd fc9c 	bl	8005cd0 <unlock_fs>
 8008398:	2302      	movs	r3, #2
 800839a:	e0d9      	b.n	8008550 <f_read+0x314>
			sect += csect;
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	899b      	ldrh	r3, [r3, #12]
 80083a8:	461a      	mov	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d046      	beq.n	8008446 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	4413      	add	r3, r2
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	8952      	ldrh	r2, [r2, #10]
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d905      	bls.n	80083d2 <f_read+0x196>
					cc = fs->csize - csect;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	895b      	ldrh	r3, [r3, #10]
 80083ca:	461a      	mov	r2, r3
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	7858      	ldrb	r0, [r3, #1]
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083dc:	f7fd fb04 	bl	80059e8 <disk_read>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <f_read+0x1be>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	755a      	strb	r2, [r3, #21]
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2101      	movs	r1, #1
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fd fc6d 	bl	8005cd0 <unlock_fs>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e0aa      	b.n	8008550 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	7d1b      	ldrb	r3, [r3, #20]
 80083fe:	b25b      	sxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	da18      	bge.n	8008436 <f_read+0x1fa>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a1a      	ldr	r2, [r3, #32]
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800840e:	429a      	cmp	r2, r3
 8008410:	d911      	bls.n	8008436 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6a1a      	ldr	r2, [r3, #32]
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	8992      	ldrh	r2, [r2, #12]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008424:	18d0      	adds	r0, r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	899b      	ldrh	r3, [r3, #12]
 8008430:	461a      	mov	r2, r3
 8008432:	f7fd fbb9 	bl	8005ba8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	899b      	ldrh	r3, [r3, #12]
 800843a:	461a      	mov	r2, r3
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	fb02 f303 	mul.w	r3, r2, r3
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008444:	e066      	b.n	8008514 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	429a      	cmp	r2, r3
 800844e:	d038      	beq.n	80084c2 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	7d1b      	ldrb	r3, [r3, #20]
 8008454:	b25b      	sxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	da1d      	bge.n	8008496 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	7858      	ldrb	r0, [r3, #1]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	2301      	movs	r3, #1
 800846a:	f7fd fadd 	bl	8005a28 <disk_write>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d009      	beq.n	8008488 <f_read+0x24c>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	755a      	strb	r2, [r3, #21]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2101      	movs	r1, #1
 800847e:	4618      	mov	r0, r3
 8008480:	f7fd fc26 	bl	8005cd0 <unlock_fs>
 8008484:	2301      	movs	r3, #1
 8008486:	e063      	b.n	8008550 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	7d1b      	ldrb	r3, [r3, #20]
 800848c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008490:	b2da      	uxtb	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	7858      	ldrb	r0, [r3, #1]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084a0:	2301      	movs	r3, #1
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	f7fd faa0 	bl	80059e8 <disk_read>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <f_read+0x286>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	755a      	strb	r2, [r3, #21]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2101      	movs	r1, #1
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fd fc09 	bl	8005cd0 <unlock_fs>
 80084be:	2301      	movs	r3, #1
 80084c0:	e046      	b.n	8008550 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	899b      	ldrh	r3, [r3, #12]
 80084cc:	4618      	mov	r0, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	8992      	ldrh	r2, [r2, #12]
 80084d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80084da:	fb01 f202 	mul.w	r2, r1, r2
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	1ac3      	subs	r3, r0, r3
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80084e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d901      	bls.n	80084f0 <f_read+0x2b4>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	8992      	ldrh	r2, [r2, #12]
 80084fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008502:	fb00 f202 	mul.w	r2, r0, r2
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	440b      	add	r3, r1
 800850a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850c:	4619      	mov	r1, r3
 800850e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008510:	f7fd fb4a 	bl	8005ba8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	4413      	add	r3, r2
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	699a      	ldr	r2, [r3, #24]
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	441a      	add	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	619a      	str	r2, [r3, #24]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	441a      	add	r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f47f aec3 	bne.w	80082ca <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f7fd fbc1 	bl	8005cd0 <unlock_fs>
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3738      	adds	r7, #56	; 0x38
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f107 0208 	add.w	r2, r7, #8
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fbd3 	bl	8007d14 <validate>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d16d      	bne.n	8008654 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7d1b      	ldrb	r3, [r3, #20]
 800857c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d067      	beq.n	8008654 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7d1b      	ldrb	r3, [r3, #20]
 8008588:	b25b      	sxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	da1a      	bge.n	80085c4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	7858      	ldrb	r0, [r3, #1]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1a      	ldr	r2, [r3, #32]
 800859c:	2301      	movs	r3, #1
 800859e:	f7fd fa43 	bl	8005a28 <disk_write>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <f_sync+0x5e>
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2101      	movs	r1, #1
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fd fb8f 	bl	8005cd0 <unlock_fs>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e055      	b.n	8008662 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7d1b      	ldrb	r3, [r3, #20]
 80085ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80085c4:	f7fc ffb2 	bl	800552c <get_fattime>
 80085c8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7fd fd48 	bl	8006068 <move_window>
 80085d8:	4603      	mov	r3, r0
 80085da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d138      	bne.n	8008654 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	330b      	adds	r3, #11
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	330b      	adds	r3, #11
 80085f2:	f042 0220 	orr.w	r2, r2, #32
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	461a      	mov	r2, r3
 8008604:	68f9      	ldr	r1, [r7, #12]
 8008606:	f7fe fad4 	bl	8006bb2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f103 021c 	add.w	r2, r3, #28
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f7fd fa9a 	bl	8005b50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3316      	adds	r3, #22
 8008620:	6939      	ldr	r1, [r7, #16]
 8008622:	4618      	mov	r0, r3
 8008624:	f7fd fa94 	bl	8005b50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3312      	adds	r3, #18
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f7fd fa73 	bl	8005b1a <st_word>
					fs->wflag = 1;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2201      	movs	r2, #1
 8008638:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fd41 	bl	80060c4 <sync_fs>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7d1b      	ldrb	r3, [r3, #20]
 800864a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800864e:	b2da      	uxtb	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	7dfa      	ldrb	r2, [r7, #23]
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7fd fb38 	bl	8005cd0 <unlock_fs>
 8008660:	7dfb      	ldrb	r3, [r7, #23]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff ff70 	bl	8008558 <f_sync>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d11d      	bne.n	80086be <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f107 0208 	add.w	r2, r7, #8
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fb42 	bl	8007d14 <validate>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d111      	bne.n	80086be <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fd fc3e 	bl	8005f20 <dec_lock>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fd fb09 	bl	8005cd0 <unlock_fs>
#endif
		}
	}
	return res;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80086d6:	2301      	movs	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80086de:	4b1f      	ldr	r3, [pc, #124]	; (800875c <FATFS_LinkDriverEx+0x94>)
 80086e0:	7a5b      	ldrb	r3, [r3, #9]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d131      	bne.n	800874c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80086e8:	4b1c      	ldr	r3, [pc, #112]	; (800875c <FATFS_LinkDriverEx+0x94>)
 80086ea:	7a5b      	ldrb	r3, [r3, #9]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	461a      	mov	r2, r3
 80086f0:	4b1a      	ldr	r3, [pc, #104]	; (800875c <FATFS_LinkDriverEx+0x94>)
 80086f2:	2100      	movs	r1, #0
 80086f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80086f6:	4b19      	ldr	r3, [pc, #100]	; (800875c <FATFS_LinkDriverEx+0x94>)
 80086f8:	7a5b      	ldrb	r3, [r3, #9]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <FATFS_LinkDriverEx+0x94>)
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008706:	4b15      	ldr	r3, [pc, #84]	; (800875c <FATFS_LinkDriverEx+0x94>)
 8008708:	7a5b      	ldrb	r3, [r3, #9]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <FATFS_LinkDriverEx+0x94>)
 8008710:	4413      	add	r3, r2
 8008712:	79fa      	ldrb	r2, [r7, #7]
 8008714:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008716:	4b11      	ldr	r3, [pc, #68]	; (800875c <FATFS_LinkDriverEx+0x94>)
 8008718:	7a5b      	ldrb	r3, [r3, #9]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	b2d1      	uxtb	r1, r2
 8008720:	4a0e      	ldr	r2, [pc, #56]	; (800875c <FATFS_LinkDriverEx+0x94>)
 8008722:	7251      	strb	r1, [r2, #9]
 8008724:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008726:	7dbb      	ldrb	r3, [r7, #22]
 8008728:	3330      	adds	r3, #48	; 0x30
 800872a:	b2da      	uxtb	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	3301      	adds	r3, #1
 8008734:	223a      	movs	r2, #58	; 0x3a
 8008736:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	3302      	adds	r3, #2
 800873c:	222f      	movs	r2, #47	; 0x2f
 800873e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	3303      	adds	r3, #3
 8008744:	2200      	movs	r2, #0
 8008746:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800874c:	7dfb      	ldrb	r3, [r7, #23]
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	2000236c 	.word	0x2000236c

08008760 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800876a:	2200      	movs	r2, #0
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff ffaa 	bl	80086c8 <FATFS_LinkDriverEx>
 8008774:	4603      	mov	r3, r0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800878c:	88fb      	ldrh	r3, [r7, #6]
 800878e:	2b7f      	cmp	r3, #127	; 0x7f
 8008790:	d802      	bhi.n	8008798 <ff_convert+0x18>
		c = chr;
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	81fb      	strh	r3, [r7, #14]
 8008796:	e025      	b.n	80087e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	2bff      	cmp	r3, #255	; 0xff
 80087a2:	d805      	bhi.n	80087b0 <ff_convert+0x30>
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	3b80      	subs	r3, #128	; 0x80
 80087a8:	4a12      	ldr	r2, [pc, #72]	; (80087f4 <ff_convert+0x74>)
 80087aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ae:	e000      	b.n	80087b2 <ff_convert+0x32>
 80087b0:	2300      	movs	r3, #0
 80087b2:	81fb      	strh	r3, [r7, #14]
 80087b4:	e016      	b.n	80087e4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80087b6:	2300      	movs	r3, #0
 80087b8:	81fb      	strh	r3, [r7, #14]
 80087ba:	e009      	b.n	80087d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80087bc:	89fb      	ldrh	r3, [r7, #14]
 80087be:	4a0d      	ldr	r2, [pc, #52]	; (80087f4 <ff_convert+0x74>)
 80087c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d006      	beq.n	80087d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80087ca:	89fb      	ldrh	r3, [r7, #14]
 80087cc:	3301      	adds	r3, #1
 80087ce:	81fb      	strh	r3, [r7, #14]
 80087d0:	89fb      	ldrh	r3, [r7, #14]
 80087d2:	2b7f      	cmp	r3, #127	; 0x7f
 80087d4:	d9f2      	bls.n	80087bc <ff_convert+0x3c>
 80087d6:	e000      	b.n	80087da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80087d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80087da:	89fb      	ldrh	r3, [r7, #14]
 80087dc:	3380      	adds	r3, #128	; 0x80
 80087de:	b29b      	uxth	r3, r3
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80087e4:	89fb      	ldrh	r3, [r7, #14]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	0800dc88 	.word	0x0800dc88

080087f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008808:	d201      	bcs.n	800880e <ff_wtoupper+0x16>
 800880a:	4b3e      	ldr	r3, [pc, #248]	; (8008904 <ff_wtoupper+0x10c>)
 800880c:	e000      	b.n	8008810 <ff_wtoupper+0x18>
 800880e:	4b3e      	ldr	r3, [pc, #248]	; (8008908 <ff_wtoupper+0x110>)
 8008810:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	1c9a      	adds	r2, r3, #2
 8008816:	617a      	str	r2, [r7, #20]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800881c:	8a7b      	ldrh	r3, [r7, #18]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d068      	beq.n	80088f4 <ff_wtoupper+0xfc>
 8008822:	88fa      	ldrh	r2, [r7, #6]
 8008824:	8a7b      	ldrh	r3, [r7, #18]
 8008826:	429a      	cmp	r2, r3
 8008828:	d364      	bcc.n	80088f4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	1c9a      	adds	r2, r3, #2
 800882e:	617a      	str	r2, [r7, #20]
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	823b      	strh	r3, [r7, #16]
 8008834:	8a3b      	ldrh	r3, [r7, #16]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	81fb      	strh	r3, [r7, #14]
 800883a:	8a3b      	ldrh	r3, [r7, #16]
 800883c:	b2db      	uxtb	r3, r3
 800883e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008840:	88fa      	ldrh	r2, [r7, #6]
 8008842:	8a79      	ldrh	r1, [r7, #18]
 8008844:	8a3b      	ldrh	r3, [r7, #16]
 8008846:	440b      	add	r3, r1
 8008848:	429a      	cmp	r2, r3
 800884a:	da49      	bge.n	80088e0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800884c:	89fb      	ldrh	r3, [r7, #14]
 800884e:	2b08      	cmp	r3, #8
 8008850:	d84f      	bhi.n	80088f2 <ff_wtoupper+0xfa>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <ff_wtoupper+0x60>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	0800887d 	.word	0x0800887d
 800885c:	0800888f 	.word	0x0800888f
 8008860:	080088a5 	.word	0x080088a5
 8008864:	080088ad 	.word	0x080088ad
 8008868:	080088b5 	.word	0x080088b5
 800886c:	080088bd 	.word	0x080088bd
 8008870:	080088c5 	.word	0x080088c5
 8008874:	080088cd 	.word	0x080088cd
 8008878:	080088d5 	.word	0x080088d5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	8a7b      	ldrh	r3, [r7, #18]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4413      	add	r3, r2
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	80fb      	strh	r3, [r7, #6]
 800888c:	e027      	b.n	80088de <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800888e:	88fa      	ldrh	r2, [r7, #6]
 8008890:	8a7b      	ldrh	r3, [r7, #18]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	b29b      	uxth	r3, r3
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	b29b      	uxth	r3, r3
 800889c:	88fa      	ldrh	r2, [r7, #6]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	80fb      	strh	r3, [r7, #6]
 80088a2:	e01c      	b.n	80088de <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	3b10      	subs	r3, #16
 80088a8:	80fb      	strh	r3, [r7, #6]
 80088aa:	e018      	b.n	80088de <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	3b20      	subs	r3, #32
 80088b0:	80fb      	strh	r3, [r7, #6]
 80088b2:	e014      	b.n	80088de <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	3b30      	subs	r3, #48	; 0x30
 80088b8:	80fb      	strh	r3, [r7, #6]
 80088ba:	e010      	b.n	80088de <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80088bc:	88fb      	ldrh	r3, [r7, #6]
 80088be:	3b1a      	subs	r3, #26
 80088c0:	80fb      	strh	r3, [r7, #6]
 80088c2:	e00c      	b.n	80088de <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80088c4:	88fb      	ldrh	r3, [r7, #6]
 80088c6:	3308      	adds	r3, #8
 80088c8:	80fb      	strh	r3, [r7, #6]
 80088ca:	e008      	b.n	80088de <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80088cc:	88fb      	ldrh	r3, [r7, #6]
 80088ce:	3b50      	subs	r3, #80	; 0x50
 80088d0:	80fb      	strh	r3, [r7, #6]
 80088d2:	e004      	b.n	80088de <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80088da:	80fb      	strh	r3, [r7, #6]
 80088dc:	bf00      	nop
			}
			break;
 80088de:	e008      	b.n	80088f2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80088e0:	89fb      	ldrh	r3, [r7, #14]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d195      	bne.n	8008812 <ff_wtoupper+0x1a>
 80088e6:	8a3b      	ldrh	r3, [r7, #16]
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4413      	add	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80088f0:	e78f      	b.n	8008812 <ff_wtoupper+0x1a>
			break;
 80088f2:	bf00      	nop
	}

	return chr;
 80088f4:	88fb      	ldrh	r3, [r7, #6]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	0800dd88 	.word	0x0800dd88
 8008908:	0800df7c 	.word	0x0800df7c

0800890c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	6039      	str	r1, [r7, #0]
 8008916:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8008918:	2200      	movs	r2, #0
 800891a:	2101      	movs	r1, #1
 800891c:	2001      	movs	r0, #1
 800891e:	f000 f9b5 	bl	8008c8c <osSemaphoreNew>
 8008922:	4602      	mov	r2, r0
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	bf14      	ite	ne
 8008930:	2301      	movne	r3, #1
 8008932:	2300      	moveq	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	60fb      	str	r3, [r7, #12]

    return ret;
 8008938:	68fb      	ldr	r3, [r7, #12]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fabe 	bl	8008ecc <osSemaphoreDelete>
#endif
    return 1;
 8008950:	2301      	movs	r3, #1
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8008966:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa18 	bl	8008da0 <osSemaphoreAcquire>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8008976:	2301      	movs	r3, #1
 8008978:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fa59 	bl	8008e44 <osSemaphoreRelease>
#endif
}
 8008992:	bf00      	nop
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f003 fa88 	bl	800beb8 <pvPortMalloc>
 80089a8:	4603      	mov	r3, r0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f003 fb48 	bl	800c050 <vPortFree>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <__NVIC_SetPriority>:
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	6039      	str	r1, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	db0a      	blt.n	80089f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	490c      	ldr	r1, [pc, #48]	; (8008a14 <__NVIC_SetPriority+0x4c>)
 80089e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e6:	0112      	lsls	r2, r2, #4
 80089e8:	b2d2      	uxtb	r2, r2
 80089ea:	440b      	add	r3, r1
 80089ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089f0:	e00a      	b.n	8008a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	4908      	ldr	r1, [pc, #32]	; (8008a18 <__NVIC_SetPriority+0x50>)
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	3b04      	subs	r3, #4
 8008a00:	0112      	lsls	r2, r2, #4
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	440b      	add	r3, r1
 8008a06:	761a      	strb	r2, [r3, #24]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	e000e100 	.word	0xe000e100
 8008a18:	e000ed00 	.word	0xe000ed00

08008a1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008a20:	2100      	movs	r1, #0
 8008a22:	f06f 0004 	mvn.w	r0, #4
 8008a26:	f7ff ffcf 	bl	80089c8 <__NVIC_SetPriority>
#endif
}
 8008a2a:	bf00      	nop
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a36:	f3ef 8305 	mrs	r3, IPSR
 8008a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8008a3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008a42:	f06f 0305 	mvn.w	r3, #5
 8008a46:	607b      	str	r3, [r7, #4]
 8008a48:	e00c      	b.n	8008a64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <osKernelInitialize+0x44>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d105      	bne.n	8008a5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a52:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <osKernelInitialize+0x44>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	607b      	str	r3, [r7, #4]
 8008a5c:	e002      	b.n	8008a64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a64:	687b      	ldr	r3, [r7, #4]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20002378 	.word	0x20002378

08008a78 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8008a7e:	f002 faa1 	bl	800afc4 <xTaskGetSchedulerState>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <osKernelGetState+0x1a>
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d105      	bne.n	8008a98 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	607b      	str	r3, [r7, #4]
      break;
 8008a90:	e00c      	b.n	8008aac <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8008a92:	2303      	movs	r3, #3
 8008a94:	607b      	str	r3, [r7, #4]
      break;
 8008a96:	e009      	b.n	8008aac <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8008a98:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <osKernelGetState+0x40>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d102      	bne.n	8008aa6 <osKernelGetState+0x2e>
        state = osKernelReady;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8008aa4:	e001      	b.n	8008aaa <osKernelGetState+0x32>
        state = osKernelInactive;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	607b      	str	r3, [r7, #4]
      break;
 8008aaa:	bf00      	nop
  }

  return (state);
 8008aac:	687b      	ldr	r3, [r7, #4]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20002378 	.word	0x20002378

08008abc <osKernelStart>:

osStatus_t osKernelStart (void) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac2:	f3ef 8305 	mrs	r3, IPSR
 8008ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008ace:	f06f 0305 	mvn.w	r3, #5
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	e010      	b.n	8008af8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <osKernelStart+0x48>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d109      	bne.n	8008af2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ade:	f7ff ff9d 	bl	8008a1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <osKernelStart+0x48>)
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ae8:	f001 fe12 	bl	800a710 <vTaskStartScheduler>
      stat = osOK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	607b      	str	r3, [r7, #4]
 8008af0:	e002      	b.n	8008af8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008af2:	f04f 33ff 	mov.w	r3, #4294967295
 8008af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008af8:	687b      	ldr	r3, [r7, #4]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20002378 	.word	0x20002378

08008b08 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b0e:	f3ef 8305 	mrs	r3, IPSR
 8008b12:	603b      	str	r3, [r7, #0]
  return(result);
 8008b14:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008b1a:	f001 ff1b 	bl	800a954 <xTaskGetTickCountFromISR>
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	e002      	b.n	8008b28 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008b22:	f001 ff07 	bl	800a934 <xTaskGetTickCount>
 8008b26:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008b28:	687b      	ldr	r3, [r7, #4]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b08e      	sub	sp, #56	; 0x38
 8008b36:	af04      	add	r7, sp, #16
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b42:	f3ef 8305 	mrs	r3, IPSR
 8008b46:	617b      	str	r3, [r7, #20]
  return(result);
 8008b48:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d17e      	bne.n	8008c4c <osThreadNew+0x11a>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d07b      	beq.n	8008c4c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008b54:	2380      	movs	r3, #128	; 0x80
 8008b56:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008b58:	2318      	movs	r3, #24
 8008b5a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008b60:	f04f 33ff 	mov.w	r3, #4294967295
 8008b64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d045      	beq.n	8008bf8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <osThreadNew+0x48>
        name = attr->name;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <osThreadNew+0x6e>
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	2b38      	cmp	r3, #56	; 0x38
 8008b92:	d805      	bhi.n	8008ba0 <osThreadNew+0x6e>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <osThreadNew+0x72>
        return (NULL);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e054      	b.n	8008c4e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	089b      	lsrs	r3, r3, #2
 8008bb2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00e      	beq.n	8008bda <osThreadNew+0xa8>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2b5b      	cmp	r3, #91	; 0x5b
 8008bc2:	d90a      	bls.n	8008bda <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d006      	beq.n	8008bda <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <osThreadNew+0xa8>
        mem = 1;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	61bb      	str	r3, [r7, #24]
 8008bd8:	e010      	b.n	8008bfc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10c      	bne.n	8008bfc <osThreadNew+0xca>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d108      	bne.n	8008bfc <osThreadNew+0xca>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <osThreadNew+0xca>
          mem = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]
 8008bf6:	e001      	b.n	8008bfc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d110      	bne.n	8008c24 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c0a:	9202      	str	r2, [sp, #8]
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6a3a      	ldr	r2, [r7, #32]
 8008c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 fba3 	bl	800a364 <xTaskCreateStatic>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	e013      	b.n	8008c4c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d110      	bne.n	8008c4c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	f107 0310 	add.w	r3, r7, #16
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f001 fbee 	bl	800a41e <xTaskCreate>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d001      	beq.n	8008c4c <osThreadNew+0x11a>
            hTask = NULL;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c4c:	693b      	ldr	r3, [r7, #16]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3728      	adds	r7, #40	; 0x28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c5e:	f3ef 8305 	mrs	r3, IPSR
 8008c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <osDelay+0x1c>
    stat = osErrorISR;
 8008c6a:	f06f 0305 	mvn.w	r3, #5
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e007      	b.n	8008c82 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 fd13 	bl	800a6a8 <vTaskDelay>
    }
  }

  return (stat);
 8008c82:	68fb      	ldr	r3, [r7, #12]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	; 0x28
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c9c:	f3ef 8305 	mrs	r3, IPSR
 8008ca0:	613b      	str	r3, [r7, #16]
  return(result);
 8008ca2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d175      	bne.n	8008d94 <osSemaphoreNew+0x108>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d072      	beq.n	8008d94 <osSemaphoreNew+0x108>
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d86e      	bhi.n	8008d94 <osSemaphoreNew+0x108>
    mem = -1;
 8008cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d015      	beq.n	8008cee <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d006      	beq.n	8008cd8 <osSemaphoreNew+0x4c>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	2b4f      	cmp	r3, #79	; 0x4f
 8008cd0:	d902      	bls.n	8008cd8 <osSemaphoreNew+0x4c>
        mem = 1;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	e00c      	b.n	8008cf2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d108      	bne.n	8008cf2 <osSemaphoreNew+0x66>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <osSemaphoreNew+0x66>
          mem = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	e001      	b.n	8008cf2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d04c      	beq.n	8008d94 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d128      	bne.n	8008d52 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10a      	bne.n	8008d1c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	9200      	str	r2, [sp, #0]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2100      	movs	r1, #0
 8008d12:	2001      	movs	r0, #1
 8008d14:	f000 fb80 	bl	8009418 <xQueueGenericCreateStatic>
 8008d18:	61f8      	str	r0, [r7, #28]
 8008d1a:	e005      	b.n	8008d28 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	2100      	movs	r1, #0
 8008d20:	2001      	movs	r0, #1
 8008d22:	f000 fbf1 	bl	8009508 <xQueueGenericCreate>
 8008d26:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d022      	beq.n	8008d74 <osSemaphoreNew+0xe8>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01f      	beq.n	8008d74 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	2100      	movs	r1, #0
 8008d3a:	69f8      	ldr	r0, [r7, #28]
 8008d3c:	f000 fcac 	bl	8009698 <xQueueGenericSend>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d016      	beq.n	8008d74 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008d46:	69f8      	ldr	r0, [r7, #28]
 8008d48:	f001 f938 	bl	8009fbc <vQueueDelete>
            hSemaphore = NULL;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61fb      	str	r3, [r7, #28]
 8008d50:	e010      	b.n	8008d74 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d108      	bne.n	8008d6a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68b9      	ldr	r1, [r7, #8]
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fc2e 	bl	80095c2 <xQueueCreateCountingSemaphoreStatic>
 8008d66:	61f8      	str	r0, [r7, #28]
 8008d68:	e004      	b.n	8008d74 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fc5f 	bl	8009630 <xQueueCreateCountingSemaphore>
 8008d72:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e001      	b.n	8008d8c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	69f8      	ldr	r0, [r7, #28]
 8008d90:	f001 fa60 	bl	800a254 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008d94:	69fb      	ldr	r3, [r7, #28]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d103      	bne.n	8008dc0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008db8:	f06f 0303 	mvn.w	r3, #3
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	e039      	b.n	8008e34 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc0:	f3ef 8305 	mrs	r3, IPSR
 8008dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d022      	beq.n	8008e12 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008dd2:	f06f 0303 	mvn.w	r3, #3
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	e02c      	b.n	8008e34 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	461a      	mov	r2, r3
 8008de4:	2100      	movs	r1, #0
 8008de6:	6938      	ldr	r0, [r7, #16]
 8008de8:	f001 f868 	bl	8009ebc <xQueueReceiveFromISR>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d003      	beq.n	8008dfa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008df2:	f06f 0302 	mvn.w	r3, #2
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e01c      	b.n	8008e34 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d019      	beq.n	8008e34 <osSemaphoreAcquire+0x94>
 8008e00:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <osSemaphoreAcquire+0xa0>)
 8008e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	e010      	b.n	8008e34 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6938      	ldr	r0, [r7, #16]
 8008e16:	f000 ff45 	bl	8009ca4 <xQueueSemaphoreTake>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d009      	beq.n	8008e34 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008e26:	f06f 0301 	mvn.w	r3, #1
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e002      	b.n	8008e34 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008e2e:	f06f 0302 	mvn.w	r3, #2
 8008e32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008e34:	697b      	ldr	r3, [r7, #20]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	e000ed04 	.word	0xe000ed04

08008e44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d103      	bne.n	8008e62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008e5a:	f06f 0303 	mvn.w	r3, #3
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e02c      	b.n	8008ebc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e62:	f3ef 8305 	mrs	r3, IPSR
 8008e66:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01a      	beq.n	8008ea4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e72:	f107 0308 	add.w	r3, r7, #8
 8008e76:	4619      	mov	r1, r3
 8008e78:	6938      	ldr	r0, [r7, #16]
 8008e7a:	f000 fda6 	bl	80099ca <xQueueGiveFromISR>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d003      	beq.n	8008e8c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008e84:	f06f 0302 	mvn.w	r3, #2
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	e017      	b.n	8008ebc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d014      	beq.n	8008ebc <osSemaphoreRelease+0x78>
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <osSemaphoreRelease+0x84>)
 8008e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	e00b      	b.n	8008ebc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	6938      	ldr	r0, [r7, #16]
 8008eac:	f000 fbf4 	bl	8009698 <xQueueGenericSend>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d002      	beq.n	8008ebc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008eb6:	f06f 0302 	mvn.w	r3, #2
 8008eba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008ebc:	697b      	ldr	r3, [r7, #20]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ed8:	f3ef 8305 	mrs	r3, IPSR
 8008edc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ede:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008ee4:	f06f 0305 	mvn.w	r3, #5
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	e00e      	b.n	8008f0a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008ef2:	f06f 0303 	mvn.w	r3, #3
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	e007      	b.n	8008f0a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008efa:	6938      	ldr	r0, [r7, #16]
 8008efc:	f001 f9d4 	bl	800a2a8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008f04:	6938      	ldr	r0, [r7, #16]
 8008f06:	f001 f859 	bl	8009fbc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008f0a:	697b      	ldr	r3, [r7, #20]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	; 0x28
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f24:	f3ef 8305 	mrs	r3, IPSR
 8008f28:	613b      	str	r3, [r7, #16]
  return(result);
 8008f2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d15f      	bne.n	8008ff0 <osMessageQueueNew+0xdc>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d05c      	beq.n	8008ff0 <osMessageQueueNew+0xdc>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d059      	beq.n	8008ff0 <osMessageQueueNew+0xdc>
    mem = -1;
 8008f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d029      	beq.n	8008f9c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d012      	beq.n	8008f76 <osMessageQueueNew+0x62>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	2b4f      	cmp	r3, #79	; 0x4f
 8008f56:	d90e      	bls.n	8008f76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	68b9      	ldr	r1, [r7, #8]
 8008f68:	fb01 f303 	mul.w	r3, r1, r3
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <osMessageQueueNew+0x62>
        mem = 1;
 8008f70:	2301      	movs	r3, #1
 8008f72:	61bb      	str	r3, [r7, #24]
 8008f74:	e014      	b.n	8008fa0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d110      	bne.n	8008fa0 <osMessageQueueNew+0x8c>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10c      	bne.n	8008fa0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d108      	bne.n	8008fa0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d104      	bne.n	8008fa0 <osMessageQueueNew+0x8c>
          mem = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	e001      	b.n	8008fa0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d10b      	bne.n	8008fbe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	9100      	str	r1, [sp, #0]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 fa2f 	bl	8009418 <xQueueGenericCreateStatic>
 8008fba:	61f8      	str	r0, [r7, #28]
 8008fbc:	e008      	b.n	8008fd0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d105      	bne.n	8008fd0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 fa9d 	bl	8009508 <xQueueGenericCreate>
 8008fce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00c      	beq.n	8008ff0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	e001      	b.n	8008fe8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008fe8:	6979      	ldr	r1, [r7, #20]
 8008fea:	69f8      	ldr	r0, [r7, #28]
 8008fec:	f001 f932 	bl	800a254 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008ff0:	69fb      	ldr	r3, [r7, #28]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009014:	f3ef 8305 	mrs	r3, IPSR
 8009018:	617b      	str	r3, [r7, #20]
  return(result);
 800901a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800901c:	2b00      	cmp	r3, #0
 800901e:	d028      	beq.n	8009072 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <osMessageQueuePut+0x36>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <osMessageQueuePut+0x36>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009032:	f06f 0303 	mvn.w	r3, #3
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	e038      	b.n	80090ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800903a:	2300      	movs	r3, #0
 800903c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800903e:	f107 0210 	add.w	r2, r7, #16
 8009042:	2300      	movs	r3, #0
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	69b8      	ldr	r0, [r7, #24]
 8009048:	f000 fc24 	bl	8009894 <xQueueGenericSendFromISR>
 800904c:	4603      	mov	r3, r0
 800904e:	2b01      	cmp	r3, #1
 8009050:	d003      	beq.n	800905a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009052:	f06f 0302 	mvn.w	r3, #2
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	e028      	b.n	80090ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d025      	beq.n	80090ac <osMessageQueuePut+0xb0>
 8009060:	4b15      	ldr	r3, [pc, #84]	; (80090b8 <osMessageQueuePut+0xbc>)
 8009062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	e01c      	b.n	80090ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <osMessageQueuePut+0x82>
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d103      	bne.n	8009086 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800907e:	f06f 0303 	mvn.w	r3, #3
 8009082:	61fb      	str	r3, [r7, #28]
 8009084:	e012      	b.n	80090ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009086:	2300      	movs	r3, #0
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	69b8      	ldr	r0, [r7, #24]
 800908e:	f000 fb03 	bl	8009698 <xQueueGenericSend>
 8009092:	4603      	mov	r3, r0
 8009094:	2b01      	cmp	r3, #1
 8009096:	d009      	beq.n	80090ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800909e:	f06f 0301 	mvn.w	r3, #1
 80090a2:	61fb      	str	r3, [r7, #28]
 80090a4:	e002      	b.n	80090ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80090a6:	f06f 0302 	mvn.w	r3, #2
 80090aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090d2:	f3ef 8305 	mrs	r3, IPSR
 80090d6:	617b      	str	r3, [r7, #20]
  return(result);
 80090d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d028      	beq.n	8009130 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <osMessageQueueGet+0x34>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <osMessageQueueGet+0x34>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80090f0:	f06f 0303 	mvn.w	r3, #3
 80090f4:	61fb      	str	r3, [r7, #28]
 80090f6:	e037      	b.n	8009168 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80090fc:	f107 0310 	add.w	r3, r7, #16
 8009100:	461a      	mov	r2, r3
 8009102:	68b9      	ldr	r1, [r7, #8]
 8009104:	69b8      	ldr	r0, [r7, #24]
 8009106:	f000 fed9 	bl	8009ebc <xQueueReceiveFromISR>
 800910a:	4603      	mov	r3, r0
 800910c:	2b01      	cmp	r3, #1
 800910e:	d003      	beq.n	8009118 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009110:	f06f 0302 	mvn.w	r3, #2
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	e027      	b.n	8009168 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d024      	beq.n	8009168 <osMessageQueueGet+0xac>
 800911e:	4b15      	ldr	r3, [pc, #84]	; (8009174 <osMessageQueueGet+0xb8>)
 8009120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	e01b      	b.n	8009168 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <osMessageQueueGet+0x80>
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d103      	bne.n	8009144 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800913c:	f06f 0303 	mvn.w	r3, #3
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	e011      	b.n	8009168 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	69b8      	ldr	r0, [r7, #24]
 800914a:	f000 fccb 	bl	8009ae4 <xQueueReceive>
 800914e:	4603      	mov	r3, r0
 8009150:	2b01      	cmp	r3, #1
 8009152:	d009      	beq.n	8009168 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800915a:	f06f 0301 	mvn.w	r3, #1
 800915e:	61fb      	str	r3, [r7, #28]
 8009160:	e002      	b.n	8009168 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009162:	f06f 0302 	mvn.w	r3, #2
 8009166:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009168:	69fb      	ldr	r3, [r7, #28]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	e000ed04 	.word	0xe000ed04

08009178 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a07      	ldr	r2, [pc, #28]	; (80091a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	4a06      	ldr	r2, [pc, #24]	; (80091a8 <vApplicationGetIdleTaskMemory+0x30>)
 800918e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2280      	movs	r2, #128	; 0x80
 8009194:	601a      	str	r2, [r3, #0]
}
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	2000237c 	.word	0x2000237c
 80091a8:	200023d8 	.word	0x200023d8

080091ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4a07      	ldr	r2, [pc, #28]	; (80091d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80091bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	4a06      	ldr	r2, [pc, #24]	; (80091dc <vApplicationGetTimerTaskMemory+0x30>)
 80091c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091ca:	601a      	str	r2, [r3, #0]
}
 80091cc:	bf00      	nop
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	200025d8 	.word	0x200025d8
 80091dc:	20002634 	.word	0x20002634

080091e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f103 0208 	add.w	r2, r3, #8
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f04f 32ff 	mov.w	r2, #4294967295
 80091f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f103 0208 	add.w	r2, r3, #8
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f103 0208 	add.w	r2, r3, #8
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800923a:	b480      	push	{r7}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009282:	b480      	push	{r7}
 8009284:	b085      	sub	sp, #20
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009298:	d103      	bne.n	80092a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e00c      	b.n	80092bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3308      	adds	r3, #8
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e002      	b.n	80092b0 <vListInsert+0x2e>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d2f6      	bcs.n	80092aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]
}
 80092e8:	bf00      	nop
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6892      	ldr	r2, [r2, #8]
 800930a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	6852      	ldr	r2, [r2, #4]
 8009314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d103      	bne.n	8009328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	1e5a      	subs	r2, r3, #1
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009372:	f002 fc7f 	bl	800bc74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009382:	fb01 f303 	mul.w	r3, r1, r3
 8009386:	441a      	add	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a2:	3b01      	subs	r3, #1
 80093a4:	68f9      	ldr	r1, [r7, #12]
 80093a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	441a      	add	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	22ff      	movs	r2, #255	; 0xff
 80093b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	22ff      	movs	r2, #255	; 0xff
 80093be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d114      	bne.n	80093f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01a      	beq.n	8009406 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3310      	adds	r3, #16
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 fc37 	bl	800ac48 <xTaskRemoveFromEventList>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d012      	beq.n	8009406 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093e0:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <xQueueGenericReset+0xcc>)
 80093e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	e009      	b.n	8009406 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3310      	adds	r3, #16
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fef2 	bl	80091e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3324      	adds	r3, #36	; 0x24
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff feed 	bl	80091e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009406:	f002 fc65 	bl	800bcd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800940a:	2301      	movs	r3, #1
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08e      	sub	sp, #56	; 0x38
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <xQueueGenericCreateStatic+0x52>
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <xQueueGenericCreateStatic+0x56>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <xQueueGenericCreateStatic+0x58>
 800946e:	2300      	movs	r3, #0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	623b      	str	r3, [r7, #32]
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <xQueueGenericCreateStatic+0x7e>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <xQueueGenericCreateStatic+0x82>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <xQueueGenericCreateStatic+0x84>
 800949a:	2300      	movs	r3, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	61fb      	str	r3, [r7, #28]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094b6:	2350      	movs	r3, #80	; 0x50
 80094b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b50      	cmp	r3, #80	; 0x50
 80094be:	d00a      	beq.n	80094d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	61bb      	str	r3, [r7, #24]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00d      	beq.n	80094fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	4613      	mov	r3, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 f83f 	bl	800957c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009500:	4618      	mov	r0, r3
 8009502:	3730      	adds	r7, #48	; 0x30
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af02      	add	r7, sp, #8
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xQueueGenericCreate+0x2a>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	613b      	str	r3, [r7, #16]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	fb02 f303 	mul.w	r3, r2, r3
 800953a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	3350      	adds	r3, #80	; 0x50
 8009540:	4618      	mov	r0, r3
 8009542:	f002 fcb9 	bl	800beb8 <pvPortMalloc>
 8009546:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d011      	beq.n	8009572 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	3350      	adds	r3, #80	; 0x50
 8009556:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009560:	79fa      	ldrb	r2, [r7, #7]
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4613      	mov	r3, r2
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f805 	bl	800957c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009572:	69bb      	ldr	r3, [r7, #24]
	}
 8009574:	4618      	mov	r0, r3
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d103      	bne.n	8009598 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	e002      	b.n	800959e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095aa:	2101      	movs	r1, #1
 80095ac:	69b8      	ldr	r0, [r7, #24]
 80095ae:	f7ff fecb 	bl	8009348 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b08a      	sub	sp, #40	; 0x28
 80095c6:	af02      	add	r7, sp, #8
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	61bb      	str	r3, [r7, #24]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d90a      	bls.n	8009608 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	617b      	str	r3, [r7, #20]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009608:	2302      	movs	r3, #2
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	2100      	movs	r1, #0
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f7ff ff00 	bl	8009418 <xQueueGenericCreateStatic>
 8009618:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009626:	69fb      	ldr	r3, [r7, #28]
	}
 8009628:	4618      	mov	r0, r3
 800962a:	3720      	adds	r7, #32
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	613b      	str	r3, [r7, #16]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	429a      	cmp	r2, r3
 800965c:	d90a      	bls.n	8009674 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	60fb      	str	r3, [r7, #12]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009674:	2202      	movs	r2, #2
 8009676:	2100      	movs	r1, #0
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff ff45 	bl	8009508 <xQueueGenericCreate>
 800967e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800968c:	697b      	ldr	r3, [r7, #20]
	}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08e      	sub	sp, #56	; 0x38
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096a6:	2300      	movs	r3, #0
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xQueueGenericSend+0x32>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <xQueueGenericSend+0x40>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <xQueueGenericSend+0x44>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <xQueueGenericSend+0x46>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <xQueueGenericSend+0x60>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d103      	bne.n	8009706 <xQueueGenericSend+0x6e>
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <xQueueGenericSend+0x72>
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <xQueueGenericSend+0x74>
 800970a:	2300      	movs	r3, #0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <xQueueGenericSend+0x8e>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	623b      	str	r3, [r7, #32]
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009726:	f001 fc4d 	bl	800afc4 <xTaskGetSchedulerState>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <xQueueGenericSend+0x9e>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <xQueueGenericSend+0xa2>
 8009736:	2301      	movs	r3, #1
 8009738:	e000      	b.n	800973c <xQueueGenericSend+0xa4>
 800973a:	2300      	movs	r3, #0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <xQueueGenericSend+0xbe>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	61fb      	str	r3, [r7, #28]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009756:	f002 fa8d 	bl	800bc74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009762:	429a      	cmp	r2, r3
 8009764:	d302      	bcc.n	800976c <xQueueGenericSend+0xd4>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d129      	bne.n	80097c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009772:	f000 fc5e 	bl	800a032 <prvCopyDataToQueue>
 8009776:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977c:	2b00      	cmp	r3, #0
 800977e:	d010      	beq.n	80097a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009782:	3324      	adds	r3, #36	; 0x24
 8009784:	4618      	mov	r0, r3
 8009786:	f001 fa5f 	bl	800ac48 <xTaskRemoveFromEventList>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d013      	beq.n	80097b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009790:	4b3f      	ldr	r3, [pc, #252]	; (8009890 <xQueueGenericSend+0x1f8>)
 8009792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	e00a      	b.n	80097b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d007      	beq.n	80097b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097a8:	4b39      	ldr	r3, [pc, #228]	; (8009890 <xQueueGenericSend+0x1f8>)
 80097aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ae:	601a      	str	r2, [r3, #0]
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097b8:	f002 fa8c 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 80097bc:	2301      	movs	r3, #1
 80097be:	e063      	b.n	8009888 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d103      	bne.n	80097ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097c6:	f002 fa85 	bl	800bcd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e05c      	b.n	8009888 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097d4:	f107 0314 	add.w	r3, r7, #20
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fa99 	bl	800ad10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097de:	2301      	movs	r3, #1
 80097e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097e2:	f002 fa77 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097e6:	f000 fff9 	bl	800a7dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097ea:	f002 fa43 	bl	800bc74 <vPortEnterCritical>
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097f4:	b25b      	sxtb	r3, r3
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d103      	bne.n	8009804 <xQueueGenericSend+0x16c>
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800980a:	b25b      	sxtb	r3, r3
 800980c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009810:	d103      	bne.n	800981a <xQueueGenericSend+0x182>
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800981a:	f002 fa5b 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800981e:	1d3a      	adds	r2, r7, #4
 8009820:	f107 0314 	add.w	r3, r7, #20
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f001 fa88 	bl	800ad3c <xTaskCheckForTimeOut>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d124      	bne.n	800987c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009834:	f000 fcf5 	bl	800a222 <prvIsQueueFull>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d018      	beq.n	8009870 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	3310      	adds	r3, #16
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	4611      	mov	r1, r2
 8009846:	4618      	mov	r0, r3
 8009848:	f001 f9ae 	bl	800aba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800984c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800984e:	f000 fc80 	bl	800a152 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009852:	f000 ffd1 	bl	800a7f8 <xTaskResumeAll>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	f47f af7c 	bne.w	8009756 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <xQueueGenericSend+0x1f8>)
 8009860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	e772      	b.n	8009756 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009872:	f000 fc6e 	bl	800a152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009876:	f000 ffbf 	bl	800a7f8 <xTaskResumeAll>
 800987a:	e76c      	b.n	8009756 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800987c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800987e:	f000 fc68 	bl	800a152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009882:	f000 ffb9 	bl	800a7f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009886:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009888:	4618      	mov	r0, r3
 800988a:	3738      	adds	r7, #56	; 0x38
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b090      	sub	sp, #64	; 0x40
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d103      	bne.n	80098d0 <xQueueGenericSendFromISR+0x3c>
 80098c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <xQueueGenericSendFromISR+0x40>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e000      	b.n	80098d6 <xQueueGenericSendFromISR+0x42>
 80098d4:	2300      	movs	r3, #0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d103      	bne.n	80098fe <xQueueGenericSendFromISR+0x6a>
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d101      	bne.n	8009902 <xQueueGenericSendFromISR+0x6e>
 80098fe:	2301      	movs	r3, #1
 8009900:	e000      	b.n	8009904 <xQueueGenericSendFromISR+0x70>
 8009902:	2300      	movs	r3, #0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	623b      	str	r3, [r7, #32]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800991e:	f002 fa8b 	bl	800be38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009922:	f3ef 8211 	mrs	r2, BASEPRI
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	61fa      	str	r2, [r7, #28]
 8009938:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800993a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800993c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009946:	429a      	cmp	r2, r3
 8009948:	d302      	bcc.n	8009950 <xQueueGenericSendFromISR+0xbc>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d12f      	bne.n	80099b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	68b9      	ldr	r1, [r7, #8]
 8009964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009966:	f000 fb64 	bl	800a032 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800996a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009972:	d112      	bne.n	800999a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009978:	2b00      	cmp	r3, #0
 800997a:	d016      	beq.n	80099aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	3324      	adds	r3, #36	; 0x24
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f961 	bl	800ac48 <xTaskRemoveFromEventList>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	e007      	b.n	80099aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800999a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800999e:	3301      	adds	r3, #1
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	b25a      	sxtb	r2, r3
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099aa:	2301      	movs	r3, #1
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099ae:	e001      	b.n	80099b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099b0:	2300      	movs	r3, #0
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3740      	adds	r7, #64	; 0x40
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b08e      	sub	sp, #56	; 0x38
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10a      	bne.n	80099f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	623b      	str	r3, [r7, #32]
}
 80099f0:	bf00      	nop
 80099f2:	e7fe      	b.n	80099f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00a      	beq.n	8009a12 <xQueueGiveFromISR+0x48>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	61fb      	str	r3, [r7, #28]
}
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d103      	bne.n	8009a22 <xQueueGiveFromISR+0x58>
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <xQueueGiveFromISR+0x5c>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <xQueueGiveFromISR+0x5e>
 8009a26:	2300      	movs	r3, #0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10a      	bne.n	8009a42 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	61bb      	str	r3, [r7, #24]
}
 8009a3e:	bf00      	nop
 8009a40:	e7fe      	b.n	8009a40 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a42:	f002 f9f9 	bl	800be38 <vPortValidateInterruptPriority>
	__asm volatile
 8009a46:	f3ef 8211 	mrs	r2, BASEPRI
 8009a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	617a      	str	r2, [r7, #20]
 8009a5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d22b      	bcs.n	8009aca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8c:	d112      	bne.n	8009ab4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d016      	beq.n	8009ac4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	3324      	adds	r3, #36	; 0x24
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 f8d4 	bl	800ac48 <xTaskRemoveFromEventList>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00e      	beq.n	8009ac4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e007      	b.n	8009ac4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ab8:	3301      	adds	r3, #1
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	b25a      	sxtb	r2, r3
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac8:	e001      	b.n	8009ace <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f383 8811 	msr	BASEPRI, r3
}
 8009ad8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3738      	adds	r7, #56	; 0x38
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08c      	sub	sp, #48	; 0x30
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <xQueueReceive+0x30>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	623b      	str	r3, [r7, #32]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <xQueueReceive+0x3e>
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <xQueueReceive+0x42>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e000      	b.n	8009b28 <xQueueReceive+0x44>
 8009b26:	2300      	movs	r3, #0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <xQueueReceive+0x5e>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	61fb      	str	r3, [r7, #28]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b42:	f001 fa3f 	bl	800afc4 <xTaskGetSchedulerState>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d102      	bne.n	8009b52 <xQueueReceive+0x6e>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <xQueueReceive+0x72>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <xQueueReceive+0x74>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <xQueueReceive+0x8e>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	61bb      	str	r3, [r7, #24]
}
 8009b6e:	bf00      	nop
 8009b70:	e7fe      	b.n	8009b70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b72:	f002 f87f 	bl	800bc74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01f      	beq.n	8009bc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b86:	f000 fabe 	bl	800a106 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	1e5a      	subs	r2, r3, #1
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00f      	beq.n	8009bba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	3310      	adds	r3, #16
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f001 f852 	bl	800ac48 <xTaskRemoveFromEventList>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009baa:	4b3d      	ldr	r3, [pc, #244]	; (8009ca0 <xQueueReceive+0x1bc>)
 8009bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bba:	f002 f88b 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e069      	b.n	8009c96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bc8:	f002 f884 	bl	800bcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e062      	b.n	8009c96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bd6:	f107 0310 	add.w	r3, r7, #16
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 f898 	bl	800ad10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009be4:	f002 f876 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009be8:	f000 fdf8 	bl	800a7dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bec:	f002 f842 	bl	800bc74 <vPortEnterCritical>
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bf6:	b25b      	sxtb	r3, r3
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfc:	d103      	bne.n	8009c06 <xQueueReceive+0x122>
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c0c:	b25b      	sxtb	r3, r3
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d103      	bne.n	8009c1c <xQueueReceive+0x138>
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c1c:	f002 f85a 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c20:	1d3a      	adds	r2, r7, #4
 8009c22:	f107 0310 	add.w	r3, r7, #16
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 f887 	bl	800ad3c <xTaskCheckForTimeOut>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d123      	bne.n	8009c7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c36:	f000 fade 	bl	800a1f6 <prvIsQueueEmpty>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d017      	beq.n	8009c70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	3324      	adds	r3, #36	; 0x24
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 ffad 	bl	800aba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c50:	f000 fa7f 	bl	800a152 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c54:	f000 fdd0 	bl	800a7f8 <xTaskResumeAll>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d189      	bne.n	8009b72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c5e:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <xQueueReceive+0x1bc>)
 8009c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	e780      	b.n	8009b72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c72:	f000 fa6e 	bl	800a152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c76:	f000 fdbf 	bl	800a7f8 <xTaskResumeAll>
 8009c7a:	e77a      	b.n	8009b72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7e:	f000 fa68 	bl	800a152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c82:	f000 fdb9 	bl	800a7f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c88:	f000 fab5 	bl	800a1f6 <prvIsQueueEmpty>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f43f af6f 	beq.w	8009b72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3730      	adds	r7, #48	; 0x30
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08e      	sub	sp, #56	; 0x38
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	623b      	str	r3, [r7, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	61fb      	str	r3, [r7, #28]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cf4:	f001 f966 	bl	800afc4 <xTaskGetSchedulerState>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <xQueueSemaphoreTake+0x60>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <xQueueSemaphoreTake+0x64>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e000      	b.n	8009d0a <xQueueSemaphoreTake+0x66>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61bb      	str	r3, [r7, #24]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d24:	f001 ffa6 	bl	800bc74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d024      	beq.n	8009d7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	1e5a      	subs	r2, r3, #1
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d104      	bne.n	8009d4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d44:	f001 fab4 	bl	800b2b0 <pvTaskIncrementMutexHeldCount>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00f      	beq.n	8009d76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	3310      	adds	r3, #16
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 ff74 	bl	800ac48 <xTaskRemoveFromEventList>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d007      	beq.n	8009d76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d66:	4b54      	ldr	r3, [pc, #336]	; (8009eb8 <xQueueSemaphoreTake+0x214>)
 8009d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d76:	f001 ffad 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e097      	b.n	8009eae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d111      	bne.n	8009da8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	617b      	str	r3, [r7, #20]
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009da0:	f001 ff98 	bl	800bcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009da4:	2300      	movs	r3, #0
 8009da6:	e082      	b.n	8009eae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dae:	f107 030c 	add.w	r3, r7, #12
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 ffac 	bl	800ad10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009db8:	2301      	movs	r3, #1
 8009dba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dbc:	f001 ff8a 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dc0:	f000 fd0c 	bl	800a7dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dc4:	f001 ff56 	bl	800bc74 <vPortEnterCritical>
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dce:	b25b      	sxtb	r3, r3
 8009dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd4:	d103      	bne.n	8009dde <xQueueSemaphoreTake+0x13a>
 8009dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de4:	b25b      	sxtb	r3, r3
 8009de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dea:	d103      	bne.n	8009df4 <xQueueSemaphoreTake+0x150>
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009df4:	f001 ff6e 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009df8:	463a      	mov	r2, r7
 8009dfa:	f107 030c 	add.w	r3, r7, #12
 8009dfe:	4611      	mov	r1, r2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 ff9b 	bl	800ad3c <xTaskCheckForTimeOut>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d132      	bne.n	8009e72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e0e:	f000 f9f2 	bl	800a1f6 <prvIsQueueEmpty>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d026      	beq.n	8009e66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d109      	bne.n	8009e34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e20:	f001 ff28 	bl	800bc74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f001 f8e9 	bl	800b000 <xTaskPriorityInherit>
 8009e2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e30:	f001 ff50 	bl	800bcd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	3324      	adds	r3, #36	; 0x24
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 feb3 	bl	800aba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e44:	f000 f985 	bl	800a152 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e48:	f000 fcd6 	bl	800a7f8 <xTaskResumeAll>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f47f af68 	bne.w	8009d24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009e54:	4b18      	ldr	r3, [pc, #96]	; (8009eb8 <xQueueSemaphoreTake+0x214>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	e75e      	b.n	8009d24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e68:	f000 f973 	bl	800a152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e6c:	f000 fcc4 	bl	800a7f8 <xTaskResumeAll>
 8009e70:	e758      	b.n	8009d24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e74:	f000 f96d 	bl	800a152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e78:	f000 fcbe 	bl	800a7f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e7e:	f000 f9ba 	bl	800a1f6 <prvIsQueueEmpty>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f43f af4d 	beq.w	8009d24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00d      	beq.n	8009eac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009e90:	f001 fef0 	bl	800bc74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e96:	f000 f8b4 	bl	800a002 <prvGetDisinheritPriorityAfterTimeout>
 8009e9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f001 f982 	bl	800b1ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009ea8:	f001 ff14 	bl	800bcd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009eac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3738      	adds	r7, #56	; 0x38
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	e000ed04 	.word	0xe000ed04

08009ebc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08e      	sub	sp, #56	; 0x38
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	623b      	str	r3, [r7, #32]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <xQueueReceiveFromISR+0x3a>
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <xQueueReceiveFromISR+0x3e>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e000      	b.n	8009efc <xQueueReceiveFromISR+0x40>
 8009efa:	2300      	movs	r3, #0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	61fb      	str	r3, [r7, #28]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f16:	f001 ff8f 	bl	800be38 <vPortValidateInterruptPriority>
	__asm volatile
 8009f1a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	61ba      	str	r2, [r7, #24]
 8009f30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d02f      	beq.n	8009fa2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f50:	f000 f8d9 	bl	800a106 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	1e5a      	subs	r2, r3, #1
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f64:	d112      	bne.n	8009f8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d016      	beq.n	8009f9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	3310      	adds	r3, #16
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 fe68 	bl	800ac48 <xTaskRemoveFromEventList>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00e      	beq.n	8009f9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e007      	b.n	8009f9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f90:	3301      	adds	r3, #1
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	b25a      	sxtb	r2, r3
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa0:	e001      	b.n	8009fa6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f383 8811 	msr	BASEPRI, r3
}
 8009fb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3738      	adds	r7, #56	; 0x38
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10a      	bne.n	8009fe4 <vQueueDelete+0x28>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	60bb      	str	r3, [r7, #8]
}
 8009fe0:	bf00      	nop
 8009fe2:	e7fe      	b.n	8009fe2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 f95f 	bl	800a2a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d102      	bne.n	8009ffa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f002 f82b 	bl	800c050 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009ffa:	bf00      	nop
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d006      	beq.n	800a020 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	e001      	b.n	800a024 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a024:	68fb      	ldr	r3, [r7, #12]
	}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b086      	sub	sp, #24
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a046:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10d      	bne.n	800a06c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d14d      	bne.n	800a0f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 f837 	bl	800b0d0 <xTaskPriorityDisinherit>
 800a062:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	609a      	str	r2, [r3, #8]
 800a06a:	e043      	b.n	800a0f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d119      	bne.n	800a0a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6858      	ldr	r0, [r3, #4]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	461a      	mov	r2, r3
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	f002 fc80 	bl	800c982 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	441a      	add	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d32b      	bcc.n	800a0f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	605a      	str	r2, [r3, #4]
 800a0a4:	e026      	b.n	800a0f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68d8      	ldr	r0, [r3, #12]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	f002 fc66 	bl	800c982 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0be:	425b      	negs	r3, r3
 800a0c0:	441a      	add	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d207      	bcs.n	800a0e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	425b      	negs	r3, r3
 800a0dc:	441a      	add	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d105      	bne.n	800a0f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d002      	beq.n	800a0f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0fc:	697b      	ldr	r3, [r7, #20]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d018      	beq.n	800a14a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68da      	ldr	r2, [r3, #12]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a120:	441a      	add	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d303      	bcc.n	800a13a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68d9      	ldr	r1, [r3, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	461a      	mov	r2, r3
 800a144:	6838      	ldr	r0, [r7, #0]
 800a146:	f002 fc1c 	bl	800c982 <memcpy>
	}
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a15a:	f001 fd8b 	bl	800bc74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a164:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a166:	e011      	b.n	800a18c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d012      	beq.n	800a196 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	3324      	adds	r3, #36	; 0x24
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fd67 	bl	800ac48 <xTaskRemoveFromEventList>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a180:	f000 fe3e 	bl	800ae00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	3b01      	subs	r3, #1
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a190:	2b00      	cmp	r3, #0
 800a192:	dce9      	bgt.n	800a168 <prvUnlockQueue+0x16>
 800a194:	e000      	b.n	800a198 <prvUnlockQueue+0x46>
					break;
 800a196:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	22ff      	movs	r2, #255	; 0xff
 800a19c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a1a0:	f001 fd98 	bl	800bcd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1a4:	f001 fd66 	bl	800bc74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1b0:	e011      	b.n	800a1d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d012      	beq.n	800a1e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3310      	adds	r3, #16
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 fd42 	bl	800ac48 <xTaskRemoveFromEventList>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1ca:	f000 fe19 	bl	800ae00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1ce:	7bbb      	ldrb	r3, [r7, #14]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dce9      	bgt.n	800a1b2 <prvUnlockQueue+0x60>
 800a1de:	e000      	b.n	800a1e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	22ff      	movs	r2, #255	; 0xff
 800a1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1ea:	f001 fd73 	bl	800bcd4 <vPortExitCritical>
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1fe:	f001 fd39 	bl	800bc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	e001      	b.n	800a214 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a210:	2300      	movs	r3, #0
 800a212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a214:	f001 fd5e 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a22a:	f001 fd23 	bl	800bc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a236:	429a      	cmp	r2, r3
 800a238:	d102      	bne.n	800a240 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a23a:	2301      	movs	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	e001      	b.n	800a244 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a244:	f001 fd46 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800a248:	68fb      	ldr	r3, [r7, #12]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e014      	b.n	800a28e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a264:	4a0f      	ldr	r2, [pc, #60]	; (800a2a4 <vQueueAddToRegistry+0x50>)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10b      	bne.n	800a288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a270:	490c      	ldr	r1, [pc, #48]	; (800a2a4 <vQueueAddToRegistry+0x50>)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a27a:	4a0a      	ldr	r2, [pc, #40]	; (800a2a4 <vQueueAddToRegistry+0x50>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	4413      	add	r3, r2
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a286:	e006      	b.n	800a296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2b07      	cmp	r3, #7
 800a292:	d9e7      	bls.n	800a264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20002a34 	.word	0x20002a34

0800a2a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e016      	b.n	800a2e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a2b6:	4a10      	ldr	r2, [pc, #64]	; (800a2f8 <vQueueUnregisterQueue+0x50>)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	00db      	lsls	r3, r3, #3
 800a2bc:	4413      	add	r3, r2
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d10b      	bne.n	800a2de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a2c6:	4a0c      	ldr	r2, [pc, #48]	; (800a2f8 <vQueueUnregisterQueue+0x50>)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a2d0:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <vQueueUnregisterQueue+0x50>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	00db      	lsls	r3, r3, #3
 800a2d6:	4413      	add	r3, r2
 800a2d8:	2200      	movs	r2, #0
 800a2da:	605a      	str	r2, [r3, #4]
				break;
 800a2dc:	e006      	b.n	800a2ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b07      	cmp	r3, #7
 800a2e8:	d9e5      	bls.n	800a2b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20002a34 	.word	0x20002a34

0800a2fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a30c:	f001 fcb2 	bl	800bc74 <vPortEnterCritical>
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a316:	b25b      	sxtb	r3, r3
 800a318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31c:	d103      	bne.n	800a326 <vQueueWaitForMessageRestricted+0x2a>
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a32c:	b25b      	sxtb	r3, r3
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a332:	d103      	bne.n	800a33c <vQueueWaitForMessageRestricted+0x40>
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a33c:	f001 fcca 	bl	800bcd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	2b00      	cmp	r3, #0
 800a346:	d106      	bne.n	800a356 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	3324      	adds	r3, #36	; 0x24
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	4618      	mov	r0, r3
 800a352:	f000 fc4d 	bl	800abf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	f7ff fefb 	bl	800a152 <prvUnlockQueue>
	}
 800a35c:	bf00      	nop
 800a35e:	3718      	adds	r7, #24
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08e      	sub	sp, #56	; 0x38
 800a368:	af04      	add	r7, sp, #16
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	623b      	str	r3, [r7, #32]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10a      	bne.n	800a3aa <xTaskCreateStatic+0x46>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	61fb      	str	r3, [r7, #28]
}
 800a3a6:	bf00      	nop
 800a3a8:	e7fe      	b.n	800a3a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3aa:	235c      	movs	r3, #92	; 0x5c
 800a3ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a3b2:	d00a      	beq.n	800a3ca <xTaskCreateStatic+0x66>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	61bb      	str	r3, [r7, #24]
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d01e      	beq.n	800a410 <xTaskCreateStatic+0xac>
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01b      	beq.n	800a410 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	f107 0314 	add.w	r3, r7, #20
 800a3f6:	9301      	str	r3, [sp, #4]
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 f850 	bl	800a4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a40a:	f000 f8dd 	bl	800a5c8 <prvAddNewTaskToReadyList>
 800a40e:	e001      	b.n	800a414 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a414:	697b      	ldr	r3, [r7, #20]
	}
 800a416:	4618      	mov	r0, r3
 800a418:	3728      	adds	r7, #40	; 0x28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b08c      	sub	sp, #48	; 0x30
 800a422:	af04      	add	r7, sp, #16
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	603b      	str	r3, [r7, #0]
 800a42a:	4613      	mov	r3, r2
 800a42c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4618      	mov	r0, r3
 800a434:	f001 fd40 	bl	800beb8 <pvPortMalloc>
 800a438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00e      	beq.n	800a45e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a440:	205c      	movs	r0, #92	; 0x5c
 800a442:	f001 fd39 	bl	800beb8 <pvPortMalloc>
 800a446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	631a      	str	r2, [r3, #48]	; 0x30
 800a454:	e005      	b.n	800a462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a456:	6978      	ldr	r0, [r7, #20]
 800a458:	f001 fdfa 	bl	800c050 <vPortFree>
 800a45c:	e001      	b.n	800a462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d017      	beq.n	800a498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a470:	88fa      	ldrh	r2, [r7, #6]
 800a472:	2300      	movs	r3, #0
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	9302      	str	r3, [sp, #8]
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	68b9      	ldr	r1, [r7, #8]
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 f80e 	bl	800a4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a48c:	69f8      	ldr	r0, [r7, #28]
 800a48e:	f000 f89b 	bl	800a5c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a492:	2301      	movs	r3, #1
 800a494:	61bb      	str	r3, [r7, #24]
 800a496:	e002      	b.n	800a49e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a498:	f04f 33ff 	mov.w	r3, #4294967295
 800a49c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a49e:	69bb      	ldr	r3, [r7, #24]
	}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3720      	adds	r7, #32
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	461a      	mov	r2, r3
 800a4c0:	21a5      	movs	r1, #165	; 0xa5
 800a4c2:	f002 f9d3 	bl	800c86c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	f023 0307 	bic.w	r3, r3, #7
 800a4de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	617b      	str	r3, [r7, #20]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d01f      	beq.n	800a546 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a506:	2300      	movs	r3, #0
 800a508:	61fb      	str	r3, [r7, #28]
 800a50a:	e012      	b.n	800a532 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	4413      	add	r3, r2
 800a512:	7819      	ldrb	r1, [r3, #0]
 800a514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	4413      	add	r3, r2
 800a51a:	3334      	adds	r3, #52	; 0x34
 800a51c:	460a      	mov	r2, r1
 800a51e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4413      	add	r3, r2
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d006      	beq.n	800a53a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	3301      	adds	r3, #1
 800a530:	61fb      	str	r3, [r7, #28]
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	2b0f      	cmp	r3, #15
 800a536:	d9e9      	bls.n	800a50c <prvInitialiseNewTask+0x64>
 800a538:	e000      	b.n	800a53c <prvInitialiseNewTask+0x94>
			{
				break;
 800a53a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a544:	e003      	b.n	800a54e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2b37      	cmp	r3, #55	; 0x37
 800a552:	d901      	bls.n	800a558 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a554:	2337      	movs	r3, #55	; 0x37
 800a556:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a55c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	2200      	movs	r2, #0
 800a568:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	3304      	adds	r3, #4
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fe56 	bl	8009220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	3318      	adds	r3, #24
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe fe51 	bl	8009220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a592:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	2200      	movs	r2, #0
 800a598:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	69b8      	ldr	r0, [r7, #24]
 800a5a8:	f001 fa38 	bl	800ba1c <pxPortInitialiseStack>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5be:	bf00      	nop
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5d0:	f001 fb50 	bl	800bc74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5d4:	4b2d      	ldr	r3, [pc, #180]	; (800a68c <prvAddNewTaskToReadyList+0xc4>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	4a2c      	ldr	r2, [pc, #176]	; (800a68c <prvAddNewTaskToReadyList+0xc4>)
 800a5dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5de:	4b2c      	ldr	r3, [pc, #176]	; (800a690 <prvAddNewTaskToReadyList+0xc8>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d109      	bne.n	800a5fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5e6:	4a2a      	ldr	r2, [pc, #168]	; (800a690 <prvAddNewTaskToReadyList+0xc8>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5ec:	4b27      	ldr	r3, [pc, #156]	; (800a68c <prvAddNewTaskToReadyList+0xc4>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d110      	bne.n	800a616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5f4:	f000 fc28 	bl	800ae48 <prvInitialiseTaskLists>
 800a5f8:	e00d      	b.n	800a616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5fa:	4b26      	ldr	r3, [pc, #152]	; (800a694 <prvAddNewTaskToReadyList+0xcc>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a602:	4b23      	ldr	r3, [pc, #140]	; (800a690 <prvAddNewTaskToReadyList+0xc8>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d802      	bhi.n	800a616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a610:	4a1f      	ldr	r2, [pc, #124]	; (800a690 <prvAddNewTaskToReadyList+0xc8>)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a616:	4b20      	ldr	r3, [pc, #128]	; (800a698 <prvAddNewTaskToReadyList+0xd0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3301      	adds	r3, #1
 800a61c:	4a1e      	ldr	r2, [pc, #120]	; (800a698 <prvAddNewTaskToReadyList+0xd0>)
 800a61e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a620:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <prvAddNewTaskToReadyList+0xd0>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62c:	4b1b      	ldr	r3, [pc, #108]	; (800a69c <prvAddNewTaskToReadyList+0xd4>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d903      	bls.n	800a63c <prvAddNewTaskToReadyList+0x74>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	4a18      	ldr	r2, [pc, #96]	; (800a69c <prvAddNewTaskToReadyList+0xd4>)
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4a15      	ldr	r2, [pc, #84]	; (800a6a0 <prvAddNewTaskToReadyList+0xd8>)
 800a64a:	441a      	add	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3304      	adds	r3, #4
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f7fe fdf1 	bl	800923a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a658:	f001 fb3c 	bl	800bcd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a65c:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <prvAddNewTaskToReadyList+0xcc>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00e      	beq.n	800a682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <prvAddNewTaskToReadyList+0xc8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	429a      	cmp	r2, r3
 800a670:	d207      	bcs.n	800a682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a672:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <prvAddNewTaskToReadyList+0xdc>)
 800a674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20002f48 	.word	0x20002f48
 800a690:	20002a74 	.word	0x20002a74
 800a694:	20002f54 	.word	0x20002f54
 800a698:	20002f64 	.word	0x20002f64
 800a69c:	20002f50 	.word	0x20002f50
 800a6a0:	20002a78 	.word	0x20002a78
 800a6a4:	e000ed04 	.word	0xe000ed04

0800a6a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d017      	beq.n	800a6ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6ba:	4b13      	ldr	r3, [pc, #76]	; (800a708 <vTaskDelay+0x60>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <vTaskDelay+0x30>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	60bb      	str	r3, [r7, #8]
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6d8:	f000 f880 	bl	800a7dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6dc:	2100      	movs	r1, #0
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fdfa 	bl	800b2d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6e4:	f000 f888 	bl	800a7f8 <xTaskResumeAll>
 800a6e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d107      	bne.n	800a700 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a6f0:	4b06      	ldr	r3, [pc, #24]	; (800a70c <vTaskDelay+0x64>)
 800a6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a700:	bf00      	nop
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	20002f70 	.word	0x20002f70
 800a70c:	e000ed04 	.word	0xe000ed04

0800a710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a716:	2300      	movs	r3, #0
 800a718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a71e:	463a      	mov	r2, r7
 800a720:	1d39      	adds	r1, r7, #4
 800a722:	f107 0308 	add.w	r3, r7, #8
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fd26 	bl	8009178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	9202      	str	r2, [sp, #8]
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	2300      	movs	r3, #0
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	2300      	movs	r3, #0
 800a73c:	460a      	mov	r2, r1
 800a73e:	4921      	ldr	r1, [pc, #132]	; (800a7c4 <vTaskStartScheduler+0xb4>)
 800a740:	4821      	ldr	r0, [pc, #132]	; (800a7c8 <vTaskStartScheduler+0xb8>)
 800a742:	f7ff fe0f 	bl	800a364 <xTaskCreateStatic>
 800a746:	4603      	mov	r3, r0
 800a748:	4a20      	ldr	r2, [pc, #128]	; (800a7cc <vTaskStartScheduler+0xbc>)
 800a74a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a74c:	4b1f      	ldr	r3, [pc, #124]	; (800a7cc <vTaskStartScheduler+0xbc>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a754:	2301      	movs	r3, #1
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e001      	b.n	800a75e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d102      	bne.n	800a76a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a764:	f000 fe0c 	bl	800b380 <xTimerCreateTimerTask>
 800a768:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d116      	bne.n	800a79e <vTaskStartScheduler+0x8e>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
}
 800a782:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a784:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <vTaskStartScheduler+0xc0>)
 800a786:	f04f 32ff 	mov.w	r2, #4294967295
 800a78a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a78c:	4b11      	ldr	r3, [pc, #68]	; (800a7d4 <vTaskStartScheduler+0xc4>)
 800a78e:	2201      	movs	r2, #1
 800a790:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a792:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <vTaskStartScheduler+0xc8>)
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a798:	f001 f9ca 	bl	800bb30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a79c:	e00e      	b.n	800a7bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d10a      	bne.n	800a7bc <vTaskStartScheduler+0xac>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	60fb      	str	r3, [r7, #12]
}
 800a7b8:	bf00      	nop
 800a7ba:	e7fe      	b.n	800a7ba <vTaskStartScheduler+0xaa>
}
 800a7bc:	bf00      	nop
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	0800db40 	.word	0x0800db40
 800a7c8:	0800ae19 	.word	0x0800ae19
 800a7cc:	20002f6c 	.word	0x20002f6c
 800a7d0:	20002f68 	.word	0x20002f68
 800a7d4:	20002f54 	.word	0x20002f54
 800a7d8:	20002f4c 	.word	0x20002f4c

0800a7dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <vTaskSuspendAll+0x18>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	4a03      	ldr	r2, [pc, #12]	; (800a7f4 <vTaskSuspendAll+0x18>)
 800a7e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a7ea:	bf00      	nop
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	20002f70 	.word	0x20002f70

0800a7f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a802:	2300      	movs	r3, #0
 800a804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a806:	4b42      	ldr	r3, [pc, #264]	; (800a910 <xTaskResumeAll+0x118>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <xTaskResumeAll+0x2c>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	603b      	str	r3, [r7, #0]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a824:	f001 fa26 	bl	800bc74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a828:	4b39      	ldr	r3, [pc, #228]	; (800a910 <xTaskResumeAll+0x118>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	4a38      	ldr	r2, [pc, #224]	; (800a910 <xTaskResumeAll+0x118>)
 800a830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a832:	4b37      	ldr	r3, [pc, #220]	; (800a910 <xTaskResumeAll+0x118>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d162      	bne.n	800a900 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a83a:	4b36      	ldr	r3, [pc, #216]	; (800a914 <xTaskResumeAll+0x11c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d05e      	beq.n	800a900 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a842:	e02f      	b.n	800a8a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a844:	4b34      	ldr	r3, [pc, #208]	; (800a918 <xTaskResumeAll+0x120>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	3318      	adds	r3, #24
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fd4f 	bl	80092f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3304      	adds	r3, #4
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fd4a 	bl	80092f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a864:	4b2d      	ldr	r3, [pc, #180]	; (800a91c <xTaskResumeAll+0x124>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d903      	bls.n	800a874 <xTaskResumeAll+0x7c>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	4a2a      	ldr	r2, [pc, #168]	; (800a91c <xTaskResumeAll+0x124>)
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a878:	4613      	mov	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4a27      	ldr	r2, [pc, #156]	; (800a920 <xTaskResumeAll+0x128>)
 800a882:	441a      	add	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3304      	adds	r3, #4
 800a888:	4619      	mov	r1, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	f7fe fcd5 	bl	800923a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a894:	4b23      	ldr	r3, [pc, #140]	; (800a924 <xTaskResumeAll+0x12c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d302      	bcc.n	800a8a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a89e:	4b22      	ldr	r3, [pc, #136]	; (800a928 <xTaskResumeAll+0x130>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8a4:	4b1c      	ldr	r3, [pc, #112]	; (800a918 <xTaskResumeAll+0x120>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1cb      	bne.n	800a844 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8b2:	f000 fb67 	bl	800af84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8b6:	4b1d      	ldr	r3, [pc, #116]	; (800a92c <xTaskResumeAll+0x134>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d010      	beq.n	800a8e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8c2:	f000 f859 	bl	800a978 <xTaskIncrementTick>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a8cc:	4b16      	ldr	r3, [pc, #88]	; (800a928 <xTaskResumeAll+0x130>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f1      	bne.n	800a8c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a8de:	4b13      	ldr	r3, [pc, #76]	; (800a92c <xTaskResumeAll+0x134>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8e4:	4b10      	ldr	r3, [pc, #64]	; (800a928 <xTaskResumeAll+0x130>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d009      	beq.n	800a900 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	; (800a930 <xTaskResumeAll+0x138>)
 800a8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a900:	f001 f9e8 	bl	800bcd4 <vPortExitCritical>

	return xAlreadyYielded;
 800a904:	68bb      	ldr	r3, [r7, #8]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20002f70 	.word	0x20002f70
 800a914:	20002f48 	.word	0x20002f48
 800a918:	20002f08 	.word	0x20002f08
 800a91c:	20002f50 	.word	0x20002f50
 800a920:	20002a78 	.word	0x20002a78
 800a924:	20002a74 	.word	0x20002a74
 800a928:	20002f5c 	.word	0x20002f5c
 800a92c:	20002f58 	.word	0x20002f58
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a93a:	4b05      	ldr	r3, [pc, #20]	; (800a950 <xTaskGetTickCount+0x1c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a940:	687b      	ldr	r3, [r7, #4]
}
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20002f4c 	.word	0x20002f4c

0800a954 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a95a:	f001 fa6d 	bl	800be38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a95e:	2300      	movs	r3, #0
 800a960:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a962:	4b04      	ldr	r3, [pc, #16]	; (800a974 <xTaskGetTickCountFromISR+0x20>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a968:	683b      	ldr	r3, [r7, #0]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20002f4c 	.word	0x20002f4c

0800a978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a97e:	2300      	movs	r3, #0
 800a980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a982:	4b4f      	ldr	r3, [pc, #316]	; (800aac0 <xTaskIncrementTick+0x148>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f040 808f 	bne.w	800aaaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a98c:	4b4d      	ldr	r3, [pc, #308]	; (800aac4 <xTaskIncrementTick+0x14c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3301      	adds	r3, #1
 800a992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a994:	4a4b      	ldr	r2, [pc, #300]	; (800aac4 <xTaskIncrementTick+0x14c>)
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d120      	bne.n	800a9e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9a0:	4b49      	ldr	r3, [pc, #292]	; (800aac8 <xTaskIncrementTick+0x150>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	603b      	str	r3, [r7, #0]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <xTaskIncrementTick+0x46>
 800a9c0:	4b41      	ldr	r3, [pc, #260]	; (800aac8 <xTaskIncrementTick+0x150>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	4b41      	ldr	r3, [pc, #260]	; (800aacc <xTaskIncrementTick+0x154>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a3f      	ldr	r2, [pc, #252]	; (800aac8 <xTaskIncrementTick+0x150>)
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	4a3f      	ldr	r2, [pc, #252]	; (800aacc <xTaskIncrementTick+0x154>)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	4b3e      	ldr	r3, [pc, #248]	; (800aad0 <xTaskIncrementTick+0x158>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	4a3d      	ldr	r2, [pc, #244]	; (800aad0 <xTaskIncrementTick+0x158>)
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	f000 fad1 	bl	800af84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9e2:	4b3c      	ldr	r3, [pc, #240]	; (800aad4 <xTaskIncrementTick+0x15c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d349      	bcc.n	800aa80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9ec:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <xTaskIncrementTick+0x150>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d104      	bne.n	800aa00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f6:	4b37      	ldr	r3, [pc, #220]	; (800aad4 <xTaskIncrementTick+0x15c>)
 800a9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fc:	601a      	str	r2, [r3, #0]
					break;
 800a9fe:	e03f      	b.n	800aa80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa00:	4b31      	ldr	r3, [pc, #196]	; (800aac8 <xTaskIncrementTick+0x150>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d203      	bcs.n	800aa20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa18:	4a2e      	ldr	r2, [pc, #184]	; (800aad4 <xTaskIncrementTick+0x15c>)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa1e:	e02f      	b.n	800aa80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	3304      	adds	r3, #4
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fc65 	bl	80092f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	3318      	adds	r3, #24
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe fc5c 	bl	80092f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4b25      	ldr	r3, [pc, #148]	; (800aad8 <xTaskIncrementTick+0x160>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d903      	bls.n	800aa50 <xTaskIncrementTick+0xd8>
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4a22      	ldr	r2, [pc, #136]	; (800aad8 <xTaskIncrementTick+0x160>)
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4a1f      	ldr	r2, [pc, #124]	; (800aadc <xTaskIncrementTick+0x164>)
 800aa5e:	441a      	add	r2, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	3304      	adds	r3, #4
 800aa64:	4619      	mov	r1, r3
 800aa66:	4610      	mov	r0, r2
 800aa68:	f7fe fbe7 	bl	800923a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa70:	4b1b      	ldr	r3, [pc, #108]	; (800aae0 <xTaskIncrementTick+0x168>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d3b8      	bcc.n	800a9ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa7e:	e7b5      	b.n	800a9ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa80:	4b17      	ldr	r3, [pc, #92]	; (800aae0 <xTaskIncrementTick+0x168>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa86:	4915      	ldr	r1, [pc, #84]	; (800aadc <xTaskIncrementTick+0x164>)
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	440b      	add	r3, r1
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d901      	bls.n	800aa9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa9c:	4b11      	ldr	r3, [pc, #68]	; (800aae4 <xTaskIncrementTick+0x16c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d007      	beq.n	800aab4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	e004      	b.n	800aab4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <xTaskIncrementTick+0x170>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3301      	adds	r3, #1
 800aab0:	4a0d      	ldr	r2, [pc, #52]	; (800aae8 <xTaskIncrementTick+0x170>)
 800aab2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aab4:	697b      	ldr	r3, [r7, #20]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20002f70 	.word	0x20002f70
 800aac4:	20002f4c 	.word	0x20002f4c
 800aac8:	20002f00 	.word	0x20002f00
 800aacc:	20002f04 	.word	0x20002f04
 800aad0:	20002f60 	.word	0x20002f60
 800aad4:	20002f68 	.word	0x20002f68
 800aad8:	20002f50 	.word	0x20002f50
 800aadc:	20002a78 	.word	0x20002a78
 800aae0:	20002a74 	.word	0x20002a74
 800aae4:	20002f5c 	.word	0x20002f5c
 800aae8:	20002f58 	.word	0x20002f58

0800aaec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aaf2:	4b28      	ldr	r3, [pc, #160]	; (800ab94 <vTaskSwitchContext+0xa8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aafa:	4b27      	ldr	r3, [pc, #156]	; (800ab98 <vTaskSwitchContext+0xac>)
 800aafc:	2201      	movs	r2, #1
 800aafe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab00:	e041      	b.n	800ab86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ab02:	4b25      	ldr	r3, [pc, #148]	; (800ab98 <vTaskSwitchContext+0xac>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab08:	4b24      	ldr	r3, [pc, #144]	; (800ab9c <vTaskSwitchContext+0xb0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	e010      	b.n	800ab32 <vTaskSwitchContext+0x46>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10a      	bne.n	800ab2c <vTaskSwitchContext+0x40>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	607b      	str	r3, [r7, #4]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <vTaskSwitchContext+0x3e>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	491b      	ldr	r1, [pc, #108]	; (800aba0 <vTaskSwitchContext+0xb4>)
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	440b      	add	r3, r1
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0e4      	beq.n	800ab10 <vTaskSwitchContext+0x24>
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4a13      	ldr	r2, [pc, #76]	; (800aba0 <vTaskSwitchContext+0xb4>)
 800ab52:	4413      	add	r3, r2
 800ab54:	60bb      	str	r3, [r7, #8]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	605a      	str	r2, [r3, #4]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	3308      	adds	r3, #8
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d104      	bne.n	800ab76 <vTaskSwitchContext+0x8a>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	605a      	str	r2, [r3, #4]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	4a09      	ldr	r2, [pc, #36]	; (800aba4 <vTaskSwitchContext+0xb8>)
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	4a06      	ldr	r2, [pc, #24]	; (800ab9c <vTaskSwitchContext+0xb0>)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6013      	str	r3, [r2, #0]
}
 800ab86:	bf00      	nop
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20002f70 	.word	0x20002f70
 800ab98:	20002f5c 	.word	0x20002f5c
 800ab9c:	20002f50 	.word	0x20002f50
 800aba0:	20002a78 	.word	0x20002a78
 800aba4:	20002a74 	.word	0x20002a74

0800aba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	60fb      	str	r3, [r7, #12]
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abce:	4b07      	ldr	r3, [pc, #28]	; (800abec <vTaskPlaceOnEventList+0x44>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3318      	adds	r3, #24
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7fe fb53 	bl	8009282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abdc:	2101      	movs	r1, #1
 800abde:	6838      	ldr	r0, [r7, #0]
 800abe0:	f000 fb7a 	bl	800b2d8 <prvAddCurrentTaskToDelayedList>
}
 800abe4:	bf00      	nop
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20002a74 	.word	0x20002a74

0800abf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	617b      	str	r3, [r7, #20]
}
 800ac14:	bf00      	nop
 800ac16:	e7fe      	b.n	800ac16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac18:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3318      	adds	r3, #24
 800ac1e:	4619      	mov	r1, r3
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7fe fb0a 	bl	800923a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f000 fb4f 	bl	800b2d8 <prvAddCurrentTaskToDelayedList>
	}
 800ac3a:	bf00      	nop
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20002a74 	.word	0x20002a74

0800ac48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10a      	bne.n	800ac74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	60fb      	str	r3, [r7, #12]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	3318      	adds	r3, #24
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fe fb3b 	bl	80092f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac7e:	4b1e      	ldr	r3, [pc, #120]	; (800acf8 <xTaskRemoveFromEventList+0xb0>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d11d      	bne.n	800acc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	3304      	adds	r3, #4
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe fb32 	bl	80092f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac94:	4b19      	ldr	r3, [pc, #100]	; (800acfc <xTaskRemoveFromEventList+0xb4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d903      	bls.n	800aca4 <xTaskRemoveFromEventList+0x5c>
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	4a16      	ldr	r2, [pc, #88]	; (800acfc <xTaskRemoveFromEventList+0xb4>)
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4a13      	ldr	r2, [pc, #76]	; (800ad00 <xTaskRemoveFromEventList+0xb8>)
 800acb2:	441a      	add	r2, r3
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	3304      	adds	r3, #4
 800acb8:	4619      	mov	r1, r3
 800acba:	4610      	mov	r0, r2
 800acbc:	f7fe fabd 	bl	800923a <vListInsertEnd>
 800acc0:	e005      	b.n	800acce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3318      	adds	r3, #24
 800acc6:	4619      	mov	r1, r3
 800acc8:	480e      	ldr	r0, [pc, #56]	; (800ad04 <xTaskRemoveFromEventList+0xbc>)
 800acca:	f7fe fab6 	bl	800923a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd2:	4b0d      	ldr	r3, [pc, #52]	; (800ad08 <xTaskRemoveFromEventList+0xc0>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd8:	429a      	cmp	r2, r3
 800acda:	d905      	bls.n	800ace8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acdc:	2301      	movs	r3, #1
 800acde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ace0:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <xTaskRemoveFromEventList+0xc4>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	e001      	b.n	800acec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acec:	697b      	ldr	r3, [r7, #20]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20002f70 	.word	0x20002f70
 800acfc:	20002f50 	.word	0x20002f50
 800ad00:	20002a78 	.word	0x20002a78
 800ad04:	20002f08 	.word	0x20002f08
 800ad08:	20002a74 	.word	0x20002a74
 800ad0c:	20002f5c 	.word	0x20002f5c

0800ad10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad18:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <vTaskInternalSetTimeOutState+0x24>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad20:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <vTaskInternalSetTimeOutState+0x28>)
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	605a      	str	r2, [r3, #4]
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	20002f60 	.word	0x20002f60
 800ad38:	20002f4c 	.word	0x20002f4c

0800ad3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10a      	bne.n	800ad62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	613b      	str	r3, [r7, #16]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	60fb      	str	r3, [r7, #12]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad7e:	f000 ff79 	bl	800bc74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad82:	4b1d      	ldr	r3, [pc, #116]	; (800adf8 <xTaskCheckForTimeOut+0xbc>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d102      	bne.n	800ada2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	61fb      	str	r3, [r7, #28]
 800ada0:	e023      	b.n	800adea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	4b15      	ldr	r3, [pc, #84]	; (800adfc <xTaskCheckForTimeOut+0xc0>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d007      	beq.n	800adbe <xTaskCheckForTimeOut+0x82>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d302      	bcc.n	800adbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800adb8:	2301      	movs	r3, #1
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	e015      	b.n	800adea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d20b      	bcs.n	800ade0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff ff9b 	bl	800ad10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adda:	2300      	movs	r3, #0
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	e004      	b.n	800adea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ade6:	2301      	movs	r3, #1
 800ade8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800adea:	f000 ff73 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800adee:	69fb      	ldr	r3, [r7, #28]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3720      	adds	r7, #32
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	20002f4c 	.word	0x20002f4c
 800adfc:	20002f60 	.word	0x20002f60

0800ae00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae04:	4b03      	ldr	r3, [pc, #12]	; (800ae14 <vTaskMissedYield+0x14>)
 800ae06:	2201      	movs	r2, #1
 800ae08:	601a      	str	r2, [r3, #0]
}
 800ae0a:	bf00      	nop
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	20002f5c 	.word	0x20002f5c

0800ae18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae20:	f000 f852 	bl	800aec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae24:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <prvIdleTask+0x28>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d9f9      	bls.n	800ae20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae2c:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <prvIdleTask+0x2c>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae3c:	e7f0      	b.n	800ae20 <prvIdleTask+0x8>
 800ae3e:	bf00      	nop
 800ae40:	20002a78 	.word	0x20002a78
 800ae44:	e000ed04 	.word	0xe000ed04

0800ae48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae4e:	2300      	movs	r3, #0
 800ae50:	607b      	str	r3, [r7, #4]
 800ae52:	e00c      	b.n	800ae6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4a12      	ldr	r2, [pc, #72]	; (800aea8 <prvInitialiseTaskLists+0x60>)
 800ae60:	4413      	add	r3, r2
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe f9bc 	bl	80091e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	607b      	str	r3, [r7, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b37      	cmp	r3, #55	; 0x37
 800ae72:	d9ef      	bls.n	800ae54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae74:	480d      	ldr	r0, [pc, #52]	; (800aeac <prvInitialiseTaskLists+0x64>)
 800ae76:	f7fe f9b3 	bl	80091e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae7a:	480d      	ldr	r0, [pc, #52]	; (800aeb0 <prvInitialiseTaskLists+0x68>)
 800ae7c:	f7fe f9b0 	bl	80091e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae80:	480c      	ldr	r0, [pc, #48]	; (800aeb4 <prvInitialiseTaskLists+0x6c>)
 800ae82:	f7fe f9ad 	bl	80091e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae86:	480c      	ldr	r0, [pc, #48]	; (800aeb8 <prvInitialiseTaskLists+0x70>)
 800ae88:	f7fe f9aa 	bl	80091e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae8c:	480b      	ldr	r0, [pc, #44]	; (800aebc <prvInitialiseTaskLists+0x74>)
 800ae8e:	f7fe f9a7 	bl	80091e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae92:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <prvInitialiseTaskLists+0x78>)
 800ae94:	4a05      	ldr	r2, [pc, #20]	; (800aeac <prvInitialiseTaskLists+0x64>)
 800ae96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae98:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <prvInitialiseTaskLists+0x7c>)
 800ae9a:	4a05      	ldr	r2, [pc, #20]	; (800aeb0 <prvInitialiseTaskLists+0x68>)
 800ae9c:	601a      	str	r2, [r3, #0]
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20002a78 	.word	0x20002a78
 800aeac:	20002ed8 	.word	0x20002ed8
 800aeb0:	20002eec 	.word	0x20002eec
 800aeb4:	20002f08 	.word	0x20002f08
 800aeb8:	20002f1c 	.word	0x20002f1c
 800aebc:	20002f34 	.word	0x20002f34
 800aec0:	20002f00 	.word	0x20002f00
 800aec4:	20002f04 	.word	0x20002f04

0800aec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aece:	e019      	b.n	800af04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aed0:	f000 fed0 	bl	800bc74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed4:	4b10      	ldr	r3, [pc, #64]	; (800af18 <prvCheckTasksWaitingTermination+0x50>)
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3304      	adds	r3, #4
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fe fa07 	bl	80092f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aee6:	4b0d      	ldr	r3, [pc, #52]	; (800af1c <prvCheckTasksWaitingTermination+0x54>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	4a0b      	ldr	r2, [pc, #44]	; (800af1c <prvCheckTasksWaitingTermination+0x54>)
 800aeee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aef0:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <prvCheckTasksWaitingTermination+0x58>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	4a0a      	ldr	r2, [pc, #40]	; (800af20 <prvCheckTasksWaitingTermination+0x58>)
 800aef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aefa:	f000 feeb 	bl	800bcd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f810 	bl	800af24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af04:	4b06      	ldr	r3, [pc, #24]	; (800af20 <prvCheckTasksWaitingTermination+0x58>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1e1      	bne.n	800aed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af0c:	bf00      	nop
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20002f1c 	.word	0x20002f1c
 800af1c:	20002f48 	.word	0x20002f48
 800af20:	20002f30 	.word	0x20002f30

0800af24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af32:	2b00      	cmp	r3, #0
 800af34:	d108      	bne.n	800af48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 f888 	bl	800c050 <vPortFree>
				vPortFree( pxTCB );
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f001 f885 	bl	800c050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af46:	e018      	b.n	800af7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d103      	bne.n	800af5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f001 f87c 	bl	800c050 <vPortFree>
	}
 800af58:	e00f      	b.n	800af7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af60:	2b02      	cmp	r3, #2
 800af62:	d00a      	beq.n	800af7a <prvDeleteTCB+0x56>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	60fb      	str	r3, [r7, #12]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <prvDeleteTCB+0x54>
	}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af8a:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <prvResetNextTaskUnblockTime+0x38>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d104      	bne.n	800af9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af94:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <prvResetNextTaskUnblockTime+0x3c>)
 800af96:	f04f 32ff 	mov.w	r2, #4294967295
 800af9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af9c:	e008      	b.n	800afb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af9e:	4b07      	ldr	r3, [pc, #28]	; (800afbc <prvResetNextTaskUnblockTime+0x38>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	4a04      	ldr	r2, [pc, #16]	; (800afc0 <prvResetNextTaskUnblockTime+0x3c>)
 800afae:	6013      	str	r3, [r2, #0]
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	20002f00 	.word	0x20002f00
 800afc0:	20002f68 	.word	0x20002f68

0800afc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <xTaskGetSchedulerState+0x34>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d102      	bne.n	800afd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afd2:	2301      	movs	r3, #1
 800afd4:	607b      	str	r3, [r7, #4]
 800afd6:	e008      	b.n	800afea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd8:	4b08      	ldr	r3, [pc, #32]	; (800affc <xTaskGetSchedulerState+0x38>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800afe0:	2302      	movs	r3, #2
 800afe2:	607b      	str	r3, [r7, #4]
 800afe4:	e001      	b.n	800afea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800afe6:	2300      	movs	r3, #0
 800afe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800afea:	687b      	ldr	r3, [r7, #4]
	}
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	20002f54 	.word	0x20002f54
 800affc:	20002f70 	.word	0x20002f70

0800b000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d051      	beq.n	800b0ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01a:	4b2a      	ldr	r3, [pc, #168]	; (800b0c4 <xTaskPriorityInherit+0xc4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	429a      	cmp	r2, r3
 800b022:	d241      	bcs.n	800b0a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	db06      	blt.n	800b03a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02c:	4b25      	ldr	r3, [pc, #148]	; (800b0c4 <xTaskPriorityInherit+0xc4>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b032:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	6959      	ldr	r1, [r3, #20]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4a1f      	ldr	r2, [pc, #124]	; (800b0c8 <xTaskPriorityInherit+0xc8>)
 800b04c:	4413      	add	r3, r2
 800b04e:	4299      	cmp	r1, r3
 800b050:	d122      	bne.n	800b098 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	3304      	adds	r3, #4
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe f94c 	bl	80092f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b05c:	4b19      	ldr	r3, [pc, #100]	; (800b0c4 <xTaskPriorityInherit+0xc4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06a:	4b18      	ldr	r3, [pc, #96]	; (800b0cc <xTaskPriorityInherit+0xcc>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d903      	bls.n	800b07a <xTaskPriorityInherit+0x7a>
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b076:	4a15      	ldr	r2, [pc, #84]	; (800b0cc <xTaskPriorityInherit+0xcc>)
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4a10      	ldr	r2, [pc, #64]	; (800b0c8 <xTaskPriorityInherit+0xc8>)
 800b088:	441a      	add	r2, r3
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	3304      	adds	r3, #4
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7fe f8d2 	bl	800923a <vListInsertEnd>
 800b096:	e004      	b.n	800b0a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <xTaskPriorityInherit+0xc4>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	e008      	b.n	800b0ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0ac:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <xTaskPriorityInherit+0xc4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d201      	bcs.n	800b0ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
	}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20002a74 	.word	0x20002a74
 800b0c8:	20002a78 	.word	0x20002a78
 800b0cc:	20002f50 	.word	0x20002f50

0800b0d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d056      	beq.n	800b194 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0e6:	4b2e      	ldr	r3, [pc, #184]	; (800b1a0 <xTaskPriorityDisinherit+0xd0>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d00a      	beq.n	800b106 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	60fb      	str	r3, [r7, #12]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	60bb      	str	r3, [r7, #8]
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b128:	1e5a      	subs	r2, r3, #1
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b136:	429a      	cmp	r2, r3
 800b138:	d02c      	beq.n	800b194 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d128      	bne.n	800b194 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	3304      	adds	r3, #4
 800b146:	4618      	mov	r0, r3
 800b148:	f7fe f8d4 	bl	80092f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b164:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <xTaskPriorityDisinherit+0xd4>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d903      	bls.n	800b174 <xTaskPriorityDisinherit+0xa4>
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	4a0c      	ldr	r2, [pc, #48]	; (800b1a4 <xTaskPriorityDisinherit+0xd4>)
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4a09      	ldr	r2, [pc, #36]	; (800b1a8 <xTaskPriorityDisinherit+0xd8>)
 800b182:	441a      	add	r2, r3
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	3304      	adds	r3, #4
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7fe f855 	bl	800923a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b194:	697b      	ldr	r3, [r7, #20]
	}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20002a74 	.word	0x20002a74
 800b1a4:	20002f50 	.word	0x20002f50
 800b1a8:	20002a78 	.word	0x20002a78

0800b1ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d06a      	beq.n	800b29a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	60fb      	str	r3, [r7, #12]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d902      	bls.n	800b1f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	61fb      	str	r3, [r7, #28]
 800b1f0:	e002      	b.n	800b1f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	69fa      	ldr	r2, [r7, #28]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d04b      	beq.n	800b29a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d146      	bne.n	800b29a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b20c:	4b25      	ldr	r3, [pc, #148]	; (800b2a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	429a      	cmp	r2, r3
 800b214:	d10a      	bne.n	800b22c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21a:	f383 8811 	msr	BASEPRI, r3
 800b21e:	f3bf 8f6f 	isb	sy
 800b222:	f3bf 8f4f 	dsb	sy
 800b226:	60bb      	str	r3, [r7, #8]
}
 800b228:	bf00      	nop
 800b22a:	e7fe      	b.n	800b22a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b230:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	69fa      	ldr	r2, [r7, #28]
 800b236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	db04      	blt.n	800b24a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	6959      	ldr	r1, [r3, #20]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	4613      	mov	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4a13      	ldr	r2, [pc, #76]	; (800b2a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b25a:	4413      	add	r3, r2
 800b25c:	4299      	cmp	r1, r3
 800b25e:	d11c      	bne.n	800b29a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	3304      	adds	r3, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe f845 	bl	80092f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26e:	4b0f      	ldr	r3, [pc, #60]	; (800b2ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	429a      	cmp	r2, r3
 800b274:	d903      	bls.n	800b27e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27a:	4a0c      	ldr	r2, [pc, #48]	; (800b2ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b282:	4613      	mov	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4413      	add	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4a07      	ldr	r2, [pc, #28]	; (800b2a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b28c:	441a      	add	r2, r3
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	3304      	adds	r3, #4
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f7fd ffd0 	bl	800923a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b29a:	bf00      	nop
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20002a74 	.word	0x20002a74
 800b2a8:	20002a78 	.word	0x20002a78
 800b2ac:	20002f50 	.word	0x20002f50

0800b2b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b2b4:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d004      	beq.n	800b2c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b2bc:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2c2:	3201      	adds	r2, #1
 800b2c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b2c6:	4b03      	ldr	r3, [pc, #12]	; (800b2d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
	}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	20002a74 	.word	0x20002a74

0800b2d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2e2:	4b21      	ldr	r3, [pc, #132]	; (800b368 <prvAddCurrentTaskToDelayedList+0x90>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2e8:	4b20      	ldr	r3, [pc, #128]	; (800b36c <prvAddCurrentTaskToDelayedList+0x94>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe f800 	bl	80092f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fa:	d10a      	bne.n	800b312 <prvAddCurrentTaskToDelayedList+0x3a>
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d007      	beq.n	800b312 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b302:	4b1a      	ldr	r3, [pc, #104]	; (800b36c <prvAddCurrentTaskToDelayedList+0x94>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3304      	adds	r3, #4
 800b308:	4619      	mov	r1, r3
 800b30a:	4819      	ldr	r0, [pc, #100]	; (800b370 <prvAddCurrentTaskToDelayedList+0x98>)
 800b30c:	f7fd ff95 	bl	800923a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b310:	e026      	b.n	800b360 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4413      	add	r3, r2
 800b318:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b31a:	4b14      	ldr	r3, [pc, #80]	; (800b36c <prvAddCurrentTaskToDelayedList+0x94>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	429a      	cmp	r2, r3
 800b328:	d209      	bcs.n	800b33e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b32a:	4b12      	ldr	r3, [pc, #72]	; (800b374 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <prvAddCurrentTaskToDelayedList+0x94>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3304      	adds	r3, #4
 800b334:	4619      	mov	r1, r3
 800b336:	4610      	mov	r0, r2
 800b338:	f7fd ffa3 	bl	8009282 <vListInsert>
}
 800b33c:	e010      	b.n	800b360 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b33e:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	4b0a      	ldr	r3, [pc, #40]	; (800b36c <prvAddCurrentTaskToDelayedList+0x94>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3304      	adds	r3, #4
 800b348:	4619      	mov	r1, r3
 800b34a:	4610      	mov	r0, r2
 800b34c:	f7fd ff99 	bl	8009282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b350:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	429a      	cmp	r2, r3
 800b358:	d202      	bcs.n	800b360 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b35a:	4a08      	ldr	r2, [pc, #32]	; (800b37c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	6013      	str	r3, [r2, #0]
}
 800b360:	bf00      	nop
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20002f4c 	.word	0x20002f4c
 800b36c:	20002a74 	.word	0x20002a74
 800b370:	20002f34 	.word	0x20002f34
 800b374:	20002f04 	.word	0x20002f04
 800b378:	20002f00 	.word	0x20002f00
 800b37c:	20002f68 	.word	0x20002f68

0800b380 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08a      	sub	sp, #40	; 0x28
 800b384:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b386:	2300      	movs	r3, #0
 800b388:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b38a:	f000 fb07 	bl	800b99c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b38e:	4b1c      	ldr	r3, [pc, #112]	; (800b400 <xTimerCreateTimerTask+0x80>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d021      	beq.n	800b3da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b39e:	1d3a      	adds	r2, r7, #4
 800b3a0:	f107 0108 	add.w	r1, r7, #8
 800b3a4:	f107 030c 	add.w	r3, r7, #12
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fd feff 	bl	80091ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	9202      	str	r2, [sp, #8]
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	2300      	movs	r3, #0
 800b3be:	460a      	mov	r2, r1
 800b3c0:	4910      	ldr	r1, [pc, #64]	; (800b404 <xTimerCreateTimerTask+0x84>)
 800b3c2:	4811      	ldr	r0, [pc, #68]	; (800b408 <xTimerCreateTimerTask+0x88>)
 800b3c4:	f7fe ffce 	bl	800a364 <xTaskCreateStatic>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	4a10      	ldr	r2, [pc, #64]	; (800b40c <xTimerCreateTimerTask+0x8c>)
 800b3cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3ce:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <xTimerCreateTimerTask+0x8c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	613b      	str	r3, [r7, #16]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b3f6:	697b      	ldr	r3, [r7, #20]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	20002fa4 	.word	0x20002fa4
 800b404:	0800db48 	.word	0x0800db48
 800b408:	0800b545 	.word	0x0800b545
 800b40c:	20002fa8 	.word	0x20002fa8

0800b410 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b08a      	sub	sp, #40	; 0x28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b41e:	2300      	movs	r3, #0
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	623b      	str	r3, [r7, #32]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b43e:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <xTimerGenericCommand+0x98>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d02a      	beq.n	800b49c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b05      	cmp	r3, #5
 800b456:	dc18      	bgt.n	800b48a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b458:	f7ff fdb4 	bl	800afc4 <xTaskGetSchedulerState>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d109      	bne.n	800b476 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b462:	4b11      	ldr	r3, [pc, #68]	; (800b4a8 <xTimerGenericCommand+0x98>)
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f107 0110 	add.w	r1, r7, #16
 800b46a:	2300      	movs	r3, #0
 800b46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46e:	f7fe f913 	bl	8009698 <xQueueGenericSend>
 800b472:	6278      	str	r0, [r7, #36]	; 0x24
 800b474:	e012      	b.n	800b49c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b476:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <xTimerGenericCommand+0x98>)
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	f107 0110 	add.w	r1, r7, #16
 800b47e:	2300      	movs	r3, #0
 800b480:	2200      	movs	r2, #0
 800b482:	f7fe f909 	bl	8009698 <xQueueGenericSend>
 800b486:	6278      	str	r0, [r7, #36]	; 0x24
 800b488:	e008      	b.n	800b49c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b48a:	4b07      	ldr	r3, [pc, #28]	; (800b4a8 <xTimerGenericCommand+0x98>)
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	f107 0110 	add.w	r1, r7, #16
 800b492:	2300      	movs	r3, #0
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	f7fe f9fd 	bl	8009894 <xQueueGenericSendFromISR>
 800b49a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3728      	adds	r7, #40	; 0x28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20002fa4 	.word	0x20002fa4

0800b4ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af02      	add	r7, sp, #8
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b6:	4b22      	ldr	r3, [pc, #136]	; (800b540 <prvProcessExpiredTimer+0x94>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fd ff15 	bl	80092f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d022      	beq.n	800b51e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	699a      	ldr	r2, [r3, #24]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	18d1      	adds	r1, r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	6978      	ldr	r0, [r7, #20]
 800b4e6:	f000 f8d1 	bl	800b68c <prvInsertTimerInActiveList>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01f      	beq.n	800b530 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	6978      	ldr	r0, [r7, #20]
 800b4fc:	f7ff ff88 	bl	800b410 <xTimerGenericCommand>
 800b500:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d113      	bne.n	800b530 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	60fb      	str	r3, [r7, #12]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b524:	f023 0301 	bic.w	r3, r3, #1
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	6a1b      	ldr	r3, [r3, #32]
 800b534:	6978      	ldr	r0, [r7, #20]
 800b536:	4798      	blx	r3
}
 800b538:	bf00      	nop
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	20002f9c 	.word	0x20002f9c

0800b544 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b54c:	f107 0308 	add.w	r3, r7, #8
 800b550:	4618      	mov	r0, r3
 800b552:	f000 f857 	bl	800b604 <prvGetNextExpireTime>
 800b556:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	4619      	mov	r1, r3
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 f803 	bl	800b568 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b562:	f000 f8d5 	bl	800b710 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b566:	e7f1      	b.n	800b54c <prvTimerTask+0x8>

0800b568 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b572:	f7ff f933 	bl	800a7dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b576:	f107 0308 	add.w	r3, r7, #8
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 f866 	bl	800b64c <prvSampleTimeNow>
 800b580:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d130      	bne.n	800b5ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <prvProcessTimerOrBlockTask+0x3c>
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	429a      	cmp	r2, r3
 800b594:	d806      	bhi.n	800b5a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b596:	f7ff f92f 	bl	800a7f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b59a:	68f9      	ldr	r1, [r7, #12]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff ff85 	bl	800b4ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5a2:	e024      	b.n	800b5ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d008      	beq.n	800b5bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5aa:	4b13      	ldr	r3, [pc, #76]	; (800b5f8 <prvProcessTimerOrBlockTask+0x90>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <prvProcessTimerOrBlockTask+0x50>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e000      	b.n	800b5ba <prvProcessTimerOrBlockTask+0x52>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5bc:	4b0f      	ldr	r3, [pc, #60]	; (800b5fc <prvProcessTimerOrBlockTask+0x94>)
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	f7fe fe97 	bl	800a2fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5ce:	f7ff f913 	bl	800a7f8 <xTaskResumeAll>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10a      	bne.n	800b5ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5d8:	4b09      	ldr	r3, [pc, #36]	; (800b600 <prvProcessTimerOrBlockTask+0x98>)
 800b5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	f3bf 8f6f 	isb	sy
}
 800b5e8:	e001      	b.n	800b5ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5ea:	f7ff f905 	bl	800a7f8 <xTaskResumeAll>
}
 800b5ee:	bf00      	nop
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20002fa0 	.word	0x20002fa0
 800b5fc:	20002fa4 	.word	0x20002fa4
 800b600:	e000ed04 	.word	0xe000ed04

0800b604 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b60c:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <prvGetNextExpireTime+0x44>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <prvGetNextExpireTime+0x16>
 800b616:	2201      	movs	r2, #1
 800b618:	e000      	b.n	800b61c <prvGetNextExpireTime+0x18>
 800b61a:	2200      	movs	r2, #0
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d105      	bne.n	800b634 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b628:	4b07      	ldr	r3, [pc, #28]	; (800b648 <prvGetNextExpireTime+0x44>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	e001      	b.n	800b638 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b638:	68fb      	ldr	r3, [r7, #12]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20002f9c 	.word	0x20002f9c

0800b64c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b654:	f7ff f96e 	bl	800a934 <xTaskGetTickCount>
 800b658:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b65a:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <prvSampleTimeNow+0x3c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	429a      	cmp	r2, r3
 800b662:	d205      	bcs.n	800b670 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b664:	f000 f936 	bl	800b8d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	e002      	b.n	800b676 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b676:	4a04      	ldr	r2, [pc, #16]	; (800b688 <prvSampleTimeNow+0x3c>)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b67c:	68fb      	ldr	r3, [r7, #12]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20002fac 	.word	0x20002fac

0800b68c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d812      	bhi.n	800b6d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	1ad2      	subs	r2, r2, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	699b      	ldr	r3, [r3, #24]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d302      	bcc.n	800b6c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]
 800b6c4:	e01b      	b.n	800b6fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <prvInsertTimerInActiveList+0x7c>)
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	f7fd fdd6 	bl	8009282 <vListInsert>
 800b6d6:	e012      	b.n	800b6fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d206      	bcs.n	800b6ee <prvInsertTimerInActiveList+0x62>
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d302      	bcc.n	800b6ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	e007      	b.n	800b6fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6ee:	4b07      	ldr	r3, [pc, #28]	; (800b70c <prvInsertTimerInActiveList+0x80>)
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	f7fd fdc2 	bl	8009282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6fe:	697b      	ldr	r3, [r7, #20]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20002fa0 	.word	0x20002fa0
 800b70c:	20002f9c 	.word	0x20002f9c

0800b710 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08e      	sub	sp, #56	; 0x38
 800b714:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b716:	e0ca      	b.n	800b8ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	da18      	bge.n	800b750 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b71e:	1d3b      	adds	r3, r7, #4
 800b720:	3304      	adds	r3, #4
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	61fb      	str	r3, [r7, #28]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b746:	6850      	ldr	r0, [r2, #4]
 800b748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74a:	6892      	ldr	r2, [r2, #8]
 800b74c:	4611      	mov	r1, r2
 800b74e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	f2c0 80ab 	blt.w	800b8ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d004      	beq.n	800b76e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	3304      	adds	r3, #4
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fd fdc3 	bl	80092f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b76e:	463b      	mov	r3, r7
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff ff6b 	bl	800b64c <prvSampleTimeNow>
 800b776:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b09      	cmp	r3, #9
 800b77c:	f200 8096 	bhi.w	800b8ac <prvProcessReceivedCommands+0x19c>
 800b780:	a201      	add	r2, pc, #4	; (adr r2, 800b788 <prvProcessReceivedCommands+0x78>)
 800b782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b786:	bf00      	nop
 800b788:	0800b7b1 	.word	0x0800b7b1
 800b78c:	0800b7b1 	.word	0x0800b7b1
 800b790:	0800b7b1 	.word	0x0800b7b1
 800b794:	0800b825 	.word	0x0800b825
 800b798:	0800b839 	.word	0x0800b839
 800b79c:	0800b883 	.word	0x0800b883
 800b7a0:	0800b7b1 	.word	0x0800b7b1
 800b7a4:	0800b7b1 	.word	0x0800b7b1
 800b7a8:	0800b825 	.word	0x0800b825
 800b7ac:	0800b839 	.word	0x0800b839
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	18d1      	adds	r1, r2, r3
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d0:	f7ff ff5c 	bl	800b68c <prvInsertTimerInActiveList>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d069      	beq.n	800b8ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7e8:	f003 0304 	and.w	r3, r3, #4
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d05e      	beq.n	800b8ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	441a      	add	r2, r3
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b802:	f7ff fe05 	bl	800b410 <xTimerGenericCommand>
 800b806:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d14f      	bne.n	800b8ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	61bb      	str	r3, [r7, #24]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b82a:	f023 0301 	bic.w	r3, r3, #1
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b836:	e03a      	b.n	800b8ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b83e:	f043 0301 	orr.w	r3, r3, #1
 800b842:	b2da      	uxtb	r2, r3
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10a      	bne.n	800b86e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	617b      	str	r3, [r7, #20]
}
 800b86a:	bf00      	nop
 800b86c:	e7fe      	b.n	800b86c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	699a      	ldr	r2, [r3, #24]
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b874:	18d1      	adds	r1, r2, r3
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b87c:	f7ff ff06 	bl	800b68c <prvInsertTimerInActiveList>
					break;
 800b880:	e015      	b.n	800b8ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d103      	bne.n	800b898 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b892:	f000 fbdd 	bl	800c050 <vPortFree>
 800b896:	e00a      	b.n	800b8ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b89e:	f023 0301 	bic.w	r3, r3, #1
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8aa:	e000      	b.n	800b8ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b8ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8ae:	4b08      	ldr	r3, [pc, #32]	; (800b8d0 <prvProcessReceivedCommands+0x1c0>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	1d39      	adds	r1, r7, #4
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe f914 	bl	8009ae4 <xQueueReceive>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f47f af2a 	bne.w	800b718 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop
 800b8c8:	3730      	adds	r7, #48	; 0x30
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20002fa4 	.word	0x20002fa4

0800b8d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8da:	e048      	b.n	800b96e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8dc:	4b2d      	ldr	r3, [pc, #180]	; (800b994 <prvSwitchTimerLists+0xc0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e6:	4b2b      	ldr	r3, [pc, #172]	; (800b994 <prvSwitchTimerLists+0xc0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fd fcfd 	bl	80092f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d02e      	beq.n	800b96e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	699b      	ldr	r3, [r3, #24]
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	4413      	add	r3, r2
 800b918:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d90e      	bls.n	800b940 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b92e:	4b19      	ldr	r3, [pc, #100]	; (800b994 <prvSwitchTimerLists+0xc0>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3304      	adds	r3, #4
 800b936:	4619      	mov	r1, r3
 800b938:	4610      	mov	r0, r2
 800b93a:	f7fd fca2 	bl	8009282 <vListInsert>
 800b93e:	e016      	b.n	800b96e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b940:	2300      	movs	r3, #0
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	2300      	movs	r3, #0
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	2100      	movs	r1, #0
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f7ff fd60 	bl	800b410 <xTimerGenericCommand>
 800b950:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	603b      	str	r3, [r7, #0]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b96e:	4b09      	ldr	r3, [pc, #36]	; (800b994 <prvSwitchTimerLists+0xc0>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1b1      	bne.n	800b8dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b978:	4b06      	ldr	r3, [pc, #24]	; (800b994 <prvSwitchTimerLists+0xc0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b97e:	4b06      	ldr	r3, [pc, #24]	; (800b998 <prvSwitchTimerLists+0xc4>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a04      	ldr	r2, [pc, #16]	; (800b994 <prvSwitchTimerLists+0xc0>)
 800b984:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b986:	4a04      	ldr	r2, [pc, #16]	; (800b998 <prvSwitchTimerLists+0xc4>)
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	6013      	str	r3, [r2, #0]
}
 800b98c:	bf00      	nop
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20002f9c 	.word	0x20002f9c
 800b998:	20002fa0 	.word	0x20002fa0

0800b99c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9a2:	f000 f967 	bl	800bc74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9a6:	4b15      	ldr	r3, [pc, #84]	; (800b9fc <prvCheckForValidListAndQueue+0x60>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d120      	bne.n	800b9f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9ae:	4814      	ldr	r0, [pc, #80]	; (800ba00 <prvCheckForValidListAndQueue+0x64>)
 800b9b0:	f7fd fc16 	bl	80091e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9b4:	4813      	ldr	r0, [pc, #76]	; (800ba04 <prvCheckForValidListAndQueue+0x68>)
 800b9b6:	f7fd fc13 	bl	80091e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9ba:	4b13      	ldr	r3, [pc, #76]	; (800ba08 <prvCheckForValidListAndQueue+0x6c>)
 800b9bc:	4a10      	ldr	r2, [pc, #64]	; (800ba00 <prvCheckForValidListAndQueue+0x64>)
 800b9be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9c0:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <prvCheckForValidListAndQueue+0x70>)
 800b9c2:	4a10      	ldr	r2, [pc, #64]	; (800ba04 <prvCheckForValidListAndQueue+0x68>)
 800b9c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <prvCheckForValidListAndQueue+0x74>)
 800b9cc:	4a11      	ldr	r2, [pc, #68]	; (800ba14 <prvCheckForValidListAndQueue+0x78>)
 800b9ce:	2110      	movs	r1, #16
 800b9d0:	200a      	movs	r0, #10
 800b9d2:	f7fd fd21 	bl	8009418 <xQueueGenericCreateStatic>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	4a08      	ldr	r2, [pc, #32]	; (800b9fc <prvCheckForValidListAndQueue+0x60>)
 800b9da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9dc:	4b07      	ldr	r3, [pc, #28]	; (800b9fc <prvCheckForValidListAndQueue+0x60>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d005      	beq.n	800b9f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9e4:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <prvCheckForValidListAndQueue+0x60>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	490b      	ldr	r1, [pc, #44]	; (800ba18 <prvCheckForValidListAndQueue+0x7c>)
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fe fc32 	bl	800a254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9f0:	f000 f970 	bl	800bcd4 <vPortExitCritical>
}
 800b9f4:	bf00      	nop
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20002fa4 	.word	0x20002fa4
 800ba00:	20002f74 	.word	0x20002f74
 800ba04:	20002f88 	.word	0x20002f88
 800ba08:	20002f9c 	.word	0x20002f9c
 800ba0c:	20002fa0 	.word	0x20002fa0
 800ba10:	20003050 	.word	0x20003050
 800ba14:	20002fb0 	.word	0x20002fb0
 800ba18:	0800db50 	.word	0x0800db50

0800ba1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	3b04      	subs	r3, #4
 800ba2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3b04      	subs	r3, #4
 800ba3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f023 0201 	bic.w	r2, r3, #1
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3b04      	subs	r3, #4
 800ba4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba4c:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <pxPortInitialiseStack+0x64>)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3b14      	subs	r3, #20
 800ba56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3b04      	subs	r3, #4
 800ba62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f06f 0202 	mvn.w	r2, #2
 800ba6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3b20      	subs	r3, #32
 800ba70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba72:	68fb      	ldr	r3, [r7, #12]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	0800ba85 	.word	0x0800ba85

0800ba84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba8e:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <prvTaskExitError+0x54>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba96:	d00a      	beq.n	800baae <prvTaskExitError+0x2a>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <prvTaskExitError+0x28>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	60bb      	str	r3, [r7, #8]
}
 800bac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bac2:	bf00      	nop
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0fc      	beq.n	800bac4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800baca:	bf00      	nop
 800bacc:	bf00      	nop
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	20000020 	.word	0x20000020
 800badc:	00000000 	.word	0x00000000

0800bae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <pxCurrentTCBConst2>)
 800bae2:	6819      	ldr	r1, [r3, #0]
 800bae4:	6808      	ldr	r0, [r1, #0]
 800bae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	f380 8809 	msr	PSP, r0
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f04f 0000 	mov.w	r0, #0
 800baf6:	f380 8811 	msr	BASEPRI, r0
 800bafa:	4770      	bx	lr
 800bafc:	f3af 8000 	nop.w

0800bb00 <pxCurrentTCBConst2>:
 800bb00:	20002a74 	.word	0x20002a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop

0800bb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb08:	4808      	ldr	r0, [pc, #32]	; (800bb2c <prvPortStartFirstTask+0x24>)
 800bb0a:	6800      	ldr	r0, [r0, #0]
 800bb0c:	6800      	ldr	r0, [r0, #0]
 800bb0e:	f380 8808 	msr	MSP, r0
 800bb12:	f04f 0000 	mov.w	r0, #0
 800bb16:	f380 8814 	msr	CONTROL, r0
 800bb1a:	b662      	cpsie	i
 800bb1c:	b661      	cpsie	f
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	df00      	svc	0
 800bb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb2a:	bf00      	nop
 800bb2c:	e000ed08 	.word	0xe000ed08

0800bb30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb36:	4b46      	ldr	r3, [pc, #280]	; (800bc50 <xPortStartScheduler+0x120>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a46      	ldr	r2, [pc, #280]	; (800bc54 <xPortStartScheduler+0x124>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d10a      	bne.n	800bb56 <xPortStartScheduler+0x26>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	613b      	str	r3, [r7, #16]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb56:	4b3e      	ldr	r3, [pc, #248]	; (800bc50 <xPortStartScheduler+0x120>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a3f      	ldr	r2, [pc, #252]	; (800bc58 <xPortStartScheduler+0x128>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d10a      	bne.n	800bb76 <xPortStartScheduler+0x46>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb76:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <xPortStartScheduler+0x12c>)
 800bb78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	22ff      	movs	r2, #255	; 0xff
 800bb86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	4b31      	ldr	r3, [pc, #196]	; (800bc60 <xPortStartScheduler+0x130>)
 800bb9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb9e:	4b31      	ldr	r3, [pc, #196]	; (800bc64 <xPortStartScheduler+0x134>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bba4:	e009      	b.n	800bbba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bba6:	4b2f      	ldr	r3, [pc, #188]	; (800bc64 <xPortStartScheduler+0x134>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	4a2d      	ldr	r2, [pc, #180]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbba:	78fb      	ldrb	r3, [r7, #3]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d0ef      	beq.n	800bba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbc6:	4b27      	ldr	r3, [pc, #156]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f1c3 0307 	rsb	r3, r3, #7
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d00a      	beq.n	800bbe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60bb      	str	r3, [r7, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbe8:	4b1e      	ldr	r3, [pc, #120]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	021b      	lsls	r3, r3, #8
 800bbee:	4a1d      	ldr	r2, [pc, #116]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbf2:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbfa:	4a1a      	ldr	r2, [pc, #104]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc06:	4b18      	ldr	r3, [pc, #96]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a17      	ldr	r2, [pc, #92]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a14      	ldr	r2, [pc, #80]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc1e:	f000 f8dd 	bl	800bddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc22:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <xPortStartScheduler+0x13c>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc28:	f000 f8fc 	bl	800be24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc2c:	4b10      	ldr	r3, [pc, #64]	; (800bc70 <xPortStartScheduler+0x140>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a0f      	ldr	r2, [pc, #60]	; (800bc70 <xPortStartScheduler+0x140>)
 800bc32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc38:	f7ff ff66 	bl	800bb08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc3c:	f7fe ff56 	bl	800aaec <vTaskSwitchContext>
	prvTaskExitError();
 800bc40:	f7ff ff20 	bl	800ba84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	e000ed00 	.word	0xe000ed00
 800bc54:	410fc271 	.word	0x410fc271
 800bc58:	410fc270 	.word	0x410fc270
 800bc5c:	e000e400 	.word	0xe000e400
 800bc60:	200030a0 	.word	0x200030a0
 800bc64:	200030a4 	.word	0x200030a4
 800bc68:	e000ed20 	.word	0xe000ed20
 800bc6c:	20000020 	.word	0x20000020
 800bc70:	e000ef34 	.word	0xe000ef34

0800bc74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	607b      	str	r3, [r7, #4]
}
 800bc8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc8e:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <vPortEnterCritical+0x58>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3301      	adds	r3, #1
 800bc94:	4a0d      	ldr	r2, [pc, #52]	; (800bccc <vPortEnterCritical+0x58>)
 800bc96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc98:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <vPortEnterCritical+0x58>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d10f      	bne.n	800bcc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <vPortEnterCritical+0x5c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	603b      	str	r3, [r7, #0]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <vPortEnterCritical+0x4a>
	}
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	20000020 	.word	0x20000020
 800bcd0:	e000ed04 	.word	0xe000ed04

0800bcd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcda:	4b12      	ldr	r3, [pc, #72]	; (800bd24 <vPortExitCritical+0x50>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <vPortExitCritical+0x24>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	607b      	str	r3, [r7, #4]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <vPortExitCritical+0x50>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	4a09      	ldr	r2, [pc, #36]	; (800bd24 <vPortExitCritical+0x50>)
 800bd00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd02:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <vPortExitCritical+0x50>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d105      	bne.n	800bd16 <vPortExitCritical+0x42>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	f383 8811 	msr	BASEPRI, r3
}
 800bd14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd16:	bf00      	nop
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	20000020 	.word	0x20000020
	...

0800bd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd30:	f3ef 8009 	mrs	r0, PSP
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <pxCurrentTCBConst>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	f01e 0f10 	tst.w	lr, #16
 800bd40:	bf08      	it	eq
 800bd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4a:	6010      	str	r0, [r2, #0]
 800bd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd54:	f380 8811 	msr	BASEPRI, r0
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f7fe fec4 	bl	800aaec <vTaskSwitchContext>
 800bd64:	f04f 0000 	mov.w	r0, #0
 800bd68:	f380 8811 	msr	BASEPRI, r0
 800bd6c:	bc09      	pop	{r0, r3}
 800bd6e:	6819      	ldr	r1, [r3, #0]
 800bd70:	6808      	ldr	r0, [r1, #0]
 800bd72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd76:	f01e 0f10 	tst.w	lr, #16
 800bd7a:	bf08      	it	eq
 800bd7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd80:	f380 8809 	msr	PSP, r0
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	f3af 8000 	nop.w

0800bd90 <pxCurrentTCBConst>:
 800bd90:	20002a74 	.word	0x20002a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop

0800bd98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	607b      	str	r3, [r7, #4]
}
 800bdb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdb2:	f7fe fde1 	bl	800a978 <xTaskIncrementTick>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdbc:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <xPortSysTickHandler+0x40>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	f383 8811 	msr	BASEPRI, r3
}
 800bdce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bddc:	b480      	push	{r7}
 800bdde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bde0:	4b0b      	ldr	r3, [pc, #44]	; (800be10 <vPortSetupTimerInterrupt+0x34>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <vPortSetupTimerInterrupt+0x38>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdec:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <vPortSetupTimerInterrupt+0x3c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a0a      	ldr	r2, [pc, #40]	; (800be1c <vPortSetupTimerInterrupt+0x40>)
 800bdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf6:	099b      	lsrs	r3, r3, #6
 800bdf8:	4a09      	ldr	r2, [pc, #36]	; (800be20 <vPortSetupTimerInterrupt+0x44>)
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdfe:	4b04      	ldr	r3, [pc, #16]	; (800be10 <vPortSetupTimerInterrupt+0x34>)
 800be00:	2207      	movs	r2, #7
 800be02:	601a      	str	r2, [r3, #0]
}
 800be04:	bf00      	nop
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	e000e010 	.word	0xe000e010
 800be14:	e000e018 	.word	0xe000e018
 800be18:	20000000 	.word	0x20000000
 800be1c:	10624dd3 	.word	0x10624dd3
 800be20:	e000e014 	.word	0xe000e014

0800be24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be34 <vPortEnableVFP+0x10>
 800be28:	6801      	ldr	r1, [r0, #0]
 800be2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be2e:	6001      	str	r1, [r0, #0]
 800be30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be32:	bf00      	nop
 800be34:	e000ed88 	.word	0xe000ed88

0800be38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be3e:	f3ef 8305 	mrs	r3, IPSR
 800be42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b0f      	cmp	r3, #15
 800be48:	d914      	bls.n	800be74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <vPortValidateInterruptPriority+0x70>)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be54:	4b15      	ldr	r3, [pc, #84]	; (800beac <vPortValidateInterruptPriority+0x74>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	7afa      	ldrb	r2, [r7, #11]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d20a      	bcs.n	800be74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	607b      	str	r3, [r7, #4]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <vPortValidateInterruptPriority+0x78>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be7c:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <vPortValidateInterruptPriority+0x7c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d90a      	bls.n	800be9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	603b      	str	r3, [r7, #0]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <vPortValidateInterruptPriority+0x60>
	}
 800be9a:	bf00      	nop
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	e000e3f0 	.word	0xe000e3f0
 800beac:	200030a0 	.word	0x200030a0
 800beb0:	e000ed0c 	.word	0xe000ed0c
 800beb4:	200030a4 	.word	0x200030a4

0800beb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bec4:	f7fe fc8a 	bl	800a7dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bec8:	4b5b      	ldr	r3, [pc, #364]	; (800c038 <pvPortMalloc+0x180>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bed0:	f000 f920 	bl	800c114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bed4:	4b59      	ldr	r3, [pc, #356]	; (800c03c <pvPortMalloc+0x184>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f040 8093 	bne.w	800c008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01d      	beq.n	800bf24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bee8:	2208      	movs	r2, #8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f003 0307 	and.w	r3, r3, #7
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d014      	beq.n	800bf24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f023 0307 	bic.w	r3, r3, #7
 800bf00:	3308      	adds	r3, #8
 800bf02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <pvPortMalloc+0x6c>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	617b      	str	r3, [r7, #20]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d06e      	beq.n	800c008 <pvPortMalloc+0x150>
 800bf2a:	4b45      	ldr	r3, [pc, #276]	; (800c040 <pvPortMalloc+0x188>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d869      	bhi.n	800c008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf34:	4b43      	ldr	r3, [pc, #268]	; (800c044 <pvPortMalloc+0x18c>)
 800bf36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf38:	4b42      	ldr	r3, [pc, #264]	; (800c044 <pvPortMalloc+0x18c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf3e:	e004      	b.n	800bf4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d903      	bls.n	800bf5c <pvPortMalloc+0xa4>
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1f1      	bne.n	800bf40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf5c:	4b36      	ldr	r3, [pc, #216]	; (800c038 <pvPortMalloc+0x180>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d050      	beq.n	800c008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	4413      	add	r3, r2
 800bf6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	1ad2      	subs	r2, r2, r3
 800bf80:	2308      	movs	r3, #8
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d91f      	bls.n	800bfc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f003 0307 	and.w	r3, r3, #7
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <pvPortMalloc+0xf8>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	613b      	str	r3, [r7, #16]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	1ad2      	subs	r2, r2, r3
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfc2:	69b8      	ldr	r0, [r7, #24]
 800bfc4:	f000 f908 	bl	800c1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfc8:	4b1d      	ldr	r3, [pc, #116]	; (800c040 <pvPortMalloc+0x188>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	4a1b      	ldr	r2, [pc, #108]	; (800c040 <pvPortMalloc+0x188>)
 800bfd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfd6:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <pvPortMalloc+0x188>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4b1b      	ldr	r3, [pc, #108]	; (800c048 <pvPortMalloc+0x190>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d203      	bcs.n	800bfea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bfe2:	4b17      	ldr	r3, [pc, #92]	; (800c040 <pvPortMalloc+0x188>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a18      	ldr	r2, [pc, #96]	; (800c048 <pvPortMalloc+0x190>)
 800bfe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	4b13      	ldr	r3, [pc, #76]	; (800c03c <pvPortMalloc+0x184>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	431a      	orrs	r2, r3
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	2200      	movs	r2, #0
 800bffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bffe:	4b13      	ldr	r3, [pc, #76]	; (800c04c <pvPortMalloc+0x194>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3301      	adds	r3, #1
 800c004:	4a11      	ldr	r2, [pc, #68]	; (800c04c <pvPortMalloc+0x194>)
 800c006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c008:	f7fe fbf6 	bl	800a7f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	f003 0307 	and.w	r3, r3, #7
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <pvPortMalloc+0x174>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	60fb      	str	r3, [r7, #12]
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <pvPortMalloc+0x172>
	return pvReturn;
 800c02c:	69fb      	ldr	r3, [r7, #28]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3728      	adds	r7, #40	; 0x28
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20006cb0 	.word	0x20006cb0
 800c03c:	20006cc4 	.word	0x20006cc4
 800c040:	20006cb4 	.word	0x20006cb4
 800c044:	20006ca8 	.word	0x20006ca8
 800c048:	20006cb8 	.word	0x20006cb8
 800c04c:	20006cbc 	.word	0x20006cbc

0800c050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d04d      	beq.n	800c0fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c062:	2308      	movs	r3, #8
 800c064:	425b      	negs	r3, r3
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4413      	add	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b24      	ldr	r3, [pc, #144]	; (800c108 <vPortFree+0xb8>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4013      	ands	r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <vPortFree+0x44>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	60fb      	str	r3, [r7, #12]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00a      	beq.n	800c0b2 <vPortFree+0x62>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60bb      	str	r3, [r7, #8]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <vPortFree+0xb8>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01e      	beq.n	800c0fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d11a      	bne.n	800c0fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <vPortFree+0xb8>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	43db      	mvns	r3, r3
 800c0d2:	401a      	ands	r2, r3
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0d8:	f7fe fb80 	bl	800a7dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	4b0a      	ldr	r3, [pc, #40]	; (800c10c <vPortFree+0xbc>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	4a09      	ldr	r2, [pc, #36]	; (800c10c <vPortFree+0xbc>)
 800c0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f000 f874 	bl	800c1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <vPortFree+0xc0>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	4a06      	ldr	r2, [pc, #24]	; (800c110 <vPortFree+0xc0>)
 800c0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0fa:	f7fe fb7d 	bl	800a7f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0fe:	bf00      	nop
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20006cc4 	.word	0x20006cc4
 800c10c:	20006cb4 	.word	0x20006cb4
 800c110:	20006cc0 	.word	0x20006cc0

0800c114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c11a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c120:	4b27      	ldr	r3, [pc, #156]	; (800c1c0 <prvHeapInit+0xac>)
 800c122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3307      	adds	r3, #7
 800c132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f023 0307 	bic.w	r3, r3, #7
 800c13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	4a1f      	ldr	r2, [pc, #124]	; (800c1c0 <prvHeapInit+0xac>)
 800c144:	4413      	add	r3, r2
 800c146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c14c:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <prvHeapInit+0xb0>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <prvHeapInit+0xb0>)
 800c154:	2200      	movs	r2, #0
 800c156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c160:	2208      	movs	r2, #8
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0307 	bic.w	r3, r3, #7
 800c16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4a15      	ldr	r2, [pc, #84]	; (800c1c8 <prvHeapInit+0xb4>)
 800c174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c176:	4b14      	ldr	r3, [pc, #80]	; (800c1c8 <prvHeapInit+0xb4>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2200      	movs	r2, #0
 800c17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c17e:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <prvHeapInit+0xb4>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <prvHeapInit+0xb4>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	4a0a      	ldr	r2, [pc, #40]	; (800c1cc <prvHeapInit+0xb8>)
 800c1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	4a09      	ldr	r2, [pc, #36]	; (800c1d0 <prvHeapInit+0xbc>)
 800c1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1ac:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <prvHeapInit+0xc0>)
 800c1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c1b2:	601a      	str	r2, [r3, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	200030a8 	.word	0x200030a8
 800c1c4:	20006ca8 	.word	0x20006ca8
 800c1c8:	20006cb0 	.word	0x20006cb0
 800c1cc:	20006cb8 	.word	0x20006cb8
 800c1d0:	20006cb4 	.word	0x20006cb4
 800c1d4:	20006cc4 	.word	0x20006cc4

0800c1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1e0:	4b28      	ldr	r3, [pc, #160]	; (800c284 <prvInsertBlockIntoFreeList+0xac>)
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e002      	b.n	800c1ec <prvInsertBlockIntoFreeList+0x14>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d8f7      	bhi.n	800c1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	4413      	add	r3, r2
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d108      	bne.n	800c21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	441a      	add	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	441a      	add	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d118      	bne.n	800c260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b15      	ldr	r3, [pc, #84]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d00d      	beq.n	800c256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	441a      	add	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	e008      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e003      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d002      	beq.n	800c276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c276:	bf00      	nop
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	20006ca8 	.word	0x20006ca8
 800c288:	20006cb0 	.word	0x20006cb0

0800c28c <malloc>:
 800c28c:	4b02      	ldr	r3, [pc, #8]	; (800c298 <malloc+0xc>)
 800c28e:	4601      	mov	r1, r0
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	f000 b823 	b.w	800c2dc <_malloc_r>
 800c296:	bf00      	nop
 800c298:	2000007c 	.word	0x2000007c

0800c29c <sbrk_aligned>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	4e0e      	ldr	r6, [pc, #56]	; (800c2d8 <sbrk_aligned+0x3c>)
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	6831      	ldr	r1, [r6, #0]
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	b911      	cbnz	r1, 800c2ae <sbrk_aligned+0x12>
 800c2a8:	f000 fb1c 	bl	800c8e4 <_sbrk_r>
 800c2ac:	6030      	str	r0, [r6, #0]
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f000 fb17 	bl	800c8e4 <_sbrk_r>
 800c2b6:	1c43      	adds	r3, r0, #1
 800c2b8:	d00a      	beq.n	800c2d0 <sbrk_aligned+0x34>
 800c2ba:	1cc4      	adds	r4, r0, #3
 800c2bc:	f024 0403 	bic.w	r4, r4, #3
 800c2c0:	42a0      	cmp	r0, r4
 800c2c2:	d007      	beq.n	800c2d4 <sbrk_aligned+0x38>
 800c2c4:	1a21      	subs	r1, r4, r0
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f000 fb0c 	bl	800c8e4 <_sbrk_r>
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	d101      	bne.n	800c2d4 <sbrk_aligned+0x38>
 800c2d0:	f04f 34ff 	mov.w	r4, #4294967295
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	20006ccc 	.word	0x20006ccc

0800c2dc <_malloc_r>:
 800c2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e0:	1ccd      	adds	r5, r1, #3
 800c2e2:	f025 0503 	bic.w	r5, r5, #3
 800c2e6:	3508      	adds	r5, #8
 800c2e8:	2d0c      	cmp	r5, #12
 800c2ea:	bf38      	it	cc
 800c2ec:	250c      	movcc	r5, #12
 800c2ee:	2d00      	cmp	r5, #0
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	db01      	blt.n	800c2f8 <_malloc_r+0x1c>
 800c2f4:	42a9      	cmp	r1, r5
 800c2f6:	d905      	bls.n	800c304 <_malloc_r+0x28>
 800c2f8:	230c      	movs	r3, #12
 800c2fa:	603b      	str	r3, [r7, #0]
 800c2fc:	2600      	movs	r6, #0
 800c2fe:	4630      	mov	r0, r6
 800c300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c304:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3d8 <_malloc_r+0xfc>
 800c308:	f000 f868 	bl	800c3dc <__malloc_lock>
 800c30c:	f8d8 3000 	ldr.w	r3, [r8]
 800c310:	461c      	mov	r4, r3
 800c312:	bb5c      	cbnz	r4, 800c36c <_malloc_r+0x90>
 800c314:	4629      	mov	r1, r5
 800c316:	4638      	mov	r0, r7
 800c318:	f7ff ffc0 	bl	800c29c <sbrk_aligned>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	4604      	mov	r4, r0
 800c320:	d155      	bne.n	800c3ce <_malloc_r+0xf2>
 800c322:	f8d8 4000 	ldr.w	r4, [r8]
 800c326:	4626      	mov	r6, r4
 800c328:	2e00      	cmp	r6, #0
 800c32a:	d145      	bne.n	800c3b8 <_malloc_r+0xdc>
 800c32c:	2c00      	cmp	r4, #0
 800c32e:	d048      	beq.n	800c3c2 <_malloc_r+0xe6>
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	4631      	mov	r1, r6
 800c334:	4638      	mov	r0, r7
 800c336:	eb04 0903 	add.w	r9, r4, r3
 800c33a:	f000 fad3 	bl	800c8e4 <_sbrk_r>
 800c33e:	4581      	cmp	r9, r0
 800c340:	d13f      	bne.n	800c3c2 <_malloc_r+0xe6>
 800c342:	6821      	ldr	r1, [r4, #0]
 800c344:	1a6d      	subs	r5, r5, r1
 800c346:	4629      	mov	r1, r5
 800c348:	4638      	mov	r0, r7
 800c34a:	f7ff ffa7 	bl	800c29c <sbrk_aligned>
 800c34e:	3001      	adds	r0, #1
 800c350:	d037      	beq.n	800c3c2 <_malloc_r+0xe6>
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	442b      	add	r3, r5
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	f8d8 3000 	ldr.w	r3, [r8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d038      	beq.n	800c3d2 <_malloc_r+0xf6>
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	42a2      	cmp	r2, r4
 800c364:	d12b      	bne.n	800c3be <_malloc_r+0xe2>
 800c366:	2200      	movs	r2, #0
 800c368:	605a      	str	r2, [r3, #4]
 800c36a:	e00f      	b.n	800c38c <_malloc_r+0xb0>
 800c36c:	6822      	ldr	r2, [r4, #0]
 800c36e:	1b52      	subs	r2, r2, r5
 800c370:	d41f      	bmi.n	800c3b2 <_malloc_r+0xd6>
 800c372:	2a0b      	cmp	r2, #11
 800c374:	d917      	bls.n	800c3a6 <_malloc_r+0xca>
 800c376:	1961      	adds	r1, r4, r5
 800c378:	42a3      	cmp	r3, r4
 800c37a:	6025      	str	r5, [r4, #0]
 800c37c:	bf18      	it	ne
 800c37e:	6059      	strne	r1, [r3, #4]
 800c380:	6863      	ldr	r3, [r4, #4]
 800c382:	bf08      	it	eq
 800c384:	f8c8 1000 	streq.w	r1, [r8]
 800c388:	5162      	str	r2, [r4, r5]
 800c38a:	604b      	str	r3, [r1, #4]
 800c38c:	4638      	mov	r0, r7
 800c38e:	f104 060b 	add.w	r6, r4, #11
 800c392:	f000 f829 	bl	800c3e8 <__malloc_unlock>
 800c396:	f026 0607 	bic.w	r6, r6, #7
 800c39a:	1d23      	adds	r3, r4, #4
 800c39c:	1af2      	subs	r2, r6, r3
 800c39e:	d0ae      	beq.n	800c2fe <_malloc_r+0x22>
 800c3a0:	1b9b      	subs	r3, r3, r6
 800c3a2:	50a3      	str	r3, [r4, r2]
 800c3a4:	e7ab      	b.n	800c2fe <_malloc_r+0x22>
 800c3a6:	42a3      	cmp	r3, r4
 800c3a8:	6862      	ldr	r2, [r4, #4]
 800c3aa:	d1dd      	bne.n	800c368 <_malloc_r+0x8c>
 800c3ac:	f8c8 2000 	str.w	r2, [r8]
 800c3b0:	e7ec      	b.n	800c38c <_malloc_r+0xb0>
 800c3b2:	4623      	mov	r3, r4
 800c3b4:	6864      	ldr	r4, [r4, #4]
 800c3b6:	e7ac      	b.n	800c312 <_malloc_r+0x36>
 800c3b8:	4634      	mov	r4, r6
 800c3ba:	6876      	ldr	r6, [r6, #4]
 800c3bc:	e7b4      	b.n	800c328 <_malloc_r+0x4c>
 800c3be:	4613      	mov	r3, r2
 800c3c0:	e7cc      	b.n	800c35c <_malloc_r+0x80>
 800c3c2:	230c      	movs	r3, #12
 800c3c4:	603b      	str	r3, [r7, #0]
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	f000 f80e 	bl	800c3e8 <__malloc_unlock>
 800c3cc:	e797      	b.n	800c2fe <_malloc_r+0x22>
 800c3ce:	6025      	str	r5, [r4, #0]
 800c3d0:	e7dc      	b.n	800c38c <_malloc_r+0xb0>
 800c3d2:	605b      	str	r3, [r3, #4]
 800c3d4:	deff      	udf	#255	; 0xff
 800c3d6:	bf00      	nop
 800c3d8:	20006cc8 	.word	0x20006cc8

0800c3dc <__malloc_lock>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	; (800c3e4 <__malloc_lock+0x8>)
 800c3de:	f000 bace 	b.w	800c97e <__retarget_lock_acquire_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	20006e10 	.word	0x20006e10

0800c3e8 <__malloc_unlock>:
 800c3e8:	4801      	ldr	r0, [pc, #4]	; (800c3f0 <__malloc_unlock+0x8>)
 800c3ea:	f000 bac9 	b.w	800c980 <__retarget_lock_release_recursive>
 800c3ee:	bf00      	nop
 800c3f0:	20006e10 	.word	0x20006e10

0800c3f4 <std>:
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	b510      	push	{r4, lr}
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	e9c0 3300 	strd	r3, r3, [r0]
 800c3fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c402:	6083      	str	r3, [r0, #8]
 800c404:	8181      	strh	r1, [r0, #12]
 800c406:	6643      	str	r3, [r0, #100]	; 0x64
 800c408:	81c2      	strh	r2, [r0, #14]
 800c40a:	6183      	str	r3, [r0, #24]
 800c40c:	4619      	mov	r1, r3
 800c40e:	2208      	movs	r2, #8
 800c410:	305c      	adds	r0, #92	; 0x5c
 800c412:	f000 fa2b 	bl	800c86c <memset>
 800c416:	4b0d      	ldr	r3, [pc, #52]	; (800c44c <std+0x58>)
 800c418:	6263      	str	r3, [r4, #36]	; 0x24
 800c41a:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <std+0x5c>)
 800c41c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c41e:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <std+0x60>)
 800c420:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c422:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <std+0x64>)
 800c424:	6323      	str	r3, [r4, #48]	; 0x30
 800c426:	4b0d      	ldr	r3, [pc, #52]	; (800c45c <std+0x68>)
 800c428:	6224      	str	r4, [r4, #32]
 800c42a:	429c      	cmp	r4, r3
 800c42c:	d006      	beq.n	800c43c <std+0x48>
 800c42e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c432:	4294      	cmp	r4, r2
 800c434:	d002      	beq.n	800c43c <std+0x48>
 800c436:	33d0      	adds	r3, #208	; 0xd0
 800c438:	429c      	cmp	r4, r3
 800c43a:	d105      	bne.n	800c448 <std+0x54>
 800c43c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c444:	f000 ba9a 	b.w	800c97c <__retarget_lock_init_recursive>
 800c448:	bd10      	pop	{r4, pc}
 800c44a:	bf00      	nop
 800c44c:	0800c6bd 	.word	0x0800c6bd
 800c450:	0800c6df 	.word	0x0800c6df
 800c454:	0800c717 	.word	0x0800c717
 800c458:	0800c73b 	.word	0x0800c73b
 800c45c:	20006cd0 	.word	0x20006cd0

0800c460 <stdio_exit_handler>:
 800c460:	4a02      	ldr	r2, [pc, #8]	; (800c46c <stdio_exit_handler+0xc>)
 800c462:	4903      	ldr	r1, [pc, #12]	; (800c470 <stdio_exit_handler+0x10>)
 800c464:	4803      	ldr	r0, [pc, #12]	; (800c474 <stdio_exit_handler+0x14>)
 800c466:	f000 b869 	b.w	800c53c <_fwalk_sglue>
 800c46a:	bf00      	nop
 800c46c:	20000024 	.word	0x20000024
 800c470:	0800d39d 	.word	0x0800d39d
 800c474:	20000030 	.word	0x20000030

0800c478 <cleanup_stdio>:
 800c478:	6841      	ldr	r1, [r0, #4]
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <cleanup_stdio+0x34>)
 800c47c:	4299      	cmp	r1, r3
 800c47e:	b510      	push	{r4, lr}
 800c480:	4604      	mov	r4, r0
 800c482:	d001      	beq.n	800c488 <cleanup_stdio+0x10>
 800c484:	f000 ff8a 	bl	800d39c <_fflush_r>
 800c488:	68a1      	ldr	r1, [r4, #8]
 800c48a:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <cleanup_stdio+0x38>)
 800c48c:	4299      	cmp	r1, r3
 800c48e:	d002      	beq.n	800c496 <cleanup_stdio+0x1e>
 800c490:	4620      	mov	r0, r4
 800c492:	f000 ff83 	bl	800d39c <_fflush_r>
 800c496:	68e1      	ldr	r1, [r4, #12]
 800c498:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <cleanup_stdio+0x3c>)
 800c49a:	4299      	cmp	r1, r3
 800c49c:	d004      	beq.n	800c4a8 <cleanup_stdio+0x30>
 800c49e:	4620      	mov	r0, r4
 800c4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4a4:	f000 bf7a 	b.w	800d39c <_fflush_r>
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20006cd0 	.word	0x20006cd0
 800c4b0:	20006d38 	.word	0x20006d38
 800c4b4:	20006da0 	.word	0x20006da0

0800c4b8 <global_stdio_init.part.0>:
 800c4b8:	b510      	push	{r4, lr}
 800c4ba:	4b0b      	ldr	r3, [pc, #44]	; (800c4e8 <global_stdio_init.part.0+0x30>)
 800c4bc:	4c0b      	ldr	r4, [pc, #44]	; (800c4ec <global_stdio_init.part.0+0x34>)
 800c4be:	4a0c      	ldr	r2, [pc, #48]	; (800c4f0 <global_stdio_init.part.0+0x38>)
 800c4c0:	601a      	str	r2, [r3, #0]
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	2104      	movs	r1, #4
 800c4c8:	f7ff ff94 	bl	800c3f4 <std>
 800c4cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	2109      	movs	r1, #9
 800c4d4:	f7ff ff8e 	bl	800c3f4 <std>
 800c4d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c4dc:	2202      	movs	r2, #2
 800c4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e2:	2112      	movs	r1, #18
 800c4e4:	f7ff bf86 	b.w	800c3f4 <std>
 800c4e8:	20006e08 	.word	0x20006e08
 800c4ec:	20006cd0 	.word	0x20006cd0
 800c4f0:	0800c461 	.word	0x0800c461

0800c4f4 <__sfp_lock_acquire>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	; (800c4fc <__sfp_lock_acquire+0x8>)
 800c4f6:	f000 ba42 	b.w	800c97e <__retarget_lock_acquire_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	20006e11 	.word	0x20006e11

0800c500 <__sfp_lock_release>:
 800c500:	4801      	ldr	r0, [pc, #4]	; (800c508 <__sfp_lock_release+0x8>)
 800c502:	f000 ba3d 	b.w	800c980 <__retarget_lock_release_recursive>
 800c506:	bf00      	nop
 800c508:	20006e11 	.word	0x20006e11

0800c50c <__sinit>:
 800c50c:	b510      	push	{r4, lr}
 800c50e:	4604      	mov	r4, r0
 800c510:	f7ff fff0 	bl	800c4f4 <__sfp_lock_acquire>
 800c514:	6a23      	ldr	r3, [r4, #32]
 800c516:	b11b      	cbz	r3, 800c520 <__sinit+0x14>
 800c518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c51c:	f7ff bff0 	b.w	800c500 <__sfp_lock_release>
 800c520:	4b04      	ldr	r3, [pc, #16]	; (800c534 <__sinit+0x28>)
 800c522:	6223      	str	r3, [r4, #32]
 800c524:	4b04      	ldr	r3, [pc, #16]	; (800c538 <__sinit+0x2c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1f5      	bne.n	800c518 <__sinit+0xc>
 800c52c:	f7ff ffc4 	bl	800c4b8 <global_stdio_init.part.0>
 800c530:	e7f2      	b.n	800c518 <__sinit+0xc>
 800c532:	bf00      	nop
 800c534:	0800c479 	.word	0x0800c479
 800c538:	20006e08 	.word	0x20006e08

0800c53c <_fwalk_sglue>:
 800c53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c540:	4607      	mov	r7, r0
 800c542:	4688      	mov	r8, r1
 800c544:	4614      	mov	r4, r2
 800c546:	2600      	movs	r6, #0
 800c548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c54c:	f1b9 0901 	subs.w	r9, r9, #1
 800c550:	d505      	bpl.n	800c55e <_fwalk_sglue+0x22>
 800c552:	6824      	ldr	r4, [r4, #0]
 800c554:	2c00      	cmp	r4, #0
 800c556:	d1f7      	bne.n	800c548 <_fwalk_sglue+0xc>
 800c558:	4630      	mov	r0, r6
 800c55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55e:	89ab      	ldrh	r3, [r5, #12]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d907      	bls.n	800c574 <_fwalk_sglue+0x38>
 800c564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c568:	3301      	adds	r3, #1
 800c56a:	d003      	beq.n	800c574 <_fwalk_sglue+0x38>
 800c56c:	4629      	mov	r1, r5
 800c56e:	4638      	mov	r0, r7
 800c570:	47c0      	blx	r8
 800c572:	4306      	orrs	r6, r0
 800c574:	3568      	adds	r5, #104	; 0x68
 800c576:	e7e9      	b.n	800c54c <_fwalk_sglue+0x10>

0800c578 <iprintf>:
 800c578:	b40f      	push	{r0, r1, r2, r3}
 800c57a:	b507      	push	{r0, r1, r2, lr}
 800c57c:	4906      	ldr	r1, [pc, #24]	; (800c598 <iprintf+0x20>)
 800c57e:	ab04      	add	r3, sp, #16
 800c580:	6808      	ldr	r0, [r1, #0]
 800c582:	f853 2b04 	ldr.w	r2, [r3], #4
 800c586:	6881      	ldr	r1, [r0, #8]
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	f000 fbd7 	bl	800cd3c <_vfiprintf_r>
 800c58e:	b003      	add	sp, #12
 800c590:	f85d eb04 	ldr.w	lr, [sp], #4
 800c594:	b004      	add	sp, #16
 800c596:	4770      	bx	lr
 800c598:	2000007c 	.word	0x2000007c

0800c59c <_puts_r>:
 800c59c:	6a03      	ldr	r3, [r0, #32]
 800c59e:	b570      	push	{r4, r5, r6, lr}
 800c5a0:	6884      	ldr	r4, [r0, #8]
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	460e      	mov	r6, r1
 800c5a6:	b90b      	cbnz	r3, 800c5ac <_puts_r+0x10>
 800c5a8:	f7ff ffb0 	bl	800c50c <__sinit>
 800c5ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ae:	07db      	lsls	r3, r3, #31
 800c5b0:	d405      	bmi.n	800c5be <_puts_r+0x22>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	0598      	lsls	r0, r3, #22
 800c5b6:	d402      	bmi.n	800c5be <_puts_r+0x22>
 800c5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5ba:	f000 f9e0 	bl	800c97e <__retarget_lock_acquire_recursive>
 800c5be:	89a3      	ldrh	r3, [r4, #12]
 800c5c0:	0719      	lsls	r1, r3, #28
 800c5c2:	d513      	bpl.n	800c5ec <_puts_r+0x50>
 800c5c4:	6923      	ldr	r3, [r4, #16]
 800c5c6:	b18b      	cbz	r3, 800c5ec <_puts_r+0x50>
 800c5c8:	3e01      	subs	r6, #1
 800c5ca:	68a3      	ldr	r3, [r4, #8]
 800c5cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	60a3      	str	r3, [r4, #8]
 800c5d4:	b9e9      	cbnz	r1, 800c612 <_puts_r+0x76>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	da2e      	bge.n	800c638 <_puts_r+0x9c>
 800c5da:	4622      	mov	r2, r4
 800c5dc:	210a      	movs	r1, #10
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f000 f8af 	bl	800c742 <__swbuf_r>
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d007      	beq.n	800c5f8 <_puts_r+0x5c>
 800c5e8:	250a      	movs	r5, #10
 800c5ea:	e007      	b.n	800c5fc <_puts_r+0x60>
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f000 f8e4 	bl	800c7bc <__swsetup_r>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d0e7      	beq.n	800c5c8 <_puts_r+0x2c>
 800c5f8:	f04f 35ff 	mov.w	r5, #4294967295
 800c5fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5fe:	07da      	lsls	r2, r3, #31
 800c600:	d405      	bmi.n	800c60e <_puts_r+0x72>
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	059b      	lsls	r3, r3, #22
 800c606:	d402      	bmi.n	800c60e <_puts_r+0x72>
 800c608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c60a:	f000 f9b9 	bl	800c980 <__retarget_lock_release_recursive>
 800c60e:	4628      	mov	r0, r5
 800c610:	bd70      	pop	{r4, r5, r6, pc}
 800c612:	2b00      	cmp	r3, #0
 800c614:	da04      	bge.n	800c620 <_puts_r+0x84>
 800c616:	69a2      	ldr	r2, [r4, #24]
 800c618:	429a      	cmp	r2, r3
 800c61a:	dc06      	bgt.n	800c62a <_puts_r+0x8e>
 800c61c:	290a      	cmp	r1, #10
 800c61e:	d004      	beq.n	800c62a <_puts_r+0x8e>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	6022      	str	r2, [r4, #0]
 800c626:	7019      	strb	r1, [r3, #0]
 800c628:	e7cf      	b.n	800c5ca <_puts_r+0x2e>
 800c62a:	4622      	mov	r2, r4
 800c62c:	4628      	mov	r0, r5
 800c62e:	f000 f888 	bl	800c742 <__swbuf_r>
 800c632:	3001      	adds	r0, #1
 800c634:	d1c9      	bne.n	800c5ca <_puts_r+0x2e>
 800c636:	e7df      	b.n	800c5f8 <_puts_r+0x5c>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	250a      	movs	r5, #10
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	6022      	str	r2, [r4, #0]
 800c640:	701d      	strb	r5, [r3, #0]
 800c642:	e7db      	b.n	800c5fc <_puts_r+0x60>

0800c644 <puts>:
 800c644:	4b02      	ldr	r3, [pc, #8]	; (800c650 <puts+0xc>)
 800c646:	4601      	mov	r1, r0
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	f7ff bfa7 	b.w	800c59c <_puts_r>
 800c64e:	bf00      	nop
 800c650:	2000007c 	.word	0x2000007c

0800c654 <sniprintf>:
 800c654:	b40c      	push	{r2, r3}
 800c656:	b530      	push	{r4, r5, lr}
 800c658:	4b17      	ldr	r3, [pc, #92]	; (800c6b8 <sniprintf+0x64>)
 800c65a:	1e0c      	subs	r4, r1, #0
 800c65c:	681d      	ldr	r5, [r3, #0]
 800c65e:	b09d      	sub	sp, #116	; 0x74
 800c660:	da08      	bge.n	800c674 <sniprintf+0x20>
 800c662:	238b      	movs	r3, #139	; 0x8b
 800c664:	602b      	str	r3, [r5, #0]
 800c666:	f04f 30ff 	mov.w	r0, #4294967295
 800c66a:	b01d      	add	sp, #116	; 0x74
 800c66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c670:	b002      	add	sp, #8
 800c672:	4770      	bx	lr
 800c674:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c678:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c67c:	bf14      	ite	ne
 800c67e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c682:	4623      	moveq	r3, r4
 800c684:	9304      	str	r3, [sp, #16]
 800c686:	9307      	str	r3, [sp, #28]
 800c688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c68c:	9002      	str	r0, [sp, #8]
 800c68e:	9006      	str	r0, [sp, #24]
 800c690:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c694:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c696:	ab21      	add	r3, sp, #132	; 0x84
 800c698:	a902      	add	r1, sp, #8
 800c69a:	4628      	mov	r0, r5
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	f000 fa25 	bl	800caec <_svfiprintf_r>
 800c6a2:	1c43      	adds	r3, r0, #1
 800c6a4:	bfbc      	itt	lt
 800c6a6:	238b      	movlt	r3, #139	; 0x8b
 800c6a8:	602b      	strlt	r3, [r5, #0]
 800c6aa:	2c00      	cmp	r4, #0
 800c6ac:	d0dd      	beq.n	800c66a <sniprintf+0x16>
 800c6ae:	9b02      	ldr	r3, [sp, #8]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	701a      	strb	r2, [r3, #0]
 800c6b4:	e7d9      	b.n	800c66a <sniprintf+0x16>
 800c6b6:	bf00      	nop
 800c6b8:	2000007c 	.word	0x2000007c

0800c6bc <__sread>:
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	460c      	mov	r4, r1
 800c6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c4:	f000 f8fc 	bl	800c8c0 <_read_r>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	bfab      	itete	ge
 800c6cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c6d0:	181b      	addge	r3, r3, r0
 800c6d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6d6:	bfac      	ite	ge
 800c6d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6da:	81a3      	strhlt	r3, [r4, #12]
 800c6dc:	bd10      	pop	{r4, pc}

0800c6de <__swrite>:
 800c6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e2:	461f      	mov	r7, r3
 800c6e4:	898b      	ldrh	r3, [r1, #12]
 800c6e6:	05db      	lsls	r3, r3, #23
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	4616      	mov	r6, r2
 800c6ee:	d505      	bpl.n	800c6fc <__swrite+0x1e>
 800c6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f000 f8d0 	bl	800c89c <_lseek_r>
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	4632      	mov	r2, r6
 800c70a:	463b      	mov	r3, r7
 800c70c:	4628      	mov	r0, r5
 800c70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c712:	f000 b8f7 	b.w	800c904 <_write_r>

0800c716 <__sseek>:
 800c716:	b510      	push	{r4, lr}
 800c718:	460c      	mov	r4, r1
 800c71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71e:	f000 f8bd 	bl	800c89c <_lseek_r>
 800c722:	1c43      	adds	r3, r0, #1
 800c724:	89a3      	ldrh	r3, [r4, #12]
 800c726:	bf15      	itete	ne
 800c728:	6560      	strne	r0, [r4, #84]	; 0x54
 800c72a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c72e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c732:	81a3      	strheq	r3, [r4, #12]
 800c734:	bf18      	it	ne
 800c736:	81a3      	strhne	r3, [r4, #12]
 800c738:	bd10      	pop	{r4, pc}

0800c73a <__sclose>:
 800c73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73e:	f000 b89d 	b.w	800c87c <_close_r>

0800c742 <__swbuf_r>:
 800c742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c744:	460e      	mov	r6, r1
 800c746:	4614      	mov	r4, r2
 800c748:	4605      	mov	r5, r0
 800c74a:	b118      	cbz	r0, 800c754 <__swbuf_r+0x12>
 800c74c:	6a03      	ldr	r3, [r0, #32]
 800c74e:	b90b      	cbnz	r3, 800c754 <__swbuf_r+0x12>
 800c750:	f7ff fedc 	bl	800c50c <__sinit>
 800c754:	69a3      	ldr	r3, [r4, #24]
 800c756:	60a3      	str	r3, [r4, #8]
 800c758:	89a3      	ldrh	r3, [r4, #12]
 800c75a:	071a      	lsls	r2, r3, #28
 800c75c:	d525      	bpl.n	800c7aa <__swbuf_r+0x68>
 800c75e:	6923      	ldr	r3, [r4, #16]
 800c760:	b31b      	cbz	r3, 800c7aa <__swbuf_r+0x68>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	1a98      	subs	r0, r3, r2
 800c768:	6963      	ldr	r3, [r4, #20]
 800c76a:	b2f6      	uxtb	r6, r6
 800c76c:	4283      	cmp	r3, r0
 800c76e:	4637      	mov	r7, r6
 800c770:	dc04      	bgt.n	800c77c <__swbuf_r+0x3a>
 800c772:	4621      	mov	r1, r4
 800c774:	4628      	mov	r0, r5
 800c776:	f000 fe11 	bl	800d39c <_fflush_r>
 800c77a:	b9e0      	cbnz	r0, 800c7b6 <__swbuf_r+0x74>
 800c77c:	68a3      	ldr	r3, [r4, #8]
 800c77e:	3b01      	subs	r3, #1
 800c780:	60a3      	str	r3, [r4, #8]
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	6022      	str	r2, [r4, #0]
 800c788:	701e      	strb	r6, [r3, #0]
 800c78a:	6962      	ldr	r2, [r4, #20]
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	429a      	cmp	r2, r3
 800c790:	d004      	beq.n	800c79c <__swbuf_r+0x5a>
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	07db      	lsls	r3, r3, #31
 800c796:	d506      	bpl.n	800c7a6 <__swbuf_r+0x64>
 800c798:	2e0a      	cmp	r6, #10
 800c79a:	d104      	bne.n	800c7a6 <__swbuf_r+0x64>
 800c79c:	4621      	mov	r1, r4
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f000 fdfc 	bl	800d39c <_fflush_r>
 800c7a4:	b938      	cbnz	r0, 800c7b6 <__swbuf_r+0x74>
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f000 f805 	bl	800c7bc <__swsetup_r>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d0d5      	beq.n	800c762 <__swbuf_r+0x20>
 800c7b6:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ba:	e7f4      	b.n	800c7a6 <__swbuf_r+0x64>

0800c7bc <__swsetup_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4b2a      	ldr	r3, [pc, #168]	; (800c868 <__swsetup_r+0xac>)
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	6818      	ldr	r0, [r3, #0]
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	b118      	cbz	r0, 800c7d0 <__swsetup_r+0x14>
 800c7c8:	6a03      	ldr	r3, [r0, #32]
 800c7ca:	b90b      	cbnz	r3, 800c7d0 <__swsetup_r+0x14>
 800c7cc:	f7ff fe9e 	bl	800c50c <__sinit>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7d6:	0718      	lsls	r0, r3, #28
 800c7d8:	d422      	bmi.n	800c820 <__swsetup_r+0x64>
 800c7da:	06d9      	lsls	r1, r3, #27
 800c7dc:	d407      	bmi.n	800c7ee <__swsetup_r+0x32>
 800c7de:	2309      	movs	r3, #9
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7e6:	81a3      	strh	r3, [r4, #12]
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	e034      	b.n	800c858 <__swsetup_r+0x9c>
 800c7ee:	0758      	lsls	r0, r3, #29
 800c7f0:	d512      	bpl.n	800c818 <__swsetup_r+0x5c>
 800c7f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7f4:	b141      	cbz	r1, 800c808 <__swsetup_r+0x4c>
 800c7f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fa:	4299      	cmp	r1, r3
 800c7fc:	d002      	beq.n	800c804 <__swsetup_r+0x48>
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 f8ce 	bl	800c9a0 <_free_r>
 800c804:	2300      	movs	r3, #0
 800c806:	6363      	str	r3, [r4, #52]	; 0x34
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c80e:	81a3      	strh	r3, [r4, #12]
 800c810:	2300      	movs	r3, #0
 800c812:	6063      	str	r3, [r4, #4]
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	f043 0308 	orr.w	r3, r3, #8
 800c81e:	81a3      	strh	r3, [r4, #12]
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	b94b      	cbnz	r3, 800c838 <__swsetup_r+0x7c>
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c82a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c82e:	d003      	beq.n	800c838 <__swsetup_r+0x7c>
 800c830:	4621      	mov	r1, r4
 800c832:	4628      	mov	r0, r5
 800c834:	f000 fe00 	bl	800d438 <__smakebuf_r>
 800c838:	89a0      	ldrh	r0, [r4, #12]
 800c83a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c83e:	f010 0301 	ands.w	r3, r0, #1
 800c842:	d00a      	beq.n	800c85a <__swsetup_r+0x9e>
 800c844:	2300      	movs	r3, #0
 800c846:	60a3      	str	r3, [r4, #8]
 800c848:	6963      	ldr	r3, [r4, #20]
 800c84a:	425b      	negs	r3, r3
 800c84c:	61a3      	str	r3, [r4, #24]
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	b943      	cbnz	r3, 800c864 <__swsetup_r+0xa8>
 800c852:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c856:	d1c4      	bne.n	800c7e2 <__swsetup_r+0x26>
 800c858:	bd38      	pop	{r3, r4, r5, pc}
 800c85a:	0781      	lsls	r1, r0, #30
 800c85c:	bf58      	it	pl
 800c85e:	6963      	ldrpl	r3, [r4, #20]
 800c860:	60a3      	str	r3, [r4, #8]
 800c862:	e7f4      	b.n	800c84e <__swsetup_r+0x92>
 800c864:	2000      	movs	r0, #0
 800c866:	e7f7      	b.n	800c858 <__swsetup_r+0x9c>
 800c868:	2000007c 	.word	0x2000007c

0800c86c <memset>:
 800c86c:	4402      	add	r2, r0
 800c86e:	4603      	mov	r3, r0
 800c870:	4293      	cmp	r3, r2
 800c872:	d100      	bne.n	800c876 <memset+0xa>
 800c874:	4770      	bx	lr
 800c876:	f803 1b01 	strb.w	r1, [r3], #1
 800c87a:	e7f9      	b.n	800c870 <memset+0x4>

0800c87c <_close_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4d06      	ldr	r5, [pc, #24]	; (800c898 <_close_r+0x1c>)
 800c880:	2300      	movs	r3, #0
 800c882:	4604      	mov	r4, r0
 800c884:	4608      	mov	r0, r1
 800c886:	602b      	str	r3, [r5, #0]
 800c888:	f7f4 f90d 	bl	8000aa6 <_close>
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	d102      	bne.n	800c896 <_close_r+0x1a>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	b103      	cbz	r3, 800c896 <_close_r+0x1a>
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	bd38      	pop	{r3, r4, r5, pc}
 800c898:	20006e0c 	.word	0x20006e0c

0800c89c <_lseek_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4d07      	ldr	r5, [pc, #28]	; (800c8bc <_lseek_r+0x20>)
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	4608      	mov	r0, r1
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	602a      	str	r2, [r5, #0]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f7f4 f922 	bl	8000af4 <_lseek>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d102      	bne.n	800c8ba <_lseek_r+0x1e>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b103      	cbz	r3, 800c8ba <_lseek_r+0x1e>
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	20006e0c 	.word	0x20006e0c

0800c8c0 <_read_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4d07      	ldr	r5, [pc, #28]	; (800c8e0 <_read_r+0x20>)
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	4608      	mov	r0, r1
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	602a      	str	r2, [r5, #0]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	f7f4 f8cc 	bl	8000a6c <_read>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_read_r+0x1e>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_read_r+0x1e>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	20006e0c 	.word	0x20006e0c

0800c8e4 <_sbrk_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d06      	ldr	r5, [pc, #24]	; (800c900 <_sbrk_r+0x1c>)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f7f4 f90e 	bl	8000b10 <_sbrk>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_sbrk_r+0x1a>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_sbrk_r+0x1a>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	20006e0c 	.word	0x20006e0c

0800c904 <_write_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4d07      	ldr	r5, [pc, #28]	; (800c924 <_write_r+0x20>)
 800c908:	4604      	mov	r4, r0
 800c90a:	4608      	mov	r0, r1
 800c90c:	4611      	mov	r1, r2
 800c90e:	2200      	movs	r2, #0
 800c910:	602a      	str	r2, [r5, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	f7f3 feec 	bl	80006f0 <_write>
 800c918:	1c43      	adds	r3, r0, #1
 800c91a:	d102      	bne.n	800c922 <_write_r+0x1e>
 800c91c:	682b      	ldr	r3, [r5, #0]
 800c91e:	b103      	cbz	r3, 800c922 <_write_r+0x1e>
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	20006e0c 	.word	0x20006e0c

0800c928 <__errno>:
 800c928:	4b01      	ldr	r3, [pc, #4]	; (800c930 <__errno+0x8>)
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	2000007c 	.word	0x2000007c

0800c934 <__libc_init_array>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	4d0d      	ldr	r5, [pc, #52]	; (800c96c <__libc_init_array+0x38>)
 800c938:	4c0d      	ldr	r4, [pc, #52]	; (800c970 <__libc_init_array+0x3c>)
 800c93a:	1b64      	subs	r4, r4, r5
 800c93c:	10a4      	asrs	r4, r4, #2
 800c93e:	2600      	movs	r6, #0
 800c940:	42a6      	cmp	r6, r4
 800c942:	d109      	bne.n	800c958 <__libc_init_array+0x24>
 800c944:	4d0b      	ldr	r5, [pc, #44]	; (800c974 <__libc_init_array+0x40>)
 800c946:	4c0c      	ldr	r4, [pc, #48]	; (800c978 <__libc_init_array+0x44>)
 800c948:	f000 fe26 	bl	800d598 <_init>
 800c94c:	1b64      	subs	r4, r4, r5
 800c94e:	10a4      	asrs	r4, r4, #2
 800c950:	2600      	movs	r6, #0
 800c952:	42a6      	cmp	r6, r4
 800c954:	d105      	bne.n	800c962 <__libc_init_array+0x2e>
 800c956:	bd70      	pop	{r4, r5, r6, pc}
 800c958:	f855 3b04 	ldr.w	r3, [r5], #4
 800c95c:	4798      	blx	r3
 800c95e:	3601      	adds	r6, #1
 800c960:	e7ee      	b.n	800c940 <__libc_init_array+0xc>
 800c962:	f855 3b04 	ldr.w	r3, [r5], #4
 800c966:	4798      	blx	r3
 800c968:	3601      	adds	r6, #1
 800c96a:	e7f2      	b.n	800c952 <__libc_init_array+0x1e>
 800c96c:	0800e074 	.word	0x0800e074
 800c970:	0800e074 	.word	0x0800e074
 800c974:	0800e074 	.word	0x0800e074
 800c978:	0800e078 	.word	0x0800e078

0800c97c <__retarget_lock_init_recursive>:
 800c97c:	4770      	bx	lr

0800c97e <__retarget_lock_acquire_recursive>:
 800c97e:	4770      	bx	lr

0800c980 <__retarget_lock_release_recursive>:
 800c980:	4770      	bx	lr

0800c982 <memcpy>:
 800c982:	440a      	add	r2, r1
 800c984:	4291      	cmp	r1, r2
 800c986:	f100 33ff 	add.w	r3, r0, #4294967295
 800c98a:	d100      	bne.n	800c98e <memcpy+0xc>
 800c98c:	4770      	bx	lr
 800c98e:	b510      	push	{r4, lr}
 800c990:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c994:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c998:	4291      	cmp	r1, r2
 800c99a:	d1f9      	bne.n	800c990 <memcpy+0xe>
 800c99c:	bd10      	pop	{r4, pc}
	...

0800c9a0 <_free_r>:
 800c9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9a2:	2900      	cmp	r1, #0
 800c9a4:	d044      	beq.n	800ca30 <_free_r+0x90>
 800c9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9aa:	9001      	str	r0, [sp, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f1a1 0404 	sub.w	r4, r1, #4
 800c9b2:	bfb8      	it	lt
 800c9b4:	18e4      	addlt	r4, r4, r3
 800c9b6:	f7ff fd11 	bl	800c3dc <__malloc_lock>
 800c9ba:	4a1e      	ldr	r2, [pc, #120]	; (800ca34 <_free_r+0x94>)
 800c9bc:	9801      	ldr	r0, [sp, #4]
 800c9be:	6813      	ldr	r3, [r2, #0]
 800c9c0:	b933      	cbnz	r3, 800c9d0 <_free_r+0x30>
 800c9c2:	6063      	str	r3, [r4, #4]
 800c9c4:	6014      	str	r4, [r2, #0]
 800c9c6:	b003      	add	sp, #12
 800c9c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9cc:	f7ff bd0c 	b.w	800c3e8 <__malloc_unlock>
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	d908      	bls.n	800c9e6 <_free_r+0x46>
 800c9d4:	6825      	ldr	r5, [r4, #0]
 800c9d6:	1961      	adds	r1, r4, r5
 800c9d8:	428b      	cmp	r3, r1
 800c9da:	bf01      	itttt	eq
 800c9dc:	6819      	ldreq	r1, [r3, #0]
 800c9de:	685b      	ldreq	r3, [r3, #4]
 800c9e0:	1949      	addeq	r1, r1, r5
 800c9e2:	6021      	streq	r1, [r4, #0]
 800c9e4:	e7ed      	b.n	800c9c2 <_free_r+0x22>
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	b10b      	cbz	r3, 800c9f0 <_free_r+0x50>
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	d9fa      	bls.n	800c9e6 <_free_r+0x46>
 800c9f0:	6811      	ldr	r1, [r2, #0]
 800c9f2:	1855      	adds	r5, r2, r1
 800c9f4:	42a5      	cmp	r5, r4
 800c9f6:	d10b      	bne.n	800ca10 <_free_r+0x70>
 800c9f8:	6824      	ldr	r4, [r4, #0]
 800c9fa:	4421      	add	r1, r4
 800c9fc:	1854      	adds	r4, r2, r1
 800c9fe:	42a3      	cmp	r3, r4
 800ca00:	6011      	str	r1, [r2, #0]
 800ca02:	d1e0      	bne.n	800c9c6 <_free_r+0x26>
 800ca04:	681c      	ldr	r4, [r3, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	6053      	str	r3, [r2, #4]
 800ca0a:	440c      	add	r4, r1
 800ca0c:	6014      	str	r4, [r2, #0]
 800ca0e:	e7da      	b.n	800c9c6 <_free_r+0x26>
 800ca10:	d902      	bls.n	800ca18 <_free_r+0x78>
 800ca12:	230c      	movs	r3, #12
 800ca14:	6003      	str	r3, [r0, #0]
 800ca16:	e7d6      	b.n	800c9c6 <_free_r+0x26>
 800ca18:	6825      	ldr	r5, [r4, #0]
 800ca1a:	1961      	adds	r1, r4, r5
 800ca1c:	428b      	cmp	r3, r1
 800ca1e:	bf04      	itt	eq
 800ca20:	6819      	ldreq	r1, [r3, #0]
 800ca22:	685b      	ldreq	r3, [r3, #4]
 800ca24:	6063      	str	r3, [r4, #4]
 800ca26:	bf04      	itt	eq
 800ca28:	1949      	addeq	r1, r1, r5
 800ca2a:	6021      	streq	r1, [r4, #0]
 800ca2c:	6054      	str	r4, [r2, #4]
 800ca2e:	e7ca      	b.n	800c9c6 <_free_r+0x26>
 800ca30:	b003      	add	sp, #12
 800ca32:	bd30      	pop	{r4, r5, pc}
 800ca34:	20006cc8 	.word	0x20006cc8

0800ca38 <__ssputs_r>:
 800ca38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca3c:	688e      	ldr	r6, [r1, #8]
 800ca3e:	461f      	mov	r7, r3
 800ca40:	42be      	cmp	r6, r7
 800ca42:	680b      	ldr	r3, [r1, #0]
 800ca44:	4682      	mov	sl, r0
 800ca46:	460c      	mov	r4, r1
 800ca48:	4690      	mov	r8, r2
 800ca4a:	d82c      	bhi.n	800caa6 <__ssputs_r+0x6e>
 800ca4c:	898a      	ldrh	r2, [r1, #12]
 800ca4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca52:	d026      	beq.n	800caa2 <__ssputs_r+0x6a>
 800ca54:	6965      	ldr	r5, [r4, #20]
 800ca56:	6909      	ldr	r1, [r1, #16]
 800ca58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca5c:	eba3 0901 	sub.w	r9, r3, r1
 800ca60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca64:	1c7b      	adds	r3, r7, #1
 800ca66:	444b      	add	r3, r9
 800ca68:	106d      	asrs	r5, r5, #1
 800ca6a:	429d      	cmp	r5, r3
 800ca6c:	bf38      	it	cc
 800ca6e:	461d      	movcc	r5, r3
 800ca70:	0553      	lsls	r3, r2, #21
 800ca72:	d527      	bpl.n	800cac4 <__ssputs_r+0x8c>
 800ca74:	4629      	mov	r1, r5
 800ca76:	f7ff fc31 	bl	800c2dc <_malloc_r>
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	b360      	cbz	r0, 800cad8 <__ssputs_r+0xa0>
 800ca7e:	6921      	ldr	r1, [r4, #16]
 800ca80:	464a      	mov	r2, r9
 800ca82:	f7ff ff7e 	bl	800c982 <memcpy>
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	6126      	str	r6, [r4, #16]
 800ca94:	6165      	str	r5, [r4, #20]
 800ca96:	444e      	add	r6, r9
 800ca98:	eba5 0509 	sub.w	r5, r5, r9
 800ca9c:	6026      	str	r6, [r4, #0]
 800ca9e:	60a5      	str	r5, [r4, #8]
 800caa0:	463e      	mov	r6, r7
 800caa2:	42be      	cmp	r6, r7
 800caa4:	d900      	bls.n	800caa8 <__ssputs_r+0x70>
 800caa6:	463e      	mov	r6, r7
 800caa8:	6820      	ldr	r0, [r4, #0]
 800caaa:	4632      	mov	r2, r6
 800caac:	4641      	mov	r1, r8
 800caae:	f000 fcff 	bl	800d4b0 <memmove>
 800cab2:	68a3      	ldr	r3, [r4, #8]
 800cab4:	1b9b      	subs	r3, r3, r6
 800cab6:	60a3      	str	r3, [r4, #8]
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	4433      	add	r3, r6
 800cabc:	6023      	str	r3, [r4, #0]
 800cabe:	2000      	movs	r0, #0
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	462a      	mov	r2, r5
 800cac6:	f000 fd2f 	bl	800d528 <_realloc_r>
 800caca:	4606      	mov	r6, r0
 800cacc:	2800      	cmp	r0, #0
 800cace:	d1e0      	bne.n	800ca92 <__ssputs_r+0x5a>
 800cad0:	6921      	ldr	r1, [r4, #16]
 800cad2:	4650      	mov	r0, sl
 800cad4:	f7ff ff64 	bl	800c9a0 <_free_r>
 800cad8:	230c      	movs	r3, #12
 800cada:	f8ca 3000 	str.w	r3, [sl]
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae4:	81a3      	strh	r3, [r4, #12]
 800cae6:	f04f 30ff 	mov.w	r0, #4294967295
 800caea:	e7e9      	b.n	800cac0 <__ssputs_r+0x88>

0800caec <_svfiprintf_r>:
 800caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf0:	4698      	mov	r8, r3
 800caf2:	898b      	ldrh	r3, [r1, #12]
 800caf4:	061b      	lsls	r3, r3, #24
 800caf6:	b09d      	sub	sp, #116	; 0x74
 800caf8:	4607      	mov	r7, r0
 800cafa:	460d      	mov	r5, r1
 800cafc:	4614      	mov	r4, r2
 800cafe:	d50e      	bpl.n	800cb1e <_svfiprintf_r+0x32>
 800cb00:	690b      	ldr	r3, [r1, #16]
 800cb02:	b963      	cbnz	r3, 800cb1e <_svfiprintf_r+0x32>
 800cb04:	2140      	movs	r1, #64	; 0x40
 800cb06:	f7ff fbe9 	bl	800c2dc <_malloc_r>
 800cb0a:	6028      	str	r0, [r5, #0]
 800cb0c:	6128      	str	r0, [r5, #16]
 800cb0e:	b920      	cbnz	r0, 800cb1a <_svfiprintf_r+0x2e>
 800cb10:	230c      	movs	r3, #12
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	f04f 30ff 	mov.w	r0, #4294967295
 800cb18:	e0d0      	b.n	800ccbc <_svfiprintf_r+0x1d0>
 800cb1a:	2340      	movs	r3, #64	; 0x40
 800cb1c:	616b      	str	r3, [r5, #20]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9309      	str	r3, [sp, #36]	; 0x24
 800cb22:	2320      	movs	r3, #32
 800cb24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb28:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb2c:	2330      	movs	r3, #48	; 0x30
 800cb2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ccd4 <_svfiprintf_r+0x1e8>
 800cb32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb36:	f04f 0901 	mov.w	r9, #1
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	469a      	mov	sl, r3
 800cb3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb42:	b10a      	cbz	r2, 800cb48 <_svfiprintf_r+0x5c>
 800cb44:	2a25      	cmp	r2, #37	; 0x25
 800cb46:	d1f9      	bne.n	800cb3c <_svfiprintf_r+0x50>
 800cb48:	ebba 0b04 	subs.w	fp, sl, r4
 800cb4c:	d00b      	beq.n	800cb66 <_svfiprintf_r+0x7a>
 800cb4e:	465b      	mov	r3, fp
 800cb50:	4622      	mov	r2, r4
 800cb52:	4629      	mov	r1, r5
 800cb54:	4638      	mov	r0, r7
 800cb56:	f7ff ff6f 	bl	800ca38 <__ssputs_r>
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	f000 80a9 	beq.w	800ccb2 <_svfiprintf_r+0x1c6>
 800cb60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb62:	445a      	add	r2, fp
 800cb64:	9209      	str	r2, [sp, #36]	; 0x24
 800cb66:	f89a 3000 	ldrb.w	r3, [sl]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80a1 	beq.w	800ccb2 <_svfiprintf_r+0x1c6>
 800cb70:	2300      	movs	r3, #0
 800cb72:	f04f 32ff 	mov.w	r2, #4294967295
 800cb76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb7a:	f10a 0a01 	add.w	sl, sl, #1
 800cb7e:	9304      	str	r3, [sp, #16]
 800cb80:	9307      	str	r3, [sp, #28]
 800cb82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb86:	931a      	str	r3, [sp, #104]	; 0x68
 800cb88:	4654      	mov	r4, sl
 800cb8a:	2205      	movs	r2, #5
 800cb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb90:	4850      	ldr	r0, [pc, #320]	; (800ccd4 <_svfiprintf_r+0x1e8>)
 800cb92:	f7f3 fb25 	bl	80001e0 <memchr>
 800cb96:	9a04      	ldr	r2, [sp, #16]
 800cb98:	b9d8      	cbnz	r0, 800cbd2 <_svfiprintf_r+0xe6>
 800cb9a:	06d0      	lsls	r0, r2, #27
 800cb9c:	bf44      	itt	mi
 800cb9e:	2320      	movmi	r3, #32
 800cba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cba4:	0711      	lsls	r1, r2, #28
 800cba6:	bf44      	itt	mi
 800cba8:	232b      	movmi	r3, #43	; 0x2b
 800cbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbae:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb2:	2b2a      	cmp	r3, #42	; 0x2a
 800cbb4:	d015      	beq.n	800cbe2 <_svfiprintf_r+0xf6>
 800cbb6:	9a07      	ldr	r2, [sp, #28]
 800cbb8:	4654      	mov	r4, sl
 800cbba:	2000      	movs	r0, #0
 800cbbc:	f04f 0c0a 	mov.w	ip, #10
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbc6:	3b30      	subs	r3, #48	; 0x30
 800cbc8:	2b09      	cmp	r3, #9
 800cbca:	d94d      	bls.n	800cc68 <_svfiprintf_r+0x17c>
 800cbcc:	b1b0      	cbz	r0, 800cbfc <_svfiprintf_r+0x110>
 800cbce:	9207      	str	r2, [sp, #28]
 800cbd0:	e014      	b.n	800cbfc <_svfiprintf_r+0x110>
 800cbd2:	eba0 0308 	sub.w	r3, r0, r8
 800cbd6:	fa09 f303 	lsl.w	r3, r9, r3
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	9304      	str	r3, [sp, #16]
 800cbde:	46a2      	mov	sl, r4
 800cbe0:	e7d2      	b.n	800cb88 <_svfiprintf_r+0x9c>
 800cbe2:	9b03      	ldr	r3, [sp, #12]
 800cbe4:	1d19      	adds	r1, r3, #4
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	9103      	str	r1, [sp, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	bfbb      	ittet	lt
 800cbee:	425b      	neglt	r3, r3
 800cbf0:	f042 0202 	orrlt.w	r2, r2, #2
 800cbf4:	9307      	strge	r3, [sp, #28]
 800cbf6:	9307      	strlt	r3, [sp, #28]
 800cbf8:	bfb8      	it	lt
 800cbfa:	9204      	strlt	r2, [sp, #16]
 800cbfc:	7823      	ldrb	r3, [r4, #0]
 800cbfe:	2b2e      	cmp	r3, #46	; 0x2e
 800cc00:	d10c      	bne.n	800cc1c <_svfiprintf_r+0x130>
 800cc02:	7863      	ldrb	r3, [r4, #1]
 800cc04:	2b2a      	cmp	r3, #42	; 0x2a
 800cc06:	d134      	bne.n	800cc72 <_svfiprintf_r+0x186>
 800cc08:	9b03      	ldr	r3, [sp, #12]
 800cc0a:	1d1a      	adds	r2, r3, #4
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	9203      	str	r2, [sp, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	bfb8      	it	lt
 800cc14:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc18:	3402      	adds	r4, #2
 800cc1a:	9305      	str	r3, [sp, #20]
 800cc1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cce4 <_svfiprintf_r+0x1f8>
 800cc20:	7821      	ldrb	r1, [r4, #0]
 800cc22:	2203      	movs	r2, #3
 800cc24:	4650      	mov	r0, sl
 800cc26:	f7f3 fadb 	bl	80001e0 <memchr>
 800cc2a:	b138      	cbz	r0, 800cc3c <_svfiprintf_r+0x150>
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	eba0 000a 	sub.w	r0, r0, sl
 800cc32:	2240      	movs	r2, #64	; 0x40
 800cc34:	4082      	lsls	r2, r0
 800cc36:	4313      	orrs	r3, r2
 800cc38:	3401      	adds	r4, #1
 800cc3a:	9304      	str	r3, [sp, #16]
 800cc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc40:	4825      	ldr	r0, [pc, #148]	; (800ccd8 <_svfiprintf_r+0x1ec>)
 800cc42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc46:	2206      	movs	r2, #6
 800cc48:	f7f3 faca 	bl	80001e0 <memchr>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d038      	beq.n	800ccc2 <_svfiprintf_r+0x1d6>
 800cc50:	4b22      	ldr	r3, [pc, #136]	; (800ccdc <_svfiprintf_r+0x1f0>)
 800cc52:	bb1b      	cbnz	r3, 800cc9c <_svfiprintf_r+0x1b0>
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	3307      	adds	r3, #7
 800cc58:	f023 0307 	bic.w	r3, r3, #7
 800cc5c:	3308      	adds	r3, #8
 800cc5e:	9303      	str	r3, [sp, #12]
 800cc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc62:	4433      	add	r3, r6
 800cc64:	9309      	str	r3, [sp, #36]	; 0x24
 800cc66:	e768      	b.n	800cb3a <_svfiprintf_r+0x4e>
 800cc68:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	2001      	movs	r0, #1
 800cc70:	e7a6      	b.n	800cbc0 <_svfiprintf_r+0xd4>
 800cc72:	2300      	movs	r3, #0
 800cc74:	3401      	adds	r4, #1
 800cc76:	9305      	str	r3, [sp, #20]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	f04f 0c0a 	mov.w	ip, #10
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc84:	3a30      	subs	r2, #48	; 0x30
 800cc86:	2a09      	cmp	r2, #9
 800cc88:	d903      	bls.n	800cc92 <_svfiprintf_r+0x1a6>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0c6      	beq.n	800cc1c <_svfiprintf_r+0x130>
 800cc8e:	9105      	str	r1, [sp, #20]
 800cc90:	e7c4      	b.n	800cc1c <_svfiprintf_r+0x130>
 800cc92:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc96:	4604      	mov	r4, r0
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e7f0      	b.n	800cc7e <_svfiprintf_r+0x192>
 800cc9c:	ab03      	add	r3, sp, #12
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	462a      	mov	r2, r5
 800cca2:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <_svfiprintf_r+0x1f4>)
 800cca4:	a904      	add	r1, sp, #16
 800cca6:	4638      	mov	r0, r7
 800cca8:	f3af 8000 	nop.w
 800ccac:	1c42      	adds	r2, r0, #1
 800ccae:	4606      	mov	r6, r0
 800ccb0:	d1d6      	bne.n	800cc60 <_svfiprintf_r+0x174>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	065b      	lsls	r3, r3, #25
 800ccb6:	f53f af2d 	bmi.w	800cb14 <_svfiprintf_r+0x28>
 800ccba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccbc:	b01d      	add	sp, #116	; 0x74
 800ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc2:	ab03      	add	r3, sp, #12
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	462a      	mov	r2, r5
 800ccc8:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <_svfiprintf_r+0x1f4>)
 800ccca:	a904      	add	r1, sp, #16
 800cccc:	4638      	mov	r0, r7
 800ccce:	f000 f9bd 	bl	800d04c <_printf_i>
 800ccd2:	e7eb      	b.n	800ccac <_svfiprintf_r+0x1c0>
 800ccd4:	0800e038 	.word	0x0800e038
 800ccd8:	0800e042 	.word	0x0800e042
 800ccdc:	00000000 	.word	0x00000000
 800cce0:	0800ca39 	.word	0x0800ca39
 800cce4:	0800e03e 	.word	0x0800e03e

0800cce8 <__sfputc_r>:
 800cce8:	6893      	ldr	r3, [r2, #8]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	b410      	push	{r4}
 800ccf0:	6093      	str	r3, [r2, #8]
 800ccf2:	da08      	bge.n	800cd06 <__sfputc_r+0x1e>
 800ccf4:	6994      	ldr	r4, [r2, #24]
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	db01      	blt.n	800ccfe <__sfputc_r+0x16>
 800ccfa:	290a      	cmp	r1, #10
 800ccfc:	d103      	bne.n	800cd06 <__sfputc_r+0x1e>
 800ccfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd02:	f7ff bd1e 	b.w	800c742 <__swbuf_r>
 800cd06:	6813      	ldr	r3, [r2, #0]
 800cd08:	1c58      	adds	r0, r3, #1
 800cd0a:	6010      	str	r0, [r2, #0]
 800cd0c:	7019      	strb	r1, [r3, #0]
 800cd0e:	4608      	mov	r0, r1
 800cd10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <__sfputs_r>:
 800cd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd18:	4606      	mov	r6, r0
 800cd1a:	460f      	mov	r7, r1
 800cd1c:	4614      	mov	r4, r2
 800cd1e:	18d5      	adds	r5, r2, r3
 800cd20:	42ac      	cmp	r4, r5
 800cd22:	d101      	bne.n	800cd28 <__sfputs_r+0x12>
 800cd24:	2000      	movs	r0, #0
 800cd26:	e007      	b.n	800cd38 <__sfputs_r+0x22>
 800cd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd2c:	463a      	mov	r2, r7
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7ff ffda 	bl	800cce8 <__sfputc_r>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d1f3      	bne.n	800cd20 <__sfputs_r+0xa>
 800cd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd3c <_vfiprintf_r>:
 800cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	460d      	mov	r5, r1
 800cd42:	b09d      	sub	sp, #116	; 0x74
 800cd44:	4614      	mov	r4, r2
 800cd46:	4698      	mov	r8, r3
 800cd48:	4606      	mov	r6, r0
 800cd4a:	b118      	cbz	r0, 800cd54 <_vfiprintf_r+0x18>
 800cd4c:	6a03      	ldr	r3, [r0, #32]
 800cd4e:	b90b      	cbnz	r3, 800cd54 <_vfiprintf_r+0x18>
 800cd50:	f7ff fbdc 	bl	800c50c <__sinit>
 800cd54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd56:	07d9      	lsls	r1, r3, #31
 800cd58:	d405      	bmi.n	800cd66 <_vfiprintf_r+0x2a>
 800cd5a:	89ab      	ldrh	r3, [r5, #12]
 800cd5c:	059a      	lsls	r2, r3, #22
 800cd5e:	d402      	bmi.n	800cd66 <_vfiprintf_r+0x2a>
 800cd60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd62:	f7ff fe0c 	bl	800c97e <__retarget_lock_acquire_recursive>
 800cd66:	89ab      	ldrh	r3, [r5, #12]
 800cd68:	071b      	lsls	r3, r3, #28
 800cd6a:	d501      	bpl.n	800cd70 <_vfiprintf_r+0x34>
 800cd6c:	692b      	ldr	r3, [r5, #16]
 800cd6e:	b99b      	cbnz	r3, 800cd98 <_vfiprintf_r+0x5c>
 800cd70:	4629      	mov	r1, r5
 800cd72:	4630      	mov	r0, r6
 800cd74:	f7ff fd22 	bl	800c7bc <__swsetup_r>
 800cd78:	b170      	cbz	r0, 800cd98 <_vfiprintf_r+0x5c>
 800cd7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd7c:	07dc      	lsls	r4, r3, #31
 800cd7e:	d504      	bpl.n	800cd8a <_vfiprintf_r+0x4e>
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	b01d      	add	sp, #116	; 0x74
 800cd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd8a:	89ab      	ldrh	r3, [r5, #12]
 800cd8c:	0598      	lsls	r0, r3, #22
 800cd8e:	d4f7      	bmi.n	800cd80 <_vfiprintf_r+0x44>
 800cd90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd92:	f7ff fdf5 	bl	800c980 <__retarget_lock_release_recursive>
 800cd96:	e7f3      	b.n	800cd80 <_vfiprintf_r+0x44>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd9c:	2320      	movs	r3, #32
 800cd9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cda2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cda6:	2330      	movs	r3, #48	; 0x30
 800cda8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cf5c <_vfiprintf_r+0x220>
 800cdac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdb0:	f04f 0901 	mov.w	r9, #1
 800cdb4:	4623      	mov	r3, r4
 800cdb6:	469a      	mov	sl, r3
 800cdb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdbc:	b10a      	cbz	r2, 800cdc2 <_vfiprintf_r+0x86>
 800cdbe:	2a25      	cmp	r2, #37	; 0x25
 800cdc0:	d1f9      	bne.n	800cdb6 <_vfiprintf_r+0x7a>
 800cdc2:	ebba 0b04 	subs.w	fp, sl, r4
 800cdc6:	d00b      	beq.n	800cde0 <_vfiprintf_r+0xa4>
 800cdc8:	465b      	mov	r3, fp
 800cdca:	4622      	mov	r2, r4
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7ff ffa1 	bl	800cd16 <__sfputs_r>
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	f000 80a9 	beq.w	800cf2c <_vfiprintf_r+0x1f0>
 800cdda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cddc:	445a      	add	r2, fp
 800cdde:	9209      	str	r2, [sp, #36]	; 0x24
 800cde0:	f89a 3000 	ldrb.w	r3, [sl]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 80a1 	beq.w	800cf2c <_vfiprintf_r+0x1f0>
 800cdea:	2300      	movs	r3, #0
 800cdec:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdf4:	f10a 0a01 	add.w	sl, sl, #1
 800cdf8:	9304      	str	r3, [sp, #16]
 800cdfa:	9307      	str	r3, [sp, #28]
 800cdfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce00:	931a      	str	r3, [sp, #104]	; 0x68
 800ce02:	4654      	mov	r4, sl
 800ce04:	2205      	movs	r2, #5
 800ce06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce0a:	4854      	ldr	r0, [pc, #336]	; (800cf5c <_vfiprintf_r+0x220>)
 800ce0c:	f7f3 f9e8 	bl	80001e0 <memchr>
 800ce10:	9a04      	ldr	r2, [sp, #16]
 800ce12:	b9d8      	cbnz	r0, 800ce4c <_vfiprintf_r+0x110>
 800ce14:	06d1      	lsls	r1, r2, #27
 800ce16:	bf44      	itt	mi
 800ce18:	2320      	movmi	r3, #32
 800ce1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce1e:	0713      	lsls	r3, r2, #28
 800ce20:	bf44      	itt	mi
 800ce22:	232b      	movmi	r3, #43	; 0x2b
 800ce24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce28:	f89a 3000 	ldrb.w	r3, [sl]
 800ce2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2e:	d015      	beq.n	800ce5c <_vfiprintf_r+0x120>
 800ce30:	9a07      	ldr	r2, [sp, #28]
 800ce32:	4654      	mov	r4, sl
 800ce34:	2000      	movs	r0, #0
 800ce36:	f04f 0c0a 	mov.w	ip, #10
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce40:	3b30      	subs	r3, #48	; 0x30
 800ce42:	2b09      	cmp	r3, #9
 800ce44:	d94d      	bls.n	800cee2 <_vfiprintf_r+0x1a6>
 800ce46:	b1b0      	cbz	r0, 800ce76 <_vfiprintf_r+0x13a>
 800ce48:	9207      	str	r2, [sp, #28]
 800ce4a:	e014      	b.n	800ce76 <_vfiprintf_r+0x13a>
 800ce4c:	eba0 0308 	sub.w	r3, r0, r8
 800ce50:	fa09 f303 	lsl.w	r3, r9, r3
 800ce54:	4313      	orrs	r3, r2
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	46a2      	mov	sl, r4
 800ce5a:	e7d2      	b.n	800ce02 <_vfiprintf_r+0xc6>
 800ce5c:	9b03      	ldr	r3, [sp, #12]
 800ce5e:	1d19      	adds	r1, r3, #4
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	9103      	str	r1, [sp, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	bfbb      	ittet	lt
 800ce68:	425b      	neglt	r3, r3
 800ce6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ce6e:	9307      	strge	r3, [sp, #28]
 800ce70:	9307      	strlt	r3, [sp, #28]
 800ce72:	bfb8      	it	lt
 800ce74:	9204      	strlt	r2, [sp, #16]
 800ce76:	7823      	ldrb	r3, [r4, #0]
 800ce78:	2b2e      	cmp	r3, #46	; 0x2e
 800ce7a:	d10c      	bne.n	800ce96 <_vfiprintf_r+0x15a>
 800ce7c:	7863      	ldrb	r3, [r4, #1]
 800ce7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce80:	d134      	bne.n	800ceec <_vfiprintf_r+0x1b0>
 800ce82:	9b03      	ldr	r3, [sp, #12]
 800ce84:	1d1a      	adds	r2, r3, #4
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	9203      	str	r2, [sp, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	bfb8      	it	lt
 800ce8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce92:	3402      	adds	r4, #2
 800ce94:	9305      	str	r3, [sp, #20]
 800ce96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf6c <_vfiprintf_r+0x230>
 800ce9a:	7821      	ldrb	r1, [r4, #0]
 800ce9c:	2203      	movs	r2, #3
 800ce9e:	4650      	mov	r0, sl
 800cea0:	f7f3 f99e 	bl	80001e0 <memchr>
 800cea4:	b138      	cbz	r0, 800ceb6 <_vfiprintf_r+0x17a>
 800cea6:	9b04      	ldr	r3, [sp, #16]
 800cea8:	eba0 000a 	sub.w	r0, r0, sl
 800ceac:	2240      	movs	r2, #64	; 0x40
 800ceae:	4082      	lsls	r2, r0
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	3401      	adds	r4, #1
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceba:	4829      	ldr	r0, [pc, #164]	; (800cf60 <_vfiprintf_r+0x224>)
 800cebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cec0:	2206      	movs	r2, #6
 800cec2:	f7f3 f98d 	bl	80001e0 <memchr>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d03f      	beq.n	800cf4a <_vfiprintf_r+0x20e>
 800ceca:	4b26      	ldr	r3, [pc, #152]	; (800cf64 <_vfiprintf_r+0x228>)
 800cecc:	bb1b      	cbnz	r3, 800cf16 <_vfiprintf_r+0x1da>
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	3307      	adds	r3, #7
 800ced2:	f023 0307 	bic.w	r3, r3, #7
 800ced6:	3308      	adds	r3, #8
 800ced8:	9303      	str	r3, [sp, #12]
 800ceda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cedc:	443b      	add	r3, r7
 800cede:	9309      	str	r3, [sp, #36]	; 0x24
 800cee0:	e768      	b.n	800cdb4 <_vfiprintf_r+0x78>
 800cee2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cee6:	460c      	mov	r4, r1
 800cee8:	2001      	movs	r0, #1
 800ceea:	e7a6      	b.n	800ce3a <_vfiprintf_r+0xfe>
 800ceec:	2300      	movs	r3, #0
 800ceee:	3401      	adds	r4, #1
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	4619      	mov	r1, r3
 800cef4:	f04f 0c0a 	mov.w	ip, #10
 800cef8:	4620      	mov	r0, r4
 800cefa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cefe:	3a30      	subs	r2, #48	; 0x30
 800cf00:	2a09      	cmp	r2, #9
 800cf02:	d903      	bls.n	800cf0c <_vfiprintf_r+0x1d0>
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0c6      	beq.n	800ce96 <_vfiprintf_r+0x15a>
 800cf08:	9105      	str	r1, [sp, #20]
 800cf0a:	e7c4      	b.n	800ce96 <_vfiprintf_r+0x15a>
 800cf0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf10:	4604      	mov	r4, r0
 800cf12:	2301      	movs	r3, #1
 800cf14:	e7f0      	b.n	800cef8 <_vfiprintf_r+0x1bc>
 800cf16:	ab03      	add	r3, sp, #12
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	462a      	mov	r2, r5
 800cf1c:	4b12      	ldr	r3, [pc, #72]	; (800cf68 <_vfiprintf_r+0x22c>)
 800cf1e:	a904      	add	r1, sp, #16
 800cf20:	4630      	mov	r0, r6
 800cf22:	f3af 8000 	nop.w
 800cf26:	4607      	mov	r7, r0
 800cf28:	1c78      	adds	r0, r7, #1
 800cf2a:	d1d6      	bne.n	800ceda <_vfiprintf_r+0x19e>
 800cf2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf2e:	07d9      	lsls	r1, r3, #31
 800cf30:	d405      	bmi.n	800cf3e <_vfiprintf_r+0x202>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	059a      	lsls	r2, r3, #22
 800cf36:	d402      	bmi.n	800cf3e <_vfiprintf_r+0x202>
 800cf38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf3a:	f7ff fd21 	bl	800c980 <__retarget_lock_release_recursive>
 800cf3e:	89ab      	ldrh	r3, [r5, #12]
 800cf40:	065b      	lsls	r3, r3, #25
 800cf42:	f53f af1d 	bmi.w	800cd80 <_vfiprintf_r+0x44>
 800cf46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf48:	e71c      	b.n	800cd84 <_vfiprintf_r+0x48>
 800cf4a:	ab03      	add	r3, sp, #12
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	462a      	mov	r2, r5
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <_vfiprintf_r+0x22c>)
 800cf52:	a904      	add	r1, sp, #16
 800cf54:	4630      	mov	r0, r6
 800cf56:	f000 f879 	bl	800d04c <_printf_i>
 800cf5a:	e7e4      	b.n	800cf26 <_vfiprintf_r+0x1ea>
 800cf5c:	0800e038 	.word	0x0800e038
 800cf60:	0800e042 	.word	0x0800e042
 800cf64:	00000000 	.word	0x00000000
 800cf68:	0800cd17 	.word	0x0800cd17
 800cf6c:	0800e03e 	.word	0x0800e03e

0800cf70 <_printf_common>:
 800cf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf74:	4616      	mov	r6, r2
 800cf76:	4699      	mov	r9, r3
 800cf78:	688a      	ldr	r2, [r1, #8]
 800cf7a:	690b      	ldr	r3, [r1, #16]
 800cf7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf80:	4293      	cmp	r3, r2
 800cf82:	bfb8      	it	lt
 800cf84:	4613      	movlt	r3, r2
 800cf86:	6033      	str	r3, [r6, #0]
 800cf88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	460c      	mov	r4, r1
 800cf90:	b10a      	cbz	r2, 800cf96 <_printf_common+0x26>
 800cf92:	3301      	adds	r3, #1
 800cf94:	6033      	str	r3, [r6, #0]
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	0699      	lsls	r1, r3, #26
 800cf9a:	bf42      	ittt	mi
 800cf9c:	6833      	ldrmi	r3, [r6, #0]
 800cf9e:	3302      	addmi	r3, #2
 800cfa0:	6033      	strmi	r3, [r6, #0]
 800cfa2:	6825      	ldr	r5, [r4, #0]
 800cfa4:	f015 0506 	ands.w	r5, r5, #6
 800cfa8:	d106      	bne.n	800cfb8 <_printf_common+0x48>
 800cfaa:	f104 0a19 	add.w	sl, r4, #25
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	6832      	ldr	r2, [r6, #0]
 800cfb2:	1a9b      	subs	r3, r3, r2
 800cfb4:	42ab      	cmp	r3, r5
 800cfb6:	dc26      	bgt.n	800d006 <_printf_common+0x96>
 800cfb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfbc:	1e13      	subs	r3, r2, #0
 800cfbe:	6822      	ldr	r2, [r4, #0]
 800cfc0:	bf18      	it	ne
 800cfc2:	2301      	movne	r3, #1
 800cfc4:	0692      	lsls	r2, r2, #26
 800cfc6:	d42b      	bmi.n	800d020 <_printf_common+0xb0>
 800cfc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfcc:	4649      	mov	r1, r9
 800cfce:	4638      	mov	r0, r7
 800cfd0:	47c0      	blx	r8
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d01e      	beq.n	800d014 <_printf_common+0xa4>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	6922      	ldr	r2, [r4, #16]
 800cfda:	f003 0306 	and.w	r3, r3, #6
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	bf02      	ittt	eq
 800cfe2:	68e5      	ldreq	r5, [r4, #12]
 800cfe4:	6833      	ldreq	r3, [r6, #0]
 800cfe6:	1aed      	subeq	r5, r5, r3
 800cfe8:	68a3      	ldr	r3, [r4, #8]
 800cfea:	bf0c      	ite	eq
 800cfec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cff0:	2500      	movne	r5, #0
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bfc4      	itt	gt
 800cff6:	1a9b      	subgt	r3, r3, r2
 800cff8:	18ed      	addgt	r5, r5, r3
 800cffa:	2600      	movs	r6, #0
 800cffc:	341a      	adds	r4, #26
 800cffe:	42b5      	cmp	r5, r6
 800d000:	d11a      	bne.n	800d038 <_printf_common+0xc8>
 800d002:	2000      	movs	r0, #0
 800d004:	e008      	b.n	800d018 <_printf_common+0xa8>
 800d006:	2301      	movs	r3, #1
 800d008:	4652      	mov	r2, sl
 800d00a:	4649      	mov	r1, r9
 800d00c:	4638      	mov	r0, r7
 800d00e:	47c0      	blx	r8
 800d010:	3001      	adds	r0, #1
 800d012:	d103      	bne.n	800d01c <_printf_common+0xac>
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d01c:	3501      	adds	r5, #1
 800d01e:	e7c6      	b.n	800cfae <_printf_common+0x3e>
 800d020:	18e1      	adds	r1, r4, r3
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	2030      	movs	r0, #48	; 0x30
 800d026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d02a:	4422      	add	r2, r4
 800d02c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d034:	3302      	adds	r3, #2
 800d036:	e7c7      	b.n	800cfc8 <_printf_common+0x58>
 800d038:	2301      	movs	r3, #1
 800d03a:	4622      	mov	r2, r4
 800d03c:	4649      	mov	r1, r9
 800d03e:	4638      	mov	r0, r7
 800d040:	47c0      	blx	r8
 800d042:	3001      	adds	r0, #1
 800d044:	d0e6      	beq.n	800d014 <_printf_common+0xa4>
 800d046:	3601      	adds	r6, #1
 800d048:	e7d9      	b.n	800cffe <_printf_common+0x8e>
	...

0800d04c <_printf_i>:
 800d04c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d050:	7e0f      	ldrb	r7, [r1, #24]
 800d052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d054:	2f78      	cmp	r7, #120	; 0x78
 800d056:	4691      	mov	r9, r2
 800d058:	4680      	mov	r8, r0
 800d05a:	460c      	mov	r4, r1
 800d05c:	469a      	mov	sl, r3
 800d05e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d062:	d807      	bhi.n	800d074 <_printf_i+0x28>
 800d064:	2f62      	cmp	r7, #98	; 0x62
 800d066:	d80a      	bhi.n	800d07e <_printf_i+0x32>
 800d068:	2f00      	cmp	r7, #0
 800d06a:	f000 80d4 	beq.w	800d216 <_printf_i+0x1ca>
 800d06e:	2f58      	cmp	r7, #88	; 0x58
 800d070:	f000 80c0 	beq.w	800d1f4 <_printf_i+0x1a8>
 800d074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d07c:	e03a      	b.n	800d0f4 <_printf_i+0xa8>
 800d07e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d082:	2b15      	cmp	r3, #21
 800d084:	d8f6      	bhi.n	800d074 <_printf_i+0x28>
 800d086:	a101      	add	r1, pc, #4	; (adr r1, 800d08c <_printf_i+0x40>)
 800d088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d08c:	0800d0e5 	.word	0x0800d0e5
 800d090:	0800d0f9 	.word	0x0800d0f9
 800d094:	0800d075 	.word	0x0800d075
 800d098:	0800d075 	.word	0x0800d075
 800d09c:	0800d075 	.word	0x0800d075
 800d0a0:	0800d075 	.word	0x0800d075
 800d0a4:	0800d0f9 	.word	0x0800d0f9
 800d0a8:	0800d075 	.word	0x0800d075
 800d0ac:	0800d075 	.word	0x0800d075
 800d0b0:	0800d075 	.word	0x0800d075
 800d0b4:	0800d075 	.word	0x0800d075
 800d0b8:	0800d1fd 	.word	0x0800d1fd
 800d0bc:	0800d125 	.word	0x0800d125
 800d0c0:	0800d1b7 	.word	0x0800d1b7
 800d0c4:	0800d075 	.word	0x0800d075
 800d0c8:	0800d075 	.word	0x0800d075
 800d0cc:	0800d21f 	.word	0x0800d21f
 800d0d0:	0800d075 	.word	0x0800d075
 800d0d4:	0800d125 	.word	0x0800d125
 800d0d8:	0800d075 	.word	0x0800d075
 800d0dc:	0800d075 	.word	0x0800d075
 800d0e0:	0800d1bf 	.word	0x0800d1bf
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	1d1a      	adds	r2, r3, #4
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	602a      	str	r2, [r5, #0]
 800d0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e09f      	b.n	800d238 <_printf_i+0x1ec>
 800d0f8:	6820      	ldr	r0, [r4, #0]
 800d0fa:	682b      	ldr	r3, [r5, #0]
 800d0fc:	0607      	lsls	r7, r0, #24
 800d0fe:	f103 0104 	add.w	r1, r3, #4
 800d102:	6029      	str	r1, [r5, #0]
 800d104:	d501      	bpl.n	800d10a <_printf_i+0xbe>
 800d106:	681e      	ldr	r6, [r3, #0]
 800d108:	e003      	b.n	800d112 <_printf_i+0xc6>
 800d10a:	0646      	lsls	r6, r0, #25
 800d10c:	d5fb      	bpl.n	800d106 <_printf_i+0xba>
 800d10e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d112:	2e00      	cmp	r6, #0
 800d114:	da03      	bge.n	800d11e <_printf_i+0xd2>
 800d116:	232d      	movs	r3, #45	; 0x2d
 800d118:	4276      	negs	r6, r6
 800d11a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d11e:	485a      	ldr	r0, [pc, #360]	; (800d288 <_printf_i+0x23c>)
 800d120:	230a      	movs	r3, #10
 800d122:	e012      	b.n	800d14a <_printf_i+0xfe>
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	6820      	ldr	r0, [r4, #0]
 800d128:	1d19      	adds	r1, r3, #4
 800d12a:	6029      	str	r1, [r5, #0]
 800d12c:	0605      	lsls	r5, r0, #24
 800d12e:	d501      	bpl.n	800d134 <_printf_i+0xe8>
 800d130:	681e      	ldr	r6, [r3, #0]
 800d132:	e002      	b.n	800d13a <_printf_i+0xee>
 800d134:	0641      	lsls	r1, r0, #25
 800d136:	d5fb      	bpl.n	800d130 <_printf_i+0xe4>
 800d138:	881e      	ldrh	r6, [r3, #0]
 800d13a:	4853      	ldr	r0, [pc, #332]	; (800d288 <_printf_i+0x23c>)
 800d13c:	2f6f      	cmp	r7, #111	; 0x6f
 800d13e:	bf0c      	ite	eq
 800d140:	2308      	moveq	r3, #8
 800d142:	230a      	movne	r3, #10
 800d144:	2100      	movs	r1, #0
 800d146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d14a:	6865      	ldr	r5, [r4, #4]
 800d14c:	60a5      	str	r5, [r4, #8]
 800d14e:	2d00      	cmp	r5, #0
 800d150:	bfa2      	ittt	ge
 800d152:	6821      	ldrge	r1, [r4, #0]
 800d154:	f021 0104 	bicge.w	r1, r1, #4
 800d158:	6021      	strge	r1, [r4, #0]
 800d15a:	b90e      	cbnz	r6, 800d160 <_printf_i+0x114>
 800d15c:	2d00      	cmp	r5, #0
 800d15e:	d04b      	beq.n	800d1f8 <_printf_i+0x1ac>
 800d160:	4615      	mov	r5, r2
 800d162:	fbb6 f1f3 	udiv	r1, r6, r3
 800d166:	fb03 6711 	mls	r7, r3, r1, r6
 800d16a:	5dc7      	ldrb	r7, [r0, r7]
 800d16c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d170:	4637      	mov	r7, r6
 800d172:	42bb      	cmp	r3, r7
 800d174:	460e      	mov	r6, r1
 800d176:	d9f4      	bls.n	800d162 <_printf_i+0x116>
 800d178:	2b08      	cmp	r3, #8
 800d17a:	d10b      	bne.n	800d194 <_printf_i+0x148>
 800d17c:	6823      	ldr	r3, [r4, #0]
 800d17e:	07de      	lsls	r6, r3, #31
 800d180:	d508      	bpl.n	800d194 <_printf_i+0x148>
 800d182:	6923      	ldr	r3, [r4, #16]
 800d184:	6861      	ldr	r1, [r4, #4]
 800d186:	4299      	cmp	r1, r3
 800d188:	bfde      	ittt	le
 800d18a:	2330      	movle	r3, #48	; 0x30
 800d18c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d190:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d194:	1b52      	subs	r2, r2, r5
 800d196:	6122      	str	r2, [r4, #16]
 800d198:	f8cd a000 	str.w	sl, [sp]
 800d19c:	464b      	mov	r3, r9
 800d19e:	aa03      	add	r2, sp, #12
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4640      	mov	r0, r8
 800d1a4:	f7ff fee4 	bl	800cf70 <_printf_common>
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	d14a      	bne.n	800d242 <_printf_i+0x1f6>
 800d1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b0:	b004      	add	sp, #16
 800d1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	f043 0320 	orr.w	r3, r3, #32
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	4833      	ldr	r0, [pc, #204]	; (800d28c <_printf_i+0x240>)
 800d1c0:	2778      	movs	r7, #120	; 0x78
 800d1c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	6829      	ldr	r1, [r5, #0]
 800d1ca:	061f      	lsls	r7, r3, #24
 800d1cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1d0:	d402      	bmi.n	800d1d8 <_printf_i+0x18c>
 800d1d2:	065f      	lsls	r7, r3, #25
 800d1d4:	bf48      	it	mi
 800d1d6:	b2b6      	uxthmi	r6, r6
 800d1d8:	07df      	lsls	r7, r3, #31
 800d1da:	bf48      	it	mi
 800d1dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d1e0:	6029      	str	r1, [r5, #0]
 800d1e2:	bf48      	it	mi
 800d1e4:	6023      	strmi	r3, [r4, #0]
 800d1e6:	b91e      	cbnz	r6, 800d1f0 <_printf_i+0x1a4>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	f023 0320 	bic.w	r3, r3, #32
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	2310      	movs	r3, #16
 800d1f2:	e7a7      	b.n	800d144 <_printf_i+0xf8>
 800d1f4:	4824      	ldr	r0, [pc, #144]	; (800d288 <_printf_i+0x23c>)
 800d1f6:	e7e4      	b.n	800d1c2 <_printf_i+0x176>
 800d1f8:	4615      	mov	r5, r2
 800d1fa:	e7bd      	b.n	800d178 <_printf_i+0x12c>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	6826      	ldr	r6, [r4, #0]
 800d200:	6961      	ldr	r1, [r4, #20]
 800d202:	1d18      	adds	r0, r3, #4
 800d204:	6028      	str	r0, [r5, #0]
 800d206:	0635      	lsls	r5, r6, #24
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	d501      	bpl.n	800d210 <_printf_i+0x1c4>
 800d20c:	6019      	str	r1, [r3, #0]
 800d20e:	e002      	b.n	800d216 <_printf_i+0x1ca>
 800d210:	0670      	lsls	r0, r6, #25
 800d212:	d5fb      	bpl.n	800d20c <_printf_i+0x1c0>
 800d214:	8019      	strh	r1, [r3, #0]
 800d216:	2300      	movs	r3, #0
 800d218:	6123      	str	r3, [r4, #16]
 800d21a:	4615      	mov	r5, r2
 800d21c:	e7bc      	b.n	800d198 <_printf_i+0x14c>
 800d21e:	682b      	ldr	r3, [r5, #0]
 800d220:	1d1a      	adds	r2, r3, #4
 800d222:	602a      	str	r2, [r5, #0]
 800d224:	681d      	ldr	r5, [r3, #0]
 800d226:	6862      	ldr	r2, [r4, #4]
 800d228:	2100      	movs	r1, #0
 800d22a:	4628      	mov	r0, r5
 800d22c:	f7f2 ffd8 	bl	80001e0 <memchr>
 800d230:	b108      	cbz	r0, 800d236 <_printf_i+0x1ea>
 800d232:	1b40      	subs	r0, r0, r5
 800d234:	6060      	str	r0, [r4, #4]
 800d236:	6863      	ldr	r3, [r4, #4]
 800d238:	6123      	str	r3, [r4, #16]
 800d23a:	2300      	movs	r3, #0
 800d23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d240:	e7aa      	b.n	800d198 <_printf_i+0x14c>
 800d242:	6923      	ldr	r3, [r4, #16]
 800d244:	462a      	mov	r2, r5
 800d246:	4649      	mov	r1, r9
 800d248:	4640      	mov	r0, r8
 800d24a:	47d0      	blx	sl
 800d24c:	3001      	adds	r0, #1
 800d24e:	d0ad      	beq.n	800d1ac <_printf_i+0x160>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	079b      	lsls	r3, r3, #30
 800d254:	d413      	bmi.n	800d27e <_printf_i+0x232>
 800d256:	68e0      	ldr	r0, [r4, #12]
 800d258:	9b03      	ldr	r3, [sp, #12]
 800d25a:	4298      	cmp	r0, r3
 800d25c:	bfb8      	it	lt
 800d25e:	4618      	movlt	r0, r3
 800d260:	e7a6      	b.n	800d1b0 <_printf_i+0x164>
 800d262:	2301      	movs	r3, #1
 800d264:	4632      	mov	r2, r6
 800d266:	4649      	mov	r1, r9
 800d268:	4640      	mov	r0, r8
 800d26a:	47d0      	blx	sl
 800d26c:	3001      	adds	r0, #1
 800d26e:	d09d      	beq.n	800d1ac <_printf_i+0x160>
 800d270:	3501      	adds	r5, #1
 800d272:	68e3      	ldr	r3, [r4, #12]
 800d274:	9903      	ldr	r1, [sp, #12]
 800d276:	1a5b      	subs	r3, r3, r1
 800d278:	42ab      	cmp	r3, r5
 800d27a:	dcf2      	bgt.n	800d262 <_printf_i+0x216>
 800d27c:	e7eb      	b.n	800d256 <_printf_i+0x20a>
 800d27e:	2500      	movs	r5, #0
 800d280:	f104 0619 	add.w	r6, r4, #25
 800d284:	e7f5      	b.n	800d272 <_printf_i+0x226>
 800d286:	bf00      	nop
 800d288:	0800e049 	.word	0x0800e049
 800d28c:	0800e05a 	.word	0x0800e05a

0800d290 <__sflush_r>:
 800d290:	898a      	ldrh	r2, [r1, #12]
 800d292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d296:	4605      	mov	r5, r0
 800d298:	0710      	lsls	r0, r2, #28
 800d29a:	460c      	mov	r4, r1
 800d29c:	d458      	bmi.n	800d350 <__sflush_r+0xc0>
 800d29e:	684b      	ldr	r3, [r1, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dc05      	bgt.n	800d2b0 <__sflush_r+0x20>
 800d2a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	dc02      	bgt.n	800d2b0 <__sflush_r+0x20>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2b2:	2e00      	cmp	r6, #0
 800d2b4:	d0f9      	beq.n	800d2aa <__sflush_r+0x1a>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d2bc:	682f      	ldr	r7, [r5, #0]
 800d2be:	6a21      	ldr	r1, [r4, #32]
 800d2c0:	602b      	str	r3, [r5, #0]
 800d2c2:	d032      	beq.n	800d32a <__sflush_r+0x9a>
 800d2c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	075a      	lsls	r2, r3, #29
 800d2ca:	d505      	bpl.n	800d2d8 <__sflush_r+0x48>
 800d2cc:	6863      	ldr	r3, [r4, #4]
 800d2ce:	1ac0      	subs	r0, r0, r3
 800d2d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2d2:	b10b      	cbz	r3, 800d2d8 <__sflush_r+0x48>
 800d2d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2d6:	1ac0      	subs	r0, r0, r3
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4602      	mov	r2, r0
 800d2dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2de:	6a21      	ldr	r1, [r4, #32]
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	47b0      	blx	r6
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	89a3      	ldrh	r3, [r4, #12]
 800d2e8:	d106      	bne.n	800d2f8 <__sflush_r+0x68>
 800d2ea:	6829      	ldr	r1, [r5, #0]
 800d2ec:	291d      	cmp	r1, #29
 800d2ee:	d82b      	bhi.n	800d348 <__sflush_r+0xb8>
 800d2f0:	4a29      	ldr	r2, [pc, #164]	; (800d398 <__sflush_r+0x108>)
 800d2f2:	410a      	asrs	r2, r1
 800d2f4:	07d6      	lsls	r6, r2, #31
 800d2f6:	d427      	bmi.n	800d348 <__sflush_r+0xb8>
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	6062      	str	r2, [r4, #4]
 800d2fc:	04d9      	lsls	r1, r3, #19
 800d2fe:	6922      	ldr	r2, [r4, #16]
 800d300:	6022      	str	r2, [r4, #0]
 800d302:	d504      	bpl.n	800d30e <__sflush_r+0x7e>
 800d304:	1c42      	adds	r2, r0, #1
 800d306:	d101      	bne.n	800d30c <__sflush_r+0x7c>
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	b903      	cbnz	r3, 800d30e <__sflush_r+0x7e>
 800d30c:	6560      	str	r0, [r4, #84]	; 0x54
 800d30e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d310:	602f      	str	r7, [r5, #0]
 800d312:	2900      	cmp	r1, #0
 800d314:	d0c9      	beq.n	800d2aa <__sflush_r+0x1a>
 800d316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d31a:	4299      	cmp	r1, r3
 800d31c:	d002      	beq.n	800d324 <__sflush_r+0x94>
 800d31e:	4628      	mov	r0, r5
 800d320:	f7ff fb3e 	bl	800c9a0 <_free_r>
 800d324:	2000      	movs	r0, #0
 800d326:	6360      	str	r0, [r4, #52]	; 0x34
 800d328:	e7c0      	b.n	800d2ac <__sflush_r+0x1c>
 800d32a:	2301      	movs	r3, #1
 800d32c:	4628      	mov	r0, r5
 800d32e:	47b0      	blx	r6
 800d330:	1c41      	adds	r1, r0, #1
 800d332:	d1c8      	bne.n	800d2c6 <__sflush_r+0x36>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d0c5      	beq.n	800d2c6 <__sflush_r+0x36>
 800d33a:	2b1d      	cmp	r3, #29
 800d33c:	d001      	beq.n	800d342 <__sflush_r+0xb2>
 800d33e:	2b16      	cmp	r3, #22
 800d340:	d101      	bne.n	800d346 <__sflush_r+0xb6>
 800d342:	602f      	str	r7, [r5, #0]
 800d344:	e7b1      	b.n	800d2aa <__sflush_r+0x1a>
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	e7ad      	b.n	800d2ac <__sflush_r+0x1c>
 800d350:	690f      	ldr	r7, [r1, #16]
 800d352:	2f00      	cmp	r7, #0
 800d354:	d0a9      	beq.n	800d2aa <__sflush_r+0x1a>
 800d356:	0793      	lsls	r3, r2, #30
 800d358:	680e      	ldr	r6, [r1, #0]
 800d35a:	bf08      	it	eq
 800d35c:	694b      	ldreq	r3, [r1, #20]
 800d35e:	600f      	str	r7, [r1, #0]
 800d360:	bf18      	it	ne
 800d362:	2300      	movne	r3, #0
 800d364:	eba6 0807 	sub.w	r8, r6, r7
 800d368:	608b      	str	r3, [r1, #8]
 800d36a:	f1b8 0f00 	cmp.w	r8, #0
 800d36e:	dd9c      	ble.n	800d2aa <__sflush_r+0x1a>
 800d370:	6a21      	ldr	r1, [r4, #32]
 800d372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d374:	4643      	mov	r3, r8
 800d376:	463a      	mov	r2, r7
 800d378:	4628      	mov	r0, r5
 800d37a:	47b0      	blx	r6
 800d37c:	2800      	cmp	r0, #0
 800d37e:	dc06      	bgt.n	800d38e <__sflush_r+0xfe>
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	f04f 30ff 	mov.w	r0, #4294967295
 800d38c:	e78e      	b.n	800d2ac <__sflush_r+0x1c>
 800d38e:	4407      	add	r7, r0
 800d390:	eba8 0800 	sub.w	r8, r8, r0
 800d394:	e7e9      	b.n	800d36a <__sflush_r+0xda>
 800d396:	bf00      	nop
 800d398:	dfbffffe 	.word	0xdfbffffe

0800d39c <_fflush_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	690b      	ldr	r3, [r1, #16]
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	b913      	cbnz	r3, 800d3ac <_fflush_r+0x10>
 800d3a6:	2500      	movs	r5, #0
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	bd38      	pop	{r3, r4, r5, pc}
 800d3ac:	b118      	cbz	r0, 800d3b6 <_fflush_r+0x1a>
 800d3ae:	6a03      	ldr	r3, [r0, #32]
 800d3b0:	b90b      	cbnz	r3, 800d3b6 <_fflush_r+0x1a>
 800d3b2:	f7ff f8ab 	bl	800c50c <__sinit>
 800d3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0f3      	beq.n	800d3a6 <_fflush_r+0xa>
 800d3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3c0:	07d0      	lsls	r0, r2, #31
 800d3c2:	d404      	bmi.n	800d3ce <_fflush_r+0x32>
 800d3c4:	0599      	lsls	r1, r3, #22
 800d3c6:	d402      	bmi.n	800d3ce <_fflush_r+0x32>
 800d3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3ca:	f7ff fad8 	bl	800c97e <__retarget_lock_acquire_recursive>
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	f7ff ff5d 	bl	800d290 <__sflush_r>
 800d3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3d8:	07da      	lsls	r2, r3, #31
 800d3da:	4605      	mov	r5, r0
 800d3dc:	d4e4      	bmi.n	800d3a8 <_fflush_r+0xc>
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	059b      	lsls	r3, r3, #22
 800d3e2:	d4e1      	bmi.n	800d3a8 <_fflush_r+0xc>
 800d3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3e6:	f7ff facb 	bl	800c980 <__retarget_lock_release_recursive>
 800d3ea:	e7dd      	b.n	800d3a8 <_fflush_r+0xc>

0800d3ec <__swhatbuf_r>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	b096      	sub	sp, #88	; 0x58
 800d3f8:	4615      	mov	r5, r2
 800d3fa:	461e      	mov	r6, r3
 800d3fc:	da0d      	bge.n	800d41a <__swhatbuf_r+0x2e>
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d404:	f04f 0100 	mov.w	r1, #0
 800d408:	bf0c      	ite	eq
 800d40a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d40e:	2340      	movne	r3, #64	; 0x40
 800d410:	2000      	movs	r0, #0
 800d412:	6031      	str	r1, [r6, #0]
 800d414:	602b      	str	r3, [r5, #0]
 800d416:	b016      	add	sp, #88	; 0x58
 800d418:	bd70      	pop	{r4, r5, r6, pc}
 800d41a:	466a      	mov	r2, sp
 800d41c:	f000 f862 	bl	800d4e4 <_fstat_r>
 800d420:	2800      	cmp	r0, #0
 800d422:	dbec      	blt.n	800d3fe <__swhatbuf_r+0x12>
 800d424:	9901      	ldr	r1, [sp, #4]
 800d426:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d42a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d42e:	4259      	negs	r1, r3
 800d430:	4159      	adcs	r1, r3
 800d432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d436:	e7eb      	b.n	800d410 <__swhatbuf_r+0x24>

0800d438 <__smakebuf_r>:
 800d438:	898b      	ldrh	r3, [r1, #12]
 800d43a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d43c:	079d      	lsls	r5, r3, #30
 800d43e:	4606      	mov	r6, r0
 800d440:	460c      	mov	r4, r1
 800d442:	d507      	bpl.n	800d454 <__smakebuf_r+0x1c>
 800d444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	6123      	str	r3, [r4, #16]
 800d44c:	2301      	movs	r3, #1
 800d44e:	6163      	str	r3, [r4, #20]
 800d450:	b002      	add	sp, #8
 800d452:	bd70      	pop	{r4, r5, r6, pc}
 800d454:	ab01      	add	r3, sp, #4
 800d456:	466a      	mov	r2, sp
 800d458:	f7ff ffc8 	bl	800d3ec <__swhatbuf_r>
 800d45c:	9900      	ldr	r1, [sp, #0]
 800d45e:	4605      	mov	r5, r0
 800d460:	4630      	mov	r0, r6
 800d462:	f7fe ff3b 	bl	800c2dc <_malloc_r>
 800d466:	b948      	cbnz	r0, 800d47c <__smakebuf_r+0x44>
 800d468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d46c:	059a      	lsls	r2, r3, #22
 800d46e:	d4ef      	bmi.n	800d450 <__smakebuf_r+0x18>
 800d470:	f023 0303 	bic.w	r3, r3, #3
 800d474:	f043 0302 	orr.w	r3, r3, #2
 800d478:	81a3      	strh	r3, [r4, #12]
 800d47a:	e7e3      	b.n	800d444 <__smakebuf_r+0xc>
 800d47c:	89a3      	ldrh	r3, [r4, #12]
 800d47e:	6020      	str	r0, [r4, #0]
 800d480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d484:	81a3      	strh	r3, [r4, #12]
 800d486:	9b00      	ldr	r3, [sp, #0]
 800d488:	6163      	str	r3, [r4, #20]
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	6120      	str	r0, [r4, #16]
 800d48e:	b15b      	cbz	r3, 800d4a8 <__smakebuf_r+0x70>
 800d490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d494:	4630      	mov	r0, r6
 800d496:	f000 f837 	bl	800d508 <_isatty_r>
 800d49a:	b128      	cbz	r0, 800d4a8 <__smakebuf_r+0x70>
 800d49c:	89a3      	ldrh	r3, [r4, #12]
 800d49e:	f023 0303 	bic.w	r3, r3, #3
 800d4a2:	f043 0301 	orr.w	r3, r3, #1
 800d4a6:	81a3      	strh	r3, [r4, #12]
 800d4a8:	89a3      	ldrh	r3, [r4, #12]
 800d4aa:	431d      	orrs	r5, r3
 800d4ac:	81a5      	strh	r5, [r4, #12]
 800d4ae:	e7cf      	b.n	800d450 <__smakebuf_r+0x18>

0800d4b0 <memmove>:
 800d4b0:	4288      	cmp	r0, r1
 800d4b2:	b510      	push	{r4, lr}
 800d4b4:	eb01 0402 	add.w	r4, r1, r2
 800d4b8:	d902      	bls.n	800d4c0 <memmove+0x10>
 800d4ba:	4284      	cmp	r4, r0
 800d4bc:	4623      	mov	r3, r4
 800d4be:	d807      	bhi.n	800d4d0 <memmove+0x20>
 800d4c0:	1e43      	subs	r3, r0, #1
 800d4c2:	42a1      	cmp	r1, r4
 800d4c4:	d008      	beq.n	800d4d8 <memmove+0x28>
 800d4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4ce:	e7f8      	b.n	800d4c2 <memmove+0x12>
 800d4d0:	4402      	add	r2, r0
 800d4d2:	4601      	mov	r1, r0
 800d4d4:	428a      	cmp	r2, r1
 800d4d6:	d100      	bne.n	800d4da <memmove+0x2a>
 800d4d8:	bd10      	pop	{r4, pc}
 800d4da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4e2:	e7f7      	b.n	800d4d4 <memmove+0x24>

0800d4e4 <_fstat_r>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4d07      	ldr	r5, [pc, #28]	; (800d504 <_fstat_r+0x20>)
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	4608      	mov	r0, r1
 800d4ee:	4611      	mov	r1, r2
 800d4f0:	602b      	str	r3, [r5, #0]
 800d4f2:	f7f3 fae4 	bl	8000abe <_fstat>
 800d4f6:	1c43      	adds	r3, r0, #1
 800d4f8:	d102      	bne.n	800d500 <_fstat_r+0x1c>
 800d4fa:	682b      	ldr	r3, [r5, #0]
 800d4fc:	b103      	cbz	r3, 800d500 <_fstat_r+0x1c>
 800d4fe:	6023      	str	r3, [r4, #0]
 800d500:	bd38      	pop	{r3, r4, r5, pc}
 800d502:	bf00      	nop
 800d504:	20006e0c 	.word	0x20006e0c

0800d508 <_isatty_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4d06      	ldr	r5, [pc, #24]	; (800d524 <_isatty_r+0x1c>)
 800d50c:	2300      	movs	r3, #0
 800d50e:	4604      	mov	r4, r0
 800d510:	4608      	mov	r0, r1
 800d512:	602b      	str	r3, [r5, #0]
 800d514:	f7f3 fae3 	bl	8000ade <_isatty>
 800d518:	1c43      	adds	r3, r0, #1
 800d51a:	d102      	bne.n	800d522 <_isatty_r+0x1a>
 800d51c:	682b      	ldr	r3, [r5, #0]
 800d51e:	b103      	cbz	r3, 800d522 <_isatty_r+0x1a>
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	20006e0c 	.word	0x20006e0c

0800d528 <_realloc_r>:
 800d528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52c:	4680      	mov	r8, r0
 800d52e:	4614      	mov	r4, r2
 800d530:	460e      	mov	r6, r1
 800d532:	b921      	cbnz	r1, 800d53e <_realloc_r+0x16>
 800d534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d538:	4611      	mov	r1, r2
 800d53a:	f7fe becf 	b.w	800c2dc <_malloc_r>
 800d53e:	b92a      	cbnz	r2, 800d54c <_realloc_r+0x24>
 800d540:	f7ff fa2e 	bl	800c9a0 <_free_r>
 800d544:	4625      	mov	r5, r4
 800d546:	4628      	mov	r0, r5
 800d548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54c:	f000 f81b 	bl	800d586 <_malloc_usable_size_r>
 800d550:	4284      	cmp	r4, r0
 800d552:	4607      	mov	r7, r0
 800d554:	d802      	bhi.n	800d55c <_realloc_r+0x34>
 800d556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d55a:	d812      	bhi.n	800d582 <_realloc_r+0x5a>
 800d55c:	4621      	mov	r1, r4
 800d55e:	4640      	mov	r0, r8
 800d560:	f7fe febc 	bl	800c2dc <_malloc_r>
 800d564:	4605      	mov	r5, r0
 800d566:	2800      	cmp	r0, #0
 800d568:	d0ed      	beq.n	800d546 <_realloc_r+0x1e>
 800d56a:	42bc      	cmp	r4, r7
 800d56c:	4622      	mov	r2, r4
 800d56e:	4631      	mov	r1, r6
 800d570:	bf28      	it	cs
 800d572:	463a      	movcs	r2, r7
 800d574:	f7ff fa05 	bl	800c982 <memcpy>
 800d578:	4631      	mov	r1, r6
 800d57a:	4640      	mov	r0, r8
 800d57c:	f7ff fa10 	bl	800c9a0 <_free_r>
 800d580:	e7e1      	b.n	800d546 <_realloc_r+0x1e>
 800d582:	4635      	mov	r5, r6
 800d584:	e7df      	b.n	800d546 <_realloc_r+0x1e>

0800d586 <_malloc_usable_size_r>:
 800d586:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d58a:	1f18      	subs	r0, r3, #4
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	bfbc      	itt	lt
 800d590:	580b      	ldrlt	r3, [r1, r0]
 800d592:	18c0      	addlt	r0, r0, r3
 800d594:	4770      	bx	lr
	...

0800d598 <_init>:
 800d598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59a:	bf00      	nop
 800d59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d59e:	bc08      	pop	{r3}
 800d5a0:	469e      	mov	lr, r3
 800d5a2:	4770      	bx	lr

0800d5a4 <_fini>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	bf00      	nop
 800d5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5aa:	bc08      	pop	{r3}
 800d5ac:	469e      	mov	lr, r3
 800d5ae:	4770      	bx	lr
