
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800cffc  0800cffc  0001cffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d994  0800d994  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d994  0800d994  0001d994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d99c  0800d99c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d99c  0800d99c  0001d99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9a0  0800d9a0  0001d9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dc8  20000070  0800da14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006e38  0800da14  00026e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f314  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004eb9  00000000  00000000  0003f3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d4  00000000  00000000  00045dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007f2c  00000000  00000000  0004729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024a85  00000000  00000000  0004f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b1d6  00000000  00000000  00073c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077f4  00000000  00000000  0010ee24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  00116618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cfe4 	.word	0x0800cfe4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800cfe4 	.word	0x0800cfe4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80005d0:	f000 ff74 	bl	80014bc <HAL_Init>
    SystemClock_Config();
 80005d4:	f000 f822 	bl	800061c <SystemClock_Config>
	MX_USART2_UART_Init();
 80005d8:	f000 f88c 	bl	80006f4 <MX_USART2_UART_Init>
    if(init_tasks()) printf("Tasks was initialized\n");
 80005dc:	f000 fed0 	bl	8001380 <init_tasks>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <main+0x20>
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <main+0x44>)
 80005e8:	f00b fe50 	bl	800c28c <puts>
	if(i2c_init()) printf("I2C1 was init success\n");
 80005ec:	f000 fdda 	bl	80011a4 <i2c_init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <main+0x30>
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <main+0x48>)
 80005f8:	f00b fe48 	bl	800c28c <puts>

	osKernelStart();
 80005fc:	f008 f930 	bl	8008860 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000604:	f000 ffcc 	bl	80015a0 <HAL_Delay>
	  printf("test\n");
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <main+0x4c>)
 800060a:	f00b fe3f 	bl	800c28c <puts>
	  HAL_Delay(1000);
 800060e:	e7f7      	b.n	8000600 <main+0x34>
 8000610:	0800d010 	.word	0x0800d010
 8000614:	0800d028 	.word	0x0800d028
 8000618:	0800d040 	.word	0x0800d040

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f00b ff0e 	bl	800c44c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd4>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000694:	2354      	movs	r3, #84	; 0x54
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f8ad 	bl	8002804 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 f866 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fb0e 	bl	8002cf4 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f000 f84f 	bl	8000780 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f003 fd9b 	bl	8004266 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f823 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000008c 	.word	0x2000008c
 8000744:	40004400 	.word	0x40004400

08000748 <_write>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e009      	b.n	800076e <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff0a 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbf1      	blt.n	800075a <_write+0x12>
	}
	return len;
 8000776:	687b      	ldr	r3, [r7, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_MspInit+0x54>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <HAL_MspInit+0x54>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x54>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_MspInit+0x54>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_MspInit+0x54>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_MspInit+0x54>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	210f      	movs	r1, #15
 80007ce:	f06f 0001 	mvn.w	r0, #1
 80007d2:	f000 ffe4 	bl	800179e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a19      	ldr	r2, [pc, #100]	; (8000868 <HAL_I2C_MspInit+0x84>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d12b      	bne.n	800085e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_I2C_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000822:	23c0      	movs	r3, #192	; 0xc0
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <HAL_I2C_MspInit+0x8c>)
 800083e:	f001 fb61 	bl	8001f04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_I2C_MspInit+0x88>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40005400 	.word	0x40005400
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400

08000874 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a65      	ldr	r2, [pc, #404]	; (8000a28 <HAL_SD_MspInit+0x1b4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	f040 80c3 	bne.w	8000a1e <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	4b63      	ldr	r3, [pc, #396]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a6:	6453      	str	r3, [r2, #68]	; 0x44
 80008a8:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	4a5b      	ldr	r2, [pc, #364]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6313      	str	r3, [r2, #48]	; 0x30
 80008c4:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b55      	ldr	r3, [pc, #340]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4a54      	ldr	r2, [pc, #336]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6313      	str	r3, [r2, #48]	; 0x30
 80008e0:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008fe:	230c      	movs	r3, #12
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4849      	ldr	r0, [pc, #292]	; (8000a30 <HAL_SD_MspInit+0x1bc>)
 800090a:	f001 fafb 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090e:	2304      	movs	r3, #4
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800091e:	230c      	movs	r3, #12
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4842      	ldr	r0, [pc, #264]	; (8000a34 <HAL_SD_MspInit+0x1c0>)
 800092a:	f001 faeb 	bl	8001f04 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000930:	4a42      	ldr	r2, [pc, #264]	; (8000a3c <HAL_SD_MspInit+0x1c8>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000942:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000948:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800094a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000950:	4b39      	ldr	r3, [pc, #228]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000956:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000962:	2220      	movs	r2, #32
 8000964:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000966:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000968:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800096c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000970:	2204      	movs	r2, #4
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000976:	2203      	movs	r2, #3
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800097c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800098a:	482b      	ldr	r0, [pc, #172]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800098c:	f000 ff3e 	bl	800180c <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8000996:	f7ff fef3 	bl	8000780 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a26      	ldr	r2, [pc, #152]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800099e:	641a      	str	r2, [r3, #64]	; 0x40
 80009a0:	4a25      	ldr	r2, [pc, #148]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <HAL_SD_MspInit+0x1d0>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009b6:	2240      	movs	r2, #64	; 0x40
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009da:	2220      	movs	r2, #32
 80009dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009e4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 8000a04:	f000 ff02 	bl	800180c <HAL_DMA_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8000a0e:	f7ff feb7 	bl	8000780 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012c00 	.word	0x40012c00
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	200021c8 	.word	0x200021c8
 8000a3c:	40026458 	.word	0x40026458
 8000a40:	20002228 	.word	0x20002228
 8000a44:	400264a0 	.word	0x400264a0

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0x8c>)
 8000abe:	f001 fa21 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>
	...

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
   printf("HardFault_Handler\n");
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <HardFault_Handler+0x10>)
 8000ae6:	f00b fbd1 	bl	800c28c <puts>
  /* USER CODE END HardFault_IRQn 0 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	0800d048 	.word	0x0800d048

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 fd22 	bl	8001560 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b1c:	f00a f924 	bl	800ad68 <xTaskGetSchedulerState>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d001      	beq.n	8000b2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b26:	f00b f807 	bl	800bb38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <DMA2_Stream3_IRQHandler+0x10>)
 8000b36:	f000 ff6f 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200021c8 	.word	0x200021c8

08000b44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <DMA2_Stream6_IRQHandler+0x10>)
 8000b4a:	f000 ff65 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20002228 	.word	0x20002228

08000b58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e00a      	b.n	8000b80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6a:	f3af 8000 	nop.w
 8000b6e:	4601      	mov	r1, r0
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	b2ca      	uxtb	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf0      	blt.n	8000b6a <_read+0x12>
  }

  return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f00b fc5c 	bl	800c4e8 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20018000 	.word	0x20018000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200000d0 	.word	0x200000d0
 8000c64:	20006e38 	.word	0x20006e38

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f00b fc1b 	bl	800c4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc85 	bl	80005cc <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd0:	0800d9a4 	.word	0x0800d9a4
  ldr r2, =_sbss
 8000cd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd8:	20006e38 	.word	0x20006e38

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <update_firmware>:
     if(!i2c_send_data_to_device(SNP_ADDR, reset_cmd_2, 4)) return FALSE;

     return TRUE;
}

extern BOOLEAN update_firmware(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0a2      	sub	sp, #136	; 0x88
 8000ce4:	af00      	add	r7, sp, #0
	// Подготовка к прошивке
    if(!prep_firmware()) {
 8000ce6:	f000 f87f 	bl	8000de8 <prep_firmware>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d104      	bne.n	8000cfa <update_firmware+0x1a>
    	printf("Can't switch SNP73X to programming mode\n");
 8000cf0:	4823      	ldr	r0, [pc, #140]	; (8000d80 <update_firmware+0xa0>)
 8000cf2:	f00b facb 	bl	800c28c <puts>
    	return FALSE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e03d      	b.n	8000d76 <update_firmware+0x96>
    }
    printf("Switch SNP73X to factory state was success\n");
 8000cfa:	4822      	ldr	r0, [pc, #136]	; (8000d84 <update_firmware+0xa4>)
 8000cfc:	f00b fac6 	bl	800c28c <puts>

    MX_DMA_Init();
 8000d00:	f000 f8a2 	bl	8000e48 <MX_DMA_Init>
    MX_SDIO_SD_Init();
 8000d04:	f000 f850 	bl	8000da8 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8000d08:	f004 fad0 	bl	80052ac <MX_FATFS_Init>



		  fr = f_mount(&FatFs, "", 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	491e      	ldr	r1, [pc, #120]	; (8000d88 <update_firmware+0xa8>)
 8000d10:	481e      	ldr	r0, [pc, #120]	; (8000d8c <update_firmware+0xac>)
 8000d12:	f006 ff19 	bl	8007b48 <f_mount>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <update_firmware+0xb0>)
 8000d1c:	701a      	strb	r2, [r3, #0]
		  printf("%d\n", fr);
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <update_firmware+0xb0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	481b      	ldr	r0, [pc, #108]	; (8000d94 <update_firmware+0xb4>)
 8000d26:	f00b fa43 	bl	800c1b0 <iprintf>
		//  print_err(fr);

		  fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	491a      	ldr	r1, [pc, #104]	; (8000d98 <update_firmware+0xb8>)
 8000d2e:	481b      	ldr	r0, [pc, #108]	; (8000d9c <update_firmware+0xbc>)
 8000d30:	f006 ff6e 	bl	8007c10 <f_open>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <update_firmware+0xb0>)
 8000d3a:	701a      	strb	r2, [r3, #0]
		  printf("%d\n", fr);
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <update_firmware+0xb0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <update_firmware+0xb4>)
 8000d44:	f00b fa34 	bl	800c1b0 <iprintf>

		  unsigned int bytesRead;
		  char readBuff[128];
		  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 8000d48:	e004      	b.n	8000d54 <update_firmware+0x74>
			  printf("%02x\n ", readBuff[0]);
 8000d4a:	793b      	ldrb	r3, [r7, #4]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4814      	ldr	r0, [pc, #80]	; (8000da0 <update_firmware+0xc0>)
 8000d50:	f00b fa2e 	bl	800c1b0 <iprintf>
		  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 8000d54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d58:	1d39      	adds	r1, r7, #4
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	480f      	ldr	r0, [pc, #60]	; (8000d9c <update_firmware+0xbc>)
 8000d5e:	f007 f93f 	bl	8007fe0 <f_read>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f0      	beq.n	8000d4a <update_firmware+0x6a>
	//  unsigned int bytesRead;
	//  fr = f_read(&fil, readBuff, sizeof(readBuff)-1, &bytesRead);
	//  print_err(fr);
	//  printf("%s\n ", readBuff);

	  f_close(&fil);
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <update_firmware+0xbc>)
 8000d6a:	f007 fb50 	bl	800840e <f_close>
    //                        1     2    3   4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66
//    char buff[66];
//    memset(&buff[0], 0x00, 66);
//    i2c_read_data_from_device(0x36, 0x4000, buff, 66);

    printf("FW was finish\n");
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <update_firmware+0xc4>)
 8000d70:	f00b fa8c 	bl	800c28c <puts>
    return TRUE;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3788      	adds	r7, #136	; 0x88
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	0800d05c 	.word	0x0800d05c
 8000d84:	0800d084 	.word	0x0800d084
 8000d88:	0800d0b0 	.word	0x0800d0b0
 8000d8c:	200000d4 	.word	0x200000d4
 8000d90:	20002140 	.word	0x20002140
 8000d94:	0800d0b4 	.word	0x0800d0b4
 8000d98:	0800d0b8 	.word	0x0800d0b8
 8000d9c:	20001110 	.word	0x20001110
 8000da0:	0800d0d0 	.word	0x0800d0d0
 8000da4:	0800d0d8 	.word	0x0800d0d8

08000da8 <MX_SDIO_SD_Init>:

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */static void MX_SDIO_SD_Init(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    hsd.Instance = SDIO;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000dae:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <MX_SDIO_SD_Init+0x3c>)
 8000db0:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
    HAL_SD_Init(&hsd);
 8000dd6:	4802      	ldr	r0, [pc, #8]	; (8000de0 <MX_SDIO_SD_Init+0x38>)
 8000dd8:	f002 f9ac 	bl	8003134 <HAL_SD_Init>
  }
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20002144 	.word	0x20002144
 8000de4:	40012c00 	.word	0x40012c00

08000de8 <prep_firmware>:

static BOOLEAN prep_firmware(void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	// Перевод SDA/SCL пинов в режим GPIO
	switch_mode_sda_scl(GPIO_M);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f869 	bl	8000ec4 <switch_mode_sda_scl>

	set_sda(GPIO_PIN_RESET);   // SDA off
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f984 	bl	8001100 <set_sda>
	set_scl(GPIO_PIN_RESET);   // SCL off
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 f99b 	bl	8001134 <set_scl>
	set_power(GPIO_PIN_RESET); // VDD off
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f96c 	bl	80010dc <set_power>
	osDelay(1000);
 8000e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e08:	f007 fdf7 	bl	80089fa <osDelay>
 	set_power(GPIO_PIN_SET);   // VDD on
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f000 f965 	bl	80010dc <set_power>

	// GPIO0(SCL) GPIO1(SDA) должны удерживаться в состояниий  GPIO1 = 1, GPIO0 = 0 не менее 256 мсек
	set_sda(GPIO_PIN_RESET);    // SDA on
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f974 	bl	8001100 <set_sda>
	set_scl(GPIO_PIN_SET);  // SCL off
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 f98b 	bl	8001134 <set_scl>
	osDelay(2000);
 8000e1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e22:	f007 fdea 	bl	80089fa <osDelay>

	// Перевод SDA/SCL пинов в режим I2C
	switch_mode_sda_scl(I2C_M);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 f84c 	bl	8000ec4 <switch_mode_sda_scl>
	osDelay(1000);
 8000e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e30:	f007 fde3 	bl	80089fa <osDelay>

	// Убедиться, что на шине появилось устройство с адресом 0x36
    scan_bus_and_print();
 8000e34:	f000 fa12 	bl	800125c <scan_bus_and_print>
	return has_device(SNP_ADDR);
 8000e38:	2036      	movs	r0, #54	; 0x36
 8000e3a:	f000 f9e5 	bl	8001208 <has_device>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b2db      	uxtb	r3, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_DMA_Init+0x4c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <MX_DMA_Init+0x4c>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_DMA_Init+0x4c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	203b      	movs	r0, #59	; 0x3b
 8000e70:	f000 fc95 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e74:	203b      	movs	r0, #59	; 0x3b
 8000e76:	f000 fcae 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	2045      	movs	r0, #69	; 0x45
 8000e80:	f000 fc8d 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e84:	2045      	movs	r0, #69	; 0x45
 8000e86:	f000 fca6 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <gpio_start>:

static BOOLEAN init_io(void);
static void gpio_watcher(void);


extern BOOLEAN gpio_start(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
   if(is_init) return TRUE;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <gpio_start+0x28>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <gpio_start+0x10>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e008      	b.n	8000eba <gpio_start+0x22>
   is_init = init_io();
 8000ea8:	f000 f88c 	bl	8000fc4 <init_io>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <gpio_start+0x28>)
 8000eb2:	701a      	strb	r2, [r3, #0]
   gpio_watcher();
 8000eb4:	f000 f876 	bl	8000fa4 <gpio_watcher>
   return TRUE;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20002288 	.word	0x20002288

08000ec4 <switch_mode_sda_scl>:


extern BOOLEAN switch_mode_sda_scl(SDA_SCL_MODE mode){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <switch_mode_sda_scl+0x16>
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d00d      	beq.n	8000ef4 <switch_mode_sda_scl+0x30>
 8000ed8:	e01f      	b.n	8000f1a <switch_mode_sda_scl+0x56>
	case GPIO_M:
		printf("SDA/SCL has GPIO_MODE\n");
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <switch_mode_sda_scl+0xc0>)
 8000edc:	f00b f9d6 	bl	800c28c <puts>
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <switch_mode_sda_scl+0xc4>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <switch_mode_sda_scl+0xc8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
		current_mode = GPIO_M;
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <switch_mode_sda_scl+0xcc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
		break;
 8000ef2:	e017      	b.n	8000f24 <switch_mode_sda_scl+0x60>
	case I2C_M:
		printf("SDA/SCL has I2C_MODE\n");
 8000ef4:	4827      	ldr	r0, [pc, #156]	; (8000f94 <switch_mode_sda_scl+0xd0>)
 8000ef6:	f00b f9c9 	bl	800c28c <puts>
	    GPIO_InitStruct_i2c_sda.Alternate = GPIO_AF4_I2C1;
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <switch_mode_sda_scl+0xc8>)
 8000efc:	2204      	movs	r2, #4
 8000efe:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Alternate = GPIO_AF4_I2C1;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <switch_mode_sda_scl+0xc4>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_AF_OD;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <switch_mode_sda_scl+0xc4>)
 8000f08:	2212      	movs	r2, #18
 8000f0a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_AF_OD;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <switch_mode_sda_scl+0xc8>)
 8000f0e:	2212      	movs	r2, #18
 8000f10:	605a      	str	r2, [r3, #4]
		current_mode = I2C_M;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <switch_mode_sda_scl+0xcc>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
        break;
 8000f18:	e004      	b.n	8000f24 <switch_mode_sda_scl+0x60>
	default:
		printf("Unknown state for SDA/SCL pins\n");
 8000f1a:	481f      	ldr	r0, [pc, #124]	; (8000f98 <switch_mode_sda_scl+0xd4>)
 8000f1c:	f00b f9b6 	bl	800c28c <puts>
		return FALSE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e02a      	b.n	8000f7a <switch_mode_sda_scl+0xb6>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <switch_mode_sda_scl+0xd8>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <switch_mode_sda_scl+0xd8>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <switch_mode_sda_scl+0xd8>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct_i2c_scl.Pin = SCL;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <switch_mode_sda_scl+0xc4>)
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct_i2c_sda.Pin = SDA;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <switch_mode_sda_scl+0xc8>)
 8000f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4e:	601a      	str	r2, [r3, #0]

	GPIO_InitStruct_i2c_scl.Pull = GPIO_PULLUP;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <switch_mode_sda_scl+0xc4>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct_i2c_sda.Pull = GPIO_PULLUP;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <switch_mode_sda_scl+0xc8>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	609a      	str	r2, [r3, #8]

	GPIO_InitStruct_i2c_scl.Speed = GPIO_SPEED_HIGH;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <switch_mode_sda_scl+0xc4>)
 8000f5e:	2203      	movs	r2, #3
 8000f60:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct_i2c_sda.Speed = GPIO_SPEED_HIGH;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <switch_mode_sda_scl+0xc8>)
 8000f64:	2203      	movs	r2, #3
 8000f66:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct_i2c_sda);
 8000f68:	4908      	ldr	r1, [pc, #32]	; (8000f8c <switch_mode_sda_scl+0xc8>)
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <switch_mode_sda_scl+0xdc>)
 8000f6c:	f000 ffca 	bl	8001f04 <HAL_GPIO_Init>
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct_i2c_scl);
 8000f70:	4905      	ldr	r1, [pc, #20]	; (8000f88 <switch_mode_sda_scl+0xc4>)
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <switch_mode_sda_scl+0xdc>)
 8000f74:	f000 ffc6 	bl	8001f04 <HAL_GPIO_Init>
	return TRUE;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	0800d280 	.word	0x0800d280
 8000f88:	200022c8 	.word	0x200022c8
 8000f8c:	200022b4 	.word	0x200022b4
 8000f90:	20000004 	.word	0x20000004
 8000f94:	0800d298 	.word	0x0800d298
 8000f98:	0800d2b0 	.word	0x0800d2b0
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <gpio_watcher>:

static void gpio_watcher(void){
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	while(is_init){
 8000fa8:	bf00      	nop
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <gpio_watcher+0x1c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1fb      	bne.n	8000faa <gpio_watcher+0x6>

	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20002288 	.word	0x20002288

08000fc4 <init_io>:

extern void gpio_stop(void){
	is_init = FALSE;
}

static BOOLEAN init_io(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <init_io+0x100>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a3c      	ldr	r2, [pc, #240]	; (80010c4 <init_io+0x100>)
 8000fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <init_io+0x100>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <init_io+0x100>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a35      	ldr	r2, [pc, #212]	; (80010c4 <init_io+0x100>)
 8000ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <init_io+0x100>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_SDIO_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <init_io+0x100>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <init_io+0x100>)
 800100c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <init_io+0x100>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

	 // Инит кнопки
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <init_io+0x100>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <init_io+0x100>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <init_io+0x100>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
	 GPIO_InitStruct_green_led.Pin = BLUE_BUTTON;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <init_io+0x104>)
 800103c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001040:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_green_led.Mode = GPIO_MODE_INPUT; // вход
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <init_io+0x104>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_green_led.Pull = GPIO_PULLDOWN;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <init_io+0x104>)
 800104a:	2202      	movs	r2, #2
 800104c:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_green_led.Speed = GPIO_SPEED_HIGH;
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <init_io+0x104>)
 8001050:	2203      	movs	r2, #3
 8001052:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(BLUE_BUTTON_PORT, &GPIO_InitStruct_green_led);
 8001054:	491c      	ldr	r1, [pc, #112]	; (80010c8 <init_io+0x104>)
 8001056:	481d      	ldr	r0, [pc, #116]	; (80010cc <init_io+0x108>)
 8001058:	f000 ff54 	bl	8001f04 <HAL_GPIO_Init>

	 // Инит индикатора
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <init_io+0x100>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <init_io+0x100>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <init_io+0x100>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
	 GPIO_InitStruct_blue_button.Pin = LED_GREEN;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <init_io+0x10c>)
 800107a:	2220      	movs	r2, #32
 800107c:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_blue_button.Mode = GPIO_MODE_OUTPUT_PP; // выход
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <init_io+0x10c>)
 8001080:	2201      	movs	r2, #1
 8001082:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_blue_button.Pull = GPIO_NOPULL;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <init_io+0x10c>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_blue_button.Speed = GPIO_SPEED_HIGH;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <init_io+0x10c>)
 800108c:	2203      	movs	r2, #3
 800108e:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct_blue_button);
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <init_io+0x10c>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <init_io+0x110>)
 8001094:	f000 ff36 	bl	8001f04 <HAL_GPIO_Init>


	 // Инит питания
	 GPIO_InitStruct_power.Pin = POWER;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <init_io+0x114>)
 800109a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109e:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_power.Mode = GPIO_MODE_OUTPUT_PP; // выход
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <init_io+0x114>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_power.Pull = GPIO_PULLDOWN;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <init_io+0x114>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_power.Speed = GPIO_SPEED_HIGH;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <init_io+0x114>)
 80010ae:	2203      	movs	r2, #3
 80010b0:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(POWER_PORT, &GPIO_InitStruct_power);
 80010b2:	4909      	ldr	r1, [pc, #36]	; (80010d8 <init_io+0x114>)
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <init_io+0x110>)
 80010b6:	f000 ff25 	bl	8001f04 <HAL_GPIO_Init>

	 return TRUE;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	2000228c 	.word	0x2000228c
 80010cc:	40020800 	.word	0x40020800
 80010d0:	200022a0 	.word	0x200022a0
 80010d4:	40020000 	.word	0x40020000
 80010d8:	200022dc 	.word	0x200022dc

080010dc <set_power>:

extern void set_power(GPIO_PinState state){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
     HAL_GPIO_WritePin(POWER_PORT, POWER, state);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	461a      	mov	r2, r3
 80010ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <set_power+0x20>)
 80010f0:	f001 f8a4 	bl	800223c <HAL_GPIO_WritePin>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40020000 	.word	0x40020000

08001100 <set_sda>:

extern void set_sda(GPIO_PinState state){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
     if(current_mode != GPIO_M) return;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <set_sda+0x2c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <set_sda+0x22>
	 HAL_GPIO_WritePin(SDA_PORT, SDA, state);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	461a      	mov	r2, r3
 8001116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <set_sda+0x30>)
 800111c:	f001 f88e 	bl	800223c <HAL_GPIO_WritePin>
 8001120:	e000      	b.n	8001124 <set_sda+0x24>
     if(current_mode != GPIO_M) return;
 8001122:	bf00      	nop
}
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000004 	.word	0x20000004
 8001130:	40020400 	.word	0x40020400

08001134 <set_scl>:

extern void set_scl(GPIO_PinState state){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	 if(current_mode != GPIO_M) return;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <set_scl+0x2c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d107      	bne.n	8001156 <set_scl+0x22>
	 HAL_GPIO_WritePin(SCL_PORT, SCL, state);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	461a      	mov	r2, r3
 800114a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <set_scl+0x30>)
 8001150:	f001 f874 	bl	800223c <HAL_GPIO_WritePin>
 8001154:	e000      	b.n	8001158 <set_scl+0x24>
	 if(current_mode != GPIO_M) return;
 8001156:	bf00      	nop
}
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000004 	.word	0x20000004
 8001164:	40020400 	.word	0x40020400

08001168 <set_green_led>:

extern GPIO_PinState get_current_green_led(){
	 return HAL_GPIO_ReadPin(LED_GREEN_PORT, LED_GREEN);
}

extern void set_green_led(GPIO_PinState state){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN, state);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	461a      	mov	r2, r3
 8001176:	2120      	movs	r1, #32
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <set_green_led+0x20>)
 800117a:	f001 f85f 	bl	800223c <HAL_GPIO_WritePin>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <get_current_button_state>:

extern GPIO_PinState get_current_button_state(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLUE_BUTTON_PORT, BLUE_BUTTON);
 8001190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <get_current_button_state+0x14>)
 8001196:	f001 f839 	bl	800220c <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
}
 800119c:	4618      	mov	r0, r3
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020800 	.word	0x40020800

080011a4 <i2c_init>:
#include "i2c_manager.h"

static I2C_HandleTypeDef hi2c1;

extern BOOLEAN i2c_init(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <i2c_init+0x58>)
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <i2c_init+0x5c>)
 80011ac:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <i2c_init+0x58>)
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <i2c_init+0x60>)
 80011b2:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <i2c_init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0x0;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <i2c_init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <i2c_init+0x58>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <i2c_init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <i2c_init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <i2c_init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <i2c_init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]


	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <i2c_init+0x58>)
 80011e2:	f001 f845 	bl	8002270 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <i2c_init+0x4c>
	  {
	    return FALSE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e003      	b.n	80011f8 <i2c_init+0x54>
	  }
	  switch_mode_sda_scl(I2C_M);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fe67 	bl	8000ec4 <switch_mode_sda_scl>
      return TRUE;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200022f0 	.word	0x200022f0
 8001200:	40005400 	.word	0x40005400
 8001204:	000186a0 	.word	0x000186a0

08001208 <has_device>:
    print_hex("ack data: ", data, data_size);
	return TRUE;
}


extern BOOLEAN has_device(UINT16 addr){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
	UINT8 state = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
	state = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 30, 5000);
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	b299      	uxth	r1, r3
 800121c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001220:	221e      	movs	r2, #30
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <has_device+0x48>)
 8001224:	f001 f968 	bl	80024f8 <HAL_I2C_IsDeviceReady>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
	if(state == HAL_OK){
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <has_device+0x36>
	    printf("Has device 0x%02X\n", addr);
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4619      	mov	r1, r3
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <has_device+0x4c>)
 8001238:	f00a ffba 	bl	800c1b0 <iprintf>
 800123c:	e002      	b.n	8001244 <has_device+0x3c>
	} else {
		printf("Device was not found\n");
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <has_device+0x50>)
 8001240:	f00b f824 	bl	800c28c <puts>
	}
    return TRUE;
 8001244:	2301      	movs	r3, #1
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200022f0 	.word	0x200022f0
 8001254:	0800d354 	.word	0x0800d354
 8001258:	0800d368 	.word	0x0800d368

0800125c <scan_bus_and_print>:


extern void scan_bus_and_print(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	UINT8 state = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	70fb      	strb	r3, [r7, #3]
	printf("Start scanning slaves I2C:\n");
 8001266:	481d      	ldr	r0, [pc, #116]	; (80012dc <scan_bus_and_print+0x80>)
 8001268:	f00b f810 	bl	800c28c <puts>
	for(int  i = 0; i < 128; i++){
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	e02a      	b.n	80012c8 <scan_bus_and_print+0x6c>
		state = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 30, 5000);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	b29b      	uxth	r3, r3
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	b299      	uxth	r1, r3
 800127a:	f241 3388 	movw	r3, #5000	; 0x1388
 800127e:	221e      	movs	r2, #30
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <scan_bus_and_print+0x84>)
 8001282:	f001 f939 	bl	80024f8 <HAL_I2C_IsDeviceReady>
 8001286:	4603      	mov	r3, r0
 8001288:	70fb      	strb	r3, [r7, #3]
		if(state == HAL_OK){
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d104      	bne.n	800129a <scan_bus_and_print+0x3e>
			printf(" 0x%02X", i);
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4814      	ldr	r0, [pc, #80]	; (80012e4 <scan_bus_and_print+0x88>)
 8001294:	f00a ff8c 	bl	800c1b0 <iprintf>
 8001298:	e002      	b.n	80012a0 <scan_bus_and_print+0x44>
		} else {
			printf("  .  ");
 800129a:	4813      	ldr	r0, [pc, #76]	; (80012e8 <scan_bus_and_print+0x8c>)
 800129c:	f00a ff88 	bl	800c1b0 <iprintf>
		}

		if(i % 12 == 0){
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <scan_bus_and_print+0x90>)
 80012a4:	fb83 2301 	smull	r2, r3, r3, r1
 80012a8:	105a      	asrs	r2, r3, #1
 80012aa:	17cb      	asrs	r3, r1, #31
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	1aca      	subs	r2, r1, r3
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d102      	bne.n	80012c2 <scan_bus_and_print+0x66>
			printf("\n");
 80012bc:	200a      	movs	r0, #10
 80012be:	f00a ff89 	bl	800c1d4 <putchar>
	for(int  i = 0; i < 128; i++){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3301      	adds	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b7f      	cmp	r3, #127	; 0x7f
 80012cc:	ddd1      	ble.n	8001272 <scan_bus_and_print+0x16>
		}
	}
	printf("\nStop scanning.\n");
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <scan_bus_and_print+0x94>)
 80012d0:	f00a ffdc 	bl	800c28c <puts>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	0800d380 	.word	0x0800d380
 80012e0:	200022f0 	.word	0x200022f0
 80012e4:	0800d39c 	.word	0x0800d39c
 80012e8:	0800d3a4 	.word	0x0800d3a4
 80012ec:	2aaaaaab 	.word	0x2aaaaaab
 80012f0:	0800d3ac 	.word	0x0800d3ac

080012f4 <start_indication>:
static UINT8 state = 0;
static void reset_task(void);
static void firmware_update(void);


extern void start_indication(void *argument){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	while(1){
        switch(current_task){
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <start_indication+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <start_indication+0x16>
             case 1:
            	 firmware_update();
 8001304:	f000 f806 	bl	8001314 <firmware_update>
            	 break;
 8001308:	e000      	b.n	800130c <start_indication+0x18>
             default:
            	 break;
 800130a:	bf00      	nop
        switch(current_task){
 800130c:	e7f6      	b.n	80012fc <start_indication+0x8>
 800130e:	bf00      	nop
 8001310:	20002344 	.word	0x20002344

08001314 <firmware_update>:
        }
	}
}

static void firmware_update(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	if(state == 0){
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <firmware_update+0x30>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d106      	bne.n	800132e <firmware_update+0x1a>
		state = 1;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <firmware_update+0x30>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_RESET);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff ff1e 	bl	8001168 <set_green_led>
 800132c:	e005      	b.n	800133a <firmware_update+0x26>
	} else {
	    state = 0;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <firmware_update+0x30>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_SET);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff ff17 	bl	8001168 <set_green_led>
	}
	osDelay(50);
 800133a:	2032      	movs	r0, #50	; 0x32
 800133c:	f007 fb5d 	bl	80089fa <osDelay>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20002345 	.word	0x20002345

08001348 <set_indication_task>:

extern void set_indication_task(UINT8 cmd){
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	reset_task();
 8001352:	f000 f809 	bl	8001368 <reset_task>
	current_task = cmd;
 8001356:	4a03      	ldr	r2, [pc, #12]	; (8001364 <set_indication_task+0x1c>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	7013      	strb	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20002344 	.word	0x20002344

08001368 <reset_task>:

static void reset_task(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	state = 0;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <reset_task+0x14>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
	set_green_led(GPIO_PIN_RESET);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fef8 	bl	8001168 <set_green_led>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20002345 	.word	0x20002345

08001380 <init_tasks>:
static void init_gpio_task(void *argument);
static void init_i2c_task(void *argument);
static void init_ind_task(void *argument);


extern BOOLEAN init_tasks(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
	  osKernelInitialize();
 8001386:	f007 fa25 	bl	80087d4 <osKernelInitialize>

	  UINT8 fail_cnt = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
	  gpio_taskHandle = osThreadNew(init_gpio_task, NULL, &gpio_task_attributes);
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <init_tasks+0x90>)
 8001390:	2100      	movs	r1, #0
 8001392:	4820      	ldr	r0, [pc, #128]	; (8001414 <init_tasks+0x94>)
 8001394:	f007 fa9f 	bl	80088d6 <osThreadNew>
 8001398:	4603      	mov	r3, r0
 800139a:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <init_tasks+0x98>)
 800139c:	6013      	str	r3, [r2, #0]
	  if(gpio_taskHandle == NULL){
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <init_tasks+0x98>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <init_tasks+0x32>
		 printf("Error init gpio task\n");
 80013a6:	481d      	ldr	r0, [pc, #116]	; (800141c <init_tasks+0x9c>)
 80013a8:	f00a ff70 	bl	800c28c <puts>
		 fail_cnt++;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	3301      	adds	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
	  }

	  i2c_taskHandle = osThreadNew(init_i2c_task, NULL, &i2c_task_attributes);
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <init_tasks+0xa0>)
 80013b4:	2100      	movs	r1, #0
 80013b6:	481b      	ldr	r0, [pc, #108]	; (8001424 <init_tasks+0xa4>)
 80013b8:	f007 fa8d 	bl	80088d6 <osThreadNew>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <init_tasks+0xa8>)
 80013c0:	6013      	str	r3, [r2, #0]
	  if(i2c_taskHandle == NULL){
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <init_tasks+0xa8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <init_tasks+0x56>
		 printf("Error init i2c task\n");
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <init_tasks+0xac>)
 80013cc:	f00a ff5e 	bl	800c28c <puts>
		 fail_cnt++;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	3301      	adds	r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]
	  }

	  ind_taskHandle = osThreadNew(init_ind_task, NULL, &ind_task_attributes);
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <init_tasks+0xb0>)
 80013d8:	2100      	movs	r1, #0
 80013da:	4816      	ldr	r0, [pc, #88]	; (8001434 <init_tasks+0xb4>)
 80013dc:	f007 fa7b 	bl	80088d6 <osThreadNew>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <init_tasks+0xb8>)
 80013e4:	6013      	str	r3, [r2, #0]
	  if(ind_taskHandle == NULL){
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <init_tasks+0xb8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <init_tasks+0x7a>
	 	 printf("Error init ind task\n");
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <init_tasks+0xbc>)
 80013f0:	f00a ff4c 	bl	800c28c <puts>
	 	 fail_cnt++;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	3301      	adds	r3, #1
 80013f8:	71fb      	strb	r3, [r7, #7]
	  }

	  return (fail_cnt == 0) ? TRUE : FALSE;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf0c      	ite	eq
 8001400:	2301      	moveq	r3, #1
 8001402:	2300      	movne	r3, #0
 8001404:	b2db      	uxtb	r3, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	0800d498 	.word	0x0800d498
 8001414:	08001441 	.word	0x08001441
 8001418:	20002348 	.word	0x20002348
 800141c:	0800d3e0 	.word	0x0800d3e0
 8001420:	0800d4bc 	.word	0x0800d4bc
 8001424:	0800146d 	.word	0x0800146d
 8001428:	2000234c 	.word	0x2000234c
 800142c:	0800d3f8 	.word	0x0800d3f8
 8001430:	0800d4e0 	.word	0x0800d4e0
 8001434:	08001455 	.word	0x08001455
 8001438:	20002350 	.word	0x20002350
 800143c:	0800d40c 	.word	0x0800d40c

08001440 <init_gpio_task>:


static void init_gpio_task(void *argument){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	gpio_start();
 8001448:	f7ff fd26 	bl	8000e98 <gpio_start>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <init_ind_task>:

static void init_ind_task(void *argument){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	start_indication(NULL);
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff ff49 	bl	80012f4 <start_indication>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <init_i2c_task>:



static BOOLEAN is_start = FALSE;

static void init_i2c_task(void *argument){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	set_power(GPIO_PIN_SET);
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff fe31 	bl	80010dc <set_power>
	osDelay(1000);
 800147a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147e:	f007 fabc 	bl	80089fa <osDelay>
	while(1){
		osDelay(100);
 8001482:	2064      	movs	r0, #100	; 0x64
 8001484:	f007 fab9 	bl	80089fa <osDelay>
		if(get_current_button_state() == GPIO_PIN_RESET){
 8001488:	f7ff fe80 	bl	800118c <get_current_button_state>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f7      	bne.n	8001482 <init_i2c_task+0x16>
			if(!is_start){
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <init_i2c_task+0x4c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f3      	bne.n	8001482 <init_i2c_task+0x16>
				is_start = TRUE;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <init_i2c_task+0x4c>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
				set_indication_task(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff ff51 	bl	8001348 <set_indication_task>
				update_firmware();
 80014a6:	f7ff fc1b 	bl	8000ce0 <update_firmware>
				is_start = FALSE;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <init_i2c_task+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
				set_indication_task(0);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ff49 	bl	8001348 <set_indication_task>
		osDelay(100);
 80014b6:	e7e4      	b.n	8001482 <init_i2c_task+0x16>
 80014b8:	20002354 	.word	0x20002354

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_Init+0x40>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_Init+0x40>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x40>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f94f 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff f94c 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f967 	bl	80017f2 <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f92f 	bl	800179e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	2000000c 	.word	0x2000000c
 800155c:	20000008 	.word	0x20000008

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000000c 	.word	0x2000000c
 8001584:	20002358 	.word	0x20002358

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20002358 	.word	0x20002358

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_Delay+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000000c 	.word	0x2000000c

080015e8 <__NVIC_SetPriorityGrouping>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff29 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff3e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff31 	bl	800164c <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa2 	bl	8001744 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff feb6 	bl	8001588 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e099      	b.n	800195c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001848:	e00f      	b.n	800186a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184a:	f7ff fe9d 	bl	8001588 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b05      	cmp	r3, #5
 8001856:	d908      	bls.n	800186a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e078      	b.n	800195c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e8      	bne.n	800184a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_DMA_Init+0x158>)
 8001884:	4013      	ands	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4313      	orrs	r3, r2
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0307 	bic.w	r3, r3, #7
 80018ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d117      	bne.n	800192e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fa7b 	bl	8001e0c <DMA_CheckFifoParam>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800192a:	2301      	movs	r3, #1
 800192c:	e016      	b.n	800195c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fa32 	bl	8001da0 <DMA_CalcBaseAndBitshift>
 800193c:	4603      	mov	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	223f      	movs	r2, #63	; 0x3f
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	f010803f 	.word	0xf010803f

08001968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_DMA_Start_IT+0x26>
 800198a:	2302      	movs	r3, #2
 800198c:	e040      	b.n	8001a10 <HAL_DMA_Start_IT+0xa8>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d12f      	bne.n	8001a02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f9c4 	bl	8001d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	223f      	movs	r2, #63	; 0x3f
 80019c2:	409a      	lsls	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0216 	orr.w	r2, r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0208 	orr.w	r2, r2, #8
 80019ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e005      	b.n	8001a0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a24:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_DMA_IRQHandler+0x248>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a8e      	ldr	r2, [pc, #568]	; (8001c64 <HAL_DMA_IRQHandler+0x24c>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0a9b      	lsrs	r3, r3, #10
 8001a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2208      	movs	r2, #8
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01a      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2208      	movs	r2, #8
 8001a72:	409a      	lsls	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	2201      	movs	r2, #1
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f043 0202 	orr.w	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	2204      	movs	r2, #4
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2204      	movs	r2, #4
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2210      	movs	r2, #16
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d043      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03c      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2210      	movs	r2, #16
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d018      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d108      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d024      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
 8001b46:	e01f      	b.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
 8001b58:	e016      	b.n	8001b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0208 	bic.w	r2, r2, #8
 8001b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 808f 	beq.w	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8087 	beq.w	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	2220      	movs	r2, #32
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d136      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0216 	bic.w	r2, r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <HAL_DMA_IRQHandler+0x1da>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	223f      	movs	r2, #63	; 0x3f
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d07e      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	4798      	blx	r3
        }
        return;
 8001c2e:	e079      	b.n	8001d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01d      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d031      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e02c      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000
 8001c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
 8001c78:	e01e      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0210 	bic.w	r2, r2, #16
 8001c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d032      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2205      	movs	r2, #5
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d307      	bcc.n	8001d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f2      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x2cc>
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d24:	bf00      	nop
    }
  }
}
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d108      	bne.n	8001d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d82:	e007      	b.n	8001d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3b10      	subs	r3, #16
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <DMA_CalcBaseAndBitshift+0x64>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <DMA_CalcBaseAndBitshift+0x68>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d909      	bls.n	8001de2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	1d1a      	adds	r2, r3, #4
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58
 8001de0:	e007      	b.n	8001df2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	aaaaaaab 	.word	0xaaaaaaab
 8001e08:	0800d504 	.word	0x0800d504

08001e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11f      	bne.n	8001e66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d856      	bhi.n	8001eda <DMA_CheckFifoParam+0xce>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <DMA_CheckFifoParam+0x28>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e57 	.word	0x08001e57
 8001e3c:	08001e45 	.word	0x08001e45
 8001e40:	08001edb 	.word	0x08001edb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d046      	beq.n	8001ede <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e54:	e043      	b.n	8001ede <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e5e:	d140      	bne.n	8001ee2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e64:	e03d      	b.n	8001ee2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e6e:	d121      	bne.n	8001eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d837      	bhi.n	8001ee6 <DMA_CheckFifoParam+0xda>
 8001e76:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <DMA_CheckFifoParam+0x70>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001e93 	.word	0x08001e93
 8001e84:	08001e8d 	.word	0x08001e8d
 8001e88:	08001ea5 	.word	0x08001ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e90:	e030      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d025      	beq.n	8001eea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea2:	e022      	b.n	8001eea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eac:	d11f      	bne.n	8001eee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eb2:	e01c      	b.n	8001eee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d903      	bls.n	8001ec2 <DMA_CheckFifoParam+0xb6>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d003      	beq.n	8001ec8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ec0:	e018      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec6:	e015      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed8:	e00b      	b.n	8001ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eda:	bf00      	nop
 8001edc:	e00a      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
 8001ee0:	e008      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee2:	bf00      	nop
 8001ee4:	e006      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ee6:	bf00      	nop
 8001ee8:	e004      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eea:	bf00      	nop
 8001eec:	e002      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e159      	b.n	80021d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8148 	bne.w	80021ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d005      	beq.n	8001f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d130      	bne.n	8001fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d017      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a2 	beq.w	80021ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <HAL_GPIO_Init+0x2e8>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_GPIO_Init+0x2ec>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <HAL_GPIO_Init+0x2f0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x202>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a48      	ldr	r2, [pc, #288]	; (80021f8 <HAL_GPIO_Init+0x2f4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x1fe>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a47      	ldr	r2, [pc, #284]	; (80021fc <HAL_GPIO_Init+0x2f8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x1fa>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a46      	ldr	r2, [pc, #280]	; (8002200 <HAL_GPIO_Init+0x2fc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x1f6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a45      	ldr	r2, [pc, #276]	; (8002204 <HAL_GPIO_Init+0x300>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x1f2>
 80020f2:	2304      	movs	r3, #4
 80020f4:	e008      	b.n	8002108 <HAL_GPIO_Init+0x204>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x204>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e004      	b.n	8002108 <HAL_GPIO_Init+0x204>
 80020fe:	2302      	movs	r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x204>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x204>
 8002106:	2300      	movs	r3, #0
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	4093      	lsls	r3, r2
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002118:	4935      	ldr	r1, [pc, #212]	; (80021f0 <HAL_GPIO_Init+0x2ec>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <HAL_GPIO_Init+0x304>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214a:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x304>)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_GPIO_Init+0x304>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002174:	4a24      	ldr	r2, [pc, #144]	; (8002208 <HAL_GPIO_Init+0x304>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_GPIO_Init+0x304>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c8:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	f67f aea2 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002258:	e003      	b.n	8002262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e12b      	b.n	80024da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe faa4 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d4:	f000 ff06 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a81      	ldr	r2, [pc, #516]	; (80024e4 <HAL_I2C_Init+0x274>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d807      	bhi.n	80022f4 <HAL_I2C_Init+0x84>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <HAL_I2C_Init+0x278>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e006      	b.n	8002302 <HAL_I2C_Init+0x92>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a7d      	ldr	r2, [pc, #500]	; (80024ec <HAL_I2C_Init+0x27c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	bf94      	ite	ls
 80022fc:	2301      	movls	r3, #1
 80022fe:	2300      	movhi	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0e7      	b.n	80024da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a78      	ldr	r2, [pc, #480]	; (80024f0 <HAL_I2C_Init+0x280>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0c9b      	lsrs	r3, r3, #18
 8002314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <HAL_I2C_Init+0x274>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d802      	bhi.n	8002344 <HAL_I2C_Init+0xd4>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3301      	adds	r3, #1
 8002342:	e009      	b.n	8002358 <HAL_I2C_Init+0xe8>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	4a69      	ldr	r2, [pc, #420]	; (80024f4 <HAL_I2C_Init+0x284>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	3301      	adds	r3, #1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800236a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	495c      	ldr	r1, [pc, #368]	; (80024e4 <HAL_I2C_Init+0x274>)
 8002374:	428b      	cmp	r3, r1
 8002376:	d819      	bhi.n	80023ac <HAL_I2C_Init+0x13c>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e59      	subs	r1, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fbb1 f3f3 	udiv	r3, r1, r3
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800238c:	400b      	ands	r3, r1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_I2C_Init+0x138>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e59      	subs	r1, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a6:	e051      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e04f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <HAL_I2C_Init+0x168>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e58      	subs	r0, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e012      	b.n	80023fe <HAL_I2C_Init+0x18e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Init+0x196>
 8002402:	2301      	movs	r3, #1
 8002404:	e022      	b.n	800244c <HAL_I2C_Init+0x1dc>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10e      	bne.n	800242c <HAL_I2C_Init+0x1bc>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e58      	subs	r0, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002420:	3301      	adds	r3, #1
 8002422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242a:	e00f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6809      	ldr	r1, [r1, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800247a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6911      	ldr	r1, [r2, #16]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	430b      	orrs	r3, r1
 800248e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	000186a0 	.word	0x000186a0
 80024e8:	001e847f 	.word	0x001e847f
 80024ec:	003d08ff 	.word	0x003d08ff
 80024f0:	431bde83 	.word	0x431bde83
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff f83e 	bl	8001588 <HAL_GetTick>
 800250c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	f040 8111 	bne.w	8002742 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	4988      	ldr	r1, [pc, #544]	; (800274c <HAL_I2C_IsDeviceReady+0x254>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f912 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	e104      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2C_IsDeviceReady+0x50>
 8002544:	2302      	movs	r3, #2
 8002546:	e0fd      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d007      	beq.n	800256e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2224      	movs	r2, #36	; 0x24
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a70      	ldr	r2, [pc, #448]	; (8002750 <HAL_I2C_IsDeviceReady+0x258>)
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f8d0 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d103      	bne.n	80025d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0b6      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe ffcf 	bl	8001588 <HAL_GetTick>
 80025ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800261a:	e025      	b.n	8002668 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800261c:	f7fe ffb4 	bl	8001588 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <HAL_I2C_IsDeviceReady+0x13a>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	22a0      	movs	r2, #160	; 0xa0
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b02      	cmp	r3, #2
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2ba0      	cmp	r3, #160	; 0xa0
 8002672:	d005      	beq.n	8002680 <HAL_I2C_IsDeviceReady+0x188>
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_I2C_IsDeviceReady+0x188>
 800267a:	7dbb      	ldrb	r3, [r7, #22]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0cd      	beq.n	800261c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d129      	bne.n	80026ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2319      	movs	r3, #25
 80026c2:	2201      	movs	r2, #1
 80026c4:	4921      	ldr	r1, [pc, #132]	; (800274c <HAL_I2C_IsDeviceReady+0x254>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f844 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e036      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e02c      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002702:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2319      	movs	r3, #25
 800270a:	2201      	movs	r2, #1
 800270c:	490f      	ldr	r1, [pc, #60]	; (800274c <HAL_I2C_IsDeviceReady+0x254>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f820 	bl	8002754 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e012      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3301      	adds	r3, #1
 8002722:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	f4ff af32 	bcc.w	8002592 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	00100002 	.word	0x00100002
 8002750:	ffff0000 	.word	0xffff0000

08002754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002764:	e025      	b.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d021      	beq.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7fe ff0b 	bl	8001588 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e023      	b.n	80027fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10d      	bne.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	e00c      	b.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4013      	ands	r3, r2
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d0b6      	beq.n	8002766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e267      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d075      	beq.n	800290e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d00c      	beq.n	8002848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002836:	2b08      	cmp	r3, #8
 8002838:	d112      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283a:	4b82      	ldr	r3, [pc, #520]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002846:	d10b      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05b      	beq.n	800290c <HAL_RCC_OscConfig+0x108>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d157      	bne.n	800290c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e242      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	d106      	bne.n	8002878 <HAL_RCC_OscConfig+0x74>
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a75      	ldr	r2, [pc, #468]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01d      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x98>
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6f      	ldr	r2, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6c      	ldr	r2, [pc, #432]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 800289c:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fe64 	bl	8001588 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe fe60 	bl	8001588 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e207      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xc0>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fe50 	bl	8001588 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe fe4c 	bl	8001588 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1f3      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0xe8>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292e:	2b08      	cmp	r3, #8
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d116      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1c7      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4937      	ldr	r1, [pc, #220]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	e03a      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCC_OscConfig+0x244>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fe05 	bl	8001588 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002982:	f7fe fe01 	bl	8001588 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1a8      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4925      	ldr	r1, [pc, #148]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCC_OscConfig+0x244>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fde4 	bl	8001588 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe fde0 	bl	8001588 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e187      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d036      	beq.n	8002a5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCC_OscConfig+0x248>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fdc4 	bl	8001588 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe fdc0 	bl	8001588 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e167      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x200>
 8002a22:	e01b      	b.n	8002a5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_OscConfig+0x248>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fdad 	bl	8001588 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	e00e      	b.n	8002a50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe fda9 	bl	8001588 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d907      	bls.n	8002a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e150      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470000 	.word	0x42470000
 8002a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ea      	bne.n	8002a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8097 	beq.w	8002b98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a7c      	ldr	r2, [pc, #496]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	4b77      	ldr	r3, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d118      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa6:	4b74      	ldr	r3, [pc, #464]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a73      	ldr	r2, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fd69 	bl	8001588 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe fd65 	bl	8001588 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e10c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x474>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x2ea>
 8002ae0:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a63      	ldr	r2, [pc, #396]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e01c      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x30c>
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a5e      	ldr	r2, [pc, #376]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	4b5c      	ldr	r3, [pc, #368]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a5b      	ldr	r2, [pc, #364]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002b10:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fd2a 	bl	8001588 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fd26 	bl	8001588 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0cb      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ee      	beq.n	8002b38 <HAL_RCC_OscConfig+0x334>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fd14 	bl	8001588 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fd10 	bl	8001588 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0b5      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ee      	bne.n	8002b64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a1 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d05c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d141      	bne.n	8002c3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fce4 	bl	8001588 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fce0 	bl	8001588 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e087      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	491b      	ldr	r1, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fcb9 	bl	8001588 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fcb5 	bl	8001588 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e05c      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x416>
 8002c38:	e054      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fca2 	bl	8001588 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fc9e 	bl	8001588 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e045      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x444>
 8002c66:	e03d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e038      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x4ec>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d028      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d121      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d11a      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0cc      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d08:	4b68      	ldr	r3, [pc, #416]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d90c      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b65      	ldr	r3, [pc, #404]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0b8      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a58      	ldr	r2, [pc, #352]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a52      	ldr	r2, [pc, #328]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	494d      	ldr	r1, [pc, #308]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d044      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d119      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e07f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d003      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e067      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4934      	ldr	r1, [pc, #208]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fbd0 	bl	8001588 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fe fbcc 	bl	8001588 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e04f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d20c      	bcs.n	8002e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e032      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4916      	ldr	r1, [pc, #88]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7a:	f000 f821 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	490a      	ldr	r1, [pc, #40]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fb30 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	0800d480 	.word	0x0800d480
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec4:	b094      	sub	sp, #80	; 0x50
 8002ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
 8002ecc:	2300      	movs	r3, #0
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed8:	4b79      	ldr	r3, [pc, #484]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d00d      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	f200 80e1 	bhi.w	80030ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef2:	e0db      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ef8:	e0db      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efe:	e0d8      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f00:	4b6f      	ldr	r3, [pc, #444]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d063      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f16:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	f04f 0000 	mov.w	r0, #0
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	0159      	lsls	r1, r3, #5
 8002f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f44:	0150      	lsls	r0, r2, #5
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	1a51      	subs	r1, r2, r1
 8002f4e:	6139      	str	r1, [r7, #16]
 8002f50:	4629      	mov	r1, r5
 8002f52:	eb63 0301 	sbc.w	r3, r3, r1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f64:	4659      	mov	r1, fp
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f6e:	4651      	mov	r1, sl
 8002f70:	018a      	lsls	r2, r1, #6
 8002f72:	4651      	mov	r1, sl
 8002f74:	ebb2 0801 	subs.w	r8, r2, r1
 8002f78:	4659      	mov	r1, fp
 8002f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f92:	4690      	mov	r8, r2
 8002f94:	4699      	mov	r9, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	eb18 0303 	adds.w	r3, r8, r3
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	eb49 0303 	adc.w	r3, r9, r3
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	024b      	lsls	r3, r1, #9
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	024a      	lsls	r2, r1, #9
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd0:	f7fd f956 	bl	8000280 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fdc:	e058      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	4611      	mov	r1, r2
 8002fea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fee:	623b      	str	r3, [r7, #32]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	f04f 0000 	mov.w	r0, #0
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	0159      	lsls	r1, r3, #5
 8003006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300a:	0150      	lsls	r0, r2, #5
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4641      	mov	r1, r8
 8003012:	ebb2 0a01 	subs.w	sl, r2, r1
 8003016:	4649      	mov	r1, r9
 8003018:	eb63 0b01 	sbc.w	fp, r3, r1
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003028:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800302c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003030:	ebb2 040a 	subs.w	r4, r2, sl
 8003034:	eb63 050b 	sbc.w	r5, r3, fp
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	00eb      	lsls	r3, r5, #3
 8003042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003046:	00e2      	lsls	r2, r4, #3
 8003048:	4614      	mov	r4, r2
 800304a:	461d      	mov	r5, r3
 800304c:	4643      	mov	r3, r8
 800304e:	18e3      	adds	r3, r4, r3
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	464b      	mov	r3, r9
 8003054:	eb45 0303 	adc.w	r3, r5, r3
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003066:	4629      	mov	r1, r5
 8003068:	028b      	lsls	r3, r1, #10
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003070:	4621      	mov	r1, r4
 8003072:	028a      	lsls	r2, r1, #10
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	2200      	movs	r2, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	61fa      	str	r2, [r7, #28]
 8003080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003084:	f7fd f8fc 	bl	8000280 <__aeabi_uldivmod>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4613      	mov	r3, r2
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	3301      	adds	r3, #1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030aa:	e002      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3750      	adds	r7, #80	; 0x50
 80030b8:	46bd      	mov	sp, r7
 80030ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	007a1200 	.word	0x007a1200

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a9b      	lsrs	r3, r3, #10
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	0800d490 	.word	0x0800d490

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003110:	f7ff ffdc 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0b5b      	lsrs	r3, r3, #13
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	0800d490 	.word	0x0800d490

08003134 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e022      	b.n	800318c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7fd fb8b 	bl	8000874 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2203      	movs	r2, #3
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f814 	bl	8003194 <HAL_SD_InitCard>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e00a      	b.n	800318c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b08e      	sub	sp, #56	; 0x38
 8003198:	af04      	add	r7, sp, #16
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80031b0:	2376      	movs	r3, #118	; 0x76
 80031b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681d      	ldr	r5, [r3, #0]
 80031b8:	466c      	mov	r4, sp
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031c6:	f107 0308 	add.w	r3, r7, #8
 80031ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031cc:	4628      	mov	r0, r5
 80031ce:	f001 fb0b 	bl	80047e8 <SDIO_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80031d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e04f      	b.n	8003284 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_SD_InitCard+0xf8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 fb32 	bl	8004858 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_SD_InitCard+0xf8>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80031fa:	2002      	movs	r0, #2
 80031fc:	f7fe f9d0 	bl	80015a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fe11 	bl	8003e28 <SD_PowerON>
 8003206:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e02e      	b.n	8003284 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fd30 	bl	8003c8c <SD_InitCard>
 800322c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e01b      	b.n	8003284 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fb91 	bl	800497c <SDMMC_CmdBlockLength>
 800325a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00f      	beq.n	8003282 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_SD_InitCard+0xfc>)
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3728      	adds	r7, #40	; 0x28
 8003288:	46bd      	mov	sp, r7
 800328a:	bdb0      	pop	{r4, r5, r7, pc}
 800328c:	422580a0 	.word	0x422580a0
 8003290:	004005ff 	.word	0x004005ff

08003294 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0c0      	b.n	800343e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 80b9 	bne.w	800343c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	441a      	add	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d907      	bls.n	80032ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0a7      	b.n	800343e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003320:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2200      	movs	r2, #0
 8003328:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3380      	adds	r3, #128	; 0x80
 8003358:	4619      	mov	r1, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	025b      	lsls	r3, r3, #9
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	f7fe fb01 	bl	8001968 <HAL_DMA_Start_IT>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d017      	beq.n	800339c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a33      	ldr	r2, [pc, #204]	; (8003450 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e050      	b.n	800343e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800339c:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d002      	beq.n	80033b0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	025b      	lsls	r3, r3, #9
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295
 80033b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	025b      	lsls	r3, r3, #9
 80033ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033bc:	2390      	movs	r3, #144	; 0x90
 80033be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80033c0:	2302      	movs	r3, #2
 80033c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f107 0210 	add.w	r2, r7, #16
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 faa4 	bl	8004924 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d90a      	bls.n	80033f8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2282      	movs	r2, #130	; 0x82
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fb08 	bl	8004a04 <SDMMC_CmdReadMultiBlock>
 80033f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80033f6:	e009      	b.n	800340c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2281      	movs	r2, #129	; 0x81
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003404:	4618      	mov	r0, r3
 8003406:	f001 fadb 	bl	80049c0 <SDMMC_CmdReadSingleBlock>
 800340a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a0e      	ldr	r2, [pc, #56]	; (8003450 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e002      	b.n	800343e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	; 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	08003b77 	.word	0x08003b77
 800344c:	08003be9 	.word	0x08003be9
 8003450:	004005ff 	.word	0x004005ff
 8003454:	4225858c 	.word	0x4225858c

08003458 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	; 0x30
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0c5      	b.n	800360c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	f040 80be 	bne.w	800360a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	441a      	add	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	429a      	cmp	r2, r3
 80034a0:	d907      	bls.n	80034b2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0ac      	b.n	800360c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	4a4e      	ldr	r2, [pc, #312]	; (8003614 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	4a4d      	ldr	r2, [pc, #308]	; (8003618 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80034e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d002      	beq.n	80034fc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	025b      	lsls	r3, r3, #9
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d90a      	bls.n	8003518 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	22a0      	movs	r2, #160	; 0xa0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fabc 	bl	8004a8c <SDMMC_CmdWriteMultiBlock>
 8003514:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003516:	e009      	b.n	800352c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2290      	movs	r2, #144	; 0x90
 800351c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fa8f 	bl	8004a48 <SDMMC_CmdWriteSingleBlock>
 800352a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a39      	ldr	r2, [pc, #228]	; (800361c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e059      	b.n	800360c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3380      	adds	r3, #128	; 0x80
 800358e:	461a      	mov	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	025b      	lsls	r3, r3, #9
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	f7fe f9e7 	bl	8001968 <HAL_DMA_Start_IT>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01c      	beq.n	80035da <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80035ae:	f023 0302 	bic.w	r3, r3, #2
 80035b2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e018      	b.n	800360c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	025b      	lsls	r3, r3, #9
 80035e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80035e6:	2390      	movs	r3, #144	; 0x90
 80035e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f107 0210 	add.w	r2, r7, #16
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f98f 	bl	8004924 <SDIO_ConfigData>

      return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3730      	adds	r7, #48	; 0x30
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	08003b4d 	.word	0x08003b4d
 8003618:	08003be9 	.word	0x08003be9
 800361c:	004005ff 	.word	0x004005ff
 8003620:	4225858c 	.word	0x4225858c

08003624 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003646:	0f9b      	lsrs	r3, r3, #30
 8003648:	b2da      	uxtb	r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	b2da      	uxtb	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003664:	0e1b      	lsrs	r3, r3, #24
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	b2da      	uxtb	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003676:	0c1b      	lsrs	r3, r3, #16
 8003678:	b2da      	uxtb	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	b2da      	uxtb	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368e:	b2da      	uxtb	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003698:	0d1b      	lsrs	r3, r3, #20
 800369a:	b29a      	uxth	r2, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b6:	0bdb      	lsrs	r3, r3, #15
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c8:	0b9b      	lsrs	r3, r3, #14
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036da:	0b5b      	lsrs	r3, r3, #13
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ec:	0b1b      	lsrs	r3, r3, #12
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2200      	movs	r2, #0
 80036fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	2b00      	cmp	r3, #0
 8003706:	d163      	bne.n	80037d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800370c:	009a      	lsls	r2, r3, #2
 800370e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003712:	4013      	ands	r3, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003718:	0f92      	lsrs	r2, r2, #30
 800371a:	431a      	orrs	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003724:	0edb      	lsrs	r3, r3, #27
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	b2da      	uxtb	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003736:	0e1b      	lsrs	r3, r3, #24
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	b2da      	uxtb	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003748:	0d5b      	lsrs	r3, r3, #21
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	b2da      	uxtb	r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375a:	0c9b      	lsrs	r3, r3, #18
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	b2da      	uxtb	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376c:	0bdb      	lsrs	r3, r3, #15
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	b2da      	uxtb	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	7e1b      	ldrb	r3, [r3, #24]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	3302      	adds	r3, #2
 8003790:	2201      	movs	r2, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800379a:	fb03 f202 	mul.w	r2, r3, r2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7a1b      	ldrb	r3, [r3, #8]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	2201      	movs	r2, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80037bc:	0a52      	lsrs	r2, r2, #9
 80037be:	fb03 f202 	mul.w	r2, r3, r2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037cc:	661a      	str	r2, [r3, #96]	; 0x60
 80037ce:	e031      	b.n	8003834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d11d      	bne.n	8003814 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e6:	0c1b      	lsrs	r3, r3, #16
 80037e8:	431a      	orrs	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	3301      	adds	r3, #1
 80037f4:	029a      	lsls	r2, r3, #10
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003808:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	661a      	str	r2, [r3, #96]	; 0x60
 8003812:	e00f      	b.n	8003834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a58      	ldr	r2, [pc, #352]	; (800397c <HAL_SD_GetCardCSD+0x344>)
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e09d      	b.n	8003970 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003838:	0b9b      	lsrs	r3, r3, #14
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384a:	09db      	lsrs	r3, r3, #7
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003852:	b2da      	uxtb	r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003862:	b2da      	uxtb	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	0fdb      	lsrs	r3, r3, #31
 800386e:	b2da      	uxtb	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	0f5b      	lsrs	r3, r3, #29
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	b2da      	uxtb	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	0e9b      	lsrs	r3, r3, #26
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	b2da      	uxtb	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	0d9b      	lsrs	r3, r3, #22
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	0d5b      	lsrs	r3, r3, #21
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	0c1b      	lsrs	r3, r3, #16
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	0bdb      	lsrs	r3, r3, #15
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	0b9b      	lsrs	r3, r3, #14
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	0b5b      	lsrs	r3, r3, #13
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	b2da      	uxtb	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	0b1b      	lsrs	r3, r3, #12
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	0a9b      	lsrs	r3, r3, #10
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	b2da      	uxtb	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	b2da      	uxtb	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395e:	b2da      	uxtb	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	004005ff 	.word	0x004005ff

08003980 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80039d8:	b5b0      	push	{r4, r5, r7, lr}
 80039da:	b08e      	sub	sp, #56	; 0x38
 80039dc:	af04      	add	r7, sp, #16
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2203      	movs	r2, #3
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d02e      	beq.n	8003a56 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fe:	d106      	bne.n	8003a0e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a0c:	e029      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a14:	d10a      	bne.n	8003a2c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fabc 	bl	8003f94 <SD_WideBus_Enable>
 8003a1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
 8003a2a:	e01a      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 faf9 	bl	800402a <SD_WideBus_Disable>
 8003a38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
 8003a46:	e00c      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
 8003a54:	e005      	b.n	8003a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a80:	e01f      	b.n	8003ac2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681d      	ldr	r5, [r3, #0]
 8003aa8:	466c      	mov	r4, sp
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ab6:	f107 0308 	add.w	r3, r7, #8
 8003aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 fe93 	bl	80047e8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 ff56 	bl	800497c <SDMMC_CmdBlockLength>
 8003ad0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003ade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3728      	adds	r7, #40	; 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bdb0      	pop	{r4, r5, r7, pc}
 8003b06:	bf00      	nop
 8003b08:	004005ff 	.word	0x004005ff

08003b0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa10 	bl	8003f44 <SD_SendStatus>
 8003b24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	0a5b      	lsrs	r3, r3, #9
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003b42:	693b      	ldr	r3, [r7, #16]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	2b82      	cmp	r3, #130	; 0x82
 8003b8a:	d111      	bne.n	8003bb0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 ff9d 	bl	8004ad0 <SDMMC_CmdStopTransfer>
 8003b96:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7ff fd3a 	bl	8003624 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0208 	bic.w	r2, r2, #8
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f001 fbf9 	bl	80053d0 <HAL_SD_RxCpltCallback>
#endif
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fe f898 	bl	8001d2c <HAL_DMA_GetError>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d03e      	beq.n	8003c80 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d002      	beq.n	8003c1e <SD_DMAError+0x36>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d12d      	bne.n	8003c7a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <SD_DMAError+0xa0>)
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003c42:	6978      	ldr	r0, [r7, #20]
 8003c44:	f7ff ff62 	bl	8003b0c <HAL_SD_GetCardState>
 8003c48:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d002      	beq.n	8003c56 <SD_DMAError+0x6e>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d10a      	bne.n	8003c6c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 ff38 	bl	8004ad0 <SDMMC_CmdStopTransfer>
 8003c60:	4602      	mov	r2, r0
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	431a      	orrs	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff fcd2 	bl	8003624 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003c80:	bf00      	nop
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	004005ff 	.word	0x004005ff

08003c8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c8c:	b5b0      	push	{r4, r5, r7, lr}
 8003c8e:	b094      	sub	sp, #80	; 0x50
 8003c90:	af04      	add	r7, sp, #16
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fde9 	bl	8004874 <SDIO_GetPowerState>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ca8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cac:	e0b8      	b.n	8003e20 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d02f      	beq.n	8003d16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f812 	bl	8004ce4 <SDMMC_CmdSendCID>
 8003cc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <SD_InitCard+0x40>
    {
      return errorstate;
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	e0a9      	b.n	8003e20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fe13 	bl	80048fe <SDIO_GetResponse>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fe0a 	bl	80048fe <SDIO_GetResponse>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2108      	movs	r1, #8
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fe01 	bl	80048fe <SDIO_GetResponse>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	210c      	movs	r1, #12
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fdf8 	bl	80048fe <SDIO_GetResponse>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d00d      	beq.n	8003d3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f107 020e 	add.w	r2, r7, #14
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 f818 	bl	8004d5e <SDMMC_CmdSetRelAdd>
 8003d2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <SD_InitCard+0xae>
    {
      return errorstate;
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	e072      	b.n	8003e20 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d036      	beq.n	8003db0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003d42:	89fb      	ldrh	r3, [r7, #14]
 8003d44:	461a      	mov	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f000 ffe2 	bl	8004d20 <SDMMC_CmdSendCSD>
 8003d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d66:	e05b      	b.n	8003e20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fdc5 	bl	80048fe <SDIO_GetResponse>
 8003d74:	4602      	mov	r2, r0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2104      	movs	r1, #4
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fdbc 	bl	80048fe <SDIO_GetResponse>
 8003d86:	4602      	mov	r2, r0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2108      	movs	r1, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fdb3 	bl	80048fe <SDIO_GetResponse>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	210c      	movs	r1, #12
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fdaa 	bl	80048fe <SDIO_GetResponse>
 8003daa:	4602      	mov	r2, r0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2104      	movs	r1, #4
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fda1 	bl	80048fe <SDIO_GetResponse>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	0d1a      	lsrs	r2, r3, #20
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003dc4:	f107 0310 	add.w	r3, r7, #16
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fc34 	bl	8003638 <HAL_SD_GetCardCSD>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003dda:	e021      	b.n	8003e20 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	2200      	movs	r2, #0
 8003de8:	461c      	mov	r4, r3
 8003dea:	4615      	mov	r5, r2
 8003dec:	4622      	mov	r2, r4
 8003dee:	462b      	mov	r3, r5
 8003df0:	4608      	mov	r0, r1
 8003df2:	f000 fe8f 	bl	8004b14 <SDMMC_CmdSelDesel>
 8003df6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <SD_InitCard+0x176>
  {
    return errorstate;
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	e00e      	b.n	8003e20 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681d      	ldr	r5, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	466c      	mov	r4, sp
 8003e0a:	f103 0210 	add.w	r2, r3, #16
 8003e0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e14:	3304      	adds	r3, #4
 8003e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 fce5 	bl	80047e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3740      	adds	r7, #64	; 0x40
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bdb0      	pop	{r4, r5, r7, pc}

08003e28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fe8a 	bl	8004b5a <SDMMC_CmdGoIdleState>
 8003e46:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	e072      	b.n	8003f38 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fe9d 	bl	8004b96 <SDMMC_CmdOperCond>
 8003e5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fe73 	bl	8004b5a <SDMMC_CmdGoIdleState>
 8003e74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	e05b      	b.n	8003f38 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d137      	bne.n	8003efe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fe9d 	bl	8004bd4 <SDMMC_CmdAppCommand>
 8003e9a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02d      	beq.n	8003efe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ea2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ea6:	e047      	b.n	8003f38 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fe90 	bl	8004bd4 <SDMMC_CmdAppCommand>
 8003eb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <SD_PowerON+0x98>
    {
      return errorstate;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	e03b      	b.n	8003f38 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	491e      	ldr	r1, [pc, #120]	; (8003f40 <SD_PowerON+0x118>)
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fea6 	bl	8004c18 <SDMMC_CmdAppOperCommand>
 8003ecc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ed8:	e02e      	b.n	8003f38 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fd0c 	bl	80048fe <SDIO_GetResponse>
 8003ee6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	0fdb      	lsrs	r3, r3, #31
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <SD_PowerON+0xcc>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <SD_PowerON+0xce>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]

    count++;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3301      	adds	r3, #1
 8003efc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d802      	bhi.n	8003f0e <SD_PowerON+0xe6>
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0cc      	beq.n	8003ea8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d902      	bls.n	8003f1e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f1c:	e00c      	b.n	8003f38 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f2e:	e002      	b.n	8003f36 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	c1100000 	.word	0xc1100000

08003f44 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003f54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f58:	e018      	b.n	8003f8c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 ff1a 	bl	8004da0 <SDMMC_CmdSendStatus>
 8003f6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	e009      	b.n	8003f8c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fcbd 	bl	80048fe <SDIO_GetResponse>
 8003f84:	4602      	mov	r2, r0
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fca7 	bl	80048fe <SDIO_GetResponse>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fba:	d102      	bne.n	8003fc2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fc0:	e02f      	b.n	8004022 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003fc2:	f107 030c 	add.w	r3, r7, #12
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f879 	bl	80040c0 <SD_FindSCR>
 8003fce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	e023      	b.n	8004022 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01c      	beq.n	800401e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f000 fdef 	bl	8004bd4 <SDMMC_CmdAppCommand>
 8003ff6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	e00f      	b.n	8004022 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fe28 	bl	8004c5e <SDMMC_CmdBusWidth>
 800400e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	e003      	b.n	8004022 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800401a:	2300      	movs	r3, #0
 800401c:	e001      	b.n	8004022 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800401e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2100      	movs	r1, #0
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fc5c 	bl	80048fe <SDIO_GetResponse>
 8004046:	4603      	mov	r3, r0
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004050:	d102      	bne.n	8004058 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004056:	e02f      	b.n	80040b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f82e 	bl	80040c0 <SD_FindSCR>
 8004064:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	e023      	b.n	80040b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01c      	beq.n	80040b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 fda4 	bl	8004bd4 <SDMMC_CmdAppCommand>
 800408c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	e00f      	b.n	80040b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fddd 	bl	8004c5e <SDMMC_CmdBusWidth>
 80040a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	e003      	b.n	80040b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e001      	b.n	80040b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80040b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b08f      	sub	sp, #60	; 0x3c
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040ca:	f7fd fa5d 	bl	8001588 <HAL_GetTick>
 80040ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2108      	movs	r1, #8
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fc48 	bl	800497c <SDMMC_CmdBlockLength>
 80040ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	e0b2      	b.n	800425e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fd65 	bl	8004bd4 <SDMMC_CmdAppCommand>
 800410a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	e0a3      	b.n	800425e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800411c:	2308      	movs	r3, #8
 800411e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004120:	2330      	movs	r3, #48	; 0x30
 8004122:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004124:	2302      	movs	r3, #2
 8004126:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004128:	2300      	movs	r3, #0
 800412a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800412c:	2301      	movs	r3, #1
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f107 0210 	add.w	r2, r7, #16
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fbf2 	bl	8004924 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fdac 	bl	8004ca2 <SDMMC_CmdSendSCR>
 800414a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02a      	beq.n	80041a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	e083      	b.n	800425e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f107 0208 	add.w	r2, r7, #8
 8004170:	18d4      	adds	r4, r2, r3
 8004172:	4608      	mov	r0, r1
 8004174:	f000 fb63 	bl	800483e <SDIO_ReadFIFO>
 8004178:	4603      	mov	r3, r0
 800417a:	6023      	str	r3, [r4, #0]
      index++;
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	3301      	adds	r3, #1
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
 8004182:	e006      	b.n	8004192 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d012      	beq.n	80041b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004192:	f7fd f9f9 	bl	8001588 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d102      	bne.n	80041a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80041a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041a6:	e05a      	b.n	800425e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0cf      	beq.n	8004156 <SD_FindSCR+0x96>
 80041b6:	e000      	b.n	80041ba <SD_FindSCR+0xfa>
      break;
 80041b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2208      	movs	r2, #8
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80041d0:	2308      	movs	r3, #8
 80041d2:	e044      	b.n	800425e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2202      	movs	r2, #2
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80041ea:	2302      	movs	r3, #2
 80041ec:	e037      	b.n	800425e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2220      	movs	r2, #32
 8004202:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004204:	2320      	movs	r3, #32
 8004206:	e02a      	b.n	800425e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004210:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	061a      	lsls	r2, r3, #24
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800421e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004228:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	0e1b      	lsrs	r3, r3, #24
 800422e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	601a      	str	r2, [r3, #0]
    scr++;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	3304      	adds	r3, #4
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	061a      	lsls	r2, r3, #24
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004246:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004250:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	373c      	adds	r7, #60	; 0x3c
 8004262:	46bd      	mov	sp, r7
 8004264:	bd90      	pop	{r4, r7, pc}

08004266 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e03f      	b.n	80042f8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fc fbdb 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2224      	movs	r2, #36	; 0x24
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f828 	bl	8004300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b0c0      	sub	sp, #256	; 0x100
 8004306:	af00      	add	r7, sp, #0
 8004308:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	68d9      	ldr	r1, [r3, #12]
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	ea40 0301 	orr.w	r3, r0, r1
 8004328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	431a      	orrs	r2, r3
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	431a      	orrs	r2, r3
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004358:	f021 010c 	bic.w	r1, r1, #12
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004366:	430b      	orrs	r3, r1
 8004368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	6999      	ldr	r1, [r3, #24]
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	ea40 0301 	orr.w	r3, r0, r1
 8004386:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b8f      	ldr	r3, [pc, #572]	; (80045cc <UART_SetConfig+0x2cc>)
 8004390:	429a      	cmp	r2, r3
 8004392:	d005      	beq.n	80043a0 <UART_SetConfig+0xa0>
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b8d      	ldr	r3, [pc, #564]	; (80045d0 <UART_SetConfig+0x2d0>)
 800439c:	429a      	cmp	r2, r3
 800439e:	d104      	bne.n	80043aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043a0:	f7fe feb4 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80043a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043a8:	e003      	b.n	80043b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043aa:	f7fe fe9b 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80043ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043bc:	f040 810c 	bne.w	80045d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043d2:	4622      	mov	r2, r4
 80043d4:	462b      	mov	r3, r5
 80043d6:	1891      	adds	r1, r2, r2
 80043d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80043da:	415b      	adcs	r3, r3
 80043dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043e2:	4621      	mov	r1, r4
 80043e4:	eb12 0801 	adds.w	r8, r2, r1
 80043e8:	4629      	mov	r1, r5
 80043ea:	eb43 0901 	adc.w	r9, r3, r1
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004402:	4690      	mov	r8, r2
 8004404:	4699      	mov	r9, r3
 8004406:	4623      	mov	r3, r4
 8004408:	eb18 0303 	adds.w	r3, r8, r3
 800440c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004410:	462b      	mov	r3, r5
 8004412:	eb49 0303 	adc.w	r3, r9, r3
 8004416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004426:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800442a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800442e:	460b      	mov	r3, r1
 8004430:	18db      	adds	r3, r3, r3
 8004432:	653b      	str	r3, [r7, #80]	; 0x50
 8004434:	4613      	mov	r3, r2
 8004436:	eb42 0303 	adc.w	r3, r2, r3
 800443a:	657b      	str	r3, [r7, #84]	; 0x54
 800443c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004440:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004444:	f7fb ff1c 	bl	8000280 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <UART_SetConfig+0x2d4>)
 800444e:	fba3 2302 	umull	r2, r3, r3, r2
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	011c      	lsls	r4, r3, #4
 8004456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445a:	2200      	movs	r2, #0
 800445c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004460:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004464:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	1891      	adds	r1, r2, r2
 800446e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004470:	415b      	adcs	r3, r3
 8004472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004478:	4641      	mov	r1, r8
 800447a:	eb12 0a01 	adds.w	sl, r2, r1
 800447e:	4649      	mov	r1, r9
 8004480:	eb43 0b01 	adc.w	fp, r3, r1
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004490:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004498:	4692      	mov	sl, r2
 800449a:	469b      	mov	fp, r3
 800449c:	4643      	mov	r3, r8
 800449e:	eb1a 0303 	adds.w	r3, sl, r3
 80044a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044a6:	464b      	mov	r3, r9
 80044a8:	eb4b 0303 	adc.w	r3, fp, r3
 80044ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044c4:	460b      	mov	r3, r1
 80044c6:	18db      	adds	r3, r3, r3
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ca:	4613      	mov	r3, r2
 80044cc:	eb42 0303 	adc.w	r3, r2, r3
 80044d0:	647b      	str	r3, [r7, #68]	; 0x44
 80044d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044da:	f7fb fed1 	bl	8000280 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <UART_SetConfig+0x2d4>)
 80044e6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2264      	movs	r2, #100	; 0x64
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	1acb      	subs	r3, r1, r3
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <UART_SetConfig+0x2d4>)
 80044fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004508:	441c      	add	r4, r3
 800450a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004514:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004518:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	1891      	adds	r1, r2, r2
 8004522:	63b9      	str	r1, [r7, #56]	; 0x38
 8004524:	415b      	adcs	r3, r3
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800452c:	4641      	mov	r1, r8
 800452e:	1851      	adds	r1, r2, r1
 8004530:	6339      	str	r1, [r7, #48]	; 0x30
 8004532:	4649      	mov	r1, r9
 8004534:	414b      	adcs	r3, r1
 8004536:	637b      	str	r3, [r7, #52]	; 0x34
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004544:	4659      	mov	r1, fp
 8004546:	00cb      	lsls	r3, r1, #3
 8004548:	4651      	mov	r1, sl
 800454a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454e:	4651      	mov	r1, sl
 8004550:	00ca      	lsls	r2, r1, #3
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4603      	mov	r3, r0
 8004558:	4642      	mov	r2, r8
 800455a:	189b      	adds	r3, r3, r2
 800455c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004560:	464b      	mov	r3, r9
 8004562:	460a      	mov	r2, r1
 8004564:	eb42 0303 	adc.w	r3, r2, r3
 8004568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004578:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800457c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004580:	460b      	mov	r3, r1
 8004582:	18db      	adds	r3, r3, r3
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
 8004586:	4613      	mov	r3, r2
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004592:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004596:	f7fb fe73 	bl	8000280 <__aeabi_uldivmod>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <UART_SetConfig+0x2d4>)
 80045a0:	fba3 1302 	umull	r1, r3, r3, r2
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	2164      	movs	r1, #100	; 0x64
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	3332      	adds	r3, #50	; 0x32
 80045b2:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <UART_SetConfig+0x2d4>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	f003 0207 	and.w	r2, r3, #7
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4422      	add	r2, r4
 80045c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045c8:	e106      	b.n	80047d8 <UART_SetConfig+0x4d8>
 80045ca:	bf00      	nop
 80045cc:	40011000 	.word	0x40011000
 80045d0:	40011400 	.word	0x40011400
 80045d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045ea:	4642      	mov	r2, r8
 80045ec:	464b      	mov	r3, r9
 80045ee:	1891      	adds	r1, r2, r2
 80045f0:	6239      	str	r1, [r7, #32]
 80045f2:	415b      	adcs	r3, r3
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
 80045f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045fa:	4641      	mov	r1, r8
 80045fc:	1854      	adds	r4, r2, r1
 80045fe:	4649      	mov	r1, r9
 8004600:	eb43 0501 	adc.w	r5, r3, r1
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	00eb      	lsls	r3, r5, #3
 800460e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004612:	00e2      	lsls	r2, r4, #3
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	4643      	mov	r3, r8
 800461a:	18e3      	adds	r3, r4, r3
 800461c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004620:	464b      	mov	r3, r9
 8004622:	eb45 0303 	adc.w	r3, r5, r3
 8004626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004636:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004646:	4629      	mov	r1, r5
 8004648:	008b      	lsls	r3, r1, #2
 800464a:	4621      	mov	r1, r4
 800464c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004650:	4621      	mov	r1, r4
 8004652:	008a      	lsls	r2, r1, #2
 8004654:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004658:	f7fb fe12 	bl	8000280 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4b60      	ldr	r3, [pc, #384]	; (80047e4 <UART_SetConfig+0x4e4>)
 8004662:	fba3 2302 	umull	r2, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	011c      	lsls	r4, r3, #4
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004674:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004678:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	1891      	adds	r1, r2, r2
 8004682:	61b9      	str	r1, [r7, #24]
 8004684:	415b      	adcs	r3, r3
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800468c:	4641      	mov	r1, r8
 800468e:	1851      	adds	r1, r2, r1
 8004690:	6139      	str	r1, [r7, #16]
 8004692:	4649      	mov	r1, r9
 8004694:	414b      	adcs	r3, r1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a4:	4659      	mov	r1, fp
 80046a6:	00cb      	lsls	r3, r1, #3
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ae:	4651      	mov	r1, sl
 80046b0:	00ca      	lsls	r2, r1, #3
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	4642      	mov	r2, r8
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046c0:	464b      	mov	r3, r9
 80046c2:	460a      	mov	r2, r1
 80046c4:	eb42 0303 	adc.w	r3, r2, r3
 80046c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046e4:	4649      	mov	r1, r9
 80046e6:	008b      	lsls	r3, r1, #2
 80046e8:	4641      	mov	r1, r8
 80046ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ee:	4641      	mov	r1, r8
 80046f0:	008a      	lsls	r2, r1, #2
 80046f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046f6:	f7fb fdc3 	bl	8000280 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	4b38      	ldr	r3, [pc, #224]	; (80047e4 <UART_SetConfig+0x4e4>)
 8004702:	fba3 2301 	umull	r2, r3, r3, r1
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2264      	movs	r2, #100	; 0x64
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	1acb      	subs	r3, r1, r3
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	3332      	adds	r3, #50	; 0x32
 8004714:	4a33      	ldr	r2, [pc, #204]	; (80047e4 <UART_SetConfig+0x4e4>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004720:	441c      	add	r4, r3
 8004722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004726:	2200      	movs	r2, #0
 8004728:	673b      	str	r3, [r7, #112]	; 0x70
 800472a:	677a      	str	r2, [r7, #116]	; 0x74
 800472c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	415b      	adcs	r3, r3
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004740:	4641      	mov	r1, r8
 8004742:	1851      	adds	r1, r2, r1
 8004744:	6039      	str	r1, [r7, #0]
 8004746:	4649      	mov	r1, r9
 8004748:	414b      	adcs	r3, r1
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004758:	4659      	mov	r1, fp
 800475a:	00cb      	lsls	r3, r1, #3
 800475c:	4651      	mov	r1, sl
 800475e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004762:	4651      	mov	r1, sl
 8004764:	00ca      	lsls	r2, r1, #3
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	4603      	mov	r3, r0
 800476c:	4642      	mov	r2, r8
 800476e:	189b      	adds	r3, r3, r2
 8004770:	66bb      	str	r3, [r7, #104]	; 0x68
 8004772:	464b      	mov	r3, r9
 8004774:	460a      	mov	r2, r1
 8004776:	eb42 0303 	adc.w	r3, r2, r3
 800477a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	663b      	str	r3, [r7, #96]	; 0x60
 8004786:	667a      	str	r2, [r7, #100]	; 0x64
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004794:	4649      	mov	r1, r9
 8004796:	008b      	lsls	r3, r1, #2
 8004798:	4641      	mov	r1, r8
 800479a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479e:	4641      	mov	r1, r8
 80047a0:	008a      	lsls	r2, r1, #2
 80047a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047a6:	f7fb fd6b 	bl	8000280 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <UART_SetConfig+0x4e4>)
 80047b0:	fba3 1302 	umull	r1, r3, r3, r2
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	2164      	movs	r1, #100	; 0x64
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	3332      	adds	r3, #50	; 0x32
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <UART_SetConfig+0x4e4>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	f003 020f 	and.w	r2, r3, #15
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4422      	add	r2, r4
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047de:	46bd      	mov	sp, r7
 80047e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e4:	51eb851f 	.word	0x51eb851f

080047e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80047e8:	b084      	sub	sp, #16
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	f107 001c 	add.w	r0, r7, #28
 80047f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80047fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004800:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004802:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004806:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800480a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800480e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004812:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	b004      	add	sp, #16
 800483c:	4770      	bx	lr

0800483e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2203      	movs	r2, #3
 8004864:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0303 	and.w	r3, r3, #3
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80048b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80048ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80048ca:	f023 030f 	bic.w	r3, r3, #15
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	b2db      	uxtb	r3, r3
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3314      	adds	r3, #20
 800490c:	461a      	mov	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	4413      	add	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
}  
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800494a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004950:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004956:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800496e:	2300      	movs	r3, #0

}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800498a:	2310      	movs	r3, #16
 800498c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800498e:	2340      	movs	r3, #64	; 0x40
 8004990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800499c:	f107 0308 	add.w	r3, r7, #8
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ff74 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	2110      	movs	r1, #16
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa18 	bl	8004de4 <SDMMC_GetCmdResp1>
 80049b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049b6:	69fb      	ldr	r3, [r7, #28]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80049ce:	2311      	movs	r3, #17
 80049d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049d2:	2340      	movs	r3, #64	; 0x40
 80049d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049e0:	f107 0308 	add.w	r3, r7, #8
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ff52 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80049ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f0:	2111      	movs	r1, #17
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9f6 	bl	8004de4 <SDMMC_GetCmdResp1>
 80049f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049fa:	69fb      	ldr	r3, [r7, #28]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004a12:	2312      	movs	r3, #18
 8004a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a24:	f107 0308 	add.w	r3, r7, #8
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ff30 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	2112      	movs	r1, #18
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f9d4 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004a56:	2318      	movs	r3, #24
 8004a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a5a:	2340      	movs	r3, #64	; 0x40
 8004a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a68:	f107 0308 	add.w	r3, r7, #8
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff ff0e 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	2118      	movs	r1, #24
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9b2 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a82:	69fb      	ldr	r3, [r7, #28]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004a9a:	2319      	movs	r3, #25
 8004a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a9e:	2340      	movs	r3, #64	; 0x40
 8004aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff feec 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	2119      	movs	r1, #25
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f990 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004adc:	230c      	movs	r3, #12
 8004ade:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ae0:	2340      	movs	r3, #64	; 0x40
 8004ae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff fecb 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004afa:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <SDMMC_CmdStopTransfer+0x40>)
 8004afc:	210c      	movs	r1, #12
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f970 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b06:	69fb      	ldr	r3, [r7, #28]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	05f5e100 	.word	0x05f5e100

08004b14 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	; 0x28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004b24:	2307      	movs	r3, #7
 8004b26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b28:	2340      	movs	r3, #64	; 0x40
 8004b2a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b34:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b36:	f107 0310 	add.w	r3, r7, #16
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff fea7 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	2107      	movs	r1, #7
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f94b 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004b4e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b088      	sub	sp, #32
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b78:	f107 0308 	add.w	r3, r7, #8
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fe86 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb65 	bl	8005254 <SDMMC_GetCmdError>
 8004b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b088      	sub	sp, #32
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004b9e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004ba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bb6:	f107 0308 	add.w	r3, r7, #8
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fe67 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 faf8 	bl	80051b8 <SDMMC_GetCmdResp7>
 8004bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bca:	69fb      	ldr	r3, [r7, #28]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004be2:	2337      	movs	r3, #55	; 0x37
 8004be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004be6:	2340      	movs	r3, #64	; 0x40
 8004be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bf4:	f107 0308 	add.w	r3, r7, #8
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fe48 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	2137      	movs	r1, #55	; 0x37
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8ec 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004c0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004c2e:	2329      	movs	r3, #41	; 0x29
 8004c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe22 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f9ff 	bl	8005050 <SDMMC_GetCmdResp3>
 8004c52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c54:	69fb      	ldr	r3, [r7, #28]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c70:	2340      	movs	r3, #64	; 0x40
 8004c72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fe03 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	2106      	movs	r1, #6
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8a7 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004c96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c98:	69fb      	ldr	r3, [r7, #28]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b088      	sub	sp, #32
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004cae:	2333      	movs	r3, #51	; 0x33
 8004cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cb2:	2340      	movs	r3, #64	; 0x40
 8004cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cc0:	f107 0308 	add.w	r3, r7, #8
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff fde2 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	2133      	movs	r1, #51	; 0x33
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f886 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cda:	69fb      	ldr	r3, [r7, #28]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004cf4:	23c0      	movs	r3, #192	; 0xc0
 8004cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fdc1 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f956 	bl	8004fc0 <SDMMC_GetCmdResp2>
 8004d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d16:	69fb      	ldr	r3, [r7, #28]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004d2e:	2309      	movs	r3, #9
 8004d30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d32:	23c0      	movs	r3, #192	; 0xc0
 8004d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d40:	f107 0308 	add.w	r3, r7, #8
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fda2 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f937 	bl	8004fc0 <SDMMC_GetCmdResp2>
 8004d52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d54:	69fb      	ldr	r3, [r7, #28]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fd83 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	2103      	movs	r1, #3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f99c 	bl	80050cc <SDMMC_GetCmdResp6>
 8004d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d96:	69fb      	ldr	r3, [r7, #28]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004dae:	230d      	movs	r3, #13
 8004db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004db2:	2340      	movs	r3, #64	; 0x40
 8004db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff fd62 	bl	8004890 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd0:	210d      	movs	r1, #13
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f806 	bl	8004de4 <SDMMC_GetCmdResp1>
 8004dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dda:	69fb      	ldr	r3, [r7, #28]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	460b      	mov	r3, r1
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004df2:	4b70      	ldr	r3, [pc, #448]	; (8004fb4 <SDMMC_GetCmdResp1+0x1d0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a70      	ldr	r2, [pc, #448]	; (8004fb8 <SDMMC_GetCmdResp1+0x1d4>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	0a5a      	lsrs	r2, r3, #9
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	1e5a      	subs	r2, r3, #1
 8004e0a:	61fa      	str	r2, [r7, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e14:	e0c9      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ef      	beq.n	8004e06 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ea      	bne.n	8004e06 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e42:	2304      	movs	r3, #4
 8004e44:	e0b1      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0a6      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	22c5      	movs	r2, #197	; 0xc5
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff fd3e 	bl	80048e4 <SDIO_GetCommandResponse>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d001      	beq.n	8004e76 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e099      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004e76:	2100      	movs	r1, #0
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff fd40 	bl	80048fe <SDIO_GetResponse>
 8004e7e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4b4e      	ldr	r3, [pc, #312]	; (8004fbc <SDMMC_GetCmdResp1+0x1d8>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e08d      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	da02      	bge.n	8004e9a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e98:	e087      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004ea4:	2340      	movs	r3, #64	; 0x40
 8004ea6:	e080      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	e079      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ec4:	e071      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed4:	e069      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee4:	e061      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ef4:	e059      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f04:	e051      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f14:	e049      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f24:	e041      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f34:	e039      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f44:	e031      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004f50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f54:	e029      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004f60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f64:	e021      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004f70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f74:	e019      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004f80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f84:	e011      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f94:	e009      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004fa0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004fa4:	e001      	b.n	8004faa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000000 	.word	0x20000000
 8004fb8:	10624dd3 	.word	0x10624dd3
 8004fbc:	fdffe008 	.word	0xfdffe008

08004fc0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	; (8005048 <SDMMC_GetCmdResp2+0x88>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	; (800504c <SDMMC_GetCmdResp2+0x8c>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	0a5b      	lsrs	r3, r3, #9
 8004fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	60fa      	str	r2, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004fe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fec:	e026      	b.n	800503c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ef      	beq.n	8004fde <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ea      	bne.n	8004fde <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2204      	movs	r2, #4
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800501a:	2304      	movs	r3, #4
 800501c:	e00e      	b.n	800503c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005030:	2301      	movs	r3, #1
 8005032:	e003      	b.n	800503c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	22c5      	movs	r2, #197	; 0xc5
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	20000000 	.word	0x20000000
 800504c:	10624dd3 	.word	0x10624dd3

08005050 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <SDMMC_GetCmdResp3+0x74>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <SDMMC_GetCmdResp3+0x78>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	60fa      	str	r2, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800507c:	e01b      	b.n	80050b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ef      	beq.n	800506e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ea      	bne.n	800506e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2204      	movs	r2, #4
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050aa:	2304      	movs	r3, #4
 80050ac:	e003      	b.n	80050b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	22c5      	movs	r2, #197	; 0xc5
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000
 80050c8:	10624dd3 	.word	0x10624dd3

080050cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	460b      	mov	r3, r1
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050da:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <SDMMC_GetCmdResp6+0xe4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a35      	ldr	r2, [pc, #212]	; (80051b4 <SDMMC_GetCmdResp6+0xe8>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	0a5b      	lsrs	r3, r3, #9
 80050e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	1e5a      	subs	r2, r3, #1
 80050f4:	61fa      	str	r2, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050fe:	e052      	b.n	80051a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005104:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0ef      	beq.n	80050f0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ea      	bne.n	80050f0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2204      	movs	r2, #4
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800512c:	2304      	movs	r3, #4
 800512e:	e03a      	b.n	80051a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005142:	2301      	movs	r3, #1
 8005144:	e02f      	b.n	80051a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fbcc 	bl	80048e4 <SDIO_GetCommandResponse>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	7afb      	ldrb	r3, [r7, #11]
 8005152:	4293      	cmp	r3, r2
 8005154:	d001      	beq.n	800515a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005156:	2301      	movs	r3, #1
 8005158:	e025      	b.n	80051a6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22c5      	movs	r2, #197	; 0xc5
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005160:	2100      	movs	r1, #0
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff fbcb 	bl	80048fe <SDIO_GetResponse>
 8005168:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800517e:	2300      	movs	r3, #0
 8005180:	e011      	b.n	80051a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800518c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005190:	e009      	b.n	80051a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800519c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a0:	e001      	b.n	80051a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000000 	.word	0x20000000
 80051b4:	10624dd3 	.word	0x10624dd3

080051b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051c0:	4b22      	ldr	r3, [pc, #136]	; (800524c <SDMMC_GetCmdResp7+0x94>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a22      	ldr	r2, [pc, #136]	; (8005250 <SDMMC_GetCmdResp7+0x98>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	0a5b      	lsrs	r3, r3, #9
 80051cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	60fa      	str	r2, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051e4:	e02c      	b.n	8005240 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0ef      	beq.n	80051d6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ea      	bne.n	80051d6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2204      	movs	r2, #4
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005212:	2304      	movs	r3, #4
 8005214:	e014      	b.n	8005240 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005228:	2301      	movs	r3, #1
 800522a:	e009      	b.n	8005240 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800523e:	2300      	movs	r3, #0
  
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000000 	.word	0x20000000
 8005250:	10624dd3 	.word	0x10624dd3

08005254 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <SDMMC_GetCmdError+0x50>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <SDMMC_GetCmdError+0x54>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	0a5b      	lsrs	r3, r3, #9
 8005268:	f241 3288 	movw	r2, #5000	; 0x1388
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1e5a      	subs	r2, r3, #1
 8005276:	60fa      	str	r2, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800527c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005280:	e009      	b.n	8005296 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f1      	beq.n	8005272 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	22c5      	movs	r2, #197	; 0xc5
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000000 	.word	0x20000000
 80052a8:	10624dd3 	.word	0x10624dd3

080052ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80052b0:	4904      	ldr	r1, [pc, #16]	; (80052c4 <MX_FATFS_Init+0x18>)
 80052b2:	4805      	ldr	r0, [pc, #20]	; (80052c8 <MX_FATFS_Init+0x1c>)
 80052b4:	f003 f926 	bl	8008504 <FATFS_LinkDriver>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <MX_FATFS_Init+0x20>)
 80052be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80052c0:	bf00      	nop
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20002360 	.word	0x20002360
 80052c8:	0800d50c 	.word	0x0800d50c
 80052cc:	2000235c 	.word	0x2000235c

080052d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80052d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80052ea:	f000 f87b 	bl	80053e4 <BSP_SD_IsDetected>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d001      	beq.n	80052f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e012      	b.n	800531e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80052f8:	480b      	ldr	r0, [pc, #44]	; (8005328 <BSP_SD_Init+0x48>)
 80052fa:	f7fd ff1b 	bl	8003134 <HAL_SD_Init>
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800530c:	4806      	ldr	r0, [pc, #24]	; (8005328 <BSP_SD_Init+0x48>)
 800530e:	f7fe fb63 	bl	80039d8 <HAL_SD_ConfigWideBusOperation>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800531c:	79fb      	ldrb	r3, [r7, #7]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20002144 	.word	0x20002144

0800532c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	68f9      	ldr	r1, [r7, #12]
 8005342:	4806      	ldr	r0, [pc, #24]	; (800535c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005344:	f7fd ffa6 	bl	8003294 <HAL_SD_ReadBlocks_DMA>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005352:	7dfb      	ldrb	r3, [r7, #23]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20002144 	.word	0x20002144

08005360 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	4806      	ldr	r0, [pc, #24]	; (8005390 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005378:	f7fe f86e 	bl	8003458 <HAL_SD_WriteBlocks_DMA>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20002144 	.word	0x20002144

08005394 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005398:	4805      	ldr	r0, [pc, #20]	; (80053b0 <BSP_SD_GetCardState+0x1c>)
 800539a:	f7fe fbb7 	bl	8003b0c <HAL_SD_GetCardState>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20002144 	.word	0x20002144

080053b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	4803      	ldr	r0, [pc, #12]	; (80053cc <BSP_SD_GetCardInfo+0x18>)
 80053c0:	f7fe fade 	bl	8003980 <HAL_SD_GetCardInfo>
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20002144 	.word	0x20002144

080053d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80053d8:	f000 f986 	bl	80056e8 <BSP_SD_ReadCpltCallback>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80053ea:	2301      	movs	r3, #1
 80053ec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	b2db      	uxtb	r3, r3
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005406:	f003 fa51 	bl	80088ac <osKernelGetTickCount>
 800540a:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800540c:	e006      	b.n	800541c <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800540e:	f7ff ffc1 	bl	8005394 <BSP_SD_GetCardState>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005418:	2300      	movs	r3, #0
 800541a:	e009      	b.n	8005430 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800541c:	f003 fa46 	bl	80088ac <osKernelGetTickCount>
 8005420:	4602      	mov	r2, r0
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d8f0      	bhi.n	800540e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <SD_CheckStatus+0x38>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005448:	f7ff ffa4 	bl	8005394 <BSP_SD_GetCardState>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <SD_CheckStatus+0x38>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	b2da      	uxtb	r2, r3
 800545e:	4b04      	ldr	r3, [pc, #16]	; (8005470 <SD_CheckStatus+0x38>)
 8005460:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005462:	4b03      	ldr	r3, [pc, #12]	; (8005470 <SD_CheckStatus+0x38>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	b2db      	uxtb	r3, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	2000000d 	.word	0x2000000d

08005474 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <SD_initialize+0x7c>)
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005484:	f003 f9ca 	bl	800881c <osKernelGetState>
 8005488:	4603      	mov	r3, r0
 800548a:	2b02      	cmp	r3, #2
 800548c:	d129      	bne.n	80054e2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800548e:	f7ff ff27 	bl	80052e0 <BSP_SD_Init>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d107      	bne.n	80054a8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff ffcc 	bl	8005438 <SD_CheckStatus>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <SD_initialize+0x7c>)
 80054a6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <SD_initialize+0x7c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d017      	beq.n	80054e2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <SD_initialize+0x80>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80054ba:	2200      	movs	r2, #0
 80054bc:	2102      	movs	r1, #2
 80054be:	200a      	movs	r0, #10
 80054c0:	f003 fbfa 	bl	8008cb8 <osMessageQueueNew>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4a0b      	ldr	r2, [pc, #44]	; (80054f4 <SD_initialize+0x80>)
 80054c8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <SD_initialize+0x80>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d107      	bne.n	80054e2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <SD_initialize+0x7c>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <SD_initialize+0x7c>)
 80054e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80054e2:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <SD_initialize+0x7c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	b2db      	uxtb	r3, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	2000000d 	.word	0x2000000d
 80054f4:	20002364 	.word	0x20002364

080054f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff ff97 	bl	8005438 <SD_CheckStatus>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005528:	f247 5030 	movw	r0, #30000	; 0x7530
 800552c:	f7ff ff67 	bl	80053fe <SD_CheckStatusWithTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	da01      	bge.n	800553a <SD_read+0x26>
  {
    return res;
 8005536:	7ffb      	ldrb	r3, [r7, #31]
 8005538:	e02f      	b.n	800559a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	68b8      	ldr	r0, [r7, #8]
 8005540:	f7ff fef4 	bl	800532c <BSP_SD_ReadBlocks_DMA>
 8005544:	4603      	mov	r3, r0
 8005546:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8005548:	7fbb      	ldrb	r3, [r7, #30]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d124      	bne.n	8005598 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800554e:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <SD_read+0x90>)
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f107 0112 	add.w	r1, r7, #18
 8005556:	f247 5330 	movw	r3, #30000	; 0x7530
 800555a:	2200      	movs	r2, #0
 800555c:	f003 fc80 	bl	8008e60 <osMessageQueueGet>
 8005560:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d117      	bne.n	8005598 <SD_read+0x84>
 8005568:	8a7b      	ldrh	r3, [r7, #18]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d114      	bne.n	8005598 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800556e:	f003 f99d 	bl	80088ac <osKernelGetTickCount>
 8005572:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005574:	e007      	b.n	8005586 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005576:	f7ff ff0d 	bl	8005394 <BSP_SD_GetCardState>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <SD_read+0x72>
              {
                res = RES_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005584:	e008      	b.n	8005598 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005586:	f003 f991 	bl	80088ac <osKernelGetTickCount>
 800558a:	4602      	mov	r2, r0
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f247 522f 	movw	r2, #29999	; 0x752f
 8005594:	4293      	cmp	r3, r2
 8005596:	d9ee      	bls.n	8005576 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005598:	7ffb      	ldrb	r3, [r7, #31]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20002364 	.word	0x20002364

080055a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4603      	mov	r3, r0
 80055b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80055bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80055c0:	f7ff ff1d 	bl	80053fe <SD_CheckStatusWithTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	da01      	bge.n	80055ce <SD_write+0x26>
  {
    return res;
 80055ca:	7ffb      	ldrb	r3, [r7, #31]
 80055cc:	e02d      	b.n	800562a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	68b8      	ldr	r0, [r7, #8]
 80055d4:	f7ff fec4 	bl	8005360 <BSP_SD_WriteBlocks_DMA>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d124      	bne.n	8005628 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80055de:	4b15      	ldr	r3, [pc, #84]	; (8005634 <SD_write+0x8c>)
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f107 0112 	add.w	r1, r7, #18
 80055e6:	f247 5330 	movw	r3, #30000	; 0x7530
 80055ea:	2200      	movs	r2, #0
 80055ec:	f003 fc38 	bl	8008e60 <osMessageQueueGet>
 80055f0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d117      	bne.n	8005628 <SD_write+0x80>
 80055f8:	8a7b      	ldrh	r3, [r7, #18]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d114      	bne.n	8005628 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80055fe:	f003 f955 	bl	80088ac <osKernelGetTickCount>
 8005602:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005604:	e007      	b.n	8005616 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005606:	f7ff fec5 	bl	8005394 <BSP_SD_GetCardState>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <SD_write+0x6e>
          {
            res = RES_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	77fb      	strb	r3, [r7, #31]
            break;
 8005614:	e008      	b.n	8005628 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005616:	f003 f949 	bl	80088ac <osKernelGetTickCount>
 800561a:	4602      	mov	r2, r0
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f247 522f 	movw	r2, #29999	; 0x752f
 8005624:	4293      	cmp	r3, r2
 8005626:	d9ee      	bls.n	8005606 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8005628:	7ffb      	ldrb	r3, [r7, #31]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20002364 	.word	0x20002364

08005638 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08c      	sub	sp, #48	; 0x30
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	603a      	str	r2, [r7, #0]
 8005642:	71fb      	strb	r3, [r7, #7]
 8005644:	460b      	mov	r3, r1
 8005646:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <SD_ioctl+0xac>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <SD_ioctl+0x28>
 800565c:	2303      	movs	r3, #3
 800565e:	e03c      	b.n	80056da <SD_ioctl+0xa2>

  switch (cmd)
 8005660:	79bb      	ldrb	r3, [r7, #6]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d834      	bhi.n	80056d0 <SD_ioctl+0x98>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <SD_ioctl+0x34>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	0800567d 	.word	0x0800567d
 8005670:	08005685 	.word	0x08005685
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056b7 	.word	0x080056b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005682:	e028      	b.n	80056d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005684:	f107 030c 	add.w	r3, r7, #12
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fe93 	bl	80053b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800569a:	e01c      	b.n	80056d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800569c:	f107 030c 	add.w	r3, r7, #12
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fe87 	bl	80053b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056b4:	e00f      	b.n	80056d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80056b6:	f107 030c 	add.w	r3, r7, #12
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fe7a 	bl	80053b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	0a5a      	lsrs	r2, r3, #9
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056ce:	e002      	b.n	80056d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80056d0:	2304      	movs	r3, #4
 80056d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80056d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3730      	adds	r7, #48	; 0x30
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	2000000d 	.word	0x2000000d

080056e8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80056ee:	2301      	movs	r3, #1
 80056f0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <BSP_SD_ReadCpltCallback+0x20>)
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	1db9      	adds	r1, r7, #6
 80056f8:	2300      	movs	r3, #0
 80056fa:	2200      	movs	r2, #0
 80056fc:	f003 fb50 	bl	8008da0 <osMessageQueuePut>
#endif
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20002364 	.word	0x20002364

0800570c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <disk_status+0x30>)
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	79fa      	ldrb	r2, [r7, #7]
 8005724:	4905      	ldr	r1, [pc, #20]	; (800573c <disk_status+0x30>)
 8005726:	440a      	add	r2, r1
 8005728:	7a12      	ldrb	r2, [r2, #8]
 800572a:	4610      	mov	r0, r2
 800572c:	4798      	blx	r3
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20002390 	.word	0x20002390

08005740 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <disk_initialize+0x48>)
 8005752:	5cd3      	ldrb	r3, [r2, r3]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d111      	bne.n	800577c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <disk_initialize+0x48>)
 800575c:	2101      	movs	r1, #1
 800575e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	4a09      	ldr	r2, [pc, #36]	; (8005788 <disk_initialize+0x48>)
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	79fa      	ldrb	r2, [r7, #7]
 800576e:	4906      	ldr	r1, [pc, #24]	; (8005788 <disk_initialize+0x48>)
 8005770:	440a      	add	r2, r1
 8005772:	7a12      	ldrb	r2, [r2, #8]
 8005774:	4610      	mov	r0, r2
 8005776:	4798      	blx	r3
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20002390 	.word	0x20002390

0800578c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <disk_read+0x3c>)
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	689c      	ldr	r4, [r3, #8]
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <disk_read+0x3c>)
 80057ac:	4413      	add	r3, r2
 80057ae:	7a18      	ldrb	r0, [r3, #8]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	47a0      	blx	r4
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd90      	pop	{r4, r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20002390 	.word	0x20002390

080057cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057cc:	b590      	push	{r4, r7, lr}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <disk_write+0x3c>)
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68dc      	ldr	r4, [r3, #12]
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	4a07      	ldr	r2, [pc, #28]	; (8005808 <disk_write+0x3c>)
 80057ec:	4413      	add	r3, r2
 80057ee:	7a18      	ldrb	r0, [r3, #8]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	47a0      	blx	r4
 80057f8:	4603      	mov	r3, r0
 80057fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	bd90      	pop	{r4, r7, pc}
 8005806:	bf00      	nop
 8005808:	20002390 	.word	0x20002390

0800580c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	603a      	str	r2, [r7, #0]
 8005816:	71fb      	strb	r3, [r7, #7]
 8005818:	460b      	mov	r3, r1
 800581a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <disk_ioctl+0x38>)
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	79fa      	ldrb	r2, [r7, #7]
 800582a:	4906      	ldr	r1, [pc, #24]	; (8005844 <disk_ioctl+0x38>)
 800582c:	440a      	add	r2, r1
 800582e:	7a10      	ldrb	r0, [r2, #8]
 8005830:	79b9      	ldrb	r1, [r7, #6]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	4798      	blx	r3
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]
  return res;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20002390 	.word	0x20002390

08005848 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3301      	adds	r3, #1
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005858:	89fb      	ldrh	r3, [r7, #14]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	b21a      	sxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	b21b      	sxth	r3, r3
 8005864:	4313      	orrs	r3, r2
 8005866:	b21b      	sxth	r3, r3
 8005868:	81fb      	strh	r3, [r7, #14]
	return rv;
 800586a:	89fb      	ldrh	r3, [r7, #14]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3303      	adds	r3, #3
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	3202      	adds	r2, #2
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	3201      	adds	r2, #1
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	7812      	ldrb	r2, [r2, #0]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	887a      	ldrh	r2, [r7, #2]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	887a      	ldrh	r2, [r7, #2]
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	1c53      	adds	r3, r2, #1
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1c59      	adds	r1, r3, #1
 8005970:	6179      	str	r1, [r7, #20]
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3b01      	subs	r3, #1
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f1      	bne.n	8005966 <mem_cpy+0x1a>
	}
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	617a      	str	r2, [r7, #20]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f3      	bne.n	800599e <mem_set+0x10>
}
 80059b6:	bf00      	nop
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	61fa      	str	r2, [r7, #28]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	4619      	mov	r1, r3
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	61ba      	str	r2, [r7, #24]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	1acb      	subs	r3, r1, r3
 80059f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <mem_cmp+0x40>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0eb      	beq.n	80059dc <mem_cmp+0x18>

	return r;
 8005a04:	697b      	ldr	r3, [r7, #20]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a1c:	e002      	b.n	8005a24 <chk_chr+0x12>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3301      	adds	r3, #1
 8005a22:	607b      	str	r3, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <chk_chr+0x26>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d1f2      	bne.n	8005a1e <chk_chr+0xc>
	return *str;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <lock_fs+0x22>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f002 fe4f 	bl	80086fe <ff_req_grant>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <lock_fs+0x22>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <lock_fs+0x24>
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00d      	beq.n	8005aa2 <unlock_fs+0x2e>
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	d00a      	beq.n	8005aa2 <unlock_fs+0x2e>
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	2b0b      	cmp	r3, #11
 8005a90:	d007      	beq.n	8005aa2 <unlock_fs+0x2e>
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	2b0f      	cmp	r3, #15
 8005a96:	d004      	beq.n	8005aa2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f002 fe43 	bl	8008728 <ff_rel_grant>
	}
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e029      	b.n	8005b14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ac0:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <chk_lock+0xb4>)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01d      	beq.n	8005b0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ace:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <chk_lock+0xb4>)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	4413      	add	r3, r2
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d116      	bne.n	8005b0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <chk_lock+0xb4>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3304      	adds	r3, #4
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d10c      	bne.n	8005b0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005af4:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <chk_lock+0xb4>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	4413      	add	r3, r2
 8005afc:	3308      	adds	r3, #8
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d102      	bne.n	8005b0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b08:	e007      	b.n	8005b1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d9d2      	bls.n	8005ac0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d109      	bne.n	8005b34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <chk_lock+0x80>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d101      	bne.n	8005b30 <chk_lock+0x84>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e010      	b.n	8005b52 <chk_lock+0xa6>
 8005b30:	2312      	movs	r3, #18
 8005b32:	e00e      	b.n	8005b52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d108      	bne.n	8005b4c <chk_lock+0xa0>
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <chk_lock+0xb4>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	4413      	add	r3, r2
 8005b42:	330c      	adds	r3, #12
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4a:	d101      	bne.n	8005b50 <chk_lock+0xa4>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	e000      	b.n	8005b52 <chk_lock+0xa6>
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20002370 	.word	0x20002370

08005b64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	e002      	b.n	8005b76 <enq_lock+0x12>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3301      	adds	r3, #1
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d806      	bhi.n	8005b8a <enq_lock+0x26>
 8005b7c:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <enq_lock+0x40>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	4413      	add	r3, r2
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f2      	bne.n	8005b70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20002370 	.word	0x20002370

08005ba8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e01f      	b.n	8005bf8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005bb8:	4a41      	ldr	r2, [pc, #260]	; (8005cc0 <inc_lock+0x118>)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	4413      	add	r3, r2
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d113      	bne.n	8005bf2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005bca:	4a3d      	ldr	r2, [pc, #244]	; (8005cc0 <inc_lock+0x118>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d109      	bne.n	8005bf2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005bde:	4a38      	ldr	r2, [pc, #224]	; (8005cc0 <inc_lock+0x118>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	4413      	add	r3, r2
 8005be6:	3308      	adds	r3, #8
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d006      	beq.n	8005c00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d9dc      	bls.n	8005bb8 <inc_lock+0x10>
 8005bfe:	e000      	b.n	8005c02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d132      	bne.n	8005c6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e002      	b.n	8005c14 <inc_lock+0x6c>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d806      	bhi.n	8005c28 <inc_lock+0x80>
 8005c1a:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <inc_lock+0x118>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	4413      	add	r3, r2
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f2      	bne.n	8005c0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d101      	bne.n	8005c32 <inc_lock+0x8a>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e040      	b.n	8005cb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4922      	ldr	r1, [pc, #136]	; (8005cc0 <inc_lock+0x118>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	440b      	add	r3, r1
 8005c3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	491e      	ldr	r1, [pc, #120]	; (8005cc0 <inc_lock+0x118>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	491a      	ldr	r1, [pc, #104]	; (8005cc0 <inc_lock+0x118>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <inc_lock+0x118>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4413      	add	r3, r2
 8005c68:	330c      	adds	r3, #12
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <inc_lock+0xe0>
 8005c74:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <inc_lock+0x118>)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	4413      	add	r3, r2
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <inc_lock+0xe0>
 8005c84:	2300      	movs	r3, #0
 8005c86:	e015      	b.n	8005cb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d108      	bne.n	8005ca0 <inc_lock+0xf8>
 8005c8e:	4a0c      	ldr	r2, [pc, #48]	; (8005cc0 <inc_lock+0x118>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	4413      	add	r3, r2
 8005c96:	330c      	adds	r3, #12
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	e001      	b.n	8005ca4 <inc_lock+0xfc>
 8005ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca4:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <inc_lock+0x118>)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	440b      	add	r3, r1
 8005cac:	330c      	adds	r3, #12
 8005cae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20002370 	.word	0x20002370

08005cc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d825      	bhi.n	8005d24 <dec_lock+0x60>
		n = Files[i].ctr;
 8005cd8:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <dec_lock+0x74>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	4413      	add	r3, r2
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ce6:	89fb      	ldrh	r3, [r7, #14]
 8005ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cec:	d101      	bne.n	8005cf2 <dec_lock+0x2e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005cf2:	89fb      	ldrh	r3, [r7, #14]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <dec_lock+0x3a>
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005cfe:	4a0e      	ldr	r2, [pc, #56]	; (8005d38 <dec_lock+0x74>)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	4413      	add	r3, r2
 8005d06:	330c      	adds	r3, #12
 8005d08:	89fa      	ldrh	r2, [r7, #14]
 8005d0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d0c:	89fb      	ldrh	r3, [r7, #14]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <dec_lock+0x5a>
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <dec_lock+0x74>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	4413      	add	r3, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	737b      	strb	r3, [r7, #13]
 8005d22:	e001      	b.n	8005d28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d24:	2302      	movs	r3, #2
 8005d26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d28:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20002370 	.word	0x20002370

08005d3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e010      	b.n	8005d6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <clear_lock+0x44>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	4413      	add	r3, r2
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d105      	bne.n	8005d66 <clear_lock+0x2a>
 8005d5a:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <clear_lock+0x44>)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	4413      	add	r3, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d9eb      	bls.n	8005d4a <clear_lock+0xe>
	}
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20002370 	.word	0x20002370

08005d84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	78db      	ldrb	r3, [r3, #3]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d034      	beq.n	8005e02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	7858      	ldrb	r0, [r3, #1]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005da8:	2301      	movs	r3, #1
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	f7ff fd0e 	bl	80057cc <disk_write>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <sync_window+0x38>
			res = FR_DISK_ERR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	e022      	b.n	8005e02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d217      	bcs.n	8005e02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	789b      	ldrb	r3, [r3, #2]
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e010      	b.n	8005dfc <sync_window+0x78>
					wsect += fs->fsize;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4413      	add	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7858      	ldrb	r0, [r3, #1]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005dee:	2301      	movs	r3, #1
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	f7ff fceb 	bl	80057cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d8eb      	bhi.n	8005dda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d01b      	beq.n	8005e5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ffad 	bl	8005d84 <sync_window>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d113      	bne.n	8005e5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7858      	ldrb	r0, [r3, #1]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005e3e:	2301      	movs	r3, #1
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	f7ff fca3 	bl	800578c <disk_read>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff87 	bl	8005d84 <sync_window>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d159      	bne.n	8005f34 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d149      	bne.n	8005f1c <sync_fs+0xb4>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d145      	bne.n	8005f1c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	899b      	ldrh	r3, [r3, #12]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	f7ff fd76 	bl	800598e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	333c      	adds	r3, #60	; 0x3c
 8005ea6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005eaa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fd05 	bl	80058be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	333c      	adds	r3, #60	; 0x3c
 8005eb8:	4921      	ldr	r1, [pc, #132]	; (8005f40 <sync_fs+0xd8>)
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fd1a 	bl	80058f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	333c      	adds	r3, #60	; 0x3c
 8005ec4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ec8:	491e      	ldr	r1, [pc, #120]	; (8005f44 <sync_fs+0xdc>)
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fd12 	bl	80058f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	333c      	adds	r3, #60	; 0x3c
 8005ed4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f7ff fd08 	bl	80058f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	333c      	adds	r3, #60	; 0x3c
 8005ee8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7ff fcfe 	bl	80058f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	7858      	ldrb	r0, [r3, #1]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f10:	2301      	movs	r3, #1
 8005f12:	f7ff fc5b 	bl	80057cc <disk_write>
			fs->fsi_flag = 0;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2200      	movs	r2, #0
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fc71 	bl	800580c <disk_ioctl>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <sync_fs+0xcc>
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	41615252 	.word	0x41615252
 8005f44:	61417272 	.word	0x61417272

08005f48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	3b02      	subs	r3, #2
 8005f56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	3b02      	subs	r3, #2
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d301      	bcc.n	8005f68 <clust2sect+0x20>
 8005f64:	2300      	movs	r3, #0
 8005f66:	e008      	b.n	8005f7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	895b      	ldrh	r3, [r3, #10]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	fb03 f202 	mul.w	r2, r3, r2
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f78:	4413      	add	r3, r2
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d904      	bls.n	8005fa6 <get_fat+0x20>
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <get_fat+0x26>
		val = 1;	/* Internal error */
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e0bb      	b.n	8006124 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	f000 8083 	beq.w	80060c2 <get_fat+0x13c>
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	f300 80a7 	bgt.w	8006110 <get_fat+0x18a>
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d002      	beq.n	8005fcc <get_fat+0x46>
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d056      	beq.n	8006078 <get_fat+0xf2>
 8005fca:	e0a1      	b.n	8006110 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	899b      	ldrh	r3, [r3, #12]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fea:	4413      	add	r3, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	6938      	ldr	r0, [r7, #16]
 8005ff0:	f7ff ff0c 	bl	8005e0c <move_window>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f040 808d 	bne.w	8006116 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	60fa      	str	r2, [r7, #12]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	8992      	ldrh	r2, [r2, #12]
 8006006:	fbb3 f1f2 	udiv	r1, r3, r2
 800600a:	fb01 f202 	mul.w	r2, r1, r2
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	899b      	ldrh	r3, [r3, #12]
 8006022:	4619      	mov	r1, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	fbb3 f3f1 	udiv	r3, r3, r1
 800602a:	4413      	add	r3, r2
 800602c:	4619      	mov	r1, r3
 800602e:	6938      	ldr	r0, [r7, #16]
 8006030:	f7ff feec 	bl	8005e0c <move_window>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d16f      	bne.n	800611a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	899b      	ldrh	r3, [r3, #12]
 800603e:	461a      	mov	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	fbb3 f1f2 	udiv	r1, r3, r2
 8006046:	fb01 f202 	mul.w	r2, r1, r2
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4413      	add	r3, r2
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4313      	orrs	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <get_fat+0xe8>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	e002      	b.n	8006074 <get_fat+0xee>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006074:	617b      	str	r3, [r7, #20]
			break;
 8006076:	e055      	b.n	8006124 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	899b      	ldrh	r3, [r3, #12]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	fbb3 f3f1 	udiv	r3, r3, r1
 800608c:	4413      	add	r3, r2
 800608e:	4619      	mov	r1, r3
 8006090:	6938      	ldr	r0, [r7, #16]
 8006092:	f7ff febb 	bl	8005e0c <move_window>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d140      	bne.n	800611e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	8992      	ldrh	r2, [r2, #12]
 80060aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80060ae:	fb00 f202 	mul.w	r2, r0, r2
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	440b      	add	r3, r1
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fbc6 	bl	8005848 <ld_word>
 80060bc:	4603      	mov	r3, r0
 80060be:	617b      	str	r3, [r7, #20]
			break;
 80060c0:	e030      	b.n	8006124 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	899b      	ldrh	r3, [r3, #12]
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	4619      	mov	r1, r3
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80060d6:	4413      	add	r3, r2
 80060d8:	4619      	mov	r1, r3
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f7ff fe96 	bl	8005e0c <move_window>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d11d      	bne.n	8006122 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	8992      	ldrh	r2, [r2, #12]
 80060f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80060f8:	fb00 f202 	mul.w	r2, r0, r2
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	440b      	add	r3, r1
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fbb9 	bl	8005878 <ld_dword>
 8006106:	4603      	mov	r3, r0
 8006108:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800610c:	617b      	str	r3, [r7, #20]
			break;
 800610e:	e009      	b.n	8006124 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e006      	b.n	8006124 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006116:	bf00      	nop
 8006118:	e004      	b.n	8006124 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800611a:	bf00      	nop
 800611c:	e002      	b.n	8006124 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006122:	bf00      	nop
		}
	}

	return val;
 8006124:	697b      	ldr	r3, [r7, #20]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800612e:	b590      	push	{r4, r7, lr}
 8006130:	b089      	sub	sp, #36	; 0x24
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800613a:	2302      	movs	r3, #2
 800613c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b01      	cmp	r3, #1
 8006142:	f240 8109 	bls.w	8006358 <put_fat+0x22a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	f080 8103 	bcs.w	8006358 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b03      	cmp	r3, #3
 8006158:	f000 80b6 	beq.w	80062c8 <put_fat+0x19a>
 800615c:	2b03      	cmp	r3, #3
 800615e:	f300 80fb 	bgt.w	8006358 <put_fat+0x22a>
 8006162:	2b01      	cmp	r3, #1
 8006164:	d003      	beq.n	800616e <put_fat+0x40>
 8006166:	2b02      	cmp	r3, #2
 8006168:	f000 8083 	beq.w	8006272 <put_fat+0x144>
 800616c:	e0f4      	b.n	8006358 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4413      	add	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	899b      	ldrh	r3, [r3, #12]
 8006184:	4619      	mov	r1, r3
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	fbb3 f3f1 	udiv	r3, r3, r1
 800618c:	4413      	add	r3, r2
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff fe3b 	bl	8005e0c <move_window>
 8006196:	4603      	mov	r3, r0
 8006198:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800619a:	7ffb      	ldrb	r3, [r7, #31]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 80d4 	bne.w	800634a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	61ba      	str	r2, [r7, #24]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	8992      	ldrh	r2, [r2, #12]
 80061b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80061b6:	fb00 f202 	mul.w	r2, r0, r2
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	440b      	add	r3, r1
 80061be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <put_fat+0xb8>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	b25a      	sxtb	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	b25b      	sxtb	r3, r3
 80061de:	4313      	orrs	r3, r2
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	e001      	b.n	80061ea <put_fat+0xbc>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	899b      	ldrh	r3, [r3, #12]
 80061fc:	4619      	mov	r1, r3
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	fbb3 f3f1 	udiv	r3, r3, r1
 8006204:	4413      	add	r3, r2
 8006206:	4619      	mov	r1, r3
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff fdff 	bl	8005e0c <move_window>
 800620e:	4603      	mov	r3, r0
 8006210:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006212:	7ffb      	ldrb	r3, [r7, #31]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 809a 	bne.w	800634e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	899b      	ldrh	r3, [r3, #12]
 8006224:	461a      	mov	r2, r3
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	fbb3 f0f2 	udiv	r0, r3, r2
 800622c:	fb00 f202 	mul.w	r2, r0, r2
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	440b      	add	r3, r1
 8006234:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <put_fat+0x11a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e00e      	b.n	8006266 <put_fat+0x138>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b25b      	sxtb	r3, r3
 800624e:	f023 030f 	bic.w	r3, r3, #15
 8006252:	b25a      	sxtb	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	b25b      	sxtb	r3, r3
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	b25b      	sxtb	r3, r3
 8006260:	4313      	orrs	r3, r2
 8006262:	b25b      	sxtb	r3, r3
 8006264:	b2db      	uxtb	r3, r3
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	70da      	strb	r2, [r3, #3]
			break;
 8006270:	e072      	b.n	8006358 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	899b      	ldrh	r3, [r3, #12]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	4619      	mov	r1, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	fbb3 f3f1 	udiv	r3, r3, r1
 8006286:	4413      	add	r3, r2
 8006288:	4619      	mov	r1, r3
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fdbe 	bl	8005e0c <move_window>
 8006290:	4603      	mov	r3, r0
 8006292:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006294:	7ffb      	ldrb	r3, [r7, #31]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d15b      	bne.n	8006352 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	8992      	ldrh	r2, [r2, #12]
 80062a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80062ac:	fb00 f202 	mul.w	r2, r0, r2
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	440b      	add	r3, r1
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	b292      	uxth	r2, r2
 80062b8:	4611      	mov	r1, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff faff 	bl	80058be <st_word>
			fs->wflag = 1;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	70da      	strb	r2, [r3, #3]
			break;
 80062c6:	e047      	b.n	8006358 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	899b      	ldrh	r3, [r3, #12]
 80062d0:	089b      	lsrs	r3, r3, #2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4619      	mov	r1, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80062dc:	4413      	add	r3, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7ff fd93 	bl	8005e0c <move_window>
 80062e6:	4603      	mov	r3, r0
 80062e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062ea:	7ffb      	ldrb	r3, [r7, #31]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d132      	bne.n	8006356 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	8992      	ldrh	r2, [r2, #12]
 8006304:	fbb3 f0f2 	udiv	r0, r3, r2
 8006308:	fb00 f202 	mul.w	r2, r0, r2
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	440b      	add	r3, r1
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff fab1 	bl	8005878 <ld_dword>
 8006316:	4603      	mov	r3, r0
 8006318:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800631c:	4323      	orrs	r3, r4
 800631e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	8992      	ldrh	r2, [r2, #12]
 800632e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006332:	fb00 f202 	mul.w	r2, r0, r2
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	440b      	add	r3, r1
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fad9 	bl	80058f4 <st_dword>
			fs->wflag = 1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	70da      	strb	r2, [r3, #3]
			break;
 8006348:	e006      	b.n	8006358 <put_fat+0x22a>
			if (res != FR_OK) break;
 800634a:	bf00      	nop
 800634c:	e004      	b.n	8006358 <put_fat+0x22a>
			if (res != FR_OK) break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006356:	bf00      	nop
		}
	}
	return res;
 8006358:	7ffb      	ldrb	r3, [r7, #31]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3724      	adds	r7, #36	; 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd90      	pop	{r4, r7, pc}

08006362 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d904      	bls.n	8006388 <remove_chain+0x26>
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	429a      	cmp	r2, r3
 8006386:	d301      	bcc.n	800638c <remove_chain+0x2a>
 8006388:	2302      	movs	r3, #2
 800638a:	e04b      	b.n	8006424 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00c      	beq.n	80063ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006392:	f04f 32ff 	mov.w	r2, #4294967295
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	69b8      	ldr	r0, [r7, #24]
 800639a:	f7ff fec8 	bl	800612e <put_fat>
 800639e:	4603      	mov	r3, r0
 80063a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80063a2:	7ffb      	ldrb	r3, [r7, #31]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <remove_chain+0x4a>
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	e03b      	b.n	8006424 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fde9 	bl	8005f86 <get_fat>
 80063b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d031      	beq.n	8006420 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <remove_chain+0x64>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e02e      	b.n	8006424 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d101      	bne.n	80063d2 <remove_chain+0x70>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e028      	b.n	8006424 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063d2:	2200      	movs	r2, #0
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	69b8      	ldr	r0, [r7, #24]
 80063d8:	f7ff fea9 	bl	800612e <put_fat>
 80063dc:	4603      	mov	r3, r0
 80063de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063e0:	7ffb      	ldrb	r3, [r7, #31]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <remove_chain+0x88>
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
 80063e8:	e01c      	b.n	8006424 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	3b02      	subs	r3, #2
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d20b      	bcs.n	8006410 <remove_chain+0xae>
			fs->free_clst++;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	791b      	ldrb	r3, [r3, #4]
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	429a      	cmp	r2, r3
 800641c:	d3c6      	bcc.n	80063ac <remove_chain+0x4a>
 800641e:	e000      	b.n	8006422 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006420:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10d      	bne.n	800645e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <create_chain+0x2c>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	429a      	cmp	r2, r3
 8006456:	d31b      	bcc.n	8006490 <create_chain+0x64>
 8006458:	2301      	movs	r3, #1
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	e018      	b.n	8006490 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fd90 	bl	8005f86 <get_fat>
 8006466:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d801      	bhi.n	8006472 <create_chain+0x46>
 800646e:	2301      	movs	r3, #1
 8006470:	e070      	b.n	8006554 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d101      	bne.n	800647e <create_chain+0x52>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	e06a      	b.n	8006554 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	429a      	cmp	r2, r3
 8006486:	d201      	bcs.n	800648c <create_chain+0x60>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	e063      	b.n	8006554 <create_chain+0x128>
		scl = clst;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	3301      	adds	r3, #1
 8006498:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d307      	bcc.n	80064b4 <create_chain+0x88>
				ncl = 2;
 80064a4:	2302      	movs	r3, #2
 80064a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d901      	bls.n	80064b4 <create_chain+0x88>
 80064b0:	2300      	movs	r3, #0
 80064b2:	e04f      	b.n	8006554 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80064b4:	69f9      	ldr	r1, [r7, #28]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fd65 	bl	8005f86 <get_fat>
 80064bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d003      	beq.n	80064d2 <create_chain+0xa6>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d101      	bne.n	80064d6 <create_chain+0xaa>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	e03e      	b.n	8006554 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d1da      	bne.n	8006494 <create_chain+0x68>
 80064de:	2300      	movs	r3, #0
 80064e0:	e038      	b.n	8006554 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	69f9      	ldr	r1, [r7, #28]
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f7ff fe1f 	bl	800612e <put_fat>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <create_chain+0xe2>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d006      	beq.n	800650e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6938      	ldr	r0, [r7, #16]
 8006506:	f7ff fe12 	bl	800612e <put_fat>
 800650a:	4603      	mov	r3, r0
 800650c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800650e:	7dfb      	ldrb	r3, [r7, #23]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d116      	bne.n	8006542 <create_chain+0x116>
		fs->last_clst = ncl;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	69da      	ldr	r2, [r3, #28]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	3b02      	subs	r3, #2
 8006524:	429a      	cmp	r2, r3
 8006526:	d804      	bhi.n	8006532 <create_chain+0x106>
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	1e5a      	subs	r2, r3, #1
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	791b      	ldrb	r3, [r3, #4]
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	711a      	strb	r2, [r3, #4]
 8006540:	e007      	b.n	8006552 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d102      	bne.n	800654e <create_chain+0x122>
 8006548:	f04f 33ff 	mov.w	r3, #4294967295
 800654c:	e000      	b.n	8006550 <create_chain+0x124>
 800654e:	2301      	movs	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006552:	69fb      	ldr	r3, [r7, #28]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	3304      	adds	r3, #4
 8006572:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	899b      	ldrh	r3, [r3, #12]
 8006578:	461a      	mov	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	8952      	ldrh	r2, [r2, #10]
 8006584:	fbb3 f3f2 	udiv	r3, r3, r2
 8006588:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1d1a      	adds	r2, r3, #4
 800658e:	613a      	str	r2, [r7, #16]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <clmt_clust+0x42>
 800659a:	2300      	movs	r3, #0
 800659c:	e010      	b.n	80065c0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d307      	bcc.n	80065b6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3304      	adds	r3, #4
 80065b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065b4:	e7e9      	b.n	800658a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80065b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4413      	add	r3, r2
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065e2:	d204      	bcs.n	80065ee <dir_sdi+0x22>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80065ee:	2302      	movs	r3, #2
 80065f0:	e071      	b.n	80066d6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <dir_sdi+0x46>
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d902      	bls.n	8006612 <dir_sdi+0x46>
		clst = fs->dirbase;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10c      	bne.n	8006632 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	8912      	ldrh	r2, [r2, #8]
 8006620:	4293      	cmp	r3, r2
 8006622:	d301      	bcc.n	8006628 <dir_sdi+0x5c>
 8006624:	2302      	movs	r3, #2
 8006626:	e056      	b.n	80066d6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	61da      	str	r2, [r3, #28]
 8006630:	e02d      	b.n	800668e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	895b      	ldrh	r3, [r3, #10]
 8006636:	461a      	mov	r2, r3
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	899b      	ldrh	r3, [r3, #12]
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006642:	e019      	b.n	8006678 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6979      	ldr	r1, [r7, #20]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fc9c 	bl	8005f86 <get_fat>
 800664e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d101      	bne.n	800665c <dir_sdi+0x90>
 8006658:	2301      	movs	r3, #1
 800665a:	e03c      	b.n	80066d6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d904      	bls.n	800666c <dir_sdi+0xa0>
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	429a      	cmp	r2, r3
 800666a:	d301      	bcc.n	8006670 <dir_sdi+0xa4>
 800666c:	2302      	movs	r3, #2
 800666e:	e032      	b.n	80066d6 <dir_sdi+0x10a>
			ofs -= csz;
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	429a      	cmp	r2, r3
 800667e:	d2e1      	bcs.n	8006644 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006680:	6979      	ldr	r1, [r7, #20]
 8006682:	6938      	ldr	r0, [r7, #16]
 8006684:	f7ff fc60 	bl	8005f48 <clust2sect>
 8006688:	4602      	mov	r2, r0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <dir_sdi+0xd4>
 800669c:	2302      	movs	r3, #2
 800669e:	e01a      	b.n	80066d6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	899b      	ldrh	r3, [r3, #12]
 80066a8:	4619      	mov	r1, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	899b      	ldrh	r3, [r3, #12]
 80066c0:	461a      	mov	r2, r3
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80066c8:	fb00 f202 	mul.w	r2, r0, r2
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	18ca      	adds	r2, r1, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	3320      	adds	r3, #32
 80066f4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <dir_next+0x28>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006704:	d301      	bcc.n	800670a <dir_next+0x2c>
 8006706:	2304      	movs	r3, #4
 8006708:	e0bb      	b.n	8006882 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	899b      	ldrh	r3, [r3, #12]
 800670e:	461a      	mov	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	fbb3 f1f2 	udiv	r1, r3, r2
 8006716:	fb01 f202 	mul.w	r2, r1, r2
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 809d 	bne.w	800685c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	8912      	ldrh	r2, [r2, #8]
 800673c:	4293      	cmp	r3, r2
 800673e:	f0c0 808d 	bcc.w	800685c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	61da      	str	r2, [r3, #28]
 8006748:	2304      	movs	r3, #4
 800674a:	e09a      	b.n	8006882 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	899b      	ldrh	r3, [r3, #12]
 8006750:	461a      	mov	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	fbb3 f3f2 	udiv	r3, r3, r2
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	8952      	ldrh	r2, [r2, #10]
 800675c:	3a01      	subs	r2, #1
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d17b      	bne.n	800685c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7ff fc0a 	bl	8005f86 <get_fat>
 8006772:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d801      	bhi.n	800677e <dir_next+0xa0>
 800677a:	2302      	movs	r3, #2
 800677c:	e081      	b.n	8006882 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d101      	bne.n	800678a <dir_next+0xac>
 8006786:	2301      	movs	r3, #1
 8006788:	e07b      	b.n	8006882 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	429a      	cmp	r2, r3
 8006792:	d359      	bcc.n	8006848 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	61da      	str	r2, [r3, #28]
 80067a0:	2304      	movs	r3, #4
 80067a2:	e06e      	b.n	8006882 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7ff fe3d 	bl	800642c <create_chain>
 80067b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <dir_next+0xe0>
 80067ba:	2307      	movs	r3, #7
 80067bc:	e061      	b.n	8006882 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <dir_next+0xea>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e05c      	b.n	8006882 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ce:	d101      	bne.n	80067d4 <dir_next+0xf6>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e056      	b.n	8006882 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff fad5 	bl	8005d84 <sync_window>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <dir_next+0x106>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e04e      	b.n	8006882 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	899b      	ldrh	r3, [r3, #12]
 80067ee:	461a      	mov	r2, r3
 80067f0:	2100      	movs	r1, #0
 80067f2:	f7ff f8cc 	bl	800598e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	6979      	ldr	r1, [r7, #20]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff fba3 	bl	8005f48 <clust2sect>
 8006802:	4602      	mov	r2, r0
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
 8006808:	e012      	b.n	8006830 <dir_next+0x152>
						fs->wflag = 1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fab7 	bl	8005d84 <sync_window>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <dir_next+0x142>
 800681c:	2301      	movs	r3, #1
 800681e:	e030      	b.n	8006882 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3301      	adds	r3, #1
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	895b      	ldrh	r3, [r3, #10]
 8006834:	461a      	mov	r2, r3
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4293      	cmp	r3, r2
 800683a:	d3e6      	bcc.n	800680a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad2      	subs	r2, r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800684e:	6979      	ldr	r1, [r7, #20]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff fb79 	bl	8005f48 <clust2sect>
 8006856:	4602      	mov	r2, r0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	899b      	ldrh	r3, [r3, #12]
 800686c:	461a      	mov	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	fbb3 f0f2 	udiv	r0, r3, r2
 8006874:	fb00 f202 	mul.w	r2, r0, r2
 8006878:	1a9b      	subs	r3, r3, r2
 800687a:	18ca      	adds	r2, r1, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fe95 	bl	80065cc <dir_sdi>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d12b      	bne.n	8006904 <dir_alloc+0x7a>
		n = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	4619      	mov	r1, r3
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff faa8 	bl	8005e0c <move_window>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11d      	bne.n	8006902 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2be5      	cmp	r3, #229	; 0xe5
 80068ce:	d004      	beq.n	80068da <dir_alloc+0x50>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d107      	bne.n	80068ea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3301      	adds	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d102      	bne.n	80068ee <dir_alloc+0x64>
 80068e8:	e00c      	b.n	8006904 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80068ee:	2101      	movs	r1, #1
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fef4 	bl	80066de <dir_next>
 80068f6:	4603      	mov	r3, r0
 80068f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0d7      	beq.n	80068b0 <dir_alloc+0x26>
 8006900:	e000      	b.n	8006904 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006902:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006904:	7dfb      	ldrb	r3, [r7, #23]
 8006906:	2b04      	cmp	r3, #4
 8006908:	d101      	bne.n	800690e <dir_alloc+0x84>
 800690a:	2307      	movs	r3, #7
 800690c:	75fb      	strb	r3, [r7, #23]
	return res;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	331a      	adds	r3, #26
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe ff8e 	bl	8005848 <ld_word>
 800692c:	4603      	mov	r3, r0
 800692e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d109      	bne.n	800694c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	3314      	adds	r3, #20
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe ff83 	bl	8005848 <ld_word>
 8006942:	4603      	mov	r3, r0
 8006944:	041b      	lsls	r3, r3, #16
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800694c:	68fb      	ldr	r3, [r7, #12]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	331a      	adds	r3, #26
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	b292      	uxth	r2, r2
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe ffa6 	bl	80058be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d109      	bne.n	800698e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f103 0214 	add.w	r2, r3, #20
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	b29b      	uxth	r3, r3
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f7fe ff98 	bl	80058be <st_word>
	}
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	331a      	adds	r3, #26
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe ff4e 	bl	8005848 <ld_word>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <cmp_lfn+0x1e>
 80069b2:	2300      	movs	r3, #0
 80069b4:	e059      	b.n	8006a6a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069be:	1e5a      	subs	r2, r3, #1
 80069c0:	4613      	mov	r3, r2
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069cc:	2301      	movs	r3, #1
 80069ce:	81fb      	strh	r3, [r7, #14]
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	e033      	b.n	8006a3e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80069d6:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <cmp_lfn+0xdc>)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	4413      	add	r3, r2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe ff2f 	bl	8005848 <ld_word>
 80069ea:	4603      	mov	r3, r0
 80069ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80069ee:	89fb      	ldrh	r3, [r7, #14]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01a      	beq.n	8006a2a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2bfe      	cmp	r3, #254	; 0xfe
 80069f8:	d812      	bhi.n	8006a20 <cmp_lfn+0x88>
 80069fa:	89bb      	ldrh	r3, [r7, #12]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 fdcd 	bl	800859c <ff_wtoupper>
 8006a02:	4603      	mov	r3, r0
 8006a04:	461c      	mov	r4, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	617a      	str	r2, [r7, #20]
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 fdc1 	bl	800859c <ff_wtoupper>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	d001      	beq.n	8006a24 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006a20:	2300      	movs	r3, #0
 8006a22:	e022      	b.n	8006a6a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006a24:	89bb      	ldrh	r3, [r7, #12]
 8006a26:	81fb      	strh	r3, [r7, #14]
 8006a28:	e006      	b.n	8006a38 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006a2a:	89bb      	ldrh	r3, [r7, #12]
 8006a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d001      	beq.n	8006a38 <cmp_lfn+0xa0>
 8006a34:	2300      	movs	r3, #0
 8006a36:	e018      	b.n	8006a6a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b0c      	cmp	r3, #12
 8006a42:	d9c8      	bls.n	80069d6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <cmp_lfn+0xd0>
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <cmp_lfn+0xd0>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <cmp_lfn+0xd0>
 8006a64:	2300      	movs	r3, #0
 8006a66:	e000      	b.n	8006a6a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006a68:	2301      	movs	r3, #1
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd90      	pop	{r4, r7, pc}
 8006a72:	bf00      	nop
 8006a74:	0800d5a0 	.word	0x0800d5a0

08006a78 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4611      	mov	r1, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	460b      	mov	r3, r1
 8006a88:	71fb      	strb	r3, [r7, #7]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	330d      	adds	r3, #13
 8006a92:	79ba      	ldrb	r2, [r7, #6]
 8006a94:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	330b      	adds	r3, #11
 8006a9a:	220f      	movs	r2, #15
 8006a9c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	331a      	adds	r3, #26
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe ff06 	bl	80058be <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	1e5a      	subs	r2, r3, #1
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	82fb      	strh	r3, [r7, #22]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d007      	beq.n	8006ae4 <put_lfn+0x6c>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	61fa      	str	r2, [r7, #28]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006ae4:	4a17      	ldr	r2, [pc, #92]	; (8006b44 <put_lfn+0xcc>)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4413      	add	r3, r2
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	8afa      	ldrh	r2, [r7, #22]
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fee1 	bl	80058be <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006afc:	8afb      	ldrh	r3, [r7, #22]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <put_lfn+0x90>
 8006b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b06:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	d9da      	bls.n	8006aca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006b14:	8afb      	ldrh	r3, [r7, #22]
 8006b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d006      	beq.n	8006b2c <put_lfn+0xb4>
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <put_lfn+0xbc>
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b32:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	79fa      	ldrb	r2, [r7, #7]
 8006b38:	701a      	strb	r2, [r3, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	0800d5a0 	.word	0x0800d5a0

08006b48 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08c      	sub	sp, #48	; 0x30
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006b56:	220b      	movs	r2, #11
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7fe fef6 	bl	800594c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	d92b      	bls.n	8006bbe <gen_numname+0x76>
		sr = seq;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006b6a:	e022      	b.n	8006bb2 <gen_numname+0x6a>
			wc = *lfn++;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	1c9a      	adds	r2, r3, #2
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006b76:	2300      	movs	r3, #0
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b7a:	e017      	b.n	8006bac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	005a      	lsls	r2, r3, #1
 8006b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006b8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <gen_numname+0x5e>
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006ba0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006ba4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	3301      	adds	r3, #1
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b0f      	cmp	r3, #15
 8006bb0:	d9e4      	bls.n	8006b7c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1d8      	bne.n	8006b6c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006bbe:	2307      	movs	r3, #7
 8006bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	3330      	adds	r3, #48	; 0x30
 8006bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bd6:	2b39      	cmp	r3, #57	; 0x39
 8006bd8:	d904      	bls.n	8006be4 <gen_numname+0x9c>
 8006bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bde:	3307      	adds	r3, #7
 8006be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	1e5a      	subs	r2, r3, #1
 8006be8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bea:	3330      	adds	r3, #48	; 0x30
 8006bec:	443b      	add	r3, r7
 8006bee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006bf2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1df      	bne.n	8006bc2 <gen_numname+0x7a>
	ns[i] = '~';
 8006c02:	f107 0214 	add.w	r2, r7, #20
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	4413      	add	r3, r2
 8006c0a:	227e      	movs	r2, #126	; 0x7e
 8006c0c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006c0e:	2300      	movs	r3, #0
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
 8006c12:	e002      	b.n	8006c1a <gen_numname+0xd2>
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	3301      	adds	r3, #1
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d205      	bcs.n	8006c2e <gen_numname+0xe6>
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	4413      	add	r3, r2
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d1f2      	bne.n	8006c14 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	2b07      	cmp	r3, #7
 8006c32:	d807      	bhi.n	8006c44 <gen_numname+0xfc>
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c3a:	3330      	adds	r3, #48	; 0x30
 8006c3c:	443b      	add	r3, r7
 8006c3e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006c42:	e000      	b.n	8006c46 <gen_numname+0xfe>
 8006c44:	2120      	movs	r1, #32
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	460a      	mov	r2, r1
 8006c52:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	2b07      	cmp	r3, #7
 8006c58:	d9e9      	bls.n	8006c2e <gen_numname+0xe6>
}
 8006c5a:	bf00      	nop
 8006c5c:	bf00      	nop
 8006c5e:	3730      	adds	r7, #48	; 0x30
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006c70:	230b      	movs	r3, #11
 8006c72:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	0852      	lsrs	r2, r2, #1
 8006c7a:	01db      	lsls	r3, r3, #7
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	6079      	str	r1, [r7, #4]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	60bb      	str	r3, [r7, #8]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ed      	bne.n	8006c74 <sum_sfn+0x10>
	return sum;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fc88 	bl	80065cc <dir_sdi>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <dir_find+0x24>
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	e0a9      	b.n	8006e1e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006cca:	23ff      	movs	r3, #255	; 0xff
 8006ccc:	753b      	strb	r3, [r7, #20]
 8006cce:	7d3b      	ldrb	r3, [r7, #20]
 8006cd0:	757b      	strb	r3, [r7, #21]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6938      	ldr	r0, [r7, #16]
 8006ce2:	f7ff f893 	bl	8005e0c <move_window>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 8090 	bne.w	8006e12 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006cfa:	7dbb      	ldrb	r3, [r7, #22]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <dir_find+0x60>
 8006d00:	2304      	movs	r3, #4
 8006d02:	75fb      	strb	r3, [r7, #23]
 8006d04:	e08a      	b.n	8006e1c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	330b      	adds	r3, #11
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7bfa      	ldrb	r2, [r7, #15]
 8006d18:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006d1a:	7dbb      	ldrb	r3, [r7, #22]
 8006d1c:	2be5      	cmp	r3, #229	; 0xe5
 8006d1e:	d007      	beq.n	8006d30 <dir_find+0x8a>
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <dir_find+0x98>
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b0f      	cmp	r3, #15
 8006d2e:	d006      	beq.n	8006d3e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d30:	23ff      	movs	r3, #255	; 0xff
 8006d32:	757b      	strb	r3, [r7, #21]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d3c:	e05e      	b.n	8006dfc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	2b0f      	cmp	r3, #15
 8006d42:	d136      	bne.n	8006db2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d154      	bne.n	8006dfc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006d52:	7dbb      	ldrb	r3, [r7, #22]
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	7b5b      	ldrb	r3, [r3, #13]
 8006d62:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006d64:	7dbb      	ldrb	r3, [r7, #22]
 8006d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d6a:	75bb      	strb	r3, [r7, #22]
 8006d6c:	7dbb      	ldrb	r3, [r7, #22]
 8006d6e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695a      	ldr	r2, [r3, #20]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006d78:	7dba      	ldrb	r2, [r7, #22]
 8006d7a:	7d7b      	ldrb	r3, [r7, #21]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d115      	bne.n	8006dac <dir_find+0x106>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	330d      	adds	r3, #13
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	7d3a      	ldrb	r2, [r7, #20]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10e      	bne.n	8006dac <dir_find+0x106>
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f7ff fdfd 	bl	8006998 <cmp_lfn>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <dir_find+0x106>
 8006da4:	7d7b      	ldrb	r3, [r7, #21]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	e000      	b.n	8006dae <dir_find+0x108>
 8006dac:	23ff      	movs	r3, #255	; 0xff
 8006dae:	757b      	strb	r3, [r7, #21]
 8006db0:	e024      	b.n	8006dfc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006db2:	7d7b      	ldrb	r3, [r7, #21]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d109      	bne.n	8006dcc <dir_find+0x126>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff51 	bl	8006c64 <sum_sfn>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	7d3b      	ldrb	r3, [r7, #20]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d024      	beq.n	8006e16 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <dir_find+0x14a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a18      	ldr	r0, [r3, #32]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3324      	adds	r3, #36	; 0x24
 8006de2:	220b      	movs	r2, #11
 8006de4:	4619      	mov	r1, r3
 8006de6:	f7fe fded 	bl	80059c4 <mem_cmp>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d014      	beq.n	8006e1a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006df0:	23ff      	movs	r3, #255	; 0xff
 8006df2:	757b      	strb	r3, [r7, #21]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fc6d 	bl	80066de <dir_next>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f43f af65 	beq.w	8006cda <dir_find+0x34>
 8006e10:	e004      	b.n	8006e1c <dir_find+0x176>
		if (res != FR_OK) break;
 8006e12:	bf00      	nop
 8006e14:	e002      	b.n	8006e1c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e1a:	bf00      	nop

	return res;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08c      	sub	sp, #48	; 0x30
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006e3c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <dir_register+0x20>
 8006e44:	2306      	movs	r3, #6
 8006e46:	e0e0      	b.n	800700a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	e002      	b.n	8006e54 <dir_register+0x2c>
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	3301      	adds	r3, #1
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f4      	bne.n	8006e4e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006e6a:	f107 030c 	add.w	r3, r7, #12
 8006e6e:	220c      	movs	r2, #12
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fd6b 	bl	800594c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d032      	beq.n	8006ee6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2240      	movs	r2, #64	; 0x40
 8006e84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006e88:	2301      	movs	r3, #1
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8c:	e016      	b.n	8006ebc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	f107 010c 	add.w	r1, r7, #12
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	f7ff fe53 	bl	8006b48 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff feff 	bl	8006ca6 <dir_find>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	3301      	adds	r3, #1
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	2b63      	cmp	r3, #99	; 0x63
 8006ec0:	d9e5      	bls.n	8006e8e <dir_register+0x66>
 8006ec2:	e000      	b.n	8006ec6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006ec4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	2b64      	cmp	r3, #100	; 0x64
 8006eca:	d101      	bne.n	8006ed0 <dir_register+0xa8>
 8006ecc:	2307      	movs	r3, #7
 8006ece:	e09c      	b.n	800700a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d002      	beq.n	8006ede <dir_register+0xb6>
 8006ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006edc:	e095      	b.n	800700a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006ede:	7dfa      	ldrb	r2, [r7, #23]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <dir_register+0xd8>
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	4a47      	ldr	r2, [pc, #284]	; (8007014 <dir_register+0x1ec>)
 8006ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	3301      	adds	r3, #1
 8006efe:	e000      	b.n	8006f02 <dir_register+0xda>
 8006f00:	2301      	movs	r3, #1
 8006f02:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006f04:	6a39      	ldr	r1, [r7, #32]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fcbf 	bl	800688a <dir_alloc>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d148      	bne.n	8006fac <dir_register+0x184>
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	623b      	str	r3, [r7, #32]
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d042      	beq.n	8006fac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695a      	ldr	r2, [r3, #20]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	015b      	lsls	r3, r3, #5
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fb4a 	bl	80065cc <dir_sdi>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d132      	bne.n	8006fac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3324      	adds	r3, #36	; 0x24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fe8a 	bl	8006c64 <sum_sfn>
 8006f50:	4603      	mov	r3, r0
 8006f52:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	69f8      	ldr	r0, [r7, #28]
 8006f5c:	f7fe ff56 	bl	8005e0c <move_window>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d11d      	bne.n	8006faa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	6918      	ldr	r0, [r3, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a19      	ldr	r1, [r3, #32]
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	7efb      	ldrb	r3, [r7, #27]
 8006f7c:	f7ff fd7c 	bl	8006a78 <put_lfn>
				fs->wflag = 1;
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	2201      	movs	r2, #1
 8006f84:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006f86:	2100      	movs	r1, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff fba8 	bl	80066de <dir_next>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d107      	bne.n	8006fac <dir_register+0x184>
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	623b      	str	r3, [r7, #32]
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1d5      	bne.n	8006f54 <dir_register+0x12c>
 8006fa8:	e000      	b.n	8006fac <dir_register+0x184>
				if (res != FR_OK) break;
 8006faa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d128      	bne.n	8007006 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	69f8      	ldr	r0, [r7, #28]
 8006fbc:	f7fe ff26 	bl	8005e0c <move_window>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d11b      	bne.n	8007006 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fcd9 	bl	800598e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a18      	ldr	r0, [r3, #32]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3324      	adds	r3, #36	; 0x24
 8006fe4:	220b      	movs	r2, #11
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	f7fe fcb0 	bl	800594c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	f002 0218 	and.w	r2, r2, #24
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	2201      	movs	r2, #1
 8007004:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800700a:	4618      	mov	r0, r3
 800700c:	3730      	adds	r7, #48	; 0x30
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	4ec4ec4f 	.word	0x4ec4ec4f

08007018 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	; 0x28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	61ba      	str	r2, [r7, #24]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4413      	add	r3, r2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007048:	2b1f      	cmp	r3, #31
 800704a:	d940      	bls.n	80070ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800704c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704e:	2b2f      	cmp	r3, #47	; 0x2f
 8007050:	d006      	beq.n	8007060 <create_name+0x48>
 8007052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007054:	2b5c      	cmp	r3, #92	; 0x5c
 8007056:	d110      	bne.n	800707a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007058:	e002      	b.n	8007060 <create_name+0x48>
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	3301      	adds	r3, #1
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	4413      	add	r3, r2
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b2f      	cmp	r3, #47	; 0x2f
 800706a:	d0f6      	beq.n	800705a <create_name+0x42>
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	4413      	add	r3, r2
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b5c      	cmp	r3, #92	; 0x5c
 8007076:	d0f0      	beq.n	800705a <create_name+0x42>
			break;
 8007078:	e02a      	b.n	80070d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2bfe      	cmp	r3, #254	; 0xfe
 800707e:	d901      	bls.n	8007084 <create_name+0x6c>
 8007080:	2306      	movs	r3, #6
 8007082:	e17d      	b.n	8007380 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007086:	b2db      	uxtb	r3, r3
 8007088:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800708a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708c:	2101      	movs	r1, #1
 800708e:	4618      	mov	r0, r3
 8007090:	f001 fa48 	bl	8008524 <ff_convert>
 8007094:	4603      	mov	r3, r0
 8007096:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <create_name+0x8a>
 800709e:	2306      	movs	r3, #6
 80070a0:	e16e      	b.n	8007380 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80070a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a4:	2b7f      	cmp	r3, #127	; 0x7f
 80070a6:	d809      	bhi.n	80070bc <create_name+0xa4>
 80070a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070aa:	4619      	mov	r1, r3
 80070ac:	488d      	ldr	r0, [pc, #564]	; (80072e4 <create_name+0x2cc>)
 80070ae:	f7fe fcb0 	bl	8005a12 <chk_chr>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <create_name+0xa4>
 80070b8:	2306      	movs	r3, #6
 80070ba:	e161      	b.n	8007380 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	617a      	str	r2, [r7, #20]
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80070cc:	e7b4      	b.n	8007038 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80070ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	441a      	add	r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070dc:	2b1f      	cmp	r3, #31
 80070de:	d801      	bhi.n	80070e4 <create_name+0xcc>
 80070e0:	2304      	movs	r3, #4
 80070e2:	e000      	b.n	80070e6 <create_name+0xce>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070ea:	e011      	b.n	8007110 <create_name+0xf8>
		w = lfn[di - 1];
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070f2:	3b01      	subs	r3, #1
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80070fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007100:	2b20      	cmp	r3, #32
 8007102:	d002      	beq.n	800710a <create_name+0xf2>
 8007104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007106:	2b2e      	cmp	r3, #46	; 0x2e
 8007108:	d106      	bne.n	8007118 <create_name+0x100>
		di--;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	3b01      	subs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1ea      	bne.n	80070ec <create_name+0xd4>
 8007116:	e000      	b.n	800711a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007118:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <create_name+0x118>
 800712c:	2306      	movs	r3, #6
 800712e:	e127      	b.n	8007380 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3324      	adds	r3, #36	; 0x24
 8007134:	220b      	movs	r2, #11
 8007136:	2120      	movs	r1, #32
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fc28 	bl	800598e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800713e:	2300      	movs	r3, #0
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	e002      	b.n	800714a <create_name+0x132>
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	3301      	adds	r3, #1
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	2b20      	cmp	r3, #32
 8007156:	d0f5      	beq.n	8007144 <create_name+0x12c>
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	2b2e      	cmp	r3, #46	; 0x2e
 8007164:	d0ee      	beq.n	8007144 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <create_name+0x168>
 800716c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007170:	f043 0303 	orr.w	r3, r3, #3
 8007174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007178:	e002      	b.n	8007180 <create_name+0x168>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	3b01      	subs	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <create_name+0x182>
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800718c:	3b01      	subs	r3, #1
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	2b2e      	cmp	r3, #46	; 0x2e
 8007198:	d1ef      	bne.n	800717a <create_name+0x162>

	i = b = 0; ni = 8;
 800719a:	2300      	movs	r3, #0
 800719c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071a0:	2300      	movs	r3, #0
 80071a2:	623b      	str	r3, [r7, #32]
 80071a4:	2308      	movs	r3, #8
 80071a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	61ba      	str	r2, [r7, #24]
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80071b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8090 	beq.w	80072e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80071c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d006      	beq.n	80071d4 <create_name+0x1bc>
 80071c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c8:	2b2e      	cmp	r3, #46	; 0x2e
 80071ca:	d10a      	bne.n	80071e2 <create_name+0x1ca>
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d006      	beq.n	80071e2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80071d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d8:	f043 0303 	orr.w	r3, r3, #3
 80071dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071e0:	e07d      	b.n	80072de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d203      	bcs.n	80071f2 <create_name+0x1da>
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d123      	bne.n	800723a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	2b0b      	cmp	r3, #11
 80071f6:	d106      	bne.n	8007206 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80071f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071fc:	f043 0303 	orr.w	r3, r3, #3
 8007200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007204:	e075      	b.n	80072f2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	429a      	cmp	r2, r3
 800720c:	d005      	beq.n	800721a <create_name+0x202>
 800720e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007212:	f043 0303 	orr.w	r3, r3, #3
 8007216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	429a      	cmp	r2, r3
 8007220:	d866      	bhi.n	80072f0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	2308      	movs	r3, #8
 8007228:	623b      	str	r3, [r7, #32]
 800722a:	230b      	movs	r3, #11
 800722c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800722e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007238:	e051      	b.n	80072de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800723a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800723c:	2b7f      	cmp	r3, #127	; 0x7f
 800723e:	d914      	bls.n	800726a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007242:	2100      	movs	r1, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f96d 	bl	8008524 <ff_convert>
 800724a:	4603      	mov	r3, r0
 800724c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800724e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <create_name+0x246>
 8007254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007256:	3b80      	subs	r3, #128	; 0x80
 8007258:	4a23      	ldr	r2, [pc, #140]	; (80072e8 <create_name+0x2d0>)
 800725a:	5cd3      	ldrb	r3, [r2, r3]
 800725c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800725e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007262:	f043 0302 	orr.w	r3, r3, #2
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800726a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d007      	beq.n	8007280 <create_name+0x268>
 8007270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007272:	4619      	mov	r1, r3
 8007274:	481d      	ldr	r0, [pc, #116]	; (80072ec <create_name+0x2d4>)
 8007276:	f7fe fbcc 	bl	8005a12 <chk_chr>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007280:	235f      	movs	r3, #95	; 0x5f
 8007282:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007288:	f043 0303 	orr.w	r3, r3, #3
 800728c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007290:	e01b      	b.n	80072ca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	d909      	bls.n	80072ac <create_name+0x294>
 8007298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800729a:	2b5a      	cmp	r3, #90	; 0x5a
 800729c:	d806      	bhi.n	80072ac <create_name+0x294>
					b |= 2;
 800729e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072a2:	f043 0302 	orr.w	r3, r3, #2
 80072a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072aa:	e00e      	b.n	80072ca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80072ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072ae:	2b60      	cmp	r3, #96	; 0x60
 80072b0:	d90b      	bls.n	80072ca <create_name+0x2b2>
 80072b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b4:	2b7a      	cmp	r3, #122	; 0x7a
 80072b6:	d808      	bhi.n	80072ca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80072b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072c6:	3b20      	subs	r3, #32
 80072c8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	623a      	str	r2, [r7, #32]
 80072d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072d2:	b2d1      	uxtb	r1, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	4413      	add	r3, r2
 80072d8:	460a      	mov	r2, r1
 80072da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80072de:	e763      	b.n	80071a8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80072e0:	bf00      	nop
 80072e2:	e006      	b.n	80072f2 <create_name+0x2da>
 80072e4:	0800d420 	.word	0x0800d420
 80072e8:	0800d520 	.word	0x0800d520
 80072ec:	0800d42c 	.word	0x0800d42c
			if (si > di) break;			/* No extension */
 80072f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072f8:	2be5      	cmp	r3, #229	; 0xe5
 80072fa:	d103      	bne.n	8007304 <create_name+0x2ec>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2205      	movs	r2, #5
 8007300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	2b08      	cmp	r3, #8
 8007308:	d104      	bne.n	8007314 <create_name+0x2fc>
 800730a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007314:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007318:	f003 030c 	and.w	r3, r3, #12
 800731c:	2b0c      	cmp	r3, #12
 800731e:	d005      	beq.n	800732c <create_name+0x314>
 8007320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	2b03      	cmp	r3, #3
 800732a:	d105      	bne.n	8007338 <create_name+0x320>
 800732c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007330:	f043 0302 	orr.w	r3, r3, #2
 8007334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d117      	bne.n	8007374 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <create_name+0x344>
 8007350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007354:	f043 0310 	orr.w	r3, r3, #16
 8007358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800735c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007360:	f003 030c 	and.w	r3, r3, #12
 8007364:	2b04      	cmp	r3, #4
 8007366:	d105      	bne.n	8007374 <create_name+0x35c>
 8007368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800736c:	f043 0308 	orr.w	r3, r3, #8
 8007370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800737a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800737e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007380:	4618      	mov	r0, r3
 8007382:	3728      	adds	r7, #40	; 0x28
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800739c:	e002      	b.n	80073a4 <follow_path+0x1c>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b2f      	cmp	r3, #47	; 0x2f
 80073aa:	d0f8      	beq.n	800739e <follow_path+0x16>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b5c      	cmp	r3, #92	; 0x5c
 80073b2:	d0f4      	beq.n	800739e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2200      	movs	r2, #0
 80073b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b1f      	cmp	r3, #31
 80073c0:	d80a      	bhi.n	80073d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2280      	movs	r2, #128	; 0x80
 80073c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80073ca:	2100      	movs	r1, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff f8fd 	bl	80065cc <dir_sdi>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]
 80073d6:	e048      	b.n	800746a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073d8:	463b      	mov	r3, r7
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff fe1b 	bl	8007018 <create_name>
 80073e2:	4603      	mov	r3, r0
 80073e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d139      	bne.n	8007460 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fc5a 	bl	8006ca6 <dir_find>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b04      	cmp	r3, #4
 8007408:	d12c      	bne.n	8007464 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d127      	bne.n	8007464 <follow_path+0xdc>
 8007414:	2305      	movs	r3, #5
 8007416:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007418:	e024      	b.n	8007464 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d121      	bne.n	8007468 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	799b      	ldrb	r3, [r3, #6]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007430:	2305      	movs	r3, #5
 8007432:	75fb      	strb	r3, [r7, #23]
 8007434:	e019      	b.n	800746a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	8992      	ldrh	r2, [r2, #12]
 8007444:	fbb3 f0f2 	udiv	r0, r3, r2
 8007448:	fb00 f202 	mul.w	r2, r0, r2
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	440b      	add	r3, r1
 8007450:	4619      	mov	r1, r3
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7ff fa60 	bl	8006918 <ld_clust>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800745e:	e7bb      	b.n	80073d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007460:	bf00      	nop
 8007462:	e002      	b.n	800746a <follow_path+0xe2>
				break;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007468:	bf00      	nop
			}
		}
	}

	return res;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800747c:	f04f 33ff 	mov.w	r3, #4294967295
 8007480:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d031      	beq.n	80074ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e002      	b.n	8007498 <get_ldnumber+0x24>
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	3301      	adds	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b1f      	cmp	r3, #31
 800749e:	d903      	bls.n	80074a8 <get_ldnumber+0x34>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b3a      	cmp	r3, #58	; 0x3a
 80074a6:	d1f4      	bne.n	8007492 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b3a      	cmp	r3, #58	; 0x3a
 80074ae:	d11c      	bne.n	80074ea <get_ldnumber+0x76>
			tp = *path;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	60fa      	str	r2, [r7, #12]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	3b30      	subs	r3, #48	; 0x30
 80074c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	d80e      	bhi.n	80074e6 <get_ldnumber+0x72>
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d10a      	bne.n	80074e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d107      	bne.n	80074e6 <get_ldnumber+0x72>
					vol = (int)i;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	3301      	adds	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	e002      	b.n	80074f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80074ea:	2300      	movs	r3, #0
 80074ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80074ee:	693b      	ldr	r3, [r7, #16]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	70da      	strb	r2, [r3, #3]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f04f 32ff 	mov.w	r2, #4294967295
 8007512:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fe fc78 	bl	8005e0c <move_window>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <check_fs+0x2a>
 8007522:	2304      	movs	r3, #4
 8007524:	e038      	b.n	8007598 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	333c      	adds	r3, #60	; 0x3c
 800752a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe f98a 	bl	8005848 <ld_word>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800753c:	429a      	cmp	r2, r3
 800753e:	d001      	beq.n	8007544 <check_fs+0x48>
 8007540:	2303      	movs	r3, #3
 8007542:	e029      	b.n	8007598 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800754a:	2be9      	cmp	r3, #233	; 0xe9
 800754c:	d009      	beq.n	8007562 <check_fs+0x66>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007554:	2beb      	cmp	r3, #235	; 0xeb
 8007556:	d11e      	bne.n	8007596 <check_fs+0x9a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800755e:	2b90      	cmp	r3, #144	; 0x90
 8007560:	d119      	bne.n	8007596 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	333c      	adds	r3, #60	; 0x3c
 8007566:	3336      	adds	r3, #54	; 0x36
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f985 	bl	8005878 <ld_dword>
 800756e:	4603      	mov	r3, r0
 8007570:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007574:	4a0a      	ldr	r2, [pc, #40]	; (80075a0 <check_fs+0xa4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d101      	bne.n	800757e <check_fs+0x82>
 800757a:	2300      	movs	r3, #0
 800757c:	e00c      	b.n	8007598 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	333c      	adds	r3, #60	; 0x3c
 8007582:	3352      	adds	r3, #82	; 0x52
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe f977 	bl	8005878 <ld_dword>
 800758a:	4603      	mov	r3, r0
 800758c:	4a05      	ldr	r2, [pc, #20]	; (80075a4 <check_fs+0xa8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d101      	bne.n	8007596 <check_fs+0x9a>
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007596:	2302      	movs	r3, #2
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	00544146 	.word	0x00544146
 80075a4:	33544146 	.word	0x33544146

080075a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b096      	sub	sp, #88	; 0x58
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ff59 	bl	8007474 <get_ldnumber>
 80075c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80075c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da01      	bge.n	80075ce <find_volume+0x26>
 80075ca:	230b      	movs	r3, #11
 80075cc:	e26a      	b.n	8007aa4 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80075ce:	4aa3      	ldr	r2, [pc, #652]	; (800785c <find_volume+0x2b4>)
 80075d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <find_volume+0x3a>
 80075de:	230c      	movs	r3, #12
 80075e0:	e260      	b.n	8007aa4 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80075e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075e4:	f7fe fa30 	bl	8005a48 <lock_fs>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <find_volume+0x4a>
 80075ee:	230f      	movs	r3, #15
 80075f0:	e258      	b.n	8007aa4 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01a      	beq.n	800763e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe f87d 	bl	800570c <disk_status>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10c      	bne.n	800763e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <find_volume+0x92>
 800762a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007636:	230a      	movs	r3, #10
 8007638:	e234      	b.n	8007aa4 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800763a:	2300      	movs	r3, #0
 800763c:	e232      	b.n	8007aa4 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	b2da      	uxtb	r2, r3
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe f875 	bl	8005740 <disk_initialize>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800765c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007668:	2303      	movs	r3, #3
 800766a:	e21b      	b.n	8007aa4 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <find_volume+0xda>
 8007672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800767e:	230a      	movs	r3, #10
 8007680:	e210      	b.n	8007aa4 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	7858      	ldrb	r0, [r3, #1]
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	330c      	adds	r3, #12
 800768a:	461a      	mov	r2, r3
 800768c:	2102      	movs	r1, #2
 800768e:	f7fe f8bd 	bl	800580c <disk_ioctl>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <find_volume+0xf4>
 8007698:	2301      	movs	r3, #1
 800769a:	e203      	b.n	8007aa4 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	899b      	ldrh	r3, [r3, #12]
 80076a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a4:	d80d      	bhi.n	80076c2 <find_volume+0x11a>
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	899b      	ldrh	r3, [r3, #12]
 80076aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ae:	d308      	bcc.n	80076c2 <find_volume+0x11a>
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	899b      	ldrh	r3, [r3, #12]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	899b      	ldrh	r3, [r3, #12]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <find_volume+0x11e>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e1ee      	b.n	8007aa4 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80076ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076ce:	f7ff ff15 	bl	80074fc <check_fs>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80076d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d149      	bne.n	8007774 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076e0:	2300      	movs	r3, #0
 80076e2:	643b      	str	r3, [r7, #64]	; 0x40
 80076e4:	e01e      	b.n	8007724 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80076ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80076f4:	4413      	add	r3, r2
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	3304      	adds	r3, #4
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d006      	beq.n	8007710 <find_volume+0x168>
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	3308      	adds	r3, #8
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe f8b6 	bl	8005878 <ld_dword>
 800770c:	4602      	mov	r2, r0
 800770e:	e000      	b.n	8007712 <find_volume+0x16a>
 8007710:	2200      	movs	r2, #0
 8007712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	3358      	adds	r3, #88	; 0x58
 8007718:	443b      	add	r3, r7
 800771a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800771e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007720:	3301      	adds	r3, #1
 8007722:	643b      	str	r3, [r7, #64]	; 0x40
 8007724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007726:	2b03      	cmp	r3, #3
 8007728:	d9dd      	bls.n	80076e6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800772a:	2300      	movs	r3, #0
 800772c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800772e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <find_volume+0x192>
 8007734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007736:	3b01      	subs	r3, #1
 8007738:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	3358      	adds	r3, #88	; 0x58
 8007740:	443b      	add	r3, r7
 8007742:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007746:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <find_volume+0x1b2>
 800774e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007752:	f7ff fed3 	bl	80074fc <check_fs>
 8007756:	4603      	mov	r3, r0
 8007758:	e000      	b.n	800775c <find_volume+0x1b4>
 800775a:	2303      	movs	r3, #3
 800775c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007764:	2b01      	cmp	r3, #1
 8007766:	d905      	bls.n	8007774 <find_volume+0x1cc>
 8007768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776a:	3301      	adds	r3, #1
 800776c:	643b      	str	r3, [r7, #64]	; 0x40
 800776e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007770:	2b03      	cmp	r3, #3
 8007772:	d9e2      	bls.n	800773a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007778:	2b04      	cmp	r3, #4
 800777a:	d101      	bne.n	8007780 <find_volume+0x1d8>
 800777c:	2301      	movs	r3, #1
 800777e:	e191      	b.n	8007aa4 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007784:	2b01      	cmp	r3, #1
 8007786:	d901      	bls.n	800778c <find_volume+0x1e4>
 8007788:	230d      	movs	r3, #13
 800778a:	e18b      	b.n	8007aa4 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	333c      	adds	r3, #60	; 0x3c
 8007790:	330b      	adds	r3, #11
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe f858 	bl	8005848 <ld_word>
 8007798:	4603      	mov	r3, r0
 800779a:	461a      	mov	r2, r3
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	899b      	ldrh	r3, [r3, #12]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d001      	beq.n	80077a8 <find_volume+0x200>
 80077a4:	230d      	movs	r3, #13
 80077a6:	e17d      	b.n	8007aa4 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	333c      	adds	r3, #60	; 0x3c
 80077ac:	3316      	adds	r3, #22
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe f84a 	bl	8005848 <ld_word>
 80077b4:	4603      	mov	r3, r0
 80077b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80077b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <find_volume+0x224>
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	333c      	adds	r3, #60	; 0x3c
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe f857 	bl	8005878 <ld_dword>
 80077ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077d0:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077de:	789b      	ldrb	r3, [r3, #2]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d005      	beq.n	80077f0 <find_volume+0x248>
 80077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e6:	789b      	ldrb	r3, [r3, #2]
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d001      	beq.n	80077f0 <find_volume+0x248>
 80077ec:	230d      	movs	r3, #13
 80077ee:	e159      	b.n	8007aa4 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	789b      	ldrb	r3, [r3, #2]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f8:	fb02 f303 	mul.w	r3, r2, r3
 80077fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007804:	b29a      	uxth	r2, r3
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	895b      	ldrh	r3, [r3, #10]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d008      	beq.n	8007824 <find_volume+0x27c>
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	895b      	ldrh	r3, [r3, #10]
 8007816:	461a      	mov	r2, r3
 8007818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781a:	895b      	ldrh	r3, [r3, #10]
 800781c:	3b01      	subs	r3, #1
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <find_volume+0x280>
 8007824:	230d      	movs	r3, #13
 8007826:	e13d      	b.n	8007aa4 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	333c      	adds	r3, #60	; 0x3c
 800782c:	3311      	adds	r3, #17
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe f80a 	bl	8005848 <ld_word>
 8007834:	4603      	mov	r3, r0
 8007836:	461a      	mov	r2, r3
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	891b      	ldrh	r3, [r3, #8]
 8007840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007842:	8992      	ldrh	r2, [r2, #12]
 8007844:	0952      	lsrs	r2, r2, #5
 8007846:	b292      	uxth	r2, r2
 8007848:	fbb3 f1f2 	udiv	r1, r3, r2
 800784c:	fb01 f202 	mul.w	r2, r1, r2
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <find_volume+0x2b8>
 8007858:	230d      	movs	r3, #13
 800785a:	e123      	b.n	8007aa4 <find_volume+0x4fc>
 800785c:	20002368 	.word	0x20002368

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	333c      	adds	r3, #60	; 0x3c
 8007864:	3313      	adds	r3, #19
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd ffee 	bl	8005848 <ld_word>
 800786c:	4603      	mov	r3, r0
 800786e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <find_volume+0x2dc>
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	333c      	adds	r3, #60	; 0x3c
 800787a:	3320      	adds	r3, #32
 800787c:	4618      	mov	r0, r3
 800787e:	f7fd fffb 	bl	8005878 <ld_dword>
 8007882:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	333c      	adds	r3, #60	; 0x3c
 8007888:	330e      	adds	r3, #14
 800788a:	4618      	mov	r0, r3
 800788c:	f7fd ffdc 	bl	8005848 <ld_word>
 8007890:	4603      	mov	r3, r0
 8007892:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <find_volume+0x2f6>
 800789a:	230d      	movs	r3, #13
 800789c:	e102      	b.n	8007aa4 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800789e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80078a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a2:	4413      	add	r3, r2
 80078a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a6:	8911      	ldrh	r1, [r2, #8]
 80078a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078aa:	8992      	ldrh	r2, [r2, #12]
 80078ac:	0952      	lsrs	r2, r2, #5
 80078ae:	b292      	uxth	r2, r2
 80078b0:	fbb1 f2f2 	udiv	r2, r1, r2
 80078b4:	b292      	uxth	r2, r2
 80078b6:	4413      	add	r3, r2
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80078ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	429a      	cmp	r2, r3
 80078c0:	d201      	bcs.n	80078c6 <find_volume+0x31e>
 80078c2:	230d      	movs	r3, #13
 80078c4:	e0ee      	b.n	8007aa4 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80078c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ce:	8952      	ldrh	r2, [r2, #10]
 80078d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <find_volume+0x338>
 80078dc:	230d      	movs	r3, #13
 80078de:	e0e1      	b.n	8007aa4 <find_volume+0x4fc>
		fmt = FS_FAT32;
 80078e0:	2303      	movs	r3, #3
 80078e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d802      	bhi.n	80078f6 <find_volume+0x34e>
 80078f0:	2302      	movs	r3, #2
 80078f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d802      	bhi.n	8007906 <find_volume+0x35e>
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	1c9a      	adds	r2, r3, #2
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007918:	441a      	add	r2, r3
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800791e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	441a      	add	r2, r3
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8007928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800792c:	2b03      	cmp	r3, #3
 800792e:	d11e      	bne.n	800796e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	333c      	adds	r3, #60	; 0x3c
 8007934:	332a      	adds	r3, #42	; 0x2a
 8007936:	4618      	mov	r0, r3
 8007938:	f7fd ff86 	bl	8005848 <ld_word>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <find_volume+0x39e>
 8007942:	230d      	movs	r3, #13
 8007944:	e0ae      	b.n	8007aa4 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	891b      	ldrh	r3, [r3, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <find_volume+0x3aa>
 800794e:	230d      	movs	r3, #13
 8007950:	e0a8      	b.n	8007aa4 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	333c      	adds	r3, #60	; 0x3c
 8007956:	332c      	adds	r3, #44	; 0x2c
 8007958:	4618      	mov	r0, r3
 800795a:	f7fd ff8d 	bl	8005878 <ld_dword>
 800795e:	4602      	mov	r2, r0
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	647b      	str	r3, [r7, #68]	; 0x44
 800796c:	e01f      	b.n	80079ae <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	891b      	ldrh	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <find_volume+0x3d2>
 8007976:	230d      	movs	r3, #13
 8007978:	e094      	b.n	8007aa4 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007980:	441a      	add	r2, r3
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007986:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800798a:	2b02      	cmp	r3, #2
 800798c:	d103      	bne.n	8007996 <find_volume+0x3ee>
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	e00a      	b.n	80079ac <find_volume+0x404>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	4613      	mov	r3, r2
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	4413      	add	r3, r2
 80079a0:	085a      	lsrs	r2, r3, #1
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80079ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	899b      	ldrh	r3, [r3, #12]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ba:	440b      	add	r3, r1
 80079bc:	3b01      	subs	r3, #1
 80079be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079c0:	8989      	ldrh	r1, [r1, #12]
 80079c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d201      	bcs.n	80079ce <find_volume+0x426>
 80079ca:	230d      	movs	r3, #13
 80079cc:	e06a      	b.n	8007aa4 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	f04f 32ff 	mov.w	r2, #4294967295
 80079d4:	61da      	str	r2, [r3, #28]
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	2280      	movs	r2, #128	; 0x80
 80079e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80079e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d149      	bne.n	8007a80 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	333c      	adds	r3, #60	; 0x3c
 80079f0:	3330      	adds	r3, #48	; 0x30
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd ff28 	bl	8005848 <ld_word>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d140      	bne.n	8007a80 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80079fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a00:	3301      	adds	r3, #1
 8007a02:	4619      	mov	r1, r3
 8007a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a06:	f7fe fa01 	bl	8005e0c <move_window>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d137      	bne.n	8007a80 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	2200      	movs	r2, #0
 8007a14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	333c      	adds	r3, #60	; 0x3c
 8007a1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fd ff12 	bl	8005848 <ld_word>
 8007a24:	4603      	mov	r3, r0
 8007a26:	461a      	mov	r2, r3
 8007a28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d127      	bne.n	8007a80 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	333c      	adds	r3, #60	; 0x3c
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fd ff1f 	bl	8005878 <ld_dword>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <find_volume+0x504>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d11e      	bne.n	8007a80 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	333c      	adds	r3, #60	; 0x3c
 8007a46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd ff14 	bl	8005878 <ld_dword>
 8007a50:	4603      	mov	r3, r0
 8007a52:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <find_volume+0x508>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d113      	bne.n	8007a80 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	333c      	adds	r3, #60	; 0x3c
 8007a5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fd ff09 	bl	8005878 <ld_dword>
 8007a66:	4602      	mov	r2, r0
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	333c      	adds	r3, #60	; 0x3c
 8007a70:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd feff 	bl	8005878 <ld_dword>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007a86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <find_volume+0x50c>)
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <find_volume+0x50c>)
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <find_volume+0x50c>)
 8007a96:	881a      	ldrh	r2, [r3, #0]
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a9e:	f7fe f94d 	bl	8005d3c <clear_lock>
#endif
	return FR_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3758      	adds	r7, #88	; 0x58
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	41615252 	.word	0x41615252
 8007ab0:	61417272 	.word	0x61417272
 8007ab4:	2000236c 	.word	0x2000236c

08007ab8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007ac2:	2309      	movs	r3, #9
 8007ac4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02e      	beq.n	8007b2a <validate+0x72>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d02a      	beq.n	8007b2a <validate+0x72>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d025      	beq.n	8007b2a <validate+0x72>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	889a      	ldrh	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d11e      	bne.n	8007b2a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fd ffa9 	bl	8005a48 <lock_fs>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d014      	beq.n	8007b26 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fd fe02 	bl	800570c <disk_status>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <validate+0x60>
				res = FR_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
 8007b16:	e008      	b.n	8007b2a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fd ffa8 	bl	8005a74 <unlock_fs>
 8007b24:	e001      	b.n	8007b2a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007b26:	230f      	movs	r3, #15
 8007b28:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <validate+0x7e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	e000      	b.n	8007b38 <validate+0x80>
 8007b36:	2300      	movs	r3, #0
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	6013      	str	r3, [r2, #0]
	return res;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007b5a:	f107 0310 	add.w	r3, r7, #16
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff fc88 	bl	8007474 <get_ldnumber>
 8007b64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	da01      	bge.n	8007b70 <f_mount+0x28>
 8007b6c:	230b      	movs	r3, #11
 8007b6e:	e048      	b.n	8007c02 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007b70:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <f_mount+0xc4>)
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00f      	beq.n	8007ba0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007b80:	69b8      	ldr	r0, [r7, #24]
 8007b82:	f7fe f8db 	bl	8005d3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fdab 	bl	80086e6 <ff_del_syncobj>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <f_mount+0x52>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e033      	b.n	8007c02 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00f      	beq.n	8007bc6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3314      	adds	r3, #20
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f000 fd7a 	bl	80086b0 <ff_cre_syncobj>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <f_mount+0x7e>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e01d      	b.n	8007c02 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	4910      	ldr	r1, [pc, #64]	; (8007c0c <f_mount+0xc4>)
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <f_mount+0x94>
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d001      	beq.n	8007be0 <f_mount+0x98>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e010      	b.n	8007c02 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007be0:	f107 010c 	add.w	r1, r7, #12
 8007be4:	f107 0308 	add.w	r3, r7, #8
 8007be8:	2200      	movs	r2, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff fcdc 	bl	80075a8 <find_volume>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	7dfa      	ldrb	r2, [r7, #23]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fd ff3a 	bl	8005a74 <unlock_fs>
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20002368 	.word	0x20002368

08007c10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b09a      	sub	sp, #104	; 0x68
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <f_open+0x18>
 8007c24:	2309      	movs	r3, #9
 8007c26:	e1d7      	b.n	8007fd8 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007c30:	79fa      	ldrb	r2, [r7, #7]
 8007c32:	f107 0110 	add.w	r1, r7, #16
 8007c36:	f107 0308 	add.w	r3, r7, #8
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fcb4 	bl	80075a8 <find_volume>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007c46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 81b4 	bne.w	8007fb8 <f_open+0x3a8>
		dj.obj.fs = fs;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8007c54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c58:	f000 fd71 	bl	800873e <ff_memalloc>
 8007c5c:	65b8      	str	r0, [r7, #88]	; 0x58
 8007c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d106      	bne.n	8007c72 <f_open+0x62>
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2111      	movs	r1, #17
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fd ff03 	bl	8005a74 <unlock_fs>
 8007c6e:	2311      	movs	r3, #17
 8007c70:	e1b2      	b.n	8007fd8 <f_open+0x3c8>
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c76:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	f107 0314 	add.w	r3, r7, #20
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff fb81 	bl	8007388 <follow_path>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007c8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11a      	bne.n	8007cca <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007c94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	da03      	bge.n	8007ca6 <f_open+0x96>
				res = FR_INVALID_NAME;
 8007c9e:	2306      	movs	r3, #6
 8007ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ca4:	e011      	b.n	8007cca <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f107 0314 	add.w	r3, r7, #20
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fd fef4 	bl	8005aac <chk_lock>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	f003 031c 	and.w	r3, r3, #28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d07f      	beq.n	8007dd4 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 8007cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d017      	beq.n	8007d0c <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d10e      	bne.n	8007d02 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ce4:	f7fd ff3e 	bl	8005b64 <enq_lock>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d006      	beq.n	8007cfc <f_open+0xec>
 8007cee:	f107 0314 	add.w	r3, r7, #20
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff f898 	bl	8006e28 <dir_register>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	e000      	b.n	8007cfe <f_open+0xee>
 8007cfc:	2312      	movs	r3, #18
 8007cfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	f043 0308 	orr.w	r3, r3, #8
 8007d08:	71fb      	strb	r3, [r7, #7]
 8007d0a:	e010      	b.n	8007d2e <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d0c:	7ebb      	ldrb	r3, [r7, #26]
 8007d0e:	f003 0311 	and.w	r3, r3, #17
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <f_open+0x10e>
					res = FR_DENIED;
 8007d16:	2307      	movs	r3, #7
 8007d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d1c:	e007      	b.n	8007d2e <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <f_open+0x11e>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d168      	bne.n	8007e08 <f_open+0x1f8>
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d063      	beq.n	8007e08 <f_open+0x1f8>
				dw = GET_FATTIME();
 8007d40:	f7fd fac6 	bl	80052d0 <get_fattime>
 8007d44:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d48:	330e      	adds	r3, #14
 8007d4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd fdd1 	bl	80058f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	3316      	adds	r3, #22
 8007d56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fd fdcb 	bl	80058f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	330b      	adds	r3, #11
 8007d62:	2220      	movs	r2, #32
 8007d64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fdd3 	bl	8006918 <ld_clust>
 8007d72:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fdeb 	bl	8006956 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	331c      	adds	r3, #28
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd fdb4 	bl	80058f4 <st_dword>
					fs->wflag = 1;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d037      	beq.n	8007e08 <f_open+0x1f8>
						dw = fs->winsect;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8007d9e:	f107 0314 	add.w	r3, r7, #20
 8007da2:	2200      	movs	r2, #0
 8007da4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fadb 	bl	8006362 <remove_chain>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d126      	bne.n	8007e08 <f_open+0x1f8>
							res = move_window(fs, dw);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe f824 	bl	8005e0c <move_window>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	619a      	str	r2, [r3, #24]
 8007dd2:	e019      	b.n	8007e08 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007dd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d115      	bne.n	8007e08 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007ddc:	7ebb      	ldrb	r3, [r7, #26]
 8007dde:	f003 0310 	and.w	r3, r3, #16
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <f_open+0x1de>
					res = FR_NO_FILE;
 8007de6:	2304      	movs	r3, #4
 8007de8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007dec:	e00c      	b.n	8007e08 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <f_open+0x1f8>
 8007df8:	7ebb      	ldrb	r3, [r7, #26]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <f_open+0x1f8>
						res = FR_DENIED;
 8007e02:	2307      	movs	r3, #7
 8007e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d128      	bne.n	8007e62 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <f_open+0x212>
				mode |= FA_MODIFIED;
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2301      	movne	r3, #1
 8007e3c:	2300      	moveq	r3, #0
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	f107 0314 	add.w	r3, r7, #20
 8007e46:	4611      	mov	r1, r2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fd fead 	bl	8005ba8 <inc_lock>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <f_open+0x252>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f040 80a3 	bne.w	8007fb2 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fd50 	bl	8006918 <ld_clust>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	331c      	adds	r3, #28
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fd fcf8 	bl	8005878 <ld_dword>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	88da      	ldrh	r2, [r3, #6]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	79fa      	ldrb	r2, [r7, #7]
 8007ea6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3330      	adds	r3, #48	; 0x30
 8007ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fd fd62 	bl	800598e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d06e      	beq.n	8007fb2 <f_open+0x3a2>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d06a      	beq.n	8007fb2 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	895b      	ldrh	r3, [r3, #10]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	899b      	ldrh	r3, [r3, #12]
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f00:	e016      	b.n	8007f30 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe f83d 	bl	8005f86 <get_fat>
 8007f0c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d802      	bhi.n	8007f1a <f_open+0x30a>
 8007f14:	2302      	movs	r3, #2
 8007f16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f20:	d102      	bne.n	8007f28 <f_open+0x318>
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <f_open+0x330>
 8007f38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d8e0      	bhi.n	8007f02 <f_open+0x2f2>
				}
				fp->clust = clst;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d131      	bne.n	8007fb2 <f_open+0x3a2>
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	899b      	ldrh	r3, [r3, #12]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f5a:	fb01 f202 	mul.w	r2, r1, r2
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d026      	beq.n	8007fb2 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fd ffed 	bl	8005f48 <clust2sect>
 8007f6e:	64b8      	str	r0, [r7, #72]	; 0x48
 8007f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <f_open+0x36e>
						res = FR_INT_ERR;
 8007f76:	2302      	movs	r3, #2
 8007f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f7c:	e019      	b.n	8007fb2 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	899b      	ldrh	r3, [r3, #12]
 8007f82:	461a      	mov	r2, r3
 8007f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f86:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8c:	441a      	add	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	7858      	ldrb	r0, [r3, #1]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1a      	ldr	r2, [r3, #32]
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f7fd fbf3 	bl	800578c <disk_read>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <f_open+0x3a2>
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8007fb2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007fb4:	f000 fbcf 	bl	8008756 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <f_open+0x3b6>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fd fd50 	bl	8005a74 <unlock_fs>
 8007fd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3768      	adds	r7, #104	; 0x68
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08e      	sub	sp, #56	; 0x38
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f107 0214 	add.w	r2, r7, #20
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fd59 	bl	8007ab8 <validate>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800800c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008010:	2b00      	cmp	r3, #0
 8008012:	d107      	bne.n	8008024 <f_read+0x44>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	7d5b      	ldrb	r3, [r3, #21]
 8008018:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800801c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <f_read+0x58>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7fd fd21 	bl	8005a74 <unlock_fs>
 8008032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008036:	e15d      	b.n	80082f4 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	7d1b      	ldrb	r3, [r3, #20]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d106      	bne.n	8008052 <f_read+0x72>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2107      	movs	r1, #7
 8008048:	4618      	mov	r0, r3
 800804a:	f7fd fd13 	bl	8005a74 <unlock_fs>
 800804e:	2307      	movs	r3, #7
 8008050:	e150      	b.n	80082f4 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	429a      	cmp	r2, r3
 8008064:	f240 813c 	bls.w	80082e0 <f_read+0x300>
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800806c:	e138      	b.n	80082e0 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	8992      	ldrh	r2, [r2, #12]
 8008076:	fbb3 f1f2 	udiv	r1, r3, r2
 800807a:	fb01 f202 	mul.w	r2, r1, r2
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 80f3 	bne.w	800826c <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	8992      	ldrh	r2, [r2, #12]
 800808e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	8952      	ldrh	r2, [r2, #10]
 8008096:	3a01      	subs	r2, #1
 8008098:	4013      	ands	r3, r2
 800809a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d139      	bne.n	8008116 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	633b      	str	r3, [r7, #48]	; 0x30
 80080b0:	e013      	b.n	80080da <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	4619      	mov	r1, r3
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7fe fa4b 	bl	800655c <clmt_clust>
 80080c6:	6338      	str	r0, [r7, #48]	; 0x30
 80080c8:	e007      	b.n	80080da <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fd ff57 	bl	8005f86 <get_fat>
 80080d8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d809      	bhi.n	80080f4 <f_read+0x114>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2202      	movs	r2, #2
 80080e4:	755a      	strb	r2, [r3, #21]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2102      	movs	r1, #2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fd fcc2 	bl	8005a74 <unlock_fs>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e0ff      	b.n	80082f4 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fa:	d109      	bne.n	8008110 <f_read+0x130>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2201      	movs	r2, #1
 8008100:	755a      	strb	r2, [r3, #21]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2101      	movs	r1, #1
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd fcb4 	bl	8005a74 <unlock_fs>
 800810c:	2301      	movs	r3, #1
 800810e:	e0f1      	b.n	80082f4 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008114:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f7fd ff12 	bl	8005f48 <clust2sect>
 8008124:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d109      	bne.n	8008140 <f_read+0x160>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2202      	movs	r2, #2
 8008130:	755a      	strb	r2, [r3, #21]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2102      	movs	r1, #2
 8008136:	4618      	mov	r0, r3
 8008138:	f7fd fc9c 	bl	8005a74 <unlock_fs>
 800813c:	2302      	movs	r3, #2
 800813e:	e0d9      	b.n	80082f4 <f_read+0x314>
			sect += csect;
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	899b      	ldrh	r3, [r3, #12]
 800814c:	461a      	mov	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	fbb3 f3f2 	udiv	r3, r3, r2
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	2b00      	cmp	r3, #0
 800815a:	d046      	beq.n	80081ea <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	4413      	add	r3, r2
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	8952      	ldrh	r2, [r2, #10]
 8008166:	4293      	cmp	r3, r2
 8008168:	d905      	bls.n	8008176 <f_read+0x196>
					cc = fs->csize - csect;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	895b      	ldrh	r3, [r3, #10]
 800816e:	461a      	mov	r2, r3
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	7858      	ldrb	r0, [r3, #1]
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008180:	f7fd fb04 	bl	800578c <disk_read>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <f_read+0x1be>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	755a      	strb	r2, [r3, #21]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2101      	movs	r1, #1
 8008194:	4618      	mov	r0, r3
 8008196:	f7fd fc6d 	bl	8005a74 <unlock_fs>
 800819a:	2301      	movs	r3, #1
 800819c:	e0aa      	b.n	80082f4 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	7d1b      	ldrb	r3, [r3, #20]
 80081a2:	b25b      	sxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	da18      	bge.n	80081da <f_read+0x1fa>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1a      	ldr	r2, [r3, #32]
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d911      	bls.n	80081da <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6a1a      	ldr	r2, [r3, #32]
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	8992      	ldrh	r2, [r2, #12]
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c8:	18d0      	adds	r0, r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	899b      	ldrh	r3, [r3, #12]
 80081d4:	461a      	mov	r2, r3
 80081d6:	f7fd fbb9 	bl	800594c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	899b      	ldrh	r3, [r3, #12]
 80081de:	461a      	mov	r2, r3
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80081e8:	e066      	b.n	80082b8 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d038      	beq.n	8008266 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	7d1b      	ldrb	r3, [r3, #20]
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da1d      	bge.n	800823a <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	7858      	ldrb	r0, [r3, #1]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a1a      	ldr	r2, [r3, #32]
 800820c:	2301      	movs	r3, #1
 800820e:	f7fd fadd 	bl	80057cc <disk_write>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <f_read+0x24c>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	755a      	strb	r2, [r3, #21]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2101      	movs	r1, #1
 8008222:	4618      	mov	r0, r3
 8008224:	f7fd fc26 	bl	8005a74 <unlock_fs>
 8008228:	2301      	movs	r3, #1
 800822a:	e063      	b.n	80082f4 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	7d1b      	ldrb	r3, [r3, #20]
 8008230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008234:	b2da      	uxtb	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	7858      	ldrb	r0, [r3, #1]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008244:	2301      	movs	r3, #1
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	f7fd faa0 	bl	800578c <disk_read>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <f_read+0x286>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	755a      	strb	r2, [r3, #21]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2101      	movs	r1, #1
 800825c:	4618      	mov	r0, r3
 800825e:	f7fd fc09 	bl	8005a74 <unlock_fs>
 8008262:	2301      	movs	r3, #1
 8008264:	e046      	b.n	80082f4 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	899b      	ldrh	r3, [r3, #12]
 8008270:	4618      	mov	r0, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	8992      	ldrh	r2, [r2, #12]
 800827a:	fbb3 f1f2 	udiv	r1, r3, r2
 800827e:	fb01 f202 	mul.w	r2, r1, r2
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	1ac3      	subs	r3, r0, r3
 8008286:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d901      	bls.n	8008294 <f_read+0x2b4>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	8992      	ldrh	r2, [r2, #12]
 80082a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80082a6:	fb00 f202 	mul.w	r2, r0, r2
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	440b      	add	r3, r1
 80082ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082b0:	4619      	mov	r1, r3
 80082b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082b4:	f7fd fb4a 	bl	800594c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80082b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	4413      	add	r3, r2
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	699a      	ldr	r2, [r3, #24]
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	441a      	add	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	619a      	str	r2, [r3, #24]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	441a      	add	r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f47f aec3 	bne.w	800806e <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2100      	movs	r1, #0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fd fbc1 	bl	8005a74 <unlock_fs>
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3738      	adds	r7, #56	; 0x38
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f107 0208 	add.w	r2, r7, #8
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fbd3 	bl	8007ab8 <validate>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d16d      	bne.n	80083f8 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7d1b      	ldrb	r3, [r3, #20]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d067      	beq.n	80083f8 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	7d1b      	ldrb	r3, [r3, #20]
 800832c:	b25b      	sxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	da1a      	bge.n	8008368 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	7858      	ldrb	r0, [r3, #1]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1a      	ldr	r2, [r3, #32]
 8008340:	2301      	movs	r3, #1
 8008342:	f7fd fa43 	bl	80057cc <disk_write>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d006      	beq.n	800835a <f_sync+0x5e>
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f7fd fb8f 	bl	8005a74 <unlock_fs>
 8008356:	2301      	movs	r3, #1
 8008358:	e055      	b.n	8008406 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7d1b      	ldrb	r3, [r3, #20]
 800835e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008362:	b2da      	uxtb	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008368:	f7fc ffb2 	bl	80052d0 <get_fattime>
 800836c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f7fd fd48 	bl	8005e0c <move_window>
 800837c:	4603      	mov	r3, r0
 800837e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d138      	bne.n	80083f8 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	330b      	adds	r3, #11
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	330b      	adds	r3, #11
 8008396:	f042 0220 	orr.w	r2, r2, #32
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	461a      	mov	r2, r3
 80083a8:	68f9      	ldr	r1, [r7, #12]
 80083aa:	f7fe fad4 	bl	8006956 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f103 021c 	add.w	r2, r3, #28
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	4619      	mov	r1, r3
 80083ba:	4610      	mov	r0, r2
 80083bc:	f7fd fa9a 	bl	80058f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3316      	adds	r3, #22
 80083c4:	6939      	ldr	r1, [r7, #16]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fd fa94 	bl	80058f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3312      	adds	r3, #18
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fd fa73 	bl	80058be <st_word>
					fs->wflag = 1;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2201      	movs	r2, #1
 80083dc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fd fd41 	bl	8005e68 <sync_fs>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	7d1b      	ldrb	r3, [r3, #20]
 80083ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	7dfa      	ldrb	r2, [r7, #23]
 80083fc:	4611      	mov	r1, r2
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fd fb38 	bl	8005a74 <unlock_fs>
 8008404:	7dfb      	ldrb	r3, [r7, #23]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff ff70 	bl	80082fc <f_sync>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d11d      	bne.n	8008462 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f107 0208 	add.w	r2, r7, #8
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff fb42 	bl	8007ab8 <validate>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d111      	bne.n	8008462 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	4618      	mov	r0, r3
 8008444:	f7fd fc3e 	bl	8005cc4 <dec_lock>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d102      	bne.n	8008458 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f7fd fb09 	bl	8005a74 <unlock_fs>
#endif
		}
	}
	return res;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008482:	4b1f      	ldr	r3, [pc, #124]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 8008484:	7a5b      	ldrb	r3, [r3, #9]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d131      	bne.n	80084f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800848c:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 800848e:	7a5b      	ldrb	r3, [r3, #9]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 8008496:	2100      	movs	r1, #0
 8008498:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800849a:	4b19      	ldr	r3, [pc, #100]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 800849c:	7a5b      	ldrb	r3, [r3, #9]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	4a17      	ldr	r2, [pc, #92]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 80084ac:	7a5b      	ldrb	r3, [r3, #9]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	461a      	mov	r2, r3
 80084b2:	4b13      	ldr	r3, [pc, #76]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 80084b4:	4413      	add	r3, r2
 80084b6:	79fa      	ldrb	r2, [r7, #7]
 80084b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084ba:	4b11      	ldr	r3, [pc, #68]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 80084bc:	7a5b      	ldrb	r3, [r3, #9]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	b2d1      	uxtb	r1, r2
 80084c4:	4a0e      	ldr	r2, [pc, #56]	; (8008500 <FATFS_LinkDriverEx+0x94>)
 80084c6:	7251      	strb	r1, [r2, #9]
 80084c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084ca:	7dbb      	ldrb	r3, [r7, #22]
 80084cc:	3330      	adds	r3, #48	; 0x30
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	3301      	adds	r3, #1
 80084d8:	223a      	movs	r2, #58	; 0x3a
 80084da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	3302      	adds	r3, #2
 80084e0:	222f      	movs	r2, #47	; 0x2f
 80084e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3303      	adds	r3, #3
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	20002390 	.word	0x20002390

08008504 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800850e:	2200      	movs	r2, #0
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff ffaa 	bl	800846c <FATFS_LinkDriverEx>
 8008518:	4603      	mov	r3, r0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	2b7f      	cmp	r3, #127	; 0x7f
 8008534:	d802      	bhi.n	800853c <ff_convert+0x18>
		c = chr;
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	81fb      	strh	r3, [r7, #14]
 800853a:	e025      	b.n	8008588 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008542:	88fb      	ldrh	r3, [r7, #6]
 8008544:	2bff      	cmp	r3, #255	; 0xff
 8008546:	d805      	bhi.n	8008554 <ff_convert+0x30>
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	3b80      	subs	r3, #128	; 0x80
 800854c:	4a12      	ldr	r2, [pc, #72]	; (8008598 <ff_convert+0x74>)
 800854e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008552:	e000      	b.n	8008556 <ff_convert+0x32>
 8008554:	2300      	movs	r3, #0
 8008556:	81fb      	strh	r3, [r7, #14]
 8008558:	e016      	b.n	8008588 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800855a:	2300      	movs	r3, #0
 800855c:	81fb      	strh	r3, [r7, #14]
 800855e:	e009      	b.n	8008574 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008560:	89fb      	ldrh	r3, [r7, #14]
 8008562:	4a0d      	ldr	r2, [pc, #52]	; (8008598 <ff_convert+0x74>)
 8008564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008568:	88fa      	ldrh	r2, [r7, #6]
 800856a:	429a      	cmp	r2, r3
 800856c:	d006      	beq.n	800857c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800856e:	89fb      	ldrh	r3, [r7, #14]
 8008570:	3301      	adds	r3, #1
 8008572:	81fb      	strh	r3, [r7, #14]
 8008574:	89fb      	ldrh	r3, [r7, #14]
 8008576:	2b7f      	cmp	r3, #127	; 0x7f
 8008578:	d9f2      	bls.n	8008560 <ff_convert+0x3c>
 800857a:	e000      	b.n	800857e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800857c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800857e:	89fb      	ldrh	r3, [r7, #14]
 8008580:	3380      	adds	r3, #128	; 0x80
 8008582:	b29b      	uxth	r3, r3
 8008584:	b2db      	uxtb	r3, r3
 8008586:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008588:	89fb      	ldrh	r3, [r7, #14]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	0800d5b0 	.word	0x0800d5b0

0800859c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80085a6:	88fb      	ldrh	r3, [r7, #6]
 80085a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ac:	d201      	bcs.n	80085b2 <ff_wtoupper+0x16>
 80085ae:	4b3e      	ldr	r3, [pc, #248]	; (80086a8 <ff_wtoupper+0x10c>)
 80085b0:	e000      	b.n	80085b4 <ff_wtoupper+0x18>
 80085b2:	4b3e      	ldr	r3, [pc, #248]	; (80086ac <ff_wtoupper+0x110>)
 80085b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	1c9a      	adds	r2, r3, #2
 80085ba:	617a      	str	r2, [r7, #20]
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80085c0:	8a7b      	ldrh	r3, [r7, #18]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d068      	beq.n	8008698 <ff_wtoupper+0xfc>
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	8a7b      	ldrh	r3, [r7, #18]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d364      	bcc.n	8008698 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	1c9a      	adds	r2, r3, #2
 80085d2:	617a      	str	r2, [r7, #20]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	823b      	strh	r3, [r7, #16]
 80085d8:	8a3b      	ldrh	r3, [r7, #16]
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	81fb      	strh	r3, [r7, #14]
 80085de:	8a3b      	ldrh	r3, [r7, #16]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80085e4:	88fa      	ldrh	r2, [r7, #6]
 80085e6:	8a79      	ldrh	r1, [r7, #18]
 80085e8:	8a3b      	ldrh	r3, [r7, #16]
 80085ea:	440b      	add	r3, r1
 80085ec:	429a      	cmp	r2, r3
 80085ee:	da49      	bge.n	8008684 <ff_wtoupper+0xe8>
			switch (cmd) {
 80085f0:	89fb      	ldrh	r3, [r7, #14]
 80085f2:	2b08      	cmp	r3, #8
 80085f4:	d84f      	bhi.n	8008696 <ff_wtoupper+0xfa>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <ff_wtoupper+0x60>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008621 	.word	0x08008621
 8008600:	08008633 	.word	0x08008633
 8008604:	08008649 	.word	0x08008649
 8008608:	08008651 	.word	0x08008651
 800860c:	08008659 	.word	0x08008659
 8008610:	08008661 	.word	0x08008661
 8008614:	08008669 	.word	0x08008669
 8008618:	08008671 	.word	0x08008671
 800861c:	08008679 	.word	0x08008679
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	8a7b      	ldrh	r3, [r7, #18]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	4413      	add	r3, r2
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	80fb      	strh	r3, [r7, #6]
 8008630:	e027      	b.n	8008682 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	8a7b      	ldrh	r3, [r7, #18]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	b29b      	uxth	r3, r3
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	b29b      	uxth	r3, r3
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	80fb      	strh	r3, [r7, #6]
 8008646:	e01c      	b.n	8008682 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	3b10      	subs	r3, #16
 800864c:	80fb      	strh	r3, [r7, #6]
 800864e:	e018      	b.n	8008682 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	3b20      	subs	r3, #32
 8008654:	80fb      	strh	r3, [r7, #6]
 8008656:	e014      	b.n	8008682 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008658:	88fb      	ldrh	r3, [r7, #6]
 800865a:	3b30      	subs	r3, #48	; 0x30
 800865c:	80fb      	strh	r3, [r7, #6]
 800865e:	e010      	b.n	8008682 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	3b1a      	subs	r3, #26
 8008664:	80fb      	strh	r3, [r7, #6]
 8008666:	e00c      	b.n	8008682 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008668:	88fb      	ldrh	r3, [r7, #6]
 800866a:	3308      	adds	r3, #8
 800866c:	80fb      	strh	r3, [r7, #6]
 800866e:	e008      	b.n	8008682 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	3b50      	subs	r3, #80	; 0x50
 8008674:	80fb      	strh	r3, [r7, #6]
 8008676:	e004      	b.n	8008682 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008678:	88fb      	ldrh	r3, [r7, #6]
 800867a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800867e:	80fb      	strh	r3, [r7, #6]
 8008680:	bf00      	nop
			}
			break;
 8008682:	e008      	b.n	8008696 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d195      	bne.n	80085b6 <ff_wtoupper+0x1a>
 800868a:	8a3b      	ldrh	r3, [r7, #16]
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4413      	add	r3, r2
 8008692:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008694:	e78f      	b.n	80085b6 <ff_wtoupper+0x1a>
			break;
 8008696:	bf00      	nop
	}

	return chr;
 8008698:	88fb      	ldrh	r3, [r7, #6]
}
 800869a:	4618      	mov	r0, r3
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	0800d6b0 	.word	0x0800d6b0
 80086ac:	0800d8a4 	.word	0x0800d8a4

080086b0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80086bc:	2200      	movs	r2, #0
 80086be:	2101      	movs	r1, #1
 80086c0:	2001      	movs	r0, #1
 80086c2:	f000 f9b5 	bl	8008a30 <osSemaphoreNew>
 80086c6:	4602      	mov	r2, r0
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bf14      	ite	ne
 80086d4:	2301      	movne	r3, #1
 80086d6:	2300      	moveq	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	60fb      	str	r3, [r7, #12]

    return ret;
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fabe 	bl	8008c70 <osSemaphoreDelete>
#endif
    return 1;
 80086f4:	2301      	movs	r3, #1
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800870a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa18 	bl	8008b44 <osSemaphoreAcquire>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800871a:	2301      	movs	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800871e:	68fb      	ldr	r3, [r7, #12]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fa59 	bl	8008be8 <osSemaphoreRelease>
#endif
}
 8008736:	bf00      	nop
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f003 fa86 	bl	800bc58 <pvPortMalloc>
 800874c:	4603      	mov	r3, r0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f003 fb46 	bl	800bdf0 <vPortFree>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <__NVIC_SetPriority>:
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877c:	2b00      	cmp	r3, #0
 800877e:	db0a      	blt.n	8008796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	b2da      	uxtb	r2, r3
 8008784:	490c      	ldr	r1, [pc, #48]	; (80087b8 <__NVIC_SetPriority+0x4c>)
 8008786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800878a:	0112      	lsls	r2, r2, #4
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	440b      	add	r3, r1
 8008790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008794:	e00a      	b.n	80087ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	b2da      	uxtb	r2, r3
 800879a:	4908      	ldr	r1, [pc, #32]	; (80087bc <__NVIC_SetPriority+0x50>)
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	3b04      	subs	r3, #4
 80087a4:	0112      	lsls	r2, r2, #4
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	440b      	add	r3, r1
 80087aa:	761a      	strb	r2, [r3, #24]
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	e000e100 	.word	0xe000e100
 80087bc:	e000ed00 	.word	0xe000ed00

080087c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80087c4:	2100      	movs	r1, #0
 80087c6:	f06f 0004 	mvn.w	r0, #4
 80087ca:	f7ff ffcf 	bl	800876c <__NVIC_SetPriority>
#endif
}
 80087ce:	bf00      	nop
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087da:	f3ef 8305 	mrs	r3, IPSR
 80087de:	603b      	str	r3, [r7, #0]
  return(result);
 80087e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087e6:	f06f 0305 	mvn.w	r3, #5
 80087ea:	607b      	str	r3, [r7, #4]
 80087ec:	e00c      	b.n	8008808 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087ee:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <osKernelInitialize+0x44>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d105      	bne.n	8008802 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80087f6:	4b08      	ldr	r3, [pc, #32]	; (8008818 <osKernelInitialize+0x44>)
 80087f8:	2201      	movs	r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	e002      	b.n	8008808 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008808:	687b      	ldr	r3, [r7, #4]
}
 800880a:	4618      	mov	r0, r3
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	2000239c 	.word	0x2000239c

0800881c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8008822:	f002 faa1 	bl	800ad68 <xTaskGetSchedulerState>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d004      	beq.n	8008836 <osKernelGetState+0x1a>
 800882c:	2b02      	cmp	r3, #2
 800882e:	d105      	bne.n	800883c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8008830:	2302      	movs	r3, #2
 8008832:	607b      	str	r3, [r7, #4]
      break;
 8008834:	e00c      	b.n	8008850 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8008836:	2303      	movs	r3, #3
 8008838:	607b      	str	r3, [r7, #4]
      break;
 800883a:	e009      	b.n	8008850 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <osKernelGetState+0x40>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <osKernelGetState+0x2e>
        state = osKernelReady;
 8008844:	2301      	movs	r3, #1
 8008846:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8008848:	e001      	b.n	800884e <osKernelGetState+0x32>
        state = osKernelInactive;
 800884a:	2300      	movs	r3, #0
 800884c:	607b      	str	r3, [r7, #4]
      break;
 800884e:	bf00      	nop
  }

  return (state);
 8008850:	687b      	ldr	r3, [r7, #4]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	2000239c 	.word	0x2000239c

08008860 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008866:	f3ef 8305 	mrs	r3, IPSR
 800886a:	603b      	str	r3, [r7, #0]
  return(result);
 800886c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008872:	f06f 0305 	mvn.w	r3, #5
 8008876:	607b      	str	r3, [r7, #4]
 8008878:	e010      	b.n	800889c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <osKernelStart+0x48>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d109      	bne.n	8008896 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008882:	f7ff ff9d 	bl	80087c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <osKernelStart+0x48>)
 8008888:	2202      	movs	r2, #2
 800888a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800888c:	f001 fe12 	bl	800a4b4 <vTaskStartScheduler>
      stat = osOK;
 8008890:	2300      	movs	r3, #0
 8008892:	607b      	str	r3, [r7, #4]
 8008894:	e002      	b.n	800889c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008896:	f04f 33ff 	mov.w	r3, #4294967295
 800889a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800889c:	687b      	ldr	r3, [r7, #4]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	2000239c 	.word	0x2000239c

080088ac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b2:	f3ef 8305 	mrs	r3, IPSR
 80088b6:	603b      	str	r3, [r7, #0]
  return(result);
 80088b8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80088be:	f001 ff1b 	bl	800a6f8 <xTaskGetTickCountFromISR>
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	e002      	b.n	80088cc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80088c6:	f001 ff07 	bl	800a6d8 <xTaskGetTickCount>
 80088ca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80088cc:	687b      	ldr	r3, [r7, #4]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b08e      	sub	sp, #56	; 0x38
 80088da:	af04      	add	r7, sp, #16
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e6:	f3ef 8305 	mrs	r3, IPSR
 80088ea:	617b      	str	r3, [r7, #20]
  return(result);
 80088ec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d17e      	bne.n	80089f0 <osThreadNew+0x11a>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d07b      	beq.n	80089f0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80088f8:	2380      	movs	r3, #128	; 0x80
 80088fa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80088fc:	2318      	movs	r3, #24
 80088fe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
 8008908:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d045      	beq.n	800899c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <osThreadNew+0x48>
        name = attr->name;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d008      	beq.n	8008944 <osThreadNew+0x6e>
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	2b38      	cmp	r3, #56	; 0x38
 8008936:	d805      	bhi.n	8008944 <osThreadNew+0x6e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <osThreadNew+0x72>
        return (NULL);
 8008944:	2300      	movs	r3, #0
 8008946:	e054      	b.n	80089f2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	089b      	lsrs	r3, r3, #2
 8008956:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00e      	beq.n	800897e <osThreadNew+0xa8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	2b5b      	cmp	r3, #91	; 0x5b
 8008966:	d90a      	bls.n	800897e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800896c:	2b00      	cmp	r3, #0
 800896e:	d006      	beq.n	800897e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <osThreadNew+0xa8>
        mem = 1;
 8008978:	2301      	movs	r3, #1
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	e010      	b.n	80089a0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10c      	bne.n	80089a0 <osThreadNew+0xca>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d108      	bne.n	80089a0 <osThreadNew+0xca>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d104      	bne.n	80089a0 <osThreadNew+0xca>
          mem = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	e001      	b.n	80089a0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d110      	bne.n	80089c8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089ae:	9202      	str	r2, [sp, #8]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6a3a      	ldr	r2, [r7, #32]
 80089ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f001 fba3 	bl	800a108 <xTaskCreateStatic>
 80089c2:	4603      	mov	r3, r0
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	e013      	b.n	80089f0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d110      	bne.n	80089f0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	f107 0310 	add.w	r3, r7, #16
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f001 fbee 	bl	800a1c2 <xTaskCreate>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d001      	beq.n	80089f0 <osThreadNew+0x11a>
            hTask = NULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80089f0:	693b      	ldr	r3, [r7, #16]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3728      	adds	r7, #40	; 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a02:	f3ef 8305 	mrs	r3, IPSR
 8008a06:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <osDelay+0x1c>
    stat = osErrorISR;
 8008a0e:	f06f 0305 	mvn.w	r3, #5
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e007      	b.n	8008a26 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fd13 	bl	800a44c <vTaskDelay>
    }
  }

  return (stat);
 8008a26:	68fb      	ldr	r3, [r7, #12]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08a      	sub	sp, #40	; 0x28
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a40:	f3ef 8305 	mrs	r3, IPSR
 8008a44:	613b      	str	r3, [r7, #16]
  return(result);
 8008a46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d175      	bne.n	8008b38 <osSemaphoreNew+0x108>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d072      	beq.n	8008b38 <osSemaphoreNew+0x108>
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d86e      	bhi.n	8008b38 <osSemaphoreNew+0x108>
    mem = -1;
 8008a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d015      	beq.n	8008a92 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d006      	beq.n	8008a7c <osSemaphoreNew+0x4c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b4f      	cmp	r3, #79	; 0x4f
 8008a74:	d902      	bls.n	8008a7c <osSemaphoreNew+0x4c>
        mem = 1;
 8008a76:	2301      	movs	r3, #1
 8008a78:	61bb      	str	r3, [r7, #24]
 8008a7a:	e00c      	b.n	8008a96 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d108      	bne.n	8008a96 <osSemaphoreNew+0x66>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d104      	bne.n	8008a96 <osSemaphoreNew+0x66>
          mem = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61bb      	str	r3, [r7, #24]
 8008a90:	e001      	b.n	8008a96 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d04c      	beq.n	8008b38 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d128      	bne.n	8008af6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10a      	bne.n	8008ac0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	2203      	movs	r2, #3
 8008ab0:	9200      	str	r2, [sp, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	f000 fb80 	bl	80091bc <xQueueGenericCreateStatic>
 8008abc:	61f8      	str	r0, [r7, #28]
 8008abe:	e005      	b.n	8008acc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008ac0:	2203      	movs	r2, #3
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	f000 fbf1 	bl	80092ac <xQueueGenericCreate>
 8008aca:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d022      	beq.n	8008b18 <osSemaphoreNew+0xe8>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01f      	beq.n	8008b18 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2200      	movs	r2, #0
 8008adc:	2100      	movs	r1, #0
 8008ade:	69f8      	ldr	r0, [r7, #28]
 8008ae0:	f000 fcac 	bl	800943c <xQueueGenericSend>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d016      	beq.n	8008b18 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008aea:	69f8      	ldr	r0, [r7, #28]
 8008aec:	f001 f938 	bl	8009d60 <vQueueDelete>
            hSemaphore = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e010      	b.n	8008b18 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d108      	bne.n	8008b0e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	461a      	mov	r2, r3
 8008b02:	68b9      	ldr	r1, [r7, #8]
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fc2e 	bl	8009366 <xQueueCreateCountingSemaphoreStatic>
 8008b0a:	61f8      	str	r0, [r7, #28]
 8008b0c:	e004      	b.n	8008b18 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 fc5f 	bl	80093d4 <xQueueCreateCountingSemaphore>
 8008b16:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00c      	beq.n	8008b38 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <osSemaphoreNew+0xfc>
          name = attr->name;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	e001      	b.n	8008b30 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008b30:	6979      	ldr	r1, [r7, #20]
 8008b32:	69f8      	ldr	r0, [r7, #28]
 8008b34:	f001 fa60 	bl	8009ff8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008b38:	69fb      	ldr	r3, [r7, #28]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d103      	bne.n	8008b64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008b5c:	f06f 0303 	mvn.w	r3, #3
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	e039      	b.n	8008bd8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b64:	f3ef 8305 	mrs	r3, IPSR
 8008b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d022      	beq.n	8008bb6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008b76:	f06f 0303 	mvn.w	r3, #3
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e02c      	b.n	8008bd8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	461a      	mov	r2, r3
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6938      	ldr	r0, [r7, #16]
 8008b8c:	f001 f868 	bl	8009c60 <xQueueReceiveFromISR>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d003      	beq.n	8008b9e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008b96:	f06f 0302 	mvn.w	r3, #2
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e01c      	b.n	8008bd8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d019      	beq.n	8008bd8 <osSemaphoreAcquire+0x94>
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <osSemaphoreAcquire+0xa0>)
 8008ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	e010      	b.n	8008bd8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6938      	ldr	r0, [r7, #16]
 8008bba:	f000 ff45 	bl	8009a48 <xQueueSemaphoreTake>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d009      	beq.n	8008bd8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008bca:	f06f 0301 	mvn.w	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	e002      	b.n	8008bd8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008bd2:	f06f 0302 	mvn.w	r3, #2
 8008bd6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008bd8:	697b      	ldr	r3, [r7, #20]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	e000ed04 	.word	0xe000ed04

08008be8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008bfe:	f06f 0303 	mvn.w	r3, #3
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	e02c      	b.n	8008c60 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c06:	f3ef 8305 	mrs	r3, IPSR
 8008c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01a      	beq.n	8008c48 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008c16:	f107 0308 	add.w	r3, r7, #8
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6938      	ldr	r0, [r7, #16]
 8008c1e:	f000 fda6 	bl	800976e <xQueueGiveFromISR>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d003      	beq.n	8008c30 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008c28:	f06f 0302 	mvn.w	r3, #2
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	e017      	b.n	8008c60 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d014      	beq.n	8008c60 <osSemaphoreRelease+0x78>
 8008c36:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <osSemaphoreRelease+0x84>)
 8008c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	e00b      	b.n	8008c60 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c48:	2300      	movs	r3, #0
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	6938      	ldr	r0, [r7, #16]
 8008c50:	f000 fbf4 	bl	800943c <xQueueGenericSend>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d002      	beq.n	8008c60 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008c5a:	f06f 0302 	mvn.w	r3, #2
 8008c5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008c60:	697b      	ldr	r3, [r7, #20]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	e000ed04 	.word	0xe000ed04

08008c70 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c7c:	f3ef 8305 	mrs	r3, IPSR
 8008c80:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c82:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008c88:	f06f 0305 	mvn.w	r3, #5
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	e00e      	b.n	8008cae <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008c96:	f06f 0303 	mvn.w	r3, #3
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	e007      	b.n	8008cae <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008c9e:	6938      	ldr	r0, [r7, #16]
 8008ca0:	f001 f9d4 	bl	800a04c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008ca8:	6938      	ldr	r0, [r7, #16]
 8008caa:	f001 f859 	bl	8009d60 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008cae:	697b      	ldr	r3, [r7, #20]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc8:	f3ef 8305 	mrs	r3, IPSR
 8008ccc:	613b      	str	r3, [r7, #16]
  return(result);
 8008cce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d15f      	bne.n	8008d94 <osMessageQueueNew+0xdc>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d05c      	beq.n	8008d94 <osMessageQueueNew+0xdc>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d059      	beq.n	8008d94 <osMessageQueueNew+0xdc>
    mem = -1;
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d029      	beq.n	8008d40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d012      	beq.n	8008d1a <osMessageQueueNew+0x62>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	2b4f      	cmp	r3, #79	; 0x4f
 8008cfa:	d90e      	bls.n	8008d1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00a      	beq.n	8008d1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	fb01 f303 	mul.w	r3, r1, r3
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d302      	bcc.n	8008d1a <osMessageQueueNew+0x62>
        mem = 1;
 8008d14:	2301      	movs	r3, #1
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	e014      	b.n	8008d44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d110      	bne.n	8008d44 <osMessageQueueNew+0x8c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10c      	bne.n	8008d44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d108      	bne.n	8008d44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <osMessageQueueNew+0x8c>
          mem = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	61bb      	str	r3, [r7, #24]
 8008d3e:	e001      	b.n	8008d44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d10b      	bne.n	8008d62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2100      	movs	r1, #0
 8008d54:	9100      	str	r1, [sp, #0]
 8008d56:	68b9      	ldr	r1, [r7, #8]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fa2f 	bl	80091bc <xQueueGenericCreateStatic>
 8008d5e:	61f8      	str	r0, [r7, #28]
 8008d60:	e008      	b.n	8008d74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d105      	bne.n	8008d74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008d68:	2200      	movs	r2, #0
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fa9d 	bl	80092ac <xQueueGenericCreate>
 8008d72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	e001      	b.n	8008d8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	69f8      	ldr	r0, [r7, #28]
 8008d90:	f001 f932 	bl	8009ff8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008d94:	69fb      	ldr	r3, [r7, #28]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008db8:	f3ef 8305 	mrs	r3, IPSR
 8008dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8008dbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d028      	beq.n	8008e16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <osMessageQueuePut+0x36>
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <osMessageQueuePut+0x36>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008dd6:	f06f 0303 	mvn.w	r3, #3
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	e038      	b.n	8008e50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008de2:	f107 0210 	add.w	r2, r7, #16
 8008de6:	2300      	movs	r3, #0
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	69b8      	ldr	r0, [r7, #24]
 8008dec:	f000 fc24 	bl	8009638 <xQueueGenericSendFromISR>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d003      	beq.n	8008dfe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008df6:	f06f 0302 	mvn.w	r3, #2
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	e028      	b.n	8008e50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d025      	beq.n	8008e50 <osMessageQueuePut+0xb0>
 8008e04:	4b15      	ldr	r3, [pc, #84]	; (8008e5c <osMessageQueuePut+0xbc>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	e01c      	b.n	8008e50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <osMessageQueuePut+0x82>
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008e22:	f06f 0303 	mvn.w	r3, #3
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e012      	b.n	8008e50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	69b8      	ldr	r0, [r7, #24]
 8008e32:	f000 fb03 	bl	800943c <xQueueGenericSend>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d009      	beq.n	8008e50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008e42:	f06f 0301 	mvn.w	r3, #1
 8008e46:	61fb      	str	r3, [r7, #28]
 8008e48:	e002      	b.n	8008e50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008e4a:	f06f 0302 	mvn.w	r3, #2
 8008e4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008e50:	69fb      	ldr	r3, [r7, #28]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3720      	adds	r7, #32
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e76:	f3ef 8305 	mrs	r3, IPSR
 8008e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8008e7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d028      	beq.n	8008ed4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <osMessageQueueGet+0x34>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <osMessageQueueGet+0x34>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008e94:	f06f 0303 	mvn.w	r3, #3
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	e037      	b.n	8008f0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008ea0:	f107 0310 	add.w	r3, r7, #16
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	69b8      	ldr	r0, [r7, #24]
 8008eaa:	f000 fed9 	bl	8009c60 <xQueueReceiveFromISR>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d003      	beq.n	8008ebc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008eb4:	f06f 0302 	mvn.w	r3, #2
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e027      	b.n	8008f0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d024      	beq.n	8008f0c <osMessageQueueGet+0xac>
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <osMessageQueueGet+0xb8>)
 8008ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	e01b      	b.n	8008f0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <osMessageQueueGet+0x80>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d103      	bne.n	8008ee8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008ee0:	f06f 0303 	mvn.w	r3, #3
 8008ee4:	61fb      	str	r3, [r7, #28]
 8008ee6:	e011      	b.n	8008f0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	69b8      	ldr	r0, [r7, #24]
 8008eee:	f000 fccb 	bl	8009888 <xQueueReceive>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d009      	beq.n	8008f0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008efe:	f06f 0301 	mvn.w	r3, #1
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	e002      	b.n	8008f0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008f06:	f06f 0302 	mvn.w	r3, #2
 8008f0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3720      	adds	r7, #32
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4a07      	ldr	r2, [pc, #28]	; (8008f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <vApplicationGetIdleTaskMemory+0x30>)
 8008f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2280      	movs	r2, #128	; 0x80
 8008f38:	601a      	str	r2, [r3, #0]
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200023a0 	.word	0x200023a0
 8008f4c:	200023fc 	.word	0x200023fc

08008f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a07      	ldr	r2, [pc, #28]	; (8008f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8008f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	4a06      	ldr	r2, [pc, #24]	; (8008f80 <vApplicationGetTimerTaskMemory+0x30>)
 8008f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f6e:	601a      	str	r2, [r3, #0]
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	200025fc 	.word	0x200025fc
 8008f80:	20002658 	.word	0x20002658

08008f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f103 0208 	add.w	r2, r3, #8
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f103 0208 	add.w	r2, r3, #8
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f103 0208 	add.w	r2, r3, #8
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	601a      	str	r2, [r3, #0]
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903c:	d103      	bne.n	8009046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	e00c      	b.n	8009060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3308      	adds	r3, #8
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e002      	b.n	8009054 <vListInsert+0x2e>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	429a      	cmp	r2, r3
 800905e:	d2f6      	bcs.n	800904e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
}
 800908c:	bf00      	nop
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6892      	ldr	r2, [r2, #8]
 80090ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	6852      	ldr	r2, [r2, #4]
 80090b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d103      	bne.n	80090cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	1e5a      	subs	r2, r3, #1
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009116:	f002 fc7d 	bl	800ba14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	441a      	add	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009146:	3b01      	subs	r3, #1
 8009148:	68f9      	ldr	r1, [r7, #12]
 800914a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800914c:	fb01 f303 	mul.w	r3, r1, r3
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	22ff      	movs	r2, #255	; 0xff
 800915a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d114      	bne.n	8009196 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01a      	beq.n	80091aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3310      	adds	r3, #16
 8009178:	4618      	mov	r0, r3
 800917a:	f001 fc37 	bl	800a9ec <xTaskRemoveFromEventList>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d012      	beq.n	80091aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009184:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <xQueueGenericReset+0xcc>)
 8009186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	e009      	b.n	80091aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3310      	adds	r3, #16
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff fef2 	bl	8008f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3324      	adds	r3, #36	; 0x24
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff feed 	bl	8008f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091aa:	f002 fc63 	bl	800ba74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091ae:	2301      	movs	r3, #1
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08e      	sub	sp, #56	; 0x38
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <xQueueGenericCreateStatic+0x52>
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <xQueueGenericCreateStatic+0x56>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueGenericCreateStatic+0x58>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	623b      	str	r3, [r7, #32]
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <xQueueGenericCreateStatic+0x7e>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <xQueueGenericCreateStatic+0x82>
 800923a:	2301      	movs	r3, #1
 800923c:	e000      	b.n	8009240 <xQueueGenericCreateStatic+0x84>
 800923e:	2300      	movs	r3, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	61fb      	str	r3, [r7, #28]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800925a:	2350      	movs	r3, #80	; 0x50
 800925c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b50      	cmp	r3, #80	; 0x50
 8009262:	d00a      	beq.n	800927a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	61bb      	str	r3, [r7, #24]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800927a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00d      	beq.n	80092a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800928e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	4613      	mov	r3, r2
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 f83f 	bl	8009320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3730      	adds	r7, #48	; 0x30
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	613b      	str	r3, [r7, #16]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	fb02 f303 	mul.w	r3, r2, r3
 80092de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	3350      	adds	r3, #80	; 0x50
 80092e4:	4618      	mov	r0, r3
 80092e6:	f002 fcb7 	bl	800bc58 <pvPortMalloc>
 80092ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d011      	beq.n	8009316 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	3350      	adds	r3, #80	; 0x50
 80092fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009304:	79fa      	ldrb	r2, [r7, #7]
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	4613      	mov	r3, r2
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 f805 	bl	8009320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009316:	69bb      	ldr	r3, [r7, #24]
	}
 8009318:	4618      	mov	r0, r3
 800931a:	3720      	adds	r7, #32
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d103      	bne.n	800933c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	69ba      	ldr	r2, [r7, #24]
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e002      	b.n	8009342 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800934e:	2101      	movs	r1, #1
 8009350:	69b8      	ldr	r0, [r7, #24]
 8009352:	f7ff fecb 	bl	80090ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800935e:	bf00      	nop
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009366:	b580      	push	{r7, lr}
 8009368:	b08a      	sub	sp, #40	; 0x28
 800936a:	af02      	add	r7, sp, #8
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	61bb      	str	r3, [r7, #24]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	429a      	cmp	r2, r3
 8009394:	d90a      	bls.n	80093ac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	617b      	str	r3, [r7, #20]
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093ac:	2302      	movs	r3, #2
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff ff00 	bl	80091bc <xQueueGenericCreateStatic>
 80093bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093ca:	69fb      	ldr	r3, [r7, #28]
	}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	613b      	str	r3, [r7, #16]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d90a      	bls.n	8009418 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	60fb      	str	r3, [r7, #12]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009418:	2202      	movs	r2, #2
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff ff45 	bl	80092ac <xQueueGenericCreate>
 8009422:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009430:	697b      	ldr	r3, [r7, #20]
	}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08e      	sub	sp, #56	; 0x38
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800944a:	2300      	movs	r3, #0
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <xQueueGenericSend+0x32>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d103      	bne.n	800947c <xQueueGenericSend+0x40>
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <xQueueGenericSend+0x44>
 800947c:	2301      	movs	r3, #1
 800947e:	e000      	b.n	8009482 <xQueueGenericSend+0x46>
 8009480:	2300      	movs	r3, #0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <xQueueGenericSend+0x60>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d103      	bne.n	80094aa <xQueueGenericSend+0x6e>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <xQueueGenericSend+0x72>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <xQueueGenericSend+0x74>
 80094ae:	2300      	movs	r3, #0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <xQueueGenericSend+0x8e>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	623b      	str	r3, [r7, #32]
}
 80094c6:	bf00      	nop
 80094c8:	e7fe      	b.n	80094c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094ca:	f001 fc4d 	bl	800ad68 <xTaskGetSchedulerState>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <xQueueGenericSend+0x9e>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <xQueueGenericSend+0xa2>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <xQueueGenericSend+0xa4>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xQueueGenericSend+0xbe>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	61fb      	str	r3, [r7, #28]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094fa:	f002 fa8b 	bl	800ba14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009506:	429a      	cmp	r2, r3
 8009508:	d302      	bcc.n	8009510 <xQueueGenericSend+0xd4>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d129      	bne.n	8009564 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009516:	f000 fc5e 	bl	8009dd6 <prvCopyDataToQueue>
 800951a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800951c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d010      	beq.n	8009546 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	3324      	adds	r3, #36	; 0x24
 8009528:	4618      	mov	r0, r3
 800952a:	f001 fa5f 	bl	800a9ec <xTaskRemoveFromEventList>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d013      	beq.n	800955c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009534:	4b3f      	ldr	r3, [pc, #252]	; (8009634 <xQueueGenericSend+0x1f8>)
 8009536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	e00a      	b.n	800955c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d007      	beq.n	800955c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800954c:	4b39      	ldr	r3, [pc, #228]	; (8009634 <xQueueGenericSend+0x1f8>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800955c:	f002 fa8a 	bl	800ba74 <vPortExitCritical>
				return pdPASS;
 8009560:	2301      	movs	r3, #1
 8009562:	e063      	b.n	800962c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d103      	bne.n	8009572 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800956a:	f002 fa83 	bl	800ba74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800956e:	2300      	movs	r3, #0
 8009570:	e05c      	b.n	800962c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009578:	f107 0314 	add.w	r3, r7, #20
 800957c:	4618      	mov	r0, r3
 800957e:	f001 fa99 	bl	800aab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009586:	f002 fa75 	bl	800ba74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800958a:	f000 fff9 	bl	800a580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800958e:	f002 fa41 	bl	800ba14 <vPortEnterCritical>
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009598:	b25b      	sxtb	r3, r3
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d103      	bne.n	80095a8 <xQueueGenericSend+0x16c>
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ae:	b25b      	sxtb	r3, r3
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d103      	bne.n	80095be <xQueueGenericSend+0x182>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095be:	f002 fa59 	bl	800ba74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095c2:	1d3a      	adds	r2, r7, #4
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 fa88 	bl	800aae0 <xTaskCheckForTimeOut>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d124      	bne.n	8009620 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095d8:	f000 fcf5 	bl	8009fc6 <prvIsQueueFull>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d018      	beq.n	8009614 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	3310      	adds	r3, #16
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 f9ae 	bl	800a94c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f2:	f000 fc80 	bl	8009ef6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095f6:	f000 ffd1 	bl	800a59c <xTaskResumeAll>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f47f af7c 	bne.w	80094fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009602:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <xQueueGenericSend+0x1f8>)
 8009604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	e772      	b.n	80094fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009616:	f000 fc6e 	bl	8009ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800961a:	f000 ffbf 	bl	800a59c <xTaskResumeAll>
 800961e:	e76c      	b.n	80094fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009622:	f000 fc68 	bl	8009ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009626:	f000 ffb9 	bl	800a59c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800962a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800962c:	4618      	mov	r0, r3
 800962e:	3738      	adds	r7, #56	; 0x38
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	e000ed04 	.word	0xe000ed04

08009638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b090      	sub	sp, #64	; 0x40
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d103      	bne.n	8009674 <xQueueGenericSendFromISR+0x3c>
 800966c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <xQueueGenericSendFromISR+0x40>
 8009674:	2301      	movs	r3, #1
 8009676:	e000      	b.n	800967a <xQueueGenericSendFromISR+0x42>
 8009678:	2300      	movs	r3, #0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10a      	bne.n	8009694 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b02      	cmp	r3, #2
 8009698:	d103      	bne.n	80096a2 <xQueueGenericSendFromISR+0x6a>
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <xQueueGenericSendFromISR+0x6e>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <xQueueGenericSendFromISR+0x70>
 80096a6:	2300      	movs	r3, #0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	623b      	str	r3, [r7, #32]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096c2:	f002 fa89 	bl	800bbd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096c6:	f3ef 8211 	mrs	r2, BASEPRI
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	61fa      	str	r2, [r7, #28]
 80096dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d302      	bcc.n	80096f4 <xQueueGenericSendFromISR+0xbc>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d12f      	bne.n	8009754 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	68b9      	ldr	r1, [r7, #8]
 8009708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800970a:	f000 fb64 	bl	8009dd6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800970e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	d112      	bne.n	800973e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	2b00      	cmp	r3, #0
 800971e:	d016      	beq.n	800974e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	3324      	adds	r3, #36	; 0x24
 8009724:	4618      	mov	r0, r3
 8009726:	f001 f961 	bl	800a9ec <xTaskRemoveFromEventList>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00e      	beq.n	800974e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00b      	beq.n	800974e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	e007      	b.n	800974e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800973e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009742:	3301      	adds	r3, #1
 8009744:	b2db      	uxtb	r3, r3
 8009746:	b25a      	sxtb	r2, r3
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800974e:	2301      	movs	r3, #1
 8009750:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009752:	e001      	b.n	8009758 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009754:	2300      	movs	r3, #0
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009762:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009766:	4618      	mov	r0, r3
 8009768:	3740      	adds	r7, #64	; 0x40
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b08e      	sub	sp, #56	; 0x38
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	623b      	str	r3, [r7, #32]
}
 8009794:	bf00      	nop
 8009796:	e7fe      	b.n	8009796 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00a      	beq.n	80097b6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	61fb      	str	r3, [r7, #28]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d103      	bne.n	80097c6 <xQueueGiveFromISR+0x58>
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <xQueueGiveFromISR+0x5c>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <xQueueGiveFromISR+0x5e>
 80097ca:	2300      	movs	r3, #0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	61bb      	str	r3, [r7, #24]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097e6:	f002 f9f7 	bl	800bbd8 <vPortValidateInterruptPriority>
	__asm volatile
 80097ea:	f3ef 8211 	mrs	r2, BASEPRI
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	617a      	str	r2, [r7, #20]
 8009800:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009802:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009812:	429a      	cmp	r2, r3
 8009814:	d22b      	bcs.n	800986e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800981c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009830:	d112      	bne.n	8009858 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	d016      	beq.n	8009868 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	3324      	adds	r3, #36	; 0x24
 800983e:	4618      	mov	r0, r3
 8009840:	f001 f8d4 	bl	800a9ec <xTaskRemoveFromEventList>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00e      	beq.n	8009868 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	e007      	b.n	8009868 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800985c:	3301      	adds	r3, #1
 800985e:	b2db      	uxtb	r3, r3
 8009860:	b25a      	sxtb	r2, r3
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009868:	2301      	movs	r3, #1
 800986a:	637b      	str	r3, [r7, #52]	; 0x34
 800986c:	e001      	b.n	8009872 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800986e:	2300      	movs	r3, #0
 8009870:	637b      	str	r3, [r7, #52]	; 0x34
 8009872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009874:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f383 8811 	msr	BASEPRI, r3
}
 800987c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800987e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009880:	4618      	mov	r0, r3
 8009882:	3738      	adds	r7, #56	; 0x38
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08c      	sub	sp, #48	; 0x30
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009894:	2300      	movs	r3, #0
 8009896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10a      	bne.n	80098b8 <xQueueReceive+0x30>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	623b      	str	r3, [r7, #32]
}
 80098b4:	bf00      	nop
 80098b6:	e7fe      	b.n	80098b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <xQueueReceive+0x3e>
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <xQueueReceive+0x42>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <xQueueReceive+0x44>
 80098ca:	2300      	movs	r3, #0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10a      	bne.n	80098e6 <xQueueReceive+0x5e>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	61fb      	str	r3, [r7, #28]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098e6:	f001 fa3f 	bl	800ad68 <xTaskGetSchedulerState>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d102      	bne.n	80098f6 <xQueueReceive+0x6e>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <xQueueReceive+0x72>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <xQueueReceive+0x74>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xQueueReceive+0x8e>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	61bb      	str	r3, [r7, #24]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009916:	f002 f87d 	bl	800ba14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2b00      	cmp	r3, #0
 8009924:	d01f      	beq.n	8009966 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992a:	f000 fabe 	bl	8009eaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	1e5a      	subs	r2, r3, #1
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00f      	beq.n	800995e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	3310      	adds	r3, #16
 8009942:	4618      	mov	r0, r3
 8009944:	f001 f852 	bl	800a9ec <xTaskRemoveFromEventList>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800994e:	4b3d      	ldr	r3, [pc, #244]	; (8009a44 <xQueueReceive+0x1bc>)
 8009950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800995e:	f002 f889 	bl	800ba74 <vPortExitCritical>
				return pdPASS;
 8009962:	2301      	movs	r3, #1
 8009964:	e069      	b.n	8009a3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d103      	bne.n	8009974 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800996c:	f002 f882 	bl	800ba74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009970:	2300      	movs	r3, #0
 8009972:	e062      	b.n	8009a3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d106      	bne.n	8009988 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800997a:	f107 0310 	add.w	r3, r7, #16
 800997e:	4618      	mov	r0, r3
 8009980:	f001 f898 	bl	800aab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009988:	f002 f874 	bl	800ba74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800998c:	f000 fdf8 	bl	800a580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009990:	f002 f840 	bl	800ba14 <vPortEnterCritical>
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800999a:	b25b      	sxtb	r3, r3
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d103      	bne.n	80099aa <xQueueReceive+0x122>
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099b0:	b25b      	sxtb	r3, r3
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d103      	bne.n	80099c0 <xQueueReceive+0x138>
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099c0:	f002 f858 	bl	800ba74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099c4:	1d3a      	adds	r2, r7, #4
 80099c6:	f107 0310 	add.w	r3, r7, #16
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 f887 	bl	800aae0 <xTaskCheckForTimeOut>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d123      	bne.n	8009a20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099da:	f000 fade 	bl	8009f9a <prvIsQueueEmpty>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d017      	beq.n	8009a14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	3324      	adds	r3, #36	; 0x24
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	4611      	mov	r1, r2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 ffad 	bl	800a94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f4:	f000 fa7f 	bl	8009ef6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099f8:	f000 fdd0 	bl	800a59c <xTaskResumeAll>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d189      	bne.n	8009916 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a02:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <xQueueReceive+0x1bc>)
 8009a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	e780      	b.n	8009916 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a16:	f000 fa6e 	bl	8009ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a1a:	f000 fdbf 	bl	800a59c <xTaskResumeAll>
 8009a1e:	e77a      	b.n	8009916 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a22:	f000 fa68 	bl	8009ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a26:	f000 fdb9 	bl	800a59c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2c:	f000 fab5 	bl	8009f9a <prvIsQueueEmpty>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f43f af6f 	beq.w	8009916 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3730      	adds	r7, #48	; 0x30
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a52:	2300      	movs	r3, #0
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	623b      	str	r3, [r7, #32]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00a      	beq.n	8009a98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	61fb      	str	r3, [r7, #28]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a98:	f001 f966 	bl	800ad68 <xTaskGetSchedulerState>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <xQueueSemaphoreTake+0x60>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <xQueueSemaphoreTake+0x64>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e000      	b.n	8009aae <xQueueSemaphoreTake+0x66>
 8009aac:	2300      	movs	r3, #0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	61bb      	str	r3, [r7, #24]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ac8:	f001 ffa4 	bl	800ba14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d024      	beq.n	8009b22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	1e5a      	subs	r2, r3, #1
 8009adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009ae8:	f001 fab4 	bl	800b054 <pvTaskIncrementMutexHeldCount>
 8009aec:	4602      	mov	r2, r0
 8009aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00f      	beq.n	8009b1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	3310      	adds	r3, #16
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 ff74 	bl	800a9ec <xTaskRemoveFromEventList>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d007      	beq.n	8009b1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b0a:	4b54      	ldr	r3, [pc, #336]	; (8009c5c <xQueueSemaphoreTake+0x214>)
 8009b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b1a:	f001 ffab 	bl	800ba74 <vPortExitCritical>
				return pdPASS;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e097      	b.n	8009c52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d111      	bne.n	8009b4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	617b      	str	r3, [r7, #20]
}
 8009b40:	bf00      	nop
 8009b42:	e7fe      	b.n	8009b42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b44:	f001 ff96 	bl	800ba74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e082      	b.n	8009c52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d106      	bne.n	8009b60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b52:	f107 030c 	add.w	r3, r7, #12
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 ffac 	bl	800aab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b60:	f001 ff88 	bl	800ba74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b64:	f000 fd0c 	bl	800a580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b68:	f001 ff54 	bl	800ba14 <vPortEnterCritical>
 8009b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b72:	b25b      	sxtb	r3, r3
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d103      	bne.n	8009b82 <xQueueSemaphoreTake+0x13a>
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b88:	b25b      	sxtb	r3, r3
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8e:	d103      	bne.n	8009b98 <xQueueSemaphoreTake+0x150>
 8009b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b98:	f001 ff6c 	bl	800ba74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b9c:	463a      	mov	r2, r7
 8009b9e:	f107 030c 	add.w	r3, r7, #12
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 ff9b 	bl	800aae0 <xTaskCheckForTimeOut>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d132      	bne.n	8009c16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bb2:	f000 f9f2 	bl	8009f9a <prvIsQueueEmpty>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d026      	beq.n	8009c0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d109      	bne.n	8009bd8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009bc4:	f001 ff26 	bl	800ba14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f8e9 	bl	800ada4 <xTaskPriorityInherit>
 8009bd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009bd4:	f001 ff4e 	bl	800ba74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	3324      	adds	r3, #36	; 0x24
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	4611      	mov	r1, r2
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 feb3 	bl	800a94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009be8:	f000 f985 	bl	8009ef6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009bec:	f000 fcd6 	bl	800a59c <xTaskResumeAll>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f47f af68 	bne.w	8009ac8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009bf8:	4b18      	ldr	r3, [pc, #96]	; (8009c5c <xQueueSemaphoreTake+0x214>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	e75e      	b.n	8009ac8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c0c:	f000 f973 	bl	8009ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c10:	f000 fcc4 	bl	800a59c <xTaskResumeAll>
 8009c14:	e758      	b.n	8009ac8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c18:	f000 f96d 	bl	8009ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c1c:	f000 fcbe 	bl	800a59c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c22:	f000 f9ba 	bl	8009f9a <prvIsQueueEmpty>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f43f af4d 	beq.w	8009ac8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00d      	beq.n	8009c50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009c34:	f001 feee 	bl	800ba14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c3a:	f000 f8b4 	bl	8009da6 <prvGetDisinheritPriorityAfterTimeout>
 8009c3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 f982 	bl	800af50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c4c:	f001 ff12 	bl	800ba74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3738      	adds	r7, #56	; 0x38
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	e000ed04 	.word	0xe000ed04

08009c60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b08e      	sub	sp, #56	; 0x38
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	623b      	str	r3, [r7, #32]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d103      	bne.n	8009c9a <xQueueReceiveFromISR+0x3a>
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <xQueueReceiveFromISR+0x3e>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e000      	b.n	8009ca0 <xQueueReceiveFromISR+0x40>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	61fb      	str	r3, [r7, #28]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cba:	f001 ff8d 	bl	800bbd8 <vPortValidateInterruptPriority>
	__asm volatile
 8009cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	61ba      	str	r2, [r7, #24]
 8009cd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009cd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d02f      	beq.n	8009d46 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cf4:	f000 f8d9 	bl	8009eaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	1e5a      	subs	r2, r3, #1
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d112      	bne.n	8009d30 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d016      	beq.n	8009d40 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	3310      	adds	r3, #16
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fe68 	bl	800a9ec <xTaskRemoveFromEventList>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00e      	beq.n	8009d40 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00b      	beq.n	8009d40 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e007      	b.n	8009d40 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d34:	3301      	adds	r3, #1
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	b25a      	sxtb	r2, r3
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009d40:	2301      	movs	r3, #1
 8009d42:	637b      	str	r3, [r7, #52]	; 0x34
 8009d44:	e001      	b.n	8009d4a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	637b      	str	r3, [r7, #52]	; 0x34
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f383 8811 	msr	BASEPRI, r3
}
 8009d54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3738      	adds	r7, #56	; 0x38
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <vQueueDelete+0x28>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	60bb      	str	r3, [r7, #8]
}
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f95f 	bl	800a04c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f002 f829 	bl	800bdf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009da6:	b480      	push	{r7}
 8009da8:	b085      	sub	sp, #20
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d006      	beq.n	8009dc4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e001      	b.n	8009dc8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
	}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b086      	sub	sp, #24
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10d      	bne.n	8009e10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d14d      	bne.n	8009e98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 f837 	bl	800ae74 <xTaskPriorityDisinherit>
 8009e06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	609a      	str	r2, [r3, #8]
 8009e0e:	e043      	b.n	8009e98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d119      	bne.n	8009e4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6858      	ldr	r0, [r3, #4]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	461a      	mov	r2, r3
 8009e20:	68b9      	ldr	r1, [r7, #8]
 8009e22:	f002 fb8e 	bl	800c542 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	441a      	add	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	685a      	ldr	r2, [r3, #4]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d32b      	bcc.n	8009e98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	605a      	str	r2, [r3, #4]
 8009e48:	e026      	b.n	8009e98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	68d8      	ldr	r0, [r3, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	461a      	mov	r2, r3
 8009e54:	68b9      	ldr	r1, [r7, #8]
 8009e56:	f002 fb74 	bl	800c542 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e62:	425b      	negs	r3, r3
 8009e64:	441a      	add	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d207      	bcs.n	8009e86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	425b      	negs	r3, r3
 8009e80:	441a      	add	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d105      	bne.n	8009e98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ea0:	697b      	ldr	r3, [r7, #20]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d018      	beq.n	8009eee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	441a      	add	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d303      	bcc.n	8009ede <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68d9      	ldr	r1, [r3, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6838      	ldr	r0, [r7, #0]
 8009eea:	f002 fb2a 	bl	800c542 <memcpy>
	}
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009efe:	f001 fd89 	bl	800ba14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f0a:	e011      	b.n	8009f30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d012      	beq.n	8009f3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3324      	adds	r3, #36	; 0x24
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fd67 	bl	800a9ec <xTaskRemoveFromEventList>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f24:	f000 fe3e 	bl	800aba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dce9      	bgt.n	8009f0c <prvUnlockQueue+0x16>
 8009f38:	e000      	b.n	8009f3c <prvUnlockQueue+0x46>
					break;
 8009f3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	22ff      	movs	r2, #255	; 0xff
 8009f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f44:	f001 fd96 	bl	800ba74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f48:	f001 fd64 	bl	800ba14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f54:	e011      	b.n	8009f7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d012      	beq.n	8009f84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3310      	adds	r3, #16
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fd42 	bl	800a9ec <xTaskRemoveFromEventList>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f6e:	f000 fe19 	bl	800aba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dce9      	bgt.n	8009f56 <prvUnlockQueue+0x60>
 8009f82:	e000      	b.n	8009f86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	22ff      	movs	r2, #255	; 0xff
 8009f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f8e:	f001 fd71 	bl	800ba74 <vPortExitCritical>
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fa2:	f001 fd37 	bl	800ba14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	e001      	b.n	8009fb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fb8:	f001 fd5c 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fce:	f001 fd21 	bl	800ba14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d102      	bne.n	8009fe4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	e001      	b.n	8009fe8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fe8:	f001 fd44 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 8009fec:	68fb      	ldr	r3, [r7, #12]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a002:	2300      	movs	r3, #0
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	e014      	b.n	800a032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a008:	4a0f      	ldr	r2, [pc, #60]	; (800a048 <vQueueAddToRegistry+0x50>)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10b      	bne.n	800a02c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a014:	490c      	ldr	r1, [pc, #48]	; (800a048 <vQueueAddToRegistry+0x50>)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a01e:	4a0a      	ldr	r2, [pc, #40]	; (800a048 <vQueueAddToRegistry+0x50>)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	00db      	lsls	r3, r3, #3
 800a024:	4413      	add	r3, r2
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a02a:	e006      	b.n	800a03a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b07      	cmp	r3, #7
 800a036:	d9e7      	bls.n	800a008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a038:	bf00      	nop
 800a03a:	bf00      	nop
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	20002a58 	.word	0x20002a58

0800a04c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e016      	b.n	800a088 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a05a:	4a10      	ldr	r2, [pc, #64]	; (800a09c <vQueueUnregisterQueue+0x50>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	4413      	add	r3, r2
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d10b      	bne.n	800a082 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a06a:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <vQueueUnregisterQueue+0x50>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2100      	movs	r1, #0
 800a070:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a074:	4a09      	ldr	r2, [pc, #36]	; (800a09c <vQueueUnregisterQueue+0x50>)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	4413      	add	r3, r2
 800a07c:	2200      	movs	r2, #0
 800a07e:	605a      	str	r2, [r3, #4]
				break;
 800a080:	e006      	b.n	800a090 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3301      	adds	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b07      	cmp	r3, #7
 800a08c:	d9e5      	bls.n	800a05a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a08e:	bf00      	nop
 800a090:	bf00      	nop
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	20002a58 	.word	0x20002a58

0800a0a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a0b0:	f001 fcb0 	bl	800ba14 <vPortEnterCritical>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0ba:	b25b      	sxtb	r3, r3
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c0:	d103      	bne.n	800a0ca <vQueueWaitForMessageRestricted+0x2a>
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0d0:	b25b      	sxtb	r3, r3
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d6:	d103      	bne.n	800a0e0 <vQueueWaitForMessageRestricted+0x40>
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0e0:	f001 fcc8 	bl	800ba74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fc4d 	bl	800a994 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a0fa:	6978      	ldr	r0, [r7, #20]
 800a0fc:	f7ff fefb 	bl	8009ef6 <prvUnlockQueue>
	}
 800a100:	bf00      	nop
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08e      	sub	sp, #56	; 0x38
 800a10c:	af04      	add	r7, sp, #16
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10a      	bne.n	800a132 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	623b      	str	r3, [r7, #32]
}
 800a12e:	bf00      	nop
 800a130:	e7fe      	b.n	800a130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <xTaskCreateStatic+0x46>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	61fb      	str	r3, [r7, #28]
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a14e:	235c      	movs	r3, #92	; 0x5c
 800a150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	2b5c      	cmp	r3, #92	; 0x5c
 800a156:	d00a      	beq.n	800a16e <xTaskCreateStatic+0x66>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	61bb      	str	r3, [r7, #24]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a16e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	2b00      	cmp	r3, #0
 800a174:	d01e      	beq.n	800a1b4 <xTaskCreateStatic+0xac>
 800a176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01b      	beq.n	800a1b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	2202      	movs	r2, #2
 800a18a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a18e:	2300      	movs	r3, #0
 800a190:	9303      	str	r3, [sp, #12]
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	9302      	str	r3, [sp, #8]
 800a196:	f107 0314 	add.w	r3, r7, #20
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	68b9      	ldr	r1, [r7, #8]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 f850 	bl	800a24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1ae:	f000 f8dd 	bl	800a36c <prvAddNewTaskToReadyList>
 800a1b2:	e001      	b.n	800a1b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1b8:	697b      	ldr	r3, [r7, #20]
	}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3728      	adds	r7, #40	; 0x28
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b08c      	sub	sp, #48	; 0x30
 800a1c6:	af04      	add	r7, sp, #16
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	603b      	str	r3, [r7, #0]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1d2:	88fb      	ldrh	r3, [r7, #6]
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 fd3e 	bl	800bc58 <pvPortMalloc>
 800a1dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00e      	beq.n	800a202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1e4:	205c      	movs	r0, #92	; 0x5c
 800a1e6:	f001 fd37 	bl	800bc58 <pvPortMalloc>
 800a1ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	631a      	str	r2, [r3, #48]	; 0x30
 800a1f8:	e005      	b.n	800a206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1fa:	6978      	ldr	r0, [r7, #20]
 800a1fc:	f001 fdf8 	bl	800bdf0 <vPortFree>
 800a200:	e001      	b.n	800a206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a202:	2300      	movs	r3, #0
 800a204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d017      	beq.n	800a23c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a214:	88fa      	ldrh	r2, [r7, #6]
 800a216:	2300      	movs	r3, #0
 800a218:	9303      	str	r3, [sp, #12]
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	9302      	str	r3, [sp, #8]
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 f80e 	bl	800a24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a230:	69f8      	ldr	r0, [r7, #28]
 800a232:	f000 f89b 	bl	800a36c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a236:	2301      	movs	r3, #1
 800a238:	61bb      	str	r3, [r7, #24]
 800a23a:	e002      	b.n	800a242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a23c:	f04f 33ff 	mov.w	r3, #4294967295
 800a240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a242:	69bb      	ldr	r3, [r7, #24]
	}
 800a244:	4618      	mov	r0, r3
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	461a      	mov	r2, r3
 800a264:	21a5      	movs	r1, #165	; 0xa5
 800a266:	f002 f8f1 	bl	800c44c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a274:	3b01      	subs	r3, #1
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f023 0307 	bic.w	r3, r3, #7
 800a282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	617b      	str	r3, [r7, #20]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01f      	beq.n	800a2ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	61fb      	str	r3, [r7, #28]
 800a2ae:	e012      	b.n	800a2d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	7819      	ldrb	r1, [r3, #0]
 800a2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	4413      	add	r3, r2
 800a2be:	3334      	adds	r3, #52	; 0x34
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d006      	beq.n	800a2de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	61fb      	str	r3, [r7, #28]
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	2b0f      	cmp	r3, #15
 800a2da:	d9e9      	bls.n	800a2b0 <prvInitialiseNewTask+0x64>
 800a2dc:	e000      	b.n	800a2e0 <prvInitialiseNewTask+0x94>
			{
				break;
 800a2de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2e8:	e003      	b.n	800a2f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	2b37      	cmp	r3, #55	; 0x37
 800a2f6:	d901      	bls.n	800a2fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2f8:	2337      	movs	r3, #55	; 0x37
 800a2fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a306:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	2200      	movs	r2, #0
 800a30c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	3304      	adds	r3, #4
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fe56 	bl	8008fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	3318      	adds	r3, #24
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fe51 	bl	8008fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	2200      	movs	r2, #0
 800a33c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	68f9      	ldr	r1, [r7, #12]
 800a34a:	69b8      	ldr	r0, [r7, #24]
 800a34c:	f001 fa38 	bl	800b7c0 <pxPortInitialiseStack>
 800a350:	4602      	mov	r2, r0
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a362:	bf00      	nop
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a374:	f001 fb4e 	bl	800ba14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a378:	4b2d      	ldr	r3, [pc, #180]	; (800a430 <prvAddNewTaskToReadyList+0xc4>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	4a2c      	ldr	r2, [pc, #176]	; (800a430 <prvAddNewTaskToReadyList+0xc4>)
 800a380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a382:	4b2c      	ldr	r3, [pc, #176]	; (800a434 <prvAddNewTaskToReadyList+0xc8>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d109      	bne.n	800a39e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a38a:	4a2a      	ldr	r2, [pc, #168]	; (800a434 <prvAddNewTaskToReadyList+0xc8>)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a390:	4b27      	ldr	r3, [pc, #156]	; (800a430 <prvAddNewTaskToReadyList+0xc4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d110      	bne.n	800a3ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a398:	f000 fc28 	bl	800abec <prvInitialiseTaskLists>
 800a39c:	e00d      	b.n	800a3ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a39e:	4b26      	ldr	r3, [pc, #152]	; (800a438 <prvAddNewTaskToReadyList+0xcc>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d109      	bne.n	800a3ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3a6:	4b23      	ldr	r3, [pc, #140]	; (800a434 <prvAddNewTaskToReadyList+0xc8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d802      	bhi.n	800a3ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3b4:	4a1f      	ldr	r2, [pc, #124]	; (800a434 <prvAddNewTaskToReadyList+0xc8>)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3ba:	4b20      	ldr	r3, [pc, #128]	; (800a43c <prvAddNewTaskToReadyList+0xd0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	4a1e      	ldr	r2, [pc, #120]	; (800a43c <prvAddNewTaskToReadyList+0xd0>)
 800a3c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3c4:	4b1d      	ldr	r3, [pc, #116]	; (800a43c <prvAddNewTaskToReadyList+0xd0>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d0:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <prvAddNewTaskToReadyList+0xd4>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d903      	bls.n	800a3e0 <prvAddNewTaskToReadyList+0x74>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	4a18      	ldr	r2, [pc, #96]	; (800a440 <prvAddNewTaskToReadyList+0xd4>)
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4a15      	ldr	r2, [pc, #84]	; (800a444 <prvAddNewTaskToReadyList+0xd8>)
 800a3ee:	441a      	add	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	f7fe fdf1 	bl	8008fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3fc:	f001 fb3a 	bl	800ba74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a400:	4b0d      	ldr	r3, [pc, #52]	; (800a438 <prvAddNewTaskToReadyList+0xcc>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00e      	beq.n	800a426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a408:	4b0a      	ldr	r3, [pc, #40]	; (800a434 <prvAddNewTaskToReadyList+0xc8>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	429a      	cmp	r2, r3
 800a414:	d207      	bcs.n	800a426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a416:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <prvAddNewTaskToReadyList+0xdc>)
 800a418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a426:	bf00      	nop
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20002f6c 	.word	0x20002f6c
 800a434:	20002a98 	.word	0x20002a98
 800a438:	20002f78 	.word	0x20002f78
 800a43c:	20002f88 	.word	0x20002f88
 800a440:	20002f74 	.word	0x20002f74
 800a444:	20002a9c 	.word	0x20002a9c
 800a448:	e000ed04 	.word	0xe000ed04

0800a44c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d017      	beq.n	800a48e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a45e:	4b13      	ldr	r3, [pc, #76]	; (800a4ac <vTaskDelay+0x60>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <vTaskDelay+0x30>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60bb      	str	r3, [r7, #8]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a47c:	f000 f880 	bl	800a580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a480:	2100      	movs	r1, #0
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fdfa 	bl	800b07c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a488:	f000 f888 	bl	800a59c <xTaskResumeAll>
 800a48c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d107      	bne.n	800a4a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a494:	4b06      	ldr	r3, [pc, #24]	; (800a4b0 <vTaskDelay+0x64>)
 800a496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4a4:	bf00      	nop
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	20002f94 	.word	0x20002f94
 800a4b0:	e000ed04 	.word	0xe000ed04

0800a4b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08a      	sub	sp, #40	; 0x28
 800a4b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4c2:	463a      	mov	r2, r7
 800a4c4:	1d39      	adds	r1, r7, #4
 800a4c6:	f107 0308 	add.w	r3, r7, #8
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fd26 	bl	8008f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	9202      	str	r2, [sp, #8]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	460a      	mov	r2, r1
 800a4e2:	4921      	ldr	r1, [pc, #132]	; (800a568 <vTaskStartScheduler+0xb4>)
 800a4e4:	4821      	ldr	r0, [pc, #132]	; (800a56c <vTaskStartScheduler+0xb8>)
 800a4e6:	f7ff fe0f 	bl	800a108 <xTaskCreateStatic>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	4a20      	ldr	r2, [pc, #128]	; (800a570 <vTaskStartScheduler+0xbc>)
 800a4ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a4f0:	4b1f      	ldr	r3, [pc, #124]	; (800a570 <vTaskStartScheduler+0xbc>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e001      	b.n	800a502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d102      	bne.n	800a50e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a508:	f000 fe0c 	bl	800b124 <xTimerCreateTimerTask>
 800a50c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d116      	bne.n	800a542 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	613b      	str	r3, [r7, #16]
}
 800a526:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a528:	4b12      	ldr	r3, [pc, #72]	; (800a574 <vTaskStartScheduler+0xc0>)
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a530:	4b11      	ldr	r3, [pc, #68]	; (800a578 <vTaskStartScheduler+0xc4>)
 800a532:	2201      	movs	r2, #1
 800a534:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a536:	4b11      	ldr	r3, [pc, #68]	; (800a57c <vTaskStartScheduler+0xc8>)
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a53c:	f001 f9c8 	bl	800b8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a540:	e00e      	b.n	800a560 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a548:	d10a      	bne.n	800a560 <vTaskStartScheduler+0xac>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	60fb      	str	r3, [r7, #12]
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <vTaskStartScheduler+0xaa>
}
 800a560:	bf00      	nop
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	0800d468 	.word	0x0800d468
 800a56c:	0800abbd 	.word	0x0800abbd
 800a570:	20002f90 	.word	0x20002f90
 800a574:	20002f8c 	.word	0x20002f8c
 800a578:	20002f78 	.word	0x20002f78
 800a57c:	20002f70 	.word	0x20002f70

0800a580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a584:	4b04      	ldr	r3, [pc, #16]	; (800a598 <vTaskSuspendAll+0x18>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3301      	adds	r3, #1
 800a58a:	4a03      	ldr	r2, [pc, #12]	; (800a598 <vTaskSuspendAll+0x18>)
 800a58c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a58e:	bf00      	nop
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	20002f94 	.word	0x20002f94

0800a59c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5aa:	4b42      	ldr	r3, [pc, #264]	; (800a6b4 <xTaskResumeAll+0x118>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10a      	bne.n	800a5c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	603b      	str	r3, [r7, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	e7fe      	b.n	800a5c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5c8:	f001 fa24 	bl	800ba14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5cc:	4b39      	ldr	r3, [pc, #228]	; (800a6b4 <xTaskResumeAll+0x118>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	4a38      	ldr	r2, [pc, #224]	; (800a6b4 <xTaskResumeAll+0x118>)
 800a5d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5d6:	4b37      	ldr	r3, [pc, #220]	; (800a6b4 <xTaskResumeAll+0x118>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d162      	bne.n	800a6a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a5de:	4b36      	ldr	r3, [pc, #216]	; (800a6b8 <xTaskResumeAll+0x11c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d05e      	beq.n	800a6a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5e6:	e02f      	b.n	800a648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e8:	4b34      	ldr	r3, [pc, #208]	; (800a6bc <xTaskResumeAll+0x120>)
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3318      	adds	r3, #24
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fe fd4f 	bl	8009098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fd4a 	bl	8009098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a608:	4b2d      	ldr	r3, [pc, #180]	; (800a6c0 <xTaskResumeAll+0x124>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d903      	bls.n	800a618 <xTaskResumeAll+0x7c>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	4a2a      	ldr	r2, [pc, #168]	; (800a6c0 <xTaskResumeAll+0x124>)
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4a27      	ldr	r2, [pc, #156]	; (800a6c4 <xTaskResumeAll+0x128>)
 800a626:	441a      	add	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe fcd5 	bl	8008fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a638:	4b23      	ldr	r3, [pc, #140]	; (800a6c8 <xTaskResumeAll+0x12c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	429a      	cmp	r2, r3
 800a640:	d302      	bcc.n	800a648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a642:	4b22      	ldr	r3, [pc, #136]	; (800a6cc <xTaskResumeAll+0x130>)
 800a644:	2201      	movs	r2, #1
 800a646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a648:	4b1c      	ldr	r3, [pc, #112]	; (800a6bc <xTaskResumeAll+0x120>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1cb      	bne.n	800a5e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a656:	f000 fb67 	bl	800ad28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a65a:	4b1d      	ldr	r3, [pc, #116]	; (800a6d0 <xTaskResumeAll+0x134>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d010      	beq.n	800a688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a666:	f000 f859 	bl	800a71c <xTaskIncrementTick>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a670:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <xTaskResumeAll+0x130>)
 800a672:	2201      	movs	r2, #1
 800a674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3b01      	subs	r3, #1
 800a67a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1f1      	bne.n	800a666 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a682:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <xTaskResumeAll+0x134>)
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a688:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <xTaskResumeAll+0x130>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d009      	beq.n	800a6a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a690:	2301      	movs	r3, #1
 800a692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a694:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <xTaskResumeAll+0x138>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6a4:	f001 f9e6 	bl	800ba74 <vPortExitCritical>

	return xAlreadyYielded;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20002f94 	.word	0x20002f94
 800a6b8:	20002f6c 	.word	0x20002f6c
 800a6bc:	20002f2c 	.word	0x20002f2c
 800a6c0:	20002f74 	.word	0x20002f74
 800a6c4:	20002a9c 	.word	0x20002a9c
 800a6c8:	20002a98 	.word	0x20002a98
 800a6cc:	20002f80 	.word	0x20002f80
 800a6d0:	20002f7c 	.word	0x20002f7c
 800a6d4:	e000ed04 	.word	0xe000ed04

0800a6d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6de:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <xTaskGetTickCount+0x1c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6e4:	687b      	ldr	r3, [r7, #4]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	20002f70 	.word	0x20002f70

0800a6f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6fe:	f001 fa6b 	bl	800bbd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a702:	2300      	movs	r3, #0
 800a704:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a706:	4b04      	ldr	r3, [pc, #16]	; (800a718 <xTaskGetTickCountFromISR+0x20>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a70c:	683b      	ldr	r3, [r7, #0]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20002f70 	.word	0x20002f70

0800a71c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a722:	2300      	movs	r3, #0
 800a724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a726:	4b4f      	ldr	r3, [pc, #316]	; (800a864 <xTaskIncrementTick+0x148>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f040 808f 	bne.w	800a84e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a730:	4b4d      	ldr	r3, [pc, #308]	; (800a868 <xTaskIncrementTick+0x14c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3301      	adds	r3, #1
 800a736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a738:	4a4b      	ldr	r2, [pc, #300]	; (800a868 <xTaskIncrementTick+0x14c>)
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d120      	bne.n	800a786 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a744:	4b49      	ldr	r3, [pc, #292]	; (800a86c <xTaskIncrementTick+0x150>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00a      	beq.n	800a764 <xTaskIncrementTick+0x48>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	603b      	str	r3, [r7, #0]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <xTaskIncrementTick+0x46>
 800a764:	4b41      	ldr	r3, [pc, #260]	; (800a86c <xTaskIncrementTick+0x150>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	60fb      	str	r3, [r7, #12]
 800a76a:	4b41      	ldr	r3, [pc, #260]	; (800a870 <xTaskIncrementTick+0x154>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a3f      	ldr	r2, [pc, #252]	; (800a86c <xTaskIncrementTick+0x150>)
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	4a3f      	ldr	r2, [pc, #252]	; (800a870 <xTaskIncrementTick+0x154>)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	4b3e      	ldr	r3, [pc, #248]	; (800a874 <xTaskIncrementTick+0x158>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3301      	adds	r3, #1
 800a77e:	4a3d      	ldr	r2, [pc, #244]	; (800a874 <xTaskIncrementTick+0x158>)
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	f000 fad1 	bl	800ad28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a786:	4b3c      	ldr	r3, [pc, #240]	; (800a878 <xTaskIncrementTick+0x15c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d349      	bcc.n	800a824 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a790:	4b36      	ldr	r3, [pc, #216]	; (800a86c <xTaskIncrementTick+0x150>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d104      	bne.n	800a7a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a79a:	4b37      	ldr	r3, [pc, #220]	; (800a878 <xTaskIncrementTick+0x15c>)
 800a79c:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a0:	601a      	str	r2, [r3, #0]
					break;
 800a7a2:	e03f      	b.n	800a824 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a4:	4b31      	ldr	r3, [pc, #196]	; (800a86c <xTaskIncrementTick+0x150>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d203      	bcs.n	800a7c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7bc:	4a2e      	ldr	r2, [pc, #184]	; (800a878 <xTaskIncrementTick+0x15c>)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7c2:	e02f      	b.n	800a824 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fe fc65 	bl	8009098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	3318      	adds	r3, #24
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fc5c 	bl	8009098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e4:	4b25      	ldr	r3, [pc, #148]	; (800a87c <xTaskIncrementTick+0x160>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d903      	bls.n	800a7f4 <xTaskIncrementTick+0xd8>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	4a22      	ldr	r2, [pc, #136]	; (800a87c <xTaskIncrementTick+0x160>)
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4a1f      	ldr	r2, [pc, #124]	; (800a880 <xTaskIncrementTick+0x164>)
 800a802:	441a      	add	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	3304      	adds	r3, #4
 800a808:	4619      	mov	r1, r3
 800a80a:	4610      	mov	r0, r2
 800a80c:	f7fe fbe7 	bl	8008fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a814:	4b1b      	ldr	r3, [pc, #108]	; (800a884 <xTaskIncrementTick+0x168>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d3b8      	bcc.n	800a790 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a81e:	2301      	movs	r3, #1
 800a820:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a822:	e7b5      	b.n	800a790 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a824:	4b17      	ldr	r3, [pc, #92]	; (800a884 <xTaskIncrementTick+0x168>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82a:	4915      	ldr	r1, [pc, #84]	; (800a880 <xTaskIncrementTick+0x164>)
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	440b      	add	r3, r1
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d901      	bls.n	800a840 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a840:	4b11      	ldr	r3, [pc, #68]	; (800a888 <xTaskIncrementTick+0x16c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a848:	2301      	movs	r3, #1
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e004      	b.n	800a858 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <xTaskIncrementTick+0x170>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	4a0d      	ldr	r2, [pc, #52]	; (800a88c <xTaskIncrementTick+0x170>)
 800a856:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a858:	697b      	ldr	r3, [r7, #20]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20002f94 	.word	0x20002f94
 800a868:	20002f70 	.word	0x20002f70
 800a86c:	20002f24 	.word	0x20002f24
 800a870:	20002f28 	.word	0x20002f28
 800a874:	20002f84 	.word	0x20002f84
 800a878:	20002f8c 	.word	0x20002f8c
 800a87c:	20002f74 	.word	0x20002f74
 800a880:	20002a9c 	.word	0x20002a9c
 800a884:	20002a98 	.word	0x20002a98
 800a888:	20002f80 	.word	0x20002f80
 800a88c:	20002f7c 	.word	0x20002f7c

0800a890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a896:	4b28      	ldr	r3, [pc, #160]	; (800a938 <vTaskSwitchContext+0xa8>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a89e:	4b27      	ldr	r3, [pc, #156]	; (800a93c <vTaskSwitchContext+0xac>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8a4:	e041      	b.n	800a92a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a8a6:	4b25      	ldr	r3, [pc, #148]	; (800a93c <vTaskSwitchContext+0xac>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ac:	4b24      	ldr	r3, [pc, #144]	; (800a940 <vTaskSwitchContext+0xb0>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	e010      	b.n	800a8d6 <vTaskSwitchContext+0x46>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	607b      	str	r3, [r7, #4]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <vTaskSwitchContext+0x3e>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	491b      	ldr	r1, [pc, #108]	; (800a944 <vTaskSwitchContext+0xb4>)
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	440b      	add	r3, r1
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0e4      	beq.n	800a8b4 <vTaskSwitchContext+0x24>
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4a13      	ldr	r2, [pc, #76]	; (800a944 <vTaskSwitchContext+0xb4>)
 800a8f6:	4413      	add	r3, r2
 800a8f8:	60bb      	str	r3, [r7, #8]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	605a      	str	r2, [r3, #4]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	3308      	adds	r3, #8
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d104      	bne.n	800a91a <vTaskSwitchContext+0x8a>
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	685a      	ldr	r2, [r3, #4]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	605a      	str	r2, [r3, #4]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	4a09      	ldr	r2, [pc, #36]	; (800a948 <vTaskSwitchContext+0xb8>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	4a06      	ldr	r2, [pc, #24]	; (800a940 <vTaskSwitchContext+0xb0>)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6013      	str	r3, [r2, #0]
}
 800a92a:	bf00      	nop
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20002f94 	.word	0x20002f94
 800a93c:	20002f80 	.word	0x20002f80
 800a940:	20002f74 	.word	0x20002f74
 800a944:	20002a9c 	.word	0x20002a9c
 800a948:	20002a98 	.word	0x20002a98

0800a94c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	60fb      	str	r3, [r7, #12]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a972:	4b07      	ldr	r3, [pc, #28]	; (800a990 <vTaskPlaceOnEventList+0x44>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3318      	adds	r3, #24
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7fe fb53 	bl	8009026 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a980:	2101      	movs	r1, #1
 800a982:	6838      	ldr	r0, [r7, #0]
 800a984:	f000 fb7a 	bl	800b07c <prvAddCurrentTaskToDelayedList>
}
 800a988:	bf00      	nop
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	20002a98 	.word	0x20002a98

0800a994 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	617b      	str	r3, [r7, #20]
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3318      	adds	r3, #24
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7fe fb0a 	bl	8008fde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	68b8      	ldr	r0, [r7, #8]
 800a9da:	f000 fb4f 	bl	800b07c <prvAddCurrentTaskToDelayedList>
	}
 800a9de:	bf00      	nop
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20002a98 	.word	0x20002a98

0800a9ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	60fb      	str	r3, [r7, #12]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	3318      	adds	r3, #24
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe fb3b 	bl	8009098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa22:	4b1e      	ldr	r3, [pc, #120]	; (800aa9c <xTaskRemoveFromEventList+0xb0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d11d      	bne.n	800aa66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fb32 	bl	8009098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa38:	4b19      	ldr	r3, [pc, #100]	; (800aaa0 <xTaskRemoveFromEventList+0xb4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d903      	bls.n	800aa48 <xTaskRemoveFromEventList+0x5c>
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	4a16      	ldr	r2, [pc, #88]	; (800aaa0 <xTaskRemoveFromEventList+0xb4>)
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	4413      	add	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4a13      	ldr	r2, [pc, #76]	; (800aaa4 <xTaskRemoveFromEventList+0xb8>)
 800aa56:	441a      	add	r2, r3
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f7fe fabd 	bl	8008fde <vListInsertEnd>
 800aa64:	e005      	b.n	800aa72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3318      	adds	r3, #24
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	480e      	ldr	r0, [pc, #56]	; (800aaa8 <xTaskRemoveFromEventList+0xbc>)
 800aa6e:	f7fe fab6 	bl	8008fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa76:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <xTaskRemoveFromEventList+0xc0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d905      	bls.n	800aa8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa80:	2301      	movs	r3, #1
 800aa82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa84:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <xTaskRemoveFromEventList+0xc4>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	e001      	b.n	800aa90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa90:	697b      	ldr	r3, [r7, #20]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20002f94 	.word	0x20002f94
 800aaa0:	20002f74 	.word	0x20002f74
 800aaa4:	20002a9c 	.word	0x20002a9c
 800aaa8:	20002f2c 	.word	0x20002f2c
 800aaac:	20002a98 	.word	0x20002a98
 800aab0:	20002f80 	.word	0x20002f80

0800aab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aabc:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <vTaskInternalSetTimeOutState+0x24>)
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aac4:	4b05      	ldr	r3, [pc, #20]	; (800aadc <vTaskInternalSetTimeOutState+0x28>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	605a      	str	r2, [r3, #4]
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	20002f84 	.word	0x20002f84
 800aadc:	20002f70 	.word	0x20002f70

0800aae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	613b      	str	r3, [r7, #16]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60fb      	str	r3, [r7, #12]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ab22:	f000 ff77 	bl	800ba14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab26:	4b1d      	ldr	r3, [pc, #116]	; (800ab9c <xTaskCheckForTimeOut+0xbc>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d102      	bne.n	800ab46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61fb      	str	r3, [r7, #28]
 800ab44:	e023      	b.n	800ab8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	4b15      	ldr	r3, [pc, #84]	; (800aba0 <xTaskCheckForTimeOut+0xc0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d007      	beq.n	800ab62 <xTaskCheckForTimeOut+0x82>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d302      	bcc.n	800ab62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	61fb      	str	r3, [r7, #28]
 800ab60:	e015      	b.n	800ab8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d20b      	bcs.n	800ab84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	1ad2      	subs	r2, r2, r3
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff ff9b 	bl	800aab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	61fb      	str	r3, [r7, #28]
 800ab82:	e004      	b.n	800ab8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab8e:	f000 ff71 	bl	800ba74 <vPortExitCritical>

	return xReturn;
 800ab92:	69fb      	ldr	r3, [r7, #28]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3720      	adds	r7, #32
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20002f70 	.word	0x20002f70
 800aba0:	20002f84 	.word	0x20002f84

0800aba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aba8:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <vTaskMissedYield+0x14>)
 800abaa:	2201      	movs	r2, #1
 800abac:	601a      	str	r2, [r3, #0]
}
 800abae:	bf00      	nop
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20002f80 	.word	0x20002f80

0800abbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800abc4:	f000 f852 	bl	800ac6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abc8:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <prvIdleTask+0x28>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d9f9      	bls.n	800abc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abd0:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <prvIdleTask+0x2c>)
 800abd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800abe0:	e7f0      	b.n	800abc4 <prvIdleTask+0x8>
 800abe2:	bf00      	nop
 800abe4:	20002a9c 	.word	0x20002a9c
 800abe8:	e000ed04 	.word	0xe000ed04

0800abec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abf2:	2300      	movs	r3, #0
 800abf4:	607b      	str	r3, [r7, #4]
 800abf6:	e00c      	b.n	800ac12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	4613      	mov	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4a12      	ldr	r2, [pc, #72]	; (800ac4c <prvInitialiseTaskLists+0x60>)
 800ac04:	4413      	add	r3, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe f9bc 	bl	8008f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	607b      	str	r3, [r7, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b37      	cmp	r3, #55	; 0x37
 800ac16:	d9ef      	bls.n	800abf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac18:	480d      	ldr	r0, [pc, #52]	; (800ac50 <prvInitialiseTaskLists+0x64>)
 800ac1a:	f7fe f9b3 	bl	8008f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac1e:	480d      	ldr	r0, [pc, #52]	; (800ac54 <prvInitialiseTaskLists+0x68>)
 800ac20:	f7fe f9b0 	bl	8008f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac24:	480c      	ldr	r0, [pc, #48]	; (800ac58 <prvInitialiseTaskLists+0x6c>)
 800ac26:	f7fe f9ad 	bl	8008f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac2a:	480c      	ldr	r0, [pc, #48]	; (800ac5c <prvInitialiseTaskLists+0x70>)
 800ac2c:	f7fe f9aa 	bl	8008f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac30:	480b      	ldr	r0, [pc, #44]	; (800ac60 <prvInitialiseTaskLists+0x74>)
 800ac32:	f7fe f9a7 	bl	8008f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac36:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <prvInitialiseTaskLists+0x78>)
 800ac38:	4a05      	ldr	r2, [pc, #20]	; (800ac50 <prvInitialiseTaskLists+0x64>)
 800ac3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <prvInitialiseTaskLists+0x7c>)
 800ac3e:	4a05      	ldr	r2, [pc, #20]	; (800ac54 <prvInitialiseTaskLists+0x68>)
 800ac40:	601a      	str	r2, [r3, #0]
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20002a9c 	.word	0x20002a9c
 800ac50:	20002efc 	.word	0x20002efc
 800ac54:	20002f10 	.word	0x20002f10
 800ac58:	20002f2c 	.word	0x20002f2c
 800ac5c:	20002f40 	.word	0x20002f40
 800ac60:	20002f58 	.word	0x20002f58
 800ac64:	20002f24 	.word	0x20002f24
 800ac68:	20002f28 	.word	0x20002f28

0800ac6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac72:	e019      	b.n	800aca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac74:	f000 fece 	bl	800ba14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac78:	4b10      	ldr	r3, [pc, #64]	; (800acbc <prvCheckTasksWaitingTermination+0x50>)
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3304      	adds	r3, #4
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe fa07 	bl	8009098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac8a:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <prvCheckTasksWaitingTermination+0x54>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	4a0b      	ldr	r2, [pc, #44]	; (800acc0 <prvCheckTasksWaitingTermination+0x54>)
 800ac92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac94:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <prvCheckTasksWaitingTermination+0x58>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	4a0a      	ldr	r2, [pc, #40]	; (800acc4 <prvCheckTasksWaitingTermination+0x58>)
 800ac9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac9e:	f000 fee9 	bl	800ba74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f810 	bl	800acc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aca8:	4b06      	ldr	r3, [pc, #24]	; (800acc4 <prvCheckTasksWaitingTermination+0x58>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e1      	bne.n	800ac74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20002f40 	.word	0x20002f40
 800acc0:	20002f6c 	.word	0x20002f6c
 800acc4:	20002f54 	.word	0x20002f54

0800acc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d108      	bne.n	800acec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acde:	4618      	mov	r0, r3
 800ace0:	f001 f886 	bl	800bdf0 <vPortFree>
				vPortFree( pxTCB );
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 f883 	bl	800bdf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acea:	e018      	b.n	800ad1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d103      	bne.n	800acfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 f87a 	bl	800bdf0 <vPortFree>
	}
 800acfc:	e00f      	b.n	800ad1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d00a      	beq.n	800ad1e <prvDeleteTCB+0x56>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	60fb      	str	r3, [r7, #12]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <prvDeleteTCB+0x54>
	}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <prvResetNextTaskUnblockTime+0x38>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d104      	bne.n	800ad42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad38:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <prvResetNextTaskUnblockTime+0x3c>)
 800ad3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad40:	e008      	b.n	800ad54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad42:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <prvResetNextTaskUnblockTime+0x38>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4a04      	ldr	r2, [pc, #16]	; (800ad64 <prvResetNextTaskUnblockTime+0x3c>)
 800ad52:	6013      	str	r3, [r2, #0]
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	20002f24 	.word	0x20002f24
 800ad64:	20002f8c 	.word	0x20002f8c

0800ad68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad6e:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <xTaskGetSchedulerState+0x34>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d102      	bne.n	800ad7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad76:	2301      	movs	r3, #1
 800ad78:	607b      	str	r3, [r7, #4]
 800ad7a:	e008      	b.n	800ad8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad7c:	4b08      	ldr	r3, [pc, #32]	; (800ada0 <xTaskGetSchedulerState+0x38>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad84:	2302      	movs	r3, #2
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	e001      	b.n	800ad8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad8e:	687b      	ldr	r3, [r7, #4]
	}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	20002f78 	.word	0x20002f78
 800ada0:	20002f94 	.word	0x20002f94

0800ada4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d051      	beq.n	800ae5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adbe:	4b2a      	ldr	r3, [pc, #168]	; (800ae68 <xTaskPriorityInherit+0xc4>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d241      	bcs.n	800ae4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	db06      	blt.n	800adde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add0:	4b25      	ldr	r3, [pc, #148]	; (800ae68 <xTaskPriorityInherit+0xc4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	6959      	ldr	r1, [r3, #20]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade6:	4613      	mov	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4a1f      	ldr	r2, [pc, #124]	; (800ae6c <xTaskPriorityInherit+0xc8>)
 800adf0:	4413      	add	r3, r2
 800adf2:	4299      	cmp	r1, r3
 800adf4:	d122      	bne.n	800ae3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe f94c 	bl	8009098 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae00:	4b19      	ldr	r3, [pc, #100]	; (800ae68 <xTaskPriorityInherit+0xc4>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae0e:	4b18      	ldr	r3, [pc, #96]	; (800ae70 <xTaskPriorityInherit+0xcc>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d903      	bls.n	800ae1e <xTaskPriorityInherit+0x7a>
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1a:	4a15      	ldr	r2, [pc, #84]	; (800ae70 <xTaskPriorityInherit+0xcc>)
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4a10      	ldr	r2, [pc, #64]	; (800ae6c <xTaskPriorityInherit+0xc8>)
 800ae2c:	441a      	add	r2, r3
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3304      	adds	r3, #4
 800ae32:	4619      	mov	r1, r3
 800ae34:	4610      	mov	r0, r2
 800ae36:	f7fe f8d2 	bl	8008fde <vListInsertEnd>
 800ae3a:	e004      	b.n	800ae46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <xTaskPriorityInherit+0xc4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae46:	2301      	movs	r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	e008      	b.n	800ae5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae50:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <xTaskPriorityInherit+0xc4>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d201      	bcs.n	800ae5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
	}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20002a98 	.word	0x20002a98
 800ae6c:	20002a9c 	.word	0x20002a9c
 800ae70:	20002f74 	.word	0x20002f74

0800ae74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d056      	beq.n	800af38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae8a:	4b2e      	ldr	r3, [pc, #184]	; (800af44 <xTaskPriorityDisinherit+0xd0>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d00a      	beq.n	800aeaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60fb      	str	r3, [r7, #12]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	60bb      	str	r3, [r7, #8]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aecc:	1e5a      	subs	r2, r3, #1
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d02c      	beq.n	800af38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d128      	bne.n	800af38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	3304      	adds	r3, #4
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe f8d4 	bl	8009098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af08:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <xTaskPriorityDisinherit+0xd4>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d903      	bls.n	800af18 <xTaskPriorityDisinherit+0xa4>
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af14:	4a0c      	ldr	r2, [pc, #48]	; (800af48 <xTaskPriorityDisinherit+0xd4>)
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	4613      	mov	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4a09      	ldr	r2, [pc, #36]	; (800af4c <xTaskPriorityDisinherit+0xd8>)
 800af26:	441a      	add	r2, r3
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	3304      	adds	r3, #4
 800af2c:	4619      	mov	r1, r3
 800af2e:	4610      	mov	r0, r2
 800af30:	f7fe f855 	bl	8008fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af34:	2301      	movs	r3, #1
 800af36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af38:	697b      	ldr	r3, [r7, #20]
	}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20002a98 	.word	0x20002a98
 800af48:	20002f74 	.word	0x20002f74
 800af4c:	20002a9c 	.word	0x20002a9c

0800af50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af5e:	2301      	movs	r3, #1
 800af60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d06a      	beq.n	800b03e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10a      	bne.n	800af86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	60fb      	str	r3, [r7, #12]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d902      	bls.n	800af96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	e002      	b.n	800af9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d04b      	beq.n	800b03e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	429a      	cmp	r2, r3
 800afae:	d146      	bne.n	800b03e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800afb0:	4b25      	ldr	r3, [pc, #148]	; (800b048 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	69ba      	ldr	r2, [r7, #24]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d10a      	bne.n	800afd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	60bb      	str	r3, [r7, #8]
}
 800afcc:	bf00      	nop
 800afce:	e7fe      	b.n	800afce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	69fa      	ldr	r2, [r7, #28]
 800afda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	db04      	blt.n	800afee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	6959      	ldr	r1, [r3, #20]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	4613      	mov	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4a13      	ldr	r2, [pc, #76]	; (800b04c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800affe:	4413      	add	r3, r2
 800b000:	4299      	cmp	r1, r3
 800b002:	d11c      	bne.n	800b03e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	3304      	adds	r3, #4
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fe f845 	bl	8009098 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b012:	4b0f      	ldr	r3, [pc, #60]	; (800b050 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d903      	bls.n	800b022 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01e:	4a0c      	ldr	r2, [pc, #48]	; (800b050 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b026:	4613      	mov	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4a07      	ldr	r2, [pc, #28]	; (800b04c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b030:	441a      	add	r2, r3
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	3304      	adds	r3, #4
 800b036:	4619      	mov	r1, r3
 800b038:	4610      	mov	r0, r2
 800b03a:	f7fd ffd0 	bl	8008fde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b03e:	bf00      	nop
 800b040:	3720      	adds	r7, #32
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20002a98 	.word	0x20002a98
 800b04c:	20002a9c 	.word	0x20002a9c
 800b050:	20002f74 	.word	0x20002f74

0800b054 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <pvTaskIncrementMutexHeldCount+0x24>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d004      	beq.n	800b06a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b060:	4b05      	ldr	r3, [pc, #20]	; (800b078 <pvTaskIncrementMutexHeldCount+0x24>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b066:	3201      	adds	r2, #1
 800b068:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b06a:	4b03      	ldr	r3, [pc, #12]	; (800b078 <pvTaskIncrementMutexHeldCount+0x24>)
 800b06c:	681b      	ldr	r3, [r3, #0]
	}
 800b06e:	4618      	mov	r0, r3
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	20002a98 	.word	0x20002a98

0800b07c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b086:	4b21      	ldr	r3, [pc, #132]	; (800b10c <prvAddCurrentTaskToDelayedList+0x90>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b08c:	4b20      	ldr	r3, [pc, #128]	; (800b110 <prvAddCurrentTaskToDelayedList+0x94>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3304      	adds	r3, #4
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe f800 	bl	8009098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d10a      	bne.n	800b0b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d007      	beq.n	800b0b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0a6:	4b1a      	ldr	r3, [pc, #104]	; (800b110 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4819      	ldr	r0, [pc, #100]	; (800b114 <prvAddCurrentTaskToDelayedList+0x98>)
 800b0b0:	f7fd ff95 	bl	8008fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b0b4:	e026      	b.n	800b104 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0be:	4b14      	ldr	r3, [pc, #80]	; (800b110 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d209      	bcs.n	800b0e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0ce:	4b12      	ldr	r3, [pc, #72]	; (800b118 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	f7fd ffa3 	bl	8009026 <vListInsert>
}
 800b0e0:	e010      	b.n	800b104 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0e2:	4b0e      	ldr	r3, [pc, #56]	; (800b11c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f7fd ff99 	bl	8009026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b0f4:	4b0a      	ldr	r3, [pc, #40]	; (800b120 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d202      	bcs.n	800b104 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b0fe:	4a08      	ldr	r2, [pc, #32]	; (800b120 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	6013      	str	r3, [r2, #0]
}
 800b104:	bf00      	nop
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20002f70 	.word	0x20002f70
 800b110:	20002a98 	.word	0x20002a98
 800b114:	20002f58 	.word	0x20002f58
 800b118:	20002f28 	.word	0x20002f28
 800b11c:	20002f24 	.word	0x20002f24
 800b120:	20002f8c 	.word	0x20002f8c

0800b124 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b12e:	f000 fb07 	bl	800b740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b132:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <xTimerCreateTimerTask+0x80>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d021      	beq.n	800b17e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b142:	1d3a      	adds	r2, r7, #4
 800b144:	f107 0108 	add.w	r1, r7, #8
 800b148:	f107 030c 	add.w	r3, r7, #12
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fd feff 	bl	8008f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	9202      	str	r2, [sp, #8]
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	2302      	movs	r3, #2
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	2300      	movs	r3, #0
 800b162:	460a      	mov	r2, r1
 800b164:	4910      	ldr	r1, [pc, #64]	; (800b1a8 <xTimerCreateTimerTask+0x84>)
 800b166:	4811      	ldr	r0, [pc, #68]	; (800b1ac <xTimerCreateTimerTask+0x88>)
 800b168:	f7fe ffce 	bl	800a108 <xTaskCreateStatic>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4a10      	ldr	r2, [pc, #64]	; (800b1b0 <xTimerCreateTimerTask+0x8c>)
 800b170:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b172:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <xTimerCreateTimerTask+0x8c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b17a:	2301      	movs	r3, #1
 800b17c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	613b      	str	r3, [r7, #16]
}
 800b196:	bf00      	nop
 800b198:	e7fe      	b.n	800b198 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b19a:	697b      	ldr	r3, [r7, #20]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20002fc8 	.word	0x20002fc8
 800b1a8:	0800d470 	.word	0x0800d470
 800b1ac:	0800b2e9 	.word	0x0800b2e9
 800b1b0:	20002fcc 	.word	0x20002fcc

0800b1b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08a      	sub	sp, #40	; 0x28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	623b      	str	r3, [r7, #32]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1e2:	4b1a      	ldr	r3, [pc, #104]	; (800b24c <xTimerGenericCommand+0x98>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d02a      	beq.n	800b240 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b05      	cmp	r3, #5
 800b1fa:	dc18      	bgt.n	800b22e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1fc:	f7ff fdb4 	bl	800ad68 <xTaskGetSchedulerState>
 800b200:	4603      	mov	r3, r0
 800b202:	2b02      	cmp	r3, #2
 800b204:	d109      	bne.n	800b21a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <xTimerGenericCommand+0x98>)
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f107 0110 	add.w	r1, r7, #16
 800b20e:	2300      	movs	r3, #0
 800b210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b212:	f7fe f913 	bl	800943c <xQueueGenericSend>
 800b216:	6278      	str	r0, [r7, #36]	; 0x24
 800b218:	e012      	b.n	800b240 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b21a:	4b0c      	ldr	r3, [pc, #48]	; (800b24c <xTimerGenericCommand+0x98>)
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	f107 0110 	add.w	r1, r7, #16
 800b222:	2300      	movs	r3, #0
 800b224:	2200      	movs	r2, #0
 800b226:	f7fe f909 	bl	800943c <xQueueGenericSend>
 800b22a:	6278      	str	r0, [r7, #36]	; 0x24
 800b22c:	e008      	b.n	800b240 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b22e:	4b07      	ldr	r3, [pc, #28]	; (800b24c <xTimerGenericCommand+0x98>)
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	f107 0110 	add.w	r1, r7, #16
 800b236:	2300      	movs	r3, #0
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	f7fe f9fd 	bl	8009638 <xQueueGenericSendFromISR>
 800b23e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b242:	4618      	mov	r0, r3
 800b244:	3728      	adds	r7, #40	; 0x28
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20002fc8 	.word	0x20002fc8

0800b250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b088      	sub	sp, #32
 800b254:	af02      	add	r7, sp, #8
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b25a:	4b22      	ldr	r3, [pc, #136]	; (800b2e4 <prvProcessExpiredTimer+0x94>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	3304      	adds	r3, #4
 800b268:	4618      	mov	r0, r3
 800b26a:	f7fd ff15 	bl	8009098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d022      	beq.n	800b2c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	699a      	ldr	r2, [r3, #24]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	18d1      	adds	r1, r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	6978      	ldr	r0, [r7, #20]
 800b28a:	f000 f8d1 	bl	800b430 <prvInsertTimerInActiveList>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d01f      	beq.n	800b2d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b294:	2300      	movs	r3, #0
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	2300      	movs	r3, #0
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	2100      	movs	r1, #0
 800b29e:	6978      	ldr	r0, [r7, #20]
 800b2a0:	f7ff ff88 	bl	800b1b4 <xTimerGenericCommand>
 800b2a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d113      	bne.n	800b2d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	60fb      	str	r3, [r7, #12]
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c8:	f023 0301 	bic.w	r3, r3, #1
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	6978      	ldr	r0, [r7, #20]
 800b2da:	4798      	blx	r3
}
 800b2dc:	bf00      	nop
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20002fc0 	.word	0x20002fc0

0800b2e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2f0:	f107 0308 	add.w	r3, r7, #8
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 f857 	bl	800b3a8 <prvGetNextExpireTime>
 800b2fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	4619      	mov	r1, r3
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 f803 	bl	800b30c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b306:	f000 f8d5 	bl	800b4b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b30a:	e7f1      	b.n	800b2f0 <prvTimerTask+0x8>

0800b30c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b316:	f7ff f933 	bl	800a580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b31a:	f107 0308 	add.w	r3, r7, #8
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 f866 	bl	800b3f0 <prvSampleTimeNow>
 800b324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d130      	bne.n	800b38e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10a      	bne.n	800b348 <prvProcessTimerOrBlockTask+0x3c>
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	429a      	cmp	r2, r3
 800b338:	d806      	bhi.n	800b348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b33a:	f7ff f92f 	bl	800a59c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b33e:	68f9      	ldr	r1, [r7, #12]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff ff85 	bl	800b250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b346:	e024      	b.n	800b392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d008      	beq.n	800b360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b34e:	4b13      	ldr	r3, [pc, #76]	; (800b39c <prvProcessTimerOrBlockTask+0x90>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <prvProcessTimerOrBlockTask+0x50>
 800b358:	2301      	movs	r3, #1
 800b35a:	e000      	b.n	800b35e <prvProcessTimerOrBlockTask+0x52>
 800b35c:	2300      	movs	r3, #0
 800b35e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b360:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <prvProcessTimerOrBlockTask+0x94>)
 800b362:	6818      	ldr	r0, [r3, #0]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	4619      	mov	r1, r3
 800b36e:	f7fe fe97 	bl	800a0a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b372:	f7ff f913 	bl	800a59c <xTaskResumeAll>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10a      	bne.n	800b392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <prvProcessTimerOrBlockTask+0x98>)
 800b37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	f3bf 8f6f 	isb	sy
}
 800b38c:	e001      	b.n	800b392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b38e:	f7ff f905 	bl	800a59c <xTaskResumeAll>
}
 800b392:	bf00      	nop
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20002fc4 	.word	0x20002fc4
 800b3a0:	20002fc8 	.word	0x20002fc8
 800b3a4:	e000ed04 	.word	0xe000ed04

0800b3a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3b0:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <prvGetNextExpireTime+0x44>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <prvGetNextExpireTime+0x16>
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	e000      	b.n	800b3c0 <prvGetNextExpireTime+0x18>
 800b3be:	2200      	movs	r2, #0
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d105      	bne.n	800b3d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3cc:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <prvGetNextExpireTime+0x44>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	e001      	b.n	800b3dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	20002fc0 	.word	0x20002fc0

0800b3f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b3f8:	f7ff f96e 	bl	800a6d8 <xTaskGetTickCount>
 800b3fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b3fe:	4b0b      	ldr	r3, [pc, #44]	; (800b42c <prvSampleTimeNow+0x3c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	429a      	cmp	r2, r3
 800b406:	d205      	bcs.n	800b414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b408:	f000 f936 	bl	800b678 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	601a      	str	r2, [r3, #0]
 800b412:	e002      	b.n	800b41a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b41a:	4a04      	ldr	r2, [pc, #16]	; (800b42c <prvSampleTimeNow+0x3c>)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b420:	68fb      	ldr	r3, [r7, #12]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20002fd0 	.word	0x20002fd0

0800b430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b43e:	2300      	movs	r3, #0
 800b440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d812      	bhi.n	800b47c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	1ad2      	subs	r2, r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	429a      	cmp	r2, r3
 800b462:	d302      	bcc.n	800b46a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b464:	2301      	movs	r3, #1
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e01b      	b.n	800b4a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b46a:	4b10      	ldr	r3, [pc, #64]	; (800b4ac <prvInsertTimerInActiveList+0x7c>)
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3304      	adds	r3, #4
 800b472:	4619      	mov	r1, r3
 800b474:	4610      	mov	r0, r2
 800b476:	f7fd fdd6 	bl	8009026 <vListInsert>
 800b47a:	e012      	b.n	800b4a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	429a      	cmp	r2, r3
 800b482:	d206      	bcs.n	800b492 <prvInsertTimerInActiveList+0x62>
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d302      	bcc.n	800b492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	e007      	b.n	800b4a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b492:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <prvInsertTimerInActiveList+0x80>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3304      	adds	r3, #4
 800b49a:	4619      	mov	r1, r3
 800b49c:	4610      	mov	r0, r2
 800b49e:	f7fd fdc2 	bl	8009026 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b4a2:	697b      	ldr	r3, [r7, #20]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20002fc4 	.word	0x20002fc4
 800b4b0:	20002fc0 	.word	0x20002fc0

0800b4b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b08e      	sub	sp, #56	; 0x38
 800b4b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4ba:	e0ca      	b.n	800b652 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	da18      	bge.n	800b4f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4c2:	1d3b      	adds	r3, r7, #4
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10a      	bne.n	800b4e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	61fb      	str	r3, [r7, #28]
}
 800b4e0:	bf00      	nop
 800b4e2:	e7fe      	b.n	800b4e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4ea:	6850      	ldr	r0, [r2, #4]
 800b4ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4ee:	6892      	ldr	r2, [r2, #8]
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f2c0 80ab 	blt.w	800b652 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d004      	beq.n	800b512 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	3304      	adds	r3, #4
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fd fdc3 	bl	8009098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b512:	463b      	mov	r3, r7
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff ff6b 	bl	800b3f0 <prvSampleTimeNow>
 800b51a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b09      	cmp	r3, #9
 800b520:	f200 8096 	bhi.w	800b650 <prvProcessReceivedCommands+0x19c>
 800b524:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <prvProcessReceivedCommands+0x78>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b555 	.word	0x0800b555
 800b530:	0800b555 	.word	0x0800b555
 800b534:	0800b555 	.word	0x0800b555
 800b538:	0800b5c9 	.word	0x0800b5c9
 800b53c:	0800b5dd 	.word	0x0800b5dd
 800b540:	0800b627 	.word	0x0800b627
 800b544:	0800b555 	.word	0x0800b555
 800b548:	0800b555 	.word	0x0800b555
 800b54c:	0800b5c9 	.word	0x0800b5c9
 800b550:	0800b5dd 	.word	0x0800b5dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b55a:	f043 0301 	orr.w	r3, r3, #1
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	18d1      	adds	r1, r2, r3
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b574:	f7ff ff5c 	bl	800b430 <prvInsertTimerInActiveList>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d069      	beq.n	800b652 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b584:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	d05e      	beq.n	800b652 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	441a      	add	r2, r3
 800b59c:	2300      	movs	r3, #0
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5a6:	f7ff fe05 	bl	800b1b4 <xTimerGenericCommand>
 800b5aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d14f      	bne.n	800b652 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	61bb      	str	r3, [r7, #24]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5ce:	f023 0301 	bic.w	r3, r3, #1
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b5da:	e03a      	b.n	800b652 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5e2:	f043 0301 	orr.w	r3, r3, #1
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10a      	bne.n	800b612 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	617b      	str	r3, [r7, #20]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	699a      	ldr	r2, [r3, #24]
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	18d1      	adds	r1, r2, r3
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b61e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b620:	f7ff ff06 	bl	800b430 <prvInsertTimerInActiveList>
					break;
 800b624:	e015      	b.n	800b652 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d103      	bne.n	800b63c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b636:	f000 fbdb 	bl	800bdf0 <vPortFree>
 800b63a:	e00a      	b.n	800b652 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b642:	f023 0301 	bic.w	r3, r3, #1
 800b646:	b2da      	uxtb	r2, r3
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b64e:	e000      	b.n	800b652 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b650:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b652:	4b08      	ldr	r3, [pc, #32]	; (800b674 <prvProcessReceivedCommands+0x1c0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	1d39      	adds	r1, r7, #4
 800b658:	2200      	movs	r2, #0
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe f914 	bl	8009888 <xQueueReceive>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	f47f af2a 	bne.w	800b4bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	3730      	adds	r7, #48	; 0x30
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20002fc8 	.word	0x20002fc8

0800b678 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b67e:	e048      	b.n	800b712 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b680:	4b2d      	ldr	r3, [pc, #180]	; (800b738 <prvSwitchTimerLists+0xc0>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b68a:	4b2b      	ldr	r3, [pc, #172]	; (800b738 <prvSwitchTimerLists+0xc0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3304      	adds	r3, #4
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fd fcfd 	bl	8009098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d02e      	beq.n	800b712 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d90e      	bls.n	800b6e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <prvSwitchTimerLists+0xc0>)
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4610      	mov	r0, r2
 800b6de:	f7fd fca2 	bl	8009026 <vListInsert>
 800b6e2:	e016      	b.n	800b712 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff fd60 	bl	800b1b4 <xTimerGenericCommand>
 800b6f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	603b      	str	r3, [r7, #0]
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b712:	4b09      	ldr	r3, [pc, #36]	; (800b738 <prvSwitchTimerLists+0xc0>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1b1      	bne.n	800b680 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b71c:	4b06      	ldr	r3, [pc, #24]	; (800b738 <prvSwitchTimerLists+0xc0>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b722:	4b06      	ldr	r3, [pc, #24]	; (800b73c <prvSwitchTimerLists+0xc4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a04      	ldr	r2, [pc, #16]	; (800b738 <prvSwitchTimerLists+0xc0>)
 800b728:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b72a:	4a04      	ldr	r2, [pc, #16]	; (800b73c <prvSwitchTimerLists+0xc4>)
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	6013      	str	r3, [r2, #0]
}
 800b730:	bf00      	nop
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20002fc0 	.word	0x20002fc0
 800b73c:	20002fc4 	.word	0x20002fc4

0800b740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b746:	f000 f965 	bl	800ba14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b74a:	4b15      	ldr	r3, [pc, #84]	; (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d120      	bne.n	800b794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b752:	4814      	ldr	r0, [pc, #80]	; (800b7a4 <prvCheckForValidListAndQueue+0x64>)
 800b754:	f7fd fc16 	bl	8008f84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b758:	4813      	ldr	r0, [pc, #76]	; (800b7a8 <prvCheckForValidListAndQueue+0x68>)
 800b75a:	f7fd fc13 	bl	8008f84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b75e:	4b13      	ldr	r3, [pc, #76]	; (800b7ac <prvCheckForValidListAndQueue+0x6c>)
 800b760:	4a10      	ldr	r2, [pc, #64]	; (800b7a4 <prvCheckForValidListAndQueue+0x64>)
 800b762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b764:	4b12      	ldr	r3, [pc, #72]	; (800b7b0 <prvCheckForValidListAndQueue+0x70>)
 800b766:	4a10      	ldr	r2, [pc, #64]	; (800b7a8 <prvCheckForValidListAndQueue+0x68>)
 800b768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b76a:	2300      	movs	r3, #0
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	4b11      	ldr	r3, [pc, #68]	; (800b7b4 <prvCheckForValidListAndQueue+0x74>)
 800b770:	4a11      	ldr	r2, [pc, #68]	; (800b7b8 <prvCheckForValidListAndQueue+0x78>)
 800b772:	2110      	movs	r1, #16
 800b774:	200a      	movs	r0, #10
 800b776:	f7fd fd21 	bl	80091bc <xQueueGenericCreateStatic>
 800b77a:	4603      	mov	r3, r0
 800b77c:	4a08      	ldr	r2, [pc, #32]	; (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b77e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b780:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d005      	beq.n	800b794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b788:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <prvCheckForValidListAndQueue+0x60>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	490b      	ldr	r1, [pc, #44]	; (800b7bc <prvCheckForValidListAndQueue+0x7c>)
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe fc32 	bl	8009ff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b794:	f000 f96e 	bl	800ba74 <vPortExitCritical>
}
 800b798:	bf00      	nop
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20002fc8 	.word	0x20002fc8
 800b7a4:	20002f98 	.word	0x20002f98
 800b7a8:	20002fac 	.word	0x20002fac
 800b7ac:	20002fc0 	.word	0x20002fc0
 800b7b0:	20002fc4 	.word	0x20002fc4
 800b7b4:	20003074 	.word	0x20003074
 800b7b8:	20002fd4 	.word	0x20002fd4
 800b7bc:	0800d478 	.word	0x0800d478

0800b7c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b04      	subs	r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0201 	bic.w	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7f0:	4a0c      	ldr	r2, [pc, #48]	; (800b824 <pxPortInitialiseStack+0x64>)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3b14      	subs	r3, #20
 800b7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b04      	subs	r3, #4
 800b806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f06f 0202 	mvn.w	r2, #2
 800b80e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3b20      	subs	r3, #32
 800b814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b816:	68fb      	ldr	r3, [r7, #12]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	0800b829 	.word	0x0800b829

0800b828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b832:	4b12      	ldr	r3, [pc, #72]	; (800b87c <prvTaskExitError+0x54>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d00a      	beq.n	800b852 <prvTaskExitError+0x2a>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	60fb      	str	r3, [r7, #12]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <prvTaskExitError+0x28>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	60bb      	str	r3, [r7, #8]
}
 800b864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b866:	bf00      	nop
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d0fc      	beq.n	800b868 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	20000010 	.word	0x20000010

0800b880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <pxCurrentTCBConst2>)
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	6808      	ldr	r0, [r1, #0]
 800b886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	f380 8809 	msr	PSP, r0
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f04f 0000 	mov.w	r0, #0
 800b896:	f380 8811 	msr	BASEPRI, r0
 800b89a:	4770      	bx	lr
 800b89c:	f3af 8000 	nop.w

0800b8a0 <pxCurrentTCBConst2>:
 800b8a0:	20002a98 	.word	0x20002a98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop

0800b8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8a8:	4808      	ldr	r0, [pc, #32]	; (800b8cc <prvPortStartFirstTask+0x24>)
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	6800      	ldr	r0, [r0, #0]
 800b8ae:	f380 8808 	msr	MSP, r0
 800b8b2:	f04f 0000 	mov.w	r0, #0
 800b8b6:	f380 8814 	msr	CONTROL, r0
 800b8ba:	b662      	cpsie	i
 800b8bc:	b661      	cpsie	f
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	df00      	svc	0
 800b8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8ca:	bf00      	nop
 800b8cc:	e000ed08 	.word	0xe000ed08

0800b8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8d6:	4b46      	ldr	r3, [pc, #280]	; (800b9f0 <xPortStartScheduler+0x120>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a46      	ldr	r2, [pc, #280]	; (800b9f4 <xPortStartScheduler+0x124>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d10a      	bne.n	800b8f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	613b      	str	r3, [r7, #16]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8f6:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <xPortStartScheduler+0x120>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a3f      	ldr	r2, [pc, #252]	; (800b9f8 <xPortStartScheduler+0x128>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d10a      	bne.n	800b916 <xPortStartScheduler+0x46>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	60fb      	str	r3, [r7, #12]
}
 800b912:	bf00      	nop
 800b914:	e7fe      	b.n	800b914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b916:	4b39      	ldr	r3, [pc, #228]	; (800b9fc <xPortStartScheduler+0x12c>)
 800b918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	22ff      	movs	r2, #255	; 0xff
 800b926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	4b31      	ldr	r3, [pc, #196]	; (800ba00 <xPortStartScheduler+0x130>)
 800b93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b93e:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <xPortStartScheduler+0x134>)
 800b940:	2207      	movs	r2, #7
 800b942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b944:	e009      	b.n	800b95a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b946:	4b2f      	ldr	r3, [pc, #188]	; (800ba04 <xPortStartScheduler+0x134>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	4a2d      	ldr	r2, [pc, #180]	; (800ba04 <xPortStartScheduler+0x134>)
 800b94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b950:	78fb      	ldrb	r3, [r7, #3]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	b2db      	uxtb	r3, r3
 800b958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b962:	2b80      	cmp	r3, #128	; 0x80
 800b964:	d0ef      	beq.n	800b946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b966:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <xPortStartScheduler+0x134>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f1c3 0307 	rsb	r3, r3, #7
 800b96e:	2b04      	cmp	r3, #4
 800b970:	d00a      	beq.n	800b988 <xPortStartScheduler+0xb8>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60bb      	str	r3, [r7, #8]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b988:	4b1e      	ldr	r3, [pc, #120]	; (800ba04 <xPortStartScheduler+0x134>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	021b      	lsls	r3, r3, #8
 800b98e:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <xPortStartScheduler+0x134>)
 800b990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b992:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <xPortStartScheduler+0x134>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b99a:	4a1a      	ldr	r2, [pc, #104]	; (800ba04 <xPortStartScheduler+0x134>)
 800b99c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9a6:	4b18      	ldr	r3, [pc, #96]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a17      	ldr	r2, [pc, #92]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9b2:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a14      	ldr	r2, [pc, #80]	; (800ba08 <xPortStartScheduler+0x138>)
 800b9b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b9bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9be:	f000 f8dd 	bl	800bb7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <xPortStartScheduler+0x13c>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9c8:	f000 f8fc 	bl	800bbc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9cc:	4b10      	ldr	r3, [pc, #64]	; (800ba10 <xPortStartScheduler+0x140>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a0f      	ldr	r2, [pc, #60]	; (800ba10 <xPortStartScheduler+0x140>)
 800b9d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b9d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b9d8:	f7ff ff66 	bl	800b8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b9dc:	f7fe ff58 	bl	800a890 <vTaskSwitchContext>
	prvTaskExitError();
 800b9e0:	f7ff ff22 	bl	800b828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	e000ed00 	.word	0xe000ed00
 800b9f4:	410fc271 	.word	0x410fc271
 800b9f8:	410fc270 	.word	0x410fc270
 800b9fc:	e000e400 	.word	0xe000e400
 800ba00:	200030c4 	.word	0x200030c4
 800ba04:	200030c8 	.word	0x200030c8
 800ba08:	e000ed20 	.word	0xe000ed20
 800ba0c:	20000010 	.word	0x20000010
 800ba10:	e000ef34 	.word	0xe000ef34

0800ba14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	607b      	str	r3, [r7, #4]
}
 800ba2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3301      	adds	r3, #1
 800ba34:	4a0d      	ldr	r2, [pc, #52]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba38:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <vPortEnterCritical+0x58>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d10f      	bne.n	800ba60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba40:	4b0b      	ldr	r3, [pc, #44]	; (800ba70 <vPortEnterCritical+0x5c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	603b      	str	r3, [r7, #0]
}
 800ba5c:	bf00      	nop
 800ba5e:	e7fe      	b.n	800ba5e <vPortEnterCritical+0x4a>
	}
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	20000010 	.word	0x20000010
 800ba70:	e000ed04 	.word	0xe000ed04

0800ba74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba7a:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <vPortExitCritical+0x50>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <vPortExitCritical+0x24>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	607b      	str	r3, [r7, #4]
}
 800ba94:	bf00      	nop
 800ba96:	e7fe      	b.n	800ba96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba98:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <vPortExitCritical+0x50>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	4a09      	ldr	r2, [pc, #36]	; (800bac4 <vPortExitCritical+0x50>)
 800baa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800baa2:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <vPortExitCritical+0x50>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <vPortExitCritical+0x42>
 800baaa:	2300      	movs	r3, #0
 800baac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	f383 8811 	msr	BASEPRI, r3
}
 800bab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	20000010 	.word	0x20000010
	...

0800bad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bad0:	f3ef 8009 	mrs	r0, PSP
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	4b15      	ldr	r3, [pc, #84]	; (800bb30 <pxCurrentTCBConst>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	f01e 0f10 	tst.w	lr, #16
 800bae0:	bf08      	it	eq
 800bae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	6010      	str	r0, [r2, #0]
 800baec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800baf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800baf4:	f380 8811 	msr	BASEPRI, r0
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f7fe fec6 	bl	800a890 <vTaskSwitchContext>
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	f380 8811 	msr	BASEPRI, r0
 800bb0c:	bc09      	pop	{r0, r3}
 800bb0e:	6819      	ldr	r1, [r3, #0]
 800bb10:	6808      	ldr	r0, [r1, #0]
 800bb12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb16:	f01e 0f10 	tst.w	lr, #16
 800bb1a:	bf08      	it	eq
 800bb1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb20:	f380 8809 	msr	PSP, r0
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w

0800bb30 <pxCurrentTCBConst>:
 800bb30:	20002a98 	.word	0x20002a98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop

0800bb38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	607b      	str	r3, [r7, #4]
}
 800bb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb52:	f7fe fde3 	bl	800a71c <xTaskIncrementTick>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <xPortSysTickHandler+0x40>)
 800bb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb62:	601a      	str	r2, [r3, #0]
 800bb64:	2300      	movs	r3, #0
 800bb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f383 8811 	msr	BASEPRI, r3
}
 800bb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb80:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <vPortSetupTimerInterrupt+0x34>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb86:	4b0b      	ldr	r3, [pc, #44]	; (800bbb4 <vPortSetupTimerInterrupt+0x38>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <vPortSetupTimerInterrupt+0x3c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a0a      	ldr	r2, [pc, #40]	; (800bbbc <vPortSetupTimerInterrupt+0x40>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	099b      	lsrs	r3, r3, #6
 800bb98:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <vPortSetupTimerInterrupt+0x44>)
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb9e:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <vPortSetupTimerInterrupt+0x34>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
}
 800bba4:	bf00      	nop
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	e000e010 	.word	0xe000e010
 800bbb4:	e000e018 	.word	0xe000e018
 800bbb8:	20000000 	.word	0x20000000
 800bbbc:	10624dd3 	.word	0x10624dd3
 800bbc0:	e000e014 	.word	0xe000e014

0800bbc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bbd4 <vPortEnableVFP+0x10>
 800bbc8:	6801      	ldr	r1, [r0, #0]
 800bbca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bbce:	6001      	str	r1, [r0, #0]
 800bbd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bbd2:	bf00      	nop
 800bbd4:	e000ed88 	.word	0xe000ed88

0800bbd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbde:	f3ef 8305 	mrs	r3, IPSR
 800bbe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b0f      	cmp	r3, #15
 800bbe8:	d914      	bls.n	800bc14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbea:	4a17      	ldr	r2, [pc, #92]	; (800bc48 <vPortValidateInterruptPriority+0x70>)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbf4:	4b15      	ldr	r3, [pc, #84]	; (800bc4c <vPortValidateInterruptPriority+0x74>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	7afa      	ldrb	r2, [r7, #11]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d20a      	bcs.n	800bc14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	607b      	str	r3, [r7, #4]
}
 800bc10:	bf00      	nop
 800bc12:	e7fe      	b.n	800bc12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc14:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <vPortValidateInterruptPriority+0x78>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc1c:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <vPortValidateInterruptPriority+0x7c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d90a      	bls.n	800bc3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	603b      	str	r3, [r7, #0]
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <vPortValidateInterruptPriority+0x60>
	}
 800bc3a:	bf00      	nop
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	e000e3f0 	.word	0xe000e3f0
 800bc4c:	200030c4 	.word	0x200030c4
 800bc50:	e000ed0c 	.word	0xe000ed0c
 800bc54:	200030c8 	.word	0x200030c8

0800bc58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b08a      	sub	sp, #40	; 0x28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc64:	f7fe fc8c 	bl	800a580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc68:	4b5b      	ldr	r3, [pc, #364]	; (800bdd8 <pvPortMalloc+0x180>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc70:	f000 f920 	bl	800beb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc74:	4b59      	ldr	r3, [pc, #356]	; (800bddc <pvPortMalloc+0x184>)
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f040 8093 	bne.w	800bda8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01d      	beq.n	800bcc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc88:	2208      	movs	r2, #8
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f003 0307 	and.w	r3, r3, #7
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d014      	beq.n	800bcc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f023 0307 	bic.w	r3, r3, #7
 800bca0:	3308      	adds	r3, #8
 800bca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00a      	beq.n	800bcc4 <pvPortMalloc+0x6c>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	617b      	str	r3, [r7, #20]
}
 800bcc0:	bf00      	nop
 800bcc2:	e7fe      	b.n	800bcc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d06e      	beq.n	800bda8 <pvPortMalloc+0x150>
 800bcca:	4b45      	ldr	r3, [pc, #276]	; (800bde0 <pvPortMalloc+0x188>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d869      	bhi.n	800bda8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcd4:	4b43      	ldr	r3, [pc, #268]	; (800bde4 <pvPortMalloc+0x18c>)
 800bcd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcd8:	4b42      	ldr	r3, [pc, #264]	; (800bde4 <pvPortMalloc+0x18c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcde:	e004      	b.n	800bcea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d903      	bls.n	800bcfc <pvPortMalloc+0xa4>
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1f1      	bne.n	800bce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bcfc:	4b36      	ldr	r3, [pc, #216]	; (800bdd8 <pvPortMalloc+0x180>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d050      	beq.n	800bda8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2208      	movs	r2, #8
 800bd0c:	4413      	add	r3, r2
 800bd0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	1ad2      	subs	r2, r2, r3
 800bd20:	2308      	movs	r3, #8
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d91f      	bls.n	800bd68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <pvPortMalloc+0xf8>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	613b      	str	r3, [r7, #16]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	1ad2      	subs	r2, r2, r3
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd62:	69b8      	ldr	r0, [r7, #24]
 800bd64:	f000 f908 	bl	800bf78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd68:	4b1d      	ldr	r3, [pc, #116]	; (800bde0 <pvPortMalloc+0x188>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	4a1b      	ldr	r2, [pc, #108]	; (800bde0 <pvPortMalloc+0x188>)
 800bd74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd76:	4b1a      	ldr	r3, [pc, #104]	; (800bde0 <pvPortMalloc+0x188>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	4b1b      	ldr	r3, [pc, #108]	; (800bde8 <pvPortMalloc+0x190>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d203      	bcs.n	800bd8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd82:	4b17      	ldr	r3, [pc, #92]	; (800bde0 <pvPortMalloc+0x188>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a18      	ldr	r2, [pc, #96]	; (800bde8 <pvPortMalloc+0x190>)
 800bd88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	4b13      	ldr	r3, [pc, #76]	; (800bddc <pvPortMalloc+0x184>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	431a      	orrs	r2, r3
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd9e:	4b13      	ldr	r3, [pc, #76]	; (800bdec <pvPortMalloc+0x194>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	4a11      	ldr	r2, [pc, #68]	; (800bdec <pvPortMalloc+0x194>)
 800bda6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bda8:	f7fe fbf8 	bl	800a59c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	f003 0307 	and.w	r3, r3, #7
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00a      	beq.n	800bdcc <pvPortMalloc+0x174>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	60fb      	str	r3, [r7, #12]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <pvPortMalloc+0x172>
	return pvReturn;
 800bdcc:	69fb      	ldr	r3, [r7, #28]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3728      	adds	r7, #40	; 0x28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20006cd4 	.word	0x20006cd4
 800bddc:	20006ce8 	.word	0x20006ce8
 800bde0:	20006cd8 	.word	0x20006cd8
 800bde4:	20006ccc 	.word	0x20006ccc
 800bde8:	20006cdc 	.word	0x20006cdc
 800bdec:	20006ce0 	.word	0x20006ce0

0800bdf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d04d      	beq.n	800be9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be02:	2308      	movs	r3, #8
 800be04:	425b      	negs	r3, r3
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	4413      	add	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <vPortFree+0xb8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4013      	ands	r3, r2
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10a      	bne.n	800be34 <vPortFree+0x44>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	60fb      	str	r3, [r7, #12]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <vPortFree+0x62>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	60bb      	str	r3, [r7, #8]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <vPortFree+0xb8>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01e      	beq.n	800be9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d11a      	bne.n	800be9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	4b0e      	ldr	r3, [pc, #56]	; (800bea8 <vPortFree+0xb8>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	43db      	mvns	r3, r3
 800be72:	401a      	ands	r2, r3
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be78:	f7fe fb82 	bl	800a580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	4b0a      	ldr	r3, [pc, #40]	; (800beac <vPortFree+0xbc>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4413      	add	r3, r2
 800be86:	4a09      	ldr	r2, [pc, #36]	; (800beac <vPortFree+0xbc>)
 800be88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be8a:	6938      	ldr	r0, [r7, #16]
 800be8c:	f000 f874 	bl	800bf78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be90:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <vPortFree+0xc0>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3301      	adds	r3, #1
 800be96:	4a06      	ldr	r2, [pc, #24]	; (800beb0 <vPortFree+0xc0>)
 800be98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be9a:	f7fe fb7f 	bl	800a59c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be9e:	bf00      	nop
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20006ce8 	.word	0x20006ce8
 800beac:	20006cd8 	.word	0x20006cd8
 800beb0:	20006ce4 	.word	0x20006ce4

0800beb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800beba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bec0:	4b27      	ldr	r3, [pc, #156]	; (800bf60 <prvHeapInit+0xac>)
 800bec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f003 0307 	and.w	r3, r3, #7
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00c      	beq.n	800bee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3307      	adds	r3, #7
 800bed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f023 0307 	bic.w	r3, r3, #7
 800beda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	4a1f      	ldr	r2, [pc, #124]	; (800bf60 <prvHeapInit+0xac>)
 800bee4:	4413      	add	r3, r2
 800bee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800beec:	4a1d      	ldr	r2, [pc, #116]	; (800bf64 <prvHeapInit+0xb0>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bef2:	4b1c      	ldr	r3, [pc, #112]	; (800bf64 <prvHeapInit+0xb0>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	4413      	add	r3, r2
 800befe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf00:	2208      	movs	r2, #8
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	1a9b      	subs	r3, r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f023 0307 	bic.w	r3, r3, #7
 800bf0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	4a15      	ldr	r2, [pc, #84]	; (800bf68 <prvHeapInit+0xb4>)
 800bf14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf16:	4b14      	ldr	r3, [pc, #80]	; (800bf68 <prvHeapInit+0xb4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf1e:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <prvHeapInit+0xb4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2200      	movs	r2, #0
 800bf24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf34:	4b0c      	ldr	r3, [pc, #48]	; (800bf68 <prvHeapInit+0xb4>)
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	4a0a      	ldr	r2, [pc, #40]	; (800bf6c <prvHeapInit+0xb8>)
 800bf42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	4a09      	ldr	r2, [pc, #36]	; (800bf70 <prvHeapInit+0xbc>)
 800bf4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf4c:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <prvHeapInit+0xc0>)
 800bf4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	200030cc 	.word	0x200030cc
 800bf64:	20006ccc 	.word	0x20006ccc
 800bf68:	20006cd4 	.word	0x20006cd4
 800bf6c:	20006cdc 	.word	0x20006cdc
 800bf70:	20006cd8 	.word	0x20006cd8
 800bf74:	20006ce8 	.word	0x20006ce8

0800bf78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf80:	4b28      	ldr	r3, [pc, #160]	; (800c024 <prvInsertBlockIntoFreeList+0xac>)
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	e002      	b.n	800bf8c <prvInsertBlockIntoFreeList+0x14>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d8f7      	bhi.n	800bf86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d108      	bne.n	800bfba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	441a      	add	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	441a      	add	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d118      	bne.n	800c000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <prvInsertBlockIntoFreeList+0xb0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d00d      	beq.n	800bff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	601a      	str	r2, [r3, #0]
 800bff4:	e008      	b.n	800c008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bff6:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <prvInsertBlockIntoFreeList+0xb0>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	e003      	b.n	800c008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d002      	beq.n	800c016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c016:	bf00      	nop
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	20006ccc 	.word	0x20006ccc
 800c028:	20006cd4 	.word	0x20006cd4

0800c02c <std>:
 800c02c:	2300      	movs	r3, #0
 800c02e:	b510      	push	{r4, lr}
 800c030:	4604      	mov	r4, r0
 800c032:	e9c0 3300 	strd	r3, r3, [r0]
 800c036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c03a:	6083      	str	r3, [r0, #8]
 800c03c:	8181      	strh	r1, [r0, #12]
 800c03e:	6643      	str	r3, [r0, #100]	; 0x64
 800c040:	81c2      	strh	r2, [r0, #14]
 800c042:	6183      	str	r3, [r0, #24]
 800c044:	4619      	mov	r1, r3
 800c046:	2208      	movs	r2, #8
 800c048:	305c      	adds	r0, #92	; 0x5c
 800c04a:	f000 f9ff 	bl	800c44c <memset>
 800c04e:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <std+0x58>)
 800c050:	6263      	str	r3, [r4, #36]	; 0x24
 800c052:	4b0d      	ldr	r3, [pc, #52]	; (800c088 <std+0x5c>)
 800c054:	62a3      	str	r3, [r4, #40]	; 0x28
 800c056:	4b0d      	ldr	r3, [pc, #52]	; (800c08c <std+0x60>)
 800c058:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c05a:	4b0d      	ldr	r3, [pc, #52]	; (800c090 <std+0x64>)
 800c05c:	6323      	str	r3, [r4, #48]	; 0x30
 800c05e:	4b0d      	ldr	r3, [pc, #52]	; (800c094 <std+0x68>)
 800c060:	6224      	str	r4, [r4, #32]
 800c062:	429c      	cmp	r4, r3
 800c064:	d006      	beq.n	800c074 <std+0x48>
 800c066:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c06a:	4294      	cmp	r4, r2
 800c06c:	d002      	beq.n	800c074 <std+0x48>
 800c06e:	33d0      	adds	r3, #208	; 0xd0
 800c070:	429c      	cmp	r4, r3
 800c072:	d105      	bne.n	800c080 <std+0x54>
 800c074:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c07c:	f000 ba5e 	b.w	800c53c <__retarget_lock_init_recursive>
 800c080:	bd10      	pop	{r4, pc}
 800c082:	bf00      	nop
 800c084:	0800c29d 	.word	0x0800c29d
 800c088:	0800c2bf 	.word	0x0800c2bf
 800c08c:	0800c2f7 	.word	0x0800c2f7
 800c090:	0800c31b 	.word	0x0800c31b
 800c094:	20006cec 	.word	0x20006cec

0800c098 <stdio_exit_handler>:
 800c098:	4a02      	ldr	r2, [pc, #8]	; (800c0a4 <stdio_exit_handler+0xc>)
 800c09a:	4903      	ldr	r1, [pc, #12]	; (800c0a8 <stdio_exit_handler+0x10>)
 800c09c:	4803      	ldr	r0, [pc, #12]	; (800c0ac <stdio_exit_handler+0x14>)
 800c09e:	f000 b869 	b.w	800c174 <_fwalk_sglue>
 800c0a2:	bf00      	nop
 800c0a4:	20000014 	.word	0x20000014
 800c0a8:	0800ce05 	.word	0x0800ce05
 800c0ac:	20000020 	.word	0x20000020

0800c0b0 <cleanup_stdio>:
 800c0b0:	6841      	ldr	r1, [r0, #4]
 800c0b2:	4b0c      	ldr	r3, [pc, #48]	; (800c0e4 <cleanup_stdio+0x34>)
 800c0b4:	4299      	cmp	r1, r3
 800c0b6:	b510      	push	{r4, lr}
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	d001      	beq.n	800c0c0 <cleanup_stdio+0x10>
 800c0bc:	f000 fea2 	bl	800ce04 <_fflush_r>
 800c0c0:	68a1      	ldr	r1, [r4, #8]
 800c0c2:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <cleanup_stdio+0x38>)
 800c0c4:	4299      	cmp	r1, r3
 800c0c6:	d002      	beq.n	800c0ce <cleanup_stdio+0x1e>
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f000 fe9b 	bl	800ce04 <_fflush_r>
 800c0ce:	68e1      	ldr	r1, [r4, #12]
 800c0d0:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <cleanup_stdio+0x3c>)
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	d004      	beq.n	800c0e0 <cleanup_stdio+0x30>
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0dc:	f000 be92 	b.w	800ce04 <_fflush_r>
 800c0e0:	bd10      	pop	{r4, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20006cec 	.word	0x20006cec
 800c0e8:	20006d54 	.word	0x20006d54
 800c0ec:	20006dbc 	.word	0x20006dbc

0800c0f0 <global_stdio_init.part.0>:
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <global_stdio_init.part.0+0x30>)
 800c0f4:	4c0b      	ldr	r4, [pc, #44]	; (800c124 <global_stdio_init.part.0+0x34>)
 800c0f6:	4a0c      	ldr	r2, [pc, #48]	; (800c128 <global_stdio_init.part.0+0x38>)
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2104      	movs	r1, #4
 800c100:	f7ff ff94 	bl	800c02c <std>
 800c104:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c108:	2201      	movs	r2, #1
 800c10a:	2109      	movs	r1, #9
 800c10c:	f7ff ff8e 	bl	800c02c <std>
 800c110:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c114:	2202      	movs	r2, #2
 800c116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c11a:	2112      	movs	r1, #18
 800c11c:	f7ff bf86 	b.w	800c02c <std>
 800c120:	20006e24 	.word	0x20006e24
 800c124:	20006cec 	.word	0x20006cec
 800c128:	0800c099 	.word	0x0800c099

0800c12c <__sfp_lock_acquire>:
 800c12c:	4801      	ldr	r0, [pc, #4]	; (800c134 <__sfp_lock_acquire+0x8>)
 800c12e:	f000 ba06 	b.w	800c53e <__retarget_lock_acquire_recursive>
 800c132:	bf00      	nop
 800c134:	20006e2d 	.word	0x20006e2d

0800c138 <__sfp_lock_release>:
 800c138:	4801      	ldr	r0, [pc, #4]	; (800c140 <__sfp_lock_release+0x8>)
 800c13a:	f000 ba01 	b.w	800c540 <__retarget_lock_release_recursive>
 800c13e:	bf00      	nop
 800c140:	20006e2d 	.word	0x20006e2d

0800c144 <__sinit>:
 800c144:	b510      	push	{r4, lr}
 800c146:	4604      	mov	r4, r0
 800c148:	f7ff fff0 	bl	800c12c <__sfp_lock_acquire>
 800c14c:	6a23      	ldr	r3, [r4, #32]
 800c14e:	b11b      	cbz	r3, 800c158 <__sinit+0x14>
 800c150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c154:	f7ff bff0 	b.w	800c138 <__sfp_lock_release>
 800c158:	4b04      	ldr	r3, [pc, #16]	; (800c16c <__sinit+0x28>)
 800c15a:	6223      	str	r3, [r4, #32]
 800c15c:	4b04      	ldr	r3, [pc, #16]	; (800c170 <__sinit+0x2c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f5      	bne.n	800c150 <__sinit+0xc>
 800c164:	f7ff ffc4 	bl	800c0f0 <global_stdio_init.part.0>
 800c168:	e7f2      	b.n	800c150 <__sinit+0xc>
 800c16a:	bf00      	nop
 800c16c:	0800c0b1 	.word	0x0800c0b1
 800c170:	20006e24 	.word	0x20006e24

0800c174 <_fwalk_sglue>:
 800c174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c178:	4607      	mov	r7, r0
 800c17a:	4688      	mov	r8, r1
 800c17c:	4614      	mov	r4, r2
 800c17e:	2600      	movs	r6, #0
 800c180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c184:	f1b9 0901 	subs.w	r9, r9, #1
 800c188:	d505      	bpl.n	800c196 <_fwalk_sglue+0x22>
 800c18a:	6824      	ldr	r4, [r4, #0]
 800c18c:	2c00      	cmp	r4, #0
 800c18e:	d1f7      	bne.n	800c180 <_fwalk_sglue+0xc>
 800c190:	4630      	mov	r0, r6
 800c192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c196:	89ab      	ldrh	r3, [r5, #12]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d907      	bls.n	800c1ac <_fwalk_sglue+0x38>
 800c19c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	d003      	beq.n	800c1ac <_fwalk_sglue+0x38>
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	4638      	mov	r0, r7
 800c1a8:	47c0      	blx	r8
 800c1aa:	4306      	orrs	r6, r0
 800c1ac:	3568      	adds	r5, #104	; 0x68
 800c1ae:	e7e9      	b.n	800c184 <_fwalk_sglue+0x10>

0800c1b0 <iprintf>:
 800c1b0:	b40f      	push	{r0, r1, r2, r3}
 800c1b2:	b507      	push	{r0, r1, r2, lr}
 800c1b4:	4906      	ldr	r1, [pc, #24]	; (800c1d0 <iprintf+0x20>)
 800c1b6:	ab04      	add	r3, sp, #16
 800c1b8:	6808      	ldr	r0, [r1, #0]
 800c1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1be:	6881      	ldr	r1, [r0, #8]
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	f000 faef 	bl	800c7a4 <_vfiprintf_r>
 800c1c6:	b003      	add	sp, #12
 800c1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1cc:	b004      	add	sp, #16
 800c1ce:	4770      	bx	lr
 800c1d0:	2000006c 	.word	0x2000006c

0800c1d4 <putchar>:
 800c1d4:	4b02      	ldr	r3, [pc, #8]	; (800c1e0 <putchar+0xc>)
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	6882      	ldr	r2, [r0, #8]
 800c1dc:	f000 be9c 	b.w	800cf18 <_putc_r>
 800c1e0:	2000006c 	.word	0x2000006c

0800c1e4 <_puts_r>:
 800c1e4:	6a03      	ldr	r3, [r0, #32]
 800c1e6:	b570      	push	{r4, r5, r6, lr}
 800c1e8:	6884      	ldr	r4, [r0, #8]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	460e      	mov	r6, r1
 800c1ee:	b90b      	cbnz	r3, 800c1f4 <_puts_r+0x10>
 800c1f0:	f7ff ffa8 	bl	800c144 <__sinit>
 800c1f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1f6:	07db      	lsls	r3, r3, #31
 800c1f8:	d405      	bmi.n	800c206 <_puts_r+0x22>
 800c1fa:	89a3      	ldrh	r3, [r4, #12]
 800c1fc:	0598      	lsls	r0, r3, #22
 800c1fe:	d402      	bmi.n	800c206 <_puts_r+0x22>
 800c200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c202:	f000 f99c 	bl	800c53e <__retarget_lock_acquire_recursive>
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	0719      	lsls	r1, r3, #28
 800c20a:	d513      	bpl.n	800c234 <_puts_r+0x50>
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	b18b      	cbz	r3, 800c234 <_puts_r+0x50>
 800c210:	3e01      	subs	r6, #1
 800c212:	68a3      	ldr	r3, [r4, #8]
 800c214:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c218:	3b01      	subs	r3, #1
 800c21a:	60a3      	str	r3, [r4, #8]
 800c21c:	b9e9      	cbnz	r1, 800c25a <_puts_r+0x76>
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da2e      	bge.n	800c280 <_puts_r+0x9c>
 800c222:	4622      	mov	r2, r4
 800c224:	210a      	movs	r1, #10
 800c226:	4628      	mov	r0, r5
 800c228:	f000 f87b 	bl	800c322 <__swbuf_r>
 800c22c:	3001      	adds	r0, #1
 800c22e:	d007      	beq.n	800c240 <_puts_r+0x5c>
 800c230:	250a      	movs	r5, #10
 800c232:	e007      	b.n	800c244 <_puts_r+0x60>
 800c234:	4621      	mov	r1, r4
 800c236:	4628      	mov	r0, r5
 800c238:	f000 f8b0 	bl	800c39c <__swsetup_r>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0e7      	beq.n	800c210 <_puts_r+0x2c>
 800c240:	f04f 35ff 	mov.w	r5, #4294967295
 800c244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c246:	07da      	lsls	r2, r3, #31
 800c248:	d405      	bmi.n	800c256 <_puts_r+0x72>
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	059b      	lsls	r3, r3, #22
 800c24e:	d402      	bmi.n	800c256 <_puts_r+0x72>
 800c250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c252:	f000 f975 	bl	800c540 <__retarget_lock_release_recursive>
 800c256:	4628      	mov	r0, r5
 800c258:	bd70      	pop	{r4, r5, r6, pc}
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	da04      	bge.n	800c268 <_puts_r+0x84>
 800c25e:	69a2      	ldr	r2, [r4, #24]
 800c260:	429a      	cmp	r2, r3
 800c262:	dc06      	bgt.n	800c272 <_puts_r+0x8e>
 800c264:	290a      	cmp	r1, #10
 800c266:	d004      	beq.n	800c272 <_puts_r+0x8e>
 800c268:	6823      	ldr	r3, [r4, #0]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	6022      	str	r2, [r4, #0]
 800c26e:	7019      	strb	r1, [r3, #0]
 800c270:	e7cf      	b.n	800c212 <_puts_r+0x2e>
 800c272:	4622      	mov	r2, r4
 800c274:	4628      	mov	r0, r5
 800c276:	f000 f854 	bl	800c322 <__swbuf_r>
 800c27a:	3001      	adds	r0, #1
 800c27c:	d1c9      	bne.n	800c212 <_puts_r+0x2e>
 800c27e:	e7df      	b.n	800c240 <_puts_r+0x5c>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	250a      	movs	r5, #10
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	6022      	str	r2, [r4, #0]
 800c288:	701d      	strb	r5, [r3, #0]
 800c28a:	e7db      	b.n	800c244 <_puts_r+0x60>

0800c28c <puts>:
 800c28c:	4b02      	ldr	r3, [pc, #8]	; (800c298 <puts+0xc>)
 800c28e:	4601      	mov	r1, r0
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	f7ff bfa7 	b.w	800c1e4 <_puts_r>
 800c296:	bf00      	nop
 800c298:	2000006c 	.word	0x2000006c

0800c29c <__sread>:
 800c29c:	b510      	push	{r4, lr}
 800c29e:	460c      	mov	r4, r1
 800c2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a4:	f000 f8fc 	bl	800c4a0 <_read_r>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	bfab      	itete	ge
 800c2ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ae:	89a3      	ldrhlt	r3, [r4, #12]
 800c2b0:	181b      	addge	r3, r3, r0
 800c2b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2b6:	bfac      	ite	ge
 800c2b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2ba:	81a3      	strhlt	r3, [r4, #12]
 800c2bc:	bd10      	pop	{r4, pc}

0800c2be <__swrite>:
 800c2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c2:	461f      	mov	r7, r3
 800c2c4:	898b      	ldrh	r3, [r1, #12]
 800c2c6:	05db      	lsls	r3, r3, #23
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	4616      	mov	r6, r2
 800c2ce:	d505      	bpl.n	800c2dc <__swrite+0x1e>
 800c2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f000 f8d0 	bl	800c47c <_lseek_r>
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	4632      	mov	r2, r6
 800c2ea:	463b      	mov	r3, r7
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f2:	f000 b8e7 	b.w	800c4c4 <_write_r>

0800c2f6 <__sseek>:
 800c2f6:	b510      	push	{r4, lr}
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fe:	f000 f8bd 	bl	800c47c <_lseek_r>
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	bf15      	itete	ne
 800c308:	6560      	strne	r0, [r4, #84]	; 0x54
 800c30a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c30e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c312:	81a3      	strheq	r3, [r4, #12]
 800c314:	bf18      	it	ne
 800c316:	81a3      	strhne	r3, [r4, #12]
 800c318:	bd10      	pop	{r4, pc}

0800c31a <__sclose>:
 800c31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c31e:	f000 b89d 	b.w	800c45c <_close_r>

0800c322 <__swbuf_r>:
 800c322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c324:	460e      	mov	r6, r1
 800c326:	4614      	mov	r4, r2
 800c328:	4605      	mov	r5, r0
 800c32a:	b118      	cbz	r0, 800c334 <__swbuf_r+0x12>
 800c32c:	6a03      	ldr	r3, [r0, #32]
 800c32e:	b90b      	cbnz	r3, 800c334 <__swbuf_r+0x12>
 800c330:	f7ff ff08 	bl	800c144 <__sinit>
 800c334:	69a3      	ldr	r3, [r4, #24]
 800c336:	60a3      	str	r3, [r4, #8]
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	071a      	lsls	r2, r3, #28
 800c33c:	d525      	bpl.n	800c38a <__swbuf_r+0x68>
 800c33e:	6923      	ldr	r3, [r4, #16]
 800c340:	b31b      	cbz	r3, 800c38a <__swbuf_r+0x68>
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	6922      	ldr	r2, [r4, #16]
 800c346:	1a98      	subs	r0, r3, r2
 800c348:	6963      	ldr	r3, [r4, #20]
 800c34a:	b2f6      	uxtb	r6, r6
 800c34c:	4283      	cmp	r3, r0
 800c34e:	4637      	mov	r7, r6
 800c350:	dc04      	bgt.n	800c35c <__swbuf_r+0x3a>
 800c352:	4621      	mov	r1, r4
 800c354:	4628      	mov	r0, r5
 800c356:	f000 fd55 	bl	800ce04 <_fflush_r>
 800c35a:	b9e0      	cbnz	r0, 800c396 <__swbuf_r+0x74>
 800c35c:	68a3      	ldr	r3, [r4, #8]
 800c35e:	3b01      	subs	r3, #1
 800c360:	60a3      	str	r3, [r4, #8]
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	1c5a      	adds	r2, r3, #1
 800c366:	6022      	str	r2, [r4, #0]
 800c368:	701e      	strb	r6, [r3, #0]
 800c36a:	6962      	ldr	r2, [r4, #20]
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	429a      	cmp	r2, r3
 800c370:	d004      	beq.n	800c37c <__swbuf_r+0x5a>
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	07db      	lsls	r3, r3, #31
 800c376:	d506      	bpl.n	800c386 <__swbuf_r+0x64>
 800c378:	2e0a      	cmp	r6, #10
 800c37a:	d104      	bne.n	800c386 <__swbuf_r+0x64>
 800c37c:	4621      	mov	r1, r4
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 fd40 	bl	800ce04 <_fflush_r>
 800c384:	b938      	cbnz	r0, 800c396 <__swbuf_r+0x74>
 800c386:	4638      	mov	r0, r7
 800c388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38a:	4621      	mov	r1, r4
 800c38c:	4628      	mov	r0, r5
 800c38e:	f000 f805 	bl	800c39c <__swsetup_r>
 800c392:	2800      	cmp	r0, #0
 800c394:	d0d5      	beq.n	800c342 <__swbuf_r+0x20>
 800c396:	f04f 37ff 	mov.w	r7, #4294967295
 800c39a:	e7f4      	b.n	800c386 <__swbuf_r+0x64>

0800c39c <__swsetup_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4b2a      	ldr	r3, [pc, #168]	; (800c448 <__swsetup_r+0xac>)
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	b118      	cbz	r0, 800c3b0 <__swsetup_r+0x14>
 800c3a8:	6a03      	ldr	r3, [r0, #32]
 800c3aa:	b90b      	cbnz	r3, 800c3b0 <__swsetup_r+0x14>
 800c3ac:	f7ff feca 	bl	800c144 <__sinit>
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3b6:	0718      	lsls	r0, r3, #28
 800c3b8:	d422      	bmi.n	800c400 <__swsetup_r+0x64>
 800c3ba:	06d9      	lsls	r1, r3, #27
 800c3bc:	d407      	bmi.n	800c3ce <__swsetup_r+0x32>
 800c3be:	2309      	movs	r3, #9
 800c3c0:	602b      	str	r3, [r5, #0]
 800c3c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3cc:	e034      	b.n	800c438 <__swsetup_r+0x9c>
 800c3ce:	0758      	lsls	r0, r3, #29
 800c3d0:	d512      	bpl.n	800c3f8 <__swsetup_r+0x5c>
 800c3d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3d4:	b141      	cbz	r1, 800c3e8 <__swsetup_r+0x4c>
 800c3d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3da:	4299      	cmp	r1, r3
 800c3dc:	d002      	beq.n	800c3e4 <__swsetup_r+0x48>
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f000 f8be 	bl	800c560 <_free_r>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	6363      	str	r3, [r4, #52]	; 0x34
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3ee:	81a3      	strh	r3, [r4, #12]
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	6063      	str	r3, [r4, #4]
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	6023      	str	r3, [r4, #0]
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f043 0308 	orr.w	r3, r3, #8
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	6923      	ldr	r3, [r4, #16]
 800c402:	b94b      	cbnz	r3, 800c418 <__swsetup_r+0x7c>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c40e:	d003      	beq.n	800c418 <__swsetup_r+0x7c>
 800c410:	4621      	mov	r1, r4
 800c412:	4628      	mov	r0, r5
 800c414:	f000 fd44 	bl	800cea0 <__smakebuf_r>
 800c418:	89a0      	ldrh	r0, [r4, #12]
 800c41a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c41e:	f010 0301 	ands.w	r3, r0, #1
 800c422:	d00a      	beq.n	800c43a <__swsetup_r+0x9e>
 800c424:	2300      	movs	r3, #0
 800c426:	60a3      	str	r3, [r4, #8]
 800c428:	6963      	ldr	r3, [r4, #20]
 800c42a:	425b      	negs	r3, r3
 800c42c:	61a3      	str	r3, [r4, #24]
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	b943      	cbnz	r3, 800c444 <__swsetup_r+0xa8>
 800c432:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c436:	d1c4      	bne.n	800c3c2 <__swsetup_r+0x26>
 800c438:	bd38      	pop	{r3, r4, r5, pc}
 800c43a:	0781      	lsls	r1, r0, #30
 800c43c:	bf58      	it	pl
 800c43e:	6963      	ldrpl	r3, [r4, #20]
 800c440:	60a3      	str	r3, [r4, #8]
 800c442:	e7f4      	b.n	800c42e <__swsetup_r+0x92>
 800c444:	2000      	movs	r0, #0
 800c446:	e7f7      	b.n	800c438 <__swsetup_r+0x9c>
 800c448:	2000006c 	.word	0x2000006c

0800c44c <memset>:
 800c44c:	4402      	add	r2, r0
 800c44e:	4603      	mov	r3, r0
 800c450:	4293      	cmp	r3, r2
 800c452:	d100      	bne.n	800c456 <memset+0xa>
 800c454:	4770      	bx	lr
 800c456:	f803 1b01 	strb.w	r1, [r3], #1
 800c45a:	e7f9      	b.n	800c450 <memset+0x4>

0800c45c <_close_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4d06      	ldr	r5, [pc, #24]	; (800c478 <_close_r+0x1c>)
 800c460:	2300      	movs	r3, #0
 800c462:	4604      	mov	r4, r0
 800c464:	4608      	mov	r0, r1
 800c466:	602b      	str	r3, [r5, #0]
 800c468:	f7f4 fb93 	bl	8000b92 <_close>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d102      	bne.n	800c476 <_close_r+0x1a>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	b103      	cbz	r3, 800c476 <_close_r+0x1a>
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	20006e28 	.word	0x20006e28

0800c47c <_lseek_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4d07      	ldr	r5, [pc, #28]	; (800c49c <_lseek_r+0x20>)
 800c480:	4604      	mov	r4, r0
 800c482:	4608      	mov	r0, r1
 800c484:	4611      	mov	r1, r2
 800c486:	2200      	movs	r2, #0
 800c488:	602a      	str	r2, [r5, #0]
 800c48a:	461a      	mov	r2, r3
 800c48c:	f7f4 fba8 	bl	8000be0 <_lseek>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d102      	bne.n	800c49a <_lseek_r+0x1e>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	b103      	cbz	r3, 800c49a <_lseek_r+0x1e>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	20006e28 	.word	0x20006e28

0800c4a0 <_read_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4d07      	ldr	r5, [pc, #28]	; (800c4c0 <_read_r+0x20>)
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	4608      	mov	r0, r1
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	602a      	str	r2, [r5, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	f7f4 fb52 	bl	8000b58 <_read>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_read_r+0x1e>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_read_r+0x1e>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20006e28 	.word	0x20006e28

0800c4c4 <_write_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d07      	ldr	r5, [pc, #28]	; (800c4e4 <_write_r+0x20>)
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	4608      	mov	r0, r1
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	602a      	str	r2, [r5, #0]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f7f4 f938 	bl	8000748 <_write>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	d102      	bne.n	800c4e2 <_write_r+0x1e>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	b103      	cbz	r3, 800c4e2 <_write_r+0x1e>
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	bd38      	pop	{r3, r4, r5, pc}
 800c4e4:	20006e28 	.word	0x20006e28

0800c4e8 <__errno>:
 800c4e8:	4b01      	ldr	r3, [pc, #4]	; (800c4f0 <__errno+0x8>)
 800c4ea:	6818      	ldr	r0, [r3, #0]
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	2000006c 	.word	0x2000006c

0800c4f4 <__libc_init_array>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	4d0d      	ldr	r5, [pc, #52]	; (800c52c <__libc_init_array+0x38>)
 800c4f8:	4c0d      	ldr	r4, [pc, #52]	; (800c530 <__libc_init_array+0x3c>)
 800c4fa:	1b64      	subs	r4, r4, r5
 800c4fc:	10a4      	asrs	r4, r4, #2
 800c4fe:	2600      	movs	r6, #0
 800c500:	42a6      	cmp	r6, r4
 800c502:	d109      	bne.n	800c518 <__libc_init_array+0x24>
 800c504:	4d0b      	ldr	r5, [pc, #44]	; (800c534 <__libc_init_array+0x40>)
 800c506:	4c0c      	ldr	r4, [pc, #48]	; (800c538 <__libc_init_array+0x44>)
 800c508:	f000 fd6c 	bl	800cfe4 <_init>
 800c50c:	1b64      	subs	r4, r4, r5
 800c50e:	10a4      	asrs	r4, r4, #2
 800c510:	2600      	movs	r6, #0
 800c512:	42a6      	cmp	r6, r4
 800c514:	d105      	bne.n	800c522 <__libc_init_array+0x2e>
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	f855 3b04 	ldr.w	r3, [r5], #4
 800c51c:	4798      	blx	r3
 800c51e:	3601      	adds	r6, #1
 800c520:	e7ee      	b.n	800c500 <__libc_init_array+0xc>
 800c522:	f855 3b04 	ldr.w	r3, [r5], #4
 800c526:	4798      	blx	r3
 800c528:	3601      	adds	r6, #1
 800c52a:	e7f2      	b.n	800c512 <__libc_init_array+0x1e>
 800c52c:	0800d99c 	.word	0x0800d99c
 800c530:	0800d99c 	.word	0x0800d99c
 800c534:	0800d99c 	.word	0x0800d99c
 800c538:	0800d9a0 	.word	0x0800d9a0

0800c53c <__retarget_lock_init_recursive>:
 800c53c:	4770      	bx	lr

0800c53e <__retarget_lock_acquire_recursive>:
 800c53e:	4770      	bx	lr

0800c540 <__retarget_lock_release_recursive>:
 800c540:	4770      	bx	lr

0800c542 <memcpy>:
 800c542:	440a      	add	r2, r1
 800c544:	4291      	cmp	r1, r2
 800c546:	f100 33ff 	add.w	r3, r0, #4294967295
 800c54a:	d100      	bne.n	800c54e <memcpy+0xc>
 800c54c:	4770      	bx	lr
 800c54e:	b510      	push	{r4, lr}
 800c550:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c554:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c558:	4291      	cmp	r1, r2
 800c55a:	d1f9      	bne.n	800c550 <memcpy+0xe>
 800c55c:	bd10      	pop	{r4, pc}
	...

0800c560 <_free_r>:
 800c560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c562:	2900      	cmp	r1, #0
 800c564:	d044      	beq.n	800c5f0 <_free_r+0x90>
 800c566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c56a:	9001      	str	r0, [sp, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f1a1 0404 	sub.w	r4, r1, #4
 800c572:	bfb8      	it	lt
 800c574:	18e4      	addlt	r4, r4, r3
 800c576:	f000 f8df 	bl	800c738 <__malloc_lock>
 800c57a:	4a1e      	ldr	r2, [pc, #120]	; (800c5f4 <_free_r+0x94>)
 800c57c:	9801      	ldr	r0, [sp, #4]
 800c57e:	6813      	ldr	r3, [r2, #0]
 800c580:	b933      	cbnz	r3, 800c590 <_free_r+0x30>
 800c582:	6063      	str	r3, [r4, #4]
 800c584:	6014      	str	r4, [r2, #0]
 800c586:	b003      	add	sp, #12
 800c588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c58c:	f000 b8da 	b.w	800c744 <__malloc_unlock>
 800c590:	42a3      	cmp	r3, r4
 800c592:	d908      	bls.n	800c5a6 <_free_r+0x46>
 800c594:	6825      	ldr	r5, [r4, #0]
 800c596:	1961      	adds	r1, r4, r5
 800c598:	428b      	cmp	r3, r1
 800c59a:	bf01      	itttt	eq
 800c59c:	6819      	ldreq	r1, [r3, #0]
 800c59e:	685b      	ldreq	r3, [r3, #4]
 800c5a0:	1949      	addeq	r1, r1, r5
 800c5a2:	6021      	streq	r1, [r4, #0]
 800c5a4:	e7ed      	b.n	800c582 <_free_r+0x22>
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	b10b      	cbz	r3, 800c5b0 <_free_r+0x50>
 800c5ac:	42a3      	cmp	r3, r4
 800c5ae:	d9fa      	bls.n	800c5a6 <_free_r+0x46>
 800c5b0:	6811      	ldr	r1, [r2, #0]
 800c5b2:	1855      	adds	r5, r2, r1
 800c5b4:	42a5      	cmp	r5, r4
 800c5b6:	d10b      	bne.n	800c5d0 <_free_r+0x70>
 800c5b8:	6824      	ldr	r4, [r4, #0]
 800c5ba:	4421      	add	r1, r4
 800c5bc:	1854      	adds	r4, r2, r1
 800c5be:	42a3      	cmp	r3, r4
 800c5c0:	6011      	str	r1, [r2, #0]
 800c5c2:	d1e0      	bne.n	800c586 <_free_r+0x26>
 800c5c4:	681c      	ldr	r4, [r3, #0]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	6053      	str	r3, [r2, #4]
 800c5ca:	440c      	add	r4, r1
 800c5cc:	6014      	str	r4, [r2, #0]
 800c5ce:	e7da      	b.n	800c586 <_free_r+0x26>
 800c5d0:	d902      	bls.n	800c5d8 <_free_r+0x78>
 800c5d2:	230c      	movs	r3, #12
 800c5d4:	6003      	str	r3, [r0, #0]
 800c5d6:	e7d6      	b.n	800c586 <_free_r+0x26>
 800c5d8:	6825      	ldr	r5, [r4, #0]
 800c5da:	1961      	adds	r1, r4, r5
 800c5dc:	428b      	cmp	r3, r1
 800c5de:	bf04      	itt	eq
 800c5e0:	6819      	ldreq	r1, [r3, #0]
 800c5e2:	685b      	ldreq	r3, [r3, #4]
 800c5e4:	6063      	str	r3, [r4, #4]
 800c5e6:	bf04      	itt	eq
 800c5e8:	1949      	addeq	r1, r1, r5
 800c5ea:	6021      	streq	r1, [r4, #0]
 800c5ec:	6054      	str	r4, [r2, #4]
 800c5ee:	e7ca      	b.n	800c586 <_free_r+0x26>
 800c5f0:	b003      	add	sp, #12
 800c5f2:	bd30      	pop	{r4, r5, pc}
 800c5f4:	20006e30 	.word	0x20006e30

0800c5f8 <sbrk_aligned>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	4e0e      	ldr	r6, [pc, #56]	; (800c634 <sbrk_aligned+0x3c>)
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	6831      	ldr	r1, [r6, #0]
 800c600:	4605      	mov	r5, r0
 800c602:	b911      	cbnz	r1, 800c60a <sbrk_aligned+0x12>
 800c604:	f000 fcde 	bl	800cfc4 <_sbrk_r>
 800c608:	6030      	str	r0, [r6, #0]
 800c60a:	4621      	mov	r1, r4
 800c60c:	4628      	mov	r0, r5
 800c60e:	f000 fcd9 	bl	800cfc4 <_sbrk_r>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	d00a      	beq.n	800c62c <sbrk_aligned+0x34>
 800c616:	1cc4      	adds	r4, r0, #3
 800c618:	f024 0403 	bic.w	r4, r4, #3
 800c61c:	42a0      	cmp	r0, r4
 800c61e:	d007      	beq.n	800c630 <sbrk_aligned+0x38>
 800c620:	1a21      	subs	r1, r4, r0
 800c622:	4628      	mov	r0, r5
 800c624:	f000 fcce 	bl	800cfc4 <_sbrk_r>
 800c628:	3001      	adds	r0, #1
 800c62a:	d101      	bne.n	800c630 <sbrk_aligned+0x38>
 800c62c:	f04f 34ff 	mov.w	r4, #4294967295
 800c630:	4620      	mov	r0, r4
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	20006e34 	.word	0x20006e34

0800c638 <_malloc_r>:
 800c638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c63c:	1ccd      	adds	r5, r1, #3
 800c63e:	f025 0503 	bic.w	r5, r5, #3
 800c642:	3508      	adds	r5, #8
 800c644:	2d0c      	cmp	r5, #12
 800c646:	bf38      	it	cc
 800c648:	250c      	movcc	r5, #12
 800c64a:	2d00      	cmp	r5, #0
 800c64c:	4607      	mov	r7, r0
 800c64e:	db01      	blt.n	800c654 <_malloc_r+0x1c>
 800c650:	42a9      	cmp	r1, r5
 800c652:	d905      	bls.n	800c660 <_malloc_r+0x28>
 800c654:	230c      	movs	r3, #12
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	2600      	movs	r6, #0
 800c65a:	4630      	mov	r0, r6
 800c65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c734 <_malloc_r+0xfc>
 800c664:	f000 f868 	bl	800c738 <__malloc_lock>
 800c668:	f8d8 3000 	ldr.w	r3, [r8]
 800c66c:	461c      	mov	r4, r3
 800c66e:	bb5c      	cbnz	r4, 800c6c8 <_malloc_r+0x90>
 800c670:	4629      	mov	r1, r5
 800c672:	4638      	mov	r0, r7
 800c674:	f7ff ffc0 	bl	800c5f8 <sbrk_aligned>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	4604      	mov	r4, r0
 800c67c:	d155      	bne.n	800c72a <_malloc_r+0xf2>
 800c67e:	f8d8 4000 	ldr.w	r4, [r8]
 800c682:	4626      	mov	r6, r4
 800c684:	2e00      	cmp	r6, #0
 800c686:	d145      	bne.n	800c714 <_malloc_r+0xdc>
 800c688:	2c00      	cmp	r4, #0
 800c68a:	d048      	beq.n	800c71e <_malloc_r+0xe6>
 800c68c:	6823      	ldr	r3, [r4, #0]
 800c68e:	4631      	mov	r1, r6
 800c690:	4638      	mov	r0, r7
 800c692:	eb04 0903 	add.w	r9, r4, r3
 800c696:	f000 fc95 	bl	800cfc4 <_sbrk_r>
 800c69a:	4581      	cmp	r9, r0
 800c69c:	d13f      	bne.n	800c71e <_malloc_r+0xe6>
 800c69e:	6821      	ldr	r1, [r4, #0]
 800c6a0:	1a6d      	subs	r5, r5, r1
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	f7ff ffa7 	bl	800c5f8 <sbrk_aligned>
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d037      	beq.n	800c71e <_malloc_r+0xe6>
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	442b      	add	r3, r5
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d038      	beq.n	800c72e <_malloc_r+0xf6>
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	42a2      	cmp	r2, r4
 800c6c0:	d12b      	bne.n	800c71a <_malloc_r+0xe2>
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	605a      	str	r2, [r3, #4]
 800c6c6:	e00f      	b.n	800c6e8 <_malloc_r+0xb0>
 800c6c8:	6822      	ldr	r2, [r4, #0]
 800c6ca:	1b52      	subs	r2, r2, r5
 800c6cc:	d41f      	bmi.n	800c70e <_malloc_r+0xd6>
 800c6ce:	2a0b      	cmp	r2, #11
 800c6d0:	d917      	bls.n	800c702 <_malloc_r+0xca>
 800c6d2:	1961      	adds	r1, r4, r5
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	6025      	str	r5, [r4, #0]
 800c6d8:	bf18      	it	ne
 800c6da:	6059      	strne	r1, [r3, #4]
 800c6dc:	6863      	ldr	r3, [r4, #4]
 800c6de:	bf08      	it	eq
 800c6e0:	f8c8 1000 	streq.w	r1, [r8]
 800c6e4:	5162      	str	r2, [r4, r5]
 800c6e6:	604b      	str	r3, [r1, #4]
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f104 060b 	add.w	r6, r4, #11
 800c6ee:	f000 f829 	bl	800c744 <__malloc_unlock>
 800c6f2:	f026 0607 	bic.w	r6, r6, #7
 800c6f6:	1d23      	adds	r3, r4, #4
 800c6f8:	1af2      	subs	r2, r6, r3
 800c6fa:	d0ae      	beq.n	800c65a <_malloc_r+0x22>
 800c6fc:	1b9b      	subs	r3, r3, r6
 800c6fe:	50a3      	str	r3, [r4, r2]
 800c700:	e7ab      	b.n	800c65a <_malloc_r+0x22>
 800c702:	42a3      	cmp	r3, r4
 800c704:	6862      	ldr	r2, [r4, #4]
 800c706:	d1dd      	bne.n	800c6c4 <_malloc_r+0x8c>
 800c708:	f8c8 2000 	str.w	r2, [r8]
 800c70c:	e7ec      	b.n	800c6e8 <_malloc_r+0xb0>
 800c70e:	4623      	mov	r3, r4
 800c710:	6864      	ldr	r4, [r4, #4]
 800c712:	e7ac      	b.n	800c66e <_malloc_r+0x36>
 800c714:	4634      	mov	r4, r6
 800c716:	6876      	ldr	r6, [r6, #4]
 800c718:	e7b4      	b.n	800c684 <_malloc_r+0x4c>
 800c71a:	4613      	mov	r3, r2
 800c71c:	e7cc      	b.n	800c6b8 <_malloc_r+0x80>
 800c71e:	230c      	movs	r3, #12
 800c720:	603b      	str	r3, [r7, #0]
 800c722:	4638      	mov	r0, r7
 800c724:	f000 f80e 	bl	800c744 <__malloc_unlock>
 800c728:	e797      	b.n	800c65a <_malloc_r+0x22>
 800c72a:	6025      	str	r5, [r4, #0]
 800c72c:	e7dc      	b.n	800c6e8 <_malloc_r+0xb0>
 800c72e:	605b      	str	r3, [r3, #4]
 800c730:	deff      	udf	#255	; 0xff
 800c732:	bf00      	nop
 800c734:	20006e30 	.word	0x20006e30

0800c738 <__malloc_lock>:
 800c738:	4801      	ldr	r0, [pc, #4]	; (800c740 <__malloc_lock+0x8>)
 800c73a:	f7ff bf00 	b.w	800c53e <__retarget_lock_acquire_recursive>
 800c73e:	bf00      	nop
 800c740:	20006e2c 	.word	0x20006e2c

0800c744 <__malloc_unlock>:
 800c744:	4801      	ldr	r0, [pc, #4]	; (800c74c <__malloc_unlock+0x8>)
 800c746:	f7ff befb 	b.w	800c540 <__retarget_lock_release_recursive>
 800c74a:	bf00      	nop
 800c74c:	20006e2c 	.word	0x20006e2c

0800c750 <__sfputc_r>:
 800c750:	6893      	ldr	r3, [r2, #8]
 800c752:	3b01      	subs	r3, #1
 800c754:	2b00      	cmp	r3, #0
 800c756:	b410      	push	{r4}
 800c758:	6093      	str	r3, [r2, #8]
 800c75a:	da08      	bge.n	800c76e <__sfputc_r+0x1e>
 800c75c:	6994      	ldr	r4, [r2, #24]
 800c75e:	42a3      	cmp	r3, r4
 800c760:	db01      	blt.n	800c766 <__sfputc_r+0x16>
 800c762:	290a      	cmp	r1, #10
 800c764:	d103      	bne.n	800c76e <__sfputc_r+0x1e>
 800c766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c76a:	f7ff bdda 	b.w	800c322 <__swbuf_r>
 800c76e:	6813      	ldr	r3, [r2, #0]
 800c770:	1c58      	adds	r0, r3, #1
 800c772:	6010      	str	r0, [r2, #0]
 800c774:	7019      	strb	r1, [r3, #0]
 800c776:	4608      	mov	r0, r1
 800c778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <__sfputs_r>:
 800c77e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c780:	4606      	mov	r6, r0
 800c782:	460f      	mov	r7, r1
 800c784:	4614      	mov	r4, r2
 800c786:	18d5      	adds	r5, r2, r3
 800c788:	42ac      	cmp	r4, r5
 800c78a:	d101      	bne.n	800c790 <__sfputs_r+0x12>
 800c78c:	2000      	movs	r0, #0
 800c78e:	e007      	b.n	800c7a0 <__sfputs_r+0x22>
 800c790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c794:	463a      	mov	r2, r7
 800c796:	4630      	mov	r0, r6
 800c798:	f7ff ffda 	bl	800c750 <__sfputc_r>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	d1f3      	bne.n	800c788 <__sfputs_r+0xa>
 800c7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7a4 <_vfiprintf_r>:
 800c7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a8:	460d      	mov	r5, r1
 800c7aa:	b09d      	sub	sp, #116	; 0x74
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	4698      	mov	r8, r3
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	b118      	cbz	r0, 800c7bc <_vfiprintf_r+0x18>
 800c7b4:	6a03      	ldr	r3, [r0, #32]
 800c7b6:	b90b      	cbnz	r3, 800c7bc <_vfiprintf_r+0x18>
 800c7b8:	f7ff fcc4 	bl	800c144 <__sinit>
 800c7bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7be:	07d9      	lsls	r1, r3, #31
 800c7c0:	d405      	bmi.n	800c7ce <_vfiprintf_r+0x2a>
 800c7c2:	89ab      	ldrh	r3, [r5, #12]
 800c7c4:	059a      	lsls	r2, r3, #22
 800c7c6:	d402      	bmi.n	800c7ce <_vfiprintf_r+0x2a>
 800c7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ca:	f7ff feb8 	bl	800c53e <__retarget_lock_acquire_recursive>
 800c7ce:	89ab      	ldrh	r3, [r5, #12]
 800c7d0:	071b      	lsls	r3, r3, #28
 800c7d2:	d501      	bpl.n	800c7d8 <_vfiprintf_r+0x34>
 800c7d4:	692b      	ldr	r3, [r5, #16]
 800c7d6:	b99b      	cbnz	r3, 800c800 <_vfiprintf_r+0x5c>
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f7ff fdde 	bl	800c39c <__swsetup_r>
 800c7e0:	b170      	cbz	r0, 800c800 <_vfiprintf_r+0x5c>
 800c7e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7e4:	07dc      	lsls	r4, r3, #31
 800c7e6:	d504      	bpl.n	800c7f2 <_vfiprintf_r+0x4e>
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	b01d      	add	sp, #116	; 0x74
 800c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f2:	89ab      	ldrh	r3, [r5, #12]
 800c7f4:	0598      	lsls	r0, r3, #22
 800c7f6:	d4f7      	bmi.n	800c7e8 <_vfiprintf_r+0x44>
 800c7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7fa:	f7ff fea1 	bl	800c540 <__retarget_lock_release_recursive>
 800c7fe:	e7f3      	b.n	800c7e8 <_vfiprintf_r+0x44>
 800c800:	2300      	movs	r3, #0
 800c802:	9309      	str	r3, [sp, #36]	; 0x24
 800c804:	2320      	movs	r3, #32
 800c806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c80a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c80e:	2330      	movs	r3, #48	; 0x30
 800c810:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c9c4 <_vfiprintf_r+0x220>
 800c814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c818:	f04f 0901 	mov.w	r9, #1
 800c81c:	4623      	mov	r3, r4
 800c81e:	469a      	mov	sl, r3
 800c820:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c824:	b10a      	cbz	r2, 800c82a <_vfiprintf_r+0x86>
 800c826:	2a25      	cmp	r2, #37	; 0x25
 800c828:	d1f9      	bne.n	800c81e <_vfiprintf_r+0x7a>
 800c82a:	ebba 0b04 	subs.w	fp, sl, r4
 800c82e:	d00b      	beq.n	800c848 <_vfiprintf_r+0xa4>
 800c830:	465b      	mov	r3, fp
 800c832:	4622      	mov	r2, r4
 800c834:	4629      	mov	r1, r5
 800c836:	4630      	mov	r0, r6
 800c838:	f7ff ffa1 	bl	800c77e <__sfputs_r>
 800c83c:	3001      	adds	r0, #1
 800c83e:	f000 80a9 	beq.w	800c994 <_vfiprintf_r+0x1f0>
 800c842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c844:	445a      	add	r2, fp
 800c846:	9209      	str	r2, [sp, #36]	; 0x24
 800c848:	f89a 3000 	ldrb.w	r3, [sl]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f000 80a1 	beq.w	800c994 <_vfiprintf_r+0x1f0>
 800c852:	2300      	movs	r3, #0
 800c854:	f04f 32ff 	mov.w	r2, #4294967295
 800c858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c85c:	f10a 0a01 	add.w	sl, sl, #1
 800c860:	9304      	str	r3, [sp, #16]
 800c862:	9307      	str	r3, [sp, #28]
 800c864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c868:	931a      	str	r3, [sp, #104]	; 0x68
 800c86a:	4654      	mov	r4, sl
 800c86c:	2205      	movs	r2, #5
 800c86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c872:	4854      	ldr	r0, [pc, #336]	; (800c9c4 <_vfiprintf_r+0x220>)
 800c874:	f7f3 fcb4 	bl	80001e0 <memchr>
 800c878:	9a04      	ldr	r2, [sp, #16]
 800c87a:	b9d8      	cbnz	r0, 800c8b4 <_vfiprintf_r+0x110>
 800c87c:	06d1      	lsls	r1, r2, #27
 800c87e:	bf44      	itt	mi
 800c880:	2320      	movmi	r3, #32
 800c882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c886:	0713      	lsls	r3, r2, #28
 800c888:	bf44      	itt	mi
 800c88a:	232b      	movmi	r3, #43	; 0x2b
 800c88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c890:	f89a 3000 	ldrb.w	r3, [sl]
 800c894:	2b2a      	cmp	r3, #42	; 0x2a
 800c896:	d015      	beq.n	800c8c4 <_vfiprintf_r+0x120>
 800c898:	9a07      	ldr	r2, [sp, #28]
 800c89a:	4654      	mov	r4, sl
 800c89c:	2000      	movs	r0, #0
 800c89e:	f04f 0c0a 	mov.w	ip, #10
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8a8:	3b30      	subs	r3, #48	; 0x30
 800c8aa:	2b09      	cmp	r3, #9
 800c8ac:	d94d      	bls.n	800c94a <_vfiprintf_r+0x1a6>
 800c8ae:	b1b0      	cbz	r0, 800c8de <_vfiprintf_r+0x13a>
 800c8b0:	9207      	str	r2, [sp, #28]
 800c8b2:	e014      	b.n	800c8de <_vfiprintf_r+0x13a>
 800c8b4:	eba0 0308 	sub.w	r3, r0, r8
 800c8b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	9304      	str	r3, [sp, #16]
 800c8c0:	46a2      	mov	sl, r4
 800c8c2:	e7d2      	b.n	800c86a <_vfiprintf_r+0xc6>
 800c8c4:	9b03      	ldr	r3, [sp, #12]
 800c8c6:	1d19      	adds	r1, r3, #4
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	9103      	str	r1, [sp, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	bfbb      	ittet	lt
 800c8d0:	425b      	neglt	r3, r3
 800c8d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d6:	9307      	strge	r3, [sp, #28]
 800c8d8:	9307      	strlt	r3, [sp, #28]
 800c8da:	bfb8      	it	lt
 800c8dc:	9204      	strlt	r2, [sp, #16]
 800c8de:	7823      	ldrb	r3, [r4, #0]
 800c8e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c8e2:	d10c      	bne.n	800c8fe <_vfiprintf_r+0x15a>
 800c8e4:	7863      	ldrb	r3, [r4, #1]
 800c8e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8e8:	d134      	bne.n	800c954 <_vfiprintf_r+0x1b0>
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	1d1a      	adds	r2, r3, #4
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	9203      	str	r2, [sp, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	bfb8      	it	lt
 800c8f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8fa:	3402      	adds	r4, #2
 800c8fc:	9305      	str	r3, [sp, #20]
 800c8fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c9d4 <_vfiprintf_r+0x230>
 800c902:	7821      	ldrb	r1, [r4, #0]
 800c904:	2203      	movs	r2, #3
 800c906:	4650      	mov	r0, sl
 800c908:	f7f3 fc6a 	bl	80001e0 <memchr>
 800c90c:	b138      	cbz	r0, 800c91e <_vfiprintf_r+0x17a>
 800c90e:	9b04      	ldr	r3, [sp, #16]
 800c910:	eba0 000a 	sub.w	r0, r0, sl
 800c914:	2240      	movs	r2, #64	; 0x40
 800c916:	4082      	lsls	r2, r0
 800c918:	4313      	orrs	r3, r2
 800c91a:	3401      	adds	r4, #1
 800c91c:	9304      	str	r3, [sp, #16]
 800c91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c922:	4829      	ldr	r0, [pc, #164]	; (800c9c8 <_vfiprintf_r+0x224>)
 800c924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c928:	2206      	movs	r2, #6
 800c92a:	f7f3 fc59 	bl	80001e0 <memchr>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d03f      	beq.n	800c9b2 <_vfiprintf_r+0x20e>
 800c932:	4b26      	ldr	r3, [pc, #152]	; (800c9cc <_vfiprintf_r+0x228>)
 800c934:	bb1b      	cbnz	r3, 800c97e <_vfiprintf_r+0x1da>
 800c936:	9b03      	ldr	r3, [sp, #12]
 800c938:	3307      	adds	r3, #7
 800c93a:	f023 0307 	bic.w	r3, r3, #7
 800c93e:	3308      	adds	r3, #8
 800c940:	9303      	str	r3, [sp, #12]
 800c942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c944:	443b      	add	r3, r7
 800c946:	9309      	str	r3, [sp, #36]	; 0x24
 800c948:	e768      	b.n	800c81c <_vfiprintf_r+0x78>
 800c94a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c94e:	460c      	mov	r4, r1
 800c950:	2001      	movs	r0, #1
 800c952:	e7a6      	b.n	800c8a2 <_vfiprintf_r+0xfe>
 800c954:	2300      	movs	r3, #0
 800c956:	3401      	adds	r4, #1
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	4619      	mov	r1, r3
 800c95c:	f04f 0c0a 	mov.w	ip, #10
 800c960:	4620      	mov	r0, r4
 800c962:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c966:	3a30      	subs	r2, #48	; 0x30
 800c968:	2a09      	cmp	r2, #9
 800c96a:	d903      	bls.n	800c974 <_vfiprintf_r+0x1d0>
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0c6      	beq.n	800c8fe <_vfiprintf_r+0x15a>
 800c970:	9105      	str	r1, [sp, #20]
 800c972:	e7c4      	b.n	800c8fe <_vfiprintf_r+0x15a>
 800c974:	fb0c 2101 	mla	r1, ip, r1, r2
 800c978:	4604      	mov	r4, r0
 800c97a:	2301      	movs	r3, #1
 800c97c:	e7f0      	b.n	800c960 <_vfiprintf_r+0x1bc>
 800c97e:	ab03      	add	r3, sp, #12
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	462a      	mov	r2, r5
 800c984:	4b12      	ldr	r3, [pc, #72]	; (800c9d0 <_vfiprintf_r+0x22c>)
 800c986:	a904      	add	r1, sp, #16
 800c988:	4630      	mov	r0, r6
 800c98a:	f3af 8000 	nop.w
 800c98e:	4607      	mov	r7, r0
 800c990:	1c78      	adds	r0, r7, #1
 800c992:	d1d6      	bne.n	800c942 <_vfiprintf_r+0x19e>
 800c994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c996:	07d9      	lsls	r1, r3, #31
 800c998:	d405      	bmi.n	800c9a6 <_vfiprintf_r+0x202>
 800c99a:	89ab      	ldrh	r3, [r5, #12]
 800c99c:	059a      	lsls	r2, r3, #22
 800c99e:	d402      	bmi.n	800c9a6 <_vfiprintf_r+0x202>
 800c9a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9a2:	f7ff fdcd 	bl	800c540 <__retarget_lock_release_recursive>
 800c9a6:	89ab      	ldrh	r3, [r5, #12]
 800c9a8:	065b      	lsls	r3, r3, #25
 800c9aa:	f53f af1d 	bmi.w	800c7e8 <_vfiprintf_r+0x44>
 800c9ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9b0:	e71c      	b.n	800c7ec <_vfiprintf_r+0x48>
 800c9b2:	ab03      	add	r3, sp, #12
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	462a      	mov	r2, r5
 800c9b8:	4b05      	ldr	r3, [pc, #20]	; (800c9d0 <_vfiprintf_r+0x22c>)
 800c9ba:	a904      	add	r1, sp, #16
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f000 f879 	bl	800cab4 <_printf_i>
 800c9c2:	e7e4      	b.n	800c98e <_vfiprintf_r+0x1ea>
 800c9c4:	0800d960 	.word	0x0800d960
 800c9c8:	0800d96a 	.word	0x0800d96a
 800c9cc:	00000000 	.word	0x00000000
 800c9d0:	0800c77f 	.word	0x0800c77f
 800c9d4:	0800d966 	.word	0x0800d966

0800c9d8 <_printf_common>:
 800c9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9dc:	4616      	mov	r6, r2
 800c9de:	4699      	mov	r9, r3
 800c9e0:	688a      	ldr	r2, [r1, #8]
 800c9e2:	690b      	ldr	r3, [r1, #16]
 800c9e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	bfb8      	it	lt
 800c9ec:	4613      	movlt	r3, r2
 800c9ee:	6033      	str	r3, [r6, #0]
 800c9f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	b10a      	cbz	r2, 800c9fe <_printf_common+0x26>
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	6033      	str	r3, [r6, #0]
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	0699      	lsls	r1, r3, #26
 800ca02:	bf42      	ittt	mi
 800ca04:	6833      	ldrmi	r3, [r6, #0]
 800ca06:	3302      	addmi	r3, #2
 800ca08:	6033      	strmi	r3, [r6, #0]
 800ca0a:	6825      	ldr	r5, [r4, #0]
 800ca0c:	f015 0506 	ands.w	r5, r5, #6
 800ca10:	d106      	bne.n	800ca20 <_printf_common+0x48>
 800ca12:	f104 0a19 	add.w	sl, r4, #25
 800ca16:	68e3      	ldr	r3, [r4, #12]
 800ca18:	6832      	ldr	r2, [r6, #0]
 800ca1a:	1a9b      	subs	r3, r3, r2
 800ca1c:	42ab      	cmp	r3, r5
 800ca1e:	dc26      	bgt.n	800ca6e <_printf_common+0x96>
 800ca20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca24:	1e13      	subs	r3, r2, #0
 800ca26:	6822      	ldr	r2, [r4, #0]
 800ca28:	bf18      	it	ne
 800ca2a:	2301      	movne	r3, #1
 800ca2c:	0692      	lsls	r2, r2, #26
 800ca2e:	d42b      	bmi.n	800ca88 <_printf_common+0xb0>
 800ca30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca34:	4649      	mov	r1, r9
 800ca36:	4638      	mov	r0, r7
 800ca38:	47c0      	blx	r8
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	d01e      	beq.n	800ca7c <_printf_common+0xa4>
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	6922      	ldr	r2, [r4, #16]
 800ca42:	f003 0306 	and.w	r3, r3, #6
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	bf02      	ittt	eq
 800ca4a:	68e5      	ldreq	r5, [r4, #12]
 800ca4c:	6833      	ldreq	r3, [r6, #0]
 800ca4e:	1aed      	subeq	r5, r5, r3
 800ca50:	68a3      	ldr	r3, [r4, #8]
 800ca52:	bf0c      	ite	eq
 800ca54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca58:	2500      	movne	r5, #0
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	bfc4      	itt	gt
 800ca5e:	1a9b      	subgt	r3, r3, r2
 800ca60:	18ed      	addgt	r5, r5, r3
 800ca62:	2600      	movs	r6, #0
 800ca64:	341a      	adds	r4, #26
 800ca66:	42b5      	cmp	r5, r6
 800ca68:	d11a      	bne.n	800caa0 <_printf_common+0xc8>
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	e008      	b.n	800ca80 <_printf_common+0xa8>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	4652      	mov	r2, sl
 800ca72:	4649      	mov	r1, r9
 800ca74:	4638      	mov	r0, r7
 800ca76:	47c0      	blx	r8
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d103      	bne.n	800ca84 <_printf_common+0xac>
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca84:	3501      	adds	r5, #1
 800ca86:	e7c6      	b.n	800ca16 <_printf_common+0x3e>
 800ca88:	18e1      	adds	r1, r4, r3
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	2030      	movs	r0, #48	; 0x30
 800ca8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca92:	4422      	add	r2, r4
 800ca94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca9c:	3302      	adds	r3, #2
 800ca9e:	e7c7      	b.n	800ca30 <_printf_common+0x58>
 800caa0:	2301      	movs	r3, #1
 800caa2:	4622      	mov	r2, r4
 800caa4:	4649      	mov	r1, r9
 800caa6:	4638      	mov	r0, r7
 800caa8:	47c0      	blx	r8
 800caaa:	3001      	adds	r0, #1
 800caac:	d0e6      	beq.n	800ca7c <_printf_common+0xa4>
 800caae:	3601      	adds	r6, #1
 800cab0:	e7d9      	b.n	800ca66 <_printf_common+0x8e>
	...

0800cab4 <_printf_i>:
 800cab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cab8:	7e0f      	ldrb	r7, [r1, #24]
 800caba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cabc:	2f78      	cmp	r7, #120	; 0x78
 800cabe:	4691      	mov	r9, r2
 800cac0:	4680      	mov	r8, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	469a      	mov	sl, r3
 800cac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caca:	d807      	bhi.n	800cadc <_printf_i+0x28>
 800cacc:	2f62      	cmp	r7, #98	; 0x62
 800cace:	d80a      	bhi.n	800cae6 <_printf_i+0x32>
 800cad0:	2f00      	cmp	r7, #0
 800cad2:	f000 80d4 	beq.w	800cc7e <_printf_i+0x1ca>
 800cad6:	2f58      	cmp	r7, #88	; 0x58
 800cad8:	f000 80c0 	beq.w	800cc5c <_printf_i+0x1a8>
 800cadc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cae4:	e03a      	b.n	800cb5c <_printf_i+0xa8>
 800cae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caea:	2b15      	cmp	r3, #21
 800caec:	d8f6      	bhi.n	800cadc <_printf_i+0x28>
 800caee:	a101      	add	r1, pc, #4	; (adr r1, 800caf4 <_printf_i+0x40>)
 800caf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caf4:	0800cb4d 	.word	0x0800cb4d
 800caf8:	0800cb61 	.word	0x0800cb61
 800cafc:	0800cadd 	.word	0x0800cadd
 800cb00:	0800cadd 	.word	0x0800cadd
 800cb04:	0800cadd 	.word	0x0800cadd
 800cb08:	0800cadd 	.word	0x0800cadd
 800cb0c:	0800cb61 	.word	0x0800cb61
 800cb10:	0800cadd 	.word	0x0800cadd
 800cb14:	0800cadd 	.word	0x0800cadd
 800cb18:	0800cadd 	.word	0x0800cadd
 800cb1c:	0800cadd 	.word	0x0800cadd
 800cb20:	0800cc65 	.word	0x0800cc65
 800cb24:	0800cb8d 	.word	0x0800cb8d
 800cb28:	0800cc1f 	.word	0x0800cc1f
 800cb2c:	0800cadd 	.word	0x0800cadd
 800cb30:	0800cadd 	.word	0x0800cadd
 800cb34:	0800cc87 	.word	0x0800cc87
 800cb38:	0800cadd 	.word	0x0800cadd
 800cb3c:	0800cb8d 	.word	0x0800cb8d
 800cb40:	0800cadd 	.word	0x0800cadd
 800cb44:	0800cadd 	.word	0x0800cadd
 800cb48:	0800cc27 	.word	0x0800cc27
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	1d1a      	adds	r2, r3, #4
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	602a      	str	r2, [r5, #0]
 800cb54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e09f      	b.n	800cca0 <_printf_i+0x1ec>
 800cb60:	6820      	ldr	r0, [r4, #0]
 800cb62:	682b      	ldr	r3, [r5, #0]
 800cb64:	0607      	lsls	r7, r0, #24
 800cb66:	f103 0104 	add.w	r1, r3, #4
 800cb6a:	6029      	str	r1, [r5, #0]
 800cb6c:	d501      	bpl.n	800cb72 <_printf_i+0xbe>
 800cb6e:	681e      	ldr	r6, [r3, #0]
 800cb70:	e003      	b.n	800cb7a <_printf_i+0xc6>
 800cb72:	0646      	lsls	r6, r0, #25
 800cb74:	d5fb      	bpl.n	800cb6e <_printf_i+0xba>
 800cb76:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb7a:	2e00      	cmp	r6, #0
 800cb7c:	da03      	bge.n	800cb86 <_printf_i+0xd2>
 800cb7e:	232d      	movs	r3, #45	; 0x2d
 800cb80:	4276      	negs	r6, r6
 800cb82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb86:	485a      	ldr	r0, [pc, #360]	; (800ccf0 <_printf_i+0x23c>)
 800cb88:	230a      	movs	r3, #10
 800cb8a:	e012      	b.n	800cbb2 <_printf_i+0xfe>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	6820      	ldr	r0, [r4, #0]
 800cb90:	1d19      	adds	r1, r3, #4
 800cb92:	6029      	str	r1, [r5, #0]
 800cb94:	0605      	lsls	r5, r0, #24
 800cb96:	d501      	bpl.n	800cb9c <_printf_i+0xe8>
 800cb98:	681e      	ldr	r6, [r3, #0]
 800cb9a:	e002      	b.n	800cba2 <_printf_i+0xee>
 800cb9c:	0641      	lsls	r1, r0, #25
 800cb9e:	d5fb      	bpl.n	800cb98 <_printf_i+0xe4>
 800cba0:	881e      	ldrh	r6, [r3, #0]
 800cba2:	4853      	ldr	r0, [pc, #332]	; (800ccf0 <_printf_i+0x23c>)
 800cba4:	2f6f      	cmp	r7, #111	; 0x6f
 800cba6:	bf0c      	ite	eq
 800cba8:	2308      	moveq	r3, #8
 800cbaa:	230a      	movne	r3, #10
 800cbac:	2100      	movs	r1, #0
 800cbae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbb2:	6865      	ldr	r5, [r4, #4]
 800cbb4:	60a5      	str	r5, [r4, #8]
 800cbb6:	2d00      	cmp	r5, #0
 800cbb8:	bfa2      	ittt	ge
 800cbba:	6821      	ldrge	r1, [r4, #0]
 800cbbc:	f021 0104 	bicge.w	r1, r1, #4
 800cbc0:	6021      	strge	r1, [r4, #0]
 800cbc2:	b90e      	cbnz	r6, 800cbc8 <_printf_i+0x114>
 800cbc4:	2d00      	cmp	r5, #0
 800cbc6:	d04b      	beq.n	800cc60 <_printf_i+0x1ac>
 800cbc8:	4615      	mov	r5, r2
 800cbca:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbce:	fb03 6711 	mls	r7, r3, r1, r6
 800cbd2:	5dc7      	ldrb	r7, [r0, r7]
 800cbd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbd8:	4637      	mov	r7, r6
 800cbda:	42bb      	cmp	r3, r7
 800cbdc:	460e      	mov	r6, r1
 800cbde:	d9f4      	bls.n	800cbca <_printf_i+0x116>
 800cbe0:	2b08      	cmp	r3, #8
 800cbe2:	d10b      	bne.n	800cbfc <_printf_i+0x148>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	07de      	lsls	r6, r3, #31
 800cbe8:	d508      	bpl.n	800cbfc <_printf_i+0x148>
 800cbea:	6923      	ldr	r3, [r4, #16]
 800cbec:	6861      	ldr	r1, [r4, #4]
 800cbee:	4299      	cmp	r1, r3
 800cbf0:	bfde      	ittt	le
 800cbf2:	2330      	movle	r3, #48	; 0x30
 800cbf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbfc:	1b52      	subs	r2, r2, r5
 800cbfe:	6122      	str	r2, [r4, #16]
 800cc00:	f8cd a000 	str.w	sl, [sp]
 800cc04:	464b      	mov	r3, r9
 800cc06:	aa03      	add	r2, sp, #12
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	f7ff fee4 	bl	800c9d8 <_printf_common>
 800cc10:	3001      	adds	r0, #1
 800cc12:	d14a      	bne.n	800ccaa <_printf_i+0x1f6>
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295
 800cc18:	b004      	add	sp, #16
 800cc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1e:	6823      	ldr	r3, [r4, #0]
 800cc20:	f043 0320 	orr.w	r3, r3, #32
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	4833      	ldr	r0, [pc, #204]	; (800ccf4 <_printf_i+0x240>)
 800cc28:	2778      	movs	r7, #120	; 0x78
 800cc2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	6829      	ldr	r1, [r5, #0]
 800cc32:	061f      	lsls	r7, r3, #24
 800cc34:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc38:	d402      	bmi.n	800cc40 <_printf_i+0x18c>
 800cc3a:	065f      	lsls	r7, r3, #25
 800cc3c:	bf48      	it	mi
 800cc3e:	b2b6      	uxthmi	r6, r6
 800cc40:	07df      	lsls	r7, r3, #31
 800cc42:	bf48      	it	mi
 800cc44:	f043 0320 	orrmi.w	r3, r3, #32
 800cc48:	6029      	str	r1, [r5, #0]
 800cc4a:	bf48      	it	mi
 800cc4c:	6023      	strmi	r3, [r4, #0]
 800cc4e:	b91e      	cbnz	r6, 800cc58 <_printf_i+0x1a4>
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	f023 0320 	bic.w	r3, r3, #32
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	2310      	movs	r3, #16
 800cc5a:	e7a7      	b.n	800cbac <_printf_i+0xf8>
 800cc5c:	4824      	ldr	r0, [pc, #144]	; (800ccf0 <_printf_i+0x23c>)
 800cc5e:	e7e4      	b.n	800cc2a <_printf_i+0x176>
 800cc60:	4615      	mov	r5, r2
 800cc62:	e7bd      	b.n	800cbe0 <_printf_i+0x12c>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	6826      	ldr	r6, [r4, #0]
 800cc68:	6961      	ldr	r1, [r4, #20]
 800cc6a:	1d18      	adds	r0, r3, #4
 800cc6c:	6028      	str	r0, [r5, #0]
 800cc6e:	0635      	lsls	r5, r6, #24
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	d501      	bpl.n	800cc78 <_printf_i+0x1c4>
 800cc74:	6019      	str	r1, [r3, #0]
 800cc76:	e002      	b.n	800cc7e <_printf_i+0x1ca>
 800cc78:	0670      	lsls	r0, r6, #25
 800cc7a:	d5fb      	bpl.n	800cc74 <_printf_i+0x1c0>
 800cc7c:	8019      	strh	r1, [r3, #0]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	4615      	mov	r5, r2
 800cc84:	e7bc      	b.n	800cc00 <_printf_i+0x14c>
 800cc86:	682b      	ldr	r3, [r5, #0]
 800cc88:	1d1a      	adds	r2, r3, #4
 800cc8a:	602a      	str	r2, [r5, #0]
 800cc8c:	681d      	ldr	r5, [r3, #0]
 800cc8e:	6862      	ldr	r2, [r4, #4]
 800cc90:	2100      	movs	r1, #0
 800cc92:	4628      	mov	r0, r5
 800cc94:	f7f3 faa4 	bl	80001e0 <memchr>
 800cc98:	b108      	cbz	r0, 800cc9e <_printf_i+0x1ea>
 800cc9a:	1b40      	subs	r0, r0, r5
 800cc9c:	6060      	str	r0, [r4, #4]
 800cc9e:	6863      	ldr	r3, [r4, #4]
 800cca0:	6123      	str	r3, [r4, #16]
 800cca2:	2300      	movs	r3, #0
 800cca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cca8:	e7aa      	b.n	800cc00 <_printf_i+0x14c>
 800ccaa:	6923      	ldr	r3, [r4, #16]
 800ccac:	462a      	mov	r2, r5
 800ccae:	4649      	mov	r1, r9
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	47d0      	blx	sl
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	d0ad      	beq.n	800cc14 <_printf_i+0x160>
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	079b      	lsls	r3, r3, #30
 800ccbc:	d413      	bmi.n	800cce6 <_printf_i+0x232>
 800ccbe:	68e0      	ldr	r0, [r4, #12]
 800ccc0:	9b03      	ldr	r3, [sp, #12]
 800ccc2:	4298      	cmp	r0, r3
 800ccc4:	bfb8      	it	lt
 800ccc6:	4618      	movlt	r0, r3
 800ccc8:	e7a6      	b.n	800cc18 <_printf_i+0x164>
 800ccca:	2301      	movs	r3, #1
 800cccc:	4632      	mov	r2, r6
 800ccce:	4649      	mov	r1, r9
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	47d0      	blx	sl
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d09d      	beq.n	800cc14 <_printf_i+0x160>
 800ccd8:	3501      	adds	r5, #1
 800ccda:	68e3      	ldr	r3, [r4, #12]
 800ccdc:	9903      	ldr	r1, [sp, #12]
 800ccde:	1a5b      	subs	r3, r3, r1
 800cce0:	42ab      	cmp	r3, r5
 800cce2:	dcf2      	bgt.n	800ccca <_printf_i+0x216>
 800cce4:	e7eb      	b.n	800ccbe <_printf_i+0x20a>
 800cce6:	2500      	movs	r5, #0
 800cce8:	f104 0619 	add.w	r6, r4, #25
 800ccec:	e7f5      	b.n	800ccda <_printf_i+0x226>
 800ccee:	bf00      	nop
 800ccf0:	0800d971 	.word	0x0800d971
 800ccf4:	0800d982 	.word	0x0800d982

0800ccf8 <__sflush_r>:
 800ccf8:	898a      	ldrh	r2, [r1, #12]
 800ccfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfe:	4605      	mov	r5, r0
 800cd00:	0710      	lsls	r0, r2, #28
 800cd02:	460c      	mov	r4, r1
 800cd04:	d458      	bmi.n	800cdb8 <__sflush_r+0xc0>
 800cd06:	684b      	ldr	r3, [r1, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dc05      	bgt.n	800cd18 <__sflush_r+0x20>
 800cd0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	dc02      	bgt.n	800cd18 <__sflush_r+0x20>
 800cd12:	2000      	movs	r0, #0
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd1a:	2e00      	cmp	r6, #0
 800cd1c:	d0f9      	beq.n	800cd12 <__sflush_r+0x1a>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd24:	682f      	ldr	r7, [r5, #0]
 800cd26:	6a21      	ldr	r1, [r4, #32]
 800cd28:	602b      	str	r3, [r5, #0]
 800cd2a:	d032      	beq.n	800cd92 <__sflush_r+0x9a>
 800cd2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd2e:	89a3      	ldrh	r3, [r4, #12]
 800cd30:	075a      	lsls	r2, r3, #29
 800cd32:	d505      	bpl.n	800cd40 <__sflush_r+0x48>
 800cd34:	6863      	ldr	r3, [r4, #4]
 800cd36:	1ac0      	subs	r0, r0, r3
 800cd38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd3a:	b10b      	cbz	r3, 800cd40 <__sflush_r+0x48>
 800cd3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd3e:	1ac0      	subs	r0, r0, r3
 800cd40:	2300      	movs	r3, #0
 800cd42:	4602      	mov	r2, r0
 800cd44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd46:	6a21      	ldr	r1, [r4, #32]
 800cd48:	4628      	mov	r0, r5
 800cd4a:	47b0      	blx	r6
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	d106      	bne.n	800cd60 <__sflush_r+0x68>
 800cd52:	6829      	ldr	r1, [r5, #0]
 800cd54:	291d      	cmp	r1, #29
 800cd56:	d82b      	bhi.n	800cdb0 <__sflush_r+0xb8>
 800cd58:	4a29      	ldr	r2, [pc, #164]	; (800ce00 <__sflush_r+0x108>)
 800cd5a:	410a      	asrs	r2, r1
 800cd5c:	07d6      	lsls	r6, r2, #31
 800cd5e:	d427      	bmi.n	800cdb0 <__sflush_r+0xb8>
 800cd60:	2200      	movs	r2, #0
 800cd62:	6062      	str	r2, [r4, #4]
 800cd64:	04d9      	lsls	r1, r3, #19
 800cd66:	6922      	ldr	r2, [r4, #16]
 800cd68:	6022      	str	r2, [r4, #0]
 800cd6a:	d504      	bpl.n	800cd76 <__sflush_r+0x7e>
 800cd6c:	1c42      	adds	r2, r0, #1
 800cd6e:	d101      	bne.n	800cd74 <__sflush_r+0x7c>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	b903      	cbnz	r3, 800cd76 <__sflush_r+0x7e>
 800cd74:	6560      	str	r0, [r4, #84]	; 0x54
 800cd76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd78:	602f      	str	r7, [r5, #0]
 800cd7a:	2900      	cmp	r1, #0
 800cd7c:	d0c9      	beq.n	800cd12 <__sflush_r+0x1a>
 800cd7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd82:	4299      	cmp	r1, r3
 800cd84:	d002      	beq.n	800cd8c <__sflush_r+0x94>
 800cd86:	4628      	mov	r0, r5
 800cd88:	f7ff fbea 	bl	800c560 <_free_r>
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	6360      	str	r0, [r4, #52]	; 0x34
 800cd90:	e7c0      	b.n	800cd14 <__sflush_r+0x1c>
 800cd92:	2301      	movs	r3, #1
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b0      	blx	r6
 800cd98:	1c41      	adds	r1, r0, #1
 800cd9a:	d1c8      	bne.n	800cd2e <__sflush_r+0x36>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d0c5      	beq.n	800cd2e <__sflush_r+0x36>
 800cda2:	2b1d      	cmp	r3, #29
 800cda4:	d001      	beq.n	800cdaa <__sflush_r+0xb2>
 800cda6:	2b16      	cmp	r3, #22
 800cda8:	d101      	bne.n	800cdae <__sflush_r+0xb6>
 800cdaa:	602f      	str	r7, [r5, #0]
 800cdac:	e7b1      	b.n	800cd12 <__sflush_r+0x1a>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdb4:	81a3      	strh	r3, [r4, #12]
 800cdb6:	e7ad      	b.n	800cd14 <__sflush_r+0x1c>
 800cdb8:	690f      	ldr	r7, [r1, #16]
 800cdba:	2f00      	cmp	r7, #0
 800cdbc:	d0a9      	beq.n	800cd12 <__sflush_r+0x1a>
 800cdbe:	0793      	lsls	r3, r2, #30
 800cdc0:	680e      	ldr	r6, [r1, #0]
 800cdc2:	bf08      	it	eq
 800cdc4:	694b      	ldreq	r3, [r1, #20]
 800cdc6:	600f      	str	r7, [r1, #0]
 800cdc8:	bf18      	it	ne
 800cdca:	2300      	movne	r3, #0
 800cdcc:	eba6 0807 	sub.w	r8, r6, r7
 800cdd0:	608b      	str	r3, [r1, #8]
 800cdd2:	f1b8 0f00 	cmp.w	r8, #0
 800cdd6:	dd9c      	ble.n	800cd12 <__sflush_r+0x1a>
 800cdd8:	6a21      	ldr	r1, [r4, #32]
 800cdda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cddc:	4643      	mov	r3, r8
 800cdde:	463a      	mov	r2, r7
 800cde0:	4628      	mov	r0, r5
 800cde2:	47b0      	blx	r6
 800cde4:	2800      	cmp	r0, #0
 800cde6:	dc06      	bgt.n	800cdf6 <__sflush_r+0xfe>
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdee:	81a3      	strh	r3, [r4, #12]
 800cdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf4:	e78e      	b.n	800cd14 <__sflush_r+0x1c>
 800cdf6:	4407      	add	r7, r0
 800cdf8:	eba8 0800 	sub.w	r8, r8, r0
 800cdfc:	e7e9      	b.n	800cdd2 <__sflush_r+0xda>
 800cdfe:	bf00      	nop
 800ce00:	dfbffffe 	.word	0xdfbffffe

0800ce04 <_fflush_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	690b      	ldr	r3, [r1, #16]
 800ce08:	4605      	mov	r5, r0
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	b913      	cbnz	r3, 800ce14 <_fflush_r+0x10>
 800ce0e:	2500      	movs	r5, #0
 800ce10:	4628      	mov	r0, r5
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	b118      	cbz	r0, 800ce1e <_fflush_r+0x1a>
 800ce16:	6a03      	ldr	r3, [r0, #32]
 800ce18:	b90b      	cbnz	r3, 800ce1e <_fflush_r+0x1a>
 800ce1a:	f7ff f993 	bl	800c144 <__sinit>
 800ce1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0f3      	beq.n	800ce0e <_fflush_r+0xa>
 800ce26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce28:	07d0      	lsls	r0, r2, #31
 800ce2a:	d404      	bmi.n	800ce36 <_fflush_r+0x32>
 800ce2c:	0599      	lsls	r1, r3, #22
 800ce2e:	d402      	bmi.n	800ce36 <_fflush_r+0x32>
 800ce30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce32:	f7ff fb84 	bl	800c53e <__retarget_lock_acquire_recursive>
 800ce36:	4628      	mov	r0, r5
 800ce38:	4621      	mov	r1, r4
 800ce3a:	f7ff ff5d 	bl	800ccf8 <__sflush_r>
 800ce3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce40:	07da      	lsls	r2, r3, #31
 800ce42:	4605      	mov	r5, r0
 800ce44:	d4e4      	bmi.n	800ce10 <_fflush_r+0xc>
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	059b      	lsls	r3, r3, #22
 800ce4a:	d4e1      	bmi.n	800ce10 <_fflush_r+0xc>
 800ce4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce4e:	f7ff fb77 	bl	800c540 <__retarget_lock_release_recursive>
 800ce52:	e7dd      	b.n	800ce10 <_fflush_r+0xc>

0800ce54 <__swhatbuf_r>:
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	460c      	mov	r4, r1
 800ce58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce5c:	2900      	cmp	r1, #0
 800ce5e:	b096      	sub	sp, #88	; 0x58
 800ce60:	4615      	mov	r5, r2
 800ce62:	461e      	mov	r6, r3
 800ce64:	da0d      	bge.n	800ce82 <__swhatbuf_r+0x2e>
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce6c:	f04f 0100 	mov.w	r1, #0
 800ce70:	bf0c      	ite	eq
 800ce72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce76:	2340      	movne	r3, #64	; 0x40
 800ce78:	2000      	movs	r0, #0
 800ce7a:	6031      	str	r1, [r6, #0]
 800ce7c:	602b      	str	r3, [r5, #0]
 800ce7e:	b016      	add	sp, #88	; 0x58
 800ce80:	bd70      	pop	{r4, r5, r6, pc}
 800ce82:	466a      	mov	r2, sp
 800ce84:	f000 f87c 	bl	800cf80 <_fstat_r>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	dbec      	blt.n	800ce66 <__swhatbuf_r+0x12>
 800ce8c:	9901      	ldr	r1, [sp, #4]
 800ce8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce96:	4259      	negs	r1, r3
 800ce98:	4159      	adcs	r1, r3
 800ce9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce9e:	e7eb      	b.n	800ce78 <__swhatbuf_r+0x24>

0800cea0 <__smakebuf_r>:
 800cea0:	898b      	ldrh	r3, [r1, #12]
 800cea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cea4:	079d      	lsls	r5, r3, #30
 800cea6:	4606      	mov	r6, r0
 800cea8:	460c      	mov	r4, r1
 800ceaa:	d507      	bpl.n	800cebc <__smakebuf_r+0x1c>
 800ceac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	6123      	str	r3, [r4, #16]
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	6163      	str	r3, [r4, #20]
 800ceb8:	b002      	add	sp, #8
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	ab01      	add	r3, sp, #4
 800cebe:	466a      	mov	r2, sp
 800cec0:	f7ff ffc8 	bl	800ce54 <__swhatbuf_r>
 800cec4:	9900      	ldr	r1, [sp, #0]
 800cec6:	4605      	mov	r5, r0
 800cec8:	4630      	mov	r0, r6
 800ceca:	f7ff fbb5 	bl	800c638 <_malloc_r>
 800cece:	b948      	cbnz	r0, 800cee4 <__smakebuf_r+0x44>
 800ced0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced4:	059a      	lsls	r2, r3, #22
 800ced6:	d4ef      	bmi.n	800ceb8 <__smakebuf_r+0x18>
 800ced8:	f023 0303 	bic.w	r3, r3, #3
 800cedc:	f043 0302 	orr.w	r3, r3, #2
 800cee0:	81a3      	strh	r3, [r4, #12]
 800cee2:	e7e3      	b.n	800ceac <__smakebuf_r+0xc>
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	6020      	str	r0, [r4, #0]
 800cee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceec:	81a3      	strh	r3, [r4, #12]
 800ceee:	9b00      	ldr	r3, [sp, #0]
 800cef0:	6163      	str	r3, [r4, #20]
 800cef2:	9b01      	ldr	r3, [sp, #4]
 800cef4:	6120      	str	r0, [r4, #16]
 800cef6:	b15b      	cbz	r3, 800cf10 <__smakebuf_r+0x70>
 800cef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cefc:	4630      	mov	r0, r6
 800cefe:	f000 f851 	bl	800cfa4 <_isatty_r>
 800cf02:	b128      	cbz	r0, 800cf10 <__smakebuf_r+0x70>
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f023 0303 	bic.w	r3, r3, #3
 800cf0a:	f043 0301 	orr.w	r3, r3, #1
 800cf0e:	81a3      	strh	r3, [r4, #12]
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	431d      	orrs	r5, r3
 800cf14:	81a5      	strh	r5, [r4, #12]
 800cf16:	e7cf      	b.n	800ceb8 <__smakebuf_r+0x18>

0800cf18 <_putc_r>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	460d      	mov	r5, r1
 800cf1c:	4614      	mov	r4, r2
 800cf1e:	4606      	mov	r6, r0
 800cf20:	b118      	cbz	r0, 800cf2a <_putc_r+0x12>
 800cf22:	6a03      	ldr	r3, [r0, #32]
 800cf24:	b90b      	cbnz	r3, 800cf2a <_putc_r+0x12>
 800cf26:	f7ff f90d 	bl	800c144 <__sinit>
 800cf2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf2c:	07d8      	lsls	r0, r3, #31
 800cf2e:	d405      	bmi.n	800cf3c <_putc_r+0x24>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	0599      	lsls	r1, r3, #22
 800cf34:	d402      	bmi.n	800cf3c <_putc_r+0x24>
 800cf36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf38:	f7ff fb01 	bl	800c53e <__retarget_lock_acquire_recursive>
 800cf3c:	68a3      	ldr	r3, [r4, #8]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	60a3      	str	r3, [r4, #8]
 800cf44:	da05      	bge.n	800cf52 <_putc_r+0x3a>
 800cf46:	69a2      	ldr	r2, [r4, #24]
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	db12      	blt.n	800cf72 <_putc_r+0x5a>
 800cf4c:	b2eb      	uxtb	r3, r5
 800cf4e:	2b0a      	cmp	r3, #10
 800cf50:	d00f      	beq.n	800cf72 <_putc_r+0x5a>
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	1c5a      	adds	r2, r3, #1
 800cf56:	6022      	str	r2, [r4, #0]
 800cf58:	701d      	strb	r5, [r3, #0]
 800cf5a:	b2ed      	uxtb	r5, r5
 800cf5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf5e:	07da      	lsls	r2, r3, #31
 800cf60:	d405      	bmi.n	800cf6e <_putc_r+0x56>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	059b      	lsls	r3, r3, #22
 800cf66:	d402      	bmi.n	800cf6e <_putc_r+0x56>
 800cf68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6a:	f7ff fae9 	bl	800c540 <__retarget_lock_release_recursive>
 800cf6e:	4628      	mov	r0, r5
 800cf70:	bd70      	pop	{r4, r5, r6, pc}
 800cf72:	4629      	mov	r1, r5
 800cf74:	4622      	mov	r2, r4
 800cf76:	4630      	mov	r0, r6
 800cf78:	f7ff f9d3 	bl	800c322 <__swbuf_r>
 800cf7c:	4605      	mov	r5, r0
 800cf7e:	e7ed      	b.n	800cf5c <_putc_r+0x44>

0800cf80 <_fstat_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d07      	ldr	r5, [pc, #28]	; (800cfa0 <_fstat_r+0x20>)
 800cf84:	2300      	movs	r3, #0
 800cf86:	4604      	mov	r4, r0
 800cf88:	4608      	mov	r0, r1
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	602b      	str	r3, [r5, #0]
 800cf8e:	f7f3 fe0c 	bl	8000baa <_fstat>
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	d102      	bne.n	800cf9c <_fstat_r+0x1c>
 800cf96:	682b      	ldr	r3, [r5, #0]
 800cf98:	b103      	cbz	r3, 800cf9c <_fstat_r+0x1c>
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	bd38      	pop	{r3, r4, r5, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20006e28 	.word	0x20006e28

0800cfa4 <_isatty_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4d06      	ldr	r5, [pc, #24]	; (800cfc0 <_isatty_r+0x1c>)
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	4604      	mov	r4, r0
 800cfac:	4608      	mov	r0, r1
 800cfae:	602b      	str	r3, [r5, #0]
 800cfb0:	f7f3 fe0b 	bl	8000bca <_isatty>
 800cfb4:	1c43      	adds	r3, r0, #1
 800cfb6:	d102      	bne.n	800cfbe <_isatty_r+0x1a>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	b103      	cbz	r3, 800cfbe <_isatty_r+0x1a>
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
 800cfc0:	20006e28 	.word	0x20006e28

0800cfc4 <_sbrk_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_sbrk_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f3 fe14 	bl	8000bfc <_sbrk>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_sbrk_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_sbrk_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	20006e28 	.word	0x20006e28

0800cfe4 <_init>:
 800cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe6:	bf00      	nop
 800cfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfea:	bc08      	pop	{r3}
 800cfec:	469e      	mov	lr, r3
 800cfee:	4770      	bx	lr

0800cff0 <_fini>:
 800cff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff2:	bf00      	nop
 800cff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cff6:	bc08      	pop	{r3}
 800cff8:	469e      	mov	lr, r3
 800cffa:	4770      	bx	lr
