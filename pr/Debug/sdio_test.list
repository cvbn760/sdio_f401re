
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008870  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c4  080090c4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090cc  080090cc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080090d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  0800913c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800913c  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010876  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c14  00000000  00000000  00030951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00033568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b41  00000000  00000000  00034430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019125  00000000  00000000  00034f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d82  00000000  00000000  0004e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dd4b  00000000  00000000  00062e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004390  00000000  00000000  000f0b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000f4ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089f8 	.word	0x080089f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080089f8 	.word	0x080089f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <print_err>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void print_err(FRESULT fr){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	switch(fr){
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b13      	cmp	r3, #19
 80005da:	d87b      	bhi.n	80006d4 <print_err+0x108>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <print_err+0x18>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	08000635 	.word	0x08000635
 80005e8:	0800063d 	.word	0x0800063d
 80005ec:	08000645 	.word	0x08000645
 80005f0:	0800064d 	.word	0x0800064d
 80005f4:	08000655 	.word	0x08000655
 80005f8:	0800065d 	.word	0x0800065d
 80005fc:	08000665 	.word	0x08000665
 8000600:	0800066d 	.word	0x0800066d
 8000604:	08000675 	.word	0x08000675
 8000608:	0800067d 	.word	0x0800067d
 800060c:	08000685 	.word	0x08000685
 8000610:	0800068d 	.word	0x0800068d
 8000614:	08000695 	.word	0x08000695
 8000618:	0800069d 	.word	0x0800069d
 800061c:	080006a5 	.word	0x080006a5
 8000620:	080006ad 	.word	0x080006ad
 8000624:	080006b5 	.word	0x080006b5
 8000628:	080006bd 	.word	0x080006bd
 800062c:	080006c5 	.word	0x080006c5
 8000630:	080006cd 	.word	0x080006cd
	case FR_OK:				/* (0) Succeeded */
		printf("SD: FR_OK \n");
 8000634:	4829      	ldr	r0, [pc, #164]	; (80006dc <print_err+0x110>)
 8000636:	f007 fc21 	bl	8007e7c <puts>
		break;
 800063a:	e04b      	b.n	80006d4 <print_err+0x108>
	case FR_DISK_ERR:			/* (1) A hard error occurred in the low level disk I/O layer */
		printf("SD: FR_DISK_ERR \n");
 800063c:	4828      	ldr	r0, [pc, #160]	; (80006e0 <print_err+0x114>)
 800063e:	f007 fc1d 	bl	8007e7c <puts>
		break;
 8000642:	e047      	b.n	80006d4 <print_err+0x108>
	case FR_INT_ERR:				/* (2) Assertion failed */
		printf("SD: FR_INT_ERR \n");
 8000644:	4827      	ldr	r0, [pc, #156]	; (80006e4 <print_err+0x118>)
 8000646:	f007 fc19 	bl	8007e7c <puts>
		break;
 800064a:	e043      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_READY:			/* (3) The physical drive cannot work */
		printf("SD: FR_NOT_READY \n");
 800064c:	4826      	ldr	r0, [pc, #152]	; (80006e8 <print_err+0x11c>)
 800064e:	f007 fc15 	bl	8007e7c <puts>
		break;
 8000652:	e03f      	b.n	80006d4 <print_err+0x108>
	case FR_NO_FILE:				/* (4) Could not find the file */
		printf("SD: FR_NO_FILE \n");
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <print_err+0x120>)
 8000656:	f007 fc11 	bl	8007e7c <puts>
		break;
 800065a:	e03b      	b.n	80006d4 <print_err+0x108>
	case FR_NO_PATH:				/* (5) Could not find the path */
		printf("SD: FR_NO_PATH \n");
 800065c:	4824      	ldr	r0, [pc, #144]	; (80006f0 <print_err+0x124>)
 800065e:	f007 fc0d 	bl	8007e7c <puts>
		break;
 8000662:	e037      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_NAME:		/* (6) The path name format is invalid */
		printf("SD: FR_INVALID_NAME \n");
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <print_err+0x128>)
 8000666:	f007 fc09 	bl	8007e7c <puts>
		break;
 800066a:	e033      	b.n	80006d4 <print_err+0x108>
	case FR_DENIED:				/* (7) Access denied due to prohibited access or directory full */
		printf("SD: FR_DENIED \n");
 800066c:	4822      	ldr	r0, [pc, #136]	; (80006f8 <print_err+0x12c>)
 800066e:	f007 fc05 	bl	8007e7c <puts>
		break;
 8000672:	e02f      	b.n	80006d4 <print_err+0x108>
	case FR_EXIST:				/* (8) Access denied due to prohibited access */
		printf("SD: FR_EXIST \n");
 8000674:	4821      	ldr	r0, [pc, #132]	; (80006fc <print_err+0x130>)
 8000676:	f007 fc01 	bl	8007e7c <puts>
		break;
 800067a:	e02b      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_OBJECT:		/* (9) The file/directory object is invalid */
		printf("SD: FR_INVALID_OBJECT \n");
 800067c:	4820      	ldr	r0, [pc, #128]	; (8000700 <print_err+0x134>)
 800067e:	f007 fbfd 	bl	8007e7c <puts>
		break;
 8000682:	e027      	b.n	80006d4 <print_err+0x108>
	case FR_WRITE_PROTECTED:		/* (10) The physical drive is write protected */
		printf("SD: FR_WRITE_PROTECTED \n");
 8000684:	481f      	ldr	r0, [pc, #124]	; (8000704 <print_err+0x138>)
 8000686:	f007 fbf9 	bl	8007e7c <puts>
		break;
 800068a:	e023      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_DRIVE:		/* (11) The logical drive number is invalid */
		printf("SD: FR_INVALID_DRIVE \n");
 800068c:	481e      	ldr	r0, [pc, #120]	; (8000708 <print_err+0x13c>)
 800068e:	f007 fbf5 	bl	8007e7c <puts>
		break;
 8000692:	e01f      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_ENABLED:			/* (12) The volume has no work area */
		printf("SD: FR_NOT_ENABLED \n");
 8000694:	481d      	ldr	r0, [pc, #116]	; (800070c <print_err+0x140>)
 8000696:	f007 fbf1 	bl	8007e7c <puts>
		break;
 800069a:	e01b      	b.n	80006d4 <print_err+0x108>
	case FR_NO_FILESYSTEM:		/* (13) There is no valid FAT volume */
		printf("SD: FR_NO_FILESYSTEM \n");
 800069c:	481c      	ldr	r0, [pc, #112]	; (8000710 <print_err+0x144>)
 800069e:	f007 fbed 	bl	8007e7c <puts>
		break;
 80006a2:	e017      	b.n	80006d4 <print_err+0x108>
	case FR_MKFS_ABORTED:		/* (14) The f_mkfs() aborted due to any problem */
		printf("SD: FR_MKFS_ABORTED \n");
 80006a4:	481b      	ldr	r0, [pc, #108]	; (8000714 <print_err+0x148>)
 80006a6:	f007 fbe9 	bl	8007e7c <puts>
		break;
 80006aa:	e013      	b.n	80006d4 <print_err+0x108>
	case FR_TIMEOUT:				/* (15) Could not get a grant to access the volume within defined period */
		printf("SD: FR_TIMEOUT \n");
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <print_err+0x14c>)
 80006ae:	f007 fbe5 	bl	8007e7c <puts>
		break;
 80006b2:	e00f      	b.n	80006d4 <print_err+0x108>
	case FR_LOCKED:				/* (16) The operation is rejected according to the file sharing policy */
		printf("SD: FR_LOCKED \n");
 80006b4:	4819      	ldr	r0, [pc, #100]	; (800071c <print_err+0x150>)
 80006b6:	f007 fbe1 	bl	8007e7c <puts>
		break;
 80006ba:	e00b      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_ENOUGH_CORE:		/* (17) LFN working buffer could not be allocated */
		printf("SD: FR_NOT_ENOUGH_CORE \n");
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <print_err+0x154>)
 80006be:	f007 fbdd 	bl	8007e7c <puts>
		break;
 80006c2:	e007      	b.n	80006d4 <print_err+0x108>
	case FR_TOO_MANY_OPEN_FILES:	/* (18) Number of open files > _FS_LOCK */
		printf("SD: FR_TOO_MANY_OPEN_FILES \n");
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <print_err+0x158>)
 80006c6:	f007 fbd9 	bl	8007e7c <puts>
		break;
 80006ca:	e003      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_PARAMETER:	/* (19) Given parameter is invalid */
		printf("SD: FR_INVALID_PARAMETER \n");
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <print_err+0x15c>)
 80006ce:	f007 fbd5 	bl	8007e7c <puts>
		break;
 80006d2:	bf00      	nop
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08008a10 	.word	0x08008a10
 80006e0:	08008a1c 	.word	0x08008a1c
 80006e4:	08008a30 	.word	0x08008a30
 80006e8:	08008a40 	.word	0x08008a40
 80006ec:	08008a54 	.word	0x08008a54
 80006f0:	08008a64 	.word	0x08008a64
 80006f4:	08008a74 	.word	0x08008a74
 80006f8:	08008a8c 	.word	0x08008a8c
 80006fc:	08008a9c 	.word	0x08008a9c
 8000700:	08008aac 	.word	0x08008aac
 8000704:	08008ac4 	.word	0x08008ac4
 8000708:	08008adc 	.word	0x08008adc
 800070c:	08008af4 	.word	0x08008af4
 8000710:	08008b08 	.word	0x08008b08
 8000714:	08008b20 	.word	0x08008b20
 8000718:	08008b38 	.word	0x08008b38
 800071c:	08008b48 	.word	0x08008b48
 8000720:	08008b58 	.word	0x08008b58
 8000724:	08008b70 	.word	0x08008b70
 8000728:	08008b8c 	.word	0x08008b8c

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc53 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f87b 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 f957 	bl	80009f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000742:	f000 f92d 	bl	80009a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f901 	bl	800094c <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800074a:	f000 f8df 	bl	800090c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800074e:	f004 f85d 	bl	800480c <MX_FATFS_Init>

  FATFS FatFs;
  FIL fil;
  FRESULT fr;

  fr = f_mount(&FatFs, "", 1);
 8000752:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8000756:	f103 0310 	add.w	r3, r3, #16
 800075a:	3b1c      	subs	r3, #28
 800075c:	2201      	movs	r2, #1
 800075e:	4930      	ldr	r1, [pc, #192]	; (8000820 <main+0xf4>)
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fc43 	bl	8006fec <f_mount>
 8000766:	4603      	mov	r3, r0
 8000768:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800076c:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000770:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 8000772:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000776:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff25 	bl	80005cc <print_err>
  if(fr == FR_OK){
 8000782:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000786:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d105      	bne.n	800079c <main+0x70>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2120      	movs	r1, #32
 8000794:	4823      	ldr	r0, [pc, #140]	; (8000824 <main+0xf8>)
 8000796:	f001 facb 	bl	8001d30 <HAL_GPIO_WritePin>
 800079a:	e004      	b.n	80007a6 <main+0x7a>
  } else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4820      	ldr	r0, [pc, #128]	; (8000824 <main+0xf8>)
 80007a2:	f001 fac5 	bl	8001d30 <HAL_GPIO_WritePin>
  }

  fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 80007a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80007aa:	3b2c      	subs	r3, #44	; 0x2c
 80007ac:	2201      	movs	r2, #1
 80007ae:	491e      	ldr	r1, [pc, #120]	; (8000828 <main+0xfc>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fc61 	bl	8007078 <f_open>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80007bc:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80007c0:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 80007c2:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80007c6:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fefd 	bl	80005cc <print_err>

  unsigned int bytesRead;
  char readBuff[128];
  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 80007d2:	e007      	b.n	80007e4 <main+0xb8>
	  printf("%02x\n ", readBuff[0]);
 80007d4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80007d8:	f813 3cf0 	ldrb.w	r3, [r3, #-240]
 80007dc:	4619      	mov	r1, r3
 80007de:	4813      	ldr	r0, [pc, #76]	; (800082c <main+0x100>)
 80007e0:	f007 fae6 	bl	8007db0 <iprintf>
  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 80007e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80007e8:	3b30      	subs	r3, #48	; 0x30
 80007ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80007ee:	3930      	subs	r1, #48	; 0x30
 80007f0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80007f4:	382c      	subs	r0, #44	; 0x2c
 80007f6:	2201      	movs	r2, #1
 80007f8:	f006 fe1a 	bl	8007430 <f_read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0e8      	beq.n	80007d4 <main+0xa8>
//  unsigned int bytesRead;
//  fr = f_read(&fil, readBuff, sizeof(readBuff)-1, &bytesRead);
//  print_err(fr);
//  printf("%s\n ", readBuff);

  f_close(&fil);
 8000802:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000806:	3b2c      	subs	r3, #44	; 0x2c
 8000808:	4618      	mov	r0, r3
 800080a:	f006 ffee 	bl	80077ea <f_close>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 800080e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000812:	f000 fc57 	bl	80010c4 <HAL_Delay>
	  printf("test\n");
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <main+0x104>)
 8000818:	f007 fb30 	bl	8007e7c <puts>
	  HAL_Delay(1000);
 800081c:	e7f7      	b.n	800080e <main+0xe2>
 800081e:	bf00      	nop
 8000820:	08008ba8 	.word	0x08008ba8
 8000824:	40020000 	.word	0x40020000
 8000828:	08008bac 	.word	0x08008bac
 800082c:	08008bc4 	.word	0x08008bc4
 8000830:	08008bcc 	.word	0x08008bcc

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	; 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	; 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f007 fbfa 	bl	800803c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <SystemClock_Config+0xd0>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a28      	ldr	r2, [pc, #160]	; (8000904 <SystemClock_Config+0xd0>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <SystemClock_Config+0xd0>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <SystemClock_Config+0xd4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <SystemClock_Config+0xd4>)
 8000882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <SystemClock_Config+0xd4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089c:	2310      	movs	r3, #16
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a8:	2308      	movs	r3, #8
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008ac:	2354      	movs	r3, #84	; 0x54
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fa51 	bl	8001d64 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008c8:	f000 f92a 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2102      	movs	r1, #2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fcb2 	bl	8002254 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008f6:	f000 f913 	bl	8000b20 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	; 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SDIO_SD_Init+0x38>)
 8000912:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <MX_SDIO_SD_Init+0x3c>)
 8000914:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_SDIO_SD_Init+0x38>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SDIO_SD_Init+0x38>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_SDIO_SD_Init+0x38>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SDIO_SD_Init+0x38>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MX_SDIO_SD_Init+0x38>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <MX_SDIO_SD_Init+0x38>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	20000084 	.word	0x20000084
 8000948:	40012c00 	.word	0x40012c00

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_USART2_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000984:	f002 ff1f 	bl	80037c6 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f8c7 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001c8 	.word	0x200001c8
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_DMA_Init+0x4c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <MX_DMA_Init+0x4c>)
 80009b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_DMA_Init+0x4c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	203b      	movs	r0, #59	; 0x3b
 80009c8:	f000 fc7b 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009cc:	203b      	movs	r0, #59	; 0x3b
 80009ce:	f000 fc94 	bl	80012fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2045      	movs	r0, #69	; 0x45
 80009d8:	f000 fc73 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009dc:	2045      	movs	r0, #69	; 0x45
 80009de:	f000 fc8c 	bl	80012fa <HAL_NVIC_EnableIRQ>

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a33      	ldr	r2, [pc, #204]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_GPIO_Init+0xec>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0xf0>)
 8000a98:	f001 f94a 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0xf4>)
 8000ab4:	f000 ffb8 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_GPIO_Init+0xf0>)
 8000ad0:	f000 ffaa 	bl	8001a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e009      	b.n	8000b0e <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	60ba      	str	r2, [r7, #8]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd3a 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbf1      	blt.n	8000afa <_write+0x12>
	}
	return len;
 8000b16:	687b      	ldr	r3, [r7, #4]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f000 fb9e 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a64      	ldr	r2, [pc, #400]	; (8000d2c <HAL_SD_MspInit+0x1b0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	f040 80c1 	bne.w	8000d22 <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b62      	ldr	r3, [pc, #392]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	4a61      	ldr	r2, [pc, #388]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000baa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bae:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb0:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b5b      	ldr	r3, [pc, #364]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a5a      	ldr	r2, [pc, #360]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a53      	ldr	r2, [pc, #332]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <HAL_SD_MspInit+0x1b4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bf4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bf8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c06:	230c      	movs	r3, #12
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4848      	ldr	r0, [pc, #288]	; (8000d34 <HAL_SD_MspInit+0x1b8>)
 8000c12:	f000 ff09 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c16:	2304      	movs	r3, #4
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c26:	230c      	movs	r3, #12
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4841      	ldr	r0, [pc, #260]	; (8000d38 <HAL_SD_MspInit+0x1bc>)
 8000c32:	f000 fef9 	bl	8001a28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000c36:	4b41      	ldr	r3, [pc, #260]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c38:	4a41      	ldr	r2, [pc, #260]	; (8000d40 <HAL_SD_MspInit+0x1c4>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c42:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c50:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c60:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c74:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c7a:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c80:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000c90:	482a      	ldr	r0, [pc, #168]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000c92:	f000 fb4d 	bl	8001330 <HAL_DMA_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000c9c:	f7ff ff40 	bl	8000b20 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <HAL_SD_MspInit+0x1c0>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cae:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <HAL_SD_MspInit+0x1cc>)
 8000cb0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ccc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000cf8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000d00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000d06:	480f      	ldr	r0, [pc, #60]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000d08:	f000 fb12 	bl	8001330 <HAL_DMA_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000d12:	f7ff ff05 	bl	8000b20 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d1c:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <HAL_SD_MspInit+0x1c8>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	20000108 	.word	0x20000108
 8000d40:	40026458 	.word	0x40026458
 8000d44:	20000168 	.word	0x20000168
 8000d48:	400264a0 	.word	0x400264a0

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12b      	bne.n	8000dc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da6:	230c      	movs	r3, #12
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db6:	2307      	movs	r3, #7
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_UART_MspInit+0x8c>)
 8000dc2:	f000 fe31 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40004400 	.word	0x40004400
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f92c 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <DMA2_Stream3_IRQHandler+0x10>)
 8000e36:	f000 fb81 	bl	800153c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000108 	.word	0x20000108

08000e44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA2_Stream6_IRQHandler+0x10>)
 8000e4a:	f000 fb77 	bl	800153c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000168 	.word	0x20000168

08000e58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00a      	b.n	8000e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4601      	mov	r1, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf0      	blt.n	8000e6a <_read+0x12>
  }

  return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eba:	605a      	str	r2, [r3, #4]
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_isatty>:

int _isatty(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f007 f8e4 	bl	80080f8 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20018000 	.word	0x20018000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000020c 	.word	0x2000020c
 8000f64:	200003a8 	.word	0x200003a8

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f007 f8a3 	bl	8008104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fbb5 	bl	800072c <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fd0:	080090d4 	.word	0x080090d4
  ldr r2, =_sbss
 8000fd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fd8:	200003a4 	.word	0x200003a4

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_Init+0x40>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_Init+0x40>)
 8000ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x40>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f94f 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fd8a 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f967 	bl	8001316 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f92f 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000210 	.word	0x20000210

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000210 	.word	0x20000210

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff29 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff3e 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff feb6 	bl	80010ac <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e099      	b.n	8001480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136c:	e00f      	b.n	800138e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800136e:	f7ff fe9d 	bl	80010ac <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b05      	cmp	r3, #5
 800137a:	d908      	bls.n	800138e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2220      	movs	r2, #32
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e078      	b.n	8001480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e8      	bne.n	800136e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_DMA_Init+0x158>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d107      	bne.n	80013f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4313      	orrs	r3, r2
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f023 0307 	bic.w	r3, r3, #7
 800140e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	2b04      	cmp	r3, #4
 8001420:	d117      	bne.n	8001452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4313      	orrs	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00e      	beq.n	8001452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fa7b 	bl	8001930 <DMA_CheckFifoParam>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2240      	movs	r2, #64	; 0x40
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800144e:	2301      	movs	r3, #1
 8001450:	e016      	b.n	8001480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fa32 	bl	80018c4 <DMA_CalcBaseAndBitshift>
 8001460:	4603      	mov	r3, r0
 8001462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	223f      	movs	r2, #63	; 0x3f
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	f010803f 	.word	0xf010803f

0800148c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_DMA_Start_IT+0x26>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e040      	b.n	8001534 <HAL_DMA_Start_IT+0xa8>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d12f      	bne.n	8001526 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2202      	movs	r2, #2
 80014ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f9c4 	bl	8001868 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	223f      	movs	r2, #63	; 0x3f
 80014e6:	409a      	lsls	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0216 	orr.w	r2, r2, #22
 80014fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0208 	orr.w	r2, r2, #8
 8001512:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e005      	b.n	8001532 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800152e:	2302      	movs	r3, #2
 8001530:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001532:	7dfb      	ldrb	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001548:	4b8e      	ldr	r3, [pc, #568]	; (8001784 <HAL_DMA_IRQHandler+0x248>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a8e      	ldr	r2, [pc, #568]	; (8001788 <HAL_DMA_IRQHandler+0x24c>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0a9b      	lsrs	r3, r3, #10
 8001554:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	2208      	movs	r2, #8
 8001568:	409a      	lsls	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01a      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0204 	bic.w	r2, r2, #4
 800158e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	2208      	movs	r2, #8
 8001596:	409a      	lsls	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	2201      	movs	r2, #1
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d012      	beq.n	80015de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	2201      	movs	r2, #1
 80015cc:	409a      	lsls	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f043 0202 	orr.w	r2, r3, #2
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2204      	movs	r2, #4
 80015e4:	409a      	lsls	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d012      	beq.n	8001614 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	2204      	movs	r2, #4
 8001602:	409a      	lsls	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	f043 0204 	orr.w	r2, r3, #4
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2210      	movs	r2, #16
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d043      	beq.n	80016ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d03c      	beq.n	80016ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	2210      	movs	r2, #16
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d018      	beq.n	800167e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
 800166a:	e01f      	b.n	80016ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01b      	beq.n	80016ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
 800167c:	e016      	b.n	80016ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0208 	bic.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	2220      	movs	r2, #32
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 808f 	beq.w	80017dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8087 	beq.w	80017dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	2220      	movs	r2, #32
 80016d4:	409a      	lsls	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d136      	bne.n	8001754 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0216 	bic.w	r2, r2, #22
 80016f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001704:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <HAL_DMA_IRQHandler+0x1da>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0208 	bic.w	r2, r2, #8
 8001724:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	223f      	movs	r2, #63	; 0x3f
 800172c:	409a      	lsls	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001746:	2b00      	cmp	r3, #0
 8001748:	d07e      	beq.n	8001848 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
        }
        return;
 8001752:	e079      	b.n	8001848 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01d      	beq.n	800179e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10d      	bne.n	800178c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	2b00      	cmp	r3, #0
 8001776:	d031      	beq.n	80017dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
 8001780:	e02c      	b.n	80017dc <HAL_DMA_IRQHandler+0x2a0>
 8001782:	bf00      	nop
 8001784:	20000000 	.word	0x20000000
 8001788:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
 800179c:	e01e      	b.n	80017dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10f      	bne.n	80017cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0210 	bic.w	r2, r2, #16
 80017ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d032      	beq.n	800184a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d022      	beq.n	8001836 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2205      	movs	r2, #5
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	3301      	adds	r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	d307      	bcc.n	8001824 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f2      	bne.n	8001808 <HAL_DMA_IRQHandler+0x2cc>
 8001822:	e000      	b.n	8001826 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001824:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
 8001846:	e000      	b.n	800184a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001848:	bf00      	nop
    }
  }
}
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001884:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b40      	cmp	r3, #64	; 0x40
 8001894:	d108      	bne.n	80018a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018a6:	e007      	b.n	80018b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3b10      	subs	r3, #16
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <DMA_CalcBaseAndBitshift+0x64>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <DMA_CalcBaseAndBitshift+0x68>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d909      	bls.n	8001906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	1d1a      	adds	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58
 8001904:	e007      	b.n	8001916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	aaaaaaab 	.word	0xaaaaaaab
 800192c:	08008c34 	.word	0x08008c34

08001930 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11f      	bne.n	800198a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d856      	bhi.n	80019fe <DMA_CheckFifoParam+0xce>
 8001950:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <DMA_CheckFifoParam+0x28>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	08001969 	.word	0x08001969
 800195c:	0800197b 	.word	0x0800197b
 8001960:	08001969 	.word	0x08001969
 8001964:	080019ff 	.word	0x080019ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d046      	beq.n	8001a02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001978:	e043      	b.n	8001a02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001982:	d140      	bne.n	8001a06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e03d      	b.n	8001a06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001992:	d121      	bne.n	80019d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d837      	bhi.n	8001a0a <DMA_CheckFifoParam+0xda>
 800199a:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <DMA_CheckFifoParam+0x70>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019b7 	.word	0x080019b7
 80019a8:	080019b1 	.word	0x080019b1
 80019ac:	080019c9 	.word	0x080019c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      break;
 80019b4:	e030      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d025      	beq.n	8001a0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c6:	e022      	b.n	8001a0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d0:	d11f      	bne.n	8001a12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019d6:	e01c      	b.n	8001a12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d903      	bls.n	80019e6 <DMA_CheckFifoParam+0xb6>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d003      	beq.n	80019ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019e4:	e018      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      break;
 80019ea:	e015      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00e      	beq.n	8001a16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      break;
 80019fc:	e00b      	b.n	8001a16 <DMA_CheckFifoParam+0xe6>
      break;
 80019fe:	bf00      	nop
 8001a00:	e00a      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
 8001a04:	e008      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a06:	bf00      	nop
 8001a08:	e006      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0a:	bf00      	nop
 8001a0c:	e004      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e002      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
    }
  } 
  
  return status; 
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e159      	b.n	8001cf8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8148 	bne.w	8001cf2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a2 	beq.w	8001cf2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a56      	ldr	r2, [pc, #344]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b54      	ldr	r3, [pc, #336]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x202>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x1fe>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a47      	ldr	r2, [pc, #284]	; (8001d20 <HAL_GPIO_Init+0x2f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_GPIO_Init+0x2fc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x1f6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x1f2>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	; (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f aea2 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e267      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d075      	beq.n	8001e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d00c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d112      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9a:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da6:	d10b      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d05b      	beq.n	8001e6c <HAL_RCC_OscConfig+0x108>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d157      	bne.n	8001e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e242      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x74>
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e01d      	b.n	8001e14 <HAL_RCC_OscConfig+0xb0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x98>
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6f      	ldr	r2, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6c      	ldr	r2, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0xb0>
 8001dfc:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f946 	bl	80010ac <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff f942 	bl	80010ac <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e207      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0xc0>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff f932 	bl	80010ac <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f92e 	bl	80010ac <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1f3      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0xe8>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d063      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d11c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x152>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e1c7      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e03a      	b.n	8001f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_RCC_OscConfig+0x244>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff f8e7 	bl	80010ac <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff f8e3 	bl	80010ac <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1a8      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4925      	ldr	r1, [pc, #148]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x244>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f8c6 	bl	80010ac <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7ff f8c2 	bl	80010ac <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e187      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d036      	beq.n	8001fbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_RCC_OscConfig+0x248>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f8a6 	bl	80010ac <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff f8a2 	bl	80010ac <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e167      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x240>)
 8001f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x200>
 8001f82:	e01b      	b.n	8001fbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_OscConfig+0x248>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f88f 	bl	80010ac <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	e00e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f92:	f7ff f88b 	bl	80010ac <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d907      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e150      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	42470000 	.word	0x42470000
 8001fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ea      	bne.n	8001f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8097 	beq.w	80020f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a7c      	ldr	r2, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b77      	ldr	r3, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a73      	ldr	r2, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7ff f84b 	bl	80010ac <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7ff f847 	bl	80010ac <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e10c      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x474>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x2ea>
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a63      	ldr	r2, [pc, #396]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	e01c      	b.n	8002088 <HAL_RCC_OscConfig+0x324>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x30c>
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a5b      	ldr	r2, [pc, #364]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0x324>
 8002070:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f80c 	bl	80010ac <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff f808 	bl	80010ac <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0cb      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ee      	beq.n	8002098 <HAL_RCC_OscConfig+0x334>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020bc:	f7fe fff6 	bl	80010ac <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe fff2 	bl	80010ac <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0b5      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ee      	bne.n	80020c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a1 	beq.w	8002244 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b08      	cmp	r3, #8
 800210c:	d05c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d141      	bne.n	800219a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_OscConfig+0x478>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe ffc6 	bl	80010ac <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe ffc2 	bl	80010ac <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e087      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	491b      	ldr	r1, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x478>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe ff9b 	bl	80010ac <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe ff97 	bl	80010ac <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e05c      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x416>
 8002198:	e054      	b.n	8002244 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x478>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe ff84 	bl	80010ac <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe ff80 	bl	80010ac <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e045      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x470>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x444>
 80021c6:	e03d      	b.n	8002244 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e038      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000
 80021dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x4ec>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d028      	beq.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d121      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002218:	4293      	cmp	r3, r2
 800221a:	d111      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0cc      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d90c      	bls.n	8002290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a58      	ldr	r2, [pc, #352]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a52      	ldr	r2, [pc, #328]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d044      	beq.n	8002374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d119      	bne.n	8002332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d003      	beq.n	8002312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230e:	2b03      	cmp	r3, #3
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e06f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e067      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002332:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4934      	ldr	r1, [pc, #208]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002344:	f7fe feb2 	bl	80010ac <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	e00a      	b.n	8002362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe feae 	bl	80010ac <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e04f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 020c 	and.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	429a      	cmp	r2, r3
 8002372:	d1eb      	bne.n	800234c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d20c      	bcs.n	800239c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fe12 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023c00 	.word	0x40023c00
 8002410:	40023800 	.word	0x40023800
 8002414:	08008c1c 	.word	0x08008c1c
 8002418:	20000000 	.word	0x20000000
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002424:	b094      	sub	sp, #80	; 0x50
 8002426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	647b      	str	r3, [r7, #68]	; 0x44
 800242c:	2300      	movs	r3, #0
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002430:	2300      	movs	r3, #0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002438:	4b79      	ldr	r3, [pc, #484]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d00d      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x40>
 8002444:	2b08      	cmp	r3, #8
 8002446:	f200 80e1 	bhi.w	800260c <HAL_RCC_GetSysClockFreq+0x1ec>
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x34>
 800244e:	2b04      	cmp	r3, #4
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x3a>
 8002452:	e0db      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_GetSysClockFreq+0x204>)
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002458:	e0db      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_GetSysClockFreq+0x208>)
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800245e:	e0d8      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002468:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002476:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	2200      	movs	r2, #0
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002480:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
 800248a:	2300      	movs	r3, #0
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
 800248e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002492:	4622      	mov	r2, r4
 8002494:	462b      	mov	r3, r5
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	0159      	lsls	r1, r3, #5
 80024a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a4:	0150      	lsls	r0, r2, #5
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4621      	mov	r1, r4
 80024ac:	1a51      	subs	r1, r2, r1
 80024ae:	6139      	str	r1, [r7, #16]
 80024b0:	4629      	mov	r1, r5
 80024b2:	eb63 0301 	sbc.w	r3, r3, r1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024c4:	4659      	mov	r1, fp
 80024c6:	018b      	lsls	r3, r1, #6
 80024c8:	4651      	mov	r1, sl
 80024ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ce:	4651      	mov	r1, sl
 80024d0:	018a      	lsls	r2, r1, #6
 80024d2:	4651      	mov	r1, sl
 80024d4:	ebb2 0801 	subs.w	r8, r2, r1
 80024d8:	4659      	mov	r1, fp
 80024da:	eb63 0901 	sbc.w	r9, r3, r1
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f2:	4690      	mov	r8, r2
 80024f4:	4699      	mov	r9, r3
 80024f6:	4623      	mov	r3, r4
 80024f8:	eb18 0303 	adds.w	r3, r8, r3
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	462b      	mov	r3, r5
 8002500:	eb49 0303 	adc.w	r3, r9, r3
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002512:	4629      	mov	r1, r5
 8002514:	024b      	lsls	r3, r1, #9
 8002516:	4621      	mov	r1, r4
 8002518:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800251c:	4621      	mov	r1, r4
 800251e:	024a      	lsls	r2, r1, #9
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002526:	2200      	movs	r2, #0
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
 800252a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800252c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002530:	f7fd fea6 	bl	8000280 <__aeabi_uldivmod>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4613      	mov	r3, r2
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800253c:	e058      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	2200      	movs	r2, #0
 8002546:	4618      	mov	r0, r3
 8002548:	4611      	mov	r1, r2
 800254a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
 8002554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002558:	4642      	mov	r2, r8
 800255a:	464b      	mov	r3, r9
 800255c:	f04f 0000 	mov.w	r0, #0
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	0159      	lsls	r1, r3, #5
 8002566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800256a:	0150      	lsls	r0, r2, #5
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4641      	mov	r1, r8
 8002572:	ebb2 0a01 	subs.w	sl, r2, r1
 8002576:	4649      	mov	r1, r9
 8002578:	eb63 0b01 	sbc.w	fp, r3, r1
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800258c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002590:	ebb2 040a 	subs.w	r4, r2, sl
 8002594:	eb63 050b 	sbc.w	r5, r3, fp
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	00eb      	lsls	r3, r5, #3
 80025a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a6:	00e2      	lsls	r2, r4, #3
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	4643      	mov	r3, r8
 80025ae:	18e3      	adds	r3, r4, r3
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	464b      	mov	r3, r9
 80025b4:	eb45 0303 	adc.w	r3, r5, r3
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c6:	4629      	mov	r1, r5
 80025c8:	028b      	lsls	r3, r1, #10
 80025ca:	4621      	mov	r1, r4
 80025cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d0:	4621      	mov	r1, r4
 80025d2:	028a      	lsls	r2, r1, #10
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025da:	2200      	movs	r2, #0
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	61fa      	str	r2, [r7, #28]
 80025e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e4:	f7fd fe4c 	bl	8000280 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4613      	mov	r3, r2
 80025ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800260a:	e002      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetSysClockFreq+0x204>)
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002614:	4618      	mov	r0, r3
 8002616:	3750      	adds	r7, #80	; 0x50
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	00f42400 	.word	0x00f42400
 8002628:	007a1200 	.word	0x007a1200

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a9b      	lsrs	r3, r3, #10
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	08008c2c 	.word	0x08008c2c

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffdc 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08008c2c 	.word	0x08008c2c

08002694 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e022      	b.n	80026ec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7fe fa5f 	bl	8000b7c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2203      	movs	r2, #3
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f814 	bl	80026f4 <HAL_SD_InitCard>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00a      	b.n	80026ec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b08e      	sub	sp, #56	; 0x38
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002710:	2376      	movs	r3, #118	; 0x76
 8002712:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681d      	ldr	r5, [r3, #0]
 8002718:	466c      	mov	r4, sp
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272c:	4628      	mov	r0, r5
 800272e:	f001 fb0b 	bl	8003d48 <SDIO_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e04f      	b.n	80027e4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_SD_InitCard+0xf8>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fb32 	bl	8003db8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_SD_InitCard+0xf8>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800275a:	2002      	movs	r0, #2
 800275c:	f7fe fcb2 	bl	80010c4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fe11 	bl	8003388 <SD_PowerON>
 8002766:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e02e      	b.n	80027e4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fd30 	bl	80031ec <SD_InitCard>
 800278c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e01b      	b.n	80027e4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 fb91 	bl	8003edc <SDMMC_CmdBlockLength>
 80027ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00f      	beq.n	80027e2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_SD_InitCard+0xfc>)
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdb0      	pop	{r4, r5, r7, pc}
 80027ec:	422580a0 	.word	0x422580a0
 80027f0:	004005ff 	.word	0x004005ff

080027f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0c0      	b.n	800299e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	f040 80b9 	bne.w	800299c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	441a      	add	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	429a      	cmp	r2, r3
 800283c:	d907      	bls.n	800284e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0a7      	b.n	800299e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a4c      	ldr	r2, [pc, #304]	; (80029a8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a4b      	ldr	r2, [pc, #300]	; (80029ac <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002880:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2200      	movs	r2, #0
 8002888:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3380      	adds	r3, #128	; 0x80
 80028b8:	4619      	mov	r1, r3
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	f7fe fde3 	bl	800148c <HAL_DMA_Start_IT>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d017      	beq.n	80028fc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80028da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a33      	ldr	r2, [pc, #204]	; (80029b0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e050      	b.n	800299e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	2b01      	cmp	r3, #1
 8002908:	d002      	beq.n	8002910 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
 8002914:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	025b      	lsls	r3, r3, #9
 800291a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800291c:	2390      	movs	r3, #144	; 0x90
 800291e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002920:	2302      	movs	r3, #2
 8002922:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f107 0210 	add.w	r2, r7, #16
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f001 faa4 	bl	8003e84 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d90a      	bls.n	8002958 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2282      	movs	r2, #130	; 0x82
 8002946:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fb08 	bl	8003f64 <SDMMC_CmdReadMultiBlock>
 8002954:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002956:	e009      	b.n	800296c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2281      	movs	r2, #129	; 0x81
 800295c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fadb 	bl	8003f20 <SDMMC_CmdReadSingleBlock>
 800296a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002978:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e002      	b.n	800299e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3730      	adds	r7, #48	; 0x30
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	080030d7 	.word	0x080030d7
 80029ac:	08003149 	.word	0x08003149
 80029b0:	004005ff 	.word	0x004005ff
 80029b4:	4225858c 	.word	0x4225858c

080029b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0c5      	b.n	8002b6c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 80be 	bne.w	8002b6a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	441a      	add	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d907      	bls.n	8002a12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0ac      	b.n	8002b6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2203      	movs	r2, #3
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	4a4e      	ldr	r2, [pc, #312]	; (8002b74 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	4a4d      	ldr	r2, [pc, #308]	; (8002b78 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002a44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d002      	beq.n	8002a5c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	025b      	lsls	r3, r3, #9
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d90a      	bls.n	8002a78 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22a0      	movs	r2, #160	; 0xa0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 fabc 	bl	8003fec <SDMMC_CmdWriteMultiBlock>
 8002a74:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002a76:	e009      	b.n	8002a8c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2290      	movs	r2, #144	; 0x90
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 fa8f 	bl	8003fa8 <SDMMC_CmdWriteSingleBlock>
 8002a8a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a39      	ldr	r2, [pc, #228]	; (8002b7c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e059      	b.n	8002b6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3380      	adds	r3, #128	; 0x80
 8002aee:	461a      	mov	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	f7fe fcc9 	bl	800148c <HAL_DMA_Start_IT>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01c      	beq.n	8002b3a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002b0e:	f023 0302 	bic.w	r3, r3, #2
 8002b12:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e018      	b.n	8002b6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002b46:	2390      	movs	r3, #144	; 0x90
 8002b48:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f107 0210 	add.w	r2, r7, #16
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 f98f 	bl	8003e84 <SDIO_ConfigData>

      return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3730      	adds	r7, #48	; 0x30
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	080030ad 	.word	0x080030ad
 8002b78:	08003149 	.word	0x08003149
 8002b7c:	004005ff 	.word	0x004005ff
 8002b80:	4225858c 	.word	0x4225858c

08002b84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba6:	0f9b      	lsrs	r3, r3, #30
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc4:	0e1b      	lsrs	r3, r3, #24
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf8:	0d1b      	lsrs	r3, r3, #20
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c16:	0bdb      	lsrs	r3, r3, #15
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c28:	0b9b      	lsrs	r3, r3, #14
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3a:	0b5b      	lsrs	r3, r3, #13
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	0b1b      	lsrs	r3, r3, #12
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d163      	bne.n	8002d30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6c:	009a      	lsls	r2, r3, #2
 8002c6e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002c78:	0f92      	lsrs	r2, r2, #30
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c84:	0edb      	lsrs	r3, r3, #27
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c96:	0e1b      	lsrs	r3, r3, #24
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca8:	0d5b      	lsrs	r3, r3, #21
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ccc:	0bdb      	lsrs	r3, r3, #15
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	7e1b      	ldrb	r3, [r3, #24]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	3302      	adds	r3, #2
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002cfa:	fb03 f202 	mul.w	r2, r3, r2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	7a1b      	ldrb	r3, [r3, #8]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d1c:	0a52      	lsrs	r2, r2, #9
 8002d1e:	fb03 f202 	mul.w	r2, r3, r2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60
 8002d2e:	e031      	b.n	8002d94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d11d      	bne.n	8002d74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	3301      	adds	r3, #1
 8002d54:	029a      	lsls	r2, r3, #10
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	661a      	str	r2, [r3, #96]	; 0x60
 8002d72:	e00f      	b.n	8002d94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <HAL_SD_GetCardCSD+0x344>)
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e09d      	b.n	8002ed0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d98:	0b9b      	lsrs	r3, r3, #14
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002daa:	09db      	lsrs	r3, r3, #7
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	0fdb      	lsrs	r3, r3, #31
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	0f5b      	lsrs	r3, r3, #29
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	0d9b      	lsrs	r3, r3, #22
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	0d5b      	lsrs	r3, r3, #21
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	0bdb      	lsrs	r3, r3, #15
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	0b9b      	lsrs	r3, r3, #14
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	0b5b      	lsrs	r3, r3, #13
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	0b1b      	lsrs	r3, r3, #12
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	0a9b      	lsrs	r3, r3, #10
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	004005ff 	.word	0x004005ff

08002ee0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b08e      	sub	sp, #56	; 0x38
 8002f3c:	af04      	add	r7, sp, #16
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d02e      	beq.n	8002fb6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5e:	d106      	bne.n	8002f6e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f6c:	e029      	b.n	8002fc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f74:	d10a      	bne.n	8002f8c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fabc 	bl	80034f4 <SD_WideBus_Enable>
 8002f7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8a:	e01a      	b.n	8002fc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 faf9 	bl	800358a <SD_WideBus_Disable>
 8002f98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fa6:	e00c      	b.n	8002fc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb4:	e005      	b.n	8002fc2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a26      	ldr	r2, [pc, #152]	; (8003068 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fe0:	e01f      	b.n	8003022 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681d      	ldr	r5, [r3, #0]
 8003008:	466c      	mov	r4, sp
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800301c:	4628      	mov	r0, r5
 800301e:	f000 fe93 	bl	8003d48 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800302a:	4618      	mov	r0, r3
 800302c:	f000 ff56 	bl	8003edc <SDMMC_CmdBlockLength>
 8003030:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00c      	beq.n	8003052 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_SD_ConfigWideBusOperation+0x130>)
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800305a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800305e:	4618      	mov	r0, r3
 8003060:	3728      	adds	r7, #40	; 0x28
 8003062:	46bd      	mov	sp, r7
 8003064:	bdb0      	pop	{r4, r5, r7, pc}
 8003066:	bf00      	nop
 8003068:	004005ff 	.word	0x004005ff

0800306c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa10 	bl	80034a4 <SD_SendStatus>
 8003084:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	0a5b      	lsrs	r3, r3, #9
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80030a2:	693b      	ldr	r3, [r7, #16]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	2b82      	cmp	r3, #130	; 0x82
 80030ea:	d111      	bne.n	8003110 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 ff9d 	bl	8004030 <SDMMC_CmdStopTransfer>
 80030f6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	431a      	orrs	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fd3a 	bl	8002b84 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0208 	bic.w	r2, r2, #8
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f240 523a 	movw	r2, #1338	; 0x53a
 8003128:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f001 fbf9 	bl	8004930 <HAL_SD_RxCpltCallback>
#endif
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fb7a 	bl	8001850 <HAL_DMA_GetError>
 800315c:	4603      	mov	r3, r0
 800315e:	2b02      	cmp	r3, #2
 8003160:	d03e      	beq.n	80031e0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d002      	beq.n	800317e <SD_DMAError+0x36>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d12d      	bne.n	80031da <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <SD_DMAError+0xa0>)
 8003184:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff62 	bl	800306c <HAL_SD_GetCardState>
 80031a8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d002      	beq.n	80031b6 <SD_DMAError+0x6e>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d10a      	bne.n	80031cc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 ff38 	bl	8004030 <SDMMC_CmdStopTransfer>
 80031c0:	4602      	mov	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	431a      	orrs	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80031da:	6978      	ldr	r0, [r7, #20]
 80031dc:	f7ff fcd2 	bl	8002b84 <HAL_SD_ErrorCallback>
#endif
  }
}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	004005ff 	.word	0x004005ff

080031ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80031ec:	b5b0      	push	{r4, r5, r7, lr}
 80031ee:	b094      	sub	sp, #80	; 0x50
 80031f0:	af04      	add	r7, sp, #16
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80031f4:	2301      	movs	r3, #1
 80031f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fde9 	bl	8003dd4 <SDIO_GetPowerState>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003208:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800320c:	e0b8      	b.n	8003380 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	2b03      	cmp	r3, #3
 8003214:	d02f      	beq.n	8003276 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f812 	bl	8004244 <SDMMC_CmdSendCID>
 8003220:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <SD_InitCard+0x40>
    {
      return errorstate;
 8003228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322a:	e0a9      	b.n	8003380 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fe13 	bl	8003e5e <SDIO_GetResponse>
 8003238:	4602      	mov	r2, r0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2104      	movs	r1, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fe0a 	bl	8003e5e <SDIO_GetResponse>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2108      	movs	r1, #8
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fe01 	bl	8003e5e <SDIO_GetResponse>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	210c      	movs	r1, #12
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fdf8 	bl	8003e5e <SDIO_GetResponse>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	2b03      	cmp	r3, #3
 800327c:	d00d      	beq.n	800329a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f107 020e 	add.w	r2, r7, #14
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f818 	bl	80042be <SDMMC_CmdSetRelAdd>
 800328e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <SD_InitCard+0xae>
    {
      return errorstate;
 8003296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003298:	e072      	b.n	8003380 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d036      	beq.n	8003310 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80032a2:	89fb      	ldrh	r3, [r7, #14]
 80032a4:	461a      	mov	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f000 ffe2 	bl	8004280 <SDMMC_CmdSendCSD>
 80032bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80032be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	e05b      	b.n	8003380 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fdc5 	bl	8003e5e <SDIO_GetResponse>
 80032d4:	4602      	mov	r2, r0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2104      	movs	r1, #4
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fdbc 	bl	8003e5e <SDIO_GetResponse>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2108      	movs	r1, #8
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fdb3 	bl	8003e5e <SDIO_GetResponse>
 80032f8:	4602      	mov	r2, r0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	210c      	movs	r1, #12
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fdaa 	bl	8003e5e <SDIO_GetResponse>
 800330a:	4602      	mov	r2, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2104      	movs	r1, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fda1 	bl	8003e5e <SDIO_GetResponse>
 800331c:	4603      	mov	r3, r0
 800331e:	0d1a      	lsrs	r2, r3, #20
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fc34 	bl	8002b98 <HAL_SD_GetCardCSD>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003336:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800333a:	e021      	b.n	8003380 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	2200      	movs	r2, #0
 8003348:	461c      	mov	r4, r3
 800334a:	4615      	mov	r5, r2
 800334c:	4622      	mov	r2, r4
 800334e:	462b      	mov	r3, r5
 8003350:	4608      	mov	r0, r1
 8003352:	f000 fe8f 	bl	8004074 <SDMMC_CmdSelDesel>
 8003356:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <SD_InitCard+0x176>
  {
    return errorstate;
 800335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003360:	e00e      	b.n	8003380 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681d      	ldr	r5, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	466c      	mov	r4, sp
 800336a:	f103 0210 	add.w	r2, r3, #16
 800336e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003374:	3304      	adds	r3, #4
 8003376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003378:	4628      	mov	r0, r5
 800337a:	f000 fce5 	bl	8003d48 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3740      	adds	r7, #64	; 0x40
 8003384:	46bd      	mov	sp, r7
 8003386:	bdb0      	pop	{r4, r5, r7, pc}

08003388 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fe8a 	bl	80040ba <SDMMC_CmdGoIdleState>
 80033a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	e072      	b.n	8003498 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fe9d 	bl	80040f6 <SDMMC_CmdOperCond>
 80033bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fe73 	bl	80040ba <SDMMC_CmdGoIdleState>
 80033d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	e05b      	b.n	8003498 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d137      	bne.n	800345e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fe9d 	bl	8004134 <SDMMC_CmdAppCommand>
 80033fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d02d      	beq.n	800345e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003406:	e047      	b.n	8003498 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fe90 	bl	8004134 <SDMMC_CmdAppCommand>
 8003414:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <SD_PowerON+0x98>
    {
      return errorstate;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	e03b      	b.n	8003498 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	491e      	ldr	r1, [pc, #120]	; (80034a0 <SD_PowerON+0x118>)
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fea6 	bl	8004178 <SDMMC_CmdAppOperCommand>
 800342c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003434:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003438:	e02e      	b.n	8003498 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fd0c 	bl	8003e5e <SDIO_GetResponse>
 8003446:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	0fdb      	lsrs	r3, r3, #31
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <SD_PowerON+0xcc>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <SD_PowerON+0xce>
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]

    count++;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3301      	adds	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003464:	4293      	cmp	r3, r2
 8003466:	d802      	bhi.n	800346e <SD_PowerON+0xe6>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0cc      	beq.n	8003408 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003474:	4293      	cmp	r3, r2
 8003476:	d902      	bls.n	800347e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800347c:	e00c      	b.n	8003498 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
 800348e:	e002      	b.n	8003496 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	c1100000 	.word	0xc1100000

080034a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80034b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b8:	e018      	b.n	80034ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f000 ff1a 	bl	8004300 <SDMMC_CmdSendStatus>
 80034cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	e009      	b.n	80034ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fcbd 	bl	8003e5e <SDIO_GetResponse>
 80034e4:	4602      	mov	r2, r0
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fca7 	bl	8003e5e <SDIO_GetResponse>
 8003510:	4603      	mov	r3, r0
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800351a:	d102      	bne.n	8003522 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800351c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003520:	e02f      	b.n	8003582 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003522:	f107 030c 	add.w	r3, r7, #12
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f879 	bl	8003620 <SD_FindSCR>
 800352e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	e023      	b.n	8003582 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f000 fdef 	bl	8004134 <SDMMC_CmdAppCommand>
 8003556:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	e00f      	b.n	8003582 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2102      	movs	r1, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fe28 	bl	80041be <SDMMC_CmdBusWidth>
 800356e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	e003      	b.n	8003582 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800357a:	2300      	movs	r3, #0
 800357c:	e001      	b.n	8003582 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800357e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fc5c 	bl	8003e5e <SDIO_GetResponse>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b0:	d102      	bne.n	80035b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80035b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035b6:	e02f      	b.n	8003618 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80035b8:	f107 030c 	add.w	r3, r7, #12
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f82e 	bl	8003620 <SD_FindSCR>
 80035c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	e023      	b.n	8003618 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01c      	beq.n	8003614 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 fda4 	bl	8004134 <SDMMC_CmdAppCommand>
 80035ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	e00f      	b.n	8003618 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fddd 	bl	80041be <SDMMC_CmdBusWidth>
 8003604:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	e003      	b.n	8003618 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003610:	2300      	movs	r3, #0
 8003612:	e001      	b.n	8003618 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b08f      	sub	sp, #60	; 0x3c
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800362a:	f7fd fd3f 	bl	80010ac <HAL_GetTick>
 800362e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2108      	movs	r1, #8
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fc48 	bl	8003edc <SDMMC_CmdBlockLength>
 800364c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	e0b2      	b.n	80037be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f000 fd65 	bl	8004134 <SDMMC_CmdAppCommand>
 800366a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	e0a3      	b.n	80037be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800367c:	2308      	movs	r3, #8
 800367e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003680:	2330      	movs	r3, #48	; 0x30
 8003682:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003684:	2302      	movs	r3, #2
 8003686:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800368c:	2301      	movs	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f107 0210 	add.w	r2, r7, #16
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fbf2 	bl	8003e84 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fdac 	bl	8004202 <SDMMC_CmdSendSCR>
 80036aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d02a      	beq.n	8003708 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	e083      	b.n	80037be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00f      	beq.n	80036e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	f107 0208 	add.w	r2, r7, #8
 80036d0:	18d4      	adds	r4, r2, r3
 80036d2:	4608      	mov	r0, r1
 80036d4:	f000 fb63 	bl	8003d9e <SDIO_ReadFIFO>
 80036d8:	4603      	mov	r3, r0
 80036da:	6023      	str	r3, [r4, #0]
      index++;
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	3301      	adds	r3, #1
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
 80036e2:	e006      	b.n	80036f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80036f2:	f7fd fcdb 	bl	80010ac <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003702:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003706:	e05a      	b.n	80037be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0cf      	beq.n	80036b6 <SD_FindSCR+0x96>
 8003716:	e000      	b.n	800371a <SD_FindSCR+0xfa>
      break;
 8003718:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003730:	2308      	movs	r3, #8
 8003732:	e044      	b.n	80037be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2202      	movs	r2, #2
 8003748:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800374a:	2302      	movs	r3, #2
 800374c:	e037      	b.n	80037be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2220      	movs	r2, #32
 8003762:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003764:	2320      	movs	r3, #32
 8003766:	e02a      	b.n	80037be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003770:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	061a      	lsls	r2, r3, #24
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800377e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003788:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	0e1b      	lsrs	r3, r3, #24
 800378e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	601a      	str	r2, [r3, #0]
    scr++;
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	3304      	adds	r3, #4
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	061a      	lsls	r2, r3, #24
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0a1b      	lsrs	r3, r3, #8
 80037ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	0e1b      	lsrs	r3, r3, #24
 80037b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	373c      	adds	r7, #60	; 0x3c
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}

080037c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e03f      	b.n	8003858 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fd faad 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2224      	movs	r2, #36	; 0x24
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003808:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f828 	bl	8003860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b0c0      	sub	sp, #256	; 0x100
 8003866:	af00      	add	r7, sp, #0
 8003868:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	68d9      	ldr	r1, [r3, #12]
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	ea40 0301 	orr.w	r3, r0, r1
 8003888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	431a      	orrs	r2, r3
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038b8:	f021 010c 	bic.w	r1, r1, #12
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038c6:	430b      	orrs	r3, r1
 80038c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	6999      	ldr	r1, [r3, #24]
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	ea40 0301 	orr.w	r3, r0, r1
 80038e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b8f      	ldr	r3, [pc, #572]	; (8003b2c <UART_SetConfig+0x2cc>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d005      	beq.n	8003900 <UART_SetConfig+0xa0>
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b8d      	ldr	r3, [pc, #564]	; (8003b30 <UART_SetConfig+0x2d0>)
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d104      	bne.n	800390a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe feb4 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8003904:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003908:	e003      	b.n	8003912 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800390a:	f7fe fe9b 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800390e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391c:	f040 810c 	bne.w	8003b38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003924:	2200      	movs	r2, #0
 8003926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800392a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800392e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003932:	4622      	mov	r2, r4
 8003934:	462b      	mov	r3, r5
 8003936:	1891      	adds	r1, r2, r2
 8003938:	65b9      	str	r1, [r7, #88]	; 0x58
 800393a:	415b      	adcs	r3, r3
 800393c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800393e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003942:	4621      	mov	r1, r4
 8003944:	eb12 0801 	adds.w	r8, r2, r1
 8003948:	4629      	mov	r1, r5
 800394a:	eb43 0901 	adc.w	r9, r3, r1
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800395a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800395e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003962:	4690      	mov	r8, r2
 8003964:	4699      	mov	r9, r3
 8003966:	4623      	mov	r3, r4
 8003968:	eb18 0303 	adds.w	r3, r8, r3
 800396c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003970:	462b      	mov	r3, r5
 8003972:	eb49 0303 	adc.w	r3, r9, r3
 8003976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003986:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800398a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800398e:	460b      	mov	r3, r1
 8003990:	18db      	adds	r3, r3, r3
 8003992:	653b      	str	r3, [r7, #80]	; 0x50
 8003994:	4613      	mov	r3, r2
 8003996:	eb42 0303 	adc.w	r3, r2, r3
 800399a:	657b      	str	r3, [r7, #84]	; 0x54
 800399c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039a4:	f7fc fc6c 	bl	8000280 <__aeabi_uldivmod>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4b61      	ldr	r3, [pc, #388]	; (8003b34 <UART_SetConfig+0x2d4>)
 80039ae:	fba3 2302 	umull	r2, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	011c      	lsls	r4, r3, #4
 80039b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039c8:	4642      	mov	r2, r8
 80039ca:	464b      	mov	r3, r9
 80039cc:	1891      	adds	r1, r2, r2
 80039ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80039d0:	415b      	adcs	r3, r3
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039d8:	4641      	mov	r1, r8
 80039da:	eb12 0a01 	adds.w	sl, r2, r1
 80039de:	4649      	mov	r1, r9
 80039e0:	eb43 0b01 	adc.w	fp, r3, r1
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f8:	4692      	mov	sl, r2
 80039fa:	469b      	mov	fp, r3
 80039fc:	4643      	mov	r3, r8
 80039fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a06:	464b      	mov	r3, r9
 8003a08:	eb4b 0303 	adc.w	r3, fp, r3
 8003a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a24:	460b      	mov	r3, r1
 8003a26:	18db      	adds	r3, r3, r3
 8003a28:	643b      	str	r3, [r7, #64]	; 0x40
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	eb42 0303 	adc.w	r3, r2, r3
 8003a30:	647b      	str	r3, [r7, #68]	; 0x44
 8003a32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a3a:	f7fc fc21 	bl	8000280 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <UART_SetConfig+0x2d4>)
 8003a46:	fba3 2301 	umull	r2, r3, r3, r1
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2264      	movs	r2, #100	; 0x64
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	1acb      	subs	r3, r1, r3
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <UART_SetConfig+0x2d4>)
 8003a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a68:	441c      	add	r4, r3
 8003a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	464b      	mov	r3, r9
 8003a80:	1891      	adds	r1, r2, r2
 8003a82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a84:	415b      	adcs	r3, r3
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	1851      	adds	r1, r2, r1
 8003a90:	6339      	str	r1, [r7, #48]	; 0x30
 8003a92:	4649      	mov	r1, r9
 8003a94:	414b      	adcs	r3, r1
 8003a96:	637b      	str	r3, [r7, #52]	; 0x34
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003aa4:	4659      	mov	r1, fp
 8003aa6:	00cb      	lsls	r3, r1, #3
 8003aa8:	4651      	mov	r1, sl
 8003aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aae:	4651      	mov	r1, sl
 8003ab0:	00ca      	lsls	r2, r1, #3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4642      	mov	r2, r8
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	eb42 0303 	adc.w	r3, r2, r3
 8003ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ad8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003adc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	18db      	adds	r3, r3, r3
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	eb42 0303 	adc.w	r3, r2, r3
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003af6:	f7fc fbc3 	bl	8000280 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <UART_SetConfig+0x2d4>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	; 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	3332      	adds	r3, #50	; 0x32
 8003b12:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <UART_SetConfig+0x2d4>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 0207 	and.w	r2, r3, #7
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4422      	add	r2, r4
 8003b26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b28:	e106      	b.n	8003d38 <UART_SetConfig+0x4d8>
 8003b2a:	bf00      	nop
 8003b2c:	40011000 	.word	0x40011000
 8003b30:	40011400 	.word	0x40011400
 8003b34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b4a:	4642      	mov	r2, r8
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	1891      	adds	r1, r2, r2
 8003b50:	6239      	str	r1, [r7, #32]
 8003b52:	415b      	adcs	r3, r3
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	1854      	adds	r4, r2, r1
 8003b5e:	4649      	mov	r1, r9
 8003b60:	eb43 0501 	adc.w	r5, r3, r1
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	00eb      	lsls	r3, r5, #3
 8003b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b72:	00e2      	lsls	r2, r4, #3
 8003b74:	4614      	mov	r4, r2
 8003b76:	461d      	mov	r5, r3
 8003b78:	4643      	mov	r3, r8
 8003b7a:	18e3      	adds	r3, r4, r3
 8003b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b80:	464b      	mov	r3, r9
 8003b82:	eb45 0303 	adc.w	r3, r5, r3
 8003b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	008b      	lsls	r3, r1, #2
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	008a      	lsls	r2, r1, #2
 8003bb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bb8:	f7fc fb62 	bl	8000280 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4b60      	ldr	r3, [pc, #384]	; (8003d44 <UART_SetConfig+0x4e4>)
 8003bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	011c      	lsls	r4, r3, #4
 8003bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	1891      	adds	r1, r2, r2
 8003be2:	61b9      	str	r1, [r7, #24]
 8003be4:	415b      	adcs	r3, r3
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bec:	4641      	mov	r1, r8
 8003bee:	1851      	adds	r1, r2, r1
 8003bf0:	6139      	str	r1, [r7, #16]
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	414b      	adcs	r3, r1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c04:	4659      	mov	r1, fp
 8003c06:	00cb      	lsls	r3, r1, #3
 8003c08:	4651      	mov	r1, sl
 8003c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0e:	4651      	mov	r1, sl
 8003c10:	00ca      	lsls	r2, r1, #3
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	4642      	mov	r2, r8
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c20:	464b      	mov	r3, r9
 8003c22:	460a      	mov	r2, r1
 8003c24:	eb42 0303 	adc.w	r3, r2, r3
 8003c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c44:	4649      	mov	r1, r9
 8003c46:	008b      	lsls	r3, r1, #2
 8003c48:	4641      	mov	r1, r8
 8003c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4e:	4641      	mov	r1, r8
 8003c50:	008a      	lsls	r2, r1, #2
 8003c52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c56:	f7fc fb13 	bl	8000280 <__aeabi_uldivmod>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <UART_SetConfig+0x4e4>)
 8003c62:	fba3 2301 	umull	r2, r3, r3, r1
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2264      	movs	r2, #100	; 0x64
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	1acb      	subs	r3, r1, r3
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	3332      	adds	r3, #50	; 0x32
 8003c74:	4a33      	ldr	r2, [pc, #204]	; (8003d44 <UART_SetConfig+0x4e4>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c80:	441c      	add	r4, r3
 8003c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c86:	2200      	movs	r2, #0
 8003c88:	673b      	str	r3, [r7, #112]	; 0x70
 8003c8a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	1891      	adds	r1, r2, r2
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	415b      	adcs	r3, r3
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	1851      	adds	r1, r2, r1
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	414b      	adcs	r3, r1
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cb8:	4659      	mov	r1, fp
 8003cba:	00cb      	lsls	r3, r1, #3
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	00ca      	lsls	r2, r1, #3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4642      	mov	r2, r8
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	eb42 0303 	adc.w	r3, r2, r3
 8003cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ce6:	667a      	str	r2, [r7, #100]	; 0x64
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	008b      	lsls	r3, r1, #2
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfe:	4641      	mov	r1, r8
 8003d00:	008a      	lsls	r2, r1, #2
 8003d02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d06:	f7fc fabb 	bl	8000280 <__aeabi_uldivmod>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <UART_SetConfig+0x4e4>)
 8003d10:	fba3 1302 	umull	r1, r3, r3, r2
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	2164      	movs	r1, #100	; 0x64
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	3332      	adds	r3, #50	; 0x32
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <UART_SetConfig+0x4e4>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	f003 020f 	and.w	r2, r3, #15
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4422      	add	r2, r4
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d44:	51eb851f 	.word	0x51eb851f

08003d48 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003d48:	b084      	sub	sp, #16
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	f107 001c 	add.w	r0, r7, #28
 8003d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003d5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003d60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003d62:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003d66:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003d6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003d6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003d72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003d82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	b004      	add	sp, #16
 8003d9c:	4770      	bx	lr

08003d9e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0303 	and.w	r3, r3, #3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e0e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003e14:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003e1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003e2a:	f023 030f 	bic.w	r3, r3, #15
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	b2db      	uxtb	r3, r3
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
}  
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003eaa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003eb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003eb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0

}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003eea:	2310      	movs	r3, #16
 8003eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eee:	2340      	movs	r3, #64	; 0x40
 8003ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003efa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff74 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa18 	bl	8004344 <SDMMC_GetCmdResp1>
 8003f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f16:	69fb      	ldr	r3, [r7, #28]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003f2e:	2311      	movs	r3, #17
 8003f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f40:	f107 0308 	add.w	r3, r7, #8
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff52 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	2111      	movs	r1, #17
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f9f6 	bl	8004344 <SDMMC_GetCmdResp1>
 8003f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003f72:	2312      	movs	r3, #18
 8003f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ff30 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f94:	2112      	movs	r1, #18
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9d4 	bl	8004344 <SDMMC_GetCmdResp1>
 8003f9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003fb6:	2318      	movs	r3, #24
 8003fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fba:	2340      	movs	r3, #64	; 0x40
 8003fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ff0e 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	2118      	movs	r1, #24
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9b2 	bl	8004344 <SDMMC_GetCmdResp1>
 8003fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003ffa:	2319      	movs	r3, #25
 8003ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800400a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff feec 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	2119      	movs	r1, #25
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f990 	bl	8004344 <SDMMC_GetCmdResp1>
 8004024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004026:	69fb      	ldr	r3, [r7, #28]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800403c:	230c      	movs	r3, #12
 800403e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800404e:	f107 0308 	add.w	r3, r7, #8
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fecb 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <SDMMC_CmdStopTransfer+0x40>)
 800405c:	210c      	movs	r1, #12
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f970 	bl	8004344 <SDMMC_GetCmdResp1>
 8004064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004066:	69fb      	ldr	r3, [r7, #28]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	05f5e100 	.word	0x05f5e100

08004074 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004084:	2307      	movs	r3, #7
 8004086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800408c:	2300      	movs	r3, #0
 800408e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004094:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004096:	f107 0310 	add.w	r3, r7, #16
 800409a:	4619      	mov	r1, r3
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fea7 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	2107      	movs	r1, #7
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f94b 	bl	8004344 <SDMMC_GetCmdResp1>
 80040ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3728      	adds	r7, #40	; 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040d8:	f107 0308 	add.w	r3, r7, #8
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fe86 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb65 	bl	80047b4 <SDMMC_GetCmdError>
 80040ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ec:	69fb      	ldr	r3, [r7, #28]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b088      	sub	sp, #32
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80040fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004104:	2308      	movs	r3, #8
 8004106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004108:	2340      	movs	r3, #64	; 0x40
 800410a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004114:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff fe67 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 faf8 	bl	8004718 <SDMMC_GetCmdResp7>
 8004128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800412a:	69fb      	ldr	r3, [r7, #28]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004142:	2337      	movs	r3, #55	; 0x37
 8004144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004146:	2340      	movs	r3, #64	; 0x40
 8004148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800414e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004152:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004154:	f107 0308 	add.w	r3, r7, #8
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fe48 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004160:	f241 3288 	movw	r2, #5000	; 0x1388
 8004164:	2137      	movs	r1, #55	; 0x37
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8ec 	bl	8004344 <SDMMC_GetCmdResp1>
 800416c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800416e:	69fb      	ldr	r3, [r7, #28]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800418e:	2329      	movs	r3, #41	; 0x29
 8004190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004192:	2340      	movs	r3, #64	; 0x40
 8004194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800419a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800419e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fe22 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f9ff 	bl	80045b0 <SDMMC_GetCmdResp3>
 80041b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041b4:	69fb      	ldr	r3, [r7, #28]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b088      	sub	sp, #32
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80041cc:	2306      	movs	r3, #6
 80041ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fe03 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	2106      	movs	r1, #6
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f8a7 	bl	8004344 <SDMMC_GetCmdResp1>
 80041f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041f8:	69fb      	ldr	r3, [r7, #28]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b088      	sub	sp, #32
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800420e:	2333      	movs	r3, #51	; 0x33
 8004210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004212:	2340      	movs	r3, #64	; 0x40
 8004214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800421a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800421e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004220:	f107 0308 	add.w	r3, r7, #8
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fde2 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	2133      	movs	r1, #51	; 0x33
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f886 	bl	8004344 <SDMMC_GetCmdResp1>
 8004238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800423a:	69fb      	ldr	r3, [r7, #28]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3720      	adds	r7, #32
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004250:	2302      	movs	r3, #2
 8004252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004254:	23c0      	movs	r3, #192	; 0xc0
 8004256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800425c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fdc1 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f956 	bl	8004520 <SDMMC_GetCmdResp2>
 8004274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004276:	69fb      	ldr	r3, [r7, #28]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800428e:	2309      	movs	r3, #9
 8004290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004292:	23c0      	movs	r3, #192	; 0xc0
 8004294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800429a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fda2 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f937 	bl	8004520 <SDMMC_GetCmdResp2>
 80042b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042b4:	69fb      	ldr	r3, [r7, #28]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b088      	sub	sp, #32
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80042cc:	2303      	movs	r3, #3
 80042ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042d0:	2340      	movs	r3, #64	; 0x40
 80042d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fd83 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	2103      	movs	r1, #3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f99c 	bl	800462c <SDMMC_GetCmdResp6>
 80042f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042f6:	69fb      	ldr	r3, [r7, #28]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800430e:	230d      	movs	r3, #13
 8004310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004312:	2340      	movs	r3, #64	; 0x40
 8004314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800431a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004320:	f107 0308 	add.w	r3, r7, #8
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fd62 	bl	8003df0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	210d      	movs	r1, #13
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f806 	bl	8004344 <SDMMC_GetCmdResp1>
 8004338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800433a:	69fb      	ldr	r3, [r7, #28]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	460b      	mov	r3, r1
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <SDMMC_GetCmdResp1+0x1d0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a70      	ldr	r2, [pc, #448]	; (8004518 <SDMMC_GetCmdResp1+0x1d4>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	0a5a      	lsrs	r2, r3, #9
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	61fa      	str	r2, [r7, #28]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004370:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004374:	e0c9      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ef      	beq.n	8004366 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ea      	bne.n	8004366 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2204      	movs	r2, #4
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043a2:	2304      	movs	r3, #4
 80043a4:	e0b1      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0a6      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	22c5      	movs	r2, #197	; 0xc5
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff fd3e 	bl	8003e44 <SDIO_GetCommandResponse>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d001      	beq.n	80043d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e099      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80043d6:	2100      	movs	r1, #0
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff fd40 	bl	8003e5e <SDIO_GetResponse>
 80043de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4b4e      	ldr	r3, [pc, #312]	; (800451c <SDMMC_GetCmdResp1+0x1d8>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e08d      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da02      	bge.n	80043fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80043f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f8:	e087      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004404:	2340      	movs	r3, #64	; 0x40
 8004406:	e080      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	e079      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004424:	e071      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004434:	e069      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004444:	e061      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004454:	e059      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004464:	e051      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004474:	e049      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004484:	e041      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004494:	e039      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80044a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a4:	e031      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80044b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044b4:	e029      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80044c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044c4:	e021      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80044d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044d4:	e019      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80044e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044e4:	e011      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80044f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044f4:	e009      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004500:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004504:	e001      	b.n	800450a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000000 	.word	0x20000000
 8004518:	10624dd3 	.word	0x10624dd3
 800451c:	fdffe008 	.word	0xfdffe008

08004520 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <SDMMC_GetCmdResp2+0x88>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <SDMMC_GetCmdResp2+0x8c>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0a5b      	lsrs	r3, r3, #9
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1e5a      	subs	r2, r3, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800454c:	e026      	b.n	800459c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ef      	beq.n	800453e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ea      	bne.n	800453e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d004      	beq.n	800457e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2204      	movs	r2, #4
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800457a:	2304      	movs	r3, #4
 800457c:	e00e      	b.n	800459c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004590:	2301      	movs	r3, #1
 8004592:	e003      	b.n	800459c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	22c5      	movs	r2, #197	; 0xc5
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	20000000 	.word	0x20000000
 80045ac:	10624dd3 	.word	0x10624dd3

080045b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <SDMMC_GetCmdResp3+0x74>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <SDMMC_GetCmdResp3+0x78>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	0a5b      	lsrs	r3, r3, #9
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1e5a      	subs	r2, r3, #1
 80045d2:	60fa      	str	r2, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045dc:	e01b      	b.n	8004616 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ef      	beq.n	80045ce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ea      	bne.n	80045ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2204      	movs	r2, #4
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800460a:	2304      	movs	r3, #4
 800460c:	e003      	b.n	8004616 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	22c5      	movs	r2, #197	; 0xc5
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000000 	.word	0x20000000
 8004628:	10624dd3 	.word	0x10624dd3

0800462c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	460b      	mov	r3, r1
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800463a:	4b35      	ldr	r3, [pc, #212]	; (8004710 <SDMMC_GetCmdResp6+0xe4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a35      	ldr	r2, [pc, #212]	; (8004714 <SDMMC_GetCmdResp6+0xe8>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	0a5b      	lsrs	r3, r3, #9
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	1e5a      	subs	r2, r3, #1
 8004654:	61fa      	str	r2, [r7, #28]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800465a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800465e:	e052      	b.n	8004706 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ef      	beq.n	8004650 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1ea      	bne.n	8004650 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2204      	movs	r2, #4
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800468c:	2304      	movs	r3, #4
 800468e:	e03a      	b.n	8004706 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e02f      	b.n	8004706 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff fbcc 	bl	8003e44 <SDIO_GetCommandResponse>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	7afb      	ldrb	r3, [r7, #11]
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d001      	beq.n	80046ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e025      	b.n	8004706 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22c5      	movs	r2, #197	; 0xc5
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80046c0:	2100      	movs	r1, #0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fbcb 	bl	8003e5e <SDIO_GetResponse>
 80046c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80046de:	2300      	movs	r3, #0
 80046e0:	e011      	b.n	8004706 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80046ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046f0:	e009      	b.n	8004706 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80046fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004700:	e001      	b.n	8004706 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000000 	.word	0x20000000
 8004714:	10624dd3 	.word	0x10624dd3

08004718 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004720:	4b22      	ldr	r3, [pc, #136]	; (80047ac <SDMMC_GetCmdResp7+0x94>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <SDMMC_GetCmdResp7+0x98>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0a5b      	lsrs	r3, r3, #9
 800472c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1e5a      	subs	r2, r3, #1
 800473a:	60fa      	str	r2, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004740:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004744:	e02c      	b.n	80047a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0ef      	beq.n	8004736 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ea      	bne.n	8004736 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2204      	movs	r2, #4
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004772:	2304      	movs	r3, #4
 8004774:	e014      	b.n	80047a0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004788:	2301      	movs	r3, #1
 800478a:	e009      	b.n	80047a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2240      	movs	r2, #64	; 0x40
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800479e:	2300      	movs	r3, #0
  
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20000000 	.word	0x20000000
 80047b0:	10624dd3 	.word	0x10624dd3

080047b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <SDMMC_GetCmdError+0x50>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <SDMMC_GetCmdError+0x54>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0a5b      	lsrs	r3, r3, #9
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047e0:	e009      	b.n	80047f6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f1      	beq.n	80047d2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	22c5      	movs	r2, #197	; 0xc5
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000000 	.word	0x20000000
 8004808:	10624dd3 	.word	0x10624dd3

0800480c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004810:	4904      	ldr	r1, [pc, #16]	; (8004824 <MX_FATFS_Init+0x18>)
 8004812:	4805      	ldr	r0, [pc, #20]	; (8004828 <MX_FATFS_Init+0x1c>)
 8004814:	f003 f860 	bl	80078d8 <FATFS_LinkDriver>
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <MX_FATFS_Init+0x20>)
 800481e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004820:	bf00      	nop
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000218 	.word	0x20000218
 8004828:	08008c3c 	.word	0x08008c3c
 800482c:	20000214 	.word	0x20000214

08004830 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004834:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800484a:	f000 f87b 	bl	8004944 <BSP_SD_IsDetected>
 800484e:	4603      	mov	r3, r0
 8004850:	2b01      	cmp	r3, #1
 8004852:	d001      	beq.n	8004858 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e012      	b.n	800487e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004858:	480b      	ldr	r0, [pc, #44]	; (8004888 <BSP_SD_Init+0x48>)
 800485a:	f7fd ff1b 	bl	8002694 <HAL_SD_Init>
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004868:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800486c:	4806      	ldr	r0, [pc, #24]	; (8004888 <BSP_SD_Init+0x48>)
 800486e:	f7fe fb63 	bl	8002f38 <HAL_SD_ConfigWideBusOperation>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800487c:	79fb      	ldrb	r3, [r7, #7]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000084 	.word	0x20000084

0800488c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	68f9      	ldr	r1, [r7, #12]
 80048a2:	4806      	ldr	r0, [pc, #24]	; (80048bc <BSP_SD_ReadBlocks_DMA+0x30>)
 80048a4:	f7fd ffa6 	bl	80027f4 <HAL_SD_ReadBlocks_DMA>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000084 	.word	0x20000084

080048c0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	4806      	ldr	r0, [pc, #24]	; (80048f0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80048d8:	f7fe f86e 	bl	80029b8 <HAL_SD_WriteBlocks_DMA>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000084 	.word	0x20000084

080048f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80048f8:	4805      	ldr	r0, [pc, #20]	; (8004910 <BSP_SD_GetCardState+0x1c>)
 80048fa:	f7fe fbb7 	bl	800306c <HAL_SD_GetCardState>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b04      	cmp	r3, #4
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
}
 800490a:	4618      	mov	r0, r3
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000084 	.word	0x20000084

08004914 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4803      	ldr	r0, [pc, #12]	; (800492c <BSP_SD_GetCardInfo+0x18>)
 8004920:	f7fe fade 	bl	8002ee0 <HAL_SD_GetCardInfo>
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000084 	.word	0x20000084

08004930 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004938:	f000 f97a 	bl	8004c30 <BSP_SD_ReadCpltCallback>
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800494a:	2301      	movs	r3, #1
 800494c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	b2db      	uxtb	r3, r3
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004966:	f7fc fba1 	bl	80010ac <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800496c:	e006      	b.n	800497c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800496e:	f7ff ffc1 	bl	80048f4 <BSP_SD_GetCardState>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004978:	2300      	movs	r3, #0
 800497a:	e009      	b.n	8004990 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800497c:	f7fc fb96 	bl	80010ac <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d8f0      	bhi.n	800496e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <SD_CheckStatus+0x38>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80049a8:	f7ff ffa4 	bl	80048f4 <BSP_SD_GetCardState>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <SD_CheckStatus+0x38>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <SD_CheckStatus+0x38>)
 80049c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80049c2:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <SD_CheckStatus+0x38>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	b2db      	uxtb	r3, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000009 	.word	0x20000009

080049d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80049de:	f7ff ff2f 	bl	8004840 <BSP_SD_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d107      	bne.n	80049f8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ffd4 	bl	8004998 <SD_CheckStatus>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <SD_initialize+0x34>)
 80049f6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <SD_initialize+0x34>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000009 	.word	0x20000009

08004a0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ffbd 	bl	8004998 <SD_CheckStatus>
 8004a1e:	4603      	mov	r3, r0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004a3c:	f247 5030 	movw	r0, #30000	; 0x7530
 8004a40:	f7ff ff8d 	bl	800495e <SD_CheckStatusWithTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da01      	bge.n	8004a4e <SD_read+0x26>
  {
    return res;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	e03b      	b.n	8004ac6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	68b8      	ldr	r0, [r7, #8]
 8004a54:	f7ff ff1a 	bl	800488c <BSP_SD_ReadBlocks_DMA>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d132      	bne.n	8004ac4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <SD_read+0xa8>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004a64:	f7fc fb22 	bl	80010ac <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004a6a:	bf00      	nop
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <SD_read+0xa8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d108      	bne.n	8004a86 <SD_read+0x5e>
 8004a74:	f7fc fb1a 	bl	80010ac <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d9f2      	bls.n	8004a6c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <SD_read+0xa8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75fb      	strb	r3, [r7, #23]
 8004a92:	e017      	b.n	8004ac4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <SD_read+0xa8>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004a9a:	f7fc fb07 	bl	80010ac <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004aa0:	e007      	b.n	8004ab2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004aa2:	f7ff ff27 	bl	80048f4 <BSP_SD_GetCardState>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <SD_read+0x8a>
          {
            res = RES_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004ab0:	e008      	b.n	8004ac4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ab2:	f7fc fafb 	bl	80010ac <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f247 522f 	movw	r2, #29999	; 0x752f
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d9ee      	bls.n	8004aa2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000220 	.word	0x20000220

08004ad4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004ae8:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <SD_write+0xa8>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004aee:	f247 5030 	movw	r0, #30000	; 0x7530
 8004af2:	f7ff ff34 	bl	800495e <SD_CheckStatusWithTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	da01      	bge.n	8004b00 <SD_write+0x2c>
  {
    return res;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	e038      	b.n	8004b72 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	68b8      	ldr	r0, [r7, #8]
 8004b06:	f7ff fedb 	bl	80048c0 <BSP_SD_WriteBlocks_DMA>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d12f      	bne.n	8004b70 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004b10:	f7fc facc 	bl	80010ac <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004b16:	bf00      	nop
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <SD_write+0xa8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d108      	bne.n	8004b32 <SD_write+0x5e>
 8004b20:	f7fc fac4 	bl	80010ac <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f247 522f 	movw	r2, #29999	; 0x752f
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d9f2      	bls.n	8004b18 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <SD_write+0xa8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
 8004b3e:	e017      	b.n	8004b70 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004b40:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <SD_write+0xa8>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004b46:	f7fc fab1 	bl	80010ac <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004b4c:	e007      	b.n	8004b5e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004b4e:	f7ff fed1 	bl	80048f4 <BSP_SD_GetCardState>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <SD_write+0x8a>
          {
            res = RES_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004b5c:	e008      	b.n	8004b70 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004b5e:	f7fc faa5 	bl	80010ac <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f247 522f 	movw	r2, #29999	; 0x752f
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d9ee      	bls.n	8004b4e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	2000021c 	.word	0x2000021c

08004b80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	; 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	603a      	str	r2, [r7, #0]
 8004b8a:	71fb      	strb	r3, [r7, #7]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004b96:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <SD_ioctl+0xac>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <SD_ioctl+0x28>
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e03c      	b.n	8004c22 <SD_ioctl+0xa2>

  switch (cmd)
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d834      	bhi.n	8004c18 <SD_ioctl+0x98>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <SD_ioctl+0x34>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bcd 	.word	0x08004bcd
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bff 	.word	0x08004bff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004bca:	e028      	b.n	8004c1e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fe9f 	bl	8004914 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004be2:	e01c      	b.n	8004c1e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fe93 	bl	8004914 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004bfc:	e00f      	b.n	8004c1e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004bfe:	f107 030c 	add.w	r3, r7, #12
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fe86 	bl	8004914 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	0a5a      	lsrs	r2, r3, #9
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004c16:	e002      	b.n	8004c1e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000009 	.word	0x20000009

08004c30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <BSP_SD_ReadCpltCallback+0x14>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	20000220 	.word	0x20000220

08004c48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <disk_status+0x30>)
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	79fa      	ldrb	r2, [r7, #7]
 8004c60:	4905      	ldr	r1, [pc, #20]	; (8004c78 <disk_status+0x30>)
 8004c62:	440a      	add	r2, r1
 8004c64:	7a12      	ldrb	r2, [r2, #8]
 8004c66:	4610      	mov	r0, r2
 8004c68:	4798      	blx	r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	2000024c 	.word	0x2000024c

08004c7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <disk_initialize+0x48>)
 8004c8e:	5cd3      	ldrb	r3, [r2, r3]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d111      	bne.n	8004cb8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <disk_initialize+0x48>)
 8004c98:	2101      	movs	r1, #1
 8004c9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <disk_initialize+0x48>)
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	79fa      	ldrb	r2, [r7, #7]
 8004caa:	4906      	ldr	r1, [pc, #24]	; (8004cc4 <disk_initialize+0x48>)
 8004cac:	440a      	add	r2, r1
 8004cae:	7a12      	ldrb	r2, [r2, #8]
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	2000024c 	.word	0x2000024c

08004cc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <disk_read+0x3c>)
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	689c      	ldr	r4, [r3, #8]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <disk_read+0x3c>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	7a18      	ldrb	r0, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	47a0      	blx	r4
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	2000024c 	.word	0x2000024c

08004d08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <disk_write+0x3c>)
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	68dc      	ldr	r4, [r3, #12]
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	4a07      	ldr	r2, [pc, #28]	; (8004d44 <disk_write+0x3c>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	7a18      	ldrb	r0, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	47a0      	blx	r4
 8004d34:	4603      	mov	r3, r0
 8004d36:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd90      	pop	{r4, r7, pc}
 8004d42:	bf00      	nop
 8004d44:	2000024c 	.word	0x2000024c

08004d48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	603a      	str	r2, [r7, #0]
 8004d52:	71fb      	strb	r3, [r7, #7]
 8004d54:	460b      	mov	r3, r1
 8004d56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <disk_ioctl+0x38>)
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	79fa      	ldrb	r2, [r7, #7]
 8004d66:	4906      	ldr	r1, [pc, #24]	; (8004d80 <disk_ioctl+0x38>)
 8004d68:	440a      	add	r2, r1
 8004d6a:	7a10      	ldrb	r0, [r2, #8]
 8004d6c:	79b9      	ldrb	r1, [r7, #6]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4798      	blx	r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2000024c 	.word	0x2000024c

08004d84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004d94:	89fb      	ldrh	r3, [r7, #14]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	b21a      	sxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b21b      	sxth	r3, r3
 8004da4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004da6:	89fb      	ldrh	r3, [r7, #14]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3303      	adds	r3, #3
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	3202      	adds	r2, #2
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	3201      	adds	r2, #1
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
	return rv;
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	887b      	ldrh	r3, [r7, #2]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	0a1b      	lsrs	r3, r3, #8
 8004e6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00d      	beq.n	8004ebe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	1c53      	adds	r3, r2, #1
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	1c59      	adds	r1, r3, #1
 8004eac:	6179      	str	r1, [r7, #20]
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f1      	bne.n	8004ea2 <mem_cpy+0x1a>
	}
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004eca:	b480      	push	{r7}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	617a      	str	r2, [r7, #20]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f3      	bne.n	8004eda <mem_set+0x10>
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	61fa      	str	r2, [r7, #28]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	61ba      	str	r2, [r7, #24]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	1acb      	subs	r3, r1, r3
 8004f2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <mem_cmp+0x40>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0eb      	beq.n	8004f18 <mem_cmp+0x18>

	return r;
 8004f40:	697b      	ldr	r3, [r7, #20]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3724      	adds	r7, #36	; 0x24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004f58:	e002      	b.n	8004f60 <chk_chr+0x12>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <chk_chr+0x26>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d1f2      	bne.n	8004f5a <chk_chr+0xc>
	return *str;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	781b      	ldrb	r3, [r3, #0]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e029      	b.n	8004fec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f98:	4a27      	ldr	r2, [pc, #156]	; (8005038 <chk_lock+0xb4>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	4413      	add	r3, r2
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01d      	beq.n	8004fe2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fa6:	4a24      	ldr	r2, [pc, #144]	; (8005038 <chk_lock+0xb4>)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4413      	add	r3, r2
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d116      	bne.n	8004fe6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <chk_lock+0xb4>)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d10c      	bne.n	8004fe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fcc:	4a1a      	ldr	r2, [pc, #104]	; (8005038 <chk_lock+0xb4>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d102      	bne.n	8004fe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fe0:	e007      	b.n	8004ff2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d9d2      	bls.n	8004f98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d109      	bne.n	800500c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <chk_lock+0x80>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d101      	bne.n	8005008 <chk_lock+0x84>
 8005004:	2300      	movs	r3, #0
 8005006:	e010      	b.n	800502a <chk_lock+0xa6>
 8005008:	2312      	movs	r3, #18
 800500a:	e00e      	b.n	800502a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d108      	bne.n	8005024 <chk_lock+0xa0>
 8005012:	4a09      	ldr	r2, [pc, #36]	; (8005038 <chk_lock+0xb4>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	4413      	add	r3, r2
 800501a:	330c      	adds	r3, #12
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d101      	bne.n	8005028 <chk_lock+0xa4>
 8005024:	2310      	movs	r3, #16
 8005026:	e000      	b.n	800502a <chk_lock+0xa6>
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	2000022c 	.word	0x2000022c

0800503c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005042:	2300      	movs	r3, #0
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	e002      	b.n	800504e <enq_lock+0x12>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3301      	adds	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d806      	bhi.n	8005062 <enq_lock+0x26>
 8005054:	4a09      	ldr	r2, [pc, #36]	; (800507c <enq_lock+0x40>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	4413      	add	r3, r2
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f2      	bne.n	8005048 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b02      	cmp	r3, #2
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	2000022c 	.word	0x2000022c

08005080 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e01f      	b.n	80050d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005090:	4a41      	ldr	r2, [pc, #260]	; (8005198 <inc_lock+0x118>)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	4413      	add	r3, r2
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d113      	bne.n	80050ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80050a2:	4a3d      	ldr	r2, [pc, #244]	; (8005198 <inc_lock+0x118>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	4413      	add	r3, r2
 80050aa:	3304      	adds	r3, #4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d109      	bne.n	80050ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80050b6:	4a38      	ldr	r2, [pc, #224]	; (8005198 <inc_lock+0x118>)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	4413      	add	r3, r2
 80050be:	3308      	adds	r3, #8
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d006      	beq.n	80050d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d9dc      	bls.n	8005090 <inc_lock+0x10>
 80050d6:	e000      	b.n	80050da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80050d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d132      	bne.n	8005146 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e002      	b.n	80050ec <inc_lock+0x6c>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d806      	bhi.n	8005100 <inc_lock+0x80>
 80050f2:	4a29      	ldr	r2, [pc, #164]	; (8005198 <inc_lock+0x118>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	4413      	add	r3, r2
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f2      	bne.n	80050e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d101      	bne.n	800510a <inc_lock+0x8a>
 8005106:	2300      	movs	r3, #0
 8005108:	e040      	b.n	800518c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4922      	ldr	r1, [pc, #136]	; (8005198 <inc_lock+0x118>)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	440b      	add	r3, r1
 8005116:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	491e      	ldr	r1, [pc, #120]	; (8005198 <inc_lock+0x118>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	440b      	add	r3, r1
 8005124:	3304      	adds	r3, #4
 8005126:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	491a      	ldr	r1, [pc, #104]	; (8005198 <inc_lock+0x118>)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	440b      	add	r3, r1
 8005134:	3308      	adds	r3, #8
 8005136:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <inc_lock+0x118>)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	4413      	add	r3, r2
 8005140:	330c      	adds	r3, #12
 8005142:	2200      	movs	r2, #0
 8005144:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <inc_lock+0xe0>
 800514c:	4a12      	ldr	r2, [pc, #72]	; (8005198 <inc_lock+0x118>)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	4413      	add	r3, r2
 8005154:	330c      	adds	r3, #12
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <inc_lock+0xe0>
 800515c:	2300      	movs	r3, #0
 800515e:	e015      	b.n	800518c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d108      	bne.n	8005178 <inc_lock+0xf8>
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <inc_lock+0x118>)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	4413      	add	r3, r2
 800516e:	330c      	adds	r3, #12
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	e001      	b.n	800517c <inc_lock+0xfc>
 8005178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800517c:	4906      	ldr	r1, [pc, #24]	; (8005198 <inc_lock+0x118>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	440b      	add	r3, r1
 8005184:	330c      	adds	r3, #12
 8005186:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	2000022c 	.word	0x2000022c

0800519c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d825      	bhi.n	80051fc <dec_lock+0x60>
		n = Files[i].ctr;
 80051b0:	4a17      	ldr	r2, [pc, #92]	; (8005210 <dec_lock+0x74>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	4413      	add	r3, r2
 80051b8:	330c      	adds	r3, #12
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c4:	d101      	bne.n	80051ca <dec_lock+0x2e>
 80051c6:	2300      	movs	r3, #0
 80051c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80051ca:	89fb      	ldrh	r3, [r7, #14]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <dec_lock+0x3a>
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80051d6:	4a0e      	ldr	r2, [pc, #56]	; (8005210 <dec_lock+0x74>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	4413      	add	r3, r2
 80051de:	330c      	adds	r3, #12
 80051e0:	89fa      	ldrh	r2, [r7, #14]
 80051e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <dec_lock+0x5a>
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <dec_lock+0x74>)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	4413      	add	r3, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	737b      	strb	r3, [r7, #13]
 80051fa:	e001      	b.n	8005200 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051fc:	2302      	movs	r3, #2
 80051fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005200:	7b7b      	ldrb	r3, [r7, #13]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	2000022c 	.word	0x2000022c

08005214 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e010      	b.n	8005244 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005222:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <clear_lock+0x44>)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4413      	add	r3, r2
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d105      	bne.n	800523e <clear_lock+0x2a>
 8005232:	4a09      	ldr	r2, [pc, #36]	; (8005258 <clear_lock+0x44>)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	4413      	add	r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d9eb      	bls.n	8005222 <clear_lock+0xe>
	}
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	2000022c 	.word	0x2000022c

0800525c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	78db      	ldrb	r3, [r3, #3]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d034      	beq.n	80052da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7858      	ldrb	r0, [r3, #1]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005280:	2301      	movs	r3, #1
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	f7ff fd40 	bl	8004d08 <disk_write>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <sync_window+0x38>
			res = FR_DISK_ERR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	e022      	b.n	80052da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	1ad2      	subs	r2, r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d217      	bcs.n	80052da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	789b      	ldrb	r3, [r3, #2]
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e010      	b.n	80052d4 <sync_window+0x78>
					wsect += fs->fsize;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7858      	ldrb	r0, [r3, #1]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052c6:	2301      	movs	r3, #1
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	f7ff fd1d 	bl	8004d08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d8eb      	bhi.n	80052b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d01b      	beq.n	8005334 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ffad 	bl	800525c <sync_window>
 8005302:	4603      	mov	r3, r0
 8005304:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d113      	bne.n	8005334 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7858      	ldrb	r0, [r3, #1]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005316:	2301      	movs	r3, #1
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	f7ff fcd5 	bl	8004cc8 <disk_read>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005334:	7bfb      	ldrb	r3, [r7, #15]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ff87 	bl	800525c <sync_window>
 800534e:	4603      	mov	r3, r0
 8005350:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d159      	bne.n	800540c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d149      	bne.n	80053f4 <sync_fs+0xb4>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	791b      	ldrb	r3, [r3, #4]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d145      	bne.n	80053f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	899b      	ldrh	r3, [r3, #12]
 8005372:	461a      	mov	r2, r3
 8005374:	2100      	movs	r1, #0
 8005376:	f7ff fda8 	bl	8004eca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3338      	adds	r3, #56	; 0x38
 800537e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005382:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fd37 	bl	8004dfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3338      	adds	r3, #56	; 0x38
 8005390:	4921      	ldr	r1, [pc, #132]	; (8005418 <sync_fs+0xd8>)
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fd4c 	bl	8004e30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3338      	adds	r3, #56	; 0x38
 800539c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80053a0:	491e      	ldr	r1, [pc, #120]	; (800541c <sync_fs+0xdc>)
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fd44 	bl	8004e30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3338      	adds	r3, #56	; 0x38
 80053ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f7ff fd3a 	bl	8004e30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3338      	adds	r3, #56	; 0x38
 80053c0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f7ff fd30 	bl	8004e30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7858      	ldrb	r0, [r3, #1]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e8:	2301      	movs	r3, #1
 80053ea:	f7ff fc8d 	bl	8004d08 <disk_write>
			fs->fsi_flag = 0;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fca3 	bl	8004d48 <disk_ioctl>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <sync_fs+0xcc>
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	41615252 	.word	0x41615252
 800541c:	61417272 	.word	0x61417272

08005420 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	3b02      	subs	r3, #2
 800542e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	3b02      	subs	r3, #2
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d301      	bcc.n	8005440 <clust2sect+0x20>
 800543c:	2300      	movs	r3, #0
 800543e:	e008      	b.n	8005452 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	895b      	ldrh	r3, [r3, #10]
 8005444:	461a      	mov	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	fb03 f202 	mul.w	r2, r3, r2
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	4413      	add	r3, r2
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d904      	bls.n	800547e <get_fat+0x20>
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <get_fat+0x26>
		val = 1;	/* Internal error */
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e0bb      	b.n	80055fc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005484:	f04f 33ff 	mov.w	r3, #4294967295
 8005488:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b03      	cmp	r3, #3
 8005490:	f000 8083 	beq.w	800559a <get_fat+0x13c>
 8005494:	2b03      	cmp	r3, #3
 8005496:	f300 80a7 	bgt.w	80055e8 <get_fat+0x18a>
 800549a:	2b01      	cmp	r3, #1
 800549c:	d002      	beq.n	80054a4 <get_fat+0x46>
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d056      	beq.n	8005550 <get_fat+0xf2>
 80054a2:	e0a1      	b.n	80055e8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	899b      	ldrh	r3, [r3, #12]
 80054ba:	4619      	mov	r1, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	fbb3 f3f1 	udiv	r3, r3, r1
 80054c2:	4413      	add	r3, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	6938      	ldr	r0, [r7, #16]
 80054c8:	f7ff ff0c 	bl	80052e4 <move_window>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f040 808d 	bne.w	80055ee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	60fa      	str	r2, [r7, #12]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	8992      	ldrh	r2, [r2, #12]
 80054de:	fbb3 f1f2 	udiv	r1, r3, r2
 80054e2:	fb01 f202 	mul.w	r2, r1, r2
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	899b      	ldrh	r3, [r3, #12]
 80054fa:	4619      	mov	r1, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005502:	4413      	add	r3, r2
 8005504:	4619      	mov	r1, r3
 8005506:	6938      	ldr	r0, [r7, #16]
 8005508:	f7ff feec 	bl	80052e4 <move_window>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d16f      	bne.n	80055f2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	899b      	ldrh	r3, [r3, #12]
 8005516:	461a      	mov	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	fbb3 f1f2 	udiv	r1, r3, r2
 800551e:	fb01 f202 	mul.w	r2, r1, r2
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	461a      	mov	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <get_fat+0xe8>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	091b      	lsrs	r3, r3, #4
 8005544:	e002      	b.n	800554c <get_fat+0xee>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554c:	617b      	str	r3, [r7, #20]
			break;
 800554e:	e055      	b.n	80055fc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	899b      	ldrh	r3, [r3, #12]
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	4619      	mov	r1, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	fbb3 f3f1 	udiv	r3, r3, r1
 8005564:	4413      	add	r3, r2
 8005566:	4619      	mov	r1, r3
 8005568:	6938      	ldr	r0, [r7, #16]
 800556a:	f7ff febb 	bl	80052e4 <move_window>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d140      	bne.n	80055f6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	8992      	ldrh	r2, [r2, #12]
 8005582:	fbb3 f0f2 	udiv	r0, r3, r2
 8005586:	fb00 f202 	mul.w	r2, r0, r2
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	440b      	add	r3, r1
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fbf8 	bl	8004d84 <ld_word>
 8005594:	4603      	mov	r3, r0
 8005596:	617b      	str	r3, [r7, #20]
			break;
 8005598:	e030      	b.n	80055fc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	899b      	ldrh	r3, [r3, #12]
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	4619      	mov	r1, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ae:	4413      	add	r3, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f7ff fe96 	bl	80052e4 <move_window>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11d      	bne.n	80055fa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	8992      	ldrh	r2, [r2, #12]
 80055cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80055d0:	fb00 f202 	mul.w	r2, r0, r2
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	440b      	add	r3, r1
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fbeb 	bl	8004db4 <ld_dword>
 80055de:	4603      	mov	r3, r0
 80055e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055e4:	617b      	str	r3, [r7, #20]
			break;
 80055e6:	e009      	b.n	80055fc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80055e8:	2301      	movs	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e006      	b.n	80055fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055ee:	bf00      	nop
 80055f0:	e004      	b.n	80055fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055f2:	bf00      	nop
 80055f4:	e002      	b.n	80055fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055fa:	bf00      	nop
		}
	}

	return val;
 80055fc:	697b      	ldr	r3, [r7, #20]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005606:	b590      	push	{r4, r7, lr}
 8005608:	b089      	sub	sp, #36	; 0x24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005612:	2302      	movs	r3, #2
 8005614:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b01      	cmp	r3, #1
 800561a:	f240 8109 	bls.w	8005830 <put_fat+0x22a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	429a      	cmp	r2, r3
 8005626:	f080 8103 	bcs.w	8005830 <put_fat+0x22a>
		switch (fs->fs_type) {
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b03      	cmp	r3, #3
 8005630:	f000 80b6 	beq.w	80057a0 <put_fat+0x19a>
 8005634:	2b03      	cmp	r3, #3
 8005636:	f300 80fb 	bgt.w	8005830 <put_fat+0x22a>
 800563a:	2b01      	cmp	r3, #1
 800563c:	d003      	beq.n	8005646 <put_fat+0x40>
 800563e:	2b02      	cmp	r3, #2
 8005640:	f000 8083 	beq.w	800574a <put_fat+0x144>
 8005644:	e0f4      	b.n	8005830 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4413      	add	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	899b      	ldrh	r3, [r3, #12]
 800565c:	4619      	mov	r1, r3
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	fbb3 f3f1 	udiv	r3, r3, r1
 8005664:	4413      	add	r3, r2
 8005666:	4619      	mov	r1, r3
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff fe3b 	bl	80052e4 <move_window>
 800566e:	4603      	mov	r3, r0
 8005670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005672:	7ffb      	ldrb	r3, [r7, #31]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f040 80d4 	bne.w	8005822 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	61ba      	str	r2, [r7, #24]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	8992      	ldrh	r2, [r2, #12]
 800568a:	fbb3 f0f2 	udiv	r0, r3, r2
 800568e:	fb00 f202 	mul.w	r2, r0, r2
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	440b      	add	r3, r1
 8005696:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00d      	beq.n	80056be <put_fat+0xb8>
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	b25b      	sxtb	r3, r3
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	b25a      	sxtb	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	b25b      	sxtb	r3, r3
 80056b6:	4313      	orrs	r3, r2
 80056b8:	b25b      	sxtb	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	e001      	b.n	80056c2 <put_fat+0xbc>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	899b      	ldrh	r3, [r3, #12]
 80056d4:	4619      	mov	r1, r3
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80056dc:	4413      	add	r3, r2
 80056de:	4619      	mov	r1, r3
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff fdff 	bl	80052e4 <move_window>
 80056e6:	4603      	mov	r3, r0
 80056e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056ea:	7ffb      	ldrb	r3, [r7, #31]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 809a 	bne.w	8005826 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	899b      	ldrh	r3, [r3, #12]
 80056fc:	461a      	mov	r2, r3
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	fbb3 f0f2 	udiv	r0, r3, r2
 8005704:	fb00 f202 	mul.w	r2, r0, r2
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	440b      	add	r3, r1
 800570c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <put_fat+0x11a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e00e      	b.n	800573e <put_fat+0x138>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	b25b      	sxtb	r3, r3
 8005726:	f023 030f 	bic.w	r3, r3, #15
 800572a:	b25a      	sxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	0a1b      	lsrs	r3, r3, #8
 8005730:	b25b      	sxtb	r3, r3
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	b25b      	sxtb	r3, r3
 8005738:	4313      	orrs	r3, r2
 800573a:	b25b      	sxtb	r3, r3
 800573c:	b2db      	uxtb	r3, r3
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	70da      	strb	r2, [r3, #3]
			break;
 8005748:	e072      	b.n	8005830 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	899b      	ldrh	r3, [r3, #12]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	b29b      	uxth	r3, r3
 8005756:	4619      	mov	r1, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	fbb3 f3f1 	udiv	r3, r3, r1
 800575e:	4413      	add	r3, r2
 8005760:	4619      	mov	r1, r3
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fdbe 	bl	80052e4 <move_window>
 8005768:	4603      	mov	r3, r0
 800576a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800576c:	7ffb      	ldrb	r3, [r7, #31]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d15b      	bne.n	800582a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	8992      	ldrh	r2, [r2, #12]
 8005780:	fbb3 f0f2 	udiv	r0, r3, r2
 8005784:	fb00 f202 	mul.w	r2, r0, r2
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	440b      	add	r3, r1
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	b292      	uxth	r2, r2
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fb31 	bl	8004dfa <st_word>
			fs->wflag = 1;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	70da      	strb	r2, [r3, #3]
			break;
 800579e:	e047      	b.n	8005830 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	899b      	ldrh	r3, [r3, #12]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	4619      	mov	r1, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80057b4:	4413      	add	r3, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff fd93 	bl	80052e4 <move_window>
 80057be:	4603      	mov	r3, r0
 80057c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057c2:	7ffb      	ldrb	r3, [r7, #31]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d132      	bne.n	800582e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	8992      	ldrh	r2, [r2, #12]
 80057dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80057e0:	fb00 f202 	mul.w	r2, r0, r2
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	440b      	add	r3, r1
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fae3 	bl	8004db4 <ld_dword>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80057f4:	4323      	orrs	r3, r4
 80057f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	8992      	ldrh	r2, [r2, #12]
 8005806:	fbb3 f0f2 	udiv	r0, r3, r2
 800580a:	fb00 f202 	mul.w	r2, r0, r2
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	440b      	add	r3, r1
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fb0b 	bl	8004e30 <st_dword>
			fs->wflag = 1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	70da      	strb	r2, [r3, #3]
			break;
 8005820:	e006      	b.n	8005830 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005822:	bf00      	nop
 8005824:	e004      	b.n	8005830 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <put_fat+0x22a>
			if (res != FR_OK) break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <put_fat+0x22a>
			if (res != FR_OK) break;
 800582e:	bf00      	nop
		}
	}
	return res;
 8005830:	7ffb      	ldrb	r3, [r7, #31]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3724      	adds	r7, #36	; 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd90      	pop	{r4, r7, pc}

0800583a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b088      	sub	sp, #32
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d904      	bls.n	8005860 <remove_chain+0x26>
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	429a      	cmp	r2, r3
 800585e:	d301      	bcc.n	8005864 <remove_chain+0x2a>
 8005860:	2302      	movs	r3, #2
 8005862:	e04b      	b.n	80058fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800586a:	f04f 32ff 	mov.w	r2, #4294967295
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	69b8      	ldr	r0, [r7, #24]
 8005872:	f7ff fec8 	bl	8005606 <put_fat>
 8005876:	4603      	mov	r3, r0
 8005878:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800587a:	7ffb      	ldrb	r3, [r7, #31]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <remove_chain+0x4a>
 8005880:	7ffb      	ldrb	r3, [r7, #31]
 8005882:	e03b      	b.n	80058fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff fde9 	bl	800545e <get_fat>
 800588c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d031      	beq.n	80058f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <remove_chain+0x64>
 800589a:	2302      	movs	r3, #2
 800589c:	e02e      	b.n	80058fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d101      	bne.n	80058aa <remove_chain+0x70>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e028      	b.n	80058fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80058aa:	2200      	movs	r2, #0
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	69b8      	ldr	r0, [r7, #24]
 80058b0:	f7ff fea9 	bl	8005606 <put_fat>
 80058b4:	4603      	mov	r3, r0
 80058b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <remove_chain+0x88>
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	e01c      	b.n	80058fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	3b02      	subs	r3, #2
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d20b      	bcs.n	80058e8 <remove_chain+0xae>
			fs->free_clst++;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	791b      	ldrb	r3, [r3, #4]
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d3c6      	bcc.n	8005884 <remove_chain+0x4a>
 80058f6:	e000      	b.n	80058fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80058f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10d      	bne.n	8005936 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <create_chain+0x2c>
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	429a      	cmp	r2, r3
 800592e:	d31b      	bcc.n	8005968 <create_chain+0x64>
 8005930:	2301      	movs	r3, #1
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	e018      	b.n	8005968 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fd90 	bl	800545e <get_fat>
 800593e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d801      	bhi.n	800594a <create_chain+0x46>
 8005946:	2301      	movs	r3, #1
 8005948:	e070      	b.n	8005a2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d101      	bne.n	8005956 <create_chain+0x52>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	e06a      	b.n	8005a2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	429a      	cmp	r2, r3
 800595e:	d201      	bcs.n	8005964 <create_chain+0x60>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	e063      	b.n	8005a2c <create_chain+0x128>
		scl = clst;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3301      	adds	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	429a      	cmp	r2, r3
 800597a:	d307      	bcc.n	800598c <create_chain+0x88>
				ncl = 2;
 800597c:	2302      	movs	r3, #2
 800597e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	429a      	cmp	r2, r3
 8005986:	d901      	bls.n	800598c <create_chain+0x88>
 8005988:	2300      	movs	r3, #0
 800598a:	e04f      	b.n	8005a2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fd65 	bl	800545e <get_fat>
 8005994:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d003      	beq.n	80059aa <create_chain+0xa6>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d101      	bne.n	80059ae <create_chain+0xaa>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	e03e      	b.n	8005a2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d1da      	bne.n	800596c <create_chain+0x68>
 80059b6:	2300      	movs	r3, #0
 80059b8:	e038      	b.n	8005a2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80059ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	69f9      	ldr	r1, [r7, #28]
 80059c2:	6938      	ldr	r0, [r7, #16]
 80059c4:	f7ff fe1f 	bl	8005606 <put_fat>
 80059c8:	4603      	mov	r3, r0
 80059ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <create_chain+0xe2>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6938      	ldr	r0, [r7, #16]
 80059de:	f7ff fe12 	bl	8005606 <put_fat>
 80059e2:	4603      	mov	r3, r0
 80059e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d116      	bne.n	8005a1a <create_chain+0x116>
		fs->last_clst = ncl;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	3b02      	subs	r3, #2
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d804      	bhi.n	8005a0a <create_chain+0x106>
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	1e5a      	subs	r2, r3, #1
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	791b      	ldrb	r3, [r3, #4]
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	711a      	strb	r2, [r3, #4]
 8005a18:	e007      	b.n	8005a2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d102      	bne.n	8005a26 <create_chain+0x122>
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	e000      	b.n	8005a28 <create_chain+0x124>
 8005a26:	2301      	movs	r3, #1
 8005a28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005a2a:	69fb      	ldr	r3, [r7, #28]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	3304      	adds	r3, #4
 8005a4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	899b      	ldrh	r3, [r3, #12]
 8005a50:	461a      	mov	r2, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	8952      	ldrh	r2, [r2, #10]
 8005a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1d1a      	adds	r2, r3, #4
 8005a66:	613a      	str	r2, [r7, #16]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <clmt_clust+0x42>
 8005a72:	2300      	movs	r3, #0
 8005a74:	e010      	b.n	8005a98 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d307      	bcc.n	8005a8e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a8c:	e7e9      	b.n	8005a62 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005a8e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aba:	d204      	bcs.n	8005ac6 <dir_sdi+0x22>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <dir_sdi+0x26>
		return FR_INT_ERR;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e071      	b.n	8005bae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <dir_sdi+0x46>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d902      	bls.n	8005aea <dir_sdi+0x46>
		clst = fs->dirbase;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10c      	bne.n	8005b0a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	8912      	ldrh	r2, [r2, #8]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d301      	bcc.n	8005b00 <dir_sdi+0x5c>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e056      	b.n	8005bae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	61da      	str	r2, [r3, #28]
 8005b08:	e02d      	b.n	8005b66 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	895b      	ldrh	r3, [r3, #10]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	899b      	ldrh	r3, [r3, #12]
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b1a:	e019      	b.n	8005b50 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6979      	ldr	r1, [r7, #20]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fc9c 	bl	800545e <get_fat>
 8005b26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d101      	bne.n	8005b34 <dir_sdi+0x90>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e03c      	b.n	8005bae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d904      	bls.n	8005b44 <dir_sdi+0xa0>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d301      	bcc.n	8005b48 <dir_sdi+0xa4>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e032      	b.n	8005bae <dir_sdi+0x10a>
			ofs -= csz;
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d2e1      	bcs.n	8005b1c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f7ff fc60 	bl	8005420 <clust2sect>
 8005b60:	4602      	mov	r2, r0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <dir_sdi+0xd4>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e01a      	b.n	8005bae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	899b      	ldrh	r3, [r3, #12]
 8005b80:	4619      	mov	r1, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b88:	441a      	add	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	899b      	ldrh	r3, [r3, #12]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ba0:	fb00 f202 	mul.w	r2, r0, r2
 8005ba4:	1a9b      	subs	r3, r3, r2
 8005ba6:	18ca      	adds	r2, r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	3320      	adds	r3, #32
 8005bcc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <dir_next+0x28>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bdc:	d301      	bcc.n	8005be2 <dir_next+0x2c>
 8005bde:	2304      	movs	r3, #4
 8005be0:	e0bb      	b.n	8005d5a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	899b      	ldrh	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bee:	fb01 f202 	mul.w	r2, r1, r2
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f040 809d 	bne.w	8005d34 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	8912      	ldrh	r2, [r2, #8]
 8005c14:	4293      	cmp	r3, r2
 8005c16:	f0c0 808d 	bcc.w	8005d34 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	61da      	str	r2, [r3, #28]
 8005c20:	2304      	movs	r3, #4
 8005c22:	e09a      	b.n	8005d5a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	899b      	ldrh	r3, [r3, #12]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	8952      	ldrh	r2, [r2, #10]
 8005c34:	3a01      	subs	r2, #1
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d17b      	bne.n	8005d34 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f7ff fc0a 	bl	800545e <get_fat>
 8005c4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d801      	bhi.n	8005c56 <dir_next+0xa0>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e081      	b.n	8005d5a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d101      	bne.n	8005c62 <dir_next+0xac>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07b      	b.n	8005d5a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d359      	bcc.n	8005d20 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	61da      	str	r2, [r3, #28]
 8005c78:	2304      	movs	r3, #4
 8005c7a:	e06e      	b.n	8005d5a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f7ff fe3d 	bl	8005904 <create_chain>
 8005c8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <dir_next+0xe0>
 8005c92:	2307      	movs	r3, #7
 8005c94:	e061      	b.n	8005d5a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <dir_next+0xea>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e05c      	b.n	8005d5a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d101      	bne.n	8005cac <dir_next+0xf6>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e056      	b.n	8005d5a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f7ff fad5 	bl	800525c <sync_window>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <dir_next+0x106>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e04e      	b.n	8005d5a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	899b      	ldrh	r3, [r3, #12]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2100      	movs	r1, #0
 8005cca:	f7ff f8fe 	bl	8004eca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff fba3 	bl	8005420 <clust2sect>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	635a      	str	r2, [r3, #52]	; 0x34
 8005ce0:	e012      	b.n	8005d08 <dir_next+0x152>
						fs->wflag = 1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fab7 	bl	800525c <sync_window>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <dir_next+0x142>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e030      	b.n	8005d5a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	635a      	str	r2, [r3, #52]	; 0x34
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	895b      	ldrh	r3, [r3, #10]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d3e6      	bcc.n	8005ce2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff fb79 	bl	8005420 <clust2sect>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	899b      	ldrh	r3, [r3, #12]
 8005d44:	461a      	mov	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d4c:	fb00 f202 	mul.w	r2, r0, r2
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	18ca      	adds	r2, r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b086      	sub	sp, #24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005d72:	2100      	movs	r1, #0
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff fe95 	bl	8005aa4 <dir_sdi>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d12b      	bne.n	8005ddc <dir_alloc+0x7a>
		n = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff faa8 	bl	80052e4 <move_window>
 8005d94:	4603      	mov	r3, r0
 8005d96:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d11d      	bne.n	8005dda <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2be5      	cmp	r3, #229	; 0xe5
 8005da6:	d004      	beq.n	8005db2 <dir_alloc+0x50>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d107      	bne.n	8005dc2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d102      	bne.n	8005dc6 <dir_alloc+0x64>
 8005dc0:	e00c      	b.n	8005ddc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fef4 	bl	8005bb6 <dir_next>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0d7      	beq.n	8005d88 <dir_alloc+0x26>
 8005dd8:	e000      	b.n	8005ddc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005dda:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d101      	bne.n	8005de6 <dir_alloc+0x84>
 8005de2:	2307      	movs	r3, #7
 8005de4:	75fb      	strb	r3, [r7, #23]
	return res;
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	331a      	adds	r3, #26
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe ffc0 	bl	8004d84 <ld_word>
 8005e04:	4603      	mov	r3, r0
 8005e06:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d109      	bne.n	8005e24 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	3314      	adds	r3, #20
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe ffb5 	bl	8004d84 <ld_word>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	331a      	adds	r3, #26
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	b292      	uxth	r2, r2
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fe ffd8 	bl	8004dfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d109      	bne.n	8005e66 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f103 0214 	add.w	r2, r3, #20
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f7fe ffca 	bl	8004dfa <st_word>
	}
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	331a      	adds	r3, #26
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe ff80 	bl	8004d84 <ld_word>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <cmp_lfn+0x1e>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e059      	b.n	8005f42 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e96:	1e5a      	subs	r2, r3, #1
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	81fb      	strh	r3, [r7, #14]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	e033      	b.n	8005f16 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005eae:	4a27      	ldr	r2, [pc, #156]	; (8005f4c <cmp_lfn+0xdc>)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	4413      	add	r3, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fe ff61 	bl	8004d84 <ld_word>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01a      	beq.n	8005f02 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2bfe      	cmp	r3, #254	; 0xfe
 8005ed0:	d812      	bhi.n	8005ef8 <cmp_lfn+0x88>
 8005ed2:	89bb      	ldrh	r3, [r7, #12]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 fd4b 	bl	8007970 <ff_wtoupper>
 8005eda:	4603      	mov	r3, r0
 8005edc:	461c      	mov	r4, r3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	617a      	str	r2, [r7, #20]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 fd3f 	bl	8007970 <ff_wtoupper>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	d001      	beq.n	8005efc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e022      	b.n	8005f42 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005efc:	89bb      	ldrh	r3, [r7, #12]
 8005efe:	81fb      	strh	r3, [r7, #14]
 8005f00:	e006      	b.n	8005f10 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005f02:	89bb      	ldrh	r3, [r7, #12]
 8005f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d001      	beq.n	8005f10 <cmp_lfn+0xa0>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e018      	b.n	8005f42 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3301      	adds	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d9c8      	bls.n	8005eae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <cmp_lfn+0xd0>
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <cmp_lfn+0xd0>
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <cmp_lfn+0xd0>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005f40:	2301      	movs	r3, #1
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	08008cd0 	.word	0x08008cd0

08005f50 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	460b      	mov	r3, r1
 8005f60:	71fb      	strb	r3, [r7, #7]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	330d      	adds	r3, #13
 8005f6a:	79ba      	ldrb	r2, [r7, #6]
 8005f6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	330b      	adds	r3, #11
 8005f72:	220f      	movs	r2, #15
 8005f74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	331a      	adds	r3, #26
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe ff38 	bl	8004dfa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	4613      	mov	r3, r2
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	82fb      	strh	r3, [r7, #22]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005fa2:	8afb      	ldrh	r3, [r7, #22]
 8005fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d007      	beq.n	8005fbc <put_lfn+0x6c>
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	61fa      	str	r2, [r7, #28]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005fbc:	4a17      	ldr	r2, [pc, #92]	; (800601c <put_lfn+0xcc>)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4413      	add	r3, r2
 8005fca:	8afa      	ldrh	r2, [r7, #22]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe ff13 	bl	8004dfa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005fd4:	8afb      	ldrh	r3, [r7, #22]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <put_lfn+0x90>
 8005fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fde:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b0c      	cmp	r3, #12
 8005fea:	d9da      	bls.n	8005fa2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005fec:	8afb      	ldrh	r3, [r7, #22]
 8005fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d006      	beq.n	8006004 <put_lfn+0xb4>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <put_lfn+0xbc>
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	79fa      	ldrb	r2, [r7, #7]
 8006010:	701a      	strb	r2, [r3, #0]
}
 8006012:	bf00      	nop
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	08008cd0 	.word	0x08008cd0

08006020 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	; 0x30
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800602e:	220b      	movs	r2, #11
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7fe ff28 	bl	8004e88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b05      	cmp	r3, #5
 800603c:	d92b      	bls.n	8006096 <gen_numname+0x76>
		sr = seq;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006042:	e022      	b.n	800608a <gen_numname+0x6a>
			wc = *lfn++;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	1c9a      	adds	r2, r3, #2
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800604e:	2300      	movs	r3, #0
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
 8006052:	e017      	b.n	8006084 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	005a      	lsls	r2, r3, #1
 8006058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	4413      	add	r3, r2
 8006060:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006064:	085b      	lsrs	r3, r3, #1
 8006066:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <gen_numname+0x5e>
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006078:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800607c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	3301      	adds	r3, #1
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d9e4      	bls.n	8006054 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1d8      	bne.n	8006044 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006096:	2307      	movs	r3, #7
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	3330      	adds	r3, #48	; 0x30
 80060a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80060aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060ae:	2b39      	cmp	r3, #57	; 0x39
 80060b0:	d904      	bls.n	80060bc <gen_numname+0x9c>
 80060b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060b6:	3307      	adds	r3, #7
 80060b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80060c2:	3330      	adds	r3, #48	; 0x30
 80060c4:	443b      	add	r3, r7
 80060c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80060ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1df      	bne.n	800609a <gen_numname+0x7a>
	ns[i] = '~';
 80060da:	f107 0214 	add.w	r2, r7, #20
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	4413      	add	r3, r2
 80060e2:	227e      	movs	r2, #126	; 0x7e
 80060e4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ea:	e002      	b.n	80060f2 <gen_numname+0xd2>
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d205      	bcs.n	8006106 <gen_numname+0xe6>
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b20      	cmp	r3, #32
 8006104:	d1f2      	bne.n	80060ec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	2b07      	cmp	r3, #7
 800610a:	d807      	bhi.n	800611c <gen_numname+0xfc>
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	62ba      	str	r2, [r7, #40]	; 0x28
 8006112:	3330      	adds	r3, #48	; 0x30
 8006114:	443b      	add	r3, r7
 8006116:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800611a:	e000      	b.n	800611e <gen_numname+0xfe>
 800611c:	2120      	movs	r1, #32
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	627a      	str	r2, [r7, #36]	; 0x24
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	460a      	mov	r2, r1
 800612a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	2b07      	cmp	r3, #7
 8006130:	d9e9      	bls.n	8006106 <gen_numname+0xe6>
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	3730      	adds	r7, #48	; 0x30
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006148:	230b      	movs	r3, #11
 800614a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	b2da      	uxtb	r2, r3
 8006150:	0852      	lsrs	r2, r2, #1
 8006152:	01db      	lsls	r3, r3, #7
 8006154:	4313      	orrs	r3, r2
 8006156:	b2da      	uxtb	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	6079      	str	r1, [r7, #4]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	4413      	add	r3, r2
 8006162:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	3b01      	subs	r3, #1
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ed      	bne.n	800614c <sum_sfn+0x10>
	return sum;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800618c:	2100      	movs	r1, #0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fc88 	bl	8005aa4 <dir_sdi>
 8006194:	4603      	mov	r3, r0
 8006196:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <dir_find+0x24>
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	e0a9      	b.n	80062f6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80061a2:	23ff      	movs	r3, #255	; 0xff
 80061a4:	753b      	strb	r3, [r7, #20]
 80061a6:	7d3b      	ldrb	r3, [r7, #20]
 80061a8:	757b      	strb	r3, [r7, #21]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	4619      	mov	r1, r3
 80061b8:	6938      	ldr	r0, [r7, #16]
 80061ba:	f7ff f893 	bl	80052e4 <move_window>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f040 8090 	bne.w	80062ea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80061d2:	7dbb      	ldrb	r3, [r7, #22]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <dir_find+0x60>
 80061d8:	2304      	movs	r3, #4
 80061da:	75fb      	strb	r3, [r7, #23]
 80061dc:	e08a      	b.n	80062f4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	330b      	adds	r3, #11
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ea:	73fb      	strb	r3, [r7, #15]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	7bfa      	ldrb	r2, [r7, #15]
 80061f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80061f2:	7dbb      	ldrb	r3, [r7, #22]
 80061f4:	2be5      	cmp	r3, #229	; 0xe5
 80061f6:	d007      	beq.n	8006208 <dir_find+0x8a>
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <dir_find+0x98>
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b0f      	cmp	r3, #15
 8006206:	d006      	beq.n	8006216 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006208:	23ff      	movs	r3, #255	; 0xff
 800620a:	757b      	strb	r3, [r7, #21]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f04f 32ff 	mov.w	r2, #4294967295
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
 8006214:	e05e      	b.n	80062d4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b0f      	cmp	r3, #15
 800621a:	d136      	bne.n	800628a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b00      	cmp	r3, #0
 8006228:	d154      	bne.n	80062d4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800622a:	7dbb      	ldrb	r3, [r7, #22]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00d      	beq.n	8006250 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	7b5b      	ldrb	r3, [r3, #13]
 800623a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800623c:	7dbb      	ldrb	r3, [r7, #22]
 800623e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006242:	75bb      	strb	r3, [r7, #22]
 8006244:	7dbb      	ldrb	r3, [r7, #22]
 8006246:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006250:	7dba      	ldrb	r2, [r7, #22]
 8006252:	7d7b      	ldrb	r3, [r7, #21]
 8006254:	429a      	cmp	r2, r3
 8006256:	d115      	bne.n	8006284 <dir_find+0x106>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	330d      	adds	r3, #13
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	7d3a      	ldrb	r2, [r7, #20]
 8006262:	429a      	cmp	r2, r3
 8006264:	d10e      	bne.n	8006284 <dir_find+0x106>
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7ff fdfd 	bl	8005e70 <cmp_lfn>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <dir_find+0x106>
 800627c:	7d7b      	ldrb	r3, [r7, #21]
 800627e:	3b01      	subs	r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e000      	b.n	8006286 <dir_find+0x108>
 8006284:	23ff      	movs	r3, #255	; 0xff
 8006286:	757b      	strb	r3, [r7, #21]
 8006288:	e024      	b.n	80062d4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800628a:	7d7b      	ldrb	r3, [r7, #21]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <dir_find+0x126>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff ff51 	bl	800613c <sum_sfn>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	7d3b      	ldrb	r3, [r7, #20]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d024      	beq.n	80062ee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <dir_find+0x14a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a18      	ldr	r0, [r3, #32]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3324      	adds	r3, #36	; 0x24
 80062ba:	220b      	movs	r2, #11
 80062bc:	4619      	mov	r1, r3
 80062be:	f7fe fe1f 	bl	8004f00 <mem_cmp>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d014      	beq.n	80062f2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80062c8:	23ff      	movs	r3, #255	; 0xff
 80062ca:	757b      	strb	r3, [r7, #21]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80062d4:	2100      	movs	r1, #0
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fc6d 	bl	8005bb6 <dir_next>
 80062dc:	4603      	mov	r3, r0
 80062de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f43f af65 	beq.w	80061b2 <dir_find+0x34>
 80062e8:	e004      	b.n	80062f4 <dir_find+0x176>
		if (res != FR_OK) break;
 80062ea:	bf00      	nop
 80062ec:	e002      	b.n	80062f4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062f2:	bf00      	nop

	return res;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08c      	sub	sp, #48	; 0x30
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006314:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <dir_register+0x20>
 800631c:	2306      	movs	r3, #6
 800631e:	e0e0      	b.n	80064e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006320:	2300      	movs	r3, #0
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
 8006324:	e002      	b.n	800632c <dir_register+0x2c>
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	3301      	adds	r3, #1
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f4      	bne.n	8006326 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	220c      	movs	r2, #12
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fd9d 	bl	8004e88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d032      	beq.n	80063be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2240      	movs	r2, #64	; 0x40
 800635c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006360:	2301      	movs	r3, #1
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
 8006364:	e016      	b.n	8006394 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	f107 010c 	add.w	r1, r7, #12
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	f7ff fe53 	bl	8006020 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff feff 	bl	800617e <dir_find>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	3301      	adds	r3, #1
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	2b63      	cmp	r3, #99	; 0x63
 8006398:	d9e5      	bls.n	8006366 <dir_register+0x66>
 800639a:	e000      	b.n	800639e <dir_register+0x9e>
			if (res != FR_OK) break;
 800639c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	2b64      	cmp	r3, #100	; 0x64
 80063a2:	d101      	bne.n	80063a8 <dir_register+0xa8>
 80063a4:	2307      	movs	r3, #7
 80063a6:	e09c      	b.n	80064e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80063a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d002      	beq.n	80063b6 <dir_register+0xb6>
 80063b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063b4:	e095      	b.n	80064e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80063b6:	7dfa      	ldrb	r2, [r7, #23]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <dir_register+0xd8>
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	330c      	adds	r3, #12
 80063cc:	4a47      	ldr	r2, [pc, #284]	; (80064ec <dir_register+0x1ec>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	089b      	lsrs	r3, r3, #2
 80063d4:	3301      	adds	r3, #1
 80063d6:	e000      	b.n	80063da <dir_register+0xda>
 80063d8:	2301      	movs	r3, #1
 80063da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80063dc:	6a39      	ldr	r1, [r7, #32]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fcbf 	bl	8005d62 <dir_alloc>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80063ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d148      	bne.n	8006484 <dir_register+0x184>
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	623b      	str	r3, [r7, #32]
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d042      	beq.n	8006484 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	015b      	lsls	r3, r3, #5
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fb4a 	bl	8005aa4 <dir_sdi>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800641a:	2b00      	cmp	r3, #0
 800641c:	d132      	bne.n	8006484 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3324      	adds	r3, #36	; 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fe8a 	bl	800613c <sum_sfn>
 8006428:	4603      	mov	r3, r0
 800642a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	4619      	mov	r1, r3
 8006432:	69f8      	ldr	r0, [r7, #28]
 8006434:	f7fe ff56 	bl	80052e4 <move_window>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800643e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006442:	2b00      	cmp	r3, #0
 8006444:	d11d      	bne.n	8006482 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	6918      	ldr	r0, [r3, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a19      	ldr	r1, [r3, #32]
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	7efb      	ldrb	r3, [r7, #27]
 8006454:	f7ff fd7c 	bl	8005f50 <put_lfn>
				fs->wflag = 1;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2201      	movs	r2, #1
 800645c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800645e:	2100      	movs	r1, #0
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fba8 	bl	8005bb6 <dir_next>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800646c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006470:	2b00      	cmp	r3, #0
 8006472:	d107      	bne.n	8006484 <dir_register+0x184>
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	3b01      	subs	r3, #1
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1d5      	bne.n	800642c <dir_register+0x12c>
 8006480:	e000      	b.n	8006484 <dir_register+0x184>
				if (res != FR_OK) break;
 8006482:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006488:	2b00      	cmp	r3, #0
 800648a:	d128      	bne.n	80064de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	4619      	mov	r1, r3
 8006492:	69f8      	ldr	r0, [r7, #28]
 8006494:	f7fe ff26 	bl	80052e4 <move_window>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800649e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11b      	bne.n	80064de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	2220      	movs	r2, #32
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe fd0b 	bl	8004eca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a18      	ldr	r0, [r3, #32]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	220b      	movs	r2, #11
 80064be:	4619      	mov	r1, r3
 80064c0:	f7fe fce2 	bl	8004e88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	330c      	adds	r3, #12
 80064d0:	f002 0218 	and.w	r2, r2, #24
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2201      	movs	r2, #1
 80064dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80064de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3730      	adds	r7, #48	; 0x30
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	4ec4ec4f 	.word	0x4ec4ec4f

080064f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	61ba      	str	r2, [r7, #24]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4413      	add	r3, r2
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800651e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006520:	2b1f      	cmp	r3, #31
 8006522:	d940      	bls.n	80065a6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006526:	2b2f      	cmp	r3, #47	; 0x2f
 8006528:	d006      	beq.n	8006538 <create_name+0x48>
 800652a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800652c:	2b5c      	cmp	r3, #92	; 0x5c
 800652e:	d110      	bne.n	8006552 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006530:	e002      	b.n	8006538 <create_name+0x48>
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	3301      	adds	r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	4413      	add	r3, r2
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b2f      	cmp	r3, #47	; 0x2f
 8006542:	d0f6      	beq.n	8006532 <create_name+0x42>
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b5c      	cmp	r3, #92	; 0x5c
 800654e:	d0f0      	beq.n	8006532 <create_name+0x42>
			break;
 8006550:	e02a      	b.n	80065a8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2bfe      	cmp	r3, #254	; 0xfe
 8006556:	d901      	bls.n	800655c <create_name+0x6c>
 8006558:	2306      	movs	r3, #6
 800655a:	e17d      	b.n	8006858 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800655c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800655e:	b2db      	uxtb	r3, r3
 8006560:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006564:	2101      	movs	r1, #1
 8006566:	4618      	mov	r0, r3
 8006568:	f001 f9c6 	bl	80078f8 <ff_convert>
 800656c:	4603      	mov	r3, r0
 800656e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <create_name+0x8a>
 8006576:	2306      	movs	r3, #6
 8006578:	e16e      	b.n	8006858 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800657a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800657c:	2b7f      	cmp	r3, #127	; 0x7f
 800657e:	d809      	bhi.n	8006594 <create_name+0xa4>
 8006580:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006582:	4619      	mov	r1, r3
 8006584:	488d      	ldr	r0, [pc, #564]	; (80067bc <create_name+0x2cc>)
 8006586:	f7fe fce2 	bl	8004f4e <chk_chr>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <create_name+0xa4>
 8006590:	2306      	movs	r3, #6
 8006592:	e161      	b.n	8006858 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	617a      	str	r2, [r7, #20]
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80065a4:	e7b4      	b.n	8006510 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80065a6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	441a      	add	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80065b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065b4:	2b1f      	cmp	r3, #31
 80065b6:	d801      	bhi.n	80065bc <create_name+0xcc>
 80065b8:	2304      	movs	r3, #4
 80065ba:	e000      	b.n	80065be <create_name+0xce>
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80065c2:	e011      	b.n	80065e8 <create_name+0xf8>
		w = lfn[di - 1];
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80065ca:	3b01      	subs	r3, #1
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80065d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d002      	beq.n	80065e2 <create_name+0xf2>
 80065dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065de:	2b2e      	cmp	r3, #46	; 0x2e
 80065e0:	d106      	bne.n	80065f0 <create_name+0x100>
		di--;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1ea      	bne.n	80065c4 <create_name+0xd4>
 80065ee:	e000      	b.n	80065f2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80065f0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <create_name+0x118>
 8006604:	2306      	movs	r3, #6
 8006606:	e127      	b.n	8006858 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3324      	adds	r3, #36	; 0x24
 800660c:	220b      	movs	r2, #11
 800660e:	2120      	movs	r1, #32
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fc5a 	bl	8004eca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006616:	2300      	movs	r3, #0
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e002      	b.n	8006622 <create_name+0x132>
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	3301      	adds	r3, #1
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	2b20      	cmp	r3, #32
 800662e:	d0f5      	beq.n	800661c <create_name+0x12c>
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	2b2e      	cmp	r3, #46	; 0x2e
 800663c:	d0ee      	beq.n	800661c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <create_name+0x168>
 8006644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006648:	f043 0303 	orr.w	r3, r3, #3
 800664c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006650:	e002      	b.n	8006658 <create_name+0x168>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	3b01      	subs	r3, #1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <create_name+0x182>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006664:	3b01      	subs	r3, #1
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	2b2e      	cmp	r3, #46	; 0x2e
 8006670:	d1ef      	bne.n	8006652 <create_name+0x162>

	i = b = 0; ni = 8;
 8006672:	2300      	movs	r3, #0
 8006674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006678:	2300      	movs	r3, #0
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	2308      	movs	r3, #8
 800667e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	61ba      	str	r2, [r7, #24]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8090 	beq.w	80067b8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800669a:	2b20      	cmp	r3, #32
 800669c:	d006      	beq.n	80066ac <create_name+0x1bc>
 800669e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066a0:	2b2e      	cmp	r3, #46	; 0x2e
 80066a2:	d10a      	bne.n	80066ba <create_name+0x1ca>
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d006      	beq.n	80066ba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80066ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b0:	f043 0303 	orr.w	r3, r3, #3
 80066b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066b8:	e07d      	b.n	80067b6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80066ba:	6a3a      	ldr	r2, [r7, #32]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d203      	bcs.n	80066ca <create_name+0x1da>
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d123      	bne.n	8006712 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2b0b      	cmp	r3, #11
 80066ce:	d106      	bne.n	80066de <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80066d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d4:	f043 0303 	orr.w	r3, r3, #3
 80066d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066dc:	e075      	b.n	80067ca <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d005      	beq.n	80066f2 <create_name+0x202>
 80066e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ea:	f043 0303 	orr.w	r3, r3, #3
 80066ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d866      	bhi.n	80067c8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	61bb      	str	r3, [r7, #24]
 80066fe:	2308      	movs	r3, #8
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	230b      	movs	r3, #11
 8006704:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006710:	e051      	b.n	80067b6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006714:	2b7f      	cmp	r3, #127	; 0x7f
 8006716:	d914      	bls.n	8006742 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f001 f8eb 	bl	80078f8 <ff_convert>
 8006722:	4603      	mov	r3, r0
 8006724:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <create_name+0x246>
 800672c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800672e:	3b80      	subs	r3, #128	; 0x80
 8006730:	4a23      	ldr	r2, [pc, #140]	; (80067c0 <create_name+0x2d0>)
 8006732:	5cd3      	ldrb	r3, [r2, r3]
 8006734:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <create_name+0x268>
 8006748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800674a:	4619      	mov	r1, r3
 800674c:	481d      	ldr	r0, [pc, #116]	; (80067c4 <create_name+0x2d4>)
 800674e:	f7fe fbfe 	bl	8004f4e <chk_chr>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006758:	235f      	movs	r3, #95	; 0x5f
 800675a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800675c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006760:	f043 0303 	orr.w	r3, r3, #3
 8006764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006768:	e01b      	b.n	80067a2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800676a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d909      	bls.n	8006784 <create_name+0x294>
 8006770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006772:	2b5a      	cmp	r3, #90	; 0x5a
 8006774:	d806      	bhi.n	8006784 <create_name+0x294>
					b |= 2;
 8006776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800677a:	f043 0302 	orr.w	r3, r3, #2
 800677e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006782:	e00e      	b.n	80067a2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006786:	2b60      	cmp	r3, #96	; 0x60
 8006788:	d90b      	bls.n	80067a2 <create_name+0x2b2>
 800678a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800678c:	2b7a      	cmp	r3, #122	; 0x7a
 800678e:	d808      	bhi.n	80067a2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006790:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800679c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800679e:	3b20      	subs	r3, #32
 80067a0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	623a      	str	r2, [r7, #32]
 80067a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067aa:	b2d1      	uxtb	r1, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	460a      	mov	r2, r1
 80067b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80067b6:	e763      	b.n	8006680 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80067b8:	bf00      	nop
 80067ba:	e006      	b.n	80067ca <create_name+0x2da>
 80067bc:	08008bd4 	.word	0x08008bd4
 80067c0:	08008c50 	.word	0x08008c50
 80067c4:	08008be0 	.word	0x08008be0
			if (si > di) break;			/* No extension */
 80067c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067d0:	2be5      	cmp	r3, #229	; 0xe5
 80067d2:	d103      	bne.n	80067dc <create_name+0x2ec>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2205      	movs	r2, #5
 80067d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d104      	bne.n	80067ec <create_name+0x2fc>
 80067e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80067ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067f0:	f003 030c 	and.w	r3, r3, #12
 80067f4:	2b0c      	cmp	r3, #12
 80067f6:	d005      	beq.n	8006804 <create_name+0x314>
 80067f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	2b03      	cmp	r3, #3
 8006802:	d105      	bne.n	8006810 <create_name+0x320>
 8006804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d117      	bne.n	800684c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800681c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	2b01      	cmp	r3, #1
 8006826:	d105      	bne.n	8006834 <create_name+0x344>
 8006828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800682c:	f043 0310 	orr.w	r3, r3, #16
 8006830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006838:	f003 030c 	and.w	r3, r3, #12
 800683c:	2b04      	cmp	r3, #4
 800683e:	d105      	bne.n	800684c <create_name+0x35c>
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006844:	f043 0308 	orr.w	r3, r3, #8
 8006848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006852:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006856:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006858:	4618      	mov	r0, r3
 800685a:	3728      	adds	r7, #40	; 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006874:	e002      	b.n	800687c <follow_path+0x1c>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b2f      	cmp	r3, #47	; 0x2f
 8006882:	d0f8      	beq.n	8006876 <follow_path+0x16>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b5c      	cmp	r3, #92	; 0x5c
 800688a:	d0f4      	beq.n	8006876 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b1f      	cmp	r3, #31
 8006898:	d80a      	bhi.n	80068b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2280      	movs	r2, #128	; 0x80
 800689e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80068a2:	2100      	movs	r1, #0
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff f8fd 	bl	8005aa4 <dir_sdi>
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]
 80068ae:	e048      	b.n	8006942 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068b0:	463b      	mov	r3, r7
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fe1b 	bl	80064f0 <create_name>
 80068ba:	4603      	mov	r3, r0
 80068bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d139      	bne.n	8006938 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff fc5a 	bl	800617e <dir_find>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80068d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d12c      	bne.n	800693c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d127      	bne.n	800693c <follow_path+0xdc>
 80068ec:	2305      	movs	r3, #5
 80068ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80068f0:	e024      	b.n	800693c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d121      	bne.n	8006940 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	799b      	ldrb	r3, [r3, #6]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006908:	2305      	movs	r3, #5
 800690a:	75fb      	strb	r3, [r7, #23]
 800690c:	e019      	b.n	8006942 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	8992      	ldrh	r2, [r2, #12]
 800691c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006920:	fb00 f202 	mul.w	r2, r0, r2
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	440b      	add	r3, r1
 8006928:	4619      	mov	r1, r3
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fa60 	bl	8005df0 <ld_clust>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006936:	e7bb      	b.n	80068b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006938:	bf00      	nop
 800693a:	e002      	b.n	8006942 <follow_path+0xe2>
				break;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006940:	bf00      	nop
			}
		}
	}

	return res;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006954:	f04f 33ff 	mov.w	r3, #4294967295
 8006958:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d031      	beq.n	80069c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e002      	b.n	8006970 <get_ldnumber+0x24>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	3301      	adds	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b1f      	cmp	r3, #31
 8006976:	d903      	bls.n	8006980 <get_ldnumber+0x34>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b3a      	cmp	r3, #58	; 0x3a
 800697e:	d1f4      	bne.n	800696a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b3a      	cmp	r3, #58	; 0x3a
 8006986:	d11c      	bne.n	80069c2 <get_ldnumber+0x76>
			tp = *path;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	60fa      	str	r2, [r7, #12]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	3b30      	subs	r3, #48	; 0x30
 8006998:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b09      	cmp	r3, #9
 800699e:	d80e      	bhi.n	80069be <get_ldnumber+0x72>
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d10a      	bne.n	80069be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d107      	bne.n	80069be <get_ldnumber+0x72>
					vol = (int)i;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	3301      	adds	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	e002      	b.n	80069c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80069c6:	693b      	ldr	r3, [r7, #16]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	70da      	strb	r2, [r3, #3]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fe fc78 	bl	80052e4 <move_window>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <check_fs+0x2a>
 80069fa:	2304      	movs	r3, #4
 80069fc:	e038      	b.n	8006a70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3338      	adds	r3, #56	; 0x38
 8006a02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe f9bc 	bl	8004d84 <ld_word>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d001      	beq.n	8006a1c <check_fs+0x48>
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e029      	b.n	8006a70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a22:	2be9      	cmp	r3, #233	; 0xe9
 8006a24:	d009      	beq.n	8006a3a <check_fs+0x66>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a2c:	2beb      	cmp	r3, #235	; 0xeb
 8006a2e:	d11e      	bne.n	8006a6e <check_fs+0x9a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a36:	2b90      	cmp	r3, #144	; 0x90
 8006a38:	d119      	bne.n	8006a6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3338      	adds	r3, #56	; 0x38
 8006a3e:	3336      	adds	r3, #54	; 0x36
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe f9b7 	bl	8004db4 <ld_dword>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a4c:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <check_fs+0xa4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d101      	bne.n	8006a56 <check_fs+0x82>
 8006a52:	2300      	movs	r3, #0
 8006a54:	e00c      	b.n	8006a70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3338      	adds	r3, #56	; 0x38
 8006a5a:	3352      	adds	r3, #82	; 0x52
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe f9a9 	bl	8004db4 <ld_dword>
 8006a62:	4603      	mov	r3, r0
 8006a64:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <check_fs+0xa8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d101      	bne.n	8006a6e <check_fs+0x9a>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e000      	b.n	8006a70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006a6e:	2302      	movs	r3, #2
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	00544146 	.word	0x00544146
 8006a7c:	33544146 	.word	0x33544146

08006a80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b096      	sub	sp, #88	; 0x58
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff ff59 	bl	800694c <get_ldnumber>
 8006a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	da01      	bge.n	8006aa6 <find_volume+0x26>
 8006aa2:	230b      	movs	r3, #11
 8006aa4:	e262      	b.n	8006f6c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006aa6:	4a9f      	ldr	r2, [pc, #636]	; (8006d24 <find_volume+0x2a4>)
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <find_volume+0x3a>
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	e258      	b.n	8006f6c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006abe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01a      	beq.n	8006b06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe f8b7 	bl	8004c48 <disk_status>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ae0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10c      	bne.n	8006b06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <find_volume+0x82>
 8006af2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006afe:	230a      	movs	r3, #10
 8006b00:	e234      	b.n	8006f6c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006b02:	2300      	movs	r3, #0
 8006b04:	e232      	b.n	8006f6c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe f8af 	bl	8004c7c <disk_initialize>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006b30:	2303      	movs	r3, #3
 8006b32:	e21b      	b.n	8006f6c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <find_volume+0xca>
 8006b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006b46:	230a      	movs	r3, #10
 8006b48:	e210      	b.n	8006f6c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	7858      	ldrb	r0, [r3, #1]
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	330c      	adds	r3, #12
 8006b52:	461a      	mov	r2, r3
 8006b54:	2102      	movs	r1, #2
 8006b56:	f7fe f8f7 	bl	8004d48 <disk_ioctl>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <find_volume+0xe4>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e203      	b.n	8006f6c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	899b      	ldrh	r3, [r3, #12]
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6c:	d80d      	bhi.n	8006b8a <find_volume+0x10a>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	899b      	ldrh	r3, [r3, #12]
 8006b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b76:	d308      	bcc.n	8006b8a <find_volume+0x10a>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	899b      	ldrh	r3, [r3, #12]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	899b      	ldrh	r3, [r3, #12]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <find_volume+0x10e>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e1ee      	b.n	8006f6c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006b92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b96:	f7ff ff1d 	bl	80069d4 <check_fs>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d149      	bne.n	8006c3c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ba8:	2300      	movs	r3, #0
 8006baa:	643b      	str	r3, [r7, #64]	; 0x40
 8006bac:	e01e      	b.n	8006bec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006bbc:	4413      	add	r3, r2
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <find_volume+0x158>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	3308      	adds	r3, #8
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fe f8f0 	bl	8004db4 <ld_dword>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	e000      	b.n	8006bda <find_volume+0x15a>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	3358      	adds	r3, #88	; 0x58
 8006be0:	443b      	add	r3, r7
 8006be2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be8:	3301      	adds	r3, #1
 8006bea:	643b      	str	r3, [r7, #64]	; 0x40
 8006bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d9dd      	bls.n	8006bae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <find_volume+0x182>
 8006bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	3358      	adds	r3, #88	; 0x58
 8006c08:	443b      	add	r3, r7
 8006c0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006c0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <find_volume+0x1a2>
 8006c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c1a:	f7ff fedb 	bl	80069d4 <check_fs>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	e000      	b.n	8006c24 <find_volume+0x1a4>
 8006c22:	2303      	movs	r3, #3
 8006c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d905      	bls.n	8006c3c <find_volume+0x1bc>
 8006c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c32:	3301      	adds	r3, #1
 8006c34:	643b      	str	r3, [r7, #64]	; 0x40
 8006c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d9e2      	bls.n	8006c02 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d101      	bne.n	8006c48 <find_volume+0x1c8>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e191      	b.n	8006f6c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d901      	bls.n	8006c54 <find_volume+0x1d4>
 8006c50:	230d      	movs	r3, #13
 8006c52:	e18b      	b.n	8006f6c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	3338      	adds	r3, #56	; 0x38
 8006c58:	330b      	adds	r3, #11
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe f892 	bl	8004d84 <ld_word>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	899b      	ldrh	r3, [r3, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d001      	beq.n	8006c70 <find_volume+0x1f0>
 8006c6c:	230d      	movs	r3, #13
 8006c6e:	e17d      	b.n	8006f6c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	3338      	adds	r3, #56	; 0x38
 8006c74:	3316      	adds	r3, #22
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe f884 	bl	8004d84 <ld_word>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <find_volume+0x214>
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	3338      	adds	r3, #56	; 0x38
 8006c8a:	3324      	adds	r3, #36	; 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe f891 	bl	8004db4 <ld_dword>
 8006c92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c98:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	789b      	ldrb	r3, [r3, #2]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d005      	beq.n	8006cb8 <find_volume+0x238>
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	789b      	ldrb	r3, [r3, #2]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d001      	beq.n	8006cb8 <find_volume+0x238>
 8006cb4:	230d      	movs	r3, #13
 8006cb6:	e159      	b.n	8006f6c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	789b      	ldrb	r3, [r3, #2]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc0:	fb02 f303 	mul.w	r3, r2, r3
 8006cc4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	895b      	ldrh	r3, [r3, #10]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d008      	beq.n	8006cec <find_volume+0x26c>
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	895b      	ldrh	r3, [r3, #10]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	895b      	ldrh	r3, [r3, #10]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <find_volume+0x270>
 8006cec:	230d      	movs	r3, #13
 8006cee:	e13d      	b.n	8006f6c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	3338      	adds	r3, #56	; 0x38
 8006cf4:	3311      	adds	r3, #17
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe f844 	bl	8004d84 <ld_word>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	891b      	ldrh	r3, [r3, #8]
 8006d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d0a:	8992      	ldrh	r2, [r2, #12]
 8006d0c:	0952      	lsrs	r2, r2, #5
 8006d0e:	b292      	uxth	r2, r2
 8006d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d14:	fb01 f202 	mul.w	r2, r1, r2
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <find_volume+0x2a8>
 8006d20:	230d      	movs	r3, #13
 8006d22:	e123      	b.n	8006f6c <find_volume+0x4ec>
 8006d24:	20000224 	.word	0x20000224

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	3338      	adds	r3, #56	; 0x38
 8006d2c:	3313      	adds	r3, #19
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe f828 	bl	8004d84 <ld_word>
 8006d34:	4603      	mov	r3, r0
 8006d36:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <find_volume+0x2cc>
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	3338      	adds	r3, #56	; 0x38
 8006d42:	3320      	adds	r3, #32
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe f835 	bl	8004db4 <ld_dword>
 8006d4a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	3338      	adds	r3, #56	; 0x38
 8006d50:	330e      	adds	r3, #14
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe f816 	bl	8004d84 <ld_word>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006d5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <find_volume+0x2e6>
 8006d62:	230d      	movs	r3, #13
 8006d64:	e102      	b.n	8006f6c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006d66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6a:	4413      	add	r3, r2
 8006d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d6e:	8911      	ldrh	r1, [r2, #8]
 8006d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d72:	8992      	ldrh	r2, [r2, #12]
 8006d74:	0952      	lsrs	r2, r2, #5
 8006d76:	b292      	uxth	r2, r2
 8006d78:	fbb1 f2f2 	udiv	r2, r1, r2
 8006d7c:	b292      	uxth	r2, r2
 8006d7e:	4413      	add	r3, r2
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d201      	bcs.n	8006d8e <find_volume+0x30e>
 8006d8a:	230d      	movs	r3, #13
 8006d8c:	e0ee      	b.n	8006f6c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d96:	8952      	ldrh	r2, [r2, #10]
 8006d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <find_volume+0x328>
 8006da4:	230d      	movs	r3, #13
 8006da6:	e0e1      	b.n	8006f6c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006da8:	2303      	movs	r3, #3
 8006daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d802      	bhi.n	8006dbe <find_volume+0x33e>
 8006db8:	2302      	movs	r3, #2
 8006dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d802      	bhi.n	8006dce <find_volume+0x34e>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	1c9a      	adds	r2, r3, #2
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dda:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ddc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de0:	441a      	add	r2, r3
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006de6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	441a      	add	r2, r3
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d11e      	bne.n	8006e36 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	3338      	adds	r3, #56	; 0x38
 8006dfc:	332a      	adds	r3, #42	; 0x2a
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fd ffc0 	bl	8004d84 <ld_word>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <find_volume+0x38e>
 8006e0a:	230d      	movs	r3, #13
 8006e0c:	e0ae      	b.n	8006f6c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	891b      	ldrh	r3, [r3, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <find_volume+0x39a>
 8006e16:	230d      	movs	r3, #13
 8006e18:	e0a8      	b.n	8006f6c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	3338      	adds	r3, #56	; 0x38
 8006e1e:	332c      	adds	r3, #44	; 0x2c
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fd ffc7 	bl	8004db4 <ld_dword>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	647b      	str	r3, [r7, #68]	; 0x44
 8006e34:	e01f      	b.n	8006e76 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	891b      	ldrh	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <find_volume+0x3c2>
 8006e3e:	230d      	movs	r3, #13
 8006e40:	e094      	b.n	8006f6c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e48:	441a      	add	r2, r3
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d103      	bne.n	8006e5e <find_volume+0x3de>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	e00a      	b.n	8006e74 <find_volume+0x3f4>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	4613      	mov	r3, r2
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	4413      	add	r3, r2
 8006e68:	085a      	lsrs	r2, r3, #1
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006e74:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	899b      	ldrh	r3, [r3, #12]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e82:	440b      	add	r3, r1
 8006e84:	3b01      	subs	r3, #1
 8006e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e88:	8989      	ldrh	r1, [r1, #12]
 8006e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d201      	bcs.n	8006e96 <find_volume+0x416>
 8006e92:	230d      	movs	r3, #13
 8006e94:	e06a      	b.n	8006f6c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9c:	619a      	str	r2, [r3, #24]
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006eac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d149      	bne.n	8006f48 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	3338      	adds	r3, #56	; 0x38
 8006eb8:	3330      	adds	r3, #48	; 0x30
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fd ff62 	bl	8004d84 <ld_word>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d140      	bne.n	8006f48 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec8:	3301      	adds	r3, #1
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ece:	f7fe fa09 	bl	80052e4 <move_window>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d137      	bne.n	8006f48 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	2200      	movs	r2, #0
 8006edc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	3338      	adds	r3, #56	; 0x38
 8006ee2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fd ff4c 	bl	8004d84 <ld_word>
 8006eec:	4603      	mov	r3, r0
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d127      	bne.n	8006f48 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	3338      	adds	r3, #56	; 0x38
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fd ff59 	bl	8004db4 <ld_dword>
 8006f02:	4603      	mov	r3, r0
 8006f04:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <find_volume+0x4f4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d11e      	bne.n	8006f48 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	3338      	adds	r3, #56	; 0x38
 8006f0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fd ff4e 	bl	8004db4 <ld_dword>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <find_volume+0x4f8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d113      	bne.n	8006f48 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	3338      	adds	r3, #56	; 0x38
 8006f24:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd ff43 	bl	8004db4 <ld_dword>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	3338      	adds	r3, #56	; 0x38
 8006f38:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fd ff39 	bl	8004db4 <ld_dword>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006f4e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <find_volume+0x4fc>)
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <find_volume+0x4fc>)
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <find_volume+0x4fc>)
 8006f5e:	881a      	ldrh	r2, [r3, #0]
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f66:	f7fe f955 	bl	8005214 <clear_lock>
#endif
	return FR_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3758      	adds	r7, #88	; 0x58
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	41615252 	.word	0x41615252
 8006f78:	61417272 	.word	0x61417272
 8006f7c:	20000228 	.word	0x20000228

08006f80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006f8a:	2309      	movs	r3, #9
 8006f8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01c      	beq.n	8006fce <validate+0x4e>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d018      	beq.n	8006fce <validate+0x4e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d013      	beq.n	8006fce <validate+0x4e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	889a      	ldrh	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	88db      	ldrh	r3, [r3, #6]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d10c      	bne.n	8006fce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fd fe44 	bl	8004c48 <disk_status>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <validate+0x4e>
			res = FR_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <validate+0x5a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	e000      	b.n	8006fdc <validate+0x5c>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	6013      	str	r3, [r2, #0]
	return res;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006ffe:	f107 0310 	add.w	r3, r7, #16
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fca2 	bl	800694c <get_ldnumber>
 8007008:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	2b00      	cmp	r3, #0
 800700e:	da01      	bge.n	8007014 <f_mount+0x28>
 8007010:	230b      	movs	r3, #11
 8007012:	e02b      	b.n	800706c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007014:	4a17      	ldr	r2, [pc, #92]	; (8007074 <f_mount+0x88>)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800701c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007024:	69b8      	ldr	r0, [r7, #24]
 8007026:	f7fe f8f5 	bl	8005214 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	490d      	ldr	r1, [pc, #52]	; (8007074 <f_mount+0x88>)
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <f_mount+0x66>
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <f_mount+0x6a>
 8007052:	2300      	movs	r3, #0
 8007054:	e00a      	b.n	800706c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007056:	f107 010c 	add.w	r1, r7, #12
 800705a:	f107 0308 	add.w	r3, r7, #8
 800705e:	2200      	movs	r2, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fd0d 	bl	8006a80 <find_volume>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800706a:	7dfb      	ldrb	r3, [r7, #23]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000224 	.word	0x20000224

08007078 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b09a      	sub	sp, #104	; 0x68
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <f_open+0x18>
 800708c:	2309      	movs	r3, #9
 800708e:	e1cb      	b.n	8007428 <f_open+0x3b0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007096:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007098:	79fa      	ldrb	r2, [r7, #7]
 800709a:	f107 0110 	add.w	r1, r7, #16
 800709e:	f107 0308 	add.w	r3, r7, #8
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fcec 	bl	8006a80 <find_volume>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80070ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 81af 	bne.w	8007416 <f_open+0x39e>
		dj.obj.fs = fs;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80070bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80070c0:	f000 fce0 	bl	8007a84 <ff_memalloc>
 80070c4:	65b8      	str	r0, [r7, #88]	; 0x58
 80070c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <f_open+0x58>
 80070cc:	2311      	movs	r3, #17
 80070ce:	e1ab      	b.n	8007428 <f_open+0x3b0>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	f107 0314 	add.w	r3, r7, #20
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fbbe 	bl	8006860 <follow_path>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80070ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d11a      	bne.n	8007128 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80070f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070f6:	b25b      	sxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da03      	bge.n	8007104 <f_open+0x8c>
				res = FR_INVALID_NAME;
 80070fc:	2306      	movs	r3, #6
 80070fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007102:	e011      	b.n	8007128 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	bf14      	ite	ne
 800710e:	2301      	movne	r3, #1
 8007110:	2300      	moveq	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f7fd ff31 	bl	8004f84 <chk_lock>
 8007122:	4603      	mov	r3, r0
 8007124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	f003 031c 	and.w	r3, r3, #28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d07f      	beq.n	8007232 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8007132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007136:	2b00      	cmp	r3, #0
 8007138:	d017      	beq.n	800716a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800713a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800713e:	2b04      	cmp	r3, #4
 8007140:	d10e      	bne.n	8007160 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007142:	f7fd ff7b 	bl	800503c <enq_lock>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d006      	beq.n	800715a <f_open+0xe2>
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff f8d5 	bl	8006300 <dir_register>
 8007156:	4603      	mov	r3, r0
 8007158:	e000      	b.n	800715c <f_open+0xe4>
 800715a:	2312      	movs	r3, #18
 800715c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	f043 0308 	orr.w	r3, r3, #8
 8007166:	71fb      	strb	r3, [r7, #7]
 8007168:	e010      	b.n	800718c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800716a:	7ebb      	ldrb	r3, [r7, #26]
 800716c:	f003 0311 	and.w	r3, r3, #17
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <f_open+0x104>
					res = FR_DENIED;
 8007174:	2307      	movs	r3, #7
 8007176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800717a:	e007      	b.n	800718c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <f_open+0x114>
 8007186:	2308      	movs	r3, #8
 8007188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800718c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007190:	2b00      	cmp	r3, #0
 8007192:	d168      	bne.n	8007266 <f_open+0x1ee>
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d063      	beq.n	8007266 <f_open+0x1ee>
				dw = GET_FATTIME();
 800719e:	f7fd fb47 	bl	8004830 <get_fattime>
 80071a2:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	330e      	adds	r3, #14
 80071a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fd fe40 	bl	8004e30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	3316      	adds	r3, #22
 80071b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fd fe3a 	bl	8004e30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	330b      	adds	r3, #11
 80071c0:	2220      	movs	r2, #32
 80071c2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fe10 	bl	8005df0 <ld_clust>
 80071d0:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071d6:	2200      	movs	r2, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fe28 	bl	8005e2e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	331c      	adds	r3, #28
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fd fe23 	bl	8004e30 <st_dword>
					fs->wflag = 1;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2201      	movs	r2, #1
 80071ee:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80071f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d037      	beq.n	8007266 <f_open+0x1ee>
						dw = fs->winsect;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fa:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80071fc:	f107 0314 	add.w	r3, r7, #20
 8007200:	2200      	movs	r2, #0
 8007202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fb18 	bl	800583a <remove_chain>
 800720a:	4603      	mov	r3, r0
 800720c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007214:	2b00      	cmp	r3, #0
 8007216:	d126      	bne.n	8007266 <f_open+0x1ee>
							res = move_window(fs, dw);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe f861 	bl	80052e4 <move_window>
 8007222:	4603      	mov	r3, r0
 8007224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800722c:	3a01      	subs	r2, #1
 800722e:	615a      	str	r2, [r3, #20]
 8007230:	e019      	b.n	8007266 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007236:	2b00      	cmp	r3, #0
 8007238:	d115      	bne.n	8007266 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800723a:	7ebb      	ldrb	r3, [r7, #26]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <f_open+0x1d4>
					res = FR_NO_FILE;
 8007244:	2304      	movs	r3, #4
 8007246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800724a:	e00c      	b.n	8007266 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <f_open+0x1ee>
 8007256:	7ebb      	ldrb	r3, [r7, #26]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <f_open+0x1ee>
						res = FR_DENIED;
 8007260:	2307      	movs	r3, #7
 8007262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007266:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800726a:	2b00      	cmp	r3, #0
 800726c:	d128      	bne.n	80072c0 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <f_open+0x208>
				mode |= FA_MODIFIED;
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	bf14      	ite	ne
 8007298:	2301      	movne	r3, #1
 800729a:	2300      	moveq	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	f107 0314 	add.w	r3, r7, #20
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fd feea 	bl	8005080 <inc_lock>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <f_open+0x248>
 80072ba:	2302      	movs	r3, #2
 80072bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80072c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 80a3 	bne.w	8007410 <f_open+0x398>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fd8d 	bl	8005df0 <ld_clust>
 80072d6:	4602      	mov	r2, r0
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	331c      	adds	r3, #28
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fd fd67 	bl	8004db4 <ld_dword>
 80072e6:	4602      	mov	r2, r0
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	88da      	ldrh	r2, [r3, #6]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	79fa      	ldrb	r2, [r7, #7]
 8007304:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3330      	adds	r3, #48	; 0x30
 800731c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f7fd fdd1 	bl	8004eca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d06e      	beq.n	8007410 <f_open+0x398>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d06a      	beq.n	8007410 <f_open+0x398>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	895b      	ldrh	r3, [r3, #10]
 8007346:	461a      	mov	r2, r3
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	899b      	ldrh	r3, [r3, #12]
 800734c:	fb02 f303 	mul.w	r3, r2, r3
 8007350:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800735e:	e016      	b.n	800738e <f_open+0x316>
					clst = get_fat(&fp->obj, clst);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe f87a 	bl	800545e <get_fat>
 800736a:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800736c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800736e:	2b01      	cmp	r3, #1
 8007370:	d802      	bhi.n	8007378 <f_open+0x300>
 8007372:	2302      	movs	r3, #2
 8007374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d102      	bne.n	8007386 <f_open+0x30e>
 8007380:	2301      	movs	r3, #1
 8007382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007386:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800738e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <f_open+0x326>
 8007396:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739a:	429a      	cmp	r2, r3
 800739c:	d8e0      	bhi.n	8007360 <f_open+0x2e8>
				}
				fp->clust = clst;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073a2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80073a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d131      	bne.n	8007410 <f_open+0x398>
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	899b      	ldrh	r3, [r3, #12]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b8:	fb01 f202 	mul.w	r2, r1, r2
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d026      	beq.n	8007410 <f_open+0x398>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe f82a 	bl	8005420 <clust2sect>
 80073cc:	64b8      	str	r0, [r7, #72]	; 0x48
 80073ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <f_open+0x364>
						res = FR_INT_ERR;
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80073da:	e019      	b.n	8007410 <f_open+0x398>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	899b      	ldrh	r3, [r3, #12]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80073e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ea:	441a      	add	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	7858      	ldrb	r0, [r3, #1]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1a      	ldr	r2, [r3, #32]
 80073fe:	2301      	movs	r3, #1
 8007400:	f7fd fc62 	bl	8004cc8 <disk_read>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <f_open+0x398>
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8007410:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007412:	f000 fb43 	bl	8007a9c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <f_open+0x3ac>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007424:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007428:	4618      	mov	r0, r3
 800742a:	3768      	adds	r7, #104	; 0x68
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08e      	sub	sp, #56	; 0x38
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f107 0214 	add.w	r2, r7, #20
 800744e:	4611      	mov	r1, r2
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fd95 	bl	8006f80 <validate>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800745c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007460:	2b00      	cmp	r3, #0
 8007462:	d107      	bne.n	8007474 <f_read+0x44>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	7d5b      	ldrb	r3, [r3, #21]
 8007468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800746c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <f_read+0x4a>
 8007474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007478:	e135      	b.n	80076e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	7d1b      	ldrb	r3, [r3, #20]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <f_read+0x5a>
 8007486:	2307      	movs	r3, #7
 8007488:	e12d      	b.n	80076e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	429a      	cmp	r2, r3
 800749c:	f240 811e 	bls.w	80076dc <f_read+0x2ac>
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80074a4:	e11a      	b.n	80076dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	8992      	ldrh	r2, [r2, #12]
 80074ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80074b2:	fb01 f202 	mul.w	r2, r1, r2
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 80d5 	bne.w	8007668 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	8992      	ldrh	r2, [r2, #12]
 80074c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	8952      	ldrh	r2, [r2, #10]
 80074ce:	3a01      	subs	r2, #1
 80074d0:	4013      	ands	r3, r2
 80074d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d12f      	bne.n	800753a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	633b      	str	r3, [r7, #48]	; 0x30
 80074e8:	e013      	b.n	8007512 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	4619      	mov	r1, r3
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7fe fa9b 	bl	8005a34 <clmt_clust>
 80074fe:	6338      	str	r0, [r7, #48]	; 0x30
 8007500:	e007      	b.n	8007512 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7fd ffa7 	bl	800545e <get_fat>
 8007510:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2b01      	cmp	r3, #1
 8007516:	d804      	bhi.n	8007522 <f_read+0xf2>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2202      	movs	r2, #2
 800751c:	755a      	strb	r2, [r3, #21]
 800751e:	2302      	movs	r3, #2
 8007520:	e0e1      	b.n	80076e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d104      	bne.n	8007534 <f_read+0x104>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	755a      	strb	r2, [r3, #21]
 8007530:	2301      	movs	r3, #1
 8007532:	e0d8      	b.n	80076e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007538:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f7fd ff6c 	bl	8005420 <clust2sect>
 8007548:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <f_read+0x12a>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2202      	movs	r2, #2
 8007554:	755a      	strb	r2, [r3, #21]
 8007556:	2302      	movs	r3, #2
 8007558:	e0c5      	b.n	80076e6 <f_read+0x2b6>
			sect += csect;
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	4413      	add	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	899b      	ldrh	r3, [r3, #12]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	fbb3 f3f2 	udiv	r3, r3, r2
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d041      	beq.n	80075fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	4413      	add	r3, r2
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	8952      	ldrh	r2, [r2, #10]
 8007580:	4293      	cmp	r3, r2
 8007582:	d905      	bls.n	8007590 <f_read+0x160>
					cc = fs->csize - csect;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	895b      	ldrh	r3, [r3, #10]
 8007588:	461a      	mov	r2, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	7858      	ldrb	r0, [r3, #1]
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800759a:	f7fd fb95 	bl	8004cc8 <disk_read>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <f_read+0x17e>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	755a      	strb	r2, [r3, #21]
 80075aa:	2301      	movs	r3, #1
 80075ac:	e09b      	b.n	80076e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	7d1b      	ldrb	r3, [r3, #20]
 80075b2:	b25b      	sxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da18      	bge.n	80075ea <f_read+0x1ba>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a1a      	ldr	r2, [r3, #32]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d911      	bls.n	80075ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1a      	ldr	r2, [r3, #32]
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	8992      	ldrh	r2, [r2, #12]
 80075d2:	fb02 f303 	mul.w	r3, r2, r3
 80075d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d8:	18d0      	adds	r0, r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	899b      	ldrh	r3, [r3, #12]
 80075e4:	461a      	mov	r2, r3
 80075e6:	f7fd fc4f 	bl	8004e88 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	899b      	ldrh	r3, [r3, #12]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80075f8:	e05c      	b.n	80076b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	429a      	cmp	r2, r3
 8007602:	d02e      	beq.n	8007662 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	7d1b      	ldrb	r3, [r3, #20]
 8007608:	b25b      	sxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	da18      	bge.n	8007640 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	7858      	ldrb	r0, [r3, #1]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1a      	ldr	r2, [r3, #32]
 800761c:	2301      	movs	r3, #1
 800761e:	f7fd fb73 	bl	8004d08 <disk_write>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <f_read+0x202>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	755a      	strb	r2, [r3, #21]
 800762e:	2301      	movs	r3, #1
 8007630:	e059      	b.n	80076e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	7d1b      	ldrb	r3, [r3, #20]
 8007636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	7858      	ldrb	r0, [r3, #1]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800764a:	2301      	movs	r3, #1
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	f7fd fb3b 	bl	8004cc8 <disk_read>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <f_read+0x232>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	755a      	strb	r2, [r3, #21]
 800765e:	2301      	movs	r3, #1
 8007660:	e041      	b.n	80076e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	899b      	ldrh	r3, [r3, #12]
 800766c:	4618      	mov	r0, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	8992      	ldrh	r2, [r2, #12]
 8007676:	fbb3 f1f2 	udiv	r1, r3, r2
 800767a:	fb01 f202 	mul.w	r2, r1, r2
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	1ac3      	subs	r3, r0, r3
 8007682:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	429a      	cmp	r2, r3
 800768a:	d901      	bls.n	8007690 <f_read+0x260>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	8992      	ldrh	r2, [r2, #12]
 800769e:	fbb3 f0f2 	udiv	r0, r3, r2
 80076a2:	fb00 f202 	mul.w	r2, r0, r2
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	440b      	add	r3, r1
 80076aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ac:	4619      	mov	r1, r3
 80076ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076b0:	f7fd fbea 	bl	8004e88 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80076b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	4413      	add	r3, r2
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	441a      	add	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	619a      	str	r2, [r3, #24]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	441a      	add	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f47f aee1 	bne.w	80074a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3738      	adds	r7, #56	; 0x38
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f107 0208 	add.w	r2, r7, #8
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fc3e 	bl	8006f80 <validate>
 8007704:	4603      	mov	r3, r0
 8007706:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d168      	bne.n	80077e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7d1b      	ldrb	r3, [r3, #20]
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d062      	beq.n	80077e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7d1b      	ldrb	r3, [r3, #20]
 800771e:	b25b      	sxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	da15      	bge.n	8007750 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	7858      	ldrb	r0, [r3, #1]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1a      	ldr	r2, [r3, #32]
 8007732:	2301      	movs	r3, #1
 8007734:	f7fd fae8 	bl	8004d08 <disk_write>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <f_sync+0x54>
 800773e:	2301      	movs	r3, #1
 8007740:	e04f      	b.n	80077e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7d1b      	ldrb	r3, [r3, #20]
 8007746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774a:	b2da      	uxtb	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007750:	f7fd f86e 	bl	8004830 <get_fattime>
 8007754:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f7fd fdc0 	bl	80052e4 <move_window>
 8007764:	4603      	mov	r3, r0
 8007766:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d138      	bne.n	80077e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007772:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	330b      	adds	r3, #11
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	330b      	adds	r3, #11
 800777e:	f042 0220 	orr.w	r2, r2, #32
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	461a      	mov	r2, r3
 8007790:	68f9      	ldr	r1, [r7, #12]
 8007792:	f7fe fb4c 	bl	8005e2e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f103 021c 	add.w	r2, r3, #28
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	4619      	mov	r1, r3
 80077a2:	4610      	mov	r0, r2
 80077a4:	f7fd fb44 	bl	8004e30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3316      	adds	r3, #22
 80077ac:	6939      	ldr	r1, [r7, #16]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fd fb3e 	bl	8004e30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3312      	adds	r3, #18
 80077b8:	2100      	movs	r1, #0
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fb1d 	bl	8004dfa <st_word>
					fs->wflag = 1;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2201      	movs	r2, #1
 80077c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fd fdb9 	bl	8005340 <sync_fs>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	7d1b      	ldrb	r3, [r3, #20]
 80077d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ff7b 	bl	80076ee <f_sync>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d118      	bne.n	8007834 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f107 0208 	add.w	r2, r7, #8
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fbb8 	bl	8006f80 <validate>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10c      	bne.n	8007834 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	4618      	mov	r0, r3
 8007820:	f7fd fcbc 	bl	800519c <dec_lock>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007856:	4b1f      	ldr	r3, [pc, #124]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 8007858:	7a5b      	ldrb	r3, [r3, #9]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d131      	bne.n	80078c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007860:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 8007862:	7a5b      	ldrb	r3, [r3, #9]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 800786a:	2100      	movs	r1, #0
 800786c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800786e:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 8007870:	7a5b      	ldrb	r3, [r3, #9]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	4a17      	ldr	r2, [pc, #92]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800787e:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 8007880:	7a5b      	ldrb	r3, [r3, #9]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	461a      	mov	r2, r3
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 8007888:	4413      	add	r3, r2
 800788a:	79fa      	ldrb	r2, [r7, #7]
 800788c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800788e:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 8007890:	7a5b      	ldrb	r3, [r3, #9]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	b2d1      	uxtb	r1, r2
 8007898:	4a0e      	ldr	r2, [pc, #56]	; (80078d4 <FATFS_LinkDriverEx+0x94>)
 800789a:	7251      	strb	r1, [r2, #9]
 800789c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800789e:	7dbb      	ldrb	r3, [r7, #22]
 80078a0:	3330      	adds	r3, #48	; 0x30
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	3301      	adds	r3, #1
 80078ac:	223a      	movs	r2, #58	; 0x3a
 80078ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	3302      	adds	r3, #2
 80078b4:	222f      	movs	r2, #47	; 0x2f
 80078b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	3303      	adds	r3, #3
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	2000024c 	.word	0x2000024c

080078d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80078e2:	2200      	movs	r2, #0
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff ffaa 	bl	8007840 <FATFS_LinkDriverEx>
 80078ec:	4603      	mov	r3, r0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	2b7f      	cmp	r3, #127	; 0x7f
 8007908:	d802      	bhi.n	8007910 <ff_convert+0x18>
		c = chr;
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	81fb      	strh	r3, [r7, #14]
 800790e:	e025      	b.n	800795c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007916:	88fb      	ldrh	r3, [r7, #6]
 8007918:	2bff      	cmp	r3, #255	; 0xff
 800791a:	d805      	bhi.n	8007928 <ff_convert+0x30>
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	3b80      	subs	r3, #128	; 0x80
 8007920:	4a12      	ldr	r2, [pc, #72]	; (800796c <ff_convert+0x74>)
 8007922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007926:	e000      	b.n	800792a <ff_convert+0x32>
 8007928:	2300      	movs	r3, #0
 800792a:	81fb      	strh	r3, [r7, #14]
 800792c:	e016      	b.n	800795c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800792e:	2300      	movs	r3, #0
 8007930:	81fb      	strh	r3, [r7, #14]
 8007932:	e009      	b.n	8007948 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007934:	89fb      	ldrh	r3, [r7, #14]
 8007936:	4a0d      	ldr	r2, [pc, #52]	; (800796c <ff_convert+0x74>)
 8007938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	429a      	cmp	r2, r3
 8007940:	d006      	beq.n	8007950 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007942:	89fb      	ldrh	r3, [r7, #14]
 8007944:	3301      	adds	r3, #1
 8007946:	81fb      	strh	r3, [r7, #14]
 8007948:	89fb      	ldrh	r3, [r7, #14]
 800794a:	2b7f      	cmp	r3, #127	; 0x7f
 800794c:	d9f2      	bls.n	8007934 <ff_convert+0x3c>
 800794e:	e000      	b.n	8007952 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007950:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007952:	89fb      	ldrh	r3, [r7, #14]
 8007954:	3380      	adds	r3, #128	; 0x80
 8007956:	b29b      	uxth	r3, r3
 8007958:	b2db      	uxtb	r3, r3
 800795a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800795c:	89fb      	ldrh	r3, [r7, #14]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	08008ce0 	.word	0x08008ce0

08007970 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007980:	d201      	bcs.n	8007986 <ff_wtoupper+0x16>
 8007982:	4b3e      	ldr	r3, [pc, #248]	; (8007a7c <ff_wtoupper+0x10c>)
 8007984:	e000      	b.n	8007988 <ff_wtoupper+0x18>
 8007986:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <ff_wtoupper+0x110>)
 8007988:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	1c9a      	adds	r2, r3, #2
 800798e:	617a      	str	r2, [r7, #20]
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007994:	8a7b      	ldrh	r3, [r7, #18]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d068      	beq.n	8007a6c <ff_wtoupper+0xfc>
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	8a7b      	ldrh	r3, [r7, #18]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d364      	bcc.n	8007a6c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1c9a      	adds	r2, r3, #2
 80079a6:	617a      	str	r2, [r7, #20]
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	823b      	strh	r3, [r7, #16]
 80079ac:	8a3b      	ldrh	r3, [r7, #16]
 80079ae:	0a1b      	lsrs	r3, r3, #8
 80079b0:	81fb      	strh	r3, [r7, #14]
 80079b2:	8a3b      	ldrh	r3, [r7, #16]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	8a79      	ldrh	r1, [r7, #18]
 80079bc:	8a3b      	ldrh	r3, [r7, #16]
 80079be:	440b      	add	r3, r1
 80079c0:	429a      	cmp	r2, r3
 80079c2:	da49      	bge.n	8007a58 <ff_wtoupper+0xe8>
			switch (cmd) {
 80079c4:	89fb      	ldrh	r3, [r7, #14]
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d84f      	bhi.n	8007a6a <ff_wtoupper+0xfa>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <ff_wtoupper+0x60>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	08007a07 	.word	0x08007a07
 80079d8:	08007a1d 	.word	0x08007a1d
 80079dc:	08007a25 	.word	0x08007a25
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	08007a3d 	.word	0x08007a3d
 80079ec:	08007a45 	.word	0x08007a45
 80079f0:	08007a4d 	.word	0x08007a4d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80079f4:	88fa      	ldrh	r2, [r7, #6]
 80079f6:	8a7b      	ldrh	r3, [r7, #18]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	80fb      	strh	r3, [r7, #6]
 8007a04:	e027      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	8a7b      	ldrh	r3, [r7, #18]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	88fa      	ldrh	r2, [r7, #6]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	80fb      	strh	r3, [r7, #6]
 8007a1a:	e01c      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007a1c:	88fb      	ldrh	r3, [r7, #6]
 8007a1e:	3b10      	subs	r3, #16
 8007a20:	80fb      	strh	r3, [r7, #6]
 8007a22:	e018      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	3b20      	subs	r3, #32
 8007a28:	80fb      	strh	r3, [r7, #6]
 8007a2a:	e014      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007a2c:	88fb      	ldrh	r3, [r7, #6]
 8007a2e:	3b30      	subs	r3, #48	; 0x30
 8007a30:	80fb      	strh	r3, [r7, #6]
 8007a32:	e010      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	3b1a      	subs	r3, #26
 8007a38:	80fb      	strh	r3, [r7, #6]
 8007a3a:	e00c      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	80fb      	strh	r3, [r7, #6]
 8007a42:	e008      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	3b50      	subs	r3, #80	; 0x50
 8007a48:	80fb      	strh	r3, [r7, #6]
 8007a4a:	e004      	b.n	8007a56 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007a52:	80fb      	strh	r3, [r7, #6]
 8007a54:	bf00      	nop
			}
			break;
 8007a56:	e008      	b.n	8007a6a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007a58:	89fb      	ldrh	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d195      	bne.n	800798a <ff_wtoupper+0x1a>
 8007a5e:	8a3b      	ldrh	r3, [r7, #16]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007a68:	e78f      	b.n	800798a <ff_wtoupper+0x1a>
			break;
 8007a6a:	bf00      	nop
	}

	return chr;
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	08008de0 	.word	0x08008de0
 8007a80:	08008fd4 	.word	0x08008fd4

08007a84 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f811 	bl	8007ab4 <malloc>
 8007a92:	4603      	mov	r3, r0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f80d 	bl	8007ac4 <free>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <malloc>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <malloc+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f000 b82b 	b.w	8007b14 <_malloc_r>
 8007abe:	bf00      	nop
 8007ac0:	20000064 	.word	0x20000064

08007ac4 <free>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <free+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f000 bb43 	b.w	8008154 <_free_r>
 8007ace:	bf00      	nop
 8007ad0:	20000064 	.word	0x20000064

08007ad4 <sbrk_aligned>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4e0e      	ldr	r6, [pc, #56]	; (8007b10 <sbrk_aligned+0x3c>)
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6831      	ldr	r1, [r6, #0]
 8007adc:	4605      	mov	r5, r0
 8007ade:	b911      	cbnz	r1, 8007ae6 <sbrk_aligned+0x12>
 8007ae0:	f000 fae8 	bl	80080b4 <_sbrk_r>
 8007ae4:	6030      	str	r0, [r6, #0]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 fae3 	bl	80080b4 <_sbrk_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d00a      	beq.n	8007b08 <sbrk_aligned+0x34>
 8007af2:	1cc4      	adds	r4, r0, #3
 8007af4:	f024 0403 	bic.w	r4, r4, #3
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d007      	beq.n	8007b0c <sbrk_aligned+0x38>
 8007afc:	1a21      	subs	r1, r4, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fad8 	bl	80080b4 <_sbrk_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d101      	bne.n	8007b0c <sbrk_aligned+0x38>
 8007b08:	f04f 34ff 	mov.w	r4, #4294967295
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	2000025c 	.word	0x2000025c

08007b14 <_malloc_r>:
 8007b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	1ccd      	adds	r5, r1, #3
 8007b1a:	f025 0503 	bic.w	r5, r5, #3
 8007b1e:	3508      	adds	r5, #8
 8007b20:	2d0c      	cmp	r5, #12
 8007b22:	bf38      	it	cc
 8007b24:	250c      	movcc	r5, #12
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	4607      	mov	r7, r0
 8007b2a:	db01      	blt.n	8007b30 <_malloc_r+0x1c>
 8007b2c:	42a9      	cmp	r1, r5
 8007b2e:	d905      	bls.n	8007b3c <_malloc_r+0x28>
 8007b30:	230c      	movs	r3, #12
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	2600      	movs	r6, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c10 <_malloc_r+0xfc>
 8007b40:	f000 f868 	bl	8007c14 <__malloc_lock>
 8007b44:	f8d8 3000 	ldr.w	r3, [r8]
 8007b48:	461c      	mov	r4, r3
 8007b4a:	bb5c      	cbnz	r4, 8007ba4 <_malloc_r+0x90>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7ff ffc0 	bl	8007ad4 <sbrk_aligned>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	4604      	mov	r4, r0
 8007b58:	d155      	bne.n	8007c06 <_malloc_r+0xf2>
 8007b5a:	f8d8 4000 	ldr.w	r4, [r8]
 8007b5e:	4626      	mov	r6, r4
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	d145      	bne.n	8007bf0 <_malloc_r+0xdc>
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	d048      	beq.n	8007bfa <_malloc_r+0xe6>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	eb04 0903 	add.w	r9, r4, r3
 8007b72:	f000 fa9f 	bl	80080b4 <_sbrk_r>
 8007b76:	4581      	cmp	r9, r0
 8007b78:	d13f      	bne.n	8007bfa <_malloc_r+0xe6>
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	1a6d      	subs	r5, r5, r1
 8007b7e:	4629      	mov	r1, r5
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff ffa7 	bl	8007ad4 <sbrk_aligned>
 8007b86:	3001      	adds	r0, #1
 8007b88:	d037      	beq.n	8007bfa <_malloc_r+0xe6>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	442b      	add	r3, r5
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	f8d8 3000 	ldr.w	r3, [r8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d038      	beq.n	8007c0a <_malloc_r+0xf6>
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	42a2      	cmp	r2, r4
 8007b9c:	d12b      	bne.n	8007bf6 <_malloc_r+0xe2>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	e00f      	b.n	8007bc4 <_malloc_r+0xb0>
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	1b52      	subs	r2, r2, r5
 8007ba8:	d41f      	bmi.n	8007bea <_malloc_r+0xd6>
 8007baa:	2a0b      	cmp	r2, #11
 8007bac:	d917      	bls.n	8007bde <_malloc_r+0xca>
 8007bae:	1961      	adds	r1, r4, r5
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	6025      	str	r5, [r4, #0]
 8007bb4:	bf18      	it	ne
 8007bb6:	6059      	strne	r1, [r3, #4]
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	bf08      	it	eq
 8007bbc:	f8c8 1000 	streq.w	r1, [r8]
 8007bc0:	5162      	str	r2, [r4, r5]
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f104 060b 	add.w	r6, r4, #11
 8007bca:	f000 f829 	bl	8007c20 <__malloc_unlock>
 8007bce:	f026 0607 	bic.w	r6, r6, #7
 8007bd2:	1d23      	adds	r3, r4, #4
 8007bd4:	1af2      	subs	r2, r6, r3
 8007bd6:	d0ae      	beq.n	8007b36 <_malloc_r+0x22>
 8007bd8:	1b9b      	subs	r3, r3, r6
 8007bda:	50a3      	str	r3, [r4, r2]
 8007bdc:	e7ab      	b.n	8007b36 <_malloc_r+0x22>
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	6862      	ldr	r2, [r4, #4]
 8007be2:	d1dd      	bne.n	8007ba0 <_malloc_r+0x8c>
 8007be4:	f8c8 2000 	str.w	r2, [r8]
 8007be8:	e7ec      	b.n	8007bc4 <_malloc_r+0xb0>
 8007bea:	4623      	mov	r3, r4
 8007bec:	6864      	ldr	r4, [r4, #4]
 8007bee:	e7ac      	b.n	8007b4a <_malloc_r+0x36>
 8007bf0:	4634      	mov	r4, r6
 8007bf2:	6876      	ldr	r6, [r6, #4]
 8007bf4:	e7b4      	b.n	8007b60 <_malloc_r+0x4c>
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	e7cc      	b.n	8007b94 <_malloc_r+0x80>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	603b      	str	r3, [r7, #0]
 8007bfe:	4638      	mov	r0, r7
 8007c00:	f000 f80e 	bl	8007c20 <__malloc_unlock>
 8007c04:	e797      	b.n	8007b36 <_malloc_r+0x22>
 8007c06:	6025      	str	r5, [r4, #0]
 8007c08:	e7dc      	b.n	8007bc4 <_malloc_r+0xb0>
 8007c0a:	605b      	str	r3, [r3, #4]
 8007c0c:	deff      	udf	#255	; 0xff
 8007c0e:	bf00      	nop
 8007c10:	20000258 	.word	0x20000258

08007c14 <__malloc_lock>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__malloc_lock+0x8>)
 8007c16:	f000 ba9a 	b.w	800814e <__retarget_lock_acquire_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	200003a0 	.word	0x200003a0

08007c20 <__malloc_unlock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	; (8007c28 <__malloc_unlock+0x8>)
 8007c22:	f000 ba95 	b.w	8008150 <__retarget_lock_release_recursive>
 8007c26:	bf00      	nop
 8007c28:	200003a0 	.word	0x200003a0

08007c2c <std>:
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	4604      	mov	r4, r0
 8007c32:	e9c0 3300 	strd	r3, r3, [r0]
 8007c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c3a:	6083      	str	r3, [r0, #8]
 8007c3c:	8181      	strh	r1, [r0, #12]
 8007c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c40:	81c2      	strh	r2, [r0, #14]
 8007c42:	6183      	str	r3, [r0, #24]
 8007c44:	4619      	mov	r1, r3
 8007c46:	2208      	movs	r2, #8
 8007c48:	305c      	adds	r0, #92	; 0x5c
 8007c4a:	f000 f9f7 	bl	800803c <memset>
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <std+0x58>)
 8007c50:	6263      	str	r3, [r4, #36]	; 0x24
 8007c52:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <std+0x5c>)
 8007c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c56:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <std+0x60>)
 8007c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <std+0x64>)
 8007c5c:	6323      	str	r3, [r4, #48]	; 0x30
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <std+0x68>)
 8007c60:	6224      	str	r4, [r4, #32]
 8007c62:	429c      	cmp	r4, r3
 8007c64:	d006      	beq.n	8007c74 <std+0x48>
 8007c66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c6a:	4294      	cmp	r4, r2
 8007c6c:	d002      	beq.n	8007c74 <std+0x48>
 8007c6e:	33d0      	adds	r3, #208	; 0xd0
 8007c70:	429c      	cmp	r4, r3
 8007c72:	d105      	bne.n	8007c80 <std+0x54>
 8007c74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c7c:	f000 ba66 	b.w	800814c <__retarget_lock_init_recursive>
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	bf00      	nop
 8007c84:	08007e8d 	.word	0x08007e8d
 8007c88:	08007eaf 	.word	0x08007eaf
 8007c8c:	08007ee7 	.word	0x08007ee7
 8007c90:	08007f0b 	.word	0x08007f0b
 8007c94:	20000260 	.word	0x20000260

08007c98 <stdio_exit_handler>:
 8007c98:	4a02      	ldr	r2, [pc, #8]	; (8007ca4 <stdio_exit_handler+0xc>)
 8007c9a:	4903      	ldr	r1, [pc, #12]	; (8007ca8 <stdio_exit_handler+0x10>)
 8007c9c:	4803      	ldr	r0, [pc, #12]	; (8007cac <stdio_exit_handler+0x14>)
 8007c9e:	f000 b869 	b.w	8007d74 <_fwalk_sglue>
 8007ca2:	bf00      	nop
 8007ca4:	2000000c 	.word	0x2000000c
 8007ca8:	080088a1 	.word	0x080088a1
 8007cac:	20000018 	.word	0x20000018

08007cb0 <cleanup_stdio>:
 8007cb0:	6841      	ldr	r1, [r0, #4]
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <cleanup_stdio+0x34>)
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	4604      	mov	r4, r0
 8007cba:	d001      	beq.n	8007cc0 <cleanup_stdio+0x10>
 8007cbc:	f000 fdf0 	bl	80088a0 <_fflush_r>
 8007cc0:	68a1      	ldr	r1, [r4, #8]
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <cleanup_stdio+0x38>)
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	d002      	beq.n	8007cce <cleanup_stdio+0x1e>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fde9 	bl	80088a0 <_fflush_r>
 8007cce:	68e1      	ldr	r1, [r4, #12]
 8007cd0:	4b06      	ldr	r3, [pc, #24]	; (8007cec <cleanup_stdio+0x3c>)
 8007cd2:	4299      	cmp	r1, r3
 8007cd4:	d004      	beq.n	8007ce0 <cleanup_stdio+0x30>
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cdc:	f000 bde0 	b.w	80088a0 <_fflush_r>
 8007ce0:	bd10      	pop	{r4, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000260 	.word	0x20000260
 8007ce8:	200002c8 	.word	0x200002c8
 8007cec:	20000330 	.word	0x20000330

08007cf0 <global_stdio_init.part.0>:
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <global_stdio_init.part.0+0x30>)
 8007cf4:	4c0b      	ldr	r4, [pc, #44]	; (8007d24 <global_stdio_init.part.0+0x34>)
 8007cf6:	4a0c      	ldr	r2, [pc, #48]	; (8007d28 <global_stdio_init.part.0+0x38>)
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2104      	movs	r1, #4
 8007d00:	f7ff ff94 	bl	8007c2c <std>
 8007d04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d08:	2201      	movs	r2, #1
 8007d0a:	2109      	movs	r1, #9
 8007d0c:	f7ff ff8e 	bl	8007c2c <std>
 8007d10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d14:	2202      	movs	r2, #2
 8007d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d1a:	2112      	movs	r1, #18
 8007d1c:	f7ff bf86 	b.w	8007c2c <std>
 8007d20:	20000398 	.word	0x20000398
 8007d24:	20000260 	.word	0x20000260
 8007d28:	08007c99 	.word	0x08007c99

08007d2c <__sfp_lock_acquire>:
 8007d2c:	4801      	ldr	r0, [pc, #4]	; (8007d34 <__sfp_lock_acquire+0x8>)
 8007d2e:	f000 ba0e 	b.w	800814e <__retarget_lock_acquire_recursive>
 8007d32:	bf00      	nop
 8007d34:	200003a1 	.word	0x200003a1

08007d38 <__sfp_lock_release>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__sfp_lock_release+0x8>)
 8007d3a:	f000 ba09 	b.w	8008150 <__retarget_lock_release_recursive>
 8007d3e:	bf00      	nop
 8007d40:	200003a1 	.word	0x200003a1

08007d44 <__sinit>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4604      	mov	r4, r0
 8007d48:	f7ff fff0 	bl	8007d2c <__sfp_lock_acquire>
 8007d4c:	6a23      	ldr	r3, [r4, #32]
 8007d4e:	b11b      	cbz	r3, 8007d58 <__sinit+0x14>
 8007d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d54:	f7ff bff0 	b.w	8007d38 <__sfp_lock_release>
 8007d58:	4b04      	ldr	r3, [pc, #16]	; (8007d6c <__sinit+0x28>)
 8007d5a:	6223      	str	r3, [r4, #32]
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <__sinit+0x2c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f5      	bne.n	8007d50 <__sinit+0xc>
 8007d64:	f7ff ffc4 	bl	8007cf0 <global_stdio_init.part.0>
 8007d68:	e7f2      	b.n	8007d50 <__sinit+0xc>
 8007d6a:	bf00      	nop
 8007d6c:	08007cb1 	.word	0x08007cb1
 8007d70:	20000398 	.word	0x20000398

08007d74 <_fwalk_sglue>:
 8007d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d78:	4607      	mov	r7, r0
 8007d7a:	4688      	mov	r8, r1
 8007d7c:	4614      	mov	r4, r2
 8007d7e:	2600      	movs	r6, #0
 8007d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d84:	f1b9 0901 	subs.w	r9, r9, #1
 8007d88:	d505      	bpl.n	8007d96 <_fwalk_sglue+0x22>
 8007d8a:	6824      	ldr	r4, [r4, #0]
 8007d8c:	2c00      	cmp	r4, #0
 8007d8e:	d1f7      	bne.n	8007d80 <_fwalk_sglue+0xc>
 8007d90:	4630      	mov	r0, r6
 8007d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d907      	bls.n	8007dac <_fwalk_sglue+0x38>
 8007d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007da0:	3301      	adds	r3, #1
 8007da2:	d003      	beq.n	8007dac <_fwalk_sglue+0x38>
 8007da4:	4629      	mov	r1, r5
 8007da6:	4638      	mov	r0, r7
 8007da8:	47c0      	blx	r8
 8007daa:	4306      	orrs	r6, r0
 8007dac:	3568      	adds	r5, #104	; 0x68
 8007dae:	e7e9      	b.n	8007d84 <_fwalk_sglue+0x10>

08007db0 <iprintf>:
 8007db0:	b40f      	push	{r0, r1, r2, r3}
 8007db2:	b507      	push	{r0, r1, r2, lr}
 8007db4:	4906      	ldr	r1, [pc, #24]	; (8007dd0 <iprintf+0x20>)
 8007db6:	ab04      	add	r3, sp, #16
 8007db8:	6808      	ldr	r0, [r1, #0]
 8007dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dbe:	6881      	ldr	r1, [r0, #8]
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	f000 fa3d 	bl	8008240 <_vfiprintf_r>
 8007dc6:	b003      	add	sp, #12
 8007dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dcc:	b004      	add	sp, #16
 8007dce:	4770      	bx	lr
 8007dd0:	20000064 	.word	0x20000064

08007dd4 <_puts_r>:
 8007dd4:	6a03      	ldr	r3, [r0, #32]
 8007dd6:	b570      	push	{r4, r5, r6, lr}
 8007dd8:	6884      	ldr	r4, [r0, #8]
 8007dda:	4605      	mov	r5, r0
 8007ddc:	460e      	mov	r6, r1
 8007dde:	b90b      	cbnz	r3, 8007de4 <_puts_r+0x10>
 8007de0:	f7ff ffb0 	bl	8007d44 <__sinit>
 8007de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de6:	07db      	lsls	r3, r3, #31
 8007de8:	d405      	bmi.n	8007df6 <_puts_r+0x22>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	0598      	lsls	r0, r3, #22
 8007dee:	d402      	bmi.n	8007df6 <_puts_r+0x22>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f000 f9ac 	bl	800814e <__retarget_lock_acquire_recursive>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	0719      	lsls	r1, r3, #28
 8007dfa:	d513      	bpl.n	8007e24 <_puts_r+0x50>
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	b18b      	cbz	r3, 8007e24 <_puts_r+0x50>
 8007e00:	3e01      	subs	r6, #1
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	60a3      	str	r3, [r4, #8]
 8007e0c:	b9e9      	cbnz	r1, 8007e4a <_puts_r+0x76>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	da2e      	bge.n	8007e70 <_puts_r+0x9c>
 8007e12:	4622      	mov	r2, r4
 8007e14:	210a      	movs	r1, #10
 8007e16:	4628      	mov	r0, r5
 8007e18:	f000 f87b 	bl	8007f12 <__swbuf_r>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d007      	beq.n	8007e30 <_puts_r+0x5c>
 8007e20:	250a      	movs	r5, #10
 8007e22:	e007      	b.n	8007e34 <_puts_r+0x60>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f8b0 	bl	8007f8c <__swsetup_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d0e7      	beq.n	8007e00 <_puts_r+0x2c>
 8007e30:	f04f 35ff 	mov.w	r5, #4294967295
 8007e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e36:	07da      	lsls	r2, r3, #31
 8007e38:	d405      	bmi.n	8007e46 <_puts_r+0x72>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	059b      	lsls	r3, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_puts_r+0x72>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f000 f985 	bl	8008150 <__retarget_lock_release_recursive>
 8007e46:	4628      	mov	r0, r5
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da04      	bge.n	8007e58 <_puts_r+0x84>
 8007e4e:	69a2      	ldr	r2, [r4, #24]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	dc06      	bgt.n	8007e62 <_puts_r+0x8e>
 8007e54:	290a      	cmp	r1, #10
 8007e56:	d004      	beq.n	8007e62 <_puts_r+0x8e>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	6022      	str	r2, [r4, #0]
 8007e5e:	7019      	strb	r1, [r3, #0]
 8007e60:	e7cf      	b.n	8007e02 <_puts_r+0x2e>
 8007e62:	4622      	mov	r2, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 f854 	bl	8007f12 <__swbuf_r>
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d1c9      	bne.n	8007e02 <_puts_r+0x2e>
 8007e6e:	e7df      	b.n	8007e30 <_puts_r+0x5c>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	250a      	movs	r5, #10
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	6022      	str	r2, [r4, #0]
 8007e78:	701d      	strb	r5, [r3, #0]
 8007e7a:	e7db      	b.n	8007e34 <_puts_r+0x60>

08007e7c <puts>:
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <puts+0xc>)
 8007e7e:	4601      	mov	r1, r0
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f7ff bfa7 	b.w	8007dd4 <_puts_r>
 8007e86:	bf00      	nop
 8007e88:	20000064 	.word	0x20000064

08007e8c <__sread>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	460c      	mov	r4, r1
 8007e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e94:	f000 f8fc 	bl	8008090 <_read_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	bfab      	itete	ge
 8007e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea0:	181b      	addge	r3, r3, r0
 8007ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ea6:	bfac      	ite	ge
 8007ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eaa:	81a3      	strhlt	r3, [r4, #12]
 8007eac:	bd10      	pop	{r4, pc}

08007eae <__swrite>:
 8007eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	461f      	mov	r7, r3
 8007eb4:	898b      	ldrh	r3, [r1, #12]
 8007eb6:	05db      	lsls	r3, r3, #23
 8007eb8:	4605      	mov	r5, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	d505      	bpl.n	8007ecc <__swrite+0x1e>
 8007ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f000 f8d0 	bl	800806c <_lseek_r>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	4632      	mov	r2, r6
 8007eda:	463b      	mov	r3, r7
 8007edc:	4628      	mov	r0, r5
 8007ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee2:	f000 b8f7 	b.w	80080d4 <_write_r>

08007ee6 <__sseek>:
 8007ee6:	b510      	push	{r4, lr}
 8007ee8:	460c      	mov	r4, r1
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	f000 f8bd 	bl	800806c <_lseek_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	bf15      	itete	ne
 8007ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f02:	81a3      	strheq	r3, [r4, #12]
 8007f04:	bf18      	it	ne
 8007f06:	81a3      	strhne	r3, [r4, #12]
 8007f08:	bd10      	pop	{r4, pc}

08007f0a <__sclose>:
 8007f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0e:	f000 b89d 	b.w	800804c <_close_r>

08007f12 <__swbuf_r>:
 8007f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f14:	460e      	mov	r6, r1
 8007f16:	4614      	mov	r4, r2
 8007f18:	4605      	mov	r5, r0
 8007f1a:	b118      	cbz	r0, 8007f24 <__swbuf_r+0x12>
 8007f1c:	6a03      	ldr	r3, [r0, #32]
 8007f1e:	b90b      	cbnz	r3, 8007f24 <__swbuf_r+0x12>
 8007f20:	f7ff ff10 	bl	8007d44 <__sinit>
 8007f24:	69a3      	ldr	r3, [r4, #24]
 8007f26:	60a3      	str	r3, [r4, #8]
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	071a      	lsls	r2, r3, #28
 8007f2c:	d525      	bpl.n	8007f7a <__swbuf_r+0x68>
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	b31b      	cbz	r3, 8007f7a <__swbuf_r+0x68>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	6922      	ldr	r2, [r4, #16]
 8007f36:	1a98      	subs	r0, r3, r2
 8007f38:	6963      	ldr	r3, [r4, #20]
 8007f3a:	b2f6      	uxtb	r6, r6
 8007f3c:	4283      	cmp	r3, r0
 8007f3e:	4637      	mov	r7, r6
 8007f40:	dc04      	bgt.n	8007f4c <__swbuf_r+0x3a>
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fcab 	bl	80088a0 <_fflush_r>
 8007f4a:	b9e0      	cbnz	r0, 8007f86 <__swbuf_r+0x74>
 8007f4c:	68a3      	ldr	r3, [r4, #8]
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	60a3      	str	r3, [r4, #8]
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	701e      	strb	r6, [r3, #0]
 8007f5a:	6962      	ldr	r2, [r4, #20]
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d004      	beq.n	8007f6c <__swbuf_r+0x5a>
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	07db      	lsls	r3, r3, #31
 8007f66:	d506      	bpl.n	8007f76 <__swbuf_r+0x64>
 8007f68:	2e0a      	cmp	r6, #10
 8007f6a:	d104      	bne.n	8007f76 <__swbuf_r+0x64>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 fc96 	bl	80088a0 <_fflush_r>
 8007f74:	b938      	cbnz	r0, 8007f86 <__swbuf_r+0x74>
 8007f76:	4638      	mov	r0, r7
 8007f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 f805 	bl	8007f8c <__swsetup_r>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d0d5      	beq.n	8007f32 <__swbuf_r+0x20>
 8007f86:	f04f 37ff 	mov.w	r7, #4294967295
 8007f8a:	e7f4      	b.n	8007f76 <__swbuf_r+0x64>

08007f8c <__swsetup_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4b2a      	ldr	r3, [pc, #168]	; (8008038 <__swsetup_r+0xac>)
 8007f90:	4605      	mov	r5, r0
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	460c      	mov	r4, r1
 8007f96:	b118      	cbz	r0, 8007fa0 <__swsetup_r+0x14>
 8007f98:	6a03      	ldr	r3, [r0, #32]
 8007f9a:	b90b      	cbnz	r3, 8007fa0 <__swsetup_r+0x14>
 8007f9c:	f7ff fed2 	bl	8007d44 <__sinit>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fa6:	0718      	lsls	r0, r3, #28
 8007fa8:	d422      	bmi.n	8007ff0 <__swsetup_r+0x64>
 8007faa:	06d9      	lsls	r1, r3, #27
 8007fac:	d407      	bmi.n	8007fbe <__swsetup_r+0x32>
 8007fae:	2309      	movs	r3, #9
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	e034      	b.n	8008028 <__swsetup_r+0x9c>
 8007fbe:	0758      	lsls	r0, r3, #29
 8007fc0:	d512      	bpl.n	8007fe8 <__swsetup_r+0x5c>
 8007fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fc4:	b141      	cbz	r1, 8007fd8 <__swsetup_r+0x4c>
 8007fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fca:	4299      	cmp	r1, r3
 8007fcc:	d002      	beq.n	8007fd4 <__swsetup_r+0x48>
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f8c0 	bl	8008154 <_free_r>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6363      	str	r3, [r4, #52]	; 0x34
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	6063      	str	r3, [r4, #4]
 8007fe4:	6923      	ldr	r3, [r4, #16]
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	f043 0308 	orr.w	r3, r3, #8
 8007fee:	81a3      	strh	r3, [r4, #12]
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	b94b      	cbnz	r3, 8008008 <__swsetup_r+0x7c>
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ffe:	d003      	beq.n	8008008 <__swsetup_r+0x7c>
 8008000:	4621      	mov	r1, r4
 8008002:	4628      	mov	r0, r5
 8008004:	f000 fc9a 	bl	800893c <__smakebuf_r>
 8008008:	89a0      	ldrh	r0, [r4, #12]
 800800a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800800e:	f010 0301 	ands.w	r3, r0, #1
 8008012:	d00a      	beq.n	800802a <__swsetup_r+0x9e>
 8008014:	2300      	movs	r3, #0
 8008016:	60a3      	str	r3, [r4, #8]
 8008018:	6963      	ldr	r3, [r4, #20]
 800801a:	425b      	negs	r3, r3
 800801c:	61a3      	str	r3, [r4, #24]
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	b943      	cbnz	r3, 8008034 <__swsetup_r+0xa8>
 8008022:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008026:	d1c4      	bne.n	8007fb2 <__swsetup_r+0x26>
 8008028:	bd38      	pop	{r3, r4, r5, pc}
 800802a:	0781      	lsls	r1, r0, #30
 800802c:	bf58      	it	pl
 800802e:	6963      	ldrpl	r3, [r4, #20]
 8008030:	60a3      	str	r3, [r4, #8]
 8008032:	e7f4      	b.n	800801e <__swsetup_r+0x92>
 8008034:	2000      	movs	r0, #0
 8008036:	e7f7      	b.n	8008028 <__swsetup_r+0x9c>
 8008038:	20000064 	.word	0x20000064

0800803c <memset>:
 800803c:	4402      	add	r2, r0
 800803e:	4603      	mov	r3, r0
 8008040:	4293      	cmp	r3, r2
 8008042:	d100      	bne.n	8008046 <memset+0xa>
 8008044:	4770      	bx	lr
 8008046:	f803 1b01 	strb.w	r1, [r3], #1
 800804a:	e7f9      	b.n	8008040 <memset+0x4>

0800804c <_close_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d06      	ldr	r5, [pc, #24]	; (8008068 <_close_r+0x1c>)
 8008050:	2300      	movs	r3, #0
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7f8 ff1b 	bl	8000e92 <_close>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_close_r+0x1a>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_close_r+0x1a>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	2000039c 	.word	0x2000039c

0800806c <_lseek_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	; (800808c <_lseek_r+0x20>)
 8008070:	4604      	mov	r4, r0
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	2200      	movs	r2, #0
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7f8 ff30 	bl	8000ee0 <_lseek>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_lseek_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_lseek_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	2000039c 	.word	0x2000039c

08008090 <_read_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	; (80080b0 <_read_r+0x20>)
 8008094:	4604      	mov	r4, r0
 8008096:	4608      	mov	r0, r1
 8008098:	4611      	mov	r1, r2
 800809a:	2200      	movs	r2, #0
 800809c:	602a      	str	r2, [r5, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7f8 feda 	bl	8000e58 <_read>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_read_r+0x1e>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_read_r+0x1e>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	2000039c 	.word	0x2000039c

080080b4 <_sbrk_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d06      	ldr	r5, [pc, #24]	; (80080d0 <_sbrk_r+0x1c>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	602b      	str	r3, [r5, #0]
 80080c0:	f7f8 ff1c 	bl	8000efc <_sbrk>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_sbrk_r+0x1a>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_sbrk_r+0x1a>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	2000039c 	.word	0x2000039c

080080d4 <_write_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	; (80080f4 <_write_r+0x20>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7f8 fd00 	bl	8000ae8 <_write>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_write_r+0x1e>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_write_r+0x1e>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	2000039c 	.word	0x2000039c

080080f8 <__errno>:
 80080f8:	4b01      	ldr	r3, [pc, #4]	; (8008100 <__errno+0x8>)
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000064 	.word	0x20000064

08008104 <__libc_init_array>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	4d0d      	ldr	r5, [pc, #52]	; (800813c <__libc_init_array+0x38>)
 8008108:	4c0d      	ldr	r4, [pc, #52]	; (8008140 <__libc_init_array+0x3c>)
 800810a:	1b64      	subs	r4, r4, r5
 800810c:	10a4      	asrs	r4, r4, #2
 800810e:	2600      	movs	r6, #0
 8008110:	42a6      	cmp	r6, r4
 8008112:	d109      	bne.n	8008128 <__libc_init_array+0x24>
 8008114:	4d0b      	ldr	r5, [pc, #44]	; (8008144 <__libc_init_array+0x40>)
 8008116:	4c0c      	ldr	r4, [pc, #48]	; (8008148 <__libc_init_array+0x44>)
 8008118:	f000 fc6e 	bl	80089f8 <_init>
 800811c:	1b64      	subs	r4, r4, r5
 800811e:	10a4      	asrs	r4, r4, #2
 8008120:	2600      	movs	r6, #0
 8008122:	42a6      	cmp	r6, r4
 8008124:	d105      	bne.n	8008132 <__libc_init_array+0x2e>
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	f855 3b04 	ldr.w	r3, [r5], #4
 800812c:	4798      	blx	r3
 800812e:	3601      	adds	r6, #1
 8008130:	e7ee      	b.n	8008110 <__libc_init_array+0xc>
 8008132:	f855 3b04 	ldr.w	r3, [r5], #4
 8008136:	4798      	blx	r3
 8008138:	3601      	adds	r6, #1
 800813a:	e7f2      	b.n	8008122 <__libc_init_array+0x1e>
 800813c:	080090cc 	.word	0x080090cc
 8008140:	080090cc 	.word	0x080090cc
 8008144:	080090cc 	.word	0x080090cc
 8008148:	080090d0 	.word	0x080090d0

0800814c <__retarget_lock_init_recursive>:
 800814c:	4770      	bx	lr

0800814e <__retarget_lock_acquire_recursive>:
 800814e:	4770      	bx	lr

08008150 <__retarget_lock_release_recursive>:
 8008150:	4770      	bx	lr
	...

08008154 <_free_r>:
 8008154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008156:	2900      	cmp	r1, #0
 8008158:	d044      	beq.n	80081e4 <_free_r+0x90>
 800815a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815e:	9001      	str	r0, [sp, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f1a1 0404 	sub.w	r4, r1, #4
 8008166:	bfb8      	it	lt
 8008168:	18e4      	addlt	r4, r4, r3
 800816a:	f7ff fd53 	bl	8007c14 <__malloc_lock>
 800816e:	4a1e      	ldr	r2, [pc, #120]	; (80081e8 <_free_r+0x94>)
 8008170:	9801      	ldr	r0, [sp, #4]
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	b933      	cbnz	r3, 8008184 <_free_r+0x30>
 8008176:	6063      	str	r3, [r4, #4]
 8008178:	6014      	str	r4, [r2, #0]
 800817a:	b003      	add	sp, #12
 800817c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008180:	f7ff bd4e 	b.w	8007c20 <__malloc_unlock>
 8008184:	42a3      	cmp	r3, r4
 8008186:	d908      	bls.n	800819a <_free_r+0x46>
 8008188:	6825      	ldr	r5, [r4, #0]
 800818a:	1961      	adds	r1, r4, r5
 800818c:	428b      	cmp	r3, r1
 800818e:	bf01      	itttt	eq
 8008190:	6819      	ldreq	r1, [r3, #0]
 8008192:	685b      	ldreq	r3, [r3, #4]
 8008194:	1949      	addeq	r1, r1, r5
 8008196:	6021      	streq	r1, [r4, #0]
 8008198:	e7ed      	b.n	8008176 <_free_r+0x22>
 800819a:	461a      	mov	r2, r3
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	b10b      	cbz	r3, 80081a4 <_free_r+0x50>
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	d9fa      	bls.n	800819a <_free_r+0x46>
 80081a4:	6811      	ldr	r1, [r2, #0]
 80081a6:	1855      	adds	r5, r2, r1
 80081a8:	42a5      	cmp	r5, r4
 80081aa:	d10b      	bne.n	80081c4 <_free_r+0x70>
 80081ac:	6824      	ldr	r4, [r4, #0]
 80081ae:	4421      	add	r1, r4
 80081b0:	1854      	adds	r4, r2, r1
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	6011      	str	r1, [r2, #0]
 80081b6:	d1e0      	bne.n	800817a <_free_r+0x26>
 80081b8:	681c      	ldr	r4, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	6053      	str	r3, [r2, #4]
 80081be:	440c      	add	r4, r1
 80081c0:	6014      	str	r4, [r2, #0]
 80081c2:	e7da      	b.n	800817a <_free_r+0x26>
 80081c4:	d902      	bls.n	80081cc <_free_r+0x78>
 80081c6:	230c      	movs	r3, #12
 80081c8:	6003      	str	r3, [r0, #0]
 80081ca:	e7d6      	b.n	800817a <_free_r+0x26>
 80081cc:	6825      	ldr	r5, [r4, #0]
 80081ce:	1961      	adds	r1, r4, r5
 80081d0:	428b      	cmp	r3, r1
 80081d2:	bf04      	itt	eq
 80081d4:	6819      	ldreq	r1, [r3, #0]
 80081d6:	685b      	ldreq	r3, [r3, #4]
 80081d8:	6063      	str	r3, [r4, #4]
 80081da:	bf04      	itt	eq
 80081dc:	1949      	addeq	r1, r1, r5
 80081de:	6021      	streq	r1, [r4, #0]
 80081e0:	6054      	str	r4, [r2, #4]
 80081e2:	e7ca      	b.n	800817a <_free_r+0x26>
 80081e4:	b003      	add	sp, #12
 80081e6:	bd30      	pop	{r4, r5, pc}
 80081e8:	20000258 	.word	0x20000258

080081ec <__sfputc_r>:
 80081ec:	6893      	ldr	r3, [r2, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	b410      	push	{r4}
 80081f4:	6093      	str	r3, [r2, #8]
 80081f6:	da08      	bge.n	800820a <__sfputc_r+0x1e>
 80081f8:	6994      	ldr	r4, [r2, #24]
 80081fa:	42a3      	cmp	r3, r4
 80081fc:	db01      	blt.n	8008202 <__sfputc_r+0x16>
 80081fe:	290a      	cmp	r1, #10
 8008200:	d103      	bne.n	800820a <__sfputc_r+0x1e>
 8008202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008206:	f7ff be84 	b.w	8007f12 <__swbuf_r>
 800820a:	6813      	ldr	r3, [r2, #0]
 800820c:	1c58      	adds	r0, r3, #1
 800820e:	6010      	str	r0, [r2, #0]
 8008210:	7019      	strb	r1, [r3, #0]
 8008212:	4608      	mov	r0, r1
 8008214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008218:	4770      	bx	lr

0800821a <__sfputs_r>:
 800821a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821c:	4606      	mov	r6, r0
 800821e:	460f      	mov	r7, r1
 8008220:	4614      	mov	r4, r2
 8008222:	18d5      	adds	r5, r2, r3
 8008224:	42ac      	cmp	r4, r5
 8008226:	d101      	bne.n	800822c <__sfputs_r+0x12>
 8008228:	2000      	movs	r0, #0
 800822a:	e007      	b.n	800823c <__sfputs_r+0x22>
 800822c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008230:	463a      	mov	r2, r7
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff ffda 	bl	80081ec <__sfputc_r>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d1f3      	bne.n	8008224 <__sfputs_r+0xa>
 800823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008240 <_vfiprintf_r>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	460d      	mov	r5, r1
 8008246:	b09d      	sub	sp, #116	; 0x74
 8008248:	4614      	mov	r4, r2
 800824a:	4698      	mov	r8, r3
 800824c:	4606      	mov	r6, r0
 800824e:	b118      	cbz	r0, 8008258 <_vfiprintf_r+0x18>
 8008250:	6a03      	ldr	r3, [r0, #32]
 8008252:	b90b      	cbnz	r3, 8008258 <_vfiprintf_r+0x18>
 8008254:	f7ff fd76 	bl	8007d44 <__sinit>
 8008258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800825a:	07d9      	lsls	r1, r3, #31
 800825c:	d405      	bmi.n	800826a <_vfiprintf_r+0x2a>
 800825e:	89ab      	ldrh	r3, [r5, #12]
 8008260:	059a      	lsls	r2, r3, #22
 8008262:	d402      	bmi.n	800826a <_vfiprintf_r+0x2a>
 8008264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008266:	f7ff ff72 	bl	800814e <__retarget_lock_acquire_recursive>
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	071b      	lsls	r3, r3, #28
 800826e:	d501      	bpl.n	8008274 <_vfiprintf_r+0x34>
 8008270:	692b      	ldr	r3, [r5, #16]
 8008272:	b99b      	cbnz	r3, 800829c <_vfiprintf_r+0x5c>
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff fe88 	bl	8007f8c <__swsetup_r>
 800827c:	b170      	cbz	r0, 800829c <_vfiprintf_r+0x5c>
 800827e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008280:	07dc      	lsls	r4, r3, #31
 8008282:	d504      	bpl.n	800828e <_vfiprintf_r+0x4e>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	b01d      	add	sp, #116	; 0x74
 800828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828e:	89ab      	ldrh	r3, [r5, #12]
 8008290:	0598      	lsls	r0, r3, #22
 8008292:	d4f7      	bmi.n	8008284 <_vfiprintf_r+0x44>
 8008294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008296:	f7ff ff5b 	bl	8008150 <__retarget_lock_release_recursive>
 800829a:	e7f3      	b.n	8008284 <_vfiprintf_r+0x44>
 800829c:	2300      	movs	r3, #0
 800829e:	9309      	str	r3, [sp, #36]	; 0x24
 80082a0:	2320      	movs	r3, #32
 80082a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082aa:	2330      	movs	r3, #48	; 0x30
 80082ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008460 <_vfiprintf_r+0x220>
 80082b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082b4:	f04f 0901 	mov.w	r9, #1
 80082b8:	4623      	mov	r3, r4
 80082ba:	469a      	mov	sl, r3
 80082bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082c0:	b10a      	cbz	r2, 80082c6 <_vfiprintf_r+0x86>
 80082c2:	2a25      	cmp	r2, #37	; 0x25
 80082c4:	d1f9      	bne.n	80082ba <_vfiprintf_r+0x7a>
 80082c6:	ebba 0b04 	subs.w	fp, sl, r4
 80082ca:	d00b      	beq.n	80082e4 <_vfiprintf_r+0xa4>
 80082cc:	465b      	mov	r3, fp
 80082ce:	4622      	mov	r2, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff ffa1 	bl	800821a <__sfputs_r>
 80082d8:	3001      	adds	r0, #1
 80082da:	f000 80a9 	beq.w	8008430 <_vfiprintf_r+0x1f0>
 80082de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e0:	445a      	add	r2, fp
 80082e2:	9209      	str	r2, [sp, #36]	; 0x24
 80082e4:	f89a 3000 	ldrb.w	r3, [sl]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 80a1 	beq.w	8008430 <_vfiprintf_r+0x1f0>
 80082ee:	2300      	movs	r3, #0
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f8:	f10a 0a01 	add.w	sl, sl, #1
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	9307      	str	r3, [sp, #28]
 8008300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008304:	931a      	str	r3, [sp, #104]	; 0x68
 8008306:	4654      	mov	r4, sl
 8008308:	2205      	movs	r2, #5
 800830a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830e:	4854      	ldr	r0, [pc, #336]	; (8008460 <_vfiprintf_r+0x220>)
 8008310:	f7f7 ff66 	bl	80001e0 <memchr>
 8008314:	9a04      	ldr	r2, [sp, #16]
 8008316:	b9d8      	cbnz	r0, 8008350 <_vfiprintf_r+0x110>
 8008318:	06d1      	lsls	r1, r2, #27
 800831a:	bf44      	itt	mi
 800831c:	2320      	movmi	r3, #32
 800831e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008322:	0713      	lsls	r3, r2, #28
 8008324:	bf44      	itt	mi
 8008326:	232b      	movmi	r3, #43	; 0x2b
 8008328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800832c:	f89a 3000 	ldrb.w	r3, [sl]
 8008330:	2b2a      	cmp	r3, #42	; 0x2a
 8008332:	d015      	beq.n	8008360 <_vfiprintf_r+0x120>
 8008334:	9a07      	ldr	r2, [sp, #28]
 8008336:	4654      	mov	r4, sl
 8008338:	2000      	movs	r0, #0
 800833a:	f04f 0c0a 	mov.w	ip, #10
 800833e:	4621      	mov	r1, r4
 8008340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008344:	3b30      	subs	r3, #48	; 0x30
 8008346:	2b09      	cmp	r3, #9
 8008348:	d94d      	bls.n	80083e6 <_vfiprintf_r+0x1a6>
 800834a:	b1b0      	cbz	r0, 800837a <_vfiprintf_r+0x13a>
 800834c:	9207      	str	r2, [sp, #28]
 800834e:	e014      	b.n	800837a <_vfiprintf_r+0x13a>
 8008350:	eba0 0308 	sub.w	r3, r0, r8
 8008354:	fa09 f303 	lsl.w	r3, r9, r3
 8008358:	4313      	orrs	r3, r2
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	46a2      	mov	sl, r4
 800835e:	e7d2      	b.n	8008306 <_vfiprintf_r+0xc6>
 8008360:	9b03      	ldr	r3, [sp, #12]
 8008362:	1d19      	adds	r1, r3, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	9103      	str	r1, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	bfbb      	ittet	lt
 800836c:	425b      	neglt	r3, r3
 800836e:	f042 0202 	orrlt.w	r2, r2, #2
 8008372:	9307      	strge	r3, [sp, #28]
 8008374:	9307      	strlt	r3, [sp, #28]
 8008376:	bfb8      	it	lt
 8008378:	9204      	strlt	r2, [sp, #16]
 800837a:	7823      	ldrb	r3, [r4, #0]
 800837c:	2b2e      	cmp	r3, #46	; 0x2e
 800837e:	d10c      	bne.n	800839a <_vfiprintf_r+0x15a>
 8008380:	7863      	ldrb	r3, [r4, #1]
 8008382:	2b2a      	cmp	r3, #42	; 0x2a
 8008384:	d134      	bne.n	80083f0 <_vfiprintf_r+0x1b0>
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	1d1a      	adds	r2, r3, #4
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	9203      	str	r2, [sp, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfb8      	it	lt
 8008392:	f04f 33ff 	movlt.w	r3, #4294967295
 8008396:	3402      	adds	r4, #2
 8008398:	9305      	str	r3, [sp, #20]
 800839a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008470 <_vfiprintf_r+0x230>
 800839e:	7821      	ldrb	r1, [r4, #0]
 80083a0:	2203      	movs	r2, #3
 80083a2:	4650      	mov	r0, sl
 80083a4:	f7f7 ff1c 	bl	80001e0 <memchr>
 80083a8:	b138      	cbz	r0, 80083ba <_vfiprintf_r+0x17a>
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	eba0 000a 	sub.w	r0, r0, sl
 80083b0:	2240      	movs	r2, #64	; 0x40
 80083b2:	4082      	lsls	r2, r0
 80083b4:	4313      	orrs	r3, r2
 80083b6:	3401      	adds	r4, #1
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083be:	4829      	ldr	r0, [pc, #164]	; (8008464 <_vfiprintf_r+0x224>)
 80083c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083c4:	2206      	movs	r2, #6
 80083c6:	f7f7 ff0b 	bl	80001e0 <memchr>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d03f      	beq.n	800844e <_vfiprintf_r+0x20e>
 80083ce:	4b26      	ldr	r3, [pc, #152]	; (8008468 <_vfiprintf_r+0x228>)
 80083d0:	bb1b      	cbnz	r3, 800841a <_vfiprintf_r+0x1da>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	3307      	adds	r3, #7
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	3308      	adds	r3, #8
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e0:	443b      	add	r3, r7
 80083e2:	9309      	str	r3, [sp, #36]	; 0x24
 80083e4:	e768      	b.n	80082b8 <_vfiprintf_r+0x78>
 80083e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ea:	460c      	mov	r4, r1
 80083ec:	2001      	movs	r0, #1
 80083ee:	e7a6      	b.n	800833e <_vfiprintf_r+0xfe>
 80083f0:	2300      	movs	r3, #0
 80083f2:	3401      	adds	r4, #1
 80083f4:	9305      	str	r3, [sp, #20]
 80083f6:	4619      	mov	r1, r3
 80083f8:	f04f 0c0a 	mov.w	ip, #10
 80083fc:	4620      	mov	r0, r4
 80083fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008402:	3a30      	subs	r2, #48	; 0x30
 8008404:	2a09      	cmp	r2, #9
 8008406:	d903      	bls.n	8008410 <_vfiprintf_r+0x1d0>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0c6      	beq.n	800839a <_vfiprintf_r+0x15a>
 800840c:	9105      	str	r1, [sp, #20]
 800840e:	e7c4      	b.n	800839a <_vfiprintf_r+0x15a>
 8008410:	fb0c 2101 	mla	r1, ip, r1, r2
 8008414:	4604      	mov	r4, r0
 8008416:	2301      	movs	r3, #1
 8008418:	e7f0      	b.n	80083fc <_vfiprintf_r+0x1bc>
 800841a:	ab03      	add	r3, sp, #12
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	462a      	mov	r2, r5
 8008420:	4b12      	ldr	r3, [pc, #72]	; (800846c <_vfiprintf_r+0x22c>)
 8008422:	a904      	add	r1, sp, #16
 8008424:	4630      	mov	r0, r6
 8008426:	f3af 8000 	nop.w
 800842a:	4607      	mov	r7, r0
 800842c:	1c78      	adds	r0, r7, #1
 800842e:	d1d6      	bne.n	80083de <_vfiprintf_r+0x19e>
 8008430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008432:	07d9      	lsls	r1, r3, #31
 8008434:	d405      	bmi.n	8008442 <_vfiprintf_r+0x202>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	059a      	lsls	r2, r3, #22
 800843a:	d402      	bmi.n	8008442 <_vfiprintf_r+0x202>
 800843c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800843e:	f7ff fe87 	bl	8008150 <__retarget_lock_release_recursive>
 8008442:	89ab      	ldrh	r3, [r5, #12]
 8008444:	065b      	lsls	r3, r3, #25
 8008446:	f53f af1d 	bmi.w	8008284 <_vfiprintf_r+0x44>
 800844a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800844c:	e71c      	b.n	8008288 <_vfiprintf_r+0x48>
 800844e:	ab03      	add	r3, sp, #12
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	462a      	mov	r2, r5
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <_vfiprintf_r+0x22c>)
 8008456:	a904      	add	r1, sp, #16
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f879 	bl	8008550 <_printf_i>
 800845e:	e7e4      	b.n	800842a <_vfiprintf_r+0x1ea>
 8008460:	08009090 	.word	0x08009090
 8008464:	0800909a 	.word	0x0800909a
 8008468:	00000000 	.word	0x00000000
 800846c:	0800821b 	.word	0x0800821b
 8008470:	08009096 	.word	0x08009096

08008474 <_printf_common>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	4616      	mov	r6, r2
 800847a:	4699      	mov	r9, r3
 800847c:	688a      	ldr	r2, [r1, #8]
 800847e:	690b      	ldr	r3, [r1, #16]
 8008480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008484:	4293      	cmp	r3, r2
 8008486:	bfb8      	it	lt
 8008488:	4613      	movlt	r3, r2
 800848a:	6033      	str	r3, [r6, #0]
 800848c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008490:	4607      	mov	r7, r0
 8008492:	460c      	mov	r4, r1
 8008494:	b10a      	cbz	r2, 800849a <_printf_common+0x26>
 8008496:	3301      	adds	r3, #1
 8008498:	6033      	str	r3, [r6, #0]
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	0699      	lsls	r1, r3, #26
 800849e:	bf42      	ittt	mi
 80084a0:	6833      	ldrmi	r3, [r6, #0]
 80084a2:	3302      	addmi	r3, #2
 80084a4:	6033      	strmi	r3, [r6, #0]
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	f015 0506 	ands.w	r5, r5, #6
 80084ac:	d106      	bne.n	80084bc <_printf_common+0x48>
 80084ae:	f104 0a19 	add.w	sl, r4, #25
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	6832      	ldr	r2, [r6, #0]
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc26      	bgt.n	800850a <_printf_common+0x96>
 80084bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c0:	1e13      	subs	r3, r2, #0
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	bf18      	it	ne
 80084c6:	2301      	movne	r3, #1
 80084c8:	0692      	lsls	r2, r2, #26
 80084ca:	d42b      	bmi.n	8008524 <_printf_common+0xb0>
 80084cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d0:	4649      	mov	r1, r9
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d01e      	beq.n	8008518 <_printf_common+0xa4>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	6922      	ldr	r2, [r4, #16]
 80084de:	f003 0306 	and.w	r3, r3, #6
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	bf02      	ittt	eq
 80084e6:	68e5      	ldreq	r5, [r4, #12]
 80084e8:	6833      	ldreq	r3, [r6, #0]
 80084ea:	1aed      	subeq	r5, r5, r3
 80084ec:	68a3      	ldr	r3, [r4, #8]
 80084ee:	bf0c      	ite	eq
 80084f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f4:	2500      	movne	r5, #0
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bfc4      	itt	gt
 80084fa:	1a9b      	subgt	r3, r3, r2
 80084fc:	18ed      	addgt	r5, r5, r3
 80084fe:	2600      	movs	r6, #0
 8008500:	341a      	adds	r4, #26
 8008502:	42b5      	cmp	r5, r6
 8008504:	d11a      	bne.n	800853c <_printf_common+0xc8>
 8008506:	2000      	movs	r0, #0
 8008508:	e008      	b.n	800851c <_printf_common+0xa8>
 800850a:	2301      	movs	r3, #1
 800850c:	4652      	mov	r2, sl
 800850e:	4649      	mov	r1, r9
 8008510:	4638      	mov	r0, r7
 8008512:	47c0      	blx	r8
 8008514:	3001      	adds	r0, #1
 8008516:	d103      	bne.n	8008520 <_printf_common+0xac>
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	3501      	adds	r5, #1
 8008522:	e7c6      	b.n	80084b2 <_printf_common+0x3e>
 8008524:	18e1      	adds	r1, r4, r3
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	2030      	movs	r0, #48	; 0x30
 800852a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800852e:	4422      	add	r2, r4
 8008530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008538:	3302      	adds	r3, #2
 800853a:	e7c7      	b.n	80084cc <_printf_common+0x58>
 800853c:	2301      	movs	r3, #1
 800853e:	4622      	mov	r2, r4
 8008540:	4649      	mov	r1, r9
 8008542:	4638      	mov	r0, r7
 8008544:	47c0      	blx	r8
 8008546:	3001      	adds	r0, #1
 8008548:	d0e6      	beq.n	8008518 <_printf_common+0xa4>
 800854a:	3601      	adds	r6, #1
 800854c:	e7d9      	b.n	8008502 <_printf_common+0x8e>
	...

08008550 <_printf_i>:
 8008550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	7e0f      	ldrb	r7, [r1, #24]
 8008556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008558:	2f78      	cmp	r7, #120	; 0x78
 800855a:	4691      	mov	r9, r2
 800855c:	4680      	mov	r8, r0
 800855e:	460c      	mov	r4, r1
 8008560:	469a      	mov	sl, r3
 8008562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008566:	d807      	bhi.n	8008578 <_printf_i+0x28>
 8008568:	2f62      	cmp	r7, #98	; 0x62
 800856a:	d80a      	bhi.n	8008582 <_printf_i+0x32>
 800856c:	2f00      	cmp	r7, #0
 800856e:	f000 80d4 	beq.w	800871a <_printf_i+0x1ca>
 8008572:	2f58      	cmp	r7, #88	; 0x58
 8008574:	f000 80c0 	beq.w	80086f8 <_printf_i+0x1a8>
 8008578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800857c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008580:	e03a      	b.n	80085f8 <_printf_i+0xa8>
 8008582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008586:	2b15      	cmp	r3, #21
 8008588:	d8f6      	bhi.n	8008578 <_printf_i+0x28>
 800858a:	a101      	add	r1, pc, #4	; (adr r1, 8008590 <_printf_i+0x40>)
 800858c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085fd 	.word	0x080085fd
 8008598:	08008579 	.word	0x08008579
 800859c:	08008579 	.word	0x08008579
 80085a0:	08008579 	.word	0x08008579
 80085a4:	08008579 	.word	0x08008579
 80085a8:	080085fd 	.word	0x080085fd
 80085ac:	08008579 	.word	0x08008579
 80085b0:	08008579 	.word	0x08008579
 80085b4:	08008579 	.word	0x08008579
 80085b8:	08008579 	.word	0x08008579
 80085bc:	08008701 	.word	0x08008701
 80085c0:	08008629 	.word	0x08008629
 80085c4:	080086bb 	.word	0x080086bb
 80085c8:	08008579 	.word	0x08008579
 80085cc:	08008579 	.word	0x08008579
 80085d0:	08008723 	.word	0x08008723
 80085d4:	08008579 	.word	0x08008579
 80085d8:	08008629 	.word	0x08008629
 80085dc:	08008579 	.word	0x08008579
 80085e0:	08008579 	.word	0x08008579
 80085e4:	080086c3 	.word	0x080086c3
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	1d1a      	adds	r2, r3, #4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	602a      	str	r2, [r5, #0]
 80085f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085f8:	2301      	movs	r3, #1
 80085fa:	e09f      	b.n	800873c <_printf_i+0x1ec>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	0607      	lsls	r7, r0, #24
 8008602:	f103 0104 	add.w	r1, r3, #4
 8008606:	6029      	str	r1, [r5, #0]
 8008608:	d501      	bpl.n	800860e <_printf_i+0xbe>
 800860a:	681e      	ldr	r6, [r3, #0]
 800860c:	e003      	b.n	8008616 <_printf_i+0xc6>
 800860e:	0646      	lsls	r6, r0, #25
 8008610:	d5fb      	bpl.n	800860a <_printf_i+0xba>
 8008612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008616:	2e00      	cmp	r6, #0
 8008618:	da03      	bge.n	8008622 <_printf_i+0xd2>
 800861a:	232d      	movs	r3, #45	; 0x2d
 800861c:	4276      	negs	r6, r6
 800861e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008622:	485a      	ldr	r0, [pc, #360]	; (800878c <_printf_i+0x23c>)
 8008624:	230a      	movs	r3, #10
 8008626:	e012      	b.n	800864e <_printf_i+0xfe>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	1d19      	adds	r1, r3, #4
 800862e:	6029      	str	r1, [r5, #0]
 8008630:	0605      	lsls	r5, r0, #24
 8008632:	d501      	bpl.n	8008638 <_printf_i+0xe8>
 8008634:	681e      	ldr	r6, [r3, #0]
 8008636:	e002      	b.n	800863e <_printf_i+0xee>
 8008638:	0641      	lsls	r1, r0, #25
 800863a:	d5fb      	bpl.n	8008634 <_printf_i+0xe4>
 800863c:	881e      	ldrh	r6, [r3, #0]
 800863e:	4853      	ldr	r0, [pc, #332]	; (800878c <_printf_i+0x23c>)
 8008640:	2f6f      	cmp	r7, #111	; 0x6f
 8008642:	bf0c      	ite	eq
 8008644:	2308      	moveq	r3, #8
 8008646:	230a      	movne	r3, #10
 8008648:	2100      	movs	r1, #0
 800864a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800864e:	6865      	ldr	r5, [r4, #4]
 8008650:	60a5      	str	r5, [r4, #8]
 8008652:	2d00      	cmp	r5, #0
 8008654:	bfa2      	ittt	ge
 8008656:	6821      	ldrge	r1, [r4, #0]
 8008658:	f021 0104 	bicge.w	r1, r1, #4
 800865c:	6021      	strge	r1, [r4, #0]
 800865e:	b90e      	cbnz	r6, 8008664 <_printf_i+0x114>
 8008660:	2d00      	cmp	r5, #0
 8008662:	d04b      	beq.n	80086fc <_printf_i+0x1ac>
 8008664:	4615      	mov	r5, r2
 8008666:	fbb6 f1f3 	udiv	r1, r6, r3
 800866a:	fb03 6711 	mls	r7, r3, r1, r6
 800866e:	5dc7      	ldrb	r7, [r0, r7]
 8008670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008674:	4637      	mov	r7, r6
 8008676:	42bb      	cmp	r3, r7
 8008678:	460e      	mov	r6, r1
 800867a:	d9f4      	bls.n	8008666 <_printf_i+0x116>
 800867c:	2b08      	cmp	r3, #8
 800867e:	d10b      	bne.n	8008698 <_printf_i+0x148>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	07de      	lsls	r6, r3, #31
 8008684:	d508      	bpl.n	8008698 <_printf_i+0x148>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	4299      	cmp	r1, r3
 800868c:	bfde      	ittt	le
 800868e:	2330      	movle	r3, #48	; 0x30
 8008690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008698:	1b52      	subs	r2, r2, r5
 800869a:	6122      	str	r2, [r4, #16]
 800869c:	f8cd a000 	str.w	sl, [sp]
 80086a0:	464b      	mov	r3, r9
 80086a2:	aa03      	add	r2, sp, #12
 80086a4:	4621      	mov	r1, r4
 80086a6:	4640      	mov	r0, r8
 80086a8:	f7ff fee4 	bl	8008474 <_printf_common>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d14a      	bne.n	8008746 <_printf_i+0x1f6>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	b004      	add	sp, #16
 80086b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f043 0320 	orr.w	r3, r3, #32
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	4833      	ldr	r0, [pc, #204]	; (8008790 <_printf_i+0x240>)
 80086c4:	2778      	movs	r7, #120	; 0x78
 80086c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6829      	ldr	r1, [r5, #0]
 80086ce:	061f      	lsls	r7, r3, #24
 80086d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d4:	d402      	bmi.n	80086dc <_printf_i+0x18c>
 80086d6:	065f      	lsls	r7, r3, #25
 80086d8:	bf48      	it	mi
 80086da:	b2b6      	uxthmi	r6, r6
 80086dc:	07df      	lsls	r7, r3, #31
 80086de:	bf48      	it	mi
 80086e0:	f043 0320 	orrmi.w	r3, r3, #32
 80086e4:	6029      	str	r1, [r5, #0]
 80086e6:	bf48      	it	mi
 80086e8:	6023      	strmi	r3, [r4, #0]
 80086ea:	b91e      	cbnz	r6, 80086f4 <_printf_i+0x1a4>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	f023 0320 	bic.w	r3, r3, #32
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	2310      	movs	r3, #16
 80086f6:	e7a7      	b.n	8008648 <_printf_i+0xf8>
 80086f8:	4824      	ldr	r0, [pc, #144]	; (800878c <_printf_i+0x23c>)
 80086fa:	e7e4      	b.n	80086c6 <_printf_i+0x176>
 80086fc:	4615      	mov	r5, r2
 80086fe:	e7bd      	b.n	800867c <_printf_i+0x12c>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	6826      	ldr	r6, [r4, #0]
 8008704:	6961      	ldr	r1, [r4, #20]
 8008706:	1d18      	adds	r0, r3, #4
 8008708:	6028      	str	r0, [r5, #0]
 800870a:	0635      	lsls	r5, r6, #24
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	d501      	bpl.n	8008714 <_printf_i+0x1c4>
 8008710:	6019      	str	r1, [r3, #0]
 8008712:	e002      	b.n	800871a <_printf_i+0x1ca>
 8008714:	0670      	lsls	r0, r6, #25
 8008716:	d5fb      	bpl.n	8008710 <_printf_i+0x1c0>
 8008718:	8019      	strh	r1, [r3, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	6123      	str	r3, [r4, #16]
 800871e:	4615      	mov	r5, r2
 8008720:	e7bc      	b.n	800869c <_printf_i+0x14c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	1d1a      	adds	r2, r3, #4
 8008726:	602a      	str	r2, [r5, #0]
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	2100      	movs	r1, #0
 800872e:	4628      	mov	r0, r5
 8008730:	f7f7 fd56 	bl	80001e0 <memchr>
 8008734:	b108      	cbz	r0, 800873a <_printf_i+0x1ea>
 8008736:	1b40      	subs	r0, r0, r5
 8008738:	6060      	str	r0, [r4, #4]
 800873a:	6863      	ldr	r3, [r4, #4]
 800873c:	6123      	str	r3, [r4, #16]
 800873e:	2300      	movs	r3, #0
 8008740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008744:	e7aa      	b.n	800869c <_printf_i+0x14c>
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	462a      	mov	r2, r5
 800874a:	4649      	mov	r1, r9
 800874c:	4640      	mov	r0, r8
 800874e:	47d0      	blx	sl
 8008750:	3001      	adds	r0, #1
 8008752:	d0ad      	beq.n	80086b0 <_printf_i+0x160>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	079b      	lsls	r3, r3, #30
 8008758:	d413      	bmi.n	8008782 <_printf_i+0x232>
 800875a:	68e0      	ldr	r0, [r4, #12]
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	4298      	cmp	r0, r3
 8008760:	bfb8      	it	lt
 8008762:	4618      	movlt	r0, r3
 8008764:	e7a6      	b.n	80086b4 <_printf_i+0x164>
 8008766:	2301      	movs	r3, #1
 8008768:	4632      	mov	r2, r6
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	47d0      	blx	sl
 8008770:	3001      	adds	r0, #1
 8008772:	d09d      	beq.n	80086b0 <_printf_i+0x160>
 8008774:	3501      	adds	r5, #1
 8008776:	68e3      	ldr	r3, [r4, #12]
 8008778:	9903      	ldr	r1, [sp, #12]
 800877a:	1a5b      	subs	r3, r3, r1
 800877c:	42ab      	cmp	r3, r5
 800877e:	dcf2      	bgt.n	8008766 <_printf_i+0x216>
 8008780:	e7eb      	b.n	800875a <_printf_i+0x20a>
 8008782:	2500      	movs	r5, #0
 8008784:	f104 0619 	add.w	r6, r4, #25
 8008788:	e7f5      	b.n	8008776 <_printf_i+0x226>
 800878a:	bf00      	nop
 800878c:	080090a1 	.word	0x080090a1
 8008790:	080090b2 	.word	0x080090b2

08008794 <__sflush_r>:
 8008794:	898a      	ldrh	r2, [r1, #12]
 8008796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879a:	4605      	mov	r5, r0
 800879c:	0710      	lsls	r0, r2, #28
 800879e:	460c      	mov	r4, r1
 80087a0:	d458      	bmi.n	8008854 <__sflush_r+0xc0>
 80087a2:	684b      	ldr	r3, [r1, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dc05      	bgt.n	80087b4 <__sflush_r+0x20>
 80087a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	dc02      	bgt.n	80087b4 <__sflush_r+0x20>
 80087ae:	2000      	movs	r0, #0
 80087b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	d0f9      	beq.n	80087ae <__sflush_r+0x1a>
 80087ba:	2300      	movs	r3, #0
 80087bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087c0:	682f      	ldr	r7, [r5, #0]
 80087c2:	6a21      	ldr	r1, [r4, #32]
 80087c4:	602b      	str	r3, [r5, #0]
 80087c6:	d032      	beq.n	800882e <__sflush_r+0x9a>
 80087c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	075a      	lsls	r2, r3, #29
 80087ce:	d505      	bpl.n	80087dc <__sflush_r+0x48>
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	1ac0      	subs	r0, r0, r3
 80087d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087d6:	b10b      	cbz	r3, 80087dc <__sflush_r+0x48>
 80087d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087da:	1ac0      	subs	r0, r0, r3
 80087dc:	2300      	movs	r3, #0
 80087de:	4602      	mov	r2, r0
 80087e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087e2:	6a21      	ldr	r1, [r4, #32]
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b0      	blx	r6
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	d106      	bne.n	80087fc <__sflush_r+0x68>
 80087ee:	6829      	ldr	r1, [r5, #0]
 80087f0:	291d      	cmp	r1, #29
 80087f2:	d82b      	bhi.n	800884c <__sflush_r+0xb8>
 80087f4:	4a29      	ldr	r2, [pc, #164]	; (800889c <__sflush_r+0x108>)
 80087f6:	410a      	asrs	r2, r1
 80087f8:	07d6      	lsls	r6, r2, #31
 80087fa:	d427      	bmi.n	800884c <__sflush_r+0xb8>
 80087fc:	2200      	movs	r2, #0
 80087fe:	6062      	str	r2, [r4, #4]
 8008800:	04d9      	lsls	r1, r3, #19
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	6022      	str	r2, [r4, #0]
 8008806:	d504      	bpl.n	8008812 <__sflush_r+0x7e>
 8008808:	1c42      	adds	r2, r0, #1
 800880a:	d101      	bne.n	8008810 <__sflush_r+0x7c>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	b903      	cbnz	r3, 8008812 <__sflush_r+0x7e>
 8008810:	6560      	str	r0, [r4, #84]	; 0x54
 8008812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008814:	602f      	str	r7, [r5, #0]
 8008816:	2900      	cmp	r1, #0
 8008818:	d0c9      	beq.n	80087ae <__sflush_r+0x1a>
 800881a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800881e:	4299      	cmp	r1, r3
 8008820:	d002      	beq.n	8008828 <__sflush_r+0x94>
 8008822:	4628      	mov	r0, r5
 8008824:	f7ff fc96 	bl	8008154 <_free_r>
 8008828:	2000      	movs	r0, #0
 800882a:	6360      	str	r0, [r4, #52]	; 0x34
 800882c:	e7c0      	b.n	80087b0 <__sflush_r+0x1c>
 800882e:	2301      	movs	r3, #1
 8008830:	4628      	mov	r0, r5
 8008832:	47b0      	blx	r6
 8008834:	1c41      	adds	r1, r0, #1
 8008836:	d1c8      	bne.n	80087ca <__sflush_r+0x36>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0c5      	beq.n	80087ca <__sflush_r+0x36>
 800883e:	2b1d      	cmp	r3, #29
 8008840:	d001      	beq.n	8008846 <__sflush_r+0xb2>
 8008842:	2b16      	cmp	r3, #22
 8008844:	d101      	bne.n	800884a <__sflush_r+0xb6>
 8008846:	602f      	str	r7, [r5, #0]
 8008848:	e7b1      	b.n	80087ae <__sflush_r+0x1a>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	e7ad      	b.n	80087b0 <__sflush_r+0x1c>
 8008854:	690f      	ldr	r7, [r1, #16]
 8008856:	2f00      	cmp	r7, #0
 8008858:	d0a9      	beq.n	80087ae <__sflush_r+0x1a>
 800885a:	0793      	lsls	r3, r2, #30
 800885c:	680e      	ldr	r6, [r1, #0]
 800885e:	bf08      	it	eq
 8008860:	694b      	ldreq	r3, [r1, #20]
 8008862:	600f      	str	r7, [r1, #0]
 8008864:	bf18      	it	ne
 8008866:	2300      	movne	r3, #0
 8008868:	eba6 0807 	sub.w	r8, r6, r7
 800886c:	608b      	str	r3, [r1, #8]
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	dd9c      	ble.n	80087ae <__sflush_r+0x1a>
 8008874:	6a21      	ldr	r1, [r4, #32]
 8008876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008878:	4643      	mov	r3, r8
 800887a:	463a      	mov	r2, r7
 800887c:	4628      	mov	r0, r5
 800887e:	47b0      	blx	r6
 8008880:	2800      	cmp	r0, #0
 8008882:	dc06      	bgt.n	8008892 <__sflush_r+0xfe>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e78e      	b.n	80087b0 <__sflush_r+0x1c>
 8008892:	4407      	add	r7, r0
 8008894:	eba8 0800 	sub.w	r8, r8, r0
 8008898:	e7e9      	b.n	800886e <__sflush_r+0xda>
 800889a:	bf00      	nop
 800889c:	dfbffffe 	.word	0xdfbffffe

080088a0 <_fflush_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	690b      	ldr	r3, [r1, #16]
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b913      	cbnz	r3, 80088b0 <_fflush_r+0x10>
 80088aa:	2500      	movs	r5, #0
 80088ac:	4628      	mov	r0, r5
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	b118      	cbz	r0, 80088ba <_fflush_r+0x1a>
 80088b2:	6a03      	ldr	r3, [r0, #32]
 80088b4:	b90b      	cbnz	r3, 80088ba <_fflush_r+0x1a>
 80088b6:	f7ff fa45 	bl	8007d44 <__sinit>
 80088ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0f3      	beq.n	80088aa <_fflush_r+0xa>
 80088c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088c4:	07d0      	lsls	r0, r2, #31
 80088c6:	d404      	bmi.n	80088d2 <_fflush_r+0x32>
 80088c8:	0599      	lsls	r1, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_fflush_r+0x32>
 80088cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ce:	f7ff fc3e 	bl	800814e <__retarget_lock_acquire_recursive>
 80088d2:	4628      	mov	r0, r5
 80088d4:	4621      	mov	r1, r4
 80088d6:	f7ff ff5d 	bl	8008794 <__sflush_r>
 80088da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088dc:	07da      	lsls	r2, r3, #31
 80088de:	4605      	mov	r5, r0
 80088e0:	d4e4      	bmi.n	80088ac <_fflush_r+0xc>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	059b      	lsls	r3, r3, #22
 80088e6:	d4e1      	bmi.n	80088ac <_fflush_r+0xc>
 80088e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ea:	f7ff fc31 	bl	8008150 <__retarget_lock_release_recursive>
 80088ee:	e7dd      	b.n	80088ac <_fflush_r+0xc>

080088f0 <__swhatbuf_r>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	460c      	mov	r4, r1
 80088f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f8:	2900      	cmp	r1, #0
 80088fa:	b096      	sub	sp, #88	; 0x58
 80088fc:	4615      	mov	r5, r2
 80088fe:	461e      	mov	r6, r3
 8008900:	da0d      	bge.n	800891e <__swhatbuf_r+0x2e>
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008908:	f04f 0100 	mov.w	r1, #0
 800890c:	bf0c      	ite	eq
 800890e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008912:	2340      	movne	r3, #64	; 0x40
 8008914:	2000      	movs	r0, #0
 8008916:	6031      	str	r1, [r6, #0]
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	b016      	add	sp, #88	; 0x58
 800891c:	bd70      	pop	{r4, r5, r6, pc}
 800891e:	466a      	mov	r2, sp
 8008920:	f000 f848 	bl	80089b4 <_fstat_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	dbec      	blt.n	8008902 <__swhatbuf_r+0x12>
 8008928:	9901      	ldr	r1, [sp, #4]
 800892a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800892e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008932:	4259      	negs	r1, r3
 8008934:	4159      	adcs	r1, r3
 8008936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800893a:	e7eb      	b.n	8008914 <__swhatbuf_r+0x24>

0800893c <__smakebuf_r>:
 800893c:	898b      	ldrh	r3, [r1, #12]
 800893e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008940:	079d      	lsls	r5, r3, #30
 8008942:	4606      	mov	r6, r0
 8008944:	460c      	mov	r4, r1
 8008946:	d507      	bpl.n	8008958 <__smakebuf_r+0x1c>
 8008948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	6123      	str	r3, [r4, #16]
 8008950:	2301      	movs	r3, #1
 8008952:	6163      	str	r3, [r4, #20]
 8008954:	b002      	add	sp, #8
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	ab01      	add	r3, sp, #4
 800895a:	466a      	mov	r2, sp
 800895c:	f7ff ffc8 	bl	80088f0 <__swhatbuf_r>
 8008960:	9900      	ldr	r1, [sp, #0]
 8008962:	4605      	mov	r5, r0
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff f8d5 	bl	8007b14 <_malloc_r>
 800896a:	b948      	cbnz	r0, 8008980 <__smakebuf_r+0x44>
 800896c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008970:	059a      	lsls	r2, r3, #22
 8008972:	d4ef      	bmi.n	8008954 <__smakebuf_r+0x18>
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	f043 0302 	orr.w	r3, r3, #2
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	e7e3      	b.n	8008948 <__smakebuf_r+0xc>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	9b00      	ldr	r3, [sp, #0]
 800898c:	6163      	str	r3, [r4, #20]
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	6120      	str	r0, [r4, #16]
 8008992:	b15b      	cbz	r3, 80089ac <__smakebuf_r+0x70>
 8008994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f81d 	bl	80089d8 <_isatty_r>
 800899e:	b128      	cbz	r0, 80089ac <__smakebuf_r+0x70>
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	89a3      	ldrh	r3, [r4, #12]
 80089ae:	431d      	orrs	r5, r3
 80089b0:	81a5      	strh	r5, [r4, #12]
 80089b2:	e7cf      	b.n	8008954 <__smakebuf_r+0x18>

080089b4 <_fstat_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_fstat_r+0x20>)
 80089b8:	2300      	movs	r3, #0
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	4611      	mov	r1, r2
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	f7f8 fa72 	bl	8000eaa <_fstat>
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	d102      	bne.n	80089d0 <_fstat_r+0x1c>
 80089ca:	682b      	ldr	r3, [r5, #0]
 80089cc:	b103      	cbz	r3, 80089d0 <_fstat_r+0x1c>
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	bf00      	nop
 80089d4:	2000039c 	.word	0x2000039c

080089d8 <_isatty_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	; (80089f4 <_isatty_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f8 fa71 	bl	8000eca <_isatty>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_isatty_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_isatty_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	2000039c 	.word	0x2000039c

080089f8 <_init>:
 80089f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fa:	bf00      	nop
 80089fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fe:	bc08      	pop	{r3}
 8008a00:	469e      	mov	lr, r3
 8008a02:	4770      	bx	lr

08008a04 <_fini>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	bf00      	nop
 8008a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0a:	bc08      	pop	{r3}
 8008a0c:	469e      	mov	lr, r3
 8008a0e:	4770      	bx	lr
