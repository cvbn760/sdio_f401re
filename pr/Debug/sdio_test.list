
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea50  0800ea50  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea50  0800ea50  0001ea50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea58  0800ea58  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea58  0800ea58  0001ea58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea5c  0800ea5c  0001ea5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800ea60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d94  200000c4  0800eb24  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006e58  0800eb24  00026e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c022  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c92  00000000  00000000  0003c159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  00040df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001354  00000000  00000000  00042740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007de3  00000000  00000000  00043a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000225eb  00000000  00000000  0004b877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009acb4  00000000  00000000  0006de62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070b0  00000000  00000000  00108b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0010fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800deb8 	.word	0x0800deb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	0800deb8 	.word	0x0800deb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80005d0:	f001 fb3c 	bl	8001c4c <HAL_Init>
    SystemClock_Config();
 80005d4:	f000 f820 	bl	8000618 <SystemClock_Config>
    if(init_tasks()) printf("Tasks was initialized\n");
 80005d8:	f001 fa9a 	bl	8001b10 <init_tasks>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <main+0x1c>
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0x40>)
 80005e4:	f00c fcbe 	bl	800cf64 <puts>
	if(i2c_init()) printf("I2C1 was init success\n");
 80005e8:	f001 f92c 	bl	8001844 <i2c_init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <main+0x2c>
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x44>)
 80005f4:	f00c fcb6 	bl	800cf64 <puts>

	osKernelStart();
 80005f8:	f008 fef2 	bl	80093e0 <osKernelStart>
     while (1){
	  HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f001 fb96 	bl	8001d30 <HAL_Delay>
	  printf("main cycle\n");
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <main+0x48>)
 8000606:	f00c fcad 	bl	800cf64 <puts>
	  HAL_Delay(1000);
 800060a:	e7f7      	b.n	80005fc <main+0x30>
 800060c:	0800ded0 	.word	0x0800ded0
 8000610:	0800dee8 	.word	0x0800dee8
 8000614:	0800df00 	.word	0x0800df00

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f00c fdb0 	bl	800d18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd4>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000690:	2354      	movs	r3, #84	; 0x54
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 f943 	bl	800392c <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f83c 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fba4 	bl	8003e1c <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006da:	f000 f825 	bl	8000728 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_write>:



/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e009      	b.n	8000716 <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff36 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbf1      	blt.n	8000702 <_write+0x12>
	}
	return len;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <HAL_MspInit+0x54>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x54>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_MspInit+0x54>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_MspInit+0x54>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	210f      	movs	r1, #15
 8000776:	f06f 0001 	mvn.w	r0, #1
 800077a:	f001 fbd8 	bl	8001f2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_I2C_MspInit+0x84>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d12b      	bne.n	8000806 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ca:	23c0      	movs	r3, #192	; 0xc0
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007da:	2304      	movs	r3, #4
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <HAL_I2C_MspInit+0x8c>)
 80007e6:	f001 ff55 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40005400 	.word	0x40005400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a65      	ldr	r2, [pc, #404]	; (80009d0 <HAL_SD_MspInit+0x1b4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	f040 80c3 	bne.w	80009c6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	4b63      	ldr	r3, [pc, #396]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a62      	ldr	r2, [pc, #392]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800084a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
 8000850:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b5c      	ldr	r3, [pc, #368]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a5b      	ldr	r2, [pc, #364]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a54      	ldr	r2, [pc, #336]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b52      	ldr	r3, [pc, #328]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000894:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000898:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008a6:	230c      	movs	r3, #12
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4849      	ldr	r0, [pc, #292]	; (80009d8 <HAL_SD_MspInit+0x1bc>)
 80008b2:	f001 feef 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008c6:	230c      	movs	r3, #12
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <HAL_SD_MspInit+0x1c0>)
 80008d2:	f001 fedf 	bl	8002694 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <HAL_SD_MspInit+0x1c8>)
 80008da:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008e2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000900:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000906:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800090a:	2220      	movs	r2, #32
 800090c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000910:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000914:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000918:	2204      	movs	r2, #4
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800091e:	2203      	movs	r2, #3
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000924:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800092c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000932:	482b      	ldr	r0, [pc, #172]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000934:	f001 fb32 	bl	8001f9c <HAL_DMA_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800093e:	f7ff fef3 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000946:	641a      	str	r2, [r3, #64]	; 0x40
 8000948:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <HAL_SD_MspInit+0x1d0>)
 8000952:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800096a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000976:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000982:	2220      	movs	r2, #32
 8000984:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000988:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800098c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000990:	2204      	movs	r2, #4
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000996:	2203      	movs	r2, #3
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800099c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009ac:	f001 faf6 	bl	8001f9c <HAL_DMA_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80009b6:	f7ff feb7 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c0:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	200021e8 	.word	0x200021e8
 80009e4:	40026458 	.word	0x40026458
 80009e8:	20002248 	.word	0x20002248
 80009ec:	400264a0 	.word	0x400264a0

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>
	...

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
   printf("HardFault_Handler\n");
 80009fc:	4801      	ldr	r0, [pc, #4]	; (8000a04 <HardFault_Handler+0xc>)
 80009fe:	f00c fab1 	bl	800cf64 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0xa>
 8000a04:	0800df0c 	.word	0x0800df0c

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f001 f960 	bl	8001cf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a30:	f00a ff5a 	bl	800b8e8 <xTaskGetSchedulerState>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d001      	beq.n	8000a3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3a:	f00b fe3d 	bl	800c6b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DMA2_Stream3_IRQHandler+0x10>)
 8000a4a:	f001 fbad 	bl	80021a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200021e8 	.word	0x200021e8

08000a58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <DMA2_Stream6_IRQHandler+0x10>)
 8000a5e:	f001 fba3 	bl	80021a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20002248 	.word	0x20002248

08000a6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e00a      	b.n	8000a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7e:	f3af 8000 	nop.w
 8000a82:	4601      	mov	r1, r0
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	b2ca      	uxtb	r2, r1
 8000a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf0      	blt.n	8000a7e <_read+0x12>
  }

  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f00c fb82 	bl	800d248 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20018000 	.word	0x20018000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	20006e58 	.word	0x20006e58

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd7 	bl	8000b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f00c fb41 	bl	800d254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcfb 	bl	80005cc <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000be4:	0800ea60 	.word	0x0800ea60
  ldr r2, =_sbss
 8000be8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000bec:	20006e58 	.word	0x20006e58

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <reverse_bits>:
        {
                0x0, 0x8, 0x4, 0xC, 0x2, 0xA, 0x6, 0xE,
                0x1, 0x9, 0x5, 0xD, 0x3, 0xB, 0x7, 0xF
        };

uint8_t reverse_bits(uint8_t byte) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    // Reverse the top and bottom nibble then swap them.
    return (reverse_table[byte & 0b1111] << 4) | reverse_table[byte >> 4];
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <reverse_bits+0x38>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	b25a      	sxtb	r2, r3
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <reverse_bits+0x38>)
 8000c16:	5c5b      	ldrb	r3, [r3, r1]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000004 	.word	0x20000004

08000c30 <reverse_word>:

uint16_t reverse_word(uint16_t word) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
    return ((reverse_bits(word & 0xFF) << 8) | reverse_bits(word >> 8));
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ffd8 	bl	8000bf4 <reverse_bits>
 8000c44:	4603      	mov	r3, r0
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21c      	sxth	r4, r3
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffce 	bl	8000bf4 <reverse_bits>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29b      	uxth	r3, r3
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}

08000c6a <crc16_common>:

uint16_t crc16_common(uint8_t *data, uint8_t len, uint16_t poly, uint16_t init,
                      uint16_t doXor, bool refIn, bool refOut) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	72fb      	strb	r3, [r7, #11]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	813b      	strh	r3, [r7, #8]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80fb      	strh	r3, [r7, #6]
    uint8_t y;
    uint16_t crc;

    crc = init;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	82bb      	strh	r3, [r7, #20]
    while (len--) {
 8000c88:	e037      	b.n	8000cfa <crc16_common+0x90>
        if (refIn)
 8000c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00f      	beq.n	8000cb2 <crc16_common+0x48>
            crc = ((uint16_t) reverse_bits(*data++) << 8) ^ crc;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	60fa      	str	r2, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffaa 	bl	8000bf4 <reverse_bits>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000caa:	4053      	eors	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	82bb      	strh	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <crc16_common+0x5e>
        else
            crc = ((uint16_t) * data++ << 8) ^ crc;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	60fa      	str	r2, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cc2:	4053      	eors	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	82bb      	strh	r3, [r7, #20]
        for (y = 0; y < 8; y++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	75fb      	strb	r3, [r7, #23]
 8000ccc:	e012      	b.n	8000cf4 <crc16_common+0x8a>
            if (crc & 0x8000)
 8000cce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da08      	bge.n	8000ce8 <crc16_common+0x7e>
                crc = (crc << 1) ^ poly;
 8000cd6:	8abb      	ldrh	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ce0:	4053      	eors	r3, r2
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	82bb      	strh	r3, [r7, #20]
 8000ce6:	e002      	b.n	8000cee <crc16_common+0x84>
            else
                crc = crc << 1;
 8000ce8:	8abb      	ldrh	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	82bb      	strh	r3, [r7, #20]
        for (y = 0; y < 8; y++) {
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	75fb      	strb	r3, [r7, #23]
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d9e9      	bls.n	8000cce <crc16_common+0x64>
    while (len--) {
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	72fa      	strb	r2, [r7, #11]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1c2      	bne.n	8000c8a <crc16_common+0x20>
        }
    }

    if (refOut)
 8000d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <crc16_common+0xae>
        crc = reverse_word(crc);
 8000d0c:	8abb      	ldrh	r3, [r7, #20]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff8e 	bl	8000c30 <reverse_word>
 8000d14:	4603      	mov	r3, r0
 8000d16:	82bb      	strh	r3, [r7, #20]
    return (crc ^ doXor);
 8000d18:	8aba      	ldrh	r2, [r7, #20]
 8000d1a:	8c3b      	ldrh	r3, [r7, #32]
 8000d1c:	4053      	eors	r3, r2
 8000d1e:	b29b      	uxth	r3, r3
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <crc16_augccitt_false>:

//uint16_t crc16_augccitt(uint8_t *data, uint8_t len) {
//    return crc16_common(data, len, 0x1021, 0x1d0f, 0x0000, false, false);
//}

uint16_t crc16_augccitt_false(uint8_t *data, uint8_t len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
    return crc16_common(data, len, 0x1021, 0xFFFF, 0x0000, false, false);
 8000d34:	78f9      	ldrb	r1, [r7, #3]
 8000d36:	2300      	movs	r3, #0
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	f241 0221 	movw	r2, #4129	; 0x1021
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff8d 	bl	8000c6a <crc16_common>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <init_sd>:
static BOOLEAN read_sd_and_firmware(void);
static BOOLEAN send_opt(void);
static BOOLEAN check_firmware(void);
static BOOLEAN finish_firmware(void);

static BOOLEAN init_sd(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	if(is_init == FALSE){
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <init_sd+0x40>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10d      	bne.n	8000d84 <init_sd+0x28>
	   readBuff = (char*) malloc(100);
 8000d68:	2064      	movs	r0, #100	; 0x64
 8000d6a:	f00b ff1f 	bl	800cbac <malloc>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <init_sd+0x44>)
 8000d74:	601a      	str	r2, [r3, #0]
	   content = (char*) malloc(100);
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f00b ff18 	bl	800cbac <malloc>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <init_sd+0x48>)
 8000d82:	601a      	str	r2, [r3, #0]
	}
	MX_DMA_Init();
 8000d84:	f000 fbb0 	bl	80014e8 <MX_DMA_Init>
	MX_SDIO_SD_Init();
 8000d88:	f000 fb4c 	bl	8001424 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8000d8c:	f005 f84e 	bl	8005e2c <MX_FATFS_Init>

	is_init = TRUE;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <init_sd+0x40>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200022aa 	.word	0x200022aa
 8000da0:	20002158 	.word	0x20002158
 8000da4:	2000215c 	.word	0x2000215c

08000da8 <send_opt>:

static BOOLEAN send_opt(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b2      	sub	sp, #200	; 0xc8
 8000dac:	af00      	add	r7, sp, #0
	// Считаем CRC16 для OPT data
    crc16 = crc16_augccitt_false(&opt_data[0], 66);
 8000dae:	2142      	movs	r1, #66	; 0x42
 8000db0:	4852      	ldr	r0, [pc, #328]	; (8000efc <send_opt+0x154>)
 8000db2:	f7ff ffb9 	bl	8000d28 <crc16_augccitt_false>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <send_opt+0x158>)
 8000dbc:	801a      	strh	r2, [r3, #0]
    opt_data[66] = crc16 >> 8;
 8000dbe:	4b50      	ldr	r3, [pc, #320]	; (8000f00 <send_opt+0x158>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	0a1b      	lsrs	r3, r3, #8
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <send_opt+0x154>)
 8000dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    opt_data[67] = crc16;
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <send_opt+0x158>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b49      	ldr	r3, [pc, #292]	; (8000efc <send_opt+0x154>)
 8000dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    i2c_send_data_to_device(0x36, opt_data, 68);
 8000dda:	2244      	movs	r2, #68	; 0x44
 8000ddc:	4947      	ldr	r1, [pc, #284]	; (8000efc <send_opt+0x154>)
 8000dde:	2036      	movs	r0, #54	; 0x36
 8000de0:	f000 fe24 	bl	8001a2c <i2c_send_data_to_device>
    // Проверка OPT

    // 0x40 0x00 0x02 0x00 0x00 0x09 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF0 0x5C
    //   1    2    3    4   5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68
    if(!i2c_send_data_to_device(0x36, opt_data, 68)){
 8000de4:	2244      	movs	r2, #68	; 0x44
 8000de6:	4945      	ldr	r1, [pc, #276]	; (8000efc <send_opt+0x154>)
 8000de8:	2036      	movs	r0, #54	; 0x36
 8000dea:	f000 fe1f 	bl	8001a2c <i2c_send_data_to_device>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d104      	bne.n	8000dfe <send_opt+0x56>
    	printf("Can't write OPT data\n");
 8000df4:	4843      	ldr	r0, [pc, #268]	; (8000f04 <send_opt+0x15c>)
 8000df6:	f00c f8b5 	bl	800cf64 <puts>
    	return FALSE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e07a      	b.n	8000ef4 <send_opt+0x14c>
    }

    // Считываем и проверяем что записано
    char buff[66];
    memset(&buff[0], 0x00, 66);
 8000dfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e02:	2242      	movs	r2, #66	; 0x42
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f00c f9c0 	bl	800d18c <memset>
    if(!i2c_read_data_from_device(0x36, 0x4000, buff, 66)){
 8000e0c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000e10:	2342      	movs	r3, #66	; 0x42
 8000e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e16:	2036      	movs	r0, #54	; 0x36
 8000e18:	f000 fdac 	bl	8001974 <i2c_read_data_from_device>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <send_opt+0x80>
    	printf("Can't read OPT data\n");
 8000e22:	4839      	ldr	r0, [pc, #228]	; (8000f08 <send_opt+0x160>)
 8000e24:	f00c f89e 	bl	800cf64 <puts>
    }

    char expect[64] = {0x00};
 8000e28:	2300      	movs	r3, #0
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8000e2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e30:	223c      	movs	r2, #60	; 0x3c
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00c f9a9 	bl	800d18c <memset>
    char actual[64] = {0x00};
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	223c      	movs	r2, #60	; 0x3c
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f00c f9a1 	bl	800d18c <memset>
    memset(&expect[0], 0x00, 64);
 8000e4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e4e:	2240      	movs	r2, #64	; 0x40
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00c f99a 	bl	800d18c <memset>
    memset(&actual[0], 0x00, 64);
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2240      	movs	r2, #64	; 0x40
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00c f994 	bl	800d18c <memset>

    memcpy(&expect[0], opt_data[2], 64);
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <send_opt+0x154>)
 8000e66:	789b      	ldrb	r3, [r3, #2]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e6e:	2240      	movs	r2, #64	; 0x40
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00c fa16 	bl	800d2a2 <memcpy>
    memcpy(&actual[0], &buff[0], 64);
 8000e76:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2240      	movs	r2, #64	; 0x40
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00c fa0f 	bl	800d2a2 <memcpy>

    for(int i = 0; i < 64; i++){
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000e8a:	e02e      	b.n	8000eea <send_opt+0x142>
    	if(actual[i] != opt_data[i + 2]){
 8000e8c:	463a      	mov	r2, r7
 8000e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e92:	4413      	add	r3, r2
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	4917      	ldr	r1, [pc, #92]	; (8000efc <send_opt+0x154>)
 8000e9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d01d      	beq.n	8000ee0 <send_opt+0x138>
    		printf("Mismatch bytes OPT data index = %d, expect = %02X, actual = %02X", i, opt_data[i + 2], actual[i]);
 8000ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <send_opt+0x154>)
 8000eac:	5cd3      	ldrb	r3, [r2, r3]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	463a      	mov	r2, r7
 8000eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	460a      	mov	r2, r1
 8000ebc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000ec0:	4812      	ldr	r0, [pc, #72]	; (8000f0c <send_opt+0x164>)
 8000ec2:	f00b ffe9 	bl	800ce98 <iprintf>
    		print_hex("exp:", &opt_data[2], 64);
 8000ec6:	2240      	movs	r2, #64	; 0x40
 8000ec8:	4911      	ldr	r1, [pc, #68]	; (8000f10 <send_opt+0x168>)
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <send_opt+0x16c>)
 8000ecc:	f000 fcec 	bl	80018a8 <print_hex>
    		print_hex("act:", actual, 64);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <send_opt+0x170>)
 8000ed8:	f000 fce6 	bl	80018a8 <print_hex>
    		return FALSE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	e009      	b.n	8000ef4 <send_opt+0x14c>
    for(int i = 0; i < 64; i++){
 8000ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000eee:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef0:	ddcc      	ble.n	8000e8c <send_opt+0xe4>
    	}
    }
    return TRUE;
 8000ef2:	2301      	movs	r3, #1

}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	37c8      	adds	r7, #200	; 0xc8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000014 	.word	0x20000014
 8000f00:	20002160 	.word	0x20002160
 8000f04:	0800df20 	.word	0x0800df20
 8000f08:	0800df38 	.word	0x0800df38
 8000f0c:	0800df4c 	.word	0x0800df4c
 8000f10:	20000016 	.word	0x20000016
 8000f14:	0800df90 	.word	0x0800df90
 8000f18:	0800df98 	.word	0x0800df98

08000f1c <read_sd_and_firmware>:


static BOOLEAN read_sd_and_firmware(void){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	  f_addr = 0x0000; // Сброс адреса регистров
 8000f20:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <read_sd_and_firmware+0x1c8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	801a      	strh	r2, [r3, #0]

	  // Подключение флешки
	  fr = f_mount(&FatFs, "", 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	496f      	ldr	r1, [pc, #444]	; (80010e8 <read_sd_and_firmware+0x1cc>)
 8000f2a:	4870      	ldr	r0, [pc, #448]	; (80010ec <read_sd_and_firmware+0x1d0>)
 8000f2c:	f007 fbcc 	bl	80086c8 <f_mount>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <read_sd_and_firmware+0x1d4>)
 8000f36:	701a      	strb	r2, [r3, #0]
	  if(fr != FR_OK){
 8000f38:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <read_sd_and_firmware+0x1d4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <read_sd_and_firmware+0x34>
		  printf("SD card detection error %d\n", fr);
 8000f40:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <read_sd_and_firmware+0x1d4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	486b      	ldr	r0, [pc, #428]	; (80010f4 <read_sd_and_firmware+0x1d8>)
 8000f48:	f00b ffa6 	bl	800ce98 <iprintf>
		  return FALSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e0c7      	b.n	80010e0 <read_sd_and_firmware+0x1c4>
	  }
	  printf("SD card detected\n");
 8000f50:	4869      	ldr	r0, [pc, #420]	; (80010f8 <read_sd_and_firmware+0x1dc>)
 8000f52:	f00c f807 	bl	800cf64 <puts>

      // Открытие файла
	  fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 8000f56:	2201      	movs	r2, #1
 8000f58:	4968      	ldr	r1, [pc, #416]	; (80010fc <read_sd_and_firmware+0x1e0>)
 8000f5a:	4869      	ldr	r0, [pc, #420]	; (8001100 <read_sd_and_firmware+0x1e4>)
 8000f5c:	f007 fc18 	bl	8008790 <f_open>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <read_sd_and_firmware+0x1d4>)
 8000f66:	701a      	strb	r2, [r3, #0]
	  if(fr != FR_OK){
 8000f68:	4b61      	ldr	r3, [pc, #388]	; (80010f0 <read_sd_and_firmware+0x1d4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d007      	beq.n	8000f80 <read_sd_and_firmware+0x64>
		  printf("Can't open file >senasic_app_snp736.bin<  %d\n", fr);
 8000f70:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <read_sd_and_firmware+0x1d4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4863      	ldr	r0, [pc, #396]	; (8001104 <read_sd_and_firmware+0x1e8>)
 8000f78:	f00b ff8e 	bl	800ce98 <iprintf>
		  return FALSE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e0af      	b.n	80010e0 <read_sd_and_firmware+0x1c4>
	  }
	  printf("File >senasic_app_snp736.bin< was opened success\n");
 8000f80:	4861      	ldr	r0, [pc, #388]	; (8001108 <read_sd_and_firmware+0x1ec>)
 8000f82:	f00b ffef 	bl	800cf64 <puts>

	  memset(&readBuff[0], 0x00, 100);
 8000f86:	4b61      	ldr	r3, [pc, #388]	; (800110c <read_sd_and_firmware+0x1f0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2264      	movs	r2, #100	; 0x64
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00c f8fc 	bl	800d18c <memset>
	  memset(&content[0], 0x00, 100);
 8000f94:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2264      	movs	r2, #100	; 0x64
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00c f8f5 	bl	800d18c <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){
 8000fa2:	e08c      	b.n	80010be <read_sd_and_firmware+0x1a2>
	  if(bytesRead == 0) goto down; // Если ничего не прочитано
 8000fa4:	4b5b      	ldr	r3, [pc, #364]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8094 	beq.w	80010d6 <read_sd_and_firmware+0x1ba>

	     // Добавляем адрес регистра
	     content[0] = f_addr >> 8;
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <read_sd_and_firmware+0x1c8>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b56      	ldr	r3, [pc, #344]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]
	     content[1] = f_addr;
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <read_sd_and_firmware+0x1c8>)
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	701a      	strb	r2, [r3, #0]
	     memcpy(&content[2], &readBuff[0], bytesRead);
 8000fcc:	4b50      	ldr	r3, [pc, #320]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	; (800110c <read_sd_and_firmware+0x1f0>)
 8000fd4:	6811      	ldr	r1, [r2, #0]
 8000fd6:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00c f961 	bl	800d2a2 <memcpy>

	     if(f_addr == 0x1FC0){
 8000fe0:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <read_sd_and_firmware+0x1c8>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 8000fe8:	d116      	bne.n	8001018 <read_sd_and_firmware+0xfc>
	        content[bytesRead + 1] = 0xEF;
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	22ef      	movs	r2, #239	; 0xef
 8000ff8:	701a      	strb	r2, [r3, #0]
		    content[bytesRead] = 0xCD;
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b45      	ldr	r3, [pc, #276]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	22cd      	movs	r2, #205	; 0xcd
 8001006:	701a      	strb	r2, [r3, #0]
		    content[bytesRead - 1] = 0xAB;
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <read_sd_and_firmware+0x1f4>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b41      	ldr	r3, [pc, #260]	; (8001114 <read_sd_and_firmware+0x1f8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	22ab      	movs	r2, #171	; 0xab
 8001016:	701a      	strb	r2, [r3, #0]
	     }

	     // Добавляем контрольную сумму
	     crc16 = crc16_augccitt_false(&content[0], bytesRead + 2);
 8001018:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <read_sd_and_firmware+0x1f4>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <read_sd_and_firmware+0x1f8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3302      	adds	r3, #2
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f7ff fe7f 	bl	8000d28 <crc16_augccitt_false>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <read_sd_and_firmware+0x1fc>)
 8001030:	801a      	strh	r2, [r3, #0]
	     content[bytesRead + 2] = crc16 >> 8;
 8001032:	4b39      	ldr	r3, [pc, #228]	; (8001118 <read_sd_and_firmware+0x1fc>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b299      	uxth	r1, r3
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <read_sd_and_firmware+0x1f4>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3302      	adds	r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
	     content[bytesRead + 3] = crc16;
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <read_sd_and_firmware+0x1fc>)
 800104c:	8819      	ldrh	r1, [r3, #0]
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3303      	adds	r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]

	     // Отправка
	     if(!i2c_send_data_to_device(0x36, content, bytesRead + 4)) {
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <read_sd_and_firmware+0x1f4>)
 8001060:	6819      	ldr	r1, [r3, #0]
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	3304      	adds	r3, #4
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	2036      	movs	r0, #54	; 0x36
 8001070:	f000 fcdc 	bl	8001a2c <i2c_send_data_to_device>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10a      	bne.n	8001090 <read_sd_and_firmware+0x174>
		    print_hex("ERROR TO SEND: ", content, bytesRead + 4);
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <read_sd_and_firmware+0x1f4>)
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3304      	adds	r3, #4
 8001084:	461a      	mov	r2, r3
 8001086:	4825      	ldr	r0, [pc, #148]	; (800111c <read_sd_and_firmware+0x200>)
 8001088:	f000 fc0e 	bl	80018a8 <print_hex>
		    return FALSE;
 800108c:	2300      	movs	r3, #0
 800108e:	e027      	b.n	80010e0 <read_sd_and_firmware+0x1c4>
	     }

	     f_addr += bytesRead;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <read_sd_and_firmware+0x1f8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <read_sd_and_firmware+0x1c8>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <read_sd_and_firmware+0x1c8>)
 80010a0:	801a      	strh	r2, [r3, #0]

	     memset(&readBuff[0], 0x00, 100);
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <read_sd_and_firmware+0x1f0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00c f86e 	bl	800d18c <memset>
	     memset(&content[0], 0x00, 100);
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <read_sd_and_firmware+0x1f4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2264      	movs	r2, #100	; 0x64
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00c f867 	bl	800d18c <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <read_sd_and_firmware+0x1f0>)
 80010c0:	6819      	ldr	r1, [r3, #0]
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <read_sd_and_firmware+0x1f8>)
 80010c4:	2240      	movs	r2, #64	; 0x40
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <read_sd_and_firmware+0x1e4>)
 80010c8:	f007 fd4a 	bl	8008b60 <f_read>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f43f af68 	beq.w	8000fa4 <read_sd_and_firmware+0x88>
	  }
	  down:
 80010d4:	e000      	b.n	80010d8 <read_sd_and_firmware+0x1bc>
	  if(bytesRead == 0) goto down; // Если ничего не прочитано
 80010d6:	bf00      	nop

	  // Закрытие файла
      f_close(&fil);
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <read_sd_and_firmware+0x1e4>)
 80010da:	f007 ff58 	bl	8008f8e <f_close>
      return TRUE;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200022a8 	.word	0x200022a8
 80010e8:	0800dfa0 	.word	0x0800dfa0
 80010ec:	200000e4 	.word	0x200000e4
 80010f0:	20002150 	.word	0x20002150
 80010f4:	0800dfa4 	.word	0x0800dfa4
 80010f8:	0800dfc0 	.word	0x0800dfc0
 80010fc:	0800dfd4 	.word	0x0800dfd4
 8001100:	20001120 	.word	0x20001120
 8001104:	0800dfec 	.word	0x0800dfec
 8001108:	0800e01c 	.word	0x0800e01c
 800110c:	20002158 	.word	0x20002158
 8001110:	2000215c 	.word	0x2000215c
 8001114:	20002154 	.word	0x20002154
 8001118:	20002160 	.word	0x20002160
 800111c:	0800e050 	.word	0x0800e050

08001120 <check_firmware>:

static BOOLEAN check_firmware(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	 f_addr = 0x0000; // Сброс адреса регистров
 8001126:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <check_firmware+0x1a8>)
 8001128:	2200      	movs	r2, #0
 800112a:	801a      	strh	r2, [r3, #0]

	 // Подключение флешки
     fr = f_mount(&FatFs, "", 1);
 800112c:	2201      	movs	r2, #1
 800112e:	4967      	ldr	r1, [pc, #412]	; (80012cc <check_firmware+0x1ac>)
 8001130:	4867      	ldr	r0, [pc, #412]	; (80012d0 <check_firmware+0x1b0>)
 8001132:	f007 fac9 	bl	80086c8 <f_mount>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <check_firmware+0x1b4>)
 800113c:	701a      	strb	r2, [r3, #0]
	 if(fr != FR_OK){
 800113e:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <check_firmware+0x1b4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <check_firmware+0x36>
		printf("SD card detection error %d\n", fr);
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <check_firmware+0x1b4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	4862      	ldr	r0, [pc, #392]	; (80012d8 <check_firmware+0x1b8>)
 800114e:	f00b fea3 	bl	800ce98 <iprintf>
		return FALSE;
 8001152:	2300      	movs	r3, #0
 8001154:	e0b3      	b.n	80012be <check_firmware+0x19e>
     }
     printf("SD card detected\n");
 8001156:	4861      	ldr	r0, [pc, #388]	; (80012dc <check_firmware+0x1bc>)
 8001158:	f00b ff04 	bl	800cf64 <puts>

	 // Открытие файла
     fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 800115c:	2201      	movs	r2, #1
 800115e:	4960      	ldr	r1, [pc, #384]	; (80012e0 <check_firmware+0x1c0>)
 8001160:	4860      	ldr	r0, [pc, #384]	; (80012e4 <check_firmware+0x1c4>)
 8001162:	f007 fb15 	bl	8008790 <f_open>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <check_firmware+0x1b4>)
 800116c:	701a      	strb	r2, [r3, #0]
	 if(fr != FR_OK){
 800116e:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <check_firmware+0x1b4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <check_firmware+0x66>
	     printf("Can't open file >senasic_app_snp736.bin<  %d\n", fr);
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <check_firmware+0x1b4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	485a      	ldr	r0, [pc, #360]	; (80012e8 <check_firmware+0x1c8>)
 800117e:	f00b fe8b 	bl	800ce98 <iprintf>
		 return FALSE;
 8001182:	2300      	movs	r3, #0
 8001184:	e09b      	b.n	80012be <check_firmware+0x19e>
	  }
	  printf("File >senasic_app_snp736.bin< was opened success\n");
 8001186:	4859      	ldr	r0, [pc, #356]	; (80012ec <check_firmware+0x1cc>)
 8001188:	f00b feec 	bl	800cf64 <puts>

	  memset(&readBuff[0], 0x00, 100);
 800118c:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <check_firmware+0x1d0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2264      	movs	r2, #100	; 0x64
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00b fff9 	bl	800d18c <memset>
	  memset(&content[0], 0x00, 100);
 800119a:	4b56      	ldr	r3, [pc, #344]	; (80012f4 <check_firmware+0x1d4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2264      	movs	r2, #100	; 0x64
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00b fff2 	bl	800d18c <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){            // Читаем из файла 64 байта
 80011a8:	e07d      	b.n	80012a6 <check_firmware+0x186>
		     if(f_addr == 0x1FC0){
 80011aa:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <check_firmware+0x1a8>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 80011b2:	d127      	bne.n	8001204 <check_firmware+0xe4>
		    	 print_hex("PRINT before: ", readBuff, bytesRead);
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <check_firmware+0x1d0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <check_firmware+0x1d8>)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	484f      	ldr	r0, [pc, #316]	; (80012fc <check_firmware+0x1dc>)
 80011c0:	f000 fb72 	bl	80018a8 <print_hex>
		    	 readBuff[bytesRead - 1] = 0xEF;
 80011c4:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <check_firmware+0x1d0>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <check_firmware+0x1d8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	22ef      	movs	r2, #239	; 0xef
 80011d2:	701a      	strb	r2, [r3, #0]
		    	 readBuff[bytesRead - 2] = 0xCD;
 80011d4:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <check_firmware+0x1d0>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <check_firmware+0x1d8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3b02      	subs	r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	22cd      	movs	r2, #205	; 0xcd
 80011e2:	701a      	strb	r2, [r3, #0]
		    	 readBuff[bytesRead - 3] = 0xAB;
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <check_firmware+0x1d0>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <check_firmware+0x1d8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	22ab      	movs	r2, #171	; 0xab
 80011f2:	701a      	strb	r2, [r3, #0]
		    	 print_hex("PRINT after: ", readBuff, bytesRead);
 80011f4:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <check_firmware+0x1d0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <check_firmware+0x1d8>)
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4840      	ldr	r0, [pc, #256]	; (8001300 <check_firmware+0x1e0>)
 8001200:	f000 fb52 	bl	80018a8 <print_hex>
		  	 }

			 if(!i2c_read_data_from_device(0x36, f_addr, content, 66)){  // Читаем из памяти 66 байт
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <check_firmware+0x1a8>)
 8001206:	8819      	ldrh	r1, [r3, #0]
 8001208:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <check_firmware+0x1d4>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2342      	movs	r3, #66	; 0x42
 800120e:	2036      	movs	r0, #54	; 0x36
 8001210:	f000 fbb0 	bl	8001974 <i2c_read_data_from_device>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d104      	bne.n	8001224 <check_firmware+0x104>
				printf("error check\n");
 800121a:	483a      	ldr	r0, [pc, #232]	; (8001304 <check_firmware+0x1e4>)
 800121c:	f00b fea2 	bl	800cf64 <puts>
			    return FALSE;
 8001220:	2300      	movs	r3, #0
 8001222:	e04c      	b.n	80012be <check_firmware+0x19e>
			 }

//			 print_hex("PRINT content: ", content, 66);

			 // Сравниваем
			 for(int i = 0; i < 64; i ++){
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	e02d      	b.n	8001286 <check_firmware+0x166>
				 if(readBuff[i] != content[i]){
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <check_firmware+0x1d0>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <check_firmware+0x1d4>)
 8001236:	6819      	ldr	r1, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	440b      	add	r3, r1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d01e      	beq.n	8001280 <check_firmware+0x160>
					 printf("expect/actual %02X %02X \n", readBuff[i], content[i]);
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <check_firmware+0x1d0>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <check_firmware+0x1d4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	482b      	ldr	r0, [pc, #172]	; (8001308 <check_firmware+0x1e8>)
 800125c:	f00b fe1c 	bl	800ce98 <iprintf>
					 print_hex("SD:", readBuff, 64);
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <check_firmware+0x1d0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2240      	movs	r2, #64	; 0x40
 8001266:	4619      	mov	r1, r3
 8001268:	4828      	ldr	r0, [pc, #160]	; (800130c <check_firmware+0x1ec>)
 800126a:	f000 fb1d 	bl	80018a8 <print_hex>
					 print_hex("SN:", content, 64);
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <check_firmware+0x1d4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	4619      	mov	r1, r3
 8001276:	4826      	ldr	r0, [pc, #152]	; (8001310 <check_firmware+0x1f0>)
 8001278:	f000 fb16 	bl	80018a8 <print_hex>
					 return FALSE;
 800127c:	2300      	movs	r3, #0
 800127e:	e01e      	b.n	80012be <check_firmware+0x19e>
			 for(int i = 0; i < 64; i ++){
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b3f      	cmp	r3, #63	; 0x3f
 800128a:	ddce      	ble.n	800122a <check_firmware+0x10a>
				 }
			 }

			 f_addr += 64;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <check_firmware+0x1a8>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	3340      	adds	r3, #64	; 0x40
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <check_firmware+0x1a8>)
 8001296:	801a      	strh	r2, [r3, #0]
			 if(f_addr == 0x4000) return TRUE;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <check_firmware+0x1a8>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012a0:	d101      	bne.n	80012a6 <check_firmware+0x186>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00b      	b.n	80012be <check_firmware+0x19e>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){            // Читаем из файла 64 байта
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <check_firmware+0x1d0>)
 80012a8:	6819      	ldr	r1, [r3, #0]
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <check_firmware+0x1d8>)
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <check_firmware+0x1c4>)
 80012b0:	f007 fc56 	bl	8008b60 <f_read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f43f af77 	beq.w	80011aa <check_firmware+0x8a>
	  }
	  return TRUE;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200022a8 	.word	0x200022a8
 80012cc:	0800dfa0 	.word	0x0800dfa0
 80012d0:	200000e4 	.word	0x200000e4
 80012d4:	20002150 	.word	0x20002150
 80012d8:	0800dfa4 	.word	0x0800dfa4
 80012dc:	0800dfc0 	.word	0x0800dfc0
 80012e0:	0800dfd4 	.word	0x0800dfd4
 80012e4:	20001120 	.word	0x20001120
 80012e8:	0800dfec 	.word	0x0800dfec
 80012ec:	0800e01c 	.word	0x0800e01c
 80012f0:	20002158 	.word	0x20002158
 80012f4:	2000215c 	.word	0x2000215c
 80012f8:	20002154 	.word	0x20002154
 80012fc:	0800e060 	.word	0x0800e060
 8001300:	0800e070 	.word	0x0800e070
 8001304:	0800e080 	.word	0x0800e080
 8001308:	0800e08c 	.word	0x0800e08c
 800130c:	0800e0a8 	.word	0x0800e0a8
 8001310:	0800e0ac 	.word	0x0800e0ac

08001314 <reset_to_factory>:

static BOOLEAN reset_to_factory(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
     // 1) write to 0x36 ack data: 0xA2 0x01 0x76 0x32
     uint8_t reset_cmd_1[4] = {0xA2, 0x01, 0x76, 0x32};
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <reset_to_factory+0x4c>)
 800131c:	607b      	str	r3, [r7, #4]
     if(!i2c_send_data_to_device(SNP_ADDR, &reset_cmd_1, 4)) return FALSE;
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	2036      	movs	r0, #54	; 0x36
 8001326:	f000 fb81 	bl	8001a2c <i2c_send_data_to_device>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <reset_to_factory+0x20>
 8001330:	2300      	movs	r3, #0
 8001332:	e010      	b.n	8001356 <reset_to_factory+0x42>
     osDelay(100);
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f008 f920 	bl	800957a <osDelay>
     // 2) write to 0x36 ack data: 0xA2, 0x02, 0x46, 0x51
     uint8_t reset_cmd_2[4] = {0xA2, 0x02, 0x46, 0x51};
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <reset_to_factory+0x50>)
 800133c:	603b      	str	r3, [r7, #0]
     if(!i2c_send_data_to_device(SNP_ADDR, reset_cmd_2, 4)) return FALSE;
 800133e:	463b      	mov	r3, r7
 8001340:	2204      	movs	r2, #4
 8001342:	4619      	mov	r1, r3
 8001344:	2036      	movs	r0, #54	; 0x36
 8001346:	f000 fb71 	bl	8001a2c <i2c_send_data_to_device>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <reset_to_factory+0x40>
 8001350:	2300      	movs	r3, #0
 8001352:	e000      	b.n	8001356 <reset_to_factory+0x42>
     return TRUE;
 8001354:	2301      	movs	r3, #1
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	327601a2 	.word	0x327601a2
 8001364:	514602a2 	.word	0x514602a2

08001368 <update_firmware>:

extern BOOLEAN update_firmware(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	// Подготовка к прошивке
    if(!prep_firmware()) {
 800136c:	f000 f87a 	bl	8001464 <prep_firmware>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d104      	bne.n	8001380 <update_firmware+0x18>
    	printf("Can't switch SNP73X to programming mode\n");
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <update_firmware+0x9c>)
 8001378:	f00b fdf4 	bl	800cf64 <puts>
    	return FALSE;
 800137c:	2300      	movs	r3, #0
 800137e:	e03e      	b.n	80013fe <update_firmware+0x96>
    }
    printf("Switch SNP73X to factory state was success\n");
 8001380:	4821      	ldr	r0, [pc, #132]	; (8001408 <update_firmware+0xa0>)
 8001382:	f00b fdef 	bl	800cf64 <puts>

    // Возврат заводской прошивки
    if(!reset_to_factory()) {
 8001386:	f7ff ffc5 	bl	8001314 <reset_to_factory>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d104      	bne.n	800139a <update_firmware+0x32>
    	printf("Can't rollback SNP76X to factory state\n");
 8001390:	481e      	ldr	r0, [pc, #120]	; (800140c <update_firmware+0xa4>)
 8001392:	f00b fde7 	bl	800cf64 <puts>
    	return FALSE;
 8001396:	2300      	movs	r3, #0
 8001398:	e031      	b.n	80013fe <update_firmware+0x96>
    }
    printf("Reset to factory was success\n");
 800139a:	481d      	ldr	r0, [pc, #116]	; (8001410 <update_firmware+0xa8>)
 800139c:	f00b fde2 	bl	800cf64 <puts>
    osDelay(125);
 80013a0:	207d      	movs	r0, #125	; 0x7d
 80013a2:	f008 f8ea 	bl	800957a <osDelay>
    finish_firmware();
 80013a6:	f000 f881 	bl	80014ac <finish_firmware>
    // Инит SD карты
    init_sd();
 80013aa:	f7ff fcd7 	bl	8000d5c <init_sd>

    // Чтение файла с SD карты и прошивка датчика
    if(!read_sd_and_firmware()){
 80013ae:	f7ff fdb5 	bl	8000f1c <read_sd_and_firmware>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d104      	bne.n	80013c2 <update_firmware+0x5a>
    	printf("Firmware error\n");
 80013b8:	4816      	ldr	r0, [pc, #88]	; (8001414 <update_firmware+0xac>)
 80013ba:	f00b fdd3 	bl	800cf64 <puts>
    	return FALSE;
 80013be:	2300      	movs	r3, #0
 80013c0:	e01d      	b.n	80013fe <update_firmware+0x96>
    }

    // Прочитать все записанные данные
    if(!check_firmware()){
 80013c2:	f7ff fead 	bl	8001120 <check_firmware>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d104      	bne.n	80013d6 <update_firmware+0x6e>
       printf("Error check firmware\n");
 80013cc:	4812      	ldr	r0, [pc, #72]	; (8001418 <update_firmware+0xb0>)
 80013ce:	f00b fdc9 	bl	800cf64 <puts>
       return FALSE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e013      	b.n	80013fe <update_firmware+0x96>
    }

    // Запись OPT
    if(!send_opt()){
 80013d6:	f7ff fce7 	bl	8000da8 <send_opt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d104      	bne.n	80013ea <update_firmware+0x82>
       printf("Error write OPT data\n");
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <update_firmware+0xb4>)
 80013e2:	f00b fdbf 	bl	800cf64 <puts>
       return FALSE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e009      	b.n	80013fe <update_firmware+0x96>
    }

    printf("FW was finish success\n");
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <update_firmware+0xb8>)
 80013ec:	f00b fdba 	bl	800cf64 <puts>
    osDelay(500);
 80013f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f4:	f008 f8c1 	bl	800957a <osDelay>
    finish_firmware();
 80013f8:	f000 f858 	bl	80014ac <finish_firmware>
    return TRUE;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800e0b0 	.word	0x0800e0b0
 8001408:	0800e0d8 	.word	0x0800e0d8
 800140c:	0800e104 	.word	0x0800e104
 8001410:	0800e12c 	.word	0x0800e12c
 8001414:	0800e14c 	.word	0x0800e14c
 8001418:	0800e15c 	.word	0x0800e15c
 800141c:	0800e174 	.word	0x0800e174
 8001420:	0800e18c 	.word	0x0800e18c

08001424 <MX_SDIO_SD_Init>:

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */static void MX_SDIO_SD_Init(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    hsd.Instance = SDIO;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SDIO_SD_Init+0x38>)
 800142a:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <MX_SDIO_SD_Init+0x3c>)
 800142c:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SDIO_SD_Init+0x38>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SDIO_SD_Init+0x38>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SDIO_SD_Init+0x38>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SDIO_SD_Init+0x38>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <MX_SDIO_SD_Init+0x38>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <MX_SDIO_SD_Init+0x38>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
    HAL_SD_Init(&hsd);
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <MX_SDIO_SD_Init+0x38>)
 8001454:	f002 feee 	bl	8004234 <HAL_SD_Init>
  }
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20002164 	.word	0x20002164
 8001460:	40012c00 	.word	0x40012c00

08001464 <prep_firmware>:

static BOOLEAN prep_firmware(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	// Перевод SDA/SCL пинов в режим GPIO
		switch_mode_sda_scl(GPIO_M);
 8001468:	2000      	movs	r0, #0
 800146a:	f000 f87b 	bl	8001564 <switch_mode_sda_scl>

		set_sda(GPIO_PIN_RESET);   // SDA off
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f996 	bl	80017a0 <set_sda>
		set_scl(GPIO_PIN_RESET);   // SCL off
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f9ad 	bl	80017d4 <set_scl>
		set_power(GPIO_PIN_RESET); // VDD off
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f97e 	bl	800177c <set_power>
		osDelay(80);
 8001480:	2050      	movs	r0, #80	; 0x50
 8001482:	f008 f87a 	bl	800957a <osDelay>
	 	set_power(GPIO_PIN_SET);   // VDD on
 8001486:	2001      	movs	r0, #1
 8001488:	f000 f978 	bl	800177c <set_power>

		// GPIO0(SCL) GPIO1(SDA) должны удерживаться в состояниий  GPIO1 = 1, GPIO0 = 0 не менее 256 мсек
		set_sda(GPIO_PIN_RESET);    // SDA on
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f987 	bl	80017a0 <set_sda>
		set_scl(GPIO_PIN_SET);  // SCL off
 8001492:	2001      	movs	r0, #1
 8001494:	f000 f99e 	bl	80017d4 <set_scl>
		osDelay(500);
 8001498:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800149c:	f008 f86d 	bl	800957a <osDelay>

		// Перевод SDA/SCL пинов в режим I2C
		switch_mode_sda_scl(I2C_M);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 f85f 	bl	8001564 <switch_mode_sda_scl>
		return TRUE;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}

080014ac <finish_firmware>:

static BOOLEAN finish_firmware(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	switch_mode_sda_scl(GPIO_M);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 f857 	bl	8001564 <switch_mode_sda_scl>
	set_sda(GPIO_PIN_RESET);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f972 	bl	80017a0 <set_sda>
	set_scl(GPIO_PIN_RESET);
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 f989 	bl	80017d4 <set_scl>
	osDelay(80);
 80014c2:	2050      	movs	r0, #80	; 0x50
 80014c4:	f008 f859 	bl	800957a <osDelay>
	set_scl(GPIO_PIN_SET);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f000 f983 	bl	80017d4 <set_scl>
	osDelay(320);
 80014ce:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80014d2:	f008 f852 	bl	800957a <osDelay>
	set_sda(GPIO_PIN_SET);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 f962 	bl	80017a0 <set_sda>
	switch_mode_sda_scl(I2C_M);
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 f841 	bl	8001564 <switch_mode_sda_scl>
	return TRUE;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_DMA_Init+0x4c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <MX_DMA_Init+0x4c>)
 80014f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_DMA_Init+0x4c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2105      	movs	r1, #5
 800150e:	203b      	movs	r0, #59	; 0x3b
 8001510:	f000 fd0d 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001514:	203b      	movs	r0, #59	; 0x3b
 8001516:	f000 fd26 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2105      	movs	r1, #5
 800151e:	2045      	movs	r0, #69	; 0x45
 8001520:	f000 fd05 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001524:	2045      	movs	r0, #69	; 0x45
 8001526:	f000 fd1e 	bl	8001f66 <HAL_NVIC_EnableIRQ>

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <gpio_start>:

static BOOLEAN init_io(void);
static void gpio_watcher(void);


extern BOOLEAN gpio_start(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
   if(is_init) return TRUE;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <gpio_start+0x28>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <gpio_start+0x10>
 8001544:	2301      	movs	r3, #1
 8001546:	e008      	b.n	800155a <gpio_start+0x22>
   is_init = init_io();
 8001548:	f000 f88c 	bl	8001664 <init_io>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <gpio_start+0x28>)
 8001552:	701a      	strb	r2, [r3, #0]
   gpio_watcher();
 8001554:	f000 f876 	bl	8001644 <gpio_watcher>
   return TRUE;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200022ab 	.word	0x200022ab

08001564 <switch_mode_sda_scl>:


extern BOOLEAN switch_mode_sda_scl(SDA_SCL_MODE mode){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <switch_mode_sda_scl+0x16>
 8001574:	2b01      	cmp	r3, #1
 8001576:	d00d      	beq.n	8001594 <switch_mode_sda_scl+0x30>
 8001578:	e01f      	b.n	80015ba <switch_mode_sda_scl+0x56>
	case GPIO_M:
		printf("SDA/SCL has GPIO_MODE\n");
 800157a:	482a      	ldr	r0, [pc, #168]	; (8001624 <switch_mode_sda_scl+0xc0>)
 800157c:	f00b fcf2 	bl	800cf64 <puts>
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <switch_mode_sda_scl+0xc4>)
 8001582:	2201      	movs	r2, #1
 8001584:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <switch_mode_sda_scl+0xc8>)
 8001588:	2201      	movs	r2, #1
 800158a:	605a      	str	r2, [r3, #4]
		current_mode = GPIO_M;
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <switch_mode_sda_scl+0xcc>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
		break;
 8001592:	e017      	b.n	80015c4 <switch_mode_sda_scl+0x60>
	case I2C_M:
		printf("SDA/SCL has I2C_MODE\n");
 8001594:	4827      	ldr	r0, [pc, #156]	; (8001634 <switch_mode_sda_scl+0xd0>)
 8001596:	f00b fce5 	bl	800cf64 <puts>
	    GPIO_InitStruct_i2c_sda.Alternate = GPIO_AF4_I2C1;
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <switch_mode_sda_scl+0xc8>)
 800159c:	2204      	movs	r2, #4
 800159e:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Alternate = GPIO_AF4_I2C1;
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <switch_mode_sda_scl+0xc4>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_AF_OD;
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <switch_mode_sda_scl+0xc4>)
 80015a8:	2212      	movs	r2, #18
 80015aa:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_AF_OD;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <switch_mode_sda_scl+0xc8>)
 80015ae:	2212      	movs	r2, #18
 80015b0:	605a      	str	r2, [r3, #4]
		current_mode = I2C_M;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <switch_mode_sda_scl+0xcc>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
        break;
 80015b8:	e004      	b.n	80015c4 <switch_mode_sda_scl+0x60>
	default:
		printf("Unknown state for SDA/SCL pins\n");
 80015ba:	481f      	ldr	r0, [pc, #124]	; (8001638 <switch_mode_sda_scl+0xd4>)
 80015bc:	f00b fcd2 	bl	800cf64 <puts>
		return FALSE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e02a      	b.n	800161a <switch_mode_sda_scl+0xb6>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <switch_mode_sda_scl+0xd8>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <switch_mode_sda_scl+0xd8>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <switch_mode_sda_scl+0xd8>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct_i2c_scl.Pin = SCL;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <switch_mode_sda_scl+0xc4>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct_i2c_sda.Pin = SDA;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <switch_mode_sda_scl+0xc8>)
 80015ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ee:	601a      	str	r2, [r3, #0]

	GPIO_InitStruct_i2c_scl.Pull = GPIO_PULLUP;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <switch_mode_sda_scl+0xc4>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct_i2c_sda.Pull = GPIO_PULLUP;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <switch_mode_sda_scl+0xc8>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	609a      	str	r2, [r3, #8]

	GPIO_InitStruct_i2c_scl.Speed = GPIO_SPEED_HIGH;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <switch_mode_sda_scl+0xc4>)
 80015fe:	2203      	movs	r2, #3
 8001600:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct_i2c_sda.Speed = GPIO_SPEED_HIGH;
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <switch_mode_sda_scl+0xc8>)
 8001604:	2203      	movs	r2, #3
 8001606:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct_i2c_sda);
 8001608:	4908      	ldr	r1, [pc, #32]	; (800162c <switch_mode_sda_scl+0xc8>)
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <switch_mode_sda_scl+0xdc>)
 800160c:	f001 f842 	bl	8002694 <HAL_GPIO_Init>
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct_i2c_scl);
 8001610:	4905      	ldr	r1, [pc, #20]	; (8001628 <switch_mode_sda_scl+0xc4>)
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <switch_mode_sda_scl+0xdc>)
 8001614:	f001 f83e 	bl	8002694 <HAL_GPIO_Init>
	return TRUE;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	0800e33c 	.word	0x0800e33c
 8001628:	200022e8 	.word	0x200022e8
 800162c:	200022d4 	.word	0x200022d4
 8001630:	20000058 	.word	0x20000058
 8001634:	0800e354 	.word	0x0800e354
 8001638:	0800e36c 	.word	0x0800e36c
 800163c:	40023800 	.word	0x40023800
 8001640:	40020400 	.word	0x40020400

08001644 <gpio_watcher>:

static void gpio_watcher(void){
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	while(is_init){
 8001648:	bf00      	nop
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <gpio_watcher+0x1c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1fb      	bne.n	800164a <gpio_watcher+0x6>

	}
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200022ab 	.word	0x200022ab

08001664 <init_io>:

extern void gpio_stop(void){
	is_init = FALSE;
}

static BOOLEAN init_io(void){
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <init_io+0x100>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a3c      	ldr	r2, [pc, #240]	; (8001764 <init_io+0x100>)
 8001674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <init_io+0x100>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <init_io+0x100>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a35      	ldr	r2, [pc, #212]	; (8001764 <init_io+0x100>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b33      	ldr	r3, [pc, #204]	; (8001764 <init_io+0x100>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_SDIO_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <init_io+0x100>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <init_io+0x100>)
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <init_io+0x100>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

	 // Инит кнопки
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <init_io+0x100>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a27      	ldr	r2, [pc, #156]	; (8001764 <init_io+0x100>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <init_io+0x100>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
	 GPIO_InitStruct_green_led.Pin = BLUE_BUTTON;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <init_io+0x104>)
 80016dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e0:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_green_led.Mode = GPIO_MODE_INPUT; // вход
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <init_io+0x104>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_green_led.Pull = GPIO_PULLDOWN;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <init_io+0x104>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_green_led.Speed = GPIO_SPEED_HIGH;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <init_io+0x104>)
 80016f0:	2203      	movs	r2, #3
 80016f2:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(BLUE_BUTTON_PORT, &GPIO_InitStruct_green_led);
 80016f4:	491c      	ldr	r1, [pc, #112]	; (8001768 <init_io+0x104>)
 80016f6:	481d      	ldr	r0, [pc, #116]	; (800176c <init_io+0x108>)
 80016f8:	f000 ffcc 	bl	8002694 <HAL_GPIO_Init>

	 // Инит индикатора
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <init_io+0x100>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <init_io+0x100>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6313      	str	r3, [r2, #48]	; 0x30
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <init_io+0x100>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
	 GPIO_InitStruct_blue_button.Pin = LED_GREEN;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <init_io+0x10c>)
 800171a:	2220      	movs	r2, #32
 800171c:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_blue_button.Mode = GPIO_MODE_OUTPUT_PP; // выход
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <init_io+0x10c>)
 8001720:	2201      	movs	r2, #1
 8001722:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_blue_button.Pull = GPIO_NOPULL;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <init_io+0x10c>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_blue_button.Speed = GPIO_SPEED_HIGH;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <init_io+0x10c>)
 800172c:	2203      	movs	r2, #3
 800172e:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct_blue_button);
 8001730:	490f      	ldr	r1, [pc, #60]	; (8001770 <init_io+0x10c>)
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <init_io+0x110>)
 8001734:	f000 ffae 	bl	8002694 <HAL_GPIO_Init>


	 // Инит питания
	 GPIO_InitStruct_power.Pin = POWER;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <init_io+0x114>)
 800173a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800173e:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_power.Mode = GPIO_MODE_OUTPUT_PP; // выход
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <init_io+0x114>)
 8001742:	2201      	movs	r2, #1
 8001744:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_power.Pull = GPIO_PULLDOWN;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <init_io+0x114>)
 8001748:	2202      	movs	r2, #2
 800174a:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_power.Speed = GPIO_SPEED_HIGH;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <init_io+0x114>)
 800174e:	2203      	movs	r2, #3
 8001750:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(POWER_PORT, &GPIO_InitStruct_power);
 8001752:	4909      	ldr	r1, [pc, #36]	; (8001778 <init_io+0x114>)
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <init_io+0x110>)
 8001756:	f000 ff9d 	bl	8002694 <HAL_GPIO_Init>

	 return TRUE;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	200022ac 	.word	0x200022ac
 800176c:	40020800 	.word	0x40020800
 8001770:	200022c0 	.word	0x200022c0
 8001774:	40020000 	.word	0x40020000
 8001778:	200022fc 	.word	0x200022fc

0800177c <set_power>:

extern void set_power(GPIO_PinState state){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
     HAL_GPIO_WritePin(POWER_PORT, POWER, state);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	461a      	mov	r2, r3
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <set_power+0x20>)
 8001790:	f001 f91c 	bl	80029cc <HAL_GPIO_WritePin>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020000 	.word	0x40020000

080017a0 <set_sda>:

extern void set_sda(GPIO_PinState state){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
     if(current_mode != GPIO_M) return;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <set_sda+0x2c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <set_sda+0x22>
	 HAL_GPIO_WritePin(SDA_PORT, SDA, state);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <set_sda+0x30>)
 80017bc:	f001 f906 	bl	80029cc <HAL_GPIO_WritePin>
 80017c0:	e000      	b.n	80017c4 <set_sda+0x24>
     if(current_mode != GPIO_M) return;
 80017c2:	bf00      	nop
}
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000058 	.word	0x20000058
 80017d0:	40020400 	.word	0x40020400

080017d4 <set_scl>:

extern void set_scl(GPIO_PinState state){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	 if(current_mode != GPIO_M) return;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <set_scl+0x2c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <set_scl+0x22>
	 HAL_GPIO_WritePin(SCL_PORT, SCL, state);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	461a      	mov	r2, r3
 80017ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <set_scl+0x30>)
 80017f0:	f001 f8ec 	bl	80029cc <HAL_GPIO_WritePin>
 80017f4:	e000      	b.n	80017f8 <set_scl+0x24>
	 if(current_mode != GPIO_M) return;
 80017f6:	bf00      	nop
}
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000058 	.word	0x20000058
 8001804:	40020400 	.word	0x40020400

08001808 <set_green_led>:

extern GPIO_PinState get_current_green_led(){
	 return HAL_GPIO_ReadPin(LED_GREEN_PORT, LED_GREEN);
}

extern void set_green_led(GPIO_PinState state){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN, state);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	461a      	mov	r2, r3
 8001816:	2120      	movs	r1, #32
 8001818:	4803      	ldr	r0, [pc, #12]	; (8001828 <set_green_led+0x20>)
 800181a:	f001 f8d7 	bl	80029cc <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020000 	.word	0x40020000

0800182c <get_current_button_state>:

extern GPIO_PinState get_current_button_state(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLUE_BUTTON_PORT, BLUE_BUTTON);
 8001830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <get_current_button_state+0x14>)
 8001836:	f001 f8b1 	bl	800299c <HAL_GPIO_ReadPin>
 800183a:	4603      	mov	r3, r0
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020800 	.word	0x40020800

08001844 <i2c_init>:
#include "i2c_manager.h"

static I2C_HandleTypeDef hi2c1;

extern BOOLEAN i2c_init(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <i2c_init+0x58>)
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <i2c_init+0x5c>)
 800184c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <i2c_init+0x58>)
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <i2c_init+0x60>)
 8001852:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <i2c_init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0x0;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <i2c_init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <i2c_init+0x58>)
 8001862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001866:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <i2c_init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <i2c_init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <i2c_init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <i2c_init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]

	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <i2c_init+0x58>)
 8001882:	f001 f8bd 	bl	8002a00 <HAL_I2C_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <i2c_init+0x4c>
	  {
	    return FALSE;
 800188c:	2300      	movs	r3, #0
 800188e:	e003      	b.n	8001898 <i2c_init+0x54>
	  }
	  switch_mode_sda_scl(I2C_M);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fe67 	bl	8001564 <switch_mode_sda_scl>
      return TRUE;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20002310 	.word	0x20002310
 80018a0:	40005400 	.word	0x40005400
 80018a4:	00061a80 	.word	0x00061a80

080018a8 <print_hex>:

void print_hex(char *caption, unsigned char *m, int length) {
 80018a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018ac:	b08d      	sub	sp, #52	; 0x34
 80018ae:	af02      	add	r7, sp, #8
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	466b      	mov	r3, sp
 80018b8:	461e      	mov	r6, r3
    int size = sizeof(caption) + 30 + length * 3 + 1;
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	3323      	adds	r3, #35	; 0x23
 80018c4:	61fb      	str	r3, [r7, #28]
    char buf[size];
 80018c6:	69f9      	ldr	r1, [r7, #28]
 80018c8:	1e4b      	subs	r3, r1, #1
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	460a      	mov	r2, r1
 80018ce:	2300      	movs	r3, #0
 80018d0:	4690      	mov	r8, r2
 80018d2:	4699      	mov	r9, r3
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e8:	460a      	mov	r2, r1
 80018ea:	2300      	movs	r3, #0
 80018ec:	4614      	mov	r4, r2
 80018ee:	461d      	mov	r5, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	00eb      	lsls	r3, r5, #3
 80018fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018fe:	00e2      	lsls	r2, r4, #3
 8001900:	460b      	mov	r3, r1
 8001902:	3307      	adds	r3, #7
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	ebad 0d03 	sub.w	sp, sp, r3
 800190c:	ab02      	add	r3, sp, #8
 800190e:	3300      	adds	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
    unsigned int pos = snprintf(buf, size, "%s [%i]: ", caption, length);
 8001912:	69f9      	ldr	r1, [r7, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <print_hex+0xc4>)
 800191c:	6978      	ldr	r0, [r7, #20]
 800191e:	f00b fb29 	bl	800cf74 <sniprintf>
 8001922:	4603      	mov	r3, r0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < length; i++) pos += snprintf(buf + pos, 4, "%2.2X ", m[i]);
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
 800192a:	e012      	b.n	8001952 <print_hex+0xaa>
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	18d0      	adds	r0, r2, r3
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <print_hex+0xc8>)
 800193c:	2104      	movs	r1, #4
 800193e:	f00b fb19 	bl	800cf74 <sniprintf>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	4413      	add	r3, r2
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	3301      	adds	r3, #1
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	dbe8      	blt.n	800192c <print_hex+0x84>
    printf("%s\n", buf);
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f00b fb02 	bl	800cf64 <puts>
 8001960:	46b5      	mov	sp, r6
}
 8001962:	bf00      	nop
 8001964:	372c      	adds	r7, #44	; 0x2c
 8001966:	46bd      	mov	sp, r7
 8001968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800196c:	0800e38c 	.word	0x0800e38c
 8001970:	0800e398 	.word	0x0800e398

08001974 <i2c_read_data_from_device>:

extern BOOLEAN i2c_read_data_from_device(uint16_t device_addr, uint16_t reg_addr, uint8_t *buffer, uint16_t buffer_size){
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	81fb      	strh	r3, [r7, #14]
 8001982:	460b      	mov	r3, r1
 8001984:	81bb      	strh	r3, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
	 uint8_t reg[2] = {reg_addr >> 8, reg_addr};
 800198a:	89bb      	ldrh	r3, [r7, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	753b      	strb	r3, [r7, #20]
 8001994:	89bb      	ldrh	r3, [r7, #12]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	757b      	strb	r3, [r7, #21]

	 // Подготовка к чтению
	 if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) device_addr << 1, reg, 2, HAL_MAX_DELAY) != HAL_OK){
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	b299      	uxth	r1, r3
 80019a0:	f107 0214 	add.w	r2, r7, #20
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2302      	movs	r3, #2
 80019ac:	481a      	ldr	r0, [pc, #104]	; (8001a18 <i2c_read_data_from_device+0xa4>)
 80019ae:	f001 f96b 	bl	8002c88 <HAL_I2C_Master_Transmit>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <i2c_read_data_from_device+0x56>
	    	printf("Error prepare to read register %02X %02X\n", reg[0], reg[1]);
 80019b8:	7d3b      	ldrb	r3, [r7, #20]
 80019ba:	4619      	mov	r1, r3
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
 80019be:	461a      	mov	r2, r3
 80019c0:	4816      	ldr	r0, [pc, #88]	; (8001a1c <i2c_read_data_from_device+0xa8>)
 80019c2:	f00b fa69 	bl	800ce98 <iprintf>
	    	return FALSE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e022      	b.n	8001a10 <i2c_read_data_from_device+0x9c>
	 }
     print_hex("ack data: ", reg, 2);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	2202      	movs	r2, #2
 80019d0:	4619      	mov	r1, r3
 80019d2:	4813      	ldr	r0, [pc, #76]	; (8001a20 <i2c_read_data_from_device+0xac>)
 80019d4:	f7ff ff68 	bl	80018a8 <print_hex>


	 // Чтение
  	 uint8_t res = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) device_addr << 1, &buffer[0], buffer_size, HAL_MAX_DELAY);
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	b299      	uxth	r1, r3
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <i2c_read_data_from_device+0xa4>)
 80019ea:	f001 fa4b 	bl	8002e84 <HAL_I2C_Master_Receive>
 80019ee:	4603      	mov	r3, r0
 80019f0:	75fb      	strb	r3, [r7, #23]
	 if(res != HAL_OK){
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <i2c_read_data_from_device+0x8e>
      	 printf("Error read data\n");
 80019f8:	480a      	ldr	r0, [pc, #40]	; (8001a24 <i2c_read_data_from_device+0xb0>)
 80019fa:	f00b fab3 	bl	800cf64 <puts>
    	 return FALSE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e006      	b.n	8001a10 <i2c_read_data_from_device+0x9c>
     }
     print_hex("read data: ", buffer, buffer_size);
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	461a      	mov	r2, r3
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <i2c_read_data_from_device+0xb4>)
 8001a0a:	f7ff ff4d 	bl	80018a8 <print_hex>
     return TRUE;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20002310 	.word	0x20002310
 8001a1c:	0800e3a0 	.word	0x0800e3a0
 8001a20:	0800e3cc 	.word	0x0800e3cc
 8001a24:	0800e3d8 	.word	0x0800e3d8
 8001a28:	0800e3e8 	.word	0x0800e3e8

08001a2c <i2c_send_data_to_device>:

extern BOOLEAN i2c_send_data_to_device(uint16_t device_addr, uint8_t *data, uint16_t data_size){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	80fb      	strh	r3, [r7, #6]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	80bb      	strh	r3, [r7, #4]
    if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) device_addr << 1, &data[0], data_size, HAL_MAX_DELAY) != HAL_OK){
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	b299      	uxth	r1, r3
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	9200      	str	r2, [sp, #0]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	480a      	ldr	r0, [pc, #40]	; (8001a78 <i2c_send_data_to_device+0x4c>)
 8001a4e:	f001 f91b 	bl	8002c88 <HAL_I2C_Master_Transmit>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <i2c_send_data_to_device+0x36>
    	printf("Error during data transfer\n");
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <i2c_send_data_to_device+0x50>)
 8001a5a:	f00b fa83 	bl	800cf64 <puts>
    	return FALSE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e006      	b.n	8001a70 <i2c_send_data_to_device+0x44>
    }
    print_hex("ack data: ", data, data_size);
 8001a62:	88bb      	ldrh	r3, [r7, #4]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <i2c_send_data_to_device+0x54>)
 8001a6a:	f7ff ff1d 	bl	80018a8 <print_hex>
	return TRUE;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20002310 	.word	0x20002310
 8001a7c:	0800e3f4 	.word	0x0800e3f4
 8001a80:	0800e3cc 	.word	0x0800e3cc

08001a84 <start_indication>:
static UINT8 state = 0;
static void reset_task(void);
static void firmware_update(void);


extern void start_indication(void *argument){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	while(1){
        switch(current_task){
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <start_indication+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d102      	bne.n	8001a9a <start_indication+0x16>
             case 1:
            	 firmware_update();
 8001a94:	f000 f806 	bl	8001aa4 <firmware_update>
            	 break;
 8001a98:	e000      	b.n	8001a9c <start_indication+0x18>
             default:
            	 break;
 8001a9a:	bf00      	nop
        switch(current_task){
 8001a9c:	e7f6      	b.n	8001a8c <start_indication+0x8>
 8001a9e:	bf00      	nop
 8001aa0:	20002364 	.word	0x20002364

08001aa4 <firmware_update>:
        }
	}
}

static void firmware_update(void){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	if(state == 0){
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <firmware_update+0x30>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d106      	bne.n	8001abe <firmware_update+0x1a>
		state = 1;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <firmware_update+0x30>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_RESET);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fea6 	bl	8001808 <set_green_led>
 8001abc:	e005      	b.n	8001aca <firmware_update+0x26>
	} else {
	    state = 0;
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <firmware_update+0x30>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_SET);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff fe9f 	bl	8001808 <set_green_led>
	}
	osDelay(50);
 8001aca:	2032      	movs	r0, #50	; 0x32
 8001acc:	f007 fd55 	bl	800957a <osDelay>
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20002365 	.word	0x20002365

08001ad8 <set_indication_task>:

extern void set_indication_task(UINT8 cmd){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
	reset_task();
 8001ae2:	f000 f809 	bl	8001af8 <reset_task>
	current_task = cmd;
 8001ae6:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <set_indication_task+0x1c>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	7013      	strb	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20002364 	.word	0x20002364

08001af8 <reset_task>:

static void reset_task(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	state = 0;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <reset_task+0x14>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
	set_green_led(GPIO_PIN_RESET);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fe80 	bl	8001808 <set_green_led>
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20002365 	.word	0x20002365

08001b10 <init_tasks>:
static void init_gpio_task(void *argument);
static void init_i2c_task(void *argument);
static void init_ind_task(void *argument);


extern BOOLEAN init_tasks(void){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	  osKernelInitialize();
 8001b16:	f007 fc1d 	bl	8009354 <osKernelInitialize>

	  UINT8 fail_cnt = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	  gpio_taskHandle = osThreadNew(init_gpio_task, NULL, &gpio_task_attributes);
 8001b1e:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <init_tasks+0x90>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	4820      	ldr	r0, [pc, #128]	; (8001ba4 <init_tasks+0x94>)
 8001b24:	f007 fc97 	bl	8009456 <osThreadNew>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <init_tasks+0x98>)
 8001b2c:	6013      	str	r3, [r2, #0]
	  if(gpio_taskHandle == NULL){
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <init_tasks+0x98>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <init_tasks+0x32>
		 printf("Error init gpio task\n");
 8001b36:	481d      	ldr	r0, [pc, #116]	; (8001bac <init_tasks+0x9c>)
 8001b38:	f00b fa14 	bl	800cf64 <puts>
		 fail_cnt++;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
	  }

	  i2c_taskHandle = osThreadNew(init_i2c_task, NULL, &i2c_task_attributes);
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <init_tasks+0xa0>)
 8001b44:	2100      	movs	r1, #0
 8001b46:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <init_tasks+0xa4>)
 8001b48:	f007 fc85 	bl	8009456 <osThreadNew>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <init_tasks+0xa8>)
 8001b50:	6013      	str	r3, [r2, #0]
	  if(i2c_taskHandle == NULL){
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <init_tasks+0xa8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <init_tasks+0x56>
		 printf("Error init i2c task\n");
 8001b5a:	4818      	ldr	r0, [pc, #96]	; (8001bbc <init_tasks+0xac>)
 8001b5c:	f00b fa02 	bl	800cf64 <puts>
		 fail_cnt++;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	3301      	adds	r3, #1
 8001b64:	71fb      	strb	r3, [r7, #7]
	  }

	  ind_taskHandle = osThreadNew(init_ind_task, NULL, &ind_task_attributes);
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <init_tasks+0xb0>)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4816      	ldr	r0, [pc, #88]	; (8001bc4 <init_tasks+0xb4>)
 8001b6c:	f007 fc73 	bl	8009456 <osThreadNew>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <init_tasks+0xb8>)
 8001b74:	6013      	str	r3, [r2, #0]
	  if(ind_taskHandle == NULL){
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <init_tasks+0xb8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <init_tasks+0x7a>
	 	 printf("Error init ind task\n");
 8001b7e:	4813      	ldr	r0, [pc, #76]	; (8001bcc <init_tasks+0xbc>)
 8001b80:	f00b f9f0 	bl	800cf64 <puts>
	 	 fail_cnt++;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	3301      	adds	r3, #1
 8001b88:	71fb      	strb	r3, [r7, #7]
	  }

	  return (fail_cnt == 0) ? TRUE : FALSE;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	0800e554 	.word	0x0800e554
 8001ba4:	08001bd1 	.word	0x08001bd1
 8001ba8:	20002368 	.word	0x20002368
 8001bac:	0800e49c 	.word	0x0800e49c
 8001bb0:	0800e578 	.word	0x0800e578
 8001bb4:	08001bfd 	.word	0x08001bfd
 8001bb8:	2000236c 	.word	0x2000236c
 8001bbc:	0800e4b4 	.word	0x0800e4b4
 8001bc0:	0800e59c 	.word	0x0800e59c
 8001bc4:	08001be5 	.word	0x08001be5
 8001bc8:	20002370 	.word	0x20002370
 8001bcc:	0800e4c8 	.word	0x0800e4c8

08001bd0 <init_gpio_task>:


static void init_gpio_task(void *argument){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	gpio_start();
 8001bd8:	f7ff fcae 	bl	8001538 <gpio_start>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <init_ind_task>:

static void init_ind_task(void *argument){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	start_indication(NULL);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff ff49 	bl	8001a84 <start_indication>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <init_i2c_task>:



static BOOLEAN is_start = FALSE;

static void init_i2c_task(void *argument){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	set_power(GPIO_PIN_SET);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff fdb9 	bl	800177c <set_power>
	osDelay(1000);
 8001c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0e:	f007 fcb4 	bl	800957a <osDelay>
	while(1){
		osDelay(100);
 8001c12:	2064      	movs	r0, #100	; 0x64
 8001c14:	f007 fcb1 	bl	800957a <osDelay>
		if(get_current_button_state() == GPIO_PIN_RESET){
 8001c18:	f7ff fe08 	bl	800182c <get_current_button_state>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f7      	bne.n	8001c12 <init_i2c_task+0x16>
			if(!is_start){
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <init_i2c_task+0x4c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f3      	bne.n	8001c12 <init_i2c_task+0x16>
				is_start = TRUE;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <init_i2c_task+0x4c>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
				set_indication_task(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff ff51 	bl	8001ad8 <set_indication_task>
				update_firmware();
 8001c36:	f7ff fb97 	bl	8001368 <update_firmware>
				is_start = FALSE;
 8001c3a:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <init_i2c_task+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
				set_indication_task(0);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff ff49 	bl	8001ad8 <set_indication_task>
		osDelay(100);
 8001c46:	e7e4      	b.n	8001c12 <init_i2c_task+0x16>
 8001c48:	20002374 	.word	0x20002374

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_Init+0x40>)
 8001c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_Init+0x40>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x40>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f94f 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	200f      	movs	r0, #15
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7fe fd58 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f967 	bl	8001f82 <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f000 f92f 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000060 	.word	0x20000060
 8001cec:	2000005c 	.word	0x2000005c

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000060 	.word	0x20000060
 8001d14:	20002378 	.word	0x20002378

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20002378 	.word	0x20002378

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff ffee 	bl	8001d18 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffde 	bl	8001d18 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000060 	.word	0x20000060

08001d78 <__NVIC_SetPriorityGrouping>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff29 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff3e 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff31 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff feb6 	bl	8001d18 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e099      	b.n	80020ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd8:	e00f      	b.n	8001ffa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fda:	f7ff fe9d 	bl	8001d18 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d908      	bls.n	8001ffa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2220      	movs	r2, #32
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e078      	b.n	80020ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e8      	bne.n	8001fda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_DMA_Init+0x158>)
 8002014:	4013      	ands	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002026:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2b04      	cmp	r3, #4
 8002052:	d107      	bne.n	8002064 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4313      	orrs	r3, r2
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0307 	bic.w	r3, r3, #7
 800207a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2b04      	cmp	r3, #4
 800208c:	d117      	bne.n	80020be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fa7b 	bl	800259c <DMA_CheckFifoParam>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ba:	2301      	movs	r3, #1
 80020bc:	e016      	b.n	80020ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa32 	bl	8002530 <DMA_CalcBaseAndBitshift>
 80020cc:	4603      	mov	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	223f      	movs	r2, #63	; 0x3f
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	f010803f 	.word	0xf010803f

080020f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_DMA_Start_IT+0x26>
 800211a:	2302      	movs	r3, #2
 800211c:	e040      	b.n	80021a0 <HAL_DMA_Start_IT+0xa8>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d12f      	bne.n	8002192 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f9c4 	bl	80024d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	223f      	movs	r2, #63	; 0x3f
 8002152:	409a      	lsls	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0216 	orr.w	r2, r2, #22
 8002166:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0208 	orr.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e005      	b.n	800219e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021b4:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <HAL_DMA_IRQHandler+0x248>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a8e      	ldr	r2, [pc, #568]	; (80023f4 <HAL_DMA_IRQHandler+0x24c>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a9b      	lsrs	r3, r3, #10
 80021c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2208      	movs	r2, #8
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01a      	beq.n	8002214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0204 	bic.w	r2, r2, #4
 80021fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2208      	movs	r2, #8
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	2201      	movs	r2, #1
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d012      	beq.n	800224a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2201      	movs	r2, #1
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	2204      	movs	r2, #4
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00b      	beq.n	8002280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2204      	movs	r2, #4
 800226e:	409a      	lsls	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2210      	movs	r2, #16
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d043      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03c      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	2210      	movs	r2, #16
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d018      	beq.n	80022ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e01f      	b.n	8002318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
 80022e8:	e016      	b.n	8002318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0208 	bic.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2220      	movs	r2, #32
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 808f 	beq.w	8002448 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8087 	beq.w	8002448 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	2220      	movs	r2, #32
 8002340:	409a      	lsls	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b05      	cmp	r3, #5
 8002350:	d136      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0216 	bic.w	r2, r2, #22
 8002360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <HAL_DMA_IRQHandler+0x1da>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0208 	bic.w	r2, r2, #8
 8002390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	223f      	movs	r2, #63	; 0x3f
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d07e      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
        }
        return;
 80023be:	e079      	b.n	80024b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01d      	beq.n	800240a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d031      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e02c      	b.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000
 80023f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d023      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
 8002408:	e01e      	b.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10f      	bne.n	8002438 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0210 	bic.w	r2, r2, #16
 8002426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	2b00      	cmp	r3, #0
 800244e:	d032      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2205      	movs	r2, #5
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	d307      	bcc.n	8002490 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f2      	bne.n	8002474 <HAL_DMA_IRQHandler+0x2cc>
 800248e:	e000      	b.n	8002492 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002490:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
 80024b2:	e000      	b.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024b4:	bf00      	nop
    }
  }
}
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d108      	bne.n	8002514 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002512:	e007      	b.n	8002524 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3b10      	subs	r3, #16
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <DMA_CalcBaseAndBitshift+0x64>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <DMA_CalcBaseAndBitshift+0x68>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d909      	bls.n	8002572 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	659a      	str	r2, [r3, #88]	; 0x58
 8002570:	e007      	b.n	8002582 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	aaaaaaab 	.word	0xaaaaaaab
 8002598:	0800e5c0 	.word	0x0800e5c0

0800259c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11f      	bne.n	80025f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d856      	bhi.n	800266a <DMA_CheckFifoParam+0xce>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <DMA_CheckFifoParam+0x28>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025e7 	.word	0x080025e7
 80025cc:	080025d5 	.word	0x080025d5
 80025d0:	0800266b 	.word	0x0800266b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d046      	beq.n	800266e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e043      	b.n	800266e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025ee:	d140      	bne.n	8002672 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e03d      	b.n	8002672 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fe:	d121      	bne.n	8002644 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d837      	bhi.n	8002676 <DMA_CheckFifoParam+0xda>
 8002606:	a201      	add	r2, pc, #4	; (adr r2, 800260c <DMA_CheckFifoParam+0x70>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	0800261d 	.word	0x0800261d
 8002610:	08002623 	.word	0x08002623
 8002614:	0800261d 	.word	0x0800261d
 8002618:	08002635 	.word	0x08002635
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e030      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d025      	beq.n	800267a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002632:	e022      	b.n	800267a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800263c:	d11f      	bne.n	800267e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002642:	e01c      	b.n	800267e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d903      	bls.n	8002652 <DMA_CheckFifoParam+0xb6>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d003      	beq.n	8002658 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002650:	e018      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      break;
 8002656:	e015      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e00b      	b.n	8002682 <DMA_CheckFifoParam+0xe6>
      break;
 800266a:	bf00      	nop
 800266c:	e00a      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 800266e:	bf00      	nop
 8002670:	e008      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
 8002674:	e006      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002676:	bf00      	nop
 8002678:	e004      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
 800267c:	e002      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;   
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
    }
  } 
  
  return status; 
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e159      	b.n	8002964 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 8148 	bne.w	800295e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d130      	bne.n	8002748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80a2 	beq.w	800295e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_GPIO_Init+0x2e8>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_GPIO_Init+0x2e8>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b54      	ldr	r3, [pc, #336]	; (800297c <HAL_GPIO_Init+0x2e8>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_GPIO_Init+0x2ec>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a49      	ldr	r2, [pc, #292]	; (8002984 <HAL_GPIO_Init+0x2f0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d019      	beq.n	8002896 <HAL_GPIO_Init+0x202>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a48      	ldr	r2, [pc, #288]	; (8002988 <HAL_GPIO_Init+0x2f4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0x1fe>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a47      	ldr	r2, [pc, #284]	; (800298c <HAL_GPIO_Init+0x2f8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00d      	beq.n	800288e <HAL_GPIO_Init+0x1fa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a46      	ldr	r2, [pc, #280]	; (8002990 <HAL_GPIO_Init+0x2fc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <HAL_GPIO_Init+0x1f6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <HAL_GPIO_Init+0x300>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_GPIO_Init+0x1f2>
 8002882:	2304      	movs	r3, #4
 8002884:	e008      	b.n	8002898 <HAL_GPIO_Init+0x204>
 8002886:	2307      	movs	r3, #7
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x204>
 800288a:	2303      	movs	r3, #3
 800288c:	e004      	b.n	8002898 <HAL_GPIO_Init+0x204>
 800288e:	2302      	movs	r3, #2
 8002890:	e002      	b.n	8002898 <HAL_GPIO_Init+0x204>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_GPIO_Init+0x204>
 8002896:	2300      	movs	r3, #0
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f002 0203 	and.w	r2, r2, #3
 800289e:	0092      	lsls	r2, r2, #2
 80028a0:	4093      	lsls	r3, r2
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a8:	4935      	ldr	r1, [pc, #212]	; (8002980 <HAL_GPIO_Init+0x2ec>)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_GPIO_Init+0x304>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028da:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <HAL_GPIO_Init+0x304>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_GPIO_Init+0x304>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002904:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_GPIO_Init+0x304>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292e:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002934:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002958:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <HAL_GPIO_Init+0x304>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3301      	adds	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b0f      	cmp	r3, #15
 8002968:	f67f aea2 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40013800 	.word	0x40013800
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400
 800298c:	40020800 	.word	0x40020800
 8002990:	40020c00 	.word	0x40020c00
 8002994:	40021000 	.word	0x40021000
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	887b      	ldrh	r3, [r7, #2]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e001      	b.n	80029be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e12b      	b.n	8002c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fd feb0 	bl	800078c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a64:	f001 fbd2 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 8002a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4a81      	ldr	r2, [pc, #516]	; (8002c74 <HAL_I2C_Init+0x274>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d807      	bhi.n	8002a84 <HAL_I2C_Init+0x84>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a80      	ldr	r2, [pc, #512]	; (8002c78 <HAL_I2C_Init+0x278>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	bf94      	ite	ls
 8002a7c:	2301      	movls	r3, #1
 8002a7e:	2300      	movhi	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e006      	b.n	8002a92 <HAL_I2C_Init+0x92>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a7d      	ldr	r2, [pc, #500]	; (8002c7c <HAL_I2C_Init+0x27c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bf94      	ite	ls
 8002a8c:	2301      	movls	r3, #1
 8002a8e:	2300      	movhi	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0e7      	b.n	8002c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a78      	ldr	r2, [pc, #480]	; (8002c80 <HAL_I2C_Init+0x280>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	; (8002c74 <HAL_I2C_Init+0x274>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d802      	bhi.n	8002ad4 <HAL_I2C_Init+0xd4>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	e009      	b.n	8002ae8 <HAL_I2C_Init+0xe8>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <HAL_I2C_Init+0x284>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	495c      	ldr	r1, [pc, #368]	; (8002c74 <HAL_I2C_Init+0x274>)
 8002b04:	428b      	cmp	r3, r1
 8002b06:	d819      	bhi.n	8002b3c <HAL_I2C_Init+0x13c>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e59      	subs	r1, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b16:	1c59      	adds	r1, r3, #1
 8002b18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b1c:	400b      	ands	r3, r1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_I2C_Init+0x138>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1e59      	subs	r1, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b36:	e051      	b.n	8002bdc <HAL_I2C_Init+0x1dc>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	e04f      	b.n	8002bdc <HAL_I2C_Init+0x1dc>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d111      	bne.n	8002b68 <HAL_I2C_Init+0x168>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e58      	subs	r0, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	440b      	add	r3, r1
 8002b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e012      	b.n	8002b8e <HAL_I2C_Init+0x18e>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	0099      	lsls	r1, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Init+0x196>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e022      	b.n	8002bdc <HAL_I2C_Init+0x1dc>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10e      	bne.n	8002bbc <HAL_I2C_Init+0x1bc>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1e58      	subs	r0, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	440b      	add	r3, r1
 8002bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bba:	e00f      	b.n	8002bdc <HAL_I2C_Init+0x1dc>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e58      	subs	r0, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	0099      	lsls	r1, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	6809      	ldr	r1, [r1, #0]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6911      	ldr	r1, [r2, #16]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68d2      	ldr	r2, [r2, #12]
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	000186a0 	.word	0x000186a0
 8002c78:	001e847f 	.word	0x001e847f
 8002c7c:	003d08ff 	.word	0x003d08ff
 8002c80:	431bde83 	.word	0x431bde83
 8002c84:	10624dd3 	.word	0x10624dd3

08002c88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	461a      	mov	r2, r3
 8002c94:	460b      	mov	r3, r1
 8002c96:	817b      	strh	r3, [r7, #10]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff f83c 	bl	8001d18 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	f040 80e0 	bne.w	8002e70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2319      	movs	r3, #25
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4970      	ldr	r1, [pc, #448]	; (8002e7c <HAL_I2C_Master_Transmit+0x1f4>)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fc58 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e0d3      	b.n	8002e72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_I2C_Master_Transmit+0x50>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0cc      	b.n	8002e72 <HAL_I2C_Master_Transmit+0x1ea>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d007      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2221      	movs	r2, #33	; 0x21
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	893a      	ldrh	r2, [r7, #8]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a50      	ldr	r2, [pc, #320]	; (8002e80 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d40:	8979      	ldrh	r1, [r7, #10]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fac2 	bl	80032d0 <I2C_MasterRequestWrite>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e08d      	b.n	8002e72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d6c:	e066      	b.n	8002e3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	6a39      	ldr	r1, [r7, #32]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fcd2 	bl	800371c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d107      	bne.n	8002d96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06b      	b.n	8002e72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d11b      	bne.n	8002e10 <HAL_I2C_Master_Transmit+0x188>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d017      	beq.n	8002e10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	6a39      	ldr	r1, [r7, #32]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fcc2 	bl	800379e <I2C_WaitOnBTFFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d107      	bne.n	8002e38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e01a      	b.n	8002e72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d194      	bne.n	8002d6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	00100002 	.word	0x00100002
 8002e80:	ffff0000 	.word	0xffff0000

08002e84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	; 0x30
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	4613      	mov	r3, r2
 8002e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7fe ff3e 	bl	8001d18 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 820b 	bne.w	80032c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	497c      	ldr	r1, [pc, #496]	; (80030a8 <HAL_I2C_Master_Receive+0x224>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fb5a 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e1fe      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Master_Receive+0x50>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e1f7      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d007      	beq.n	8002efa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2222      	movs	r2, #34	; 0x22
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2210      	movs	r2, #16
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	893a      	ldrh	r2, [r7, #8]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a5c      	ldr	r2, [pc, #368]	; (80030ac <HAL_I2C_Master_Receive+0x228>)
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fa46 	bl	80033d4 <I2C_MasterRequestRead>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e1b8      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d113      	bne.n	8002f82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e18c      	b.n	800329c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d11b      	bne.n	8002fc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e16c      	b.n	800329c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d11b      	bne.n	8003002 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	e14c      	b.n	800329c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003028:	e138      	b.n	800329c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	2b03      	cmp	r3, #3
 8003030:	f200 80f1 	bhi.w	8003216 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b01      	cmp	r3, #1
 800303a:	d123      	bne.n	8003084 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fbed 	bl	8003820 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e139      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003082:	e10b      	b.n	800329c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	2b02      	cmp	r3, #2
 800308a:	d14e      	bne.n	800312a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	2200      	movs	r2, #0
 8003094:	4906      	ldr	r1, [pc, #24]	; (80030b0 <HAL_I2C_Master_Receive+0x22c>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fa6a 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e10e      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
 80030a6:	bf00      	nop
 80030a8:	00100002 	.word	0x00100002
 80030ac:	ffff0000 	.word	0xffff0000
 80030b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003128:	e0b8      	b.n	800329c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2200      	movs	r2, #0
 8003132:	4966      	ldr	r1, [pc, #408]	; (80032cc <HAL_I2C_Master_Receive+0x448>)
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fa1b 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0bf      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2200      	movs	r2, #0
 800318e:	494f      	ldr	r1, [pc, #316]	; (80032cc <HAL_I2C_Master_Receive+0x448>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f9ed 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e091      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003214:	e042      	b.n	800329c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fb00 	bl	8003820 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e04c      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d118      	bne.n	800329c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f47f aec2 	bne.w	800302a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	00010004 	.word	0x00010004

080032d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	460b      	mov	r3, r1
 80032de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d006      	beq.n	80032fa <I2C_MasterRequestWrite+0x2a>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d003      	beq.n	80032fa <I2C_MasterRequestWrite+0x2a>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f8:	d108      	bne.n	800330c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e00b      	b.n	8003324 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	2b12      	cmp	r3, #18
 8003312:	d107      	bne.n	8003324 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f91d 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334a:	d103      	bne.n	8003354 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e035      	b.n	80033c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003360:	d108      	bne.n	8003374 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	e01b      	b.n	80033ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003374:	897b      	ldrh	r3, [r7, #10]
 8003376:	11db      	asrs	r3, r3, #7
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 0306 	and.w	r3, r3, #6
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f063 030f 	orn	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	490e      	ldr	r1, [pc, #56]	; (80033cc <I2C_MasterRequestWrite+0xfc>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f943 	bl	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e010      	b.n	80033c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033a2:	897b      	ldrh	r3, [r7, #10]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4907      	ldr	r1, [pc, #28]	; (80033d0 <I2C_MasterRequestWrite+0x100>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f933 	bl	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	00010008 	.word	0x00010008
 80033d0:	00010002 	.word	0x00010002

080033d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	460b      	mov	r3, r1
 80033e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d006      	beq.n	800340e <I2C_MasterRequestRead+0x3a>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d003      	beq.n	800340e <I2C_MasterRequestRead+0x3a>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800340c:	d108      	bne.n	8003420 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e00b      	b.n	8003438 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	2b11      	cmp	r3, #17
 8003426:	d107      	bne.n	8003438 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f893 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345e:	d103      	bne.n	8003468 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e079      	b.n	8003560 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003474:	d108      	bne.n	8003488 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]
 8003486:	e05f      	b.n	8003548 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003488:	897b      	ldrh	r3, [r7, #10]
 800348a:	11db      	asrs	r3, r3, #7
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0306 	and.w	r3, r3, #6
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f063 030f 	orn	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4930      	ldr	r1, [pc, #192]	; (8003568 <I2C_MasterRequestRead+0x194>)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8b9 	bl	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e054      	b.n	8003560 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4929      	ldr	r1, [pc, #164]	; (800356c <I2C_MasterRequestRead+0x198>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f8a9 	bl	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e044      	b.n	8003560 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f831 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003522:	d103      	bne.n	800352c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e017      	b.n	8003560 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003530:	897b      	ldrh	r3, [r7, #10]
 8003532:	11db      	asrs	r3, r3, #7
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 0306 	and.w	r3, r3, #6
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f063 030e 	orn	r3, r3, #14
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4907      	ldr	r1, [pc, #28]	; (800356c <I2C_MasterRequestRead+0x198>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f865 	bl	800361e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00010008 	.word	0x00010008
 800356c:	00010002 	.word	0x00010002

08003570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003580:	e025      	b.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d021      	beq.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7fe fbc5 	bl	8001d18 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d116      	bne.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e023      	b.n	8003616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d10d      	bne.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	e00c      	b.n	800360e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	429a      	cmp	r2, r3
 8003612:	d0b6      	beq.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800362c:	e051      	b.n	80036d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363c:	d123      	bne.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0204 	orr.w	r2, r3, #4
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e046      	b.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d021      	beq.n	80036d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fe fb43 	bl	8001d18 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f043 0220 	orr.w	r2, r3, #32
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e020      	b.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d10c      	bne.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	43da      	mvns	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4013      	ands	r3, r2
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf14      	ite	ne
 80036ee:	2301      	movne	r3, #1
 80036f0:	2300      	moveq	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e00b      	b.n	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	43da      	mvns	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d18d      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003728:	e02d      	b.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f8ce 	bl	80038cc <I2C_IsAcknowledgeFailed>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e02d      	b.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d021      	beq.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe fae9 	bl	8001d18 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e007      	b.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d1ca      	bne.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037aa:	e02d      	b.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f88d 	bl	80038cc <I2C_IsAcknowledgeFailed>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e02d      	b.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c2:	d021      	beq.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c4:	f7fe faa8 	bl	8001d18 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d116      	bne.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e007      	b.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d1ca      	bne.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800382c:	e042      	b.n	80038b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b10      	cmp	r3, #16
 800383a:	d119      	bne.n	8003870 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0210 	mvn.w	r2, #16
 8003844:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e029      	b.n	80038c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003870:	f7fe fa52 	bl	8001d18 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e007      	b.n	80038c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b40      	cmp	r3, #64	; 0x40
 80038c0:	d1b5      	bne.n	800382e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e2:	d11b      	bne.n	800391c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e267      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d075      	beq.n	8003a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b04      	cmp	r3, #4
 8003954:	d00c      	beq.n	8003970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003956:	4b85      	ldr	r3, [pc, #532]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395e:	2b08      	cmp	r3, #8
 8003960:	d112      	bne.n	8003988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003962:	4b82      	ldr	r3, [pc, #520]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800396e:	d10b      	bne.n	8003988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	4b7e      	ldr	r3, [pc, #504]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05b      	beq.n	8003a34 <HAL_RCC_OscConfig+0x108>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d157      	bne.n	8003a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e242      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x74>
 8003992:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a75      	ldr	r2, [pc, #468]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e01d      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b70      	ldr	r3, [pc, #448]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6f      	ldr	r2, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6d      	ldr	r3, [pc, #436]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6c      	ldr	r2, [pc, #432]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039c4:	4b69      	ldr	r3, [pc, #420]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a68      	ldr	r2, [pc, #416]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a65      	ldr	r2, [pc, #404]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe f998 	bl	8001d18 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fe f994 	bl	8001d18 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e207      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b5b      	ldr	r3, [pc, #364]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0xc0>
 8003a0a:	e014      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe f984 	bl	8001d18 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe f980 	bl	8001d18 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1f3      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	4b51      	ldr	r3, [pc, #324]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0xe8>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d063      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a42:	4b4a      	ldr	r3, [pc, #296]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d11c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5a:	4b44      	ldr	r3, [pc, #272]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x152>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e1c7      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4937      	ldr	r1, [pc, #220]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	e03a      	b.n	8003b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fe f939 	bl	8001d18 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fe f935 	bl	8001d18 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1a8      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4925      	ldr	r1, [pc, #148]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f918 	bl	8001d18 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe f914 	bl	8001d18 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e187      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d036      	beq.n	8003b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_RCC_OscConfig+0x248>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fe f8f8 	bl	8001d18 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe f8f4 	bl	8001d18 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e167      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x200>
 8003b4a:	e01b      	b.n	8003b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_OscConfig+0x248>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b52:	f7fe f8e1 	bl	8001d18 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	e00e      	b.n	8003b78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fe f8dd 	bl	8001d18 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d907      	bls.n	8003b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e150      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470000 	.word	0x42470000
 8003b74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ea      	bne.n	8003b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8097 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b96:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b7d      	ldr	r3, [pc, #500]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	4a7c      	ldr	r2, [pc, #496]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b77      	ldr	r3, [pc, #476]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bce:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a73      	ldr	r2, [pc, #460]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bda:	f7fe f89d 	bl	8001d18 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fe f899 	bl	8001d18 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e10c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2ea>
 8003c08:	4b64      	ldr	r3, [pc, #400]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a63      	ldr	r2, [pc, #396]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x324>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x30c>
 8003c1e:	4b5f      	ldr	r3, [pc, #380]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a5e      	ldr	r2, [pc, #376]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a5b      	ldr	r2, [pc, #364]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0x324>
 8003c38:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a57      	ldr	r2, [pc, #348]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
 8003c44:	4b55      	ldr	r3, [pc, #340]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a54      	ldr	r2, [pc, #336]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 0304 	bic.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fe f85e 	bl	8001d18 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fe f85a 	bl	8001d18 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0cb      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	4b49      	ldr	r3, [pc, #292]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ee      	beq.n	8003c60 <HAL_RCC_OscConfig+0x334>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c84:	f7fe f848 	bl	8001d18 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fe f844 	bl	8001d18 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0b5      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	4b3e      	ldr	r3, [pc, #248]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ee      	bne.n	8003c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a1 	beq.w	8003e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cca:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d05c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d141      	bne.n	8003d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe f818 	bl	8001d18 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe f814 	bl	8001d18 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e087      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	491b      	ldr	r1, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd ffed 	bl	8001d18 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd ffe9 	bl	8001d18 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e05c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x416>
 8003d60:	e054      	b.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd ffd6 	bl	8001d18 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd ffd2 	bl	8001d18 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e045      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x444>
 8003d8e:	e03d      	b.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e038      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40007000 	.word	0x40007000
 8003da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x4ec>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d028      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d121      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d111      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	3b01      	subs	r3, #1
 8003df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800

08003e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0cc      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d90c      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b8      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a52      	ldr	r2, [pc, #328]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e94:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	494d      	ldr	r1, [pc, #308]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d044      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d119      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e06f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eea:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e067      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4934      	ldr	r1, [pc, #208]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fd ff04 	bl	8001d18 <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f14:	f7fd ff00 	bl	8001d18 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20c      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e032      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4916      	ldr	r1, [pc, #88]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490e      	ldr	r1, [pc, #56]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa2:	f000 f821 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490a      	ldr	r1, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fe64 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	0800e53c 	.word	0x0800e53c
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	2000005c 	.word	0x2000005c

08003fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fec:	b094      	sub	sp, #80	; 0x50
 8003fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004000:	4b79      	ldr	r3, [pc, #484]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d00d      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x40>
 800400c:	2b08      	cmp	r3, #8
 800400e:	f200 80e1 	bhi.w	80041d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x34>
 8004016:	2b04      	cmp	r3, #4
 8004018:	d003      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x3a>
 800401a:	e0db      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b73      	ldr	r3, [pc, #460]	; (80041ec <HAL_RCC_GetSysClockFreq+0x204>)
 800401e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004020:	e0db      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004022:	4b73      	ldr	r3, [pc, #460]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004026:	e0d8      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004032:	4b6d      	ldr	r3, [pc, #436]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d063      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403e:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	2200      	movs	r2, #0
 8004046:	63bb      	str	r3, [r7, #56]	; 0x38
 8004048:	63fa      	str	r2, [r7, #60]	; 0x3c
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	f04f 0000 	mov.w	r0, #0
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	0159      	lsls	r1, r3, #5
 8004068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406c:	0150      	lsls	r0, r2, #5
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4621      	mov	r1, r4
 8004074:	1a51      	subs	r1, r2, r1
 8004076:	6139      	str	r1, [r7, #16]
 8004078:	4629      	mov	r1, r5
 800407a:	eb63 0301 	sbc.w	r3, r3, r1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800408c:	4659      	mov	r1, fp
 800408e:	018b      	lsls	r3, r1, #6
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004096:	4651      	mov	r1, sl
 8004098:	018a      	lsls	r2, r1, #6
 800409a:	4651      	mov	r1, sl
 800409c:	ebb2 0801 	subs.w	r8, r2, r1
 80040a0:	4659      	mov	r1, fp
 80040a2:	eb63 0901 	sbc.w	r9, r3, r1
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ba:	4690      	mov	r8, r2
 80040bc:	4699      	mov	r9, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	eb18 0303 	adds.w	r3, r8, r3
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	462b      	mov	r3, r5
 80040c8:	eb49 0303 	adc.w	r3, r9, r3
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040da:	4629      	mov	r1, r5
 80040dc:	024b      	lsls	r3, r1, #9
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e4:	4621      	mov	r1, r4
 80040e6:	024a      	lsls	r2, r1, #9
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	2200      	movs	r2, #0
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f8:	f7fc f8c2 	bl	8000280 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004104:	e058      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004106:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	2200      	movs	r2, #0
 800410e:	4618      	mov	r0, r3
 8004110:	4611      	mov	r1, r2
 8004112:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	2300      	movs	r3, #0
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
 800411c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	0159      	lsls	r1, r3, #5
 800412e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004132:	0150      	lsls	r0, r2, #5
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4641      	mov	r1, r8
 800413a:	ebb2 0a01 	subs.w	sl, r2, r1
 800413e:	4649      	mov	r1, r9
 8004140:	eb63 0b01 	sbc.w	fp, r3, r1
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004150:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004154:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004158:	ebb2 040a 	subs.w	r4, r2, sl
 800415c:	eb63 050b 	sbc.w	r5, r3, fp
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	00eb      	lsls	r3, r5, #3
 800416a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416e:	00e2      	lsls	r2, r4, #3
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	4643      	mov	r3, r8
 8004176:	18e3      	adds	r3, r4, r3
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	464b      	mov	r3, r9
 800417c:	eb45 0303 	adc.w	r3, r5, r3
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800418e:	4629      	mov	r1, r5
 8004190:	028b      	lsls	r3, r1, #10
 8004192:	4621      	mov	r1, r4
 8004194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004198:	4621      	mov	r1, r4
 800419a:	028a      	lsls	r2, r1, #10
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a2:	2200      	movs	r2, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	61fa      	str	r2, [r7, #28]
 80041a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ac:	f7fc f868 	bl	8000280 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4613      	mov	r3, r2
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	3301      	adds	r3, #1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d2:	e002      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetSysClockFreq+0x204>)
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3750      	adds	r7, #80	; 0x50
 80041e0:	46bd      	mov	sp, r7
 80041e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800
 80041ec:	00f42400 	.word	0x00f42400
 80041f0:	007a1200 	.word	0x007a1200

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_GetHCLKFreq+0x14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000000 	.word	0x20000000

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004210:	f7ff fff0 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	0800e54c 	.word	0x0800e54c

08004234 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e022      	b.n	800428c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fc fadf 	bl	800081c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2203      	movs	r2, #3
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f814 	bl	8004294 <HAL_SD_InitCard>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00a      	b.n	800428c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b08e      	sub	sp, #56	; 0x38
 8004298:	af04      	add	r7, sp, #16
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80042b0:	2376      	movs	r3, #118	; 0x76
 80042b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681d      	ldr	r5, [r3, #0]
 80042b8:	466c      	mov	r4, sp
 80042ba:	f107 0314 	add.w	r3, r7, #20
 80042be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042cc:	4628      	mov	r0, r5
 80042ce:	f001 f84a 	bl	8005366 <SDIO_Init>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80042d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04f      	b.n	8004384 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_SD_InitCard+0xf8>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f871 	bl	80053d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80042f4:	4b25      	ldr	r3, [pc, #148]	; (800438c <HAL_SD_InitCard+0xf8>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80042fa:	2002      	movs	r0, #2
 80042fc:	f7fd fd18 	bl	8001d30 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fe11 	bl	8004f28 <SD_PowerON>
 8004306:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e02e      	b.n	8004384 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fd30 	bl	8004d8c <SD_InitCard>
 800432c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e01b      	b.n	8004384 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004354:	4618      	mov	r0, r3
 8004356:	f001 f8d0 	bl	80054fa <SDMMC_CmdBlockLength>
 800435a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00f      	beq.n	8004382 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <HAL_SD_InitCard+0xfc>)
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3728      	adds	r7, #40	; 0x28
 8004388:	46bd      	mov	sp, r7
 800438a:	bdb0      	pop	{r4, r5, r7, pc}
 800438c:	422580a0 	.word	0x422580a0
 8004390:	004005ff 	.word	0x004005ff

08004394 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0c0      	b.n	800453e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	f040 80b9 	bne.w	800453c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80043d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d907      	bls.n	80043ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0a7      	b.n	800453e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2203      	movs	r2, #3
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a4c      	ldr	r2, [pc, #304]	; (8004548 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	4a4b      	ldr	r2, [pc, #300]	; (800454c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004420:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2200      	movs	r2, #0
 8004428:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3380      	adds	r3, #128	; 0x80
 8004458:	4619      	mov	r1, r3
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	025b      	lsls	r3, r3, #9
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	f7fd fe49 	bl	80020f8 <HAL_DMA_Start_IT>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d017      	beq.n	800449c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800447a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e050      	b.n	800453e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800449c:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d002      	beq.n	80044b0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	025b      	lsls	r3, r3, #9
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
 80044b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	025b      	lsls	r3, r3, #9
 80044ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80044bc:	2390      	movs	r3, #144	; 0x90
 80044be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80044c0:	2302      	movs	r3, #2
 80044c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f107 0210 	add.w	r2, r7, #16
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ffe3 	bl	80054a2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d90a      	bls.n	80044f8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2282      	movs	r2, #130	; 0x82
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f847 	bl	8005582 <SDMMC_CmdReadMultiBlock>
 80044f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80044f6:	e009      	b.n	800450c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2281      	movs	r2, #129	; 0x81
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f81a 	bl	800553e <SDMMC_CmdReadSingleBlock>
 800450a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d012      	beq.n	8004538 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e002      	b.n	800453e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3730      	adds	r7, #48	; 0x30
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	08004c77 	.word	0x08004c77
 800454c:	08004ce9 	.word	0x08004ce9
 8004550:	004005ff 	.word	0x004005ff
 8004554:	4225858c 	.word	0x4225858c

08004558 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08c      	sub	sp, #48	; 0x30
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0c5      	b.n	800470c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 80be 	bne.w	800470a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	441a      	add	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459e:	429a      	cmp	r2, r3
 80045a0:	d907      	bls.n	80045b2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0ac      	b.n	800470c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2203      	movs	r2, #3
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	4a4e      	ldr	r2, [pc, #312]	; (8004714 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80045dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	4a4d      	ldr	r2, [pc, #308]	; (8004718 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80045e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	2200      	movs	r2, #0
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d002      	beq.n	80045fc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	025b      	lsls	r3, r3, #9
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d90a      	bls.n	8004618 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	22a0      	movs	r2, #160	; 0xa0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fffb 	bl	800560a <SDMMC_CmdWriteMultiBlock>
 8004614:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004616:	e009      	b.n	800462c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2290      	movs	r2, #144	; 0x90
 800461c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004624:	4618      	mov	r0, r3
 8004626:	f000 ffce 	bl	80055c6 <SDMMC_CmdWriteSingleBlock>
 800462a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d012      	beq.n	8004658 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a39      	ldr	r2, [pc, #228]	; (800471c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e059      	b.n	800470c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3380      	adds	r3, #128	; 0x80
 800468e:	461a      	mov	r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	025b      	lsls	r3, r3, #9
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	f7fd fd2f 	bl	80020f8 <HAL_DMA_Start_IT>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01c      	beq.n	80046da <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80046ae:	f023 0302 	bic.w	r3, r3, #2
 80046b2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e018      	b.n	800470c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	025b      	lsls	r3, r3, #9
 80046e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80046e6:	2390      	movs	r3, #144	; 0x90
 80046e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f107 0210 	add.w	r2, r7, #16
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fece 	bl	80054a2 <SDIO_ConfigData>

      return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3730      	adds	r7, #48	; 0x30
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08004c4d 	.word	0x08004c4d
 8004718:	08004ce9 	.word	0x08004ce9
 800471c:	004005ff 	.word	0x004005ff
 8004720:	4225858c 	.word	0x4225858c

08004724 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004746:	0f9b      	lsrs	r3, r3, #30
 8004748:	b2da      	uxtb	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004752:	0e9b      	lsrs	r3, r3, #26
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	b2da      	uxtb	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004764:	0e1b      	lsrs	r3, r3, #24
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	b2da      	uxtb	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	b2da      	uxtb	r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b2da      	uxtb	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478e:	b2da      	uxtb	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004798:	0d1b      	lsrs	r3, r3, #20
 800479a:	b29a      	uxth	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b6:	0bdb      	lsrs	r3, r3, #15
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c8:	0b9b      	lsrs	r3, r3, #14
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ec:	0b1b      	lsrs	r3, r3, #12
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	2b00      	cmp	r3, #0
 8004806:	d163      	bne.n	80048d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800480c:	009a      	lsls	r2, r3, #2
 800480e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004818:	0f92      	lsrs	r2, r2, #30
 800481a:	431a      	orrs	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004824:	0edb      	lsrs	r3, r3, #27
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	b2da      	uxtb	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	b2da      	uxtb	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004848:	0d5b      	lsrs	r3, r3, #21
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	b2da      	uxtb	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485a:	0c9b      	lsrs	r3, r3, #18
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	b2da      	uxtb	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486c:	0bdb      	lsrs	r3, r3, #15
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	b2da      	uxtb	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	7e1b      	ldrb	r3, [r3, #24]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	3302      	adds	r3, #2
 8004890:	2201      	movs	r2, #1
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800489a:	fb03 f202 	mul.w	r2, r3, r2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	7a1b      	ldrb	r3, [r3, #8]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80048bc:	0a52      	lsrs	r2, r2, #9
 80048be:	fb03 f202 	mul.w	r2, r3, r2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60
 80048ce:	e031      	b.n	8004934 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d11d      	bne.n	8004914 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e6:	0c1b      	lsrs	r3, r3, #16
 80048e8:	431a      	orrs	r2, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	3301      	adds	r3, #1
 80048f4:	029a      	lsls	r2, r3, #10
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004908:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
 8004912:	e00f      	b.n	8004934 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_SD_GetCardCSD+0x344>)
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e09d      	b.n	8004a70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004938:	0b9b      	lsrs	r3, r3, #14
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	09db      	lsrs	r3, r3, #7
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004952:	b2da      	uxtb	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004962:	b2da      	uxtb	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	0fdb      	lsrs	r3, r3, #31
 800496e:	b2da      	uxtb	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	0f5b      	lsrs	r3, r3, #29
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	b2da      	uxtb	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	0e9b      	lsrs	r3, r3, #26
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	b2da      	uxtb	r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	0d9b      	lsrs	r3, r3, #22
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	0d5b      	lsrs	r3, r3, #21
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	0bdb      	lsrs	r3, r3, #15
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	0b9b      	lsrs	r3, r3, #14
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	0b5b      	lsrs	r3, r3, #13
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	0b1b      	lsrs	r3, r3, #12
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	004005ff 	.word	0x004005ff

08004a80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af04      	add	r7, sp, #16
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2203      	movs	r2, #3
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d02e      	beq.n	8004b56 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d106      	bne.n	8004b0e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b0c:	e029      	b.n	8004b62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d10a      	bne.n	8004b2c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fabc 	bl	8005094 <SD_WideBus_Enable>
 8004b1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
 8004b2a:	e01a      	b.n	8004b62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 faf9 	bl	800512a <SD_WideBus_Disable>
 8004b38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
 8004b46:	e00c      	b.n	8004b62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38
 8004b54:	e005      	b.n	8004b62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b80:	e01f      	b.n	8004bc2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681d      	ldr	r5, [r3, #0]
 8004ba8:	466c      	mov	r4, sp
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004bb6:	f107 0308 	add.w	r3, r7, #8
 8004bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f000 fbd2 	bl	8005366 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fc95 	bl	80054fa <SDMMC_CmdBlockLength>
 8004bd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bdb0      	pop	{r4, r5, r7, pc}
 8004c06:	bf00      	nop
 8004c08:	004005ff 	.word	0x004005ff

08004c0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa10 	bl	8005044 <SD_SendStatus>
 8004c24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	0a5b      	lsrs	r3, r3, #9
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004c42:	693b      	ldr	r3, [r7, #16]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	2b82      	cmp	r3, #130	; 0x82
 8004c8a:	d111      	bne.n	8004cb0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fcdd 	bl	8005650 <SDMMC_CmdStopTransfer>
 8004c96:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff fd3a 	bl	8004724 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0208 	bic.w	r2, r2, #8
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f001 f939 	bl	8005f50 <HAL_SD_RxCpltCallback>
#endif
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd fbe0 	bl	80024bc <HAL_DMA_GetError>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d03e      	beq.n	8004d80 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d08:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d002      	beq.n	8004d1e <SD_DMAError+0x36>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d12d      	bne.n	8004d7a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <SD_DMAError+0xa0>)
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004d42:	6978      	ldr	r0, [r7, #20]
 8004d44:	f7ff ff62 	bl	8004c0c <HAL_SD_GetCardState>
 8004d48:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d002      	beq.n	8004d56 <SD_DMAError+0x6e>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	d10a      	bne.n	8004d6c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fc78 	bl	8005650 <SDMMC_CmdStopTransfer>
 8004d60:	4602      	mov	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	431a      	orrs	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004d7a:	6978      	ldr	r0, [r7, #20]
 8004d7c:	f7ff fcd2 	bl	8004724 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004d80:	bf00      	nop
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	004005ff 	.word	0x004005ff

08004d8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004d8c:	b5b0      	push	{r4, r5, r7, lr}
 8004d8e:	b094      	sub	sp, #80	; 0x50
 8004d90:	af04      	add	r7, sp, #16
 8004d92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004d94:	2301      	movs	r3, #1
 8004d96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fb28 	bl	80053f2 <SDIO_GetPowerState>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004da8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004dac:	e0b8      	b.n	8004f20 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d02f      	beq.n	8004e16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fd52 	bl	8005864 <SDMMC_CmdSendCID>
 8004dc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <SD_InitCard+0x40>
    {
      return errorstate;
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dca:	e0a9      	b.n	8004f20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fb52 	bl	800547c <SDIO_GetResponse>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2104      	movs	r1, #4
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fb49 	bl	800547c <SDIO_GetResponse>
 8004dea:	4602      	mov	r2, r0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2108      	movs	r1, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fb40 	bl	800547c <SDIO_GetResponse>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	210c      	movs	r1, #12
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fb37 	bl	800547c <SDIO_GetResponse>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d00d      	beq.n	8004e3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f107 020e 	add.w	r2, r7, #14
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fd58 	bl	80058de <SDMMC_CmdSetRelAdd>
 8004e2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <SD_InitCard+0xae>
    {
      return errorstate;
 8004e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e38:	e072      	b.n	8004f20 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d036      	beq.n	8004eb0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 fd22 	bl	80058a0 <SDMMC_CmdSendCSD>
 8004e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	e05b      	b.n	8004f20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fb04 	bl	800547c <SDIO_GetResponse>
 8004e74:	4602      	mov	r2, r0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2104      	movs	r1, #4
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fafb 	bl	800547c <SDIO_GetResponse>
 8004e86:	4602      	mov	r2, r0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2108      	movs	r1, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 faf2 	bl	800547c <SDIO_GetResponse>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	210c      	movs	r1, #12
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fae9 	bl	800547c <SDIO_GetResponse>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fae0 	bl	800547c <SDIO_GetResponse>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	0d1a      	lsrs	r2, r3, #20
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fc34 	bl	8004738 <HAL_SD_GetCardCSD>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ed6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004eda:	e021      	b.n	8004f20 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6819      	ldr	r1, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee4:	041b      	lsls	r3, r3, #16
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	461c      	mov	r4, r3
 8004eea:	4615      	mov	r5, r2
 8004eec:	4622      	mov	r2, r4
 8004eee:	462b      	mov	r3, r5
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	f000 fbcf 	bl	8005694 <SDMMC_CmdSelDesel>
 8004ef6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <SD_InitCard+0x176>
  {
    return errorstate;
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f00:	e00e      	b.n	8004f20 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681d      	ldr	r5, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	466c      	mov	r4, sp
 8004f0a:	f103 0210 	add.w	r2, r3, #16
 8004f0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f14:	3304      	adds	r3, #4
 8004f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f000 fa24 	bl	8005366 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3740      	adds	r7, #64	; 0x40
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bdb0      	pop	{r4, r5, r7, pc}

08004f28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fbca 	bl	80056da <SDMMC_CmdGoIdleState>
 8004f46:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	e072      	b.n	8005038 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fbdd 	bl	8005716 <SDMMC_CmdOperCond>
 8004f5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00d      	beq.n	8004f80 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fbb3 	bl	80056da <SDMMC_CmdGoIdleState>
 8004f74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	e05b      	b.n	8005038 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d137      	bne.n	8004ffe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fbdd 	bl	8005754 <SDMMC_CmdAppCommand>
 8004f9a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d02d      	beq.n	8004ffe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fa6:	e047      	b.n	8005038 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fbd0 	bl	8005754 <SDMMC_CmdAppCommand>
 8004fb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <SD_PowerON+0x98>
    {
      return errorstate;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	e03b      	b.n	8005038 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	491e      	ldr	r1, [pc, #120]	; (8005040 <SD_PowerON+0x118>)
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fbe6 	bl	8005798 <SDMMC_CmdAppOperCommand>
 8004fcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fd8:	e02e      	b.n	8005038 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fa4b 	bl	800547c <SDIO_GetResponse>
 8004fe6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	0fdb      	lsrs	r3, r3, #31
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <SD_PowerON+0xcc>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <SD_PowerON+0xce>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]

    count++;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005004:	4293      	cmp	r3, r2
 8005006:	d802      	bhi.n	800500e <SD_PowerON+0xe6>
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0cc      	beq.n	8004fa8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005014:	4293      	cmp	r3, r2
 8005016:	d902      	bls.n	800501e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800501c:	e00c      	b.n	8005038 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
 800502e:	e002      	b.n	8005036 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	c1100000 	.word	0xc1100000

08005044 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005054:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005058:	e018      	b.n	800508c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fc5a 	bl	8005920 <SDMMC_CmdSendStatus>
 800506c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	e009      	b.n	800508c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f9fc 	bl	800547c <SDIO_GetResponse>
 8005084:	4602      	mov	r2, r0
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f9e6 	bl	800547c <SDIO_GetResponse>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ba:	d102      	bne.n	80050c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050c0:	e02f      	b.n	8005122 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80050c2:	f107 030c 	add.w	r3, r7, #12
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f879 	bl	80051c0 <SD_FindSCR>
 80050ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	e023      	b.n	8005122 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01c      	beq.n	800511e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 fb2f 	bl	8005754 <SDMMC_CmdAppCommand>
 80050f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	e00f      	b.n	8005122 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fb68 	bl	80057de <SDMMC_CmdBusWidth>
 800510e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	e003      	b.n	8005122 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800511a:	2300      	movs	r3, #0
 800511c:	e001      	b.n	8005122 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800511e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f99b 	bl	800547c <SDIO_GetResponse>
 8005146:	4603      	mov	r3, r0
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005150:	d102      	bne.n	8005158 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005156:	e02f      	b.n	80051b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f82e 	bl	80051c0 <SD_FindSCR>
 8005164:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	e023      	b.n	80051b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01c      	beq.n	80051b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f000 fae4 	bl	8005754 <SDMMC_CmdAppCommand>
 800518c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	e00f      	b.n	80051b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fb1d 	bl	80057de <SDMMC_CmdBusWidth>
 80051a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	e003      	b.n	80051b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e001      	b.n	80051b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b08f      	sub	sp, #60	; 0x3c
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051ca:	f7fc fda5 	bl	8001d18 <HAL_GetTick>
 80051ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2108      	movs	r1, #8
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f987 	bl	80054fa <SDMMC_CmdBlockLength>
 80051ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	e0b2      	b.n	800535e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 faa5 	bl	8005754 <SDMMC_CmdAppCommand>
 800520a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	e0a3      	b.n	800535e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005216:	f04f 33ff 	mov.w	r3, #4294967295
 800521a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800521c:	2308      	movs	r3, #8
 800521e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005220:	2330      	movs	r3, #48	; 0x30
 8005222:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005224:	2302      	movs	r3, #2
 8005226:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005228:	2300      	movs	r3, #0
 800522a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800522c:	2301      	movs	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f107 0210 	add.w	r2, r7, #16
 8005238:	4611      	mov	r1, r2
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f931 	bl	80054a2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 faec 	bl	8005822 <SDMMC_CmdSendSCR>
 800524a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d02a      	beq.n	80052a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	e083      	b.n	800535e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6819      	ldr	r1, [r3, #0]
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	f107 0208 	add.w	r2, r7, #8
 8005270:	18d4      	adds	r4, r2, r3
 8005272:	4608      	mov	r0, r1
 8005274:	f000 f8a2 	bl	80053bc <SDIO_ReadFIFO>
 8005278:	4603      	mov	r3, r0
 800527a:	6023      	str	r3, [r4, #0]
      index++;
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	3301      	adds	r3, #1
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	e006      	b.n	8005292 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d012      	beq.n	80052b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005292:	f7fc fd41 	bl	8001d18 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d102      	bne.n	80052a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80052a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052a6:	e05a      	b.n	800535e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0cf      	beq.n	8005256 <SD_FindSCR+0x96>
 80052b6:	e000      	b.n	80052ba <SD_FindSCR+0xfa>
      break;
 80052b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2208      	movs	r2, #8
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80052d0:	2308      	movs	r3, #8
 80052d2:	e044      	b.n	800535e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2202      	movs	r2, #2
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80052ea:	2302      	movs	r3, #2
 80052ec:	e037      	b.n	800535e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2220      	movs	r2, #32
 8005302:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005304:	2320      	movs	r3, #32
 8005306:	e02a      	b.n	800535e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005310:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	061a      	lsls	r2, r3, #24
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800531e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005328:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	0e1b      	lsrs	r3, r3, #24
 800532e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	601a      	str	r2, [r3, #0]
    scr++;
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	3304      	adds	r3, #4
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	061a      	lsls	r2, r3, #24
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005346:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005350:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	0e1b      	lsrs	r3, r3, #24
 8005356:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	373c      	adds	r7, #60	; 0x3c
 8005362:	46bd      	mov	sp, r7
 8005364:	bd90      	pop	{r4, r7, pc}

08005366 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005366:	b084      	sub	sp, #16
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	f107 001c 	add.w	r0, r7, #28
 8005374:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800537c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800537e:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005380:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005384:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005388:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800538c:	431a      	orrs	r2, r3
             Init.ClockDiv
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005390:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80053a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	b004      	add	sp, #16
 80053ba:	4770      	bx	lr

080053bc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2203      	movs	r2, #3
 80053e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0303 	and.w	r3, r3, #3
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800542c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005432:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005438:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005448:	f023 030f 	bic.w	r3, r3, #15
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	b2db      	uxtb	r3, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3314      	adds	r3, #20
 800548a:	461a      	mov	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4413      	add	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
}  
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054c8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80054ce:	431a      	orrs	r2, r3
                       Data->DPSM);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80054d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0

}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005508:	2310      	movs	r3, #16
 800550a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff74 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	2110      	movs	r1, #16
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa19 	bl	8005964 <SDMMC_GetCmdResp1>
 8005532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005534:	69fb      	ldr	r3, [r7, #28]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800554c:	2311      	movs	r3, #17
 800554e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff52 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	2111      	movs	r1, #17
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f9f7 	bl	8005964 <SDMMC_GetCmdResp1>
 8005576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005578:	69fb      	ldr	r3, [r7, #28]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005590:	2312      	movs	r3, #18
 8005592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800559c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055a2:	f107 0308 	add.w	r3, r7, #8
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff30 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	2112      	movs	r1, #18
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f9d5 	bl	8005964 <SDMMC_GetCmdResp1>
 80055ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055bc:	69fb      	ldr	r3, [r7, #28]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80055d4:	2318      	movs	r3, #24
 80055d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff0e 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	2118      	movs	r1, #24
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f9b3 	bl	8005964 <SDMMC_GetCmdResp1>
 80055fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005600:	69fb      	ldr	r3, [r7, #28]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b088      	sub	sp, #32
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005618:	2319      	movs	r3, #25
 800561a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff feec 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	2119      	movs	r1, #25
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f991 	bl	8005964 <SDMMC_GetCmdResp1>
 8005642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005644:	69fb      	ldr	r3, [r7, #28]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800565c:	230c      	movs	r3, #12
 800565e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800566e:	f107 0308 	add.w	r3, r7, #8
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff feca 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <SDMMC_CmdStopTransfer+0x40>)
 800567c:	210c      	movs	r1, #12
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f970 	bl	8005964 <SDMMC_GetCmdResp1>
 8005684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	05f5e100 	.word	0x05f5e100

08005694 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80056a4:	2307      	movs	r3, #7
 80056a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056a8:	2340      	movs	r3, #64	; 0x40
 80056aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056b6:	f107 0310 	add.w	r3, r7, #16
 80056ba:	4619      	mov	r1, r3
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff fea6 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80056c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c6:	2107      	movs	r1, #7
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f94b 	bl	8005964 <SDMMC_GetCmdResp1>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3728      	adds	r7, #40	; 0x28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b088      	sub	sp, #32
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056f8:	f107 0308 	add.w	r3, r7, #8
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fe85 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fb65 	bl	8005dd4 <SDMMC_GetCmdError>
 800570a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800570c:	69fb      	ldr	r3, [r7, #28]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b088      	sub	sp, #32
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800571e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005724:	2308      	movs	r3, #8
 8005726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005728:	2340      	movs	r3, #64	; 0x40
 800572a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005734:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005736:	f107 0308 	add.w	r3, r7, #8
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fe66 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 faf8 	bl	8005d38 <SDMMC_GetCmdResp7>
 8005748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800574a:	69fb      	ldr	r3, [r7, #28]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005762:	2337      	movs	r3, #55	; 0x37
 8005764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800576e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005772:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005774:	f107 0308 	add.w	r3, r7, #8
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff fe47 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005780:	f241 3288 	movw	r2, #5000	; 0x1388
 8005784:	2137      	movs	r1, #55	; 0x37
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8ec 	bl	8005964 <SDMMC_GetCmdResp1>
 800578c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800578e:	69fb      	ldr	r3, [r7, #28]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80057ae:	2329      	movs	r3, #41	; 0x29
 80057b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057c0:	f107 0308 	add.w	r3, r7, #8
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fe21 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f9ff 	bl	8005bd0 <SDMMC_GetCmdResp3>
 80057d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057d4:	69fb      	ldr	r3, [r7, #28]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b088      	sub	sp, #32
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80057ec:	2306      	movs	r3, #6
 80057ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057f0:	2340      	movs	r3, #64	; 0x40
 80057f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057fe:	f107 0308 	add.w	r3, r7, #8
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fe02 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	2106      	movs	r1, #6
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8a7 	bl	8005964 <SDMMC_GetCmdResp1>
 8005816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005818:	69fb      	ldr	r3, [r7, #28]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b088      	sub	sp, #32
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800582e:	2333      	movs	r3, #51	; 0x33
 8005830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005832:	2340      	movs	r3, #64	; 0x40
 8005834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800583a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800583e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005840:	f107 0308 	add.w	r3, r7, #8
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fde1 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800584c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005850:	2133      	movs	r1, #51	; 0x33
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f886 	bl	8005964 <SDMMC_GetCmdResp1>
 8005858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800585a:	69fb      	ldr	r3, [r7, #28]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005870:	2302      	movs	r3, #2
 8005872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005874:	23c0      	movs	r3, #192	; 0xc0
 8005876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800587c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005880:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005882:	f107 0308 	add.w	r3, r7, #8
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fdc0 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f956 	bl	8005b40 <SDMMC_GetCmdResp2>
 8005894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005896:	69fb      	ldr	r3, [r7, #28]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80058ae:	2309      	movs	r3, #9
 80058b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80058b2:	23c0      	movs	r3, #192	; 0xc0
 80058b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fda1 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f937 	bl	8005b40 <SDMMC_GetCmdResp2>
 80058d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058d4:	69fb      	ldr	r3, [r7, #28]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b088      	sub	sp, #32
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80058ec:	2303      	movs	r3, #3
 80058ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058f0:	2340      	movs	r3, #64	; 0x40
 80058f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fd82 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	2103      	movs	r1, #3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f99c 	bl	8005c4c <SDMMC_GetCmdResp6>
 8005914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005916:	69fb      	ldr	r3, [r7, #28]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800592e:	230d      	movs	r3, #13
 8005930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005932:	2340      	movs	r3, #64	; 0x40
 8005934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800593a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005940:	f107 0308 	add.w	r3, r7, #8
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fd61 	bl	800540e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	210d      	movs	r1, #13
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f806 	bl	8005964 <SDMMC_GetCmdResp1>
 8005958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800595a:	69fb      	ldr	r3, [r7, #28]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	460b      	mov	r3, r1
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005972:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <SDMMC_GetCmdResp1+0x1d0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a70      	ldr	r2, [pc, #448]	; (8005b38 <SDMMC_GetCmdResp1+0x1d4>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	0a5a      	lsrs	r2, r3, #9
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	61fa      	str	r2, [r7, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005994:	e0c9      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ef      	beq.n	8005986 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ea      	bne.n	8005986 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2204      	movs	r2, #4
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059c2:	2304      	movs	r3, #4
 80059c4:	e0b1      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0a6      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	22c5      	movs	r2, #197	; 0xc5
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fd3d 	bl	8005462 <SDIO_GetCommandResponse>
 80059e8:	4603      	mov	r3, r0
 80059ea:	461a      	mov	r2, r3
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d001      	beq.n	80059f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e099      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80059f6:	2100      	movs	r1, #0
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff fd3f 	bl	800547c <SDIO_GetResponse>
 80059fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4b4e      	ldr	r3, [pc, #312]	; (8005b3c <SDMMC_GetCmdResp1+0x1d8>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e08d      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da02      	bge.n	8005a1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a18:	e087      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	e080      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	e079      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a44:	e071      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a54:	e069      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a64:	e061      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a74:	e059      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a84:	e051      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a94:	e049      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005aa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aa4:	e041      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab4:	e039      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ac4:	e031      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005ad0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ad4:	e029      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005ae0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ae4:	e021      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005af0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005af4:	e019      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b04:	e011      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b14:	e009      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b24:	e001      	b.n	8005b2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3720      	adds	r7, #32
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000000 	.word	0x20000000
 8005b38:	10624dd3 	.word	0x10624dd3
 8005b3c:	fdffe008 	.word	0xfdffe008

08005b40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b48:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <SDMMC_GetCmdResp2+0x88>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <SDMMC_GetCmdResp2+0x8c>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	0a5b      	lsrs	r3, r3, #9
 8005b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1e5a      	subs	r2, r3, #1
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b6c:	e026      	b.n	8005bbc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ef      	beq.n	8005b5e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ea      	bne.n	8005b5e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	e00e      	b.n	8005bbc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e003      	b.n	8005bbc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	22c5      	movs	r2, #197	; 0xc5
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3

08005bd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <SDMMC_GetCmdResp3+0x74>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <SDMMC_GetCmdResp3+0x78>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	0a5b      	lsrs	r3, r3, #9
 8005be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1e5a      	subs	r2, r3, #1
 8005bf2:	60fa      	str	r2, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d102      	bne.n	8005bfe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bfc:	e01b      	b.n	8005c36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ef      	beq.n	8005bee <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ea      	bne.n	8005bee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2204      	movs	r2, #4
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	e003      	b.n	8005c36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	22c5      	movs	r2, #197	; 0xc5
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000000 	.word	0x20000000
 8005c48:	10624dd3 	.word	0x10624dd3

08005c4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	460b      	mov	r3, r1
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c5a:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <SDMMC_GetCmdResp6+0xe4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a35      	ldr	r2, [pc, #212]	; (8005d34 <SDMMC_GetCmdResp6+0xe8>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	0a5b      	lsrs	r3, r3, #9
 8005c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6a:	fb02 f303 	mul.w	r3, r2, r3
 8005c6e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	61fa      	str	r2, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c7e:	e052      	b.n	8005d26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c84:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0ef      	beq.n	8005c70 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1ea      	bne.n	8005c70 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cac:	2304      	movs	r3, #4
 8005cae:	e03a      	b.n	8005d26 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e02f      	b.n	8005d26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff fbcb 	bl	8005462 <SDIO_GetCommandResponse>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	7afb      	ldrb	r3, [r7, #11]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d001      	beq.n	8005cda <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e025      	b.n	8005d26 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	22c5      	movs	r2, #197	; 0xc5
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fbca 	bl	800547c <SDIO_GetResponse>
 8005ce8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e011      	b.n	8005d26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d10:	e009      	b.n	8005d26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d20:	e001      	b.n	8005d26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000000 	.word	0x20000000
 8005d34:	10624dd3 	.word	0x10624dd3

08005d38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d40:	4b22      	ldr	r3, [pc, #136]	; (8005dcc <SDMMC_GetCmdResp7+0x94>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a22      	ldr	r2, [pc, #136]	; (8005dd0 <SDMMC_GetCmdResp7+0x98>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	0a5b      	lsrs	r3, r3, #9
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	fb02 f303 	mul.w	r3, r2, r3
 8005d54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1e5a      	subs	r2, r3, #1
 8005d5a:	60fa      	str	r2, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d64:	e02c      	b.n	8005dc0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0ef      	beq.n	8005d56 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1ea      	bne.n	8005d56 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d92:	2304      	movs	r3, #4
 8005d94:	e014      	b.n	8005dc0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e009      	b.n	8005dc0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2240      	movs	r2, #64	; 0x40
 8005dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005dbe:	2300      	movs	r3, #0
  
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	20000000 	.word	0x20000000
 8005dd0:	10624dd3 	.word	0x10624dd3

08005dd4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <SDMMC_GetCmdError+0x50>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <SDMMC_GetCmdError+0x54>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0a5b      	lsrs	r3, r3, #9
 8005de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	60fa      	str	r2, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e00:	e009      	b.n	8005e16 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f1      	beq.n	8005df2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	22c5      	movs	r2, #197	; 0xc5
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000000 	.word	0x20000000
 8005e28:	10624dd3 	.word	0x10624dd3

08005e2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e30:	4904      	ldr	r1, [pc, #16]	; (8005e44 <MX_FATFS_Init+0x18>)
 8005e32:	4805      	ldr	r0, [pc, #20]	; (8005e48 <MX_FATFS_Init+0x1c>)
 8005e34:	f003 f926 	bl	8009084 <FATFS_LinkDriver>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <MX_FATFS_Init+0x20>)
 8005e3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20002380 	.word	0x20002380
 8005e48:	0800e5c8 	.word	0x0800e5c8
 8005e4c:	2000237c 	.word	0x2000237c

08005e50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e6a:	f000 f87b 	bl	8005f64 <BSP_SD_IsDetected>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d001      	beq.n	8005e78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e012      	b.n	8005e9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005e78:	480b      	ldr	r0, [pc, #44]	; (8005ea8 <BSP_SD_Init+0x48>)
 8005e7a:	f7fe f9db 	bl	8004234 <HAL_SD_Init>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005e88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e8c:	4806      	ldr	r0, [pc, #24]	; (8005ea8 <BSP_SD_Init+0x48>)
 8005e8e:	f7fe fe23 	bl	8004ad8 <HAL_SD_ConfigWideBusOperation>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20002164 	.word	0x20002164

08005eac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	4806      	ldr	r0, [pc, #24]	; (8005edc <BSP_SD_ReadBlocks_DMA+0x30>)
 8005ec4:	f7fe fa66 	bl	8004394 <HAL_SD_ReadBlocks_DMA>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20002164 	.word	0x20002164

08005ee0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	68f9      	ldr	r1, [r7, #12]
 8005ef6:	4806      	ldr	r0, [pc, #24]	; (8005f10 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005ef8:	f7fe fb2e 	bl	8004558 <HAL_SD_WriteBlocks_DMA>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20002164 	.word	0x20002164

08005f14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f18:	4805      	ldr	r0, [pc, #20]	; (8005f30 <BSP_SD_GetCardState+0x1c>)
 8005f1a:	f7fe fe77 	bl	8004c0c <HAL_SD_GetCardState>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20002164 	.word	0x20002164

08005f34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	4803      	ldr	r0, [pc, #12]	; (8005f4c <BSP_SD_GetCardInfo+0x18>)
 8005f40:	f7fe fd9e 	bl	8004a80 <HAL_SD_GetCardInfo>
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20002164 	.word	0x20002164

08005f50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005f58:	f000 f986 	bl	8006268 <BSP_SD_ReadCpltCallback>
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	b2db      	uxtb	r3, r3
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005f86:	f003 fa51 	bl	800942c <osKernelGetTickCount>
 8005f8a:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005f8c:	e006      	b.n	8005f9c <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f8e:	f7ff ffc1 	bl	8005f14 <BSP_SD_GetCardState>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e009      	b.n	8005fb0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005f9c:	f003 fa46 	bl	800942c <osKernelGetTickCount>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d8f0      	bhi.n	8005f8e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <SD_CheckStatus+0x38>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005fc8:	f7ff ffa4 	bl	8005f14 <BSP_SD_GetCardState>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d107      	bne.n	8005fe2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <SD_CheckStatus+0x38>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <SD_CheckStatus+0x38>)
 8005fe0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005fe2:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <SD_CheckStatus+0x38>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b2db      	uxtb	r3, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000061 	.word	0x20000061

08005ff4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005ffe:	4b1c      	ldr	r3, [pc, #112]	; (8006070 <SD_initialize+0x7c>)
 8006000:	2201      	movs	r2, #1
 8006002:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006004:	f003 f9ca 	bl	800939c <osKernelGetState>
 8006008:	4603      	mov	r3, r0
 800600a:	2b02      	cmp	r3, #2
 800600c:	d129      	bne.n	8006062 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800600e:	f7ff ff27 	bl	8005e60 <BSP_SD_Init>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d107      	bne.n	8006028 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff ffcc 	bl	8005fb8 <SD_CheckStatus>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	4b12      	ldr	r3, [pc, #72]	; (8006070 <SD_initialize+0x7c>)
 8006026:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006028:	4b11      	ldr	r3, [pc, #68]	; (8006070 <SD_initialize+0x7c>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d017      	beq.n	8006062 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <SD_initialize+0x80>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d107      	bne.n	800604a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800603a:	2200      	movs	r2, #0
 800603c:	2102      	movs	r1, #2
 800603e:	200a      	movs	r0, #10
 8006040:	f003 fbfa 	bl	8009838 <osMessageQueueNew>
 8006044:	4603      	mov	r3, r0
 8006046:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <SD_initialize+0x80>)
 8006048:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800604a:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <SD_initialize+0x80>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <SD_initialize+0x7c>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	b2da      	uxtb	r2, r3
 800605e:	4b04      	ldr	r3, [pc, #16]	; (8006070 <SD_initialize+0x7c>)
 8006060:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006062:	4b03      	ldr	r3, [pc, #12]	; (8006070 <SD_initialize+0x7c>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b2db      	uxtb	r3, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000061 	.word	0x20000061
 8006074:	20002384 	.word	0x20002384

08006078 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff ff97 	bl	8005fb8 <SD_CheckStatus>
 800608a:	4603      	mov	r3, r0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4603      	mov	r3, r0
 80060a2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060a8:	f247 5030 	movw	r0, #30000	; 0x7530
 80060ac:	f7ff ff67 	bl	8005f7e <SD_CheckStatusWithTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da01      	bge.n	80060ba <SD_read+0x26>
  {
    return res;
 80060b6:	7ffb      	ldrb	r3, [r7, #31]
 80060b8:	e02f      	b.n	800611a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	68b8      	ldr	r0, [r7, #8]
 80060c0:	f7ff fef4 	bl	8005eac <BSP_SD_ReadBlocks_DMA>
 80060c4:	4603      	mov	r3, r0
 80060c6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80060c8:	7fbb      	ldrb	r3, [r7, #30]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d124      	bne.n	8006118 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80060ce:	4b15      	ldr	r3, [pc, #84]	; (8006124 <SD_read+0x90>)
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	f107 0112 	add.w	r1, r7, #18
 80060d6:	f247 5330 	movw	r3, #30000	; 0x7530
 80060da:	2200      	movs	r2, #0
 80060dc:	f003 fc80 	bl	80099e0 <osMessageQueueGet>
 80060e0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d117      	bne.n	8006118 <SD_read+0x84>
 80060e8:	8a7b      	ldrh	r3, [r7, #18]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d114      	bne.n	8006118 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80060ee:	f003 f99d 	bl	800942c <osKernelGetTickCount>
 80060f2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80060f4:	e007      	b.n	8006106 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80060f6:	f7ff ff0d 	bl	8005f14 <BSP_SD_GetCardState>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <SD_read+0x72>
              {
                res = RES_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006104:	e008      	b.n	8006118 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006106:	f003 f991 	bl	800942c <osKernelGetTickCount>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f247 522f 	movw	r2, #29999	; 0x752f
 8006114:	4293      	cmp	r3, r2
 8006116:	d9ee      	bls.n	80060f6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006118:	7ffb      	ldrb	r3, [r7, #31]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20002384 	.word	0x20002384

08006128 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800613c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006140:	f7ff ff1d 	bl	8005f7e <SD_CheckStatusWithTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	da01      	bge.n	800614e <SD_write+0x26>
  {
    return res;
 800614a:	7ffb      	ldrb	r3, [r7, #31]
 800614c:	e02d      	b.n	80061aa <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	68b8      	ldr	r0, [r7, #8]
 8006154:	f7ff fec4 	bl	8005ee0 <BSP_SD_WriteBlocks_DMA>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d124      	bne.n	80061a8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <SD_write+0x8c>)
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	f107 0112 	add.w	r1, r7, #18
 8006166:	f247 5330 	movw	r3, #30000	; 0x7530
 800616a:	2200      	movs	r2, #0
 800616c:	f003 fc38 	bl	80099e0 <osMessageQueueGet>
 8006170:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d117      	bne.n	80061a8 <SD_write+0x80>
 8006178:	8a7b      	ldrh	r3, [r7, #18]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d114      	bne.n	80061a8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800617e:	f003 f955 	bl	800942c <osKernelGetTickCount>
 8006182:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006184:	e007      	b.n	8006196 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006186:	f7ff fec5 	bl	8005f14 <BSP_SD_GetCardState>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <SD_write+0x6e>
          {
            res = RES_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	77fb      	strb	r3, [r7, #31]
            break;
 8006194:	e008      	b.n	80061a8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006196:	f003 f949 	bl	800942c <osKernelGetTickCount>
 800619a:	4602      	mov	r2, r0
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d9ee      	bls.n	8006186 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80061a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20002384 	.word	0x20002384

080061b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	; 0x30
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	603a      	str	r2, [r7, #0]
 80061c2:	71fb      	strb	r3, [r7, #7]
 80061c4:	460b      	mov	r3, r1
 80061c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80061ce:	4b25      	ldr	r3, [pc, #148]	; (8006264 <SD_ioctl+0xac>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <SD_ioctl+0x28>
 80061dc:	2303      	movs	r3, #3
 80061de:	e03c      	b.n	800625a <SD_ioctl+0xa2>

  switch (cmd)
 80061e0:	79bb      	ldrb	r3, [r7, #6]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d834      	bhi.n	8006250 <SD_ioctl+0x98>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <SD_ioctl+0x34>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	08006205 	.word	0x08006205
 80061f4:	0800621d 	.word	0x0800621d
 80061f8:	08006237 	.word	0x08006237
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006202:	e028      	b.n	8006256 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006204:	f107 030c 	add.w	r3, r7, #12
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fe93 	bl	8005f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800620e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800621a:	e01c      	b.n	8006256 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800621c:	f107 030c 	add.w	r3, r7, #12
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fe87 	bl	8005f34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	b29a      	uxth	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006234:	e00f      	b.n	8006256 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006236:	f107 030c 	add.w	r3, r7, #12
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fe7a 	bl	8005f34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	0a5a      	lsrs	r2, r3, #9
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800624e:	e002      	b.n	8006256 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006250:	2304      	movs	r3, #4
 8006252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800625a:	4618      	mov	r0, r3
 800625c:	3730      	adds	r7, #48	; 0x30
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000061 	.word	0x20000061

08006268 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800626e:	2301      	movs	r3, #1
 8006270:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <BSP_SD_ReadCpltCallback+0x20>)
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	1db9      	adds	r1, r7, #6
 8006278:	2300      	movs	r3, #0
 800627a:	2200      	movs	r2, #0
 800627c:	f003 fb50 	bl	8009920 <osMessageQueuePut>
#endif
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20002384 	.word	0x20002384

0800628c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	4a08      	ldr	r2, [pc, #32]	; (80062bc <disk_status+0x30>)
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	79fa      	ldrb	r2, [r7, #7]
 80062a4:	4905      	ldr	r1, [pc, #20]	; (80062bc <disk_status+0x30>)
 80062a6:	440a      	add	r2, r1
 80062a8:	7a12      	ldrb	r2, [r2, #8]
 80062aa:	4610      	mov	r0, r2
 80062ac:	4798      	blx	r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	200023b0 	.word	0x200023b0

080062c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <disk_initialize+0x48>)
 80062d2:	5cd3      	ldrb	r3, [r2, r3]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d111      	bne.n	80062fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	4a0b      	ldr	r2, [pc, #44]	; (8006308 <disk_initialize+0x48>)
 80062dc:	2101      	movs	r1, #1
 80062de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <disk_initialize+0x48>)
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	79fa      	ldrb	r2, [r7, #7]
 80062ee:	4906      	ldr	r1, [pc, #24]	; (8006308 <disk_initialize+0x48>)
 80062f0:	440a      	add	r2, r1
 80062f2:	7a12      	ldrb	r2, [r2, #8]
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200023b0 	.word	0x200023b0

0800630c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <disk_read+0x3c>)
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	689c      	ldr	r4, [r3, #8]
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	4a07      	ldr	r2, [pc, #28]	; (8006348 <disk_read+0x3c>)
 800632c:	4413      	add	r3, r2
 800632e:	7a18      	ldrb	r0, [r3, #8]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	47a0      	blx	r4
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]
  return res;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
}
 800633e:	4618      	mov	r0, r3
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}
 8006346:	bf00      	nop
 8006348:	200023b0 	.word	0x200023b0

0800634c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <disk_write+0x3c>)
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68dc      	ldr	r4, [r3, #12]
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	4a07      	ldr	r2, [pc, #28]	; (8006388 <disk_write+0x3c>)
 800636c:	4413      	add	r3, r2
 800636e:	7a18      	ldrb	r0, [r3, #8]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	47a0      	blx	r4
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]
  return res;
 800637c:	7dfb      	ldrb	r3, [r7, #23]
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd90      	pop	{r4, r7, pc}
 8006386:	bf00      	nop
 8006388:	200023b0 	.word	0x200023b0

0800638c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	603a      	str	r2, [r7, #0]
 8006396:	71fb      	strb	r3, [r7, #7]
 8006398:	460b      	mov	r3, r1
 800639a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <disk_ioctl+0x38>)
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	79fa      	ldrb	r2, [r7, #7]
 80063aa:	4906      	ldr	r1, [pc, #24]	; (80063c4 <disk_ioctl+0x38>)
 80063ac:	440a      	add	r2, r1
 80063ae:	7a10      	ldrb	r0, [r2, #8]
 80063b0:	79b9      	ldrb	r1, [r7, #6]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	4798      	blx	r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200023b0 	.word	0x200023b0

080063c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3301      	adds	r3, #1
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063d8:	89fb      	ldrh	r3, [r7, #14]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	b21a      	sxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	b21b      	sxth	r3, r3
 80063e4:	4313      	orrs	r3, r2
 80063e6:	b21b      	sxth	r3, r3
 80063e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063ea:	89fb      	ldrh	r3, [r7, #14]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3303      	adds	r3, #3
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	3202      	adds	r2, #2
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	3201      	adds	r2, #1
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006430:	68fb      	ldr	r3, [r7, #12]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	887a      	ldrh	r2, [r7, #2]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	0a1b      	lsrs	r3, r3, #8
 800645a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	607a      	str	r2, [r7, #4]
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	0a1b      	lsrs	r3, r3, #8
 80064b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00d      	beq.n	8006502 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	1c53      	adds	r3, r2, #1
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	6179      	str	r1, [r7, #20]
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f1      	bne.n	80064e6 <mem_cpy+0x1a>
	}
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	617a      	str	r2, [r7, #20]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3b01      	subs	r3, #1
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f3      	bne.n	800651e <mem_set+0x10>
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	; 0x24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	61fa      	str	r2, [r7, #28]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	4619      	mov	r1, r3
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	61ba      	str	r2, [r7, #24]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	1acb      	subs	r3, r1, r3
 8006570:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	607b      	str	r3, [r7, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <mem_cmp+0x40>
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0eb      	beq.n	800655c <mem_cmp+0x18>

	return r;
 8006584:	697b      	ldr	r3, [r7, #20]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3724      	adds	r7, #36	; 0x24
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800659c:	e002      	b.n	80065a4 <chk_chr+0x12>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3301      	adds	r3, #1
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <chk_chr+0x26>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d1f2      	bne.n	800659e <chk_chr+0xc>
	return *str;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	781b      	ldrb	r3, [r3, #0]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <lock_fs+0x22>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4618      	mov	r0, r3
 80065dc:	f002 fe4f 	bl	800927e <ff_req_grant>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <lock_fs+0x22>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <lock_fs+0x24>
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <unlock_fs+0x2e>
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	2b0c      	cmp	r3, #12
 800660a:	d00a      	beq.n	8006622 <unlock_fs+0x2e>
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	2b0b      	cmp	r3, #11
 8006610:	d007      	beq.n	8006622 <unlock_fs+0x2e>
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	2b0f      	cmp	r3, #15
 8006616:	d004      	beq.n	8006622 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	4618      	mov	r0, r3
 800661e:	f002 fe43 	bl	80092a8 <ff_rel_grant>
	}
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006636:	2300      	movs	r3, #0
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	e029      	b.n	8006694 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006640:	4a27      	ldr	r2, [pc, #156]	; (80066e0 <chk_lock+0xb4>)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	4413      	add	r3, r2
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01d      	beq.n	800668a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800664e:	4a24      	ldr	r2, [pc, #144]	; (80066e0 <chk_lock+0xb4>)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	4413      	add	r3, r2
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d116      	bne.n	800668e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006660:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <chk_lock+0xb4>)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4413      	add	r3, r2
 8006668:	3304      	adds	r3, #4
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006670:	429a      	cmp	r2, r3
 8006672:	d10c      	bne.n	800668e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <chk_lock+0xb4>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4413      	add	r3, r2
 800667c:	3308      	adds	r3, #8
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006684:	429a      	cmp	r2, r3
 8006686:	d102      	bne.n	800668e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006688:	e007      	b.n	800669a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d9d2      	bls.n	8006640 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d109      	bne.n	80066b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <chk_lock+0x80>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d101      	bne.n	80066b0 <chk_lock+0x84>
 80066ac:	2300      	movs	r3, #0
 80066ae:	e010      	b.n	80066d2 <chk_lock+0xa6>
 80066b0:	2312      	movs	r3, #18
 80066b2:	e00e      	b.n	80066d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d108      	bne.n	80066cc <chk_lock+0xa0>
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <chk_lock+0xb4>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	4413      	add	r3, r2
 80066c2:	330c      	adds	r3, #12
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d101      	bne.n	80066d0 <chk_lock+0xa4>
 80066cc:	2310      	movs	r3, #16
 80066ce:	e000      	b.n	80066d2 <chk_lock+0xa6>
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20002390 	.word	0x20002390

080066e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066ea:	2300      	movs	r3, #0
 80066ec:	607b      	str	r3, [r7, #4]
 80066ee:	e002      	b.n	80066f6 <enq_lock+0x12>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3301      	adds	r3, #1
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d806      	bhi.n	800670a <enq_lock+0x26>
 80066fc:	4a09      	ldr	r2, [pc, #36]	; (8006724 <enq_lock+0x40>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	4413      	add	r3, r2
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f2      	bne.n	80066f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b02      	cmp	r3, #2
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20002390 	.word	0x20002390

08006728 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e01f      	b.n	8006778 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006738:	4a41      	ldr	r2, [pc, #260]	; (8006840 <inc_lock+0x118>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	4413      	add	r3, r2
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d113      	bne.n	8006772 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800674a:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <inc_lock+0x118>)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	4413      	add	r3, r2
 8006752:	3304      	adds	r3, #4
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800675a:	429a      	cmp	r2, r3
 800675c:	d109      	bne.n	8006772 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800675e:	4a38      	ldr	r2, [pc, #224]	; (8006840 <inc_lock+0x118>)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	4413      	add	r3, r2
 8006766:	3308      	adds	r3, #8
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800676e:	429a      	cmp	r2, r3
 8006770:	d006      	beq.n	8006780 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d9dc      	bls.n	8006738 <inc_lock+0x10>
 800677e:	e000      	b.n	8006782 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006780:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d132      	bne.n	80067ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	e002      	b.n	8006794 <inc_lock+0x6c>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d806      	bhi.n	80067a8 <inc_lock+0x80>
 800679a:	4a29      	ldr	r2, [pc, #164]	; (8006840 <inc_lock+0x118>)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1f2      	bne.n	800678e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d101      	bne.n	80067b2 <inc_lock+0x8a>
 80067ae:	2300      	movs	r3, #0
 80067b0:	e040      	b.n	8006834 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4922      	ldr	r1, [pc, #136]	; (8006840 <inc_lock+0x118>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	440b      	add	r3, r1
 80067be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	491e      	ldr	r1, [pc, #120]	; (8006840 <inc_lock+0x118>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	440b      	add	r3, r1
 80067cc:	3304      	adds	r3, #4
 80067ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	491a      	ldr	r1, [pc, #104]	; (8006840 <inc_lock+0x118>)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	440b      	add	r3, r1
 80067dc:	3308      	adds	r3, #8
 80067de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067e0:	4a17      	ldr	r2, [pc, #92]	; (8006840 <inc_lock+0x118>)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	4413      	add	r3, r2
 80067e8:	330c      	adds	r3, #12
 80067ea:	2200      	movs	r2, #0
 80067ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <inc_lock+0xe0>
 80067f4:	4a12      	ldr	r2, [pc, #72]	; (8006840 <inc_lock+0x118>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	4413      	add	r3, r2
 80067fc:	330c      	adds	r3, #12
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <inc_lock+0xe0>
 8006804:	2300      	movs	r3, #0
 8006806:	e015      	b.n	8006834 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d108      	bne.n	8006820 <inc_lock+0xf8>
 800680e:	4a0c      	ldr	r2, [pc, #48]	; (8006840 <inc_lock+0x118>)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	4413      	add	r3, r2
 8006816:	330c      	adds	r3, #12
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	e001      	b.n	8006824 <inc_lock+0xfc>
 8006820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006824:	4906      	ldr	r1, [pc, #24]	; (8006840 <inc_lock+0x118>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	440b      	add	r3, r1
 800682c:	330c      	adds	r3, #12
 800682e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20002390 	.word	0x20002390

08006844 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3b01      	subs	r3, #1
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d825      	bhi.n	80068a4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <dec_lock+0x74>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	4413      	add	r3, r2
 8006860:	330c      	adds	r3, #12
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686c:	d101      	bne.n	8006872 <dec_lock+0x2e>
 800686e:	2300      	movs	r3, #0
 8006870:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006872:	89fb      	ldrh	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <dec_lock+0x3a>
 8006878:	89fb      	ldrh	r3, [r7, #14]
 800687a:	3b01      	subs	r3, #1
 800687c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800687e:	4a0e      	ldr	r2, [pc, #56]	; (80068b8 <dec_lock+0x74>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4413      	add	r3, r2
 8006886:	330c      	adds	r3, #12
 8006888:	89fa      	ldrh	r2, [r7, #14]
 800688a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800688c:	89fb      	ldrh	r3, [r7, #14]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <dec_lock+0x5a>
 8006892:	4a09      	ldr	r2, [pc, #36]	; (80068b8 <dec_lock+0x74>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	4413      	add	r3, r2
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	737b      	strb	r3, [r7, #13]
 80068a2:	e001      	b.n	80068a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80068a4:	2302      	movs	r3, #2
 80068a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80068a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20002390 	.word	0x20002390

080068bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e010      	b.n	80068ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80068ca:	4a0d      	ldr	r2, [pc, #52]	; (8006900 <clear_lock+0x44>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4413      	add	r3, r2
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d105      	bne.n	80068e6 <clear_lock+0x2a>
 80068da:	4a09      	ldr	r2, [pc, #36]	; (8006900 <clear_lock+0x44>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	4413      	add	r3, r2
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d9eb      	bls.n	80068ca <clear_lock+0xe>
	}
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20002390 	.word	0x20002390

08006904 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	78db      	ldrb	r3, [r3, #3]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d034      	beq.n	8006982 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7858      	ldrb	r0, [r3, #1]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006928:	2301      	movs	r3, #1
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f7ff fd0e 	bl	800634c <disk_write>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
 800693a:	e022      	b.n	8006982 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	1ad2      	subs	r2, r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	429a      	cmp	r2, r3
 8006950:	d217      	bcs.n	8006982 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	789b      	ldrb	r3, [r3, #2]
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	e010      	b.n	800697c <sync_window+0x78>
					wsect += fs->fsize;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7858      	ldrb	r0, [r3, #1]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800696e:	2301      	movs	r3, #1
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	f7ff fceb 	bl	800634c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3b01      	subs	r3, #1
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d8eb      	bhi.n	800695a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d01b      	beq.n	80069dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff ffad 	bl	8006904 <sync_window>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d113      	bne.n	80069dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7858      	ldrb	r0, [r3, #1]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80069be:	2301      	movs	r3, #1
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	f7ff fca3 	bl	800630c <disk_read>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ff87 	bl	8006904 <sync_window>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d159      	bne.n	8006ab4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d149      	bne.n	8006a9c <sync_fs+0xb4>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	791b      	ldrb	r3, [r3, #4]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d145      	bne.n	8006a9c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	899b      	ldrh	r3, [r3, #12]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f7ff fd76 	bl	800650e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	333c      	adds	r3, #60	; 0x3c
 8006a26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a2a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fd05 	bl	800643e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	333c      	adds	r3, #60	; 0x3c
 8006a38:	4921      	ldr	r1, [pc, #132]	; (8006ac0 <sync_fs+0xd8>)
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fd1a 	bl	8006474 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	333c      	adds	r3, #60	; 0x3c
 8006a44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a48:	491e      	ldr	r1, [pc, #120]	; (8006ac4 <sync_fs+0xdc>)
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff fd12 	bl	8006474 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	333c      	adds	r3, #60	; 0x3c
 8006a54:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f7ff fd08 	bl	8006474 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	333c      	adds	r3, #60	; 0x3c
 8006a68:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f7ff fcfe 	bl	8006474 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7858      	ldrb	r0, [r3, #1]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a90:	2301      	movs	r3, #1
 8006a92:	f7ff fc5b 	bl	800634c <disk_write>
			fs->fsi_flag = 0;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fc71 	bl	800638c <disk_ioctl>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <sync_fs+0xcc>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	41615252 	.word	0x41615252
 8006ac4:	61417272 	.word	0x61417272

08006ac8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	3b02      	subs	r3, #2
 8006ad6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	3b02      	subs	r3, #2
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d301      	bcc.n	8006ae8 <clust2sect+0x20>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e008      	b.n	8006afa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	895b      	ldrh	r3, [r3, #10]
 8006aec:	461a      	mov	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	fb03 f202 	mul.w	r2, r3, r2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	4413      	add	r3, r2
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d904      	bls.n	8006b26 <get_fat+0x20>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d302      	bcc.n	8006b2c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b26:	2301      	movs	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e0bb      	b.n	8006ca4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	f000 8083 	beq.w	8006c42 <get_fat+0x13c>
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	f300 80a7 	bgt.w	8006c90 <get_fat+0x18a>
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d002      	beq.n	8006b4c <get_fat+0x46>
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d056      	beq.n	8006bf8 <get_fat+0xf2>
 8006b4a:	e0a1      	b.n	8006c90 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	899b      	ldrh	r3, [r3, #12]
 8006b62:	4619      	mov	r1, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6938      	ldr	r0, [r7, #16]
 8006b70:	f7ff ff0c 	bl	800698c <move_window>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 808d 	bne.w	8006c96 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	60fa      	str	r2, [r7, #12]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	8992      	ldrh	r2, [r2, #12]
 8006b86:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b8a:	fb01 f202 	mul.w	r2, r1, r2
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	899b      	ldrh	r3, [r3, #12]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006baa:	4413      	add	r3, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	6938      	ldr	r0, [r7, #16]
 8006bb0:	f7ff feec 	bl	800698c <move_window>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d16f      	bne.n	8006c9a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	899b      	ldrh	r3, [r3, #12]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bc6:	fb01 f202 	mul.w	r2, r1, r2
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <get_fat+0xe8>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	091b      	lsrs	r3, r3, #4
 8006bec:	e002      	b.n	8006bf4 <get_fat+0xee>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf4:	617b      	str	r3, [r7, #20]
			break;
 8006bf6:	e055      	b.n	8006ca4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	899b      	ldrh	r3, [r3, #12]
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6938      	ldr	r0, [r7, #16]
 8006c12:	f7ff febb 	bl	800698c <move_window>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d140      	bne.n	8006c9e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	8992      	ldrh	r2, [r2, #12]
 8006c2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c2e:	fb00 f202 	mul.w	r2, r0, r2
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	440b      	add	r3, r1
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff fbc6 	bl	80063c8 <ld_word>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	617b      	str	r3, [r7, #20]
			break;
 8006c40:	e030      	b.n	8006ca4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	899b      	ldrh	r3, [r3, #12]
 8006c4a:	089b      	lsrs	r3, r3, #2
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	4619      	mov	r1, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c56:	4413      	add	r3, r2
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6938      	ldr	r0, [r7, #16]
 8006c5c:	f7ff fe96 	bl	800698c <move_window>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d11d      	bne.n	8006ca2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	8992      	ldrh	r2, [r2, #12]
 8006c74:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c78:	fb00 f202 	mul.w	r2, r0, r2
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	440b      	add	r3, r1
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fbb9 	bl	80063f8 <ld_dword>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c8c:	617b      	str	r3, [r7, #20]
			break;
 8006c8e:	e009      	b.n	8006ca4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c90:	2301      	movs	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e006      	b.n	8006ca4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c96:	bf00      	nop
 8006c98:	e004      	b.n	8006ca4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c9a:	bf00      	nop
 8006c9c:	e002      	b.n	8006ca4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c9e:	bf00      	nop
 8006ca0:	e000      	b.n	8006ca4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ca2:	bf00      	nop
		}
	}

	return val;
 8006ca4:	697b      	ldr	r3, [r7, #20]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006cae:	b590      	push	{r4, r7, lr}
 8006cb0:	b089      	sub	sp, #36	; 0x24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	f240 8109 	bls.w	8006ed8 <put_fat+0x22a>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	f080 8103 	bcs.w	8006ed8 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	f000 80b6 	beq.w	8006e48 <put_fat+0x19a>
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	f300 80fb 	bgt.w	8006ed8 <put_fat+0x22a>
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d003      	beq.n	8006cee <put_fat+0x40>
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	f000 8083 	beq.w	8006df2 <put_fat+0x144>
 8006cec:	e0f4      	b.n	8006ed8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	085b      	lsrs	r3, r3, #1
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	899b      	ldrh	r3, [r3, #12]
 8006d04:	4619      	mov	r1, r3
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d0c:	4413      	add	r3, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff fe3b 	bl	800698c <move_window>
 8006d16:	4603      	mov	r3, r0
 8006d18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d1a:	7ffb      	ldrb	r3, [r7, #31]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f040 80d4 	bne.w	8006eca <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	61ba      	str	r2, [r7, #24]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	8992      	ldrh	r2, [r2, #12]
 8006d32:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d36:	fb00 f202 	mul.w	r2, r0, r2
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00d      	beq.n	8006d66 <put_fat+0xb8>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	b25b      	sxtb	r3, r3
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	b25a      	sxtb	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	b25b      	sxtb	r3, r3
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	b25b      	sxtb	r3, r3
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	e001      	b.n	8006d6a <put_fat+0xbc>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	899b      	ldrh	r3, [r3, #12]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d84:	4413      	add	r3, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fdff 	bl	800698c <move_window>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d92:	7ffb      	ldrb	r3, [r7, #31]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f040 809a 	bne.w	8006ece <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	899b      	ldrh	r3, [r3, #12]
 8006da4:	461a      	mov	r2, r3
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dac:	fb00 f202 	mul.w	r2, r0, r2
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	440b      	add	r3, r1
 8006db4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <put_fat+0x11a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	091b      	lsrs	r3, r3, #4
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	e00e      	b.n	8006de6 <put_fat+0x138>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	f023 030f 	bic.w	r3, r3, #15
 8006dd2:	b25a      	sxtb	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	b25b      	sxtb	r3, r3
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	4313      	orrs	r3, r2
 8006de2:	b25b      	sxtb	r3, r3
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	70da      	strb	r2, [r3, #3]
			break;
 8006df0:	e072      	b.n	8006ed8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	899b      	ldrh	r3, [r3, #12]
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e06:	4413      	add	r3, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff fdbe 	bl	800698c <move_window>
 8006e10:	4603      	mov	r3, r0
 8006e12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d15b      	bne.n	8006ed2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	8992      	ldrh	r2, [r2, #12]
 8006e28:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e2c:	fb00 f202 	mul.w	r2, r0, r2
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	440b      	add	r3, r1
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	b292      	uxth	r2, r2
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff faff 	bl	800643e <st_word>
			fs->wflag = 1;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	70da      	strb	r2, [r3, #3]
			break;
 8006e46:	e047      	b.n	8006ed8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	899b      	ldrh	r3, [r3, #12]
 8006e50:	089b      	lsrs	r3, r3, #2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff fd93 	bl	800698c <move_window>
 8006e66:	4603      	mov	r3, r0
 8006e68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e6a:	7ffb      	ldrb	r3, [r7, #31]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d132      	bne.n	8006ed6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	8992      	ldrh	r2, [r2, #12]
 8006e84:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e88:	fb00 f202 	mul.w	r2, r0, r2
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	440b      	add	r3, r1
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fab1 	bl	80063f8 <ld_dword>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e9c:	4323      	orrs	r3, r4
 8006e9e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	8992      	ldrh	r2, [r2, #12]
 8006eae:	fbb3 f0f2 	udiv	r0, r3, r2
 8006eb2:	fb00 f202 	mul.w	r2, r0, r2
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	440b      	add	r3, r1
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff fad9 	bl	8006474 <st_dword>
			fs->wflag = 1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	70da      	strb	r2, [r3, #3]
			break;
 8006ec8:	e006      	b.n	8006ed8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006eca:	bf00      	nop
 8006ecc:	e004      	b.n	8006ed8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006ece:	bf00      	nop
 8006ed0:	e002      	b.n	8006ed8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006ed2:	bf00      	nop
 8006ed4:	e000      	b.n	8006ed8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006ed6:	bf00      	nop
		}
	}
	return res;
 8006ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3724      	adds	r7, #36	; 0x24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd90      	pop	{r4, r7, pc}

08006ee2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b088      	sub	sp, #32
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d904      	bls.n	8006f08 <remove_chain+0x26>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d301      	bcc.n	8006f0c <remove_chain+0x2a>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e04b      	b.n	8006fa4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00c      	beq.n	8006f2c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	69b8      	ldr	r0, [r7, #24]
 8006f1a:	f7ff fec8 	bl	8006cae <put_fat>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006f22:	7ffb      	ldrb	r3, [r7, #31]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <remove_chain+0x4a>
 8006f28:	7ffb      	ldrb	r3, [r7, #31]
 8006f2a:	e03b      	b.n	8006fa4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7ff fde9 	bl	8006b06 <get_fat>
 8006f34:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d031      	beq.n	8006fa0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <remove_chain+0x64>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e02e      	b.n	8006fa4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d101      	bne.n	8006f52 <remove_chain+0x70>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e028      	b.n	8006fa4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f52:	2200      	movs	r2, #0
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	69b8      	ldr	r0, [r7, #24]
 8006f58:	f7ff fea9 	bl	8006cae <put_fat>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f60:	7ffb      	ldrb	r3, [r7, #31]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <remove_chain+0x88>
 8006f66:	7ffb      	ldrb	r3, [r7, #31]
 8006f68:	e01c      	b.n	8006fa4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	69da      	ldr	r2, [r3, #28]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	3b02      	subs	r3, #2
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d20b      	bcs.n	8006f90 <remove_chain+0xae>
			fs->free_clst++;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	791b      	ldrb	r3, [r3, #4]
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d3c6      	bcc.n	8006f2c <remove_chain+0x4a>
 8006f9e:	e000      	b.n	8006fa2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006fa0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10d      	bne.n	8006fde <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <create_chain+0x2c>
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d31b      	bcc.n	8007010 <create_chain+0x64>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	e018      	b.n	8007010 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff fd90 	bl	8006b06 <get_fat>
 8006fe6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d801      	bhi.n	8006ff2 <create_chain+0x46>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e070      	b.n	80070d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d101      	bne.n	8006ffe <create_chain+0x52>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	e06a      	b.n	80070d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d201      	bcs.n	800700c <create_chain+0x60>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	e063      	b.n	80070d4 <create_chain+0x128>
		scl = clst;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	3301      	adds	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	429a      	cmp	r2, r3
 8007022:	d307      	bcc.n	8007034 <create_chain+0x88>
				ncl = 2;
 8007024:	2302      	movs	r3, #2
 8007026:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	429a      	cmp	r2, r3
 800702e:	d901      	bls.n	8007034 <create_chain+0x88>
 8007030:	2300      	movs	r3, #0
 8007032:	e04f      	b.n	80070d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007034:	69f9      	ldr	r1, [r7, #28]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fd65 	bl	8006b06 <get_fat>
 800703c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00e      	beq.n	8007062 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d003      	beq.n	8007052 <create_chain+0xa6>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d101      	bne.n	8007056 <create_chain+0xaa>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	e03e      	b.n	80070d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	429a      	cmp	r2, r3
 800705c:	d1da      	bne.n	8007014 <create_chain+0x68>
 800705e:	2300      	movs	r3, #0
 8007060:	e038      	b.n	80070d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007062:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007064:	f04f 32ff 	mov.w	r2, #4294967295
 8007068:	69f9      	ldr	r1, [r7, #28]
 800706a:	6938      	ldr	r0, [r7, #16]
 800706c:	f7ff fe1f 	bl	8006cae <put_fat>
 8007070:	4603      	mov	r3, r0
 8007072:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <create_chain+0xe2>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6938      	ldr	r0, [r7, #16]
 8007086:	f7ff fe12 	bl	8006cae <put_fat>
 800708a:	4603      	mov	r3, r0
 800708c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d116      	bne.n	80070c2 <create_chain+0x116>
		fs->last_clst = ncl;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	69da      	ldr	r2, [r3, #28]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	3b02      	subs	r3, #2
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d804      	bhi.n	80070b2 <create_chain+0x106>
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	791b      	ldrb	r3, [r3, #4]
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	711a      	strb	r2, [r3, #4]
 80070c0:	e007      	b.n	80070d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d102      	bne.n	80070ce <create_chain+0x122>
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295
 80070cc:	e000      	b.n	80070d0 <create_chain+0x124>
 80070ce:	2301      	movs	r3, #1
 80070d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80070d2:	69fb      	ldr	r3, [r7, #28]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	3304      	adds	r3, #4
 80070f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	899b      	ldrh	r3, [r3, #12]
 80070f8:	461a      	mov	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	8952      	ldrh	r2, [r2, #10]
 8007104:	fbb3 f3f2 	udiv	r3, r3, r2
 8007108:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	613a      	str	r2, [r7, #16]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <clmt_clust+0x42>
 800711a:	2300      	movs	r3, #0
 800711c:	e010      	b.n	8007140 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d307      	bcc.n	8007136 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3304      	adds	r3, #4
 8007132:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007134:	e7e9      	b.n	800710a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007136:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4413      	add	r3, r2
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007162:	d204      	bcs.n	800716e <dir_sdi+0x22>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <dir_sdi+0x26>
		return FR_INT_ERR;
 800716e:	2302      	movs	r3, #2
 8007170:	e071      	b.n	8007256 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <dir_sdi+0x46>
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d902      	bls.n	8007192 <dir_sdi+0x46>
		clst = fs->dirbase;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10c      	bne.n	80071b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	8912      	ldrh	r2, [r2, #8]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d301      	bcc.n	80071a8 <dir_sdi+0x5c>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e056      	b.n	8007256 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	61da      	str	r2, [r3, #28]
 80071b0:	e02d      	b.n	800720e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	895b      	ldrh	r3, [r3, #10]
 80071b6:	461a      	mov	r2, r3
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	899b      	ldrh	r3, [r3, #12]
 80071bc:	fb02 f303 	mul.w	r3, r2, r3
 80071c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071c2:	e019      	b.n	80071f8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6979      	ldr	r1, [r7, #20]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fc9c 	bl	8006b06 <get_fat>
 80071ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d101      	bne.n	80071dc <dir_sdi+0x90>
 80071d8:	2301      	movs	r3, #1
 80071da:	e03c      	b.n	8007256 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d904      	bls.n	80071ec <dir_sdi+0xa0>
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d301      	bcc.n	80071f0 <dir_sdi+0xa4>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e032      	b.n	8007256 <dir_sdi+0x10a>
			ofs -= csz;
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d2e1      	bcs.n	80071c4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	6938      	ldr	r0, [r7, #16]
 8007204:	f7ff fc60 	bl	8006ac8 <clust2sect>
 8007208:	4602      	mov	r2, r0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <dir_sdi+0xd4>
 800721c:	2302      	movs	r3, #2
 800721e:	e01a      	b.n	8007256 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	899b      	ldrh	r3, [r3, #12]
 8007228:	4619      	mov	r1, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007230:	441a      	add	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	899b      	ldrh	r3, [r3, #12]
 8007240:	461a      	mov	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	fbb3 f0f2 	udiv	r0, r3, r2
 8007248:	fb00 f202 	mul.w	r2, r0, r2
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	18ca      	adds	r2, r1, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	3320      	adds	r3, #32
 8007274:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <dir_next+0x28>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007284:	d301      	bcc.n	800728a <dir_next+0x2c>
 8007286:	2304      	movs	r3, #4
 8007288:	e0bb      	b.n	8007402 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	899b      	ldrh	r3, [r3, #12]
 800728e:	461a      	mov	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	fbb3 f1f2 	udiv	r1, r3, r2
 8007296:	fb01 f202 	mul.w	r2, r1, r2
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	f040 809d 	bne.w	80073dc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	8912      	ldrh	r2, [r2, #8]
 80072bc:	4293      	cmp	r3, r2
 80072be:	f0c0 808d 	bcc.w	80073dc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	61da      	str	r2, [r3, #28]
 80072c8:	2304      	movs	r3, #4
 80072ca:	e09a      	b.n	8007402 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	899b      	ldrh	r3, [r3, #12]
 80072d0:	461a      	mov	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	8952      	ldrh	r2, [r2, #10]
 80072dc:	3a01      	subs	r2, #1
 80072de:	4013      	ands	r3, r2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d17b      	bne.n	80073dc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f7ff fc0a 	bl	8006b06 <get_fat>
 80072f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d801      	bhi.n	80072fe <dir_next+0xa0>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e081      	b.n	8007402 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d101      	bne.n	800730a <dir_next+0xac>
 8007306:	2301      	movs	r3, #1
 8007308:	e07b      	b.n	8007402 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	429a      	cmp	r2, r3
 8007312:	d359      	bcc.n	80073c8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	61da      	str	r2, [r3, #28]
 8007320:	2304      	movs	r3, #4
 8007322:	e06e      	b.n	8007402 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7ff fe3d 	bl	8006fac <create_chain>
 8007332:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <dir_next+0xe0>
 800733a:	2307      	movs	r3, #7
 800733c:	e061      	b.n	8007402 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <dir_next+0xea>
 8007344:	2302      	movs	r3, #2
 8007346:	e05c      	b.n	8007402 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d101      	bne.n	8007354 <dir_next+0xf6>
 8007350:	2301      	movs	r3, #1
 8007352:	e056      	b.n	8007402 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fad5 	bl	8006904 <sync_window>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <dir_next+0x106>
 8007360:	2301      	movs	r3, #1
 8007362:	e04e      	b.n	8007402 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	899b      	ldrh	r3, [r3, #12]
 800736e:	461a      	mov	r2, r3
 8007370:	2100      	movs	r1, #0
 8007372:	f7ff f8cc 	bl	800650e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	6979      	ldr	r1, [r7, #20]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fba3 	bl	8006ac8 <clust2sect>
 8007382:	4602      	mov	r2, r0
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	639a      	str	r2, [r3, #56]	; 0x38
 8007388:	e012      	b.n	80073b0 <dir_next+0x152>
						fs->wflag = 1;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fab7 	bl	8006904 <sync_window>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <dir_next+0x142>
 800739c:	2301      	movs	r3, #1
 800739e:	e030      	b.n	8007402 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3301      	adds	r3, #1
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	895b      	ldrh	r3, [r3, #10]
 80073b4:	461a      	mov	r2, r3
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d3e6      	bcc.n	800738a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff fb79 	bl	8006ac8 <clust2sect>
 80073d6:	4602      	mov	r2, r0
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	899b      	ldrh	r3, [r3, #12]
 80073ec:	461a      	mov	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80073f4:	fb00 f202 	mul.w	r2, r0, r2
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	18ca      	adds	r2, r1, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800741a:	2100      	movs	r1, #0
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fe95 	bl	800714c <dir_sdi>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d12b      	bne.n	8007484 <dir_alloc+0x7a>
		n = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	4619      	mov	r1, r3
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff faa8 	bl	800698c <move_window>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d11d      	bne.n	8007482 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2be5      	cmp	r3, #229	; 0xe5
 800744e:	d004      	beq.n	800745a <dir_alloc+0x50>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d107      	bne.n	800746a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3301      	adds	r3, #1
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d102      	bne.n	800746e <dir_alloc+0x64>
 8007468:	e00c      	b.n	8007484 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800746e:	2101      	movs	r1, #1
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fef4 	bl	800725e <dir_next>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0d7      	beq.n	8007430 <dir_alloc+0x26>
 8007480:	e000      	b.n	8007484 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007482:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b04      	cmp	r3, #4
 8007488:	d101      	bne.n	800748e <dir_alloc+0x84>
 800748a:	2307      	movs	r3, #7
 800748c:	75fb      	strb	r3, [r7, #23]
	return res;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	331a      	adds	r3, #26
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe ff8e 	bl	80063c8 <ld_word>
 80074ac:	4603      	mov	r3, r0
 80074ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d109      	bne.n	80074cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	3314      	adds	r3, #20
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe ff83 	bl	80063c8 <ld_word>
 80074c2:	4603      	mov	r3, r0
 80074c4:	041b      	lsls	r3, r3, #16
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	331a      	adds	r3, #26
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	b292      	uxth	r2, r2
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe ffa6 	bl	800643e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d109      	bne.n	800750e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f103 0214 	add.w	r2, r3, #20
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	0c1b      	lsrs	r3, r3, #16
 8007504:	b29b      	uxth	r3, r3
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f7fe ff98 	bl	800643e <st_word>
	}
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	331a      	adds	r3, #26
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe ff4e 	bl	80063c8 <ld_word>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <cmp_lfn+0x1e>
 8007532:	2300      	movs	r3, #0
 8007534:	e059      	b.n	80075ea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800753e:	1e5a      	subs	r2, r3, #1
 8007540:	4613      	mov	r3, r2
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800754c:	2301      	movs	r3, #1
 800754e:	81fb      	strh	r3, [r7, #14]
 8007550:	2300      	movs	r3, #0
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	e033      	b.n	80075be <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007556:	4a27      	ldr	r2, [pc, #156]	; (80075f4 <cmp_lfn+0xdc>)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	4413      	add	r3, r2
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4413      	add	r3, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe ff2f 	bl	80063c8 <ld_word>
 800756a:	4603      	mov	r3, r0
 800756c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800756e:	89fb      	ldrh	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01a      	beq.n	80075aa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2bfe      	cmp	r3, #254	; 0xfe
 8007578:	d812      	bhi.n	80075a0 <cmp_lfn+0x88>
 800757a:	89bb      	ldrh	r3, [r7, #12]
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fdcd 	bl	800911c <ff_wtoupper>
 8007582:	4603      	mov	r3, r0
 8007584:	461c      	mov	r4, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	617a      	str	r2, [r7, #20]
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f001 fdc1 	bl	800911c <ff_wtoupper>
 800759a:	4603      	mov	r3, r0
 800759c:	429c      	cmp	r4, r3
 800759e:	d001      	beq.n	80075a4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80075a0:	2300      	movs	r3, #0
 80075a2:	e022      	b.n	80075ea <cmp_lfn+0xd2>
			}
			wc = uc;
 80075a4:	89bb      	ldrh	r3, [r7, #12]
 80075a6:	81fb      	strh	r3, [r7, #14]
 80075a8:	e006      	b.n	80075b8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80075aa:	89bb      	ldrh	r3, [r7, #12]
 80075ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d001      	beq.n	80075b8 <cmp_lfn+0xa0>
 80075b4:	2300      	movs	r3, #0
 80075b6:	e018      	b.n	80075ea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3301      	adds	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b0c      	cmp	r3, #12
 80075c2:	d9c8      	bls.n	8007556 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <cmp_lfn+0xd0>
 80075d0:	89fb      	ldrh	r3, [r7, #14]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d008      	beq.n	80075e8 <cmp_lfn+0xd0>
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <cmp_lfn+0xd0>
 80075e4:	2300      	movs	r3, #0
 80075e6:	e000      	b.n	80075ea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80075e8:	2301      	movs	r3, #1
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd90      	pop	{r4, r7, pc}
 80075f2:	bf00      	nop
 80075f4:	0800e65c 	.word	0x0800e65c

080075f8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	4611      	mov	r1, r2
 8007604:	461a      	mov	r2, r3
 8007606:	460b      	mov	r3, r1
 8007608:	71fb      	strb	r3, [r7, #7]
 800760a:	4613      	mov	r3, r2
 800760c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	330d      	adds	r3, #13
 8007612:	79ba      	ldrb	r2, [r7, #6]
 8007614:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	330b      	adds	r3, #11
 800761a:	220f      	movs	r2, #15
 800761c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	330c      	adds	r3, #12
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	331a      	adds	r3, #26
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe ff06 	bl	800643e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	1e5a      	subs	r2, r3, #1
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	82fb      	strh	r3, [r7, #22]
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800764a:	8afb      	ldrh	r3, [r7, #22]
 800764c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007650:	4293      	cmp	r3, r2
 8007652:	d007      	beq.n	8007664 <put_lfn+0x6c>
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	61fa      	str	r2, [r7, #28]
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007664:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <put_lfn+0xcc>)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	4413      	add	r3, r2
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	4413      	add	r3, r2
 8007672:	8afa      	ldrh	r2, [r7, #22]
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fee1 	bl	800643e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800767c:	8afb      	ldrh	r3, [r7, #22]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <put_lfn+0x90>
 8007682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007686:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	3301      	adds	r3, #1
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b0c      	cmp	r3, #12
 8007692:	d9da      	bls.n	800764a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007694:	8afb      	ldrh	r3, [r7, #22]
 8007696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800769a:	4293      	cmp	r3, r2
 800769c:	d006      	beq.n	80076ac <put_lfn+0xb4>
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d103      	bne.n	80076b4 <put_lfn+0xbc>
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	79fa      	ldrb	r2, [r7, #7]
 80076b8:	701a      	strb	r2, [r3, #0]
}
 80076ba:	bf00      	nop
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	0800e65c 	.word	0x0800e65c

080076c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08c      	sub	sp, #48	; 0x30
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80076d6:	220b      	movs	r2, #11
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7fe fef6 	bl	80064cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	d92b      	bls.n	800773e <gen_numname+0x76>
		sr = seq;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80076ea:	e022      	b.n	8007732 <gen_numname+0x6a>
			wc = *lfn++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1c9a      	adds	r2, r3, #2
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076f6:	2300      	movs	r3, #0
 80076f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fa:	e017      	b.n	800772c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	005a      	lsls	r2, r3, #1
 8007700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	4413      	add	r3, r2
 8007708:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800770a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d005      	beq.n	8007726 <gen_numname+0x5e>
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007720:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007724:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	3301      	adds	r3, #1
 800772a:	62bb      	str	r3, [r7, #40]	; 0x28
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	2b0f      	cmp	r3, #15
 8007730:	d9e4      	bls.n	80076fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1d8      	bne.n	80076ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800773e:	2307      	movs	r3, #7
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	b2db      	uxtb	r3, r3
 800774c:	3330      	adds	r3, #48	; 0x30
 800774e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007756:	2b39      	cmp	r3, #57	; 0x39
 8007758:	d904      	bls.n	8007764 <gen_numname+0x9c>
 800775a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800775e:	3307      	adds	r3, #7
 8007760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	1e5a      	subs	r2, r3, #1
 8007768:	62ba      	str	r2, [r7, #40]	; 0x28
 800776a:	3330      	adds	r3, #48	; 0x30
 800776c:	443b      	add	r3, r7
 800776e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007772:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	091b      	lsrs	r3, r3, #4
 800777a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1df      	bne.n	8007742 <gen_numname+0x7a>
	ns[i] = '~';
 8007782:	f107 0214 	add.w	r2, r7, #20
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	4413      	add	r3, r2
 800778a:	227e      	movs	r2, #126	; 0x7e
 800778c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800778e:	2300      	movs	r3, #0
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
 8007792:	e002      	b.n	800779a <gen_numname+0xd2>
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	3301      	adds	r3, #1
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
 800779a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	429a      	cmp	r2, r3
 80077a0:	d205      	bcs.n	80077ae <gen_numname+0xe6>
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	4413      	add	r3, r2
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d1f2      	bne.n	8007794 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	d807      	bhi.n	80077c4 <gen_numname+0xfc>
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80077ba:	3330      	adds	r3, #48	; 0x30
 80077bc:	443b      	add	r3, r7
 80077be:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80077c2:	e000      	b.n	80077c6 <gen_numname+0xfe>
 80077c4:	2120      	movs	r1, #32
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	627a      	str	r2, [r7, #36]	; 0x24
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	460a      	mov	r2, r1
 80077d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	2b07      	cmp	r3, #7
 80077d8:	d9e9      	bls.n	80077ae <gen_numname+0xe6>
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	3730      	adds	r7, #48	; 0x30
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80077f0:	230b      	movs	r3, #11
 80077f2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	0852      	lsrs	r2, r2, #1
 80077fa:	01db      	lsls	r3, r3, #7
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	1c59      	adds	r1, r3, #1
 8007804:	6079      	str	r1, [r7, #4]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4413      	add	r3, r2
 800780a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	3b01      	subs	r3, #1
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1ed      	bne.n	80077f4 <sum_sfn+0x10>
	return sum;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007834:	2100      	movs	r1, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff fc88 	bl	800714c <dir_sdi>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <dir_find+0x24>
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	e0a9      	b.n	800799e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800784a:	23ff      	movs	r3, #255	; 0xff
 800784c:	753b      	strb	r3, [r7, #20]
 800784e:	7d3b      	ldrb	r3, [r7, #20]
 8007850:	757b      	strb	r3, [r7, #21]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	4619      	mov	r1, r3
 8007860:	6938      	ldr	r0, [r7, #16]
 8007862:	f7ff f893 	bl	800698c <move_window>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f040 8090 	bne.w	8007992 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800787a:	7dbb      	ldrb	r3, [r7, #22]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <dir_find+0x60>
 8007880:	2304      	movs	r3, #4
 8007882:	75fb      	strb	r3, [r7, #23]
 8007884:	e08a      	b.n	800799c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	330b      	adds	r3, #11
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007892:	73fb      	strb	r3, [r7, #15]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7bfa      	ldrb	r2, [r7, #15]
 8007898:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800789a:	7dbb      	ldrb	r3, [r7, #22]
 800789c:	2be5      	cmp	r3, #229	; 0xe5
 800789e:	d007      	beq.n	80078b0 <dir_find+0x8a>
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <dir_find+0x98>
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b0f      	cmp	r3, #15
 80078ae:	d006      	beq.n	80078be <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80078b0:	23ff      	movs	r3, #255	; 0xff
 80078b2:	757b      	strb	r3, [r7, #21]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30
 80078bc:	e05e      	b.n	800797c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	2b0f      	cmp	r3, #15
 80078c2:	d136      	bne.n	8007932 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d154      	bne.n	800797c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80078d2:	7dbb      	ldrb	r3, [r7, #22]
 80078d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00d      	beq.n	80078f8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	7b5b      	ldrb	r3, [r3, #13]
 80078e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80078e4:	7dbb      	ldrb	r3, [r7, #22]
 80078e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ea:	75bb      	strb	r3, [r7, #22]
 80078ec:	7dbb      	ldrb	r3, [r7, #22]
 80078ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80078f8:	7dba      	ldrb	r2, [r7, #22]
 80078fa:	7d7b      	ldrb	r3, [r7, #21]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d115      	bne.n	800792c <dir_find+0x106>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	330d      	adds	r3, #13
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	7d3a      	ldrb	r2, [r7, #20]
 800790a:	429a      	cmp	r2, r3
 800790c:	d10e      	bne.n	800792c <dir_find+0x106>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	691a      	ldr	r2, [r3, #16]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f7ff fdfd 	bl	8007518 <cmp_lfn>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <dir_find+0x106>
 8007924:	7d7b      	ldrb	r3, [r7, #21]
 8007926:	3b01      	subs	r3, #1
 8007928:	b2db      	uxtb	r3, r3
 800792a:	e000      	b.n	800792e <dir_find+0x108>
 800792c:	23ff      	movs	r3, #255	; 0xff
 800792e:	757b      	strb	r3, [r7, #21]
 8007930:	e024      	b.n	800797c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007932:	7d7b      	ldrb	r3, [r7, #21]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d109      	bne.n	800794c <dir_find+0x126>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff ff51 	bl	80077e4 <sum_sfn>
 8007942:	4603      	mov	r3, r0
 8007944:	461a      	mov	r2, r3
 8007946:	7d3b      	ldrb	r3, [r7, #20]
 8007948:	4293      	cmp	r3, r2
 800794a:	d024      	beq.n	8007996 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <dir_find+0x14a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a18      	ldr	r0, [r3, #32]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3324      	adds	r3, #36	; 0x24
 8007962:	220b      	movs	r2, #11
 8007964:	4619      	mov	r1, r3
 8007966:	f7fe fded 	bl	8006544 <mem_cmp>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d014      	beq.n	800799a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007970:	23ff      	movs	r3, #255	; 0xff
 8007972:	757b      	strb	r3, [r7, #21]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f04f 32ff 	mov.w	r2, #4294967295
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800797c:	2100      	movs	r1, #0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fc6d 	bl	800725e <dir_next>
 8007984:	4603      	mov	r3, r0
 8007986:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f43f af65 	beq.w	800785a <dir_find+0x34>
 8007990:	e004      	b.n	800799c <dir_find+0x176>
		if (res != FR_OK) break;
 8007992:	bf00      	nop
 8007994:	e002      	b.n	800799c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007996:	bf00      	nop
 8007998:	e000      	b.n	800799c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800799a:	bf00      	nop

	return res;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	; 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80079bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <dir_register+0x20>
 80079c4:	2306      	movs	r3, #6
 80079c6:	e0e0      	b.n	8007b8a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80079c8:	2300      	movs	r3, #0
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
 80079cc:	e002      	b.n	80079d4 <dir_register+0x2c>
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	3301      	adds	r3, #1
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	691a      	ldr	r2, [r3, #16]
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1f4      	bne.n	80079ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	220c      	movs	r2, #12
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fd6b 	bl	80064cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d032      	beq.n	8007a66 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2240      	movs	r2, #64	; 0x40
 8007a04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007a08:	2301      	movs	r3, #1
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0c:	e016      	b.n	8007a3c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	f107 010c 	add.w	r1, r7, #12
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	f7ff fe53 	bl	80076c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7ff feff 	bl	8007826 <dir_find>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	3301      	adds	r3, #1
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	2b63      	cmp	r3, #99	; 0x63
 8007a40:	d9e5      	bls.n	8007a0e <dir_register+0x66>
 8007a42:	e000      	b.n	8007a46 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007a44:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	2b64      	cmp	r3, #100	; 0x64
 8007a4a:	d101      	bne.n	8007a50 <dir_register+0xa8>
 8007a4c:	2307      	movs	r3, #7
 8007a4e:	e09c      	b.n	8007b8a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d002      	beq.n	8007a5e <dir_register+0xb6>
 8007a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a5c:	e095      	b.n	8007b8a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a5e:	7dfa      	ldrb	r2, [r7, #23]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <dir_register+0xd8>
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	330c      	adds	r3, #12
 8007a74:	4a47      	ldr	r2, [pc, #284]	; (8007b94 <dir_register+0x1ec>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	089b      	lsrs	r3, r3, #2
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	e000      	b.n	8007a82 <dir_register+0xda>
 8007a80:	2301      	movs	r3, #1
 8007a82:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a84:	6a39      	ldr	r1, [r7, #32]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff fcbf 	bl	800740a <dir_alloc>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d148      	bne.n	8007b2c <dir_register+0x184>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	623b      	str	r3, [r7, #32]
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d042      	beq.n	8007b2c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	015b      	lsls	r3, r3, #5
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fb4a 	bl	800714c <dir_sdi>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d132      	bne.n	8007b2c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3324      	adds	r3, #36	; 0x24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fe8a 	bl	80077e4 <sum_sfn>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	69f8      	ldr	r0, [r7, #28]
 8007adc:	f7fe ff56 	bl	800698c <move_window>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d11d      	bne.n	8007b2a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	6918      	ldr	r0, [r3, #16]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a19      	ldr	r1, [r3, #32]
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	7efb      	ldrb	r3, [r7, #27]
 8007afc:	f7ff fd7c 	bl	80075f8 <put_lfn>
				fs->wflag = 1;
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2201      	movs	r2, #1
 8007b04:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007b06:	2100      	movs	r1, #0
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fba8 	bl	800725e <dir_next>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d107      	bne.n	8007b2c <dir_register+0x184>
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1d5      	bne.n	8007ad4 <dir_register+0x12c>
 8007b28:	e000      	b.n	8007b2c <dir_register+0x184>
				if (res != FR_OK) break;
 8007b2a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d128      	bne.n	8007b86 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	69f8      	ldr	r0, [r7, #28]
 8007b3c:	f7fe ff26 	bl	800698c <move_window>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d11b      	bne.n	8007b86 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	2220      	movs	r2, #32
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fcd9 	bl	800650e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a18      	ldr	r0, [r3, #32]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3324      	adds	r3, #36	; 0x24
 8007b64:	220b      	movs	r2, #11
 8007b66:	4619      	mov	r1, r3
 8007b68:	f7fe fcb0 	bl	80064cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	330c      	adds	r3, #12
 8007b78:	f002 0218 	and.w	r2, r2, #24
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	2201      	movs	r2, #1
 8007b84:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3730      	adds	r7, #48	; 0x30
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	4ec4ec4f 	.word	0x4ec4ec4f

08007b98 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	613b      	str	r3, [r7, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	61ba      	str	r2, [r7, #24]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc8:	2b1f      	cmp	r3, #31
 8007bca:	d940      	bls.n	8007c4e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bce:	2b2f      	cmp	r3, #47	; 0x2f
 8007bd0:	d006      	beq.n	8007be0 <create_name+0x48>
 8007bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd4:	2b5c      	cmp	r3, #92	; 0x5c
 8007bd6:	d110      	bne.n	8007bfa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007bd8:	e002      	b.n	8007be0 <create_name+0x48>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	4413      	add	r3, r2
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b2f      	cmp	r3, #47	; 0x2f
 8007bea:	d0f6      	beq.n	8007bda <create_name+0x42>
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b5c      	cmp	r3, #92	; 0x5c
 8007bf6:	d0f0      	beq.n	8007bda <create_name+0x42>
			break;
 8007bf8:	e02a      	b.n	8007c50 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2bfe      	cmp	r3, #254	; 0xfe
 8007bfe:	d901      	bls.n	8007c04 <create_name+0x6c>
 8007c00:	2306      	movs	r3, #6
 8007c02:	e17d      	b.n	8007f00 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 fa48 	bl	80090a4 <ff_convert>
 8007c14:	4603      	mov	r3, r0
 8007c16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <create_name+0x8a>
 8007c1e:	2306      	movs	r3, #6
 8007c20:	e16e      	b.n	8007f00 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c24:	2b7f      	cmp	r3, #127	; 0x7f
 8007c26:	d809      	bhi.n	8007c3c <create_name+0xa4>
 8007c28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	488d      	ldr	r0, [pc, #564]	; (8007e64 <create_name+0x2cc>)
 8007c2e:	f7fe fcb0 	bl	8006592 <chk_chr>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <create_name+0xa4>
 8007c38:	2306      	movs	r3, #6
 8007c3a:	e161      	b.n	8007f00 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	617a      	str	r2, [r7, #20]
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c4a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007c4c:	e7b4      	b.n	8007bb8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007c4e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	441a      	add	r2, r3
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c5c:	2b1f      	cmp	r3, #31
 8007c5e:	d801      	bhi.n	8007c64 <create_name+0xcc>
 8007c60:	2304      	movs	r3, #4
 8007c62:	e000      	b.n	8007c66 <create_name+0xce>
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c6a:	e011      	b.n	8007c90 <create_name+0xf8>
		w = lfn[di - 1];
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c72:	3b01      	subs	r3, #1
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d002      	beq.n	8007c8a <create_name+0xf2>
 8007c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c86:	2b2e      	cmp	r3, #46	; 0x2e
 8007c88:	d106      	bne.n	8007c98 <create_name+0x100>
		di--;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1ea      	bne.n	8007c6c <create_name+0xd4>
 8007c96:	e000      	b.n	8007c9a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007c98:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <create_name+0x118>
 8007cac:	2306      	movs	r3, #6
 8007cae:	e127      	b.n	8007f00 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3324      	adds	r3, #36	; 0x24
 8007cb4:	220b      	movs	r2, #11
 8007cb6:	2120      	movs	r1, #32
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe fc28 	bl	800650e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	e002      	b.n	8007cca <create_name+0x132>
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d0f5      	beq.n	8007cc4 <create_name+0x12c>
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce4:	d0ee      	beq.n	8007cc4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d009      	beq.n	8007d00 <create_name+0x168>
 8007cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cf0:	f043 0303 	orr.w	r3, r3, #3
 8007cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007cf8:	e002      	b.n	8007d00 <create_name+0x168>
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d009      	beq.n	8007d1a <create_name+0x182>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	d1ef      	bne.n	8007cfa <create_name+0x162>

	i = b = 0; ni = 8;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d20:	2300      	movs	r3, #0
 8007d22:	623b      	str	r3, [r7, #32]
 8007d24:	2308      	movs	r3, #8
 8007d26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	61ba      	str	r2, [r7, #24]
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8090 	beq.w	8007e60 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d006      	beq.n	8007d54 <create_name+0x1bc>
 8007d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d48:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4a:	d10a      	bne.n	8007d62 <create_name+0x1ca>
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d006      	beq.n	8007d62 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d58:	f043 0303 	orr.w	r3, r3, #3
 8007d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d60:	e07d      	b.n	8007e5e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d62:	6a3a      	ldr	r2, [r7, #32]
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d203      	bcs.n	8007d72 <create_name+0x1da>
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d123      	bne.n	8007dba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	2b0b      	cmp	r3, #11
 8007d76:	d106      	bne.n	8007d86 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d7c:	f043 0303 	orr.w	r3, r3, #3
 8007d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d84:	e075      	b.n	8007e72 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d005      	beq.n	8007d9a <create_name+0x202>
 8007d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d92:	f043 0303 	orr.w	r3, r3, #3
 8007d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d866      	bhi.n	8007e70 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	2308      	movs	r3, #8
 8007da8:	623b      	str	r3, [r7, #32]
 8007daa:	230b      	movs	r3, #11
 8007dac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007db8:	e051      	b.n	8007e5e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8007dbe:	d914      	bls.n	8007dea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 f96d 	bl	80090a4 <ff_convert>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <create_name+0x246>
 8007dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd6:	3b80      	subs	r3, #128	; 0x80
 8007dd8:	4a23      	ldr	r2, [pc, #140]	; (8007e68 <create_name+0x2d0>)
 8007dda:	5cd3      	ldrb	r3, [r2, r3]
 8007ddc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de2:	f043 0302 	orr.w	r3, r3, #2
 8007de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <create_name+0x268>
 8007df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df2:	4619      	mov	r1, r3
 8007df4:	481d      	ldr	r0, [pc, #116]	; (8007e6c <create_name+0x2d4>)
 8007df6:	f7fe fbcc 	bl	8006592 <chk_chr>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007e00:	235f      	movs	r3, #95	; 0x5f
 8007e02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e08:	f043 0303 	orr.w	r3, r3, #3
 8007e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e10:	e01b      	b.n	8007e4a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d909      	bls.n	8007e2c <create_name+0x294>
 8007e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e1a:	2b5a      	cmp	r3, #90	; 0x5a
 8007e1c:	d806      	bhi.n	8007e2c <create_name+0x294>
					b |= 2;
 8007e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e22:	f043 0302 	orr.w	r3, r3, #2
 8007e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e2a:	e00e      	b.n	8007e4a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e2e:	2b60      	cmp	r3, #96	; 0x60
 8007e30:	d90b      	bls.n	8007e4a <create_name+0x2b2>
 8007e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e34:	2b7a      	cmp	r3, #122	; 0x7a
 8007e36:	d808      	bhi.n	8007e4a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e3c:	f043 0301 	orr.w	r3, r3, #1
 8007e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e46:	3b20      	subs	r3, #32
 8007e48:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	623a      	str	r2, [r7, #32]
 8007e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e52:	b2d1      	uxtb	r1, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4413      	add	r3, r2
 8007e58:	460a      	mov	r2, r1
 8007e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007e5e:	e763      	b.n	8007d28 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007e60:	bf00      	nop
 8007e62:	e006      	b.n	8007e72 <create_name+0x2da>
 8007e64:	0800e4dc 	.word	0x0800e4dc
 8007e68:	0800e5dc 	.word	0x0800e5dc
 8007e6c:	0800e4e8 	.word	0x0800e4e8
			if (si > di) break;			/* No extension */
 8007e70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e78:	2be5      	cmp	r3, #229	; 0xe5
 8007e7a:	d103      	bne.n	8007e84 <create_name+0x2ec>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2205      	movs	r2, #5
 8007e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d104      	bne.n	8007e94 <create_name+0x2fc>
 8007e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007e94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e98:	f003 030c 	and.w	r3, r3, #12
 8007e9c:	2b0c      	cmp	r3, #12
 8007e9e:	d005      	beq.n	8007eac <create_name+0x314>
 8007ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d105      	bne.n	8007eb8 <create_name+0x320>
 8007eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb0:	f043 0302 	orr.w	r3, r3, #2
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d117      	bne.n	8007ef4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d105      	bne.n	8007edc <create_name+0x344>
 8007ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed4:	f043 0310 	orr.w	r3, r3, #16
 8007ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007edc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ee0:	f003 030c 	and.w	r3, r3, #12
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d105      	bne.n	8007ef4 <create_name+0x35c>
 8007ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eec:	f043 0308 	orr.w	r3, r3, #8
 8007ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007efa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007efe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3728      	adds	r7, #40	; 0x28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f1c:	e002      	b.n	8007f24 <follow_path+0x1c>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b2f      	cmp	r3, #47	; 0x2f
 8007f2a:	d0f8      	beq.n	8007f1e <follow_path+0x16>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b5c      	cmp	r3, #92	; 0x5c
 8007f32:	d0f4      	beq.n	8007f1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2200      	movs	r2, #0
 8007f38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2b1f      	cmp	r3, #31
 8007f40:	d80a      	bhi.n	8007f58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2280      	movs	r2, #128	; 0x80
 8007f46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff f8fd 	bl	800714c <dir_sdi>
 8007f52:	4603      	mov	r3, r0
 8007f54:	75fb      	strb	r3, [r7, #23]
 8007f56:	e048      	b.n	8007fea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f58:	463b      	mov	r3, r7
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff fe1b 	bl	8007b98 <create_name>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d139      	bne.n	8007fe0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fc5a 	bl	8007826 <dir_find>
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d12c      	bne.n	8007fe4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d127      	bne.n	8007fe4 <follow_path+0xdc>
 8007f94:	2305      	movs	r3, #5
 8007f96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f98:	e024      	b.n	8007fe4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	f003 0304 	and.w	r3, r3, #4
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d121      	bne.n	8007fe8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	799b      	ldrb	r3, [r3, #6]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007fb0:	2305      	movs	r3, #5
 8007fb2:	75fb      	strb	r3, [r7, #23]
 8007fb4:	e019      	b.n	8007fea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	8992      	ldrh	r2, [r2, #12]
 8007fc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fc8:	fb00 f202 	mul.w	r2, r0, r2
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	440b      	add	r3, r1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff fa60 	bl	8007498 <ld_clust>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fde:	e7bb      	b.n	8007f58 <follow_path+0x50>
			if (res != FR_OK) break;
 8007fe0:	bf00      	nop
 8007fe2:	e002      	b.n	8007fea <follow_path+0xe2>
				break;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fe8:	bf00      	nop
			}
		}
	}

	return res;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8008000:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d031      	beq.n	800806e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e002      	b.n	8008018 <get_ldnumber+0x24>
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	3301      	adds	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b1f      	cmp	r3, #31
 800801e:	d903      	bls.n	8008028 <get_ldnumber+0x34>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b3a      	cmp	r3, #58	; 0x3a
 8008026:	d1f4      	bne.n	8008012 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b3a      	cmp	r3, #58	; 0x3a
 800802e:	d11c      	bne.n	800806a <get_ldnumber+0x76>
			tp = *path;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	60fa      	str	r2, [r7, #12]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	3b30      	subs	r3, #48	; 0x30
 8008040:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b09      	cmp	r3, #9
 8008046:	d80e      	bhi.n	8008066 <get_ldnumber+0x72>
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	429a      	cmp	r2, r3
 800804e:	d10a      	bne.n	8008066 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d107      	bne.n	8008066 <get_ldnumber+0x72>
					vol = (int)i;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	3301      	adds	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	e002      	b.n	8008070 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800806a:	2300      	movs	r3, #0
 800806c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800806e:	693b      	ldr	r3, [r7, #16]
}
 8008070:	4618      	mov	r0, r3
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	70da      	strb	r2, [r3, #3]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f04f 32ff 	mov.w	r2, #4294967295
 8008092:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fe fc78 	bl	800698c <move_window>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <check_fs+0x2a>
 80080a2:	2304      	movs	r3, #4
 80080a4:	e038      	b.n	8008118 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	333c      	adds	r3, #60	; 0x3c
 80080aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe f98a 	bl	80063c8 <ld_word>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080bc:	429a      	cmp	r2, r3
 80080be:	d001      	beq.n	80080c4 <check_fs+0x48>
 80080c0:	2303      	movs	r3, #3
 80080c2:	e029      	b.n	8008118 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ca:	2be9      	cmp	r3, #233	; 0xe9
 80080cc:	d009      	beq.n	80080e2 <check_fs+0x66>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2beb      	cmp	r3, #235	; 0xeb
 80080d6:	d11e      	bne.n	8008116 <check_fs+0x9a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080de:	2b90      	cmp	r3, #144	; 0x90
 80080e0:	d119      	bne.n	8008116 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	333c      	adds	r3, #60	; 0x3c
 80080e6:	3336      	adds	r3, #54	; 0x36
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe f985 	bl	80063f8 <ld_dword>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <check_fs+0xa4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d101      	bne.n	80080fe <check_fs+0x82>
 80080fa:	2300      	movs	r3, #0
 80080fc:	e00c      	b.n	8008118 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	333c      	adds	r3, #60	; 0x3c
 8008102:	3352      	adds	r3, #82	; 0x52
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe f977 	bl	80063f8 <ld_dword>
 800810a:	4603      	mov	r3, r0
 800810c:	4a05      	ldr	r2, [pc, #20]	; (8008124 <check_fs+0xa8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d101      	bne.n	8008116 <check_fs+0x9a>
 8008112:	2300      	movs	r3, #0
 8008114:	e000      	b.n	8008118 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008116:	2302      	movs	r3, #2
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	00544146 	.word	0x00544146
 8008124:	33544146 	.word	0x33544146

08008128 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b096      	sub	sp, #88	; 0x58
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff ff59 	bl	8007ff4 <get_ldnumber>
 8008142:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008146:	2b00      	cmp	r3, #0
 8008148:	da01      	bge.n	800814e <find_volume+0x26>
 800814a:	230b      	movs	r3, #11
 800814c:	e26a      	b.n	8008624 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800814e:	4aa3      	ldr	r2, [pc, #652]	; (80083dc <find_volume+0x2b4>)
 8008150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008156:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <find_volume+0x3a>
 800815e:	230c      	movs	r3, #12
 8008160:	e260      	b.n	8008624 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8008162:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008164:	f7fe fa30 	bl	80065c8 <lock_fs>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <find_volume+0x4a>
 800816e:	230f      	movs	r3, #15
 8008170:	e258      	b.n	8008624 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008176:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01a      	beq.n	80081be <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe f87d 	bl	800628c <disk_status>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10c      	bne.n	80081be <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <find_volume+0x92>
 80081aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80081b6:	230a      	movs	r3, #10
 80081b8:	e234      	b.n	8008624 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 80081ba:	2300      	movs	r3, #0
 80081bc:	e232      	b.n	8008624 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	2200      	movs	r2, #0
 80081c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80081c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe f875 	bl	80062c0 <disk_initialize>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80081dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80081e8:	2303      	movs	r3, #3
 80081ea:	e21b      	b.n	8008624 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d007      	beq.n	8008202 <find_volume+0xda>
 80081f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80081fe:	230a      	movs	r3, #10
 8008200:	e210      	b.n	8008624 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	7858      	ldrb	r0, [r3, #1]
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	330c      	adds	r3, #12
 800820a:	461a      	mov	r2, r3
 800820c:	2102      	movs	r1, #2
 800820e:	f7fe f8bd 	bl	800638c <disk_ioctl>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <find_volume+0xf4>
 8008218:	2301      	movs	r3, #1
 800821a:	e203      	b.n	8008624 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	899b      	ldrh	r3, [r3, #12]
 8008220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008224:	d80d      	bhi.n	8008242 <find_volume+0x11a>
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	899b      	ldrh	r3, [r3, #12]
 800822a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800822e:	d308      	bcc.n	8008242 <find_volume+0x11a>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	899b      	ldrh	r3, [r3, #12]
 8008234:	461a      	mov	r2, r3
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	899b      	ldrh	r3, [r3, #12]
 800823a:	3b01      	subs	r3, #1
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <find_volume+0x11e>
 8008242:	2301      	movs	r3, #1
 8008244:	e1ee      	b.n	8008624 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800824a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800824c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800824e:	f7ff ff15 	bl	800807c <check_fs>
 8008252:	4603      	mov	r3, r0
 8008254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008258:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800825c:	2b02      	cmp	r3, #2
 800825e:	d149      	bne.n	80082f4 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008260:	2300      	movs	r3, #0
 8008262:	643b      	str	r3, [r7, #64]	; 0x40
 8008264:	e01e      	b.n	80082a4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800826c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008274:	4413      	add	r3, r2
 8008276:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	3304      	adds	r3, #4
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d006      	beq.n	8008290 <find_volume+0x168>
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	3308      	adds	r3, #8
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe f8b6 	bl	80063f8 <ld_dword>
 800828c:	4602      	mov	r2, r0
 800828e:	e000      	b.n	8008292 <find_volume+0x16a>
 8008290:	2200      	movs	r2, #0
 8008292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	3358      	adds	r3, #88	; 0x58
 8008298:	443b      	add	r3, r7
 800829a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800829e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a0:	3301      	adds	r3, #1
 80082a2:	643b      	str	r3, [r7, #64]	; 0x40
 80082a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d9dd      	bls.n	8008266 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80082aa:	2300      	movs	r3, #0
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80082ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <find_volume+0x192>
 80082b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b6:	3b01      	subs	r3, #1
 80082b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80082ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	3358      	adds	r3, #88	; 0x58
 80082c0:	443b      	add	r3, r7
 80082c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80082c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80082c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <find_volume+0x1b2>
 80082ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082d2:	f7ff fed3 	bl	800807c <check_fs>
 80082d6:	4603      	mov	r3, r0
 80082d8:	e000      	b.n	80082dc <find_volume+0x1b4>
 80082da:	2303      	movs	r3, #3
 80082dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80082e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d905      	bls.n	80082f4 <find_volume+0x1cc>
 80082e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ea:	3301      	adds	r3, #1
 80082ec:	643b      	str	r3, [r7, #64]	; 0x40
 80082ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d9e2      	bls.n	80082ba <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80082f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d101      	bne.n	8008300 <find_volume+0x1d8>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e191      	b.n	8008624 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008304:	2b01      	cmp	r3, #1
 8008306:	d901      	bls.n	800830c <find_volume+0x1e4>
 8008308:	230d      	movs	r3, #13
 800830a:	e18b      	b.n	8008624 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	333c      	adds	r3, #60	; 0x3c
 8008310:	330b      	adds	r3, #11
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe f858 	bl	80063c8 <ld_word>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	899b      	ldrh	r3, [r3, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d001      	beq.n	8008328 <find_volume+0x200>
 8008324:	230d      	movs	r3, #13
 8008326:	e17d      	b.n	8008624 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	333c      	adds	r3, #60	; 0x3c
 800832c:	3316      	adds	r3, #22
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe f84a 	bl	80063c8 <ld_word>
 8008334:	4603      	mov	r3, r0
 8008336:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <find_volume+0x224>
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	333c      	adds	r3, #60	; 0x3c
 8008342:	3324      	adds	r3, #36	; 0x24
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe f857 	bl	80063f8 <ld_dword>
 800834a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008350:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	789b      	ldrb	r3, [r3, #2]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d005      	beq.n	8008370 <find_volume+0x248>
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	789b      	ldrb	r3, [r3, #2]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d001      	beq.n	8008370 <find_volume+0x248>
 800836c:	230d      	movs	r3, #13
 800836e:	e159      	b.n	8008624 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	789b      	ldrb	r3, [r3, #2]
 8008374:	461a      	mov	r2, r3
 8008376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008378:	fb02 f303 	mul.w	r3, r2, r3
 800837c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008384:	b29a      	uxth	r2, r3
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	895b      	ldrh	r3, [r3, #10]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <find_volume+0x27c>
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	895b      	ldrh	r3, [r3, #10]
 8008396:	461a      	mov	r2, r3
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	895b      	ldrh	r3, [r3, #10]
 800839c:	3b01      	subs	r3, #1
 800839e:	4013      	ands	r3, r2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <find_volume+0x280>
 80083a4:	230d      	movs	r3, #13
 80083a6:	e13d      	b.n	8008624 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	333c      	adds	r3, #60	; 0x3c
 80083ac:	3311      	adds	r3, #17
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe f80a 	bl	80063c8 <ld_word>
 80083b4:	4603      	mov	r3, r0
 80083b6:	461a      	mov	r2, r3
 80083b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	891b      	ldrh	r3, [r3, #8]
 80083c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083c2:	8992      	ldrh	r2, [r2, #12]
 80083c4:	0952      	lsrs	r2, r2, #5
 80083c6:	b292      	uxth	r2, r2
 80083c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80083cc:	fb01 f202 	mul.w	r2, r1, r2
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <find_volume+0x2b8>
 80083d8:	230d      	movs	r3, #13
 80083da:	e123      	b.n	8008624 <find_volume+0x4fc>
 80083dc:	20002388 	.word	0x20002388

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	333c      	adds	r3, #60	; 0x3c
 80083e4:	3313      	adds	r3, #19
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fd ffee 	bl	80063c8 <ld_word>
 80083ec:	4603      	mov	r3, r0
 80083ee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80083f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <find_volume+0x2dc>
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	333c      	adds	r3, #60	; 0x3c
 80083fa:	3320      	adds	r3, #32
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fd fffb 	bl	80063f8 <ld_dword>
 8008402:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	333c      	adds	r3, #60	; 0x3c
 8008408:	330e      	adds	r3, #14
 800840a:	4618      	mov	r0, r3
 800840c:	f7fd ffdc 	bl	80063c8 <ld_word>
 8008410:	4603      	mov	r3, r0
 8008412:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008414:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <find_volume+0x2f6>
 800841a:	230d      	movs	r3, #13
 800841c:	e102      	b.n	8008624 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800841e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008422:	4413      	add	r3, r2
 8008424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008426:	8911      	ldrh	r1, [r2, #8]
 8008428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800842a:	8992      	ldrh	r2, [r2, #12]
 800842c:	0952      	lsrs	r2, r2, #5
 800842e:	b292      	uxth	r2, r2
 8008430:	fbb1 f2f2 	udiv	r2, r1, r2
 8008434:	b292      	uxth	r2, r2
 8008436:	4413      	add	r3, r2
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800843a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	429a      	cmp	r2, r3
 8008440:	d201      	bcs.n	8008446 <find_volume+0x31e>
 8008442:	230d      	movs	r3, #13
 8008444:	e0ee      	b.n	8008624 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800844e:	8952      	ldrh	r2, [r2, #10]
 8008450:	fbb3 f3f2 	udiv	r3, r3, r2
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <find_volume+0x338>
 800845c:	230d      	movs	r3, #13
 800845e:	e0e1      	b.n	8008624 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8008460:	2303      	movs	r3, #3
 8008462:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800846c:	4293      	cmp	r3, r2
 800846e:	d802      	bhi.n	8008476 <find_volume+0x34e>
 8008470:	2302      	movs	r3, #2
 8008472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	f640 72f5 	movw	r2, #4085	; 0xff5
 800847c:	4293      	cmp	r3, r2
 800847e:	d802      	bhi.n	8008486 <find_volume+0x35e>
 8008480:	2301      	movs	r3, #1
 8008482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	1c9a      	adds	r2, r3, #2
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008492:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008494:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008498:	441a      	add	r2, r3
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800849e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	441a      	add	r2, r3
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80084a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d11e      	bne.n	80084ee <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	333c      	adds	r3, #60	; 0x3c
 80084b4:	332a      	adds	r3, #42	; 0x2a
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fd ff86 	bl	80063c8 <ld_word>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <find_volume+0x39e>
 80084c2:	230d      	movs	r3, #13
 80084c4:	e0ae      	b.n	8008624 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	891b      	ldrh	r3, [r3, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <find_volume+0x3aa>
 80084ce:	230d      	movs	r3, #13
 80084d0:	e0a8      	b.n	8008624 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	333c      	adds	r3, #60	; 0x3c
 80084d6:	332c      	adds	r3, #44	; 0x2c
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fd ff8d 	bl	80063f8 <ld_dword>
 80084de:	4602      	mov	r2, r0
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	647b      	str	r3, [r7, #68]	; 0x44
 80084ec:	e01f      	b.n	800852e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	891b      	ldrh	r3, [r3, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <find_volume+0x3d2>
 80084f6:	230d      	movs	r3, #13
 80084f8:	e094      	b.n	8008624 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008500:	441a      	add	r2, r3
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800850a:	2b02      	cmp	r3, #2
 800850c:	d103      	bne.n	8008516 <find_volume+0x3ee>
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	e00a      	b.n	800852c <find_volume+0x404>
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	4613      	mov	r3, r2
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	4413      	add	r3, r2
 8008520:	085a      	lsrs	r2, r3, #1
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800852c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	899b      	ldrh	r3, [r3, #12]
 8008536:	4619      	mov	r1, r3
 8008538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800853a:	440b      	add	r3, r1
 800853c:	3b01      	subs	r3, #1
 800853e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008540:	8989      	ldrh	r1, [r1, #12]
 8008542:	fbb3 f3f1 	udiv	r3, r3, r1
 8008546:	429a      	cmp	r2, r3
 8008548:	d201      	bcs.n	800854e <find_volume+0x426>
 800854a:	230d      	movs	r3, #13
 800854c:	e06a      	b.n	8008624 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	f04f 32ff 	mov.w	r2, #4294967295
 8008554:	61da      	str	r2, [r3, #28]
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	69da      	ldr	r2, [r3, #28]
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	2280      	movs	r2, #128	; 0x80
 8008562:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008568:	2b03      	cmp	r3, #3
 800856a:	d149      	bne.n	8008600 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	333c      	adds	r3, #60	; 0x3c
 8008570:	3330      	adds	r3, #48	; 0x30
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd ff28 	bl	80063c8 <ld_word>
 8008578:	4603      	mov	r3, r0
 800857a:	2b01      	cmp	r3, #1
 800857c:	d140      	bne.n	8008600 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800857e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008580:	3301      	adds	r3, #1
 8008582:	4619      	mov	r1, r3
 8008584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008586:	f7fe fa01 	bl	800698c <move_window>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d137      	bne.n	8008600 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	2200      	movs	r2, #0
 8008594:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	333c      	adds	r3, #60	; 0x3c
 800859a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fd ff12 	bl	80063c8 <ld_word>
 80085a4:	4603      	mov	r3, r0
 80085a6:	461a      	mov	r2, r3
 80085a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d127      	bne.n	8008600 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	333c      	adds	r3, #60	; 0x3c
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fd ff1f 	bl	80063f8 <ld_dword>
 80085ba:	4603      	mov	r3, r0
 80085bc:	4a1b      	ldr	r2, [pc, #108]	; (800862c <find_volume+0x504>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d11e      	bne.n	8008600 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	333c      	adds	r3, #60	; 0x3c
 80085c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fd ff14 	bl	80063f8 <ld_dword>
 80085d0:	4603      	mov	r3, r0
 80085d2:	4a17      	ldr	r2, [pc, #92]	; (8008630 <find_volume+0x508>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d113      	bne.n	8008600 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	333c      	adds	r3, #60	; 0x3c
 80085dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fd ff09 	bl	80063f8 <ld_dword>
 80085e6:	4602      	mov	r2, r0
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	333c      	adds	r3, #60	; 0x3c
 80085f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fd feff 	bl	80063f8 <ld_dword>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008606:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <find_volume+0x50c>)
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	b29a      	uxth	r2, r3
 8008610:	4b08      	ldr	r3, [pc, #32]	; (8008634 <find_volume+0x50c>)
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	4b07      	ldr	r3, [pc, #28]	; (8008634 <find_volume+0x50c>)
 8008616:	881a      	ldrh	r2, [r3, #0]
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800861c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800861e:	f7fe f94d 	bl	80068bc <clear_lock>
#endif
	return FR_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3758      	adds	r7, #88	; 0x58
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	41615252 	.word	0x41615252
 8008630:	61417272 	.word	0x61417272
 8008634:	2000238c 	.word	0x2000238c

08008638 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008642:	2309      	movs	r3, #9
 8008644:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d02e      	beq.n	80086aa <validate+0x72>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d02a      	beq.n	80086aa <validate+0x72>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d025      	beq.n	80086aa <validate+0x72>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	889a      	ldrh	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	88db      	ldrh	r3, [r3, #6]
 8008668:	429a      	cmp	r2, r3
 800866a:	d11e      	bne.n	80086aa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f7fd ffa9 	bl	80065c8 <lock_fs>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d014      	beq.n	80086a6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd fe02 	bl	800628c <disk_status>
 8008688:	4603      	mov	r3, r0
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <validate+0x60>
				res = FR_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
 8008696:	e008      	b.n	80086aa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2100      	movs	r1, #0
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fd ffa8 	bl	80065f4 <unlock_fs>
 80086a4:	e001      	b.n	80086aa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80086a6:	230f      	movs	r3, #15
 80086a8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <validate+0x7e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	e000      	b.n	80086b8 <validate+0x80>
 80086b6:	2300      	movs	r3, #0
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	6013      	str	r3, [r2, #0]
	return res;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80086da:	f107 0310 	add.w	r3, r7, #16
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff fc88 	bl	8007ff4 <get_ldnumber>
 80086e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da01      	bge.n	80086f0 <f_mount+0x28>
 80086ec:	230b      	movs	r3, #11
 80086ee:	e048      	b.n	8008782 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80086f0:	4a26      	ldr	r2, [pc, #152]	; (800878c <f_mount+0xc4>)
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00f      	beq.n	8008720 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008700:	69b8      	ldr	r0, [r7, #24]
 8008702:	f7fe f8db 	bl	80068bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fdab 	bl	8009266 <ff_del_syncobj>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <f_mount+0x52>
 8008716:	2302      	movs	r3, #2
 8008718:	e033      	b.n	8008782 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	2200      	movs	r2, #0
 800871e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00f      	beq.n	8008746 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3314      	adds	r3, #20
 8008734:	4619      	mov	r1, r3
 8008736:	4610      	mov	r0, r2
 8008738:	f000 fd7a 	bl	8009230 <ff_cre_syncobj>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <f_mount+0x7e>
 8008742:	2302      	movs	r3, #2
 8008744:	e01d      	b.n	8008782 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4910      	ldr	r1, [pc, #64]	; (800878c <f_mount+0xc4>)
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <f_mount+0x94>
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d001      	beq.n	8008760 <f_mount+0x98>
 800875c:	2300      	movs	r3, #0
 800875e:	e010      	b.n	8008782 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008760:	f107 010c 	add.w	r1, r7, #12
 8008764:	f107 0308 	add.w	r3, r7, #8
 8008768:	2200      	movs	r2, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff fcdc 	bl	8008128 <find_volume>
 8008770:	4603      	mov	r3, r0
 8008772:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	7dfa      	ldrb	r2, [r7, #23]
 8008778:	4611      	mov	r1, r2
 800877a:	4618      	mov	r0, r3
 800877c:	f7fd ff3a 	bl	80065f4 <unlock_fs>
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20002388 	.word	0x20002388

08008790 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b09a      	sub	sp, #104	; 0x68
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <f_open+0x18>
 80087a4:	2309      	movs	r3, #9
 80087a6:	e1d7      	b.n	8008b58 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80087b0:	79fa      	ldrb	r2, [r7, #7]
 80087b2:	f107 0110 	add.w	r1, r7, #16
 80087b6:	f107 0308 	add.w	r3, r7, #8
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fcb4 	bl	8008128 <find_volume>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80087c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f040 81b4 	bne.w	8008b38 <f_open+0x3a8>
		dj.obj.fs = fs;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80087d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80087d8:	f000 fd71 	bl	80092be <ff_memalloc>
 80087dc:	65b8      	str	r0, [r7, #88]	; 0x58
 80087de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <f_open+0x62>
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2111      	movs	r1, #17
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fd ff03 	bl	80065f4 <unlock_fs>
 80087ee:	2311      	movs	r3, #17
 80087f0:	e1b2      	b.n	8008b58 <f_open+0x3c8>
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087f6:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	f107 0314 	add.w	r3, r7, #20
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff fb81 	bl	8007f08 <follow_path>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800880c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008810:	2b00      	cmp	r3, #0
 8008812:	d11a      	bne.n	800884a <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008818:	b25b      	sxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	da03      	bge.n	8008826 <f_open+0x96>
				res = FR_INVALID_NAME;
 800881e:	2306      	movs	r3, #6
 8008820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008824:	e011      	b.n	800884a <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	f023 0301 	bic.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	bf14      	ite	ne
 8008830:	2301      	movne	r3, #1
 8008832:	2300      	moveq	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd fef4 	bl	800662c <chk_lock>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	f003 031c 	and.w	r3, r3, #28
 8008850:	2b00      	cmp	r3, #0
 8008852:	d07f      	beq.n	8008954 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 8008854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008858:	2b00      	cmp	r3, #0
 800885a:	d017      	beq.n	800888c <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800885c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008860:	2b04      	cmp	r3, #4
 8008862:	d10e      	bne.n	8008882 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008864:	f7fd ff3e 	bl	80066e4 <enq_lock>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <f_open+0xec>
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff f898 	bl	80079a8 <dir_register>
 8008878:	4603      	mov	r3, r0
 800887a:	e000      	b.n	800887e <f_open+0xee>
 800887c:	2312      	movs	r3, #18
 800887e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	f043 0308 	orr.w	r3, r3, #8
 8008888:	71fb      	strb	r3, [r7, #7]
 800888a:	e010      	b.n	80088ae <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800888c:	7ebb      	ldrb	r3, [r7, #26]
 800888e:	f003 0311 	and.w	r3, r3, #17
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <f_open+0x10e>
					res = FR_DENIED;
 8008896:	2307      	movs	r3, #7
 8008898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800889c:	e007      	b.n	80088ae <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <f_open+0x11e>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80088ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d168      	bne.n	8008988 <f_open+0x1f8>
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d063      	beq.n	8008988 <f_open+0x1f8>
				dw = GET_FATTIME();
 80088c0:	f7fd fac6 	bl	8005e50 <get_fattime>
 80088c4:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c8:	330e      	adds	r3, #14
 80088ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fd fdd1 	bl	8006474 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80088d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d4:	3316      	adds	r3, #22
 80088d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd fdcb 	bl	8006474 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	330b      	adds	r3, #11
 80088e2:	2220      	movs	r2, #32
 80088e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe fdd3 	bl	8007498 <ld_clust>
 80088f2:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088f8:	2200      	movs	r2, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fdeb 	bl	80074d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	331c      	adds	r3, #28
 8008904:	2100      	movs	r1, #0
 8008906:	4618      	mov	r0, r3
 8008908:	f7fd fdb4 	bl	8006474 <st_dword>
					fs->wflag = 1;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2201      	movs	r2, #1
 8008910:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008914:	2b00      	cmp	r3, #0
 8008916:	d037      	beq.n	8008988 <f_open+0x1f8>
						dw = fs->winsect;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800891e:	f107 0314 	add.w	r3, r7, #20
 8008922:	2200      	movs	r2, #0
 8008924:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fadb 	bl	8006ee2 <remove_chain>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008932:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008936:	2b00      	cmp	r3, #0
 8008938:	d126      	bne.n	8008988 <f_open+0x1f8>
							res = move_window(fs, dw);
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe f824 	bl	800698c <move_window>
 8008944:	4603      	mov	r3, r0
 8008946:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800894e:	3a01      	subs	r2, #1
 8008950:	619a      	str	r2, [r3, #24]
 8008952:	e019      	b.n	8008988 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008954:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008958:	2b00      	cmp	r3, #0
 800895a:	d115      	bne.n	8008988 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800895c:	7ebb      	ldrb	r3, [r7, #26]
 800895e:	f003 0310 	and.w	r3, r3, #16
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <f_open+0x1de>
					res = FR_NO_FILE;
 8008966:	2304      	movs	r3, #4
 8008968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800896c:	e00c      	b.n	8008988 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <f_open+0x1f8>
 8008978:	7ebb      	ldrb	r3, [r7, #26]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <f_open+0x1f8>
						res = FR_DENIED;
 8008982:	2307      	movs	r3, #7
 8008984:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800898c:	2b00      	cmp	r3, #0
 800898e:	d128      	bne.n	80089e2 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <f_open+0x212>
				mode |= FA_MODIFIED;
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80089aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	f023 0301 	bic.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bf14      	ite	ne
 80089ba:	2301      	movne	r3, #1
 80089bc:	2300      	moveq	r3, #0
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	f107 0314 	add.w	r3, r7, #20
 80089c6:	4611      	mov	r1, r2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fd fead 	bl	8006728 <inc_lock>
 80089ce:	4602      	mov	r2, r0
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <f_open+0x252>
 80089dc:	2302      	movs	r3, #2
 80089de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80089e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 80a3 	bne.w	8008b32 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fd50 	bl	8007498 <ld_clust>
 80089f8:	4602      	mov	r2, r0
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	331c      	adds	r3, #28
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fd fcf8 	bl	80063f8 <ld_dword>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	88da      	ldrh	r2, [r3, #6]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	79fa      	ldrb	r2, [r7, #7]
 8008a26:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3330      	adds	r3, #48	; 0x30
 8008a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a42:	2100      	movs	r1, #0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fd fd62 	bl	800650e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d06e      	beq.n	8008b32 <f_open+0x3a2>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d06a      	beq.n	8008b32 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	895b      	ldrh	r3, [r3, #10]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	899b      	ldrh	r3, [r3, #12]
 8008a6e:	fb02 f303 	mul.w	r3, r2, r3
 8008a72:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a80:	e016      	b.n	8008ab0 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe f83d 	bl	8006b06 <get_fat>
 8008a8c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d802      	bhi.n	8008a9a <f_open+0x30a>
 8008a94:	2302      	movs	r3, #2
 8008a96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa0:	d102      	bne.n	8008aa8 <f_open+0x318>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <f_open+0x330>
 8008ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d8e0      	bhi.n	8008a82 <f_open+0x2f2>
				}
				fp->clust = clst;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ac4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008ac6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d131      	bne.n	8008b32 <f_open+0x3a2>
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	899b      	ldrh	r3, [r3, #12]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ad6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ada:	fb01 f202 	mul.w	r2, r1, r2
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d026      	beq.n	8008b32 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fd ffed 	bl	8006ac8 <clust2sect>
 8008aee:	64b8      	str	r0, [r7, #72]	; 0x48
 8008af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <f_open+0x36e>
						res = FR_INT_ERR;
 8008af6:	2302      	movs	r3, #2
 8008af8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008afc:	e019      	b.n	8008b32 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	899b      	ldrh	r3, [r3, #12]
 8008b02:	461a      	mov	r2, r3
 8008b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b06:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0c:	441a      	add	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	7858      	ldrb	r0, [r3, #1]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a1a      	ldr	r2, [r3, #32]
 8008b20:	2301      	movs	r3, #1
 8008b22:	f7fd fbf3 	bl	800630c <disk_read>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <f_open+0x3a2>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8008b32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b34:	f000 fbcf 	bl	80092d6 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <f_open+0x3b6>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fd fd50 	bl	80065f4 <unlock_fs>
 8008b54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3768      	adds	r7, #104	; 0x68
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08e      	sub	sp, #56	; 0x38
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f107 0214 	add.w	r2, r7, #20
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fd59 	bl	8008638 <validate>
 8008b86:	4603      	mov	r3, r0
 8008b88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d107      	bne.n	8008ba4 <f_read+0x44>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	7d5b      	ldrb	r3, [r3, #21]
 8008b98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d009      	beq.n	8008bb8 <f_read+0x58>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fd fd21 	bl	80065f4 <unlock_fs>
 8008bb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bb6:	e15d      	b.n	8008e74 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	7d1b      	ldrb	r3, [r3, #20]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d106      	bne.n	8008bd2 <f_read+0x72>
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2107      	movs	r1, #7
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fd fd13 	bl	80065f4 <unlock_fs>
 8008bce:	2307      	movs	r3, #7
 8008bd0:	e150      	b.n	8008e74 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	f240 813c 	bls.w	8008e60 <f_read+0x300>
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008bec:	e138      	b.n	8008e60 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	8992      	ldrh	r2, [r2, #12]
 8008bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bfa:	fb01 f202 	mul.w	r2, r1, r2
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f040 80f3 	bne.w	8008dec <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	8992      	ldrh	r2, [r2, #12]
 8008c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	8952      	ldrh	r2, [r2, #10]
 8008c16:	3a01      	subs	r2, #1
 8008c18:	4013      	ands	r3, r2
 8008c1a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d139      	bne.n	8008c96 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8008c30:	e013      	b.n	8008c5a <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f7fe fa4b 	bl	80070dc <clmt_clust>
 8008c46:	6338      	str	r0, [r7, #48]	; 0x30
 8008c48:	e007      	b.n	8008c5a <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fd ff57 	bl	8006b06 <get_fat>
 8008c58:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d809      	bhi.n	8008c74 <f_read+0x114>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2202      	movs	r2, #2
 8008c64:	755a      	strb	r2, [r3, #21]
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2102      	movs	r1, #2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fd fcc2 	bl	80065f4 <unlock_fs>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e0ff      	b.n	8008e74 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d109      	bne.n	8008c90 <f_read+0x130>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	755a      	strb	r2, [r3, #21]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2101      	movs	r1, #1
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fd fcb4 	bl	80065f4 <unlock_fs>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e0f1      	b.n	8008e74 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c94:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	f7fd ff12 	bl	8006ac8 <clust2sect>
 8008ca4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d109      	bne.n	8008cc0 <f_read+0x160>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	755a      	strb	r2, [r3, #21]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2102      	movs	r1, #2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fd fc9c 	bl	80065f4 <unlock_fs>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e0d9      	b.n	8008e74 <f_read+0x314>
			sect += csect;
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	899b      	ldrh	r3, [r3, #12]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d046      	beq.n	8008d6a <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	4413      	add	r3, r2
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	8952      	ldrh	r2, [r2, #10]
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d905      	bls.n	8008cf6 <f_read+0x196>
					cc = fs->csize - csect;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	895b      	ldrh	r3, [r3, #10]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	7858      	ldrb	r0, [r3, #1]
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d00:	f7fd fb04 	bl	800630c <disk_read>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <f_read+0x1be>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	755a      	strb	r2, [r3, #21]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2101      	movs	r1, #1
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fd fc6d 	bl	80065f4 <unlock_fs>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e0aa      	b.n	8008e74 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	7d1b      	ldrb	r3, [r3, #20]
 8008d22:	b25b      	sxtb	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da18      	bge.n	8008d5a <f_read+0x1fa>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a1a      	ldr	r2, [r3, #32]
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d911      	bls.n	8008d5a <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	8992      	ldrh	r2, [r2, #12]
 8008d42:	fb02 f303 	mul.w	r3, r2, r3
 8008d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d48:	18d0      	adds	r0, r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	899b      	ldrh	r3, [r3, #12]
 8008d54:	461a      	mov	r2, r3
 8008d56:	f7fd fbb9 	bl	80064cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	899b      	ldrh	r3, [r3, #12]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	fb02 f303 	mul.w	r3, r2, r3
 8008d66:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008d68:	e066      	b.n	8008e38 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d038      	beq.n	8008de6 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	7d1b      	ldrb	r3, [r3, #20]
 8008d78:	b25b      	sxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da1d      	bge.n	8008dba <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	7858      	ldrb	r0, [r3, #1]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a1a      	ldr	r2, [r3, #32]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f7fd fadd 	bl	800634c <disk_write>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <f_read+0x24c>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	755a      	strb	r2, [r3, #21]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2101      	movs	r1, #1
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fd fc26 	bl	80065f4 <unlock_fs>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e063      	b.n	8008e74 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	7d1b      	ldrb	r3, [r3, #20]
 8008db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	7858      	ldrb	r0, [r3, #1]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	f7fd faa0 	bl	800630c <disk_read>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d009      	beq.n	8008de6 <f_read+0x286>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	755a      	strb	r2, [r3, #21]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2101      	movs	r1, #1
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fd fc09 	bl	80065f4 <unlock_fs>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e046      	b.n	8008e74 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	899b      	ldrh	r3, [r3, #12]
 8008df0:	4618      	mov	r0, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	8992      	ldrh	r2, [r2, #12]
 8008dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dfe:	fb01 f202 	mul.w	r2, r1, r2
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	1ac3      	subs	r3, r0, r3
 8008e06:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d901      	bls.n	8008e14 <f_read+0x2b4>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	8992      	ldrh	r2, [r2, #12]
 8008e22:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e26:	fb00 f202 	mul.w	r2, r0, r2
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e30:	4619      	mov	r1, r3
 8008e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e34:	f7fd fb4a 	bl	80064cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	4413      	add	r3, r2
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	699a      	ldr	r2, [r3, #24]
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	441a      	add	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	619a      	str	r2, [r3, #24]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	441a      	add	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f47f aec3 	bne.w	8008bee <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fd fbc1 	bl	80065f4 <unlock_fs>
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3738      	adds	r7, #56	; 0x38
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f107 0208 	add.w	r2, r7, #8
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fbd3 	bl	8008638 <validate>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d16d      	bne.n	8008f78 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d067      	beq.n	8008f78 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7d1b      	ldrb	r3, [r3, #20]
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	da1a      	bge.n	8008ee8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	7858      	ldrb	r0, [r3, #1]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1a      	ldr	r2, [r3, #32]
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f7fd fa43 	bl	800634c <disk_write>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <f_sync+0x5e>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fd fb8f 	bl	80065f4 <unlock_fs>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e055      	b.n	8008f86 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	7d1b      	ldrb	r3, [r3, #20]
 8008ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ee8:	f7fc ffb2 	bl	8005e50 <get_fattime>
 8008eec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fd fd48 	bl	800698c <move_window>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d138      	bne.n	8008f78 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	330b      	adds	r3, #11
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	330b      	adds	r3, #11
 8008f16:	f042 0220 	orr.w	r2, r2, #32
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	461a      	mov	r2, r3
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	f7fe fad4 	bl	80074d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f103 021c 	add.w	r2, r3, #28
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f7fd fa9a 	bl	8006474 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3316      	adds	r3, #22
 8008f44:	6939      	ldr	r1, [r7, #16]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fd fa94 	bl	8006474 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3312      	adds	r3, #18
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fd fa73 	bl	800643e <st_word>
					fs->wflag = 1;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fd fd41 	bl	80069e8 <sync_fs>
 8008f66:	4603      	mov	r3, r0
 8008f68:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7d1b      	ldrb	r3, [r3, #20]
 8008f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	7dfa      	ldrb	r2, [r7, #23]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fd fb38 	bl	80065f4 <unlock_fs>
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff ff70 	bl	8008e7c <f_sync>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d11d      	bne.n	8008fe2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f107 0208 	add.w	r2, r7, #8
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff fb42 	bl	8008638 <validate>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d111      	bne.n	8008fe2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fd fc3e 	bl	8006844 <dec_lock>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fd fb09 	bl	80065f4 <unlock_fs>
#endif
		}
	}
	return res;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009002:	4b1f      	ldr	r3, [pc, #124]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 8009004:	7a5b      	ldrb	r3, [r3, #9]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d131      	bne.n	8009070 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800900c:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 800900e:	7a5b      	ldrb	r3, [r3, #9]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	461a      	mov	r2, r3
 8009014:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 8009016:	2100      	movs	r1, #0
 8009018:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800901a:	4b19      	ldr	r3, [pc, #100]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 800901c:	7a5b      	ldrb	r3, [r3, #9]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	4a17      	ldr	r2, [pc, #92]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800902a:	4b15      	ldr	r3, [pc, #84]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 800902c:	7a5b      	ldrb	r3, [r3, #9]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	4b13      	ldr	r3, [pc, #76]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 8009034:	4413      	add	r3, r2
 8009036:	79fa      	ldrb	r2, [r7, #7]
 8009038:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800903a:	4b11      	ldr	r3, [pc, #68]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 800903c:	7a5b      	ldrb	r3, [r3, #9]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	b2d1      	uxtb	r1, r2
 8009044:	4a0e      	ldr	r2, [pc, #56]	; (8009080 <FATFS_LinkDriverEx+0x94>)
 8009046:	7251      	strb	r1, [r2, #9]
 8009048:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800904a:	7dbb      	ldrb	r3, [r7, #22]
 800904c:	3330      	adds	r3, #48	; 0x30
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	3301      	adds	r3, #1
 8009058:	223a      	movs	r2, #58	; 0x3a
 800905a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	3302      	adds	r3, #2
 8009060:	222f      	movs	r2, #47	; 0x2f
 8009062:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	3303      	adds	r3, #3
 8009068:	2200      	movs	r2, #0
 800906a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
}
 8009072:	4618      	mov	r0, r3
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	200023b0 	.word	0x200023b0

08009084 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800908e:	2200      	movs	r2, #0
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff ffaa 	bl	8008fec <FATFS_LinkDriverEx>
 8009098:	4603      	mov	r3, r0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	2b7f      	cmp	r3, #127	; 0x7f
 80090b4:	d802      	bhi.n	80090bc <ff_convert+0x18>
		c = chr;
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	81fb      	strh	r3, [r7, #14]
 80090ba:	e025      	b.n	8009108 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090c2:	88fb      	ldrh	r3, [r7, #6]
 80090c4:	2bff      	cmp	r3, #255	; 0xff
 80090c6:	d805      	bhi.n	80090d4 <ff_convert+0x30>
 80090c8:	88fb      	ldrh	r3, [r7, #6]
 80090ca:	3b80      	subs	r3, #128	; 0x80
 80090cc:	4a12      	ldr	r2, [pc, #72]	; (8009118 <ff_convert+0x74>)
 80090ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d2:	e000      	b.n	80090d6 <ff_convert+0x32>
 80090d4:	2300      	movs	r3, #0
 80090d6:	81fb      	strh	r3, [r7, #14]
 80090d8:	e016      	b.n	8009108 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80090da:	2300      	movs	r3, #0
 80090dc:	81fb      	strh	r3, [r7, #14]
 80090de:	e009      	b.n	80090f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80090e0:	89fb      	ldrh	r3, [r7, #14]
 80090e2:	4a0d      	ldr	r2, [pc, #52]	; (8009118 <ff_convert+0x74>)
 80090e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e8:	88fa      	ldrh	r2, [r7, #6]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d006      	beq.n	80090fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80090ee:	89fb      	ldrh	r3, [r7, #14]
 80090f0:	3301      	adds	r3, #1
 80090f2:	81fb      	strh	r3, [r7, #14]
 80090f4:	89fb      	ldrh	r3, [r7, #14]
 80090f6:	2b7f      	cmp	r3, #127	; 0x7f
 80090f8:	d9f2      	bls.n	80090e0 <ff_convert+0x3c>
 80090fa:	e000      	b.n	80090fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80090fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80090fe:	89fb      	ldrh	r3, [r7, #14]
 8009100:	3380      	adds	r3, #128	; 0x80
 8009102:	b29b      	uxth	r3, r3
 8009104:	b2db      	uxtb	r3, r3
 8009106:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009108:	89fb      	ldrh	r3, [r7, #14]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	0800e66c 	.word	0x0800e66c

0800911c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912c:	d201      	bcs.n	8009132 <ff_wtoupper+0x16>
 800912e:	4b3e      	ldr	r3, [pc, #248]	; (8009228 <ff_wtoupper+0x10c>)
 8009130:	e000      	b.n	8009134 <ff_wtoupper+0x18>
 8009132:	4b3e      	ldr	r3, [pc, #248]	; (800922c <ff_wtoupper+0x110>)
 8009134:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	1c9a      	adds	r2, r3, #2
 800913a:	617a      	str	r2, [r7, #20]
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009140:	8a7b      	ldrh	r3, [r7, #18]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d068      	beq.n	8009218 <ff_wtoupper+0xfc>
 8009146:	88fa      	ldrh	r2, [r7, #6]
 8009148:	8a7b      	ldrh	r3, [r7, #18]
 800914a:	429a      	cmp	r2, r3
 800914c:	d364      	bcc.n	8009218 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	1c9a      	adds	r2, r3, #2
 8009152:	617a      	str	r2, [r7, #20]
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	823b      	strh	r3, [r7, #16]
 8009158:	8a3b      	ldrh	r3, [r7, #16]
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	81fb      	strh	r3, [r7, #14]
 800915e:	8a3b      	ldrh	r3, [r7, #16]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	8a79      	ldrh	r1, [r7, #18]
 8009168:	8a3b      	ldrh	r3, [r7, #16]
 800916a:	440b      	add	r3, r1
 800916c:	429a      	cmp	r2, r3
 800916e:	da49      	bge.n	8009204 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009170:	89fb      	ldrh	r3, [r7, #14]
 8009172:	2b08      	cmp	r3, #8
 8009174:	d84f      	bhi.n	8009216 <ff_wtoupper+0xfa>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <ff_wtoupper+0x60>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091b3 	.word	0x080091b3
 8009184:	080091c9 	.word	0x080091c9
 8009188:	080091d1 	.word	0x080091d1
 800918c:	080091d9 	.word	0x080091d9
 8009190:	080091e1 	.word	0x080091e1
 8009194:	080091e9 	.word	0x080091e9
 8009198:	080091f1 	.word	0x080091f1
 800919c:	080091f9 	.word	0x080091f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091a0:	88fa      	ldrh	r2, [r7, #6]
 80091a2:	8a7b      	ldrh	r3, [r7, #18]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	4413      	add	r3, r2
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	80fb      	strh	r3, [r7, #6]
 80091b0:	e027      	b.n	8009202 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091b2:	88fa      	ldrh	r2, [r7, #6]
 80091b4:	8a7b      	ldrh	r3, [r7, #18]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	b29b      	uxth	r3, r3
 80091c0:	88fa      	ldrh	r2, [r7, #6]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	80fb      	strh	r3, [r7, #6]
 80091c6:	e01c      	b.n	8009202 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	3b10      	subs	r3, #16
 80091cc:	80fb      	strh	r3, [r7, #6]
 80091ce:	e018      	b.n	8009202 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80091d0:	88fb      	ldrh	r3, [r7, #6]
 80091d2:	3b20      	subs	r3, #32
 80091d4:	80fb      	strh	r3, [r7, #6]
 80091d6:	e014      	b.n	8009202 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	3b30      	subs	r3, #48	; 0x30
 80091dc:	80fb      	strh	r3, [r7, #6]
 80091de:	e010      	b.n	8009202 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	3b1a      	subs	r3, #26
 80091e4:	80fb      	strh	r3, [r7, #6]
 80091e6:	e00c      	b.n	8009202 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80091e8:	88fb      	ldrh	r3, [r7, #6]
 80091ea:	3308      	adds	r3, #8
 80091ec:	80fb      	strh	r3, [r7, #6]
 80091ee:	e008      	b.n	8009202 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	3b50      	subs	r3, #80	; 0x50
 80091f4:	80fb      	strh	r3, [r7, #6]
 80091f6:	e004      	b.n	8009202 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80091fe:	80fb      	strh	r3, [r7, #6]
 8009200:	bf00      	nop
			}
			break;
 8009202:	e008      	b.n	8009216 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009204:	89fb      	ldrh	r3, [r7, #14]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d195      	bne.n	8009136 <ff_wtoupper+0x1a>
 800920a:	8a3b      	ldrh	r3, [r7, #16]
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4413      	add	r3, r2
 8009212:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009214:	e78f      	b.n	8009136 <ff_wtoupper+0x1a>
			break;
 8009216:	bf00      	nop
	}

	return chr;
 8009218:	88fb      	ldrh	r3, [r7, #6]
}
 800921a:	4618      	mov	r0, r3
 800921c:	371c      	adds	r7, #28
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	0800e76c 	.word	0x0800e76c
 800922c:	0800e960 	.word	0x0800e960

08009230 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800923c:	2200      	movs	r2, #0
 800923e:	2101      	movs	r1, #1
 8009240:	2001      	movs	r0, #1
 8009242:	f000 f9b5 	bl	80095b0 <osSemaphoreNew>
 8009246:	4602      	mov	r2, r0
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bf14      	ite	ne
 8009254:	2301      	movne	r3, #1
 8009256:	2300      	moveq	r3, #0
 8009258:	b2db      	uxtb	r3, r3
 800925a:	60fb      	str	r3, [r7, #12]

    return ret;
 800925c:	68fb      	ldr	r3, [r7, #12]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fabe 	bl	80097f0 <osSemaphoreDelete>
#endif
    return 1;
 8009274:	2301      	movs	r3, #1
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800928a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa18 	bl	80096c4 <osSemaphoreAcquire>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800929e:	68fb      	ldr	r3, [r7, #12]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fa59 	bl	8009768 <osSemaphoreRelease>
#endif
}
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f003 fa86 	bl	800c7d8 <pvPortMalloc>
 80092cc:	4603      	mov	r3, r0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f003 fb46 	bl	800c970 <vPortFree>
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <__NVIC_SetPriority>:
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	db0a      	blt.n	8009316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	b2da      	uxtb	r2, r3
 8009304:	490c      	ldr	r1, [pc, #48]	; (8009338 <__NVIC_SetPriority+0x4c>)
 8009306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800930a:	0112      	lsls	r2, r2, #4
 800930c:	b2d2      	uxtb	r2, r2
 800930e:	440b      	add	r3, r1
 8009310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009314:	e00a      	b.n	800932c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	b2da      	uxtb	r2, r3
 800931a:	4908      	ldr	r1, [pc, #32]	; (800933c <__NVIC_SetPriority+0x50>)
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	3b04      	subs	r3, #4
 8009324:	0112      	lsls	r2, r2, #4
 8009326:	b2d2      	uxtb	r2, r2
 8009328:	440b      	add	r3, r1
 800932a:	761a      	strb	r2, [r3, #24]
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	e000e100 	.word	0xe000e100
 800933c:	e000ed00 	.word	0xe000ed00

08009340 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009344:	2100      	movs	r1, #0
 8009346:	f06f 0004 	mvn.w	r0, #4
 800934a:	f7ff ffcf 	bl	80092ec <__NVIC_SetPriority>
#endif
}
 800934e:	bf00      	nop
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800935a:	f3ef 8305 	mrs	r3, IPSR
 800935e:	603b      	str	r3, [r7, #0]
  return(result);
 8009360:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009366:	f06f 0305 	mvn.w	r3, #5
 800936a:	607b      	str	r3, [r7, #4]
 800936c:	e00c      	b.n	8009388 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800936e:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <osKernelInitialize+0x44>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009376:	4b08      	ldr	r3, [pc, #32]	; (8009398 <osKernelInitialize+0x44>)
 8009378:	2201      	movs	r2, #1
 800937a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800937c:	2300      	movs	r3, #0
 800937e:	607b      	str	r3, [r7, #4]
 8009380:	e002      	b.n	8009388 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009382:	f04f 33ff 	mov.w	r3, #4294967295
 8009386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009388:	687b      	ldr	r3, [r7, #4]
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	200023bc 	.word	0x200023bc

0800939c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80093a2:	f002 faa1 	bl	800b8e8 <xTaskGetSchedulerState>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <osKernelGetState+0x1a>
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d105      	bne.n	80093bc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80093b0:	2302      	movs	r3, #2
 80093b2:	607b      	str	r3, [r7, #4]
      break;
 80093b4:	e00c      	b.n	80093d0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80093b6:	2303      	movs	r3, #3
 80093b8:	607b      	str	r3, [r7, #4]
      break;
 80093ba:	e009      	b.n	80093d0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <osKernelGetState+0x40>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d102      	bne.n	80093ca <osKernelGetState+0x2e>
        state = osKernelReady;
 80093c4:	2301      	movs	r3, #1
 80093c6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80093c8:	e001      	b.n	80093ce <osKernelGetState+0x32>
        state = osKernelInactive;
 80093ca:	2300      	movs	r3, #0
 80093cc:	607b      	str	r3, [r7, #4]
      break;
 80093ce:	bf00      	nop
  }

  return (state);
 80093d0:	687b      	ldr	r3, [r7, #4]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	200023bc 	.word	0x200023bc

080093e0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093e6:	f3ef 8305 	mrs	r3, IPSR
 80093ea:	603b      	str	r3, [r7, #0]
  return(result);
 80093ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80093f2:	f06f 0305 	mvn.w	r3, #5
 80093f6:	607b      	str	r3, [r7, #4]
 80093f8:	e010      	b.n	800941c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093fa:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <osKernelStart+0x48>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d109      	bne.n	8009416 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009402:	f7ff ff9d 	bl	8009340 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009406:	4b08      	ldr	r3, [pc, #32]	; (8009428 <osKernelStart+0x48>)
 8009408:	2202      	movs	r2, #2
 800940a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800940c:	f001 fe12 	bl	800b034 <vTaskStartScheduler>
      stat = osOK;
 8009410:	2300      	movs	r3, #0
 8009412:	607b      	str	r3, [r7, #4]
 8009414:	e002      	b.n	800941c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009416:	f04f 33ff 	mov.w	r3, #4294967295
 800941a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800941c:	687b      	ldr	r3, [r7, #4]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	200023bc 	.word	0x200023bc

0800942c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009432:	f3ef 8305 	mrs	r3, IPSR
 8009436:	603b      	str	r3, [r7, #0]
  return(result);
 8009438:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800943e:	f001 ff1b 	bl	800b278 <xTaskGetTickCountFromISR>
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	e002      	b.n	800944c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009446:	f001 ff07 	bl	800b258 <xTaskGetTickCount>
 800944a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800944c:	687b      	ldr	r3, [r7, #4]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009456:	b580      	push	{r7, lr}
 8009458:	b08e      	sub	sp, #56	; 0x38
 800945a:	af04      	add	r7, sp, #16
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009466:	f3ef 8305 	mrs	r3, IPSR
 800946a:	617b      	str	r3, [r7, #20]
  return(result);
 800946c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800946e:	2b00      	cmp	r3, #0
 8009470:	d17e      	bne.n	8009570 <osThreadNew+0x11a>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d07b      	beq.n	8009570 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009478:	2380      	movs	r3, #128	; 0x80
 800947a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800947c:	2318      	movs	r3, #24
 800947e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009480:	2300      	movs	r3, #0
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009484:	f04f 33ff 	mov.w	r3, #4294967295
 8009488:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d045      	beq.n	800951c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <osThreadNew+0x48>
        name = attr->name;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d008      	beq.n	80094c4 <osThreadNew+0x6e>
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	2b38      	cmp	r3, #56	; 0x38
 80094b6:	d805      	bhi.n	80094c4 <osThreadNew+0x6e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <osThreadNew+0x72>
        return (NULL);
 80094c4:	2300      	movs	r3, #0
 80094c6:	e054      	b.n	8009572 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	089b      	lsrs	r3, r3, #2
 80094d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00e      	beq.n	80094fe <osThreadNew+0xa8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b5b      	cmp	r3, #91	; 0x5b
 80094e6:	d90a      	bls.n	80094fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d006      	beq.n	80094fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <osThreadNew+0xa8>
        mem = 1;
 80094f8:	2301      	movs	r3, #1
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	e010      	b.n	8009520 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10c      	bne.n	8009520 <osThreadNew+0xca>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d108      	bne.n	8009520 <osThreadNew+0xca>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d104      	bne.n	8009520 <osThreadNew+0xca>
          mem = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	61bb      	str	r3, [r7, #24]
 800951a:	e001      	b.n	8009520 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d110      	bne.n	8009548 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800952e:	9202      	str	r2, [sp, #8]
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6a3a      	ldr	r2, [r7, #32]
 800953a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f001 fba3 	bl	800ac88 <xTaskCreateStatic>
 8009542:	4603      	mov	r3, r0
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	e013      	b.n	8009570 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d110      	bne.n	8009570 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	b29a      	uxth	r2, r3
 8009552:	f107 0310 	add.w	r3, r7, #16
 8009556:	9301      	str	r3, [sp, #4]
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f001 fbee 	bl	800ad42 <xTaskCreate>
 8009566:	4603      	mov	r3, r0
 8009568:	2b01      	cmp	r3, #1
 800956a:	d001      	beq.n	8009570 <osThreadNew+0x11a>
            hTask = NULL;
 800956c:	2300      	movs	r3, #0
 800956e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009570:	693b      	ldr	r3, [r7, #16]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3728      	adds	r7, #40	; 0x28
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009582:	f3ef 8305 	mrs	r3, IPSR
 8009586:	60bb      	str	r3, [r7, #8]
  return(result);
 8009588:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <osDelay+0x1c>
    stat = osErrorISR;
 800958e:	f06f 0305 	mvn.w	r3, #5
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	e007      	b.n	80095a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fd13 	bl	800afcc <vTaskDelay>
    }
  }

  return (stat);
 80095a6:	68fb      	ldr	r3, [r7, #12]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095c0:	f3ef 8305 	mrs	r3, IPSR
 80095c4:	613b      	str	r3, [r7, #16]
  return(result);
 80095c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d175      	bne.n	80096b8 <osSemaphoreNew+0x108>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d072      	beq.n	80096b8 <osSemaphoreNew+0x108>
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d86e      	bhi.n	80096b8 <osSemaphoreNew+0x108>
    mem = -1;
 80095da:	f04f 33ff 	mov.w	r3, #4294967295
 80095de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d015      	beq.n	8009612 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d006      	beq.n	80095fc <osSemaphoreNew+0x4c>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	2b4f      	cmp	r3, #79	; 0x4f
 80095f4:	d902      	bls.n	80095fc <osSemaphoreNew+0x4c>
        mem = 1;
 80095f6:	2301      	movs	r3, #1
 80095f8:	61bb      	str	r3, [r7, #24]
 80095fa:	e00c      	b.n	8009616 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d108      	bne.n	8009616 <osSemaphoreNew+0x66>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <osSemaphoreNew+0x66>
          mem = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	e001      	b.n	8009616 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961c:	d04c      	beq.n	80096b8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d128      	bne.n	8009676 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d10a      	bne.n	8009640 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2203      	movs	r2, #3
 8009630:	9200      	str	r2, [sp, #0]
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	2001      	movs	r0, #1
 8009638:	f000 fb80 	bl	8009d3c <xQueueGenericCreateStatic>
 800963c:	61f8      	str	r0, [r7, #28]
 800963e:	e005      	b.n	800964c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009640:	2203      	movs	r2, #3
 8009642:	2100      	movs	r1, #0
 8009644:	2001      	movs	r0, #1
 8009646:	f000 fbf1 	bl	8009e2c <xQueueGenericCreate>
 800964a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d022      	beq.n	8009698 <osSemaphoreNew+0xe8>
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01f      	beq.n	8009698 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009658:	2300      	movs	r3, #0
 800965a:	2200      	movs	r2, #0
 800965c:	2100      	movs	r1, #0
 800965e:	69f8      	ldr	r0, [r7, #28]
 8009660:	f000 fcac 	bl	8009fbc <xQueueGenericSend>
 8009664:	4603      	mov	r3, r0
 8009666:	2b01      	cmp	r3, #1
 8009668:	d016      	beq.n	8009698 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800966a:	69f8      	ldr	r0, [r7, #28]
 800966c:	f001 f938 	bl	800a8e0 <vQueueDelete>
            hSemaphore = NULL;
 8009670:	2300      	movs	r3, #0
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	e010      	b.n	8009698 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d108      	bne.n	800968e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	461a      	mov	r2, r3
 8009682:	68b9      	ldr	r1, [r7, #8]
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 fc2e 	bl	8009ee6 <xQueueCreateCountingSemaphoreStatic>
 800968a:	61f8      	str	r0, [r7, #28]
 800968c:	e004      	b.n	8009698 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 fc5f 	bl	8009f54 <xQueueCreateCountingSemaphore>
 8009696:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00c      	beq.n	80096b8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <osSemaphoreNew+0xfc>
          name = attr->name;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	617b      	str	r3, [r7, #20]
 80096aa:	e001      	b.n	80096b0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80096b0:	6979      	ldr	r1, [r7, #20]
 80096b2:	69f8      	ldr	r0, [r7, #28]
 80096b4:	f001 fa60 	bl	800ab78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80096b8:	69fb      	ldr	r3, [r7, #28]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3720      	adds	r7, #32
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d103      	bne.n	80096e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80096dc:	f06f 0303 	mvn.w	r3, #3
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e039      	b.n	8009758 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096e4:	f3ef 8305 	mrs	r3, IPSR
 80096e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80096ea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d022      	beq.n	8009736 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80096f6:	f06f 0303 	mvn.w	r3, #3
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e02c      	b.n	8009758 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80096fe:	2300      	movs	r3, #0
 8009700:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	461a      	mov	r2, r3
 8009708:	2100      	movs	r1, #0
 800970a:	6938      	ldr	r0, [r7, #16]
 800970c:	f001 f868 	bl	800a7e0 <xQueueReceiveFromISR>
 8009710:	4603      	mov	r3, r0
 8009712:	2b01      	cmp	r3, #1
 8009714:	d003      	beq.n	800971e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009716:	f06f 0302 	mvn.w	r3, #2
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	e01c      	b.n	8009758 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d019      	beq.n	8009758 <osSemaphoreAcquire+0x94>
 8009724:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <osSemaphoreAcquire+0xa0>)
 8009726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	e010      	b.n	8009758 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6938      	ldr	r0, [r7, #16]
 800973a:	f000 ff45 	bl	800a5c8 <xQueueSemaphoreTake>
 800973e:	4603      	mov	r3, r0
 8009740:	2b01      	cmp	r3, #1
 8009742:	d009      	beq.n	8009758 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800974a:	f06f 0301 	mvn.w	r3, #1
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e002      	b.n	8009758 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009752:	f06f 0302 	mvn.w	r3, #2
 8009756:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009758:	697b      	ldr	r3, [r7, #20]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d103      	bne.n	8009786 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800977e:	f06f 0303 	mvn.w	r3, #3
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	e02c      	b.n	80097e0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009786:	f3ef 8305 	mrs	r3, IPSR
 800978a:	60fb      	str	r3, [r7, #12]
  return(result);
 800978c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01a      	beq.n	80097c8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009792:	2300      	movs	r3, #0
 8009794:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	4619      	mov	r1, r3
 800979c:	6938      	ldr	r0, [r7, #16]
 800979e:	f000 fda6 	bl	800a2ee <xQueueGiveFromISR>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d003      	beq.n	80097b0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80097a8:	f06f 0302 	mvn.w	r3, #2
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	e017      	b.n	80097e0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d014      	beq.n	80097e0 <osSemaphoreRelease+0x78>
 80097b6:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <osSemaphoreRelease+0x84>)
 80097b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	e00b      	b.n	80097e0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097c8:	2300      	movs	r3, #0
 80097ca:	2200      	movs	r2, #0
 80097cc:	2100      	movs	r1, #0
 80097ce:	6938      	ldr	r0, [r7, #16]
 80097d0:	f000 fbf4 	bl	8009fbc <xQueueGenericSend>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d002      	beq.n	80097e0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80097da:	f06f 0302 	mvn.w	r3, #2
 80097de:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80097e0:	697b      	ldr	r3, [r7, #20]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097fc:	f3ef 8305 	mrs	r3, IPSR
 8009800:	60fb      	str	r3, [r7, #12]
  return(result);
 8009802:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009808:	f06f 0305 	mvn.w	r3, #5
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	e00e      	b.n	800982e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009816:	f06f 0303 	mvn.w	r3, #3
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e007      	b.n	800982e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800981e:	6938      	ldr	r0, [r7, #16]
 8009820:	f001 f9d4 	bl	800abcc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009824:	2300      	movs	r3, #0
 8009826:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009828:	6938      	ldr	r0, [r7, #16]
 800982a:	f001 f859 	bl	800a8e0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800982e:	697b      	ldr	r3, [r7, #20]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b08a      	sub	sp, #40	; 0x28
 800983c:	af02      	add	r7, sp, #8
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009848:	f3ef 8305 	mrs	r3, IPSR
 800984c:	613b      	str	r3, [r7, #16]
  return(result);
 800984e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009850:	2b00      	cmp	r3, #0
 8009852:	d15f      	bne.n	8009914 <osMessageQueueNew+0xdc>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d05c      	beq.n	8009914 <osMessageQueueNew+0xdc>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d059      	beq.n	8009914 <osMessageQueueNew+0xdc>
    mem = -1;
 8009860:	f04f 33ff 	mov.w	r3, #4294967295
 8009864:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d029      	beq.n	80098c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d012      	beq.n	800989a <osMessageQueueNew+0x62>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b4f      	cmp	r3, #79	; 0x4f
 800987a:	d90e      	bls.n	800989a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	695a      	ldr	r2, [r3, #20]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	68b9      	ldr	r1, [r7, #8]
 800988c:	fb01 f303 	mul.w	r3, r1, r3
 8009890:	429a      	cmp	r2, r3
 8009892:	d302      	bcc.n	800989a <osMessageQueueNew+0x62>
        mem = 1;
 8009894:	2301      	movs	r3, #1
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	e014      	b.n	80098c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d110      	bne.n	80098c4 <osMessageQueueNew+0x8c>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10c      	bne.n	80098c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d108      	bne.n	80098c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d104      	bne.n	80098c4 <osMessageQueueNew+0x8c>
          mem = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	e001      	b.n	80098c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d10b      	bne.n	80098e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691a      	ldr	r2, [r3, #16]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	2100      	movs	r1, #0
 80098d4:	9100      	str	r1, [sp, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fa2f 	bl	8009d3c <xQueueGenericCreateStatic>
 80098de:	61f8      	str	r0, [r7, #28]
 80098e0:	e008      	b.n	80098f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d105      	bne.n	80098f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098e8:	2200      	movs	r2, #0
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fa9d 	bl	8009e2c <xQueueGenericCreate>
 80098f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00c      	beq.n	8009914 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	e001      	b.n	800990c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009908:	2300      	movs	r3, #0
 800990a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800990c:	6979      	ldr	r1, [r7, #20]
 800990e:	69f8      	ldr	r0, [r7, #28]
 8009910:	f001 f932 	bl	800ab78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009914:	69fb      	ldr	r3, [r7, #28]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3720      	adds	r7, #32
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009920:	b580      	push	{r7, lr}
 8009922:	b088      	sub	sp, #32
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	4613      	mov	r3, r2
 800992e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009934:	2300      	movs	r3, #0
 8009936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009938:	f3ef 8305 	mrs	r3, IPSR
 800993c:	617b      	str	r3, [r7, #20]
  return(result);
 800993e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009940:	2b00      	cmp	r3, #0
 8009942:	d028      	beq.n	8009996 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <osMessageQueuePut+0x36>
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <osMessageQueuePut+0x36>
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009956:	f06f 0303 	mvn.w	r3, #3
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	e038      	b.n	80099d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800995e:	2300      	movs	r3, #0
 8009960:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009962:	f107 0210 	add.w	r2, r7, #16
 8009966:	2300      	movs	r3, #0
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	69b8      	ldr	r0, [r7, #24]
 800996c:	f000 fc24 	bl	800a1b8 <xQueueGenericSendFromISR>
 8009970:	4603      	mov	r3, r0
 8009972:	2b01      	cmp	r3, #1
 8009974:	d003      	beq.n	800997e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009976:	f06f 0302 	mvn.w	r3, #2
 800997a:	61fb      	str	r3, [r7, #28]
 800997c:	e028      	b.n	80099d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d025      	beq.n	80099d0 <osMessageQueuePut+0xb0>
 8009984:	4b15      	ldr	r3, [pc, #84]	; (80099dc <osMessageQueuePut+0xbc>)
 8009986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	e01c      	b.n	80099d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <osMessageQueuePut+0x82>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80099a2:	f06f 0303 	mvn.w	r3, #3
 80099a6:	61fb      	str	r3, [r7, #28]
 80099a8:	e012      	b.n	80099d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80099aa:	2300      	movs	r3, #0
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	69b8      	ldr	r0, [r7, #24]
 80099b2:	f000 fb03 	bl	8009fbc <xQueueGenericSend>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d009      	beq.n	80099d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80099c2:	f06f 0301 	mvn.w	r3, #1
 80099c6:	61fb      	str	r3, [r7, #28]
 80099c8:	e002      	b.n	80099d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80099ca:	f06f 0302 	mvn.w	r3, #2
 80099ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80099d0:	69fb      	ldr	r3, [r7, #28]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3720      	adds	r7, #32
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099f6:	f3ef 8305 	mrs	r3, IPSR
 80099fa:	617b      	str	r3, [r7, #20]
  return(result);
 80099fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d028      	beq.n	8009a54 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <osMessageQueueGet+0x34>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <osMessageQueueGet+0x34>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009a14:	f06f 0303 	mvn.w	r3, #3
 8009a18:	61fb      	str	r3, [r7, #28]
 8009a1a:	e037      	b.n	8009a8c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009a20:	f107 0310 	add.w	r3, r7, #16
 8009a24:	461a      	mov	r2, r3
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	69b8      	ldr	r0, [r7, #24]
 8009a2a:	f000 fed9 	bl	800a7e0 <xQueueReceiveFromISR>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d003      	beq.n	8009a3c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009a34:	f06f 0302 	mvn.w	r3, #2
 8009a38:	61fb      	str	r3, [r7, #28]
 8009a3a:	e027      	b.n	8009a8c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d024      	beq.n	8009a8c <osMessageQueueGet+0xac>
 8009a42:	4b15      	ldr	r3, [pc, #84]	; (8009a98 <osMessageQueueGet+0xb8>)
 8009a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	e01b      	b.n	8009a8c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <osMessageQueueGet+0x80>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a60:	f06f 0303 	mvn.w	r3, #3
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	e011      	b.n	8009a8c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	69b8      	ldr	r0, [r7, #24]
 8009a6e:	f000 fccb 	bl	800a408 <xQueueReceive>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d009      	beq.n	8009a8c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a7e:	f06f 0301 	mvn.w	r3, #1
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	e002      	b.n	8009a8c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a86:	f06f 0302 	mvn.w	r3, #2
 8009a8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4a07      	ldr	r2, [pc, #28]	; (8009ac8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009aac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	4a06      	ldr	r2, [pc, #24]	; (8009acc <vApplicationGetIdleTaskMemory+0x30>)
 8009ab2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2280      	movs	r2, #128	; 0x80
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	200023c0 	.word	0x200023c0
 8009acc:	2000241c 	.word	0x2000241c

08009ad0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4a07      	ldr	r2, [pc, #28]	; (8009afc <vApplicationGetTimerTaskMemory+0x2c>)
 8009ae0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4a06      	ldr	r2, [pc, #24]	; (8009b00 <vApplicationGetTimerTaskMemory+0x30>)
 8009ae6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009aee:	601a      	str	r2, [r3, #0]
}
 8009af0:	bf00      	nop
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	2000261c 	.word	0x2000261c
 8009b00:	20002678 	.word	0x20002678

08009b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f103 0208 	add.w	r2, r3, #8
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f103 0208 	add.w	r2, r3, #8
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f103 0208 	add.w	r2, r3, #8
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b085      	sub	sp, #20
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
}
 8009b9a:	bf00      	nop
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbc:	d103      	bne.n	8009bc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	e00c      	b.n	8009be0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e002      	b.n	8009bd4 <vListInsert+0x2e>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d2f6      	bcs.n	8009bce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	601a      	str	r2, [r3, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	6892      	ldr	r2, [r2, #8]
 8009c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	6852      	ldr	r2, [r2, #4]
 8009c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d103      	bne.n	8009c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	1e5a      	subs	r2, r3, #1
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c96:	f002 fc7d 	bl	800c594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca2:	68f9      	ldr	r1, [r7, #12]
 8009ca4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ca6:	fb01 f303 	mul.w	r3, r1, r3
 8009caa:	441a      	add	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	441a      	add	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	22ff      	movs	r2, #255	; 0xff
 8009cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	22ff      	movs	r2, #255	; 0xff
 8009ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d114      	bne.n	8009d16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d01a      	beq.n	8009d2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3310      	adds	r3, #16
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fc37 	bl	800b56c <xTaskRemoveFromEventList>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d012      	beq.n	8009d2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d04:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <xQueueGenericReset+0xcc>)
 8009d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	e009      	b.n	8009d2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3310      	adds	r3, #16
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff fef2 	bl	8009b04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3324      	adds	r3, #36	; 0x24
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff feed 	bl	8009b04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d2a:	f002 fc63 	bl	800c5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d2e:	2301      	movs	r3, #1
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08e      	sub	sp, #56	; 0x38
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10a      	bne.n	8009d82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d7e:	bf00      	nop
 8009d80:	e7fe      	b.n	8009d80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <xQueueGenericCreateStatic+0x52>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <xQueueGenericCreateStatic+0x56>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <xQueueGenericCreateStatic+0x58>
 8009d92:	2300      	movs	r3, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10a      	bne.n	8009dae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	623b      	str	r3, [r7, #32]
}
 8009daa:	bf00      	nop
 8009dac:	e7fe      	b.n	8009dac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <xQueueGenericCreateStatic+0x7e>
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <xQueueGenericCreateStatic+0x82>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e000      	b.n	8009dc0 <xQueueGenericCreateStatic+0x84>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	61fb      	str	r3, [r7, #28]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dda:	2350      	movs	r3, #80	; 0x50
 8009ddc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b50      	cmp	r3, #80	; 0x50
 8009de2:	d00a      	beq.n	8009dfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	61bb      	str	r3, [r7, #24]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4613      	mov	r3, r2
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	68b9      	ldr	r1, [r7, #8]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f83f 	bl	8009ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3730      	adds	r7, #48	; 0x30
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	; 0x28
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	fb02 f303 	mul.w	r3, r2, r3
 8009e5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	3350      	adds	r3, #80	; 0x50
 8009e64:	4618      	mov	r0, r3
 8009e66:	f002 fcb7 	bl	800c7d8 <pvPortMalloc>
 8009e6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d011      	beq.n	8009e96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	3350      	adds	r3, #80	; 0x50
 8009e7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e84:	79fa      	ldrb	r2, [r7, #7]
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f805 	bl	8009ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e96:	69bb      	ldr	r3, [r7, #24]
	}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3720      	adds	r7, #32
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ece:	2101      	movs	r1, #1
 8009ed0:	69b8      	ldr	r0, [r7, #24]
 8009ed2:	f7ff fecb 	bl	8009c6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	78fa      	ldrb	r2, [r7, #3]
 8009eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b08a      	sub	sp, #40	; 0x28
 8009eea:	af02      	add	r7, sp, #8
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	61bb      	str	r3, [r7, #24]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d90a      	bls.n	8009f2c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	617b      	str	r3, [r7, #20]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	2100      	movs	r1, #0
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7ff ff00 	bl	8009d3c <xQueueGenericCreateStatic>
 8009f3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10a      	bne.n	8009f7a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	613b      	str	r3, [r7, #16]
}
 8009f76:	bf00      	nop
 8009f78:	e7fe      	b.n	8009f78 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d90a      	bls.n	8009f98 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	60fb      	str	r3, [r7, #12]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f98:	2202      	movs	r2, #2
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff ff45 	bl	8009e2c <xQueueGenericCreate>
 8009fa2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fb0:	697b      	ldr	r3, [r7, #20]
	}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	; 0x38
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <xQueueGenericSend+0x32>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <xQueueGenericSend+0x40>
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <xQueueGenericSend+0x44>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <xQueueGenericSend+0x46>
 800a000:	2300      	movs	r3, #0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10a      	bne.n	800a01c <xQueueGenericSend+0x60>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a018:	bf00      	nop
 800a01a:	e7fe      	b.n	800a01a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d103      	bne.n	800a02a <xQueueGenericSend+0x6e>
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <xQueueGenericSend+0x72>
 800a02a:	2301      	movs	r3, #1
 800a02c:	e000      	b.n	800a030 <xQueueGenericSend+0x74>
 800a02e:	2300      	movs	r3, #0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <xQueueGenericSend+0x8e>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	623b      	str	r3, [r7, #32]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a04a:	f001 fc4d 	bl	800b8e8 <xTaskGetSchedulerState>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <xQueueGenericSend+0x9e>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <xQueueGenericSend+0xa2>
 800a05a:	2301      	movs	r3, #1
 800a05c:	e000      	b.n	800a060 <xQueueGenericSend+0xa4>
 800a05e:	2300      	movs	r3, #0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10a      	bne.n	800a07a <xQueueGenericSend+0xbe>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	61fb      	str	r3, [r7, #28]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a07a:	f002 fa8b 	bl	800c594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	429a      	cmp	r2, r3
 800a088:	d302      	bcc.n	800a090 <xQueueGenericSend+0xd4>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d129      	bne.n	800a0e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a096:	f000 fc5e 	bl	800a956 <prvCopyDataToQueue>
 800a09a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d010      	beq.n	800a0c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	3324      	adds	r3, #36	; 0x24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f001 fa5f 	bl	800b56c <xTaskRemoveFromEventList>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d013      	beq.n	800a0dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0b4:	4b3f      	ldr	r3, [pc, #252]	; (800a1b4 <xQueueGenericSend+0x1f8>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	e00a      	b.n	800a0dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0cc:	4b39      	ldr	r3, [pc, #228]	; (800a1b4 <xQueueGenericSend+0x1f8>)
 800a0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0dc:	f002 fa8a 	bl	800c5f4 <vPortExitCritical>
				return pdPASS;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e063      	b.n	800a1ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0ea:	f002 fa83 	bl	800c5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e05c      	b.n	800a1ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d106      	bne.n	800a106 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0f8:	f107 0314 	add.w	r3, r7, #20
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fa99 	bl	800b634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a102:	2301      	movs	r3, #1
 800a104:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a106:	f002 fa75 	bl	800c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a10a:	f000 fff9 	bl	800b100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a10e:	f002 fa41 	bl	800c594 <vPortEnterCritical>
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a118:	b25b      	sxtb	r3, r3
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d103      	bne.n	800a128 <xQueueGenericSend+0x16c>
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a12e:	b25b      	sxtb	r3, r3
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d103      	bne.n	800a13e <xQueueGenericSend+0x182>
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a13e:	f002 fa59 	bl	800c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a142:	1d3a      	adds	r2, r7, #4
 800a144:	f107 0314 	add.w	r3, r7, #20
 800a148:	4611      	mov	r1, r2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f001 fa88 	bl	800b660 <xTaskCheckForTimeOut>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d124      	bne.n	800a1a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a158:	f000 fcf5 	bl	800ab46 <prvIsQueueFull>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d018      	beq.n	800a194 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	3310      	adds	r3, #16
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 f9ae 	bl	800b4cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a172:	f000 fc80 	bl	800aa76 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a176:	f000 ffd1 	bl	800b11c <xTaskResumeAll>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f47f af7c 	bne.w	800a07a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a182:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <xQueueGenericSend+0x1f8>)
 800a184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	e772      	b.n	800a07a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a196:	f000 fc6e 	bl	800aa76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a19a:	f000 ffbf 	bl	800b11c <xTaskResumeAll>
 800a19e:	e76c      	b.n	800a07a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a2:	f000 fc68 	bl	800aa76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1a6:	f000 ffb9 	bl	800b11c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3738      	adds	r7, #56	; 0x38
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b090      	sub	sp, #64	; 0x40
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d103      	bne.n	800a1f4 <xQueueGenericSendFromISR+0x3c>
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <xQueueGenericSendFromISR+0x40>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <xQueueGenericSendFromISR+0x42>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d103      	bne.n	800a222 <xQueueGenericSendFromISR+0x6a>
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <xQueueGenericSendFromISR+0x6e>
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <xQueueGenericSendFromISR+0x70>
 800a226:	2300      	movs	r3, #0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	623b      	str	r3, [r7, #32]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a242:	f002 fa89 	bl	800c758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a246:	f3ef 8211 	mrs	r2, BASEPRI
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	61fa      	str	r2, [r7, #28]
 800a25c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a25e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d302      	bcc.n	800a274 <xQueueGenericSendFromISR+0xbc>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d12f      	bne.n	800a2d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a282:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a28a:	f000 fb64 	bl	800a956 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a28e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a296:	d112      	bne.n	800a2be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d016      	beq.n	800a2ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	3324      	adds	r3, #36	; 0x24
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 f961 	bl	800b56c <xTaskRemoveFromEventList>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00e      	beq.n	800a2ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00b      	beq.n	800a2ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	e007      	b.n	800a2ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	b25a      	sxtb	r2, r3
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2d2:	e001      	b.n	800a2d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3740      	adds	r7, #64	; 0x40
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b08e      	sub	sp, #56	; 0x38
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	623b      	str	r3, [r7, #32]
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00a      	beq.n	800a336 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	61fb      	str	r3, [r7, #28]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d103      	bne.n	800a346 <xQueueGiveFromISR+0x58>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <xQueueGiveFromISR+0x5c>
 800a346:	2301      	movs	r3, #1
 800a348:	e000      	b.n	800a34c <xQueueGiveFromISR+0x5e>
 800a34a:	2300      	movs	r3, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	61bb      	str	r3, [r7, #24]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a366:	f002 f9f7 	bl	800c758 <vPortValidateInterruptPriority>
	__asm volatile
 800a36a:	f3ef 8211 	mrs	r2, BASEPRI
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	617a      	str	r2, [r7, #20]
 800a380:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a382:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a384:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a392:	429a      	cmp	r2, r3
 800a394:	d22b      	bcs.n	800a3ee <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b0:	d112      	bne.n	800a3d8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d016      	beq.n	800a3e8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	3324      	adds	r3, #36	; 0x24
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 f8d4 	bl	800b56c <xTaskRemoveFromEventList>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00e      	beq.n	800a3e8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00b      	beq.n	800a3e8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	e007      	b.n	800a3e8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3dc:	3301      	adds	r3, #1
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	b25a      	sxtb	r2, r3
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ec:	e001      	b.n	800a3f2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f383 8811 	msr	BASEPRI, r3
}
 800a3fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a400:	4618      	mov	r0, r3
 800a402:	3738      	adds	r7, #56	; 0x38
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08c      	sub	sp, #48	; 0x30
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a414:	2300      	movs	r3, #0
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10a      	bne.n	800a438 <xQueueReceive+0x30>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	623b      	str	r3, [r7, #32]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d103      	bne.n	800a446 <xQueueReceive+0x3e>
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <xQueueReceive+0x42>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <xQueueReceive+0x44>
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <xQueueReceive+0x5e>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	61fb      	str	r3, [r7, #28]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a466:	f001 fa3f 	bl	800b8e8 <xTaskGetSchedulerState>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <xQueueReceive+0x6e>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <xQueueReceive+0x72>
 800a476:	2301      	movs	r3, #1
 800a478:	e000      	b.n	800a47c <xQueueReceive+0x74>
 800a47a:	2300      	movs	r3, #0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <xQueueReceive+0x8e>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	61bb      	str	r3, [r7, #24]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a496:	f002 f87d 	bl	800c594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d01f      	beq.n	800a4e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4aa:	f000 fabe 	bl	800aa2a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	1e5a      	subs	r2, r3, #1
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00f      	beq.n	800a4de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f001 f852 	bl	800b56c <xTaskRemoveFromEventList>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d007      	beq.n	800a4de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4ce:	4b3d      	ldr	r3, [pc, #244]	; (800a5c4 <xQueueReceive+0x1bc>)
 800a4d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4de:	f002 f889 	bl	800c5f4 <vPortExitCritical>
				return pdPASS;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e069      	b.n	800a5ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d103      	bne.n	800a4f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4ec:	f002 f882 	bl	800c5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e062      	b.n	800a5ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4fa:	f107 0310 	add.w	r3, r7, #16
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 f898 	bl	800b634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a508:	f002 f874 	bl	800c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a50c:	f000 fdf8 	bl	800b100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a510:	f002 f840 	bl	800c594 <vPortEnterCritical>
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a51a:	b25b      	sxtb	r3, r3
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a520:	d103      	bne.n	800a52a <xQueueReceive+0x122>
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	2200      	movs	r2, #0
 800a526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a530:	b25b      	sxtb	r3, r3
 800a532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a536:	d103      	bne.n	800a540 <xQueueReceive+0x138>
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a540:	f002 f858 	bl	800c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a544:	1d3a      	adds	r2, r7, #4
 800a546:	f107 0310 	add.w	r3, r7, #16
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f001 f887 	bl	800b660 <xTaskCheckForTimeOut>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d123      	bne.n	800a5a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55a:	f000 fade 	bl	800ab1a <prvIsQueueEmpty>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d017      	beq.n	800a594 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	3324      	adds	r3, #36	; 0x24
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 ffad 	bl	800b4cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a574:	f000 fa7f 	bl	800aa76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a578:	f000 fdd0 	bl	800b11c <xTaskResumeAll>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d189      	bne.n	800a496 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a582:	4b10      	ldr	r3, [pc, #64]	; (800a5c4 <xQueueReceive+0x1bc>)
 800a584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	e780      	b.n	800a496 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a596:	f000 fa6e 	bl	800aa76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a59a:	f000 fdbf 	bl	800b11c <xTaskResumeAll>
 800a59e:	e77a      	b.n	800a496 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a2:	f000 fa68 	bl	800aa76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5a6:	f000 fdb9 	bl	800b11c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ac:	f000 fab5 	bl	800ab1a <prvIsQueueEmpty>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f43f af6f 	beq.w	800a496 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3730      	adds	r7, #48	; 0x30
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08e      	sub	sp, #56	; 0x38
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10a      	bne.n	800a5fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	623b      	str	r3, [r7, #32]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00a      	beq.n	800a618 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	61fb      	str	r3, [r7, #28]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a618:	f001 f966 	bl	800b8e8 <xTaskGetSchedulerState>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d102      	bne.n	800a628 <xQueueSemaphoreTake+0x60>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <xQueueSemaphoreTake+0x64>
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <xQueueSemaphoreTake+0x66>
 800a62c:	2300      	movs	r3, #0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10a      	bne.n	800a648 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	61bb      	str	r3, [r7, #24]
}
 800a644:	bf00      	nop
 800a646:	e7fe      	b.n	800a646 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a648:	f001 ffa4 	bl	800c594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	2b00      	cmp	r3, #0
 800a656:	d024      	beq.n	800a6a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	1e5a      	subs	r2, r3, #1
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d104      	bne.n	800a672 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a668:	f001 fab4 	bl	800bbd4 <pvTaskIncrementMutexHeldCount>
 800a66c:	4602      	mov	r2, r0
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00f      	beq.n	800a69a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	3310      	adds	r3, #16
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 ff74 	bl	800b56c <xTaskRemoveFromEventList>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d007      	beq.n	800a69a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a68a:	4b54      	ldr	r3, [pc, #336]	; (800a7dc <xQueueSemaphoreTake+0x214>)
 800a68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a69a:	f001 ffab 	bl	800c5f4 <vPortExitCritical>
				return pdPASS;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e097      	b.n	800a7d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d111      	bne.n	800a6cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	617b      	str	r3, [r7, #20]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6c4:	f001 ff96 	bl	800c5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e082      	b.n	800a7d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d2:	f107 030c 	add.w	r3, r7, #12
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 ffac 	bl	800b634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e0:	f001 ff88 	bl	800c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e4:	f000 fd0c 	bl	800b100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6e8:	f001 ff54 	bl	800c594 <vPortEnterCritical>
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f2:	b25b      	sxtb	r3, r3
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d103      	bne.n	800a702 <xQueueSemaphoreTake+0x13a>
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <xQueueSemaphoreTake+0x150>
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a718:	f001 ff6c 	bl	800c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a71c:	463a      	mov	r2, r7
 800a71e:	f107 030c 	add.w	r3, r7, #12
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f000 ff9b 	bl	800b660 <xTaskCheckForTimeOut>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d132      	bne.n	800a796 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a732:	f000 f9f2 	bl	800ab1a <prvIsQueueEmpty>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d026      	beq.n	800a78a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d109      	bne.n	800a758 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a744:	f001 ff26 	bl	800c594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f001 f8e9 	bl	800b924 <xTaskPriorityInherit>
 800a752:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a754:	f001 ff4e 	bl	800c5f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75a:	3324      	adds	r3, #36	; 0x24
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	4611      	mov	r1, r2
 800a760:	4618      	mov	r0, r3
 800a762:	f000 feb3 	bl	800b4cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a768:	f000 f985 	bl	800aa76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a76c:	f000 fcd6 	bl	800b11c <xTaskResumeAll>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	f47f af68 	bne.w	800a648 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a778:	4b18      	ldr	r3, [pc, #96]	; (800a7dc <xQueueSemaphoreTake+0x214>)
 800a77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	e75e      	b.n	800a648 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a78a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a78c:	f000 f973 	bl	800aa76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a790:	f000 fcc4 	bl	800b11c <xTaskResumeAll>
 800a794:	e758      	b.n	800a648 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a798:	f000 f96d 	bl	800aa76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a79c:	f000 fcbe 	bl	800b11c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7a2:	f000 f9ba 	bl	800ab1a <prvIsQueueEmpty>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f43f af4d 	beq.w	800a648 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00d      	beq.n	800a7d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a7b4:	f001 feee 	bl	800c594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ba:	f000 f8b4 	bl	800a926 <prvGetDisinheritPriorityAfterTimeout>
 800a7be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f001 f982 	bl	800bad0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a7cc:	f001 ff12 	bl	800c5f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3738      	adds	r7, #56	; 0x38
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	e000ed04 	.word	0xe000ed04

0800a7e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08e      	sub	sp, #56	; 0x38
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10a      	bne.n	800a80c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	623b      	str	r3, [r7, #32]
}
 800a808:	bf00      	nop
 800a80a:	e7fe      	b.n	800a80a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d103      	bne.n	800a81a <xQueueReceiveFromISR+0x3a>
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <xQueueReceiveFromISR+0x3e>
 800a81a:	2301      	movs	r3, #1
 800a81c:	e000      	b.n	800a820 <xQueueReceiveFromISR+0x40>
 800a81e:	2300      	movs	r3, #0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10a      	bne.n	800a83a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	61fb      	str	r3, [r7, #28]
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a83a:	f001 ff8d 	bl	800c758 <vPortValidateInterruptPriority>
	__asm volatile
 800a83e:	f3ef 8211 	mrs	r2, BASEPRI
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	61ba      	str	r2, [r7, #24]
 800a854:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a856:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a858:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	d02f      	beq.n	800a8c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a874:	f000 f8d9 	bl	800aa2a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	1e5a      	subs	r2, r3, #1
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a880:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a888:	d112      	bne.n	800a8b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d016      	beq.n	800a8c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	3310      	adds	r3, #16
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fe68 	bl	800b56c <xTaskRemoveFromEventList>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00e      	beq.n	800a8c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00b      	beq.n	800a8c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	e007      	b.n	800a8c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	b25a      	sxtb	r2, r3
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c4:	e001      	b.n	800a8ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f383 8811 	msr	BASEPRI, r3
}
 800a8d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3738      	adds	r7, #56	; 0x38
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <vQueueDelete+0x28>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	60bb      	str	r3, [r7, #8]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 f95f 	bl	800abcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f002 f829 	bl	800c970 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a91e:	bf00      	nop
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a940:	60fb      	str	r3, [r7, #12]
 800a942:	e001      	b.n	800a948 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a948:	68fb      	ldr	r3, [r7, #12]
	}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b086      	sub	sp, #24
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	60f8      	str	r0, [r7, #12]
 800a95e:	60b9      	str	r1, [r7, #8]
 800a960:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10d      	bne.n	800a990 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d14d      	bne.n	800aa18 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	4618      	mov	r0, r3
 800a982:	f001 f837 	bl	800b9f4 <xTaskPriorityDisinherit>
 800a986:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	609a      	str	r2, [r3, #8]
 800a98e:	e043      	b.n	800aa18 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d119      	bne.n	800a9ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6858      	ldr	r0, [r3, #4]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99e:	461a      	mov	r2, r3
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	f002 fc7e 	bl	800d2a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ae:	441a      	add	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d32b      	bcc.n	800aa18 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	605a      	str	r2, [r3, #4]
 800a9c8:	e026      	b.n	800aa18 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	68d8      	ldr	r0, [r3, #12]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	68b9      	ldr	r1, [r7, #8]
 800a9d6:	f002 fc64 	bl	800d2a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	68da      	ldr	r2, [r3, #12]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e2:	425b      	negs	r3, r3
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	68da      	ldr	r2, [r3, #12]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d207      	bcs.n	800aa06 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	425b      	negs	r3, r3
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d105      	bne.n	800aa18 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa20:	697b      	ldr	r3, [r7, #20]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d018      	beq.n	800aa6e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa44:	441a      	add	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68da      	ldr	r2, [r3, #12]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d303      	bcc.n	800aa5e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68d9      	ldr	r1, [r3, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa66:	461a      	mov	r2, r3
 800aa68:	6838      	ldr	r0, [r7, #0]
 800aa6a:	f002 fc1a 	bl	800d2a2 <memcpy>
	}
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa7e:	f001 fd89 	bl	800c594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa88:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa8a:	e011      	b.n	800aab0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d012      	beq.n	800aaba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3324      	adds	r3, #36	; 0x24
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fd67 	bl	800b56c <xTaskRemoveFromEventList>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aaa4:	f000 fe3e 	bl	800b724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dce9      	bgt.n	800aa8c <prvUnlockQueue+0x16>
 800aab8:	e000      	b.n	800aabc <prvUnlockQueue+0x46>
					break;
 800aaba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	22ff      	movs	r2, #255	; 0xff
 800aac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aac4:	f001 fd96 	bl	800c5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aac8:	f001 fd64 	bl	800c594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aad4:	e011      	b.n	800aafa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d012      	beq.n	800ab04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3310      	adds	r3, #16
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fd42 	bl	800b56c <xTaskRemoveFromEventList>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aaee:	f000 fe19 	bl	800b724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aafa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dce9      	bgt.n	800aad6 <prvUnlockQueue+0x60>
 800ab02:	e000      	b.n	800ab06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	22ff      	movs	r2, #255	; 0xff
 800ab0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab0e:	f001 fd71 	bl	800c5f4 <vPortExitCritical>
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab22:	f001 fd37 	bl	800c594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d102      	bne.n	800ab34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	e001      	b.n	800ab38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab38:	f001 fd5c 	bl	800c5f4 <vPortExitCritical>

	return xReturn;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab4e:	f001 fd21 	bl	800c594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d102      	bne.n	800ab64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	e001      	b.n	800ab68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab64:	2300      	movs	r3, #0
 800ab66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab68:	f001 fd44 	bl	800c5f4 <vPortExitCritical>

	return xReturn;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
	...

0800ab78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab82:	2300      	movs	r3, #0
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	e014      	b.n	800abb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab88:	4a0f      	ldr	r2, [pc, #60]	; (800abc8 <vQueueAddToRegistry+0x50>)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab94:	490c      	ldr	r1, [pc, #48]	; (800abc8 <vQueueAddToRegistry+0x50>)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab9e:	4a0a      	ldr	r2, [pc, #40]	; (800abc8 <vQueueAddToRegistry+0x50>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	4413      	add	r3, r2
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800abaa:	e006      	b.n	800abba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	3301      	adds	r3, #1
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b07      	cmp	r3, #7
 800abb6:	d9e7      	bls.n	800ab88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	20002a78 	.word	0x20002a78

0800abcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]
 800abd8:	e016      	b.n	800ac08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800abda:	4a10      	ldr	r2, [pc, #64]	; (800ac1c <vQueueUnregisterQueue+0x50>)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4413      	add	r3, r2
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d10b      	bne.n	800ac02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800abea:	4a0c      	ldr	r2, [pc, #48]	; (800ac1c <vQueueUnregisterQueue+0x50>)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2100      	movs	r1, #0
 800abf0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800abf4:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <vQueueUnregisterQueue+0x50>)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	00db      	lsls	r3, r3, #3
 800abfa:	4413      	add	r3, r2
 800abfc:	2200      	movs	r2, #0
 800abfe:	605a      	str	r2, [r3, #4]
				break;
 800ac00:	e006      	b.n	800ac10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3301      	adds	r3, #1
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b07      	cmp	r3, #7
 800ac0c:	d9e5      	bls.n	800abda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac0e:	bf00      	nop
 800ac10:	bf00      	nop
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	20002a78 	.word	0x20002a78

0800ac20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac30:	f001 fcb0 	bl	800c594 <vPortEnterCritical>
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac3a:	b25b      	sxtb	r3, r3
 800ac3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac40:	d103      	bne.n	800ac4a <vQueueWaitForMessageRestricted+0x2a>
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac50:	b25b      	sxtb	r3, r3
 800ac52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac56:	d103      	bne.n	800ac60 <vQueueWaitForMessageRestricted+0x40>
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac60:	f001 fcc8 	bl	800c5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	3324      	adds	r3, #36	; 0x24
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	68b9      	ldr	r1, [r7, #8]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 fc4d 	bl	800b514 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac7a:	6978      	ldr	r0, [r7, #20]
 800ac7c:	f7ff fefb 	bl	800aa76 <prvUnlockQueue>
	}
 800ac80:	bf00      	nop
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08e      	sub	sp, #56	; 0x38
 800ac8c:	af04      	add	r7, sp, #16
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	623b      	str	r3, [r7, #32]
}
 800acae:	bf00      	nop
 800acb0:	e7fe      	b.n	800acb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10a      	bne.n	800acce <xTaskCreateStatic+0x46>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	61fb      	str	r3, [r7, #28]
}
 800acca:	bf00      	nop
 800accc:	e7fe      	b.n	800accc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acce:	235c      	movs	r3, #92	; 0x5c
 800acd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b5c      	cmp	r3, #92	; 0x5c
 800acd6:	d00a      	beq.n	800acee <xTaskCreateStatic+0x66>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	61bb      	str	r3, [r7, #24]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01e      	beq.n	800ad34 <xTaskCreateStatic+0xac>
 800acf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01b      	beq.n	800ad34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	2202      	movs	r2, #2
 800ad0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad0e:	2300      	movs	r3, #0
 800ad10:	9303      	str	r3, [sp, #12]
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	9302      	str	r3, [sp, #8]
 800ad16:	f107 0314 	add.w	r3, r7, #20
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f000 f850 	bl	800adcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad2e:	f000 f8dd 	bl	800aeec <prvAddNewTaskToReadyList>
 800ad32:	e001      	b.n	800ad38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad38:	697b      	ldr	r3, [r7, #20]
	}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3728      	adds	r7, #40	; 0x28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b08c      	sub	sp, #48	; 0x30
 800ad46:	af04      	add	r7, sp, #16
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	603b      	str	r3, [r7, #0]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad52:	88fb      	ldrh	r3, [r7, #6]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f001 fd3e 	bl	800c7d8 <pvPortMalloc>
 800ad5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00e      	beq.n	800ad82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad64:	205c      	movs	r0, #92	; 0x5c
 800ad66:	f001 fd37 	bl	800c7d8 <pvPortMalloc>
 800ad6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d003      	beq.n	800ad7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	631a      	str	r2, [r3, #48]	; 0x30
 800ad78:	e005      	b.n	800ad86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad7a:	6978      	ldr	r0, [r7, #20]
 800ad7c:	f001 fdf8 	bl	800c970 <vPortFree>
 800ad80:	e001      	b.n	800ad86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d017      	beq.n	800adbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad94:	88fa      	ldrh	r2, [r7, #6]
 800ad96:	2300      	movs	r3, #0
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	9302      	str	r3, [sp, #8]
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 f80e 	bl	800adcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adb0:	69f8      	ldr	r0, [r7, #28]
 800adb2:	f000 f89b 	bl	800aeec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adb6:	2301      	movs	r3, #1
 800adb8:	61bb      	str	r3, [r7, #24]
 800adba:	e002      	b.n	800adc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adbc:	f04f 33ff 	mov.w	r3, #4294967295
 800adc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adc2:	69bb      	ldr	r3, [r7, #24]
	}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3720      	adds	r7, #32
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	461a      	mov	r2, r3
 800ade4:	21a5      	movs	r1, #165	; 0xa5
 800ade6:	f002 f9d1 	bl	800d18c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800adf4:	3b01      	subs	r3, #1
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f023 0307 	bic.w	r3, r3, #7
 800ae02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f003 0307 	and.w	r3, r3, #7
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	617b      	str	r3, [r7, #20]
}
 800ae20:	bf00      	nop
 800ae22:	e7fe      	b.n	800ae22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01f      	beq.n	800ae6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]
 800ae2e:	e012      	b.n	800ae56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	4413      	add	r3, r2
 800ae36:	7819      	ldrb	r1, [r3, #0]
 800ae38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	3334      	adds	r3, #52	; 0x34
 800ae40:	460a      	mov	r2, r1
 800ae42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4413      	add	r3, r2
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d006      	beq.n	800ae5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	3301      	adds	r3, #1
 800ae54:	61fb      	str	r3, [r7, #28]
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	2b0f      	cmp	r3, #15
 800ae5a:	d9e9      	bls.n	800ae30 <prvInitialiseNewTask+0x64>
 800ae5c:	e000      	b.n	800ae60 <prvInitialiseNewTask+0x94>
			{
				break;
 800ae5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae68:	e003      	b.n	800ae72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	2b37      	cmp	r3, #55	; 0x37
 800ae76:	d901      	bls.n	800ae7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae78:	2337      	movs	r3, #55	; 0x37
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	3304      	adds	r3, #4
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe fe56 	bl	8009b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	3318      	adds	r3, #24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe fe51 	bl	8009b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2200      	movs	r2, #0
 800aebc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	68f9      	ldr	r1, [r7, #12]
 800aeca:	69b8      	ldr	r0, [r7, #24]
 800aecc:	f001 fa38 	bl	800c340 <pxPortInitialiseStack>
 800aed0:	4602      	mov	r2, r0
 800aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee2:	bf00      	nop
 800aee4:	3720      	adds	r7, #32
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
	...

0800aeec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aef4:	f001 fb4e 	bl	800c594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aef8:	4b2d      	ldr	r3, [pc, #180]	; (800afb0 <prvAddNewTaskToReadyList+0xc4>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3301      	adds	r3, #1
 800aefe:	4a2c      	ldr	r2, [pc, #176]	; (800afb0 <prvAddNewTaskToReadyList+0xc4>)
 800af00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af02:	4b2c      	ldr	r3, [pc, #176]	; (800afb4 <prvAddNewTaskToReadyList+0xc8>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d109      	bne.n	800af1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af0a:	4a2a      	ldr	r2, [pc, #168]	; (800afb4 <prvAddNewTaskToReadyList+0xc8>)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af10:	4b27      	ldr	r3, [pc, #156]	; (800afb0 <prvAddNewTaskToReadyList+0xc4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d110      	bne.n	800af3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af18:	f000 fc28 	bl	800b76c <prvInitialiseTaskLists>
 800af1c:	e00d      	b.n	800af3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af1e:	4b26      	ldr	r3, [pc, #152]	; (800afb8 <prvAddNewTaskToReadyList+0xcc>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d109      	bne.n	800af3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af26:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <prvAddNewTaskToReadyList+0xc8>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	429a      	cmp	r2, r3
 800af32:	d802      	bhi.n	800af3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af34:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <prvAddNewTaskToReadyList+0xc8>)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af3a:	4b20      	ldr	r3, [pc, #128]	; (800afbc <prvAddNewTaskToReadyList+0xd0>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3301      	adds	r3, #1
 800af40:	4a1e      	ldr	r2, [pc, #120]	; (800afbc <prvAddNewTaskToReadyList+0xd0>)
 800af42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af44:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <prvAddNewTaskToReadyList+0xd0>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4b1b      	ldr	r3, [pc, #108]	; (800afc0 <prvAddNewTaskToReadyList+0xd4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	429a      	cmp	r2, r3
 800af56:	d903      	bls.n	800af60 <prvAddNewTaskToReadyList+0x74>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	4a18      	ldr	r2, [pc, #96]	; (800afc0 <prvAddNewTaskToReadyList+0xd4>)
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af64:	4613      	mov	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	4a15      	ldr	r2, [pc, #84]	; (800afc4 <prvAddNewTaskToReadyList+0xd8>)
 800af6e:	441a      	add	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3304      	adds	r3, #4
 800af74:	4619      	mov	r1, r3
 800af76:	4610      	mov	r0, r2
 800af78:	f7fe fdf1 	bl	8009b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af7c:	f001 fb3a 	bl	800c5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af80:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <prvAddNewTaskToReadyList+0xcc>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00e      	beq.n	800afa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af88:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <prvAddNewTaskToReadyList+0xc8>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af92:	429a      	cmp	r2, r3
 800af94:	d207      	bcs.n	800afa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af96:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <prvAddNewTaskToReadyList+0xdc>)
 800af98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20002f8c 	.word	0x20002f8c
 800afb4:	20002ab8 	.word	0x20002ab8
 800afb8:	20002f98 	.word	0x20002f98
 800afbc:	20002fa8 	.word	0x20002fa8
 800afc0:	20002f94 	.word	0x20002f94
 800afc4:	20002abc 	.word	0x20002abc
 800afc8:	e000ed04 	.word	0xe000ed04

0800afcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d017      	beq.n	800b00e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <vTaskDelay+0x60>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <vTaskDelay+0x30>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	60bb      	str	r3, [r7, #8]
}
 800aff8:	bf00      	nop
 800affa:	e7fe      	b.n	800affa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800affc:	f000 f880 	bl	800b100 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b000:	2100      	movs	r1, #0
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fdfa 	bl	800bbfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b008:	f000 f888 	bl	800b11c <xTaskResumeAll>
 800b00c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d107      	bne.n	800b024 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b014:	4b06      	ldr	r3, [pc, #24]	; (800b030 <vTaskDelay+0x64>)
 800b016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b024:	bf00      	nop
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	20002fb4 	.word	0x20002fb4
 800b030:	e000ed04 	.word	0xe000ed04

0800b034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08a      	sub	sp, #40	; 0x28
 800b038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b042:	463a      	mov	r2, r7
 800b044:	1d39      	adds	r1, r7, #4
 800b046:	f107 0308 	add.w	r3, r7, #8
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe fd26 	bl	8009a9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	9202      	str	r2, [sp, #8]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	2300      	movs	r3, #0
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	2300      	movs	r3, #0
 800b060:	460a      	mov	r2, r1
 800b062:	4921      	ldr	r1, [pc, #132]	; (800b0e8 <vTaskStartScheduler+0xb4>)
 800b064:	4821      	ldr	r0, [pc, #132]	; (800b0ec <vTaskStartScheduler+0xb8>)
 800b066:	f7ff fe0f 	bl	800ac88 <xTaskCreateStatic>
 800b06a:	4603      	mov	r3, r0
 800b06c:	4a20      	ldr	r2, [pc, #128]	; (800b0f0 <vTaskStartScheduler+0xbc>)
 800b06e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b070:	4b1f      	ldr	r3, [pc, #124]	; (800b0f0 <vTaskStartScheduler+0xbc>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b078:	2301      	movs	r3, #1
 800b07a:	617b      	str	r3, [r7, #20]
 800b07c:	e001      	b.n	800b082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d102      	bne.n	800b08e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b088:	f000 fe0c 	bl	800bca4 <xTimerCreateTimerTask>
 800b08c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d116      	bne.n	800b0c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	613b      	str	r3, [r7, #16]
}
 800b0a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0a8:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <vTaskStartScheduler+0xc0>)
 800b0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0b0:	4b11      	ldr	r3, [pc, #68]	; (800b0f8 <vTaskStartScheduler+0xc4>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0b6:	4b11      	ldr	r3, [pc, #68]	; (800b0fc <vTaskStartScheduler+0xc8>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0bc:	f001 f9c8 	bl	800c450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0c0:	e00e      	b.n	800b0e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c8:	d10a      	bne.n	800b0e0 <vTaskStartScheduler+0xac>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	60fb      	str	r3, [r7, #12]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <vTaskStartScheduler+0xaa>
}
 800b0e0:	bf00      	nop
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	0800e524 	.word	0x0800e524
 800b0ec:	0800b73d 	.word	0x0800b73d
 800b0f0:	20002fb0 	.word	0x20002fb0
 800b0f4:	20002fac 	.word	0x20002fac
 800b0f8:	20002f98 	.word	0x20002f98
 800b0fc:	20002f90 	.word	0x20002f90

0800b100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b104:	4b04      	ldr	r3, [pc, #16]	; (800b118 <vTaskSuspendAll+0x18>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	4a03      	ldr	r2, [pc, #12]	; (800b118 <vTaskSuspendAll+0x18>)
 800b10c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b10e:	bf00      	nop
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	20002fb4 	.word	0x20002fb4

0800b11c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b126:	2300      	movs	r3, #0
 800b128:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b12a:	4b42      	ldr	r3, [pc, #264]	; (800b234 <xTaskResumeAll+0x118>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10a      	bne.n	800b148 <xTaskResumeAll+0x2c>
	__asm volatile
 800b132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	603b      	str	r3, [r7, #0]
}
 800b144:	bf00      	nop
 800b146:	e7fe      	b.n	800b146 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b148:	f001 fa24 	bl	800c594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b14c:	4b39      	ldr	r3, [pc, #228]	; (800b234 <xTaskResumeAll+0x118>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3b01      	subs	r3, #1
 800b152:	4a38      	ldr	r2, [pc, #224]	; (800b234 <xTaskResumeAll+0x118>)
 800b154:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b156:	4b37      	ldr	r3, [pc, #220]	; (800b234 <xTaskResumeAll+0x118>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d162      	bne.n	800b224 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b15e:	4b36      	ldr	r3, [pc, #216]	; (800b238 <xTaskResumeAll+0x11c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d05e      	beq.n	800b224 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b166:	e02f      	b.n	800b1c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b168:	4b34      	ldr	r3, [pc, #208]	; (800b23c <xTaskResumeAll+0x120>)
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3318      	adds	r3, #24
 800b174:	4618      	mov	r0, r3
 800b176:	f7fe fd4f 	bl	8009c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3304      	adds	r3, #4
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fd4a 	bl	8009c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b188:	4b2d      	ldr	r3, [pc, #180]	; (800b240 <xTaskResumeAll+0x124>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d903      	bls.n	800b198 <xTaskResumeAll+0x7c>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	4a2a      	ldr	r2, [pc, #168]	; (800b240 <xTaskResumeAll+0x124>)
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4a27      	ldr	r2, [pc, #156]	; (800b244 <xTaskResumeAll+0x128>)
 800b1a6:	441a      	add	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7fe fcd5 	bl	8009b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4b23      	ldr	r3, [pc, #140]	; (800b248 <xTaskResumeAll+0x12c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d302      	bcc.n	800b1c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b1c2:	4b22      	ldr	r3, [pc, #136]	; (800b24c <xTaskResumeAll+0x130>)
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1c8:	4b1c      	ldr	r3, [pc, #112]	; (800b23c <xTaskResumeAll+0x120>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1cb      	bne.n	800b168 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1d6:	f000 fb67 	bl	800b8a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1da:	4b1d      	ldr	r3, [pc, #116]	; (800b250 <xTaskResumeAll+0x134>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d010      	beq.n	800b208 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1e6:	f000 f859 	bl	800b29c <xTaskIncrementTick>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b1f0:	4b16      	ldr	r3, [pc, #88]	; (800b24c <xTaskResumeAll+0x130>)
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1f1      	bne.n	800b1e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b202:	4b13      	ldr	r3, [pc, #76]	; (800b250 <xTaskResumeAll+0x134>)
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b208:	4b10      	ldr	r3, [pc, #64]	; (800b24c <xTaskResumeAll+0x130>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d009      	beq.n	800b224 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b210:	2301      	movs	r3, #1
 800b212:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b214:	4b0f      	ldr	r3, [pc, #60]	; (800b254 <xTaskResumeAll+0x138>)
 800b216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b21a:	601a      	str	r2, [r3, #0]
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b224:	f001 f9e6 	bl	800c5f4 <vPortExitCritical>

	return xAlreadyYielded;
 800b228:	68bb      	ldr	r3, [r7, #8]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	20002fb4 	.word	0x20002fb4
 800b238:	20002f8c 	.word	0x20002f8c
 800b23c:	20002f4c 	.word	0x20002f4c
 800b240:	20002f94 	.word	0x20002f94
 800b244:	20002abc 	.word	0x20002abc
 800b248:	20002ab8 	.word	0x20002ab8
 800b24c:	20002fa0 	.word	0x20002fa0
 800b250:	20002f9c 	.word	0x20002f9c
 800b254:	e000ed04 	.word	0xe000ed04

0800b258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b25e:	4b05      	ldr	r3, [pc, #20]	; (800b274 <xTaskGetTickCount+0x1c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b264:	687b      	ldr	r3, [r7, #4]
}
 800b266:	4618      	mov	r0, r3
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20002f90 	.word	0x20002f90

0800b278 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b27e:	f001 fa6b 	bl	800c758 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b282:	2300      	movs	r3, #0
 800b284:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b286:	4b04      	ldr	r3, [pc, #16]	; (800b298 <xTaskGetTickCountFromISR+0x20>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b28c:	683b      	ldr	r3, [r7, #0]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20002f90 	.word	0x20002f90

0800b29c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2a6:	4b4f      	ldr	r3, [pc, #316]	; (800b3e4 <xTaskIncrementTick+0x148>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f040 808f 	bne.w	800b3ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2b0:	4b4d      	ldr	r3, [pc, #308]	; (800b3e8 <xTaskIncrementTick+0x14c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2b8:	4a4b      	ldr	r2, [pc, #300]	; (800b3e8 <xTaskIncrementTick+0x14c>)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d120      	bne.n	800b306 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2c4:	4b49      	ldr	r3, [pc, #292]	; (800b3ec <xTaskIncrementTick+0x150>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	603b      	str	r3, [r7, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <xTaskIncrementTick+0x46>
 800b2e4:	4b41      	ldr	r3, [pc, #260]	; (800b3ec <xTaskIncrementTick+0x150>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	4b41      	ldr	r3, [pc, #260]	; (800b3f0 <xTaskIncrementTick+0x154>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a3f      	ldr	r2, [pc, #252]	; (800b3ec <xTaskIncrementTick+0x150>)
 800b2f0:	6013      	str	r3, [r2, #0]
 800b2f2:	4a3f      	ldr	r2, [pc, #252]	; (800b3f0 <xTaskIncrementTick+0x154>)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	4b3e      	ldr	r3, [pc, #248]	; (800b3f4 <xTaskIncrementTick+0x158>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	4a3d      	ldr	r2, [pc, #244]	; (800b3f4 <xTaskIncrementTick+0x158>)
 800b300:	6013      	str	r3, [r2, #0]
 800b302:	f000 fad1 	bl	800b8a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b306:	4b3c      	ldr	r3, [pc, #240]	; (800b3f8 <xTaskIncrementTick+0x15c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d349      	bcc.n	800b3a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b310:	4b36      	ldr	r3, [pc, #216]	; (800b3ec <xTaskIncrementTick+0x150>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d104      	bne.n	800b324 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b31a:	4b37      	ldr	r3, [pc, #220]	; (800b3f8 <xTaskIncrementTick+0x15c>)
 800b31c:	f04f 32ff 	mov.w	r2, #4294967295
 800b320:	601a      	str	r2, [r3, #0]
					break;
 800b322:	e03f      	b.n	800b3a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b324:	4b31      	ldr	r3, [pc, #196]	; (800b3ec <xTaskIncrementTick+0x150>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d203      	bcs.n	800b344 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b33c:	4a2e      	ldr	r2, [pc, #184]	; (800b3f8 <xTaskIncrementTick+0x15c>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b342:	e02f      	b.n	800b3a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	3304      	adds	r3, #4
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fe fc65 	bl	8009c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	3318      	adds	r3, #24
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fc5c 	bl	8009c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b364:	4b25      	ldr	r3, [pc, #148]	; (800b3fc <xTaskIncrementTick+0x160>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d903      	bls.n	800b374 <xTaskIncrementTick+0xd8>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b370:	4a22      	ldr	r2, [pc, #136]	; (800b3fc <xTaskIncrementTick+0x160>)
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b378:	4613      	mov	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4a1f      	ldr	r2, [pc, #124]	; (800b400 <xTaskIncrementTick+0x164>)
 800b382:	441a      	add	r2, r3
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	3304      	adds	r3, #4
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f7fe fbe7 	bl	8009b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b394:	4b1b      	ldr	r3, [pc, #108]	; (800b404 <xTaskIncrementTick+0x168>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d3b8      	bcc.n	800b310 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3a2:	e7b5      	b.n	800b310 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3a4:	4b17      	ldr	r3, [pc, #92]	; (800b404 <xTaskIncrementTick+0x168>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3aa:	4915      	ldr	r1, [pc, #84]	; (800b400 <xTaskIncrementTick+0x164>)
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	440b      	add	r3, r1
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d901      	bls.n	800b3c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3c0:	4b11      	ldr	r3, [pc, #68]	; (800b408 <xTaskIncrementTick+0x16c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d007      	beq.n	800b3d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	e004      	b.n	800b3d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3ce:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <xTaskIncrementTick+0x170>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	4a0d      	ldr	r2, [pc, #52]	; (800b40c <xTaskIncrementTick+0x170>)
 800b3d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b3d8:	697b      	ldr	r3, [r7, #20]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20002fb4 	.word	0x20002fb4
 800b3e8:	20002f90 	.word	0x20002f90
 800b3ec:	20002f44 	.word	0x20002f44
 800b3f0:	20002f48 	.word	0x20002f48
 800b3f4:	20002fa4 	.word	0x20002fa4
 800b3f8:	20002fac 	.word	0x20002fac
 800b3fc:	20002f94 	.word	0x20002f94
 800b400:	20002abc 	.word	0x20002abc
 800b404:	20002ab8 	.word	0x20002ab8
 800b408:	20002fa0 	.word	0x20002fa0
 800b40c:	20002f9c 	.word	0x20002f9c

0800b410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b416:	4b28      	ldr	r3, [pc, #160]	; (800b4b8 <vTaskSwitchContext+0xa8>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b41e:	4b27      	ldr	r3, [pc, #156]	; (800b4bc <vTaskSwitchContext+0xac>)
 800b420:	2201      	movs	r2, #1
 800b422:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b424:	e041      	b.n	800b4aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b426:	4b25      	ldr	r3, [pc, #148]	; (800b4bc <vTaskSwitchContext+0xac>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42c:	4b24      	ldr	r3, [pc, #144]	; (800b4c0 <vTaskSwitchContext+0xb0>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	e010      	b.n	800b456 <vTaskSwitchContext+0x46>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10a      	bne.n	800b450 <vTaskSwitchContext+0x40>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	607b      	str	r3, [r7, #4]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <vTaskSwitchContext+0x3e>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3b01      	subs	r3, #1
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	491b      	ldr	r1, [pc, #108]	; (800b4c4 <vTaskSwitchContext+0xb4>)
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4613      	mov	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0e4      	beq.n	800b434 <vTaskSwitchContext+0x24>
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4a13      	ldr	r2, [pc, #76]	; (800b4c4 <vTaskSwitchContext+0xb4>)
 800b476:	4413      	add	r3, r2
 800b478:	60bb      	str	r3, [r7, #8]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	605a      	str	r2, [r3, #4]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	3308      	adds	r3, #8
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d104      	bne.n	800b49a <vTaskSwitchContext+0x8a>
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	4a09      	ldr	r2, [pc, #36]	; (800b4c8 <vTaskSwitchContext+0xb8>)
 800b4a2:	6013      	str	r3, [r2, #0]
 800b4a4:	4a06      	ldr	r2, [pc, #24]	; (800b4c0 <vTaskSwitchContext+0xb0>)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6013      	str	r3, [r2, #0]
}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	20002fb4 	.word	0x20002fb4
 800b4bc:	20002fa0 	.word	0x20002fa0
 800b4c0:	20002f94 	.word	0x20002f94
 800b4c4:	20002abc 	.word	0x20002abc
 800b4c8:	20002ab8 	.word	0x20002ab8

0800b4cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	60fb      	str	r3, [r7, #12]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4f2:	4b07      	ldr	r3, [pc, #28]	; (800b510 <vTaskPlaceOnEventList+0x44>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3318      	adds	r3, #24
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7fe fb53 	bl	8009ba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b500:	2101      	movs	r1, #1
 800b502:	6838      	ldr	r0, [r7, #0]
 800b504:	f000 fb7a 	bl	800bbfc <prvAddCurrentTaskToDelayedList>
}
 800b508:	bf00      	nop
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20002ab8 	.word	0x20002ab8

0800b514 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10a      	bne.n	800b53c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	617b      	str	r3, [r7, #20]
}
 800b538:	bf00      	nop
 800b53a:	e7fe      	b.n	800b53a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b53c:	4b0a      	ldr	r3, [pc, #40]	; (800b568 <vTaskPlaceOnEventListRestricted+0x54>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3318      	adds	r3, #24
 800b542:	4619      	mov	r1, r3
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7fe fb0a 	bl	8009b5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b550:	f04f 33ff 	mov.w	r3, #4294967295
 800b554:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	68b8      	ldr	r0, [r7, #8]
 800b55a:	f000 fb4f 	bl	800bbfc <prvAddCurrentTaskToDelayedList>
	}
 800b55e:	bf00      	nop
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20002ab8 	.word	0x20002ab8

0800b56c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10a      	bne.n	800b598 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	60fb      	str	r3, [r7, #12]
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	3318      	adds	r3, #24
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe fb3b 	bl	8009c18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5a2:	4b1e      	ldr	r3, [pc, #120]	; (800b61c <xTaskRemoveFromEventList+0xb0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d11d      	bne.n	800b5e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe fb32 	bl	8009c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	4b19      	ldr	r3, [pc, #100]	; (800b620 <xTaskRemoveFromEventList+0xb4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d903      	bls.n	800b5c8 <xTaskRemoveFromEventList+0x5c>
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a16      	ldr	r2, [pc, #88]	; (800b620 <xTaskRemoveFromEventList+0xb4>)
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4a13      	ldr	r2, [pc, #76]	; (800b624 <xTaskRemoveFromEventList+0xb8>)
 800b5d6:	441a      	add	r2, r3
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	f7fe fabd 	bl	8009b5e <vListInsertEnd>
 800b5e4:	e005      	b.n	800b5f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	3318      	adds	r3, #24
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	480e      	ldr	r0, [pc, #56]	; (800b628 <xTaskRemoveFromEventList+0xbc>)
 800b5ee:	f7fe fab6 	bl	8009b5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f6:	4b0d      	ldr	r3, [pc, #52]	; (800b62c <xTaskRemoveFromEventList+0xc0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d905      	bls.n	800b60c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b600:	2301      	movs	r3, #1
 800b602:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b604:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <xTaskRemoveFromEventList+0xc4>)
 800b606:	2201      	movs	r2, #1
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	e001      	b.n	800b610 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b60c:	2300      	movs	r3, #0
 800b60e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b610:	697b      	ldr	r3, [r7, #20]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3718      	adds	r7, #24
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20002fb4 	.word	0x20002fb4
 800b620:	20002f94 	.word	0x20002f94
 800b624:	20002abc 	.word	0x20002abc
 800b628:	20002f4c 	.word	0x20002f4c
 800b62c:	20002ab8 	.word	0x20002ab8
 800b630:	20002fa0 	.word	0x20002fa0

0800b634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <vTaskInternalSetTimeOutState+0x24>)
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <vTaskInternalSetTimeOutState+0x28>)
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	605a      	str	r2, [r3, #4]
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	20002fa4 	.word	0x20002fa4
 800b65c:	20002f90 	.word	0x20002f90

0800b660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10a      	bne.n	800b686 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	613b      	str	r3, [r7, #16]
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10a      	bne.n	800b6a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	60fb      	str	r3, [r7, #12]
}
 800b69e:	bf00      	nop
 800b6a0:	e7fe      	b.n	800b6a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b6a2:	f000 ff77 	bl	800c594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6a6:	4b1d      	ldr	r3, [pc, #116]	; (800b71c <xTaskCheckForTimeOut+0xbc>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6be:	d102      	bne.n	800b6c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	61fb      	str	r3, [r7, #28]
 800b6c4:	e023      	b.n	800b70e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	4b15      	ldr	r3, [pc, #84]	; (800b720 <xTaskCheckForTimeOut+0xc0>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d007      	beq.n	800b6e2 <xTaskCheckForTimeOut+0x82>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d302      	bcc.n	800b6e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	61fb      	str	r3, [r7, #28]
 800b6e0:	e015      	b.n	800b70e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	697a      	ldr	r2, [r7, #20]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d20b      	bcs.n	800b704 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	1ad2      	subs	r2, r2, r3
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff ff9b 	bl	800b634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	e004      	b.n	800b70e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2200      	movs	r2, #0
 800b708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b70a:	2301      	movs	r3, #1
 800b70c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b70e:	f000 ff71 	bl	800c5f4 <vPortExitCritical>

	return xReturn;
 800b712:	69fb      	ldr	r3, [r7, #28]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3720      	adds	r7, #32
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20002f90 	.word	0x20002f90
 800b720:	20002fa4 	.word	0x20002fa4

0800b724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b728:	4b03      	ldr	r3, [pc, #12]	; (800b738 <vTaskMissedYield+0x14>)
 800b72a:	2201      	movs	r2, #1
 800b72c:	601a      	str	r2, [r3, #0]
}
 800b72e:	bf00      	nop
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	20002fa0 	.word	0x20002fa0

0800b73c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b744:	f000 f852 	bl	800b7ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b748:	4b06      	ldr	r3, [pc, #24]	; (800b764 <prvIdleTask+0x28>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d9f9      	bls.n	800b744 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b750:	4b05      	ldr	r3, [pc, #20]	; (800b768 <prvIdleTask+0x2c>)
 800b752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b760:	e7f0      	b.n	800b744 <prvIdleTask+0x8>
 800b762:	bf00      	nop
 800b764:	20002abc 	.word	0x20002abc
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b772:	2300      	movs	r3, #0
 800b774:	607b      	str	r3, [r7, #4]
 800b776:	e00c      	b.n	800b792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	4613      	mov	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4a12      	ldr	r2, [pc, #72]	; (800b7cc <prvInitialiseTaskLists+0x60>)
 800b784:	4413      	add	r3, r2
 800b786:	4618      	mov	r0, r3
 800b788:	f7fe f9bc 	bl	8009b04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3301      	adds	r3, #1
 800b790:	607b      	str	r3, [r7, #4]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b37      	cmp	r3, #55	; 0x37
 800b796:	d9ef      	bls.n	800b778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b798:	480d      	ldr	r0, [pc, #52]	; (800b7d0 <prvInitialiseTaskLists+0x64>)
 800b79a:	f7fe f9b3 	bl	8009b04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b79e:	480d      	ldr	r0, [pc, #52]	; (800b7d4 <prvInitialiseTaskLists+0x68>)
 800b7a0:	f7fe f9b0 	bl	8009b04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7a4:	480c      	ldr	r0, [pc, #48]	; (800b7d8 <prvInitialiseTaskLists+0x6c>)
 800b7a6:	f7fe f9ad 	bl	8009b04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7aa:	480c      	ldr	r0, [pc, #48]	; (800b7dc <prvInitialiseTaskLists+0x70>)
 800b7ac:	f7fe f9aa 	bl	8009b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7b0:	480b      	ldr	r0, [pc, #44]	; (800b7e0 <prvInitialiseTaskLists+0x74>)
 800b7b2:	f7fe f9a7 	bl	8009b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7b6:	4b0b      	ldr	r3, [pc, #44]	; (800b7e4 <prvInitialiseTaskLists+0x78>)
 800b7b8:	4a05      	ldr	r2, [pc, #20]	; (800b7d0 <prvInitialiseTaskLists+0x64>)
 800b7ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <prvInitialiseTaskLists+0x7c>)
 800b7be:	4a05      	ldr	r2, [pc, #20]	; (800b7d4 <prvInitialiseTaskLists+0x68>)
 800b7c0:	601a      	str	r2, [r3, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20002abc 	.word	0x20002abc
 800b7d0:	20002f1c 	.word	0x20002f1c
 800b7d4:	20002f30 	.word	0x20002f30
 800b7d8:	20002f4c 	.word	0x20002f4c
 800b7dc:	20002f60 	.word	0x20002f60
 800b7e0:	20002f78 	.word	0x20002f78
 800b7e4:	20002f44 	.word	0x20002f44
 800b7e8:	20002f48 	.word	0x20002f48

0800b7ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f2:	e019      	b.n	800b828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7f4:	f000 fece 	bl	800c594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f8:	4b10      	ldr	r3, [pc, #64]	; (800b83c <prvCheckTasksWaitingTermination+0x50>)
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3304      	adds	r3, #4
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe fa07 	bl	8009c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b80a:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <prvCheckTasksWaitingTermination+0x54>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3b01      	subs	r3, #1
 800b810:	4a0b      	ldr	r2, [pc, #44]	; (800b840 <prvCheckTasksWaitingTermination+0x54>)
 800b812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b814:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <prvCheckTasksWaitingTermination+0x58>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3b01      	subs	r3, #1
 800b81a:	4a0a      	ldr	r2, [pc, #40]	; (800b844 <prvCheckTasksWaitingTermination+0x58>)
 800b81c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b81e:	f000 fee9 	bl	800c5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f810 	bl	800b848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b828:	4b06      	ldr	r3, [pc, #24]	; (800b844 <prvCheckTasksWaitingTermination+0x58>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e1      	bne.n	800b7f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b830:	bf00      	nop
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20002f60 	.word	0x20002f60
 800b840:	20002f8c 	.word	0x20002f8c
 800b844:	20002f74 	.word	0x20002f74

0800b848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b856:	2b00      	cmp	r3, #0
 800b858:	d108      	bne.n	800b86c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85e:	4618      	mov	r0, r3
 800b860:	f001 f886 	bl	800c970 <vPortFree>
				vPortFree( pxTCB );
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f001 f883 	bl	800c970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b86a:	e018      	b.n	800b89e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b872:	2b01      	cmp	r3, #1
 800b874:	d103      	bne.n	800b87e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f001 f87a 	bl	800c970 <vPortFree>
	}
 800b87c:	e00f      	b.n	800b89e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b884:	2b02      	cmp	r3, #2
 800b886:	d00a      	beq.n	800b89e <prvDeleteTCB+0x56>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	60fb      	str	r3, [r7, #12]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <prvDeleteTCB+0x54>
	}
 800b89e:	bf00      	nop
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
	...

0800b8a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ae:	4b0c      	ldr	r3, [pc, #48]	; (800b8e0 <prvResetNextTaskUnblockTime+0x38>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d104      	bne.n	800b8c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8b8:	4b0a      	ldr	r3, [pc, #40]	; (800b8e4 <prvResetNextTaskUnblockTime+0x3c>)
 800b8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b8be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8c0:	e008      	b.n	800b8d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c2:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <prvResetNextTaskUnblockTime+0x38>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	4a04      	ldr	r2, [pc, #16]	; (800b8e4 <prvResetNextTaskUnblockTime+0x3c>)
 800b8d2:	6013      	str	r3, [r2, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	20002f44 	.word	0x20002f44
 800b8e4:	20002fac 	.word	0x20002fac

0800b8e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8ee:	4b0b      	ldr	r3, [pc, #44]	; (800b91c <xTaskGetSchedulerState+0x34>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	607b      	str	r3, [r7, #4]
 800b8fa:	e008      	b.n	800b90e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8fc:	4b08      	ldr	r3, [pc, #32]	; (800b920 <xTaskGetSchedulerState+0x38>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b904:	2302      	movs	r3, #2
 800b906:	607b      	str	r3, [r7, #4]
 800b908:	e001      	b.n	800b90e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b90a:	2300      	movs	r3, #0
 800b90c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b90e:	687b      	ldr	r3, [r7, #4]
	}
 800b910:	4618      	mov	r0, r3
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20002f98 	.word	0x20002f98
 800b920:	20002fb4 	.word	0x20002fb4

0800b924 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b930:	2300      	movs	r3, #0
 800b932:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d051      	beq.n	800b9de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b93e:	4b2a      	ldr	r3, [pc, #168]	; (800b9e8 <xTaskPriorityInherit+0xc4>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	429a      	cmp	r2, r3
 800b946:	d241      	bcs.n	800b9cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	db06      	blt.n	800b95e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <xTaskPriorityInherit+0xc4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	6959      	ldr	r1, [r3, #20]
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b966:	4613      	mov	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <xTaskPriorityInherit+0xc8>)
 800b970:	4413      	add	r3, r2
 800b972:	4299      	cmp	r1, r3
 800b974:	d122      	bne.n	800b9bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	3304      	adds	r3, #4
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fe f94c 	bl	8009c18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b980:	4b19      	ldr	r3, [pc, #100]	; (800b9e8 <xTaskPriorityInherit+0xc4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98e:	4b18      	ldr	r3, [pc, #96]	; (800b9f0 <xTaskPriorityInherit+0xcc>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	429a      	cmp	r2, r3
 800b994:	d903      	bls.n	800b99e <xTaskPriorityInherit+0x7a>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99a:	4a15      	ldr	r2, [pc, #84]	; (800b9f0 <xTaskPriorityInherit+0xcc>)
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4a10      	ldr	r2, [pc, #64]	; (800b9ec <xTaskPriorityInherit+0xc8>)
 800b9ac:	441a      	add	r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	f7fe f8d2 	bl	8009b5e <vListInsertEnd>
 800b9ba:	e004      	b.n	800b9c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <xTaskPriorityInherit+0xc4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	e008      	b.n	800b9de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <xTaskPriorityInherit+0xc4>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d201      	bcs.n	800b9de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9de:	68fb      	ldr	r3, [r7, #12]
	}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20002ab8 	.word	0x20002ab8
 800b9ec:	20002abc 	.word	0x20002abc
 800b9f0:	20002f94 	.word	0x20002f94

0800b9f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba00:	2300      	movs	r3, #0
 800ba02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d056      	beq.n	800bab8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba0a:	4b2e      	ldr	r3, [pc, #184]	; (800bac4 <xTaskPriorityDisinherit+0xd0>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d00a      	beq.n	800ba2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	60fb      	str	r3, [r7, #12]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10a      	bne.n	800ba48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	60bb      	str	r3, [r7, #8]
}
 800ba44:	bf00      	nop
 800ba46:	e7fe      	b.n	800ba46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4c:	1e5a      	subs	r2, r3, #1
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d02c      	beq.n	800bab8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d128      	bne.n	800bab8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	3304      	adds	r3, #4
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe f8d4 	bl	8009c18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <xTaskPriorityDisinherit+0xd4>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d903      	bls.n	800ba98 <xTaskPriorityDisinherit+0xa4>
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba94:	4a0c      	ldr	r2, [pc, #48]	; (800bac8 <xTaskPriorityDisinherit+0xd4>)
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4a09      	ldr	r2, [pc, #36]	; (800bacc <xTaskPriorityDisinherit+0xd8>)
 800baa6:	441a      	add	r2, r3
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fe f855 	bl	8009b5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bab4:	2301      	movs	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bab8:	697b      	ldr	r3, [r7, #20]
	}
 800baba:	4618      	mov	r0, r3
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20002ab8 	.word	0x20002ab8
 800bac8:	20002f94 	.word	0x20002f94
 800bacc:	20002abc 	.word	0x20002abc

0800bad0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bade:	2301      	movs	r3, #1
 800bae0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d06a      	beq.n	800bbbe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	60fb      	str	r3, [r7, #12]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d902      	bls.n	800bb16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	61fb      	str	r3, [r7, #28]
 800bb14:	e002      	b.n	800bb1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	69fa      	ldr	r2, [r7, #28]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d04b      	beq.n	800bbbe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d146      	bne.n	800bbbe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb30:	4b25      	ldr	r3, [pc, #148]	; (800bbc8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	69ba      	ldr	r2, [r7, #24]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d10a      	bne.n	800bb50 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	60bb      	str	r3, [r7, #8]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	69fa      	ldr	r2, [r7, #28]
 800bb5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	db04      	blt.n	800bb6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	6959      	ldr	r1, [r3, #20]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	4613      	mov	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4a13      	ldr	r2, [pc, #76]	; (800bbcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb7e:	4413      	add	r3, r2
 800bb80:	4299      	cmp	r1, r3
 800bb82:	d11c      	bne.n	800bbbe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe f845 	bl	8009c18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb92:	4b0f      	ldr	r3, [pc, #60]	; (800bbd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d903      	bls.n	800bba2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9e:	4a0c      	ldr	r2, [pc, #48]	; (800bbd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4a07      	ldr	r2, [pc, #28]	; (800bbcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bbb0:	441a      	add	r2, r3
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f7fd ffd0 	bl	8009b5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbbe:	bf00      	nop
 800bbc0:	3720      	adds	r7, #32
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20002ab8 	.word	0x20002ab8
 800bbcc:	20002abc 	.word	0x20002abc
 800bbd0:	20002f94 	.word	0x20002f94

0800bbd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bbd4:	b480      	push	{r7}
 800bbd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbd8:	4b07      	ldr	r3, [pc, #28]	; (800bbf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d004      	beq.n	800bbea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bbe0:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbe6:	3201      	adds	r2, #1
 800bbe8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bbea:	4b03      	ldr	r3, [pc, #12]	; (800bbf8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbec:	681b      	ldr	r3, [r3, #0]
	}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr
 800bbf8:	20002ab8 	.word	0x20002ab8

0800bbfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc06:	4b21      	ldr	r3, [pc, #132]	; (800bc8c <prvAddCurrentTaskToDelayedList+0x90>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc0c:	4b20      	ldr	r3, [pc, #128]	; (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3304      	adds	r3, #4
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fe f800 	bl	8009c18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d10a      	bne.n	800bc36 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc26:	4b1a      	ldr	r3, [pc, #104]	; (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4819      	ldr	r0, [pc, #100]	; (800bc94 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc30:	f7fd ff95 	bl	8009b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc34:	e026      	b.n	800bc84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc3e:	4b14      	ldr	r3, [pc, #80]	; (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d209      	bcs.n	800bc62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc4e:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	4b0f      	ldr	r3, [pc, #60]	; (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3304      	adds	r3, #4
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	f7fd ffa3 	bl	8009ba6 <vListInsert>
}
 800bc60:	e010      	b.n	800bc84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc62:	4b0e      	ldr	r3, [pc, #56]	; (800bc9c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4610      	mov	r0, r2
 800bc70:	f7fd ff99 	bl	8009ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d202      	bcs.n	800bc84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc7e:	4a08      	ldr	r2, [pc, #32]	; (800bca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	6013      	str	r3, [r2, #0]
}
 800bc84:	bf00      	nop
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20002f90 	.word	0x20002f90
 800bc90:	20002ab8 	.word	0x20002ab8
 800bc94:	20002f78 	.word	0x20002f78
 800bc98:	20002f48 	.word	0x20002f48
 800bc9c:	20002f44 	.word	0x20002f44
 800bca0:	20002fac 	.word	0x20002fac

0800bca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08a      	sub	sp, #40	; 0x28
 800bca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcae:	f000 fb07 	bl	800c2c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcb2:	4b1c      	ldr	r3, [pc, #112]	; (800bd24 <xTimerCreateTimerTask+0x80>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d021      	beq.n	800bcfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcc2:	1d3a      	adds	r2, r7, #4
 800bcc4:	f107 0108 	add.w	r1, r7, #8
 800bcc8:	f107 030c 	add.w	r3, r7, #12
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fd feff 	bl	8009ad0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	9202      	str	r2, [sp, #8]
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	2302      	movs	r3, #2
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	2300      	movs	r3, #0
 800bce2:	460a      	mov	r2, r1
 800bce4:	4910      	ldr	r1, [pc, #64]	; (800bd28 <xTimerCreateTimerTask+0x84>)
 800bce6:	4811      	ldr	r0, [pc, #68]	; (800bd2c <xTimerCreateTimerTask+0x88>)
 800bce8:	f7fe ffce 	bl	800ac88 <xTaskCreateStatic>
 800bcec:	4603      	mov	r3, r0
 800bcee:	4a10      	ldr	r2, [pc, #64]	; (800bd30 <xTimerCreateTimerTask+0x8c>)
 800bcf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcf2:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <xTimerCreateTimerTask+0x8c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	613b      	str	r3, [r7, #16]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd1a:	697b      	ldr	r3, [r7, #20]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	20002fe8 	.word	0x20002fe8
 800bd28:	0800e52c 	.word	0x0800e52c
 800bd2c:	0800be69 	.word	0x0800be69
 800bd30:	20002fec 	.word	0x20002fec

0800bd34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b08a      	sub	sp, #40	; 0x28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	623b      	str	r3, [r7, #32]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd62:	4b1a      	ldr	r3, [pc, #104]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d02a      	beq.n	800bdc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b05      	cmp	r3, #5
 800bd7a:	dc18      	bgt.n	800bdae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd7c:	f7ff fdb4 	bl	800b8e8 <xTaskGetSchedulerState>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d109      	bne.n	800bd9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd86:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	f107 0110 	add.w	r1, r7, #16
 800bd8e:	2300      	movs	r3, #0
 800bd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd92:	f7fe f913 	bl	8009fbc <xQueueGenericSend>
 800bd96:	6278      	str	r0, [r7, #36]	; 0x24
 800bd98:	e012      	b.n	800bdc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd9a:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	f107 0110 	add.w	r1, r7, #16
 800bda2:	2300      	movs	r3, #0
 800bda4:	2200      	movs	r2, #0
 800bda6:	f7fe f909 	bl	8009fbc <xQueueGenericSend>
 800bdaa:	6278      	str	r0, [r7, #36]	; 0x24
 800bdac:	e008      	b.n	800bdc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdae:	4b07      	ldr	r3, [pc, #28]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	f107 0110 	add.w	r1, r7, #16
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	f7fe f9fd 	bl	800a1b8 <xQueueGenericSendFromISR>
 800bdbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3728      	adds	r7, #40	; 0x28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	20002fe8 	.word	0x20002fe8

0800bdd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af02      	add	r7, sp, #8
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdda:	4b22      	ldr	r3, [pc, #136]	; (800be64 <prvProcessExpiredTimer+0x94>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fd ff15 	bl	8009c18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf4:	f003 0304 	and.w	r3, r3, #4
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d022      	beq.n	800be42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	699a      	ldr	r2, [r3, #24]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	18d1      	adds	r1, r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	6978      	ldr	r0, [r7, #20]
 800be0a:	f000 f8d1 	bl	800bfb0 <prvInsertTimerInActiveList>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01f      	beq.n	800be54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be14:	2300      	movs	r3, #0
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	2300      	movs	r3, #0
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	2100      	movs	r1, #0
 800be1e:	6978      	ldr	r0, [r7, #20]
 800be20:	f7ff ff88 	bl	800bd34 <xTimerGenericCommand>
 800be24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d113      	bne.n	800be54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60fb      	str	r3, [r7, #12]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be48:	f023 0301 	bic.w	r3, r3, #1
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	6978      	ldr	r0, [r7, #20]
 800be5a:	4798      	blx	r3
}
 800be5c:	bf00      	nop
 800be5e:	3718      	adds	r7, #24
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	20002fe0 	.word	0x20002fe0

0800be68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be70:	f107 0308 	add.w	r3, r7, #8
 800be74:	4618      	mov	r0, r3
 800be76:	f000 f857 	bl	800bf28 <prvGetNextExpireTime>
 800be7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	4619      	mov	r1, r3
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f803 	bl	800be8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be86:	f000 f8d5 	bl	800c034 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be8a:	e7f1      	b.n	800be70 <prvTimerTask+0x8>

0800be8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be96:	f7ff f933 	bl	800b100 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 f866 	bl	800bf70 <prvSampleTimeNow>
 800bea4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d130      	bne.n	800bf0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <prvProcessTimerOrBlockTask+0x3c>
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d806      	bhi.n	800bec8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800beba:	f7ff f92f 	bl	800b11c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ff85 	bl	800bdd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bec6:	e024      	b.n	800bf12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d008      	beq.n	800bee0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bece:	4b13      	ldr	r3, [pc, #76]	; (800bf1c <prvProcessTimerOrBlockTask+0x90>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <prvProcessTimerOrBlockTask+0x50>
 800bed8:	2301      	movs	r3, #1
 800beda:	e000      	b.n	800bede <prvProcessTimerOrBlockTask+0x52>
 800bedc:	2300      	movs	r3, #0
 800bede:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bee0:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <prvProcessTimerOrBlockTask+0x94>)
 800bee2:	6818      	ldr	r0, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4619      	mov	r1, r3
 800beee:	f7fe fe97 	bl	800ac20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bef2:	f7ff f913 	bl	800b11c <xTaskResumeAll>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800befc:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <prvProcessTimerOrBlockTask+0x98>)
 800befe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	f3bf 8f6f 	isb	sy
}
 800bf0c:	e001      	b.n	800bf12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf0e:	f7ff f905 	bl	800b11c <xTaskResumeAll>
}
 800bf12:	bf00      	nop
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	20002fe4 	.word	0x20002fe4
 800bf20:	20002fe8 	.word	0x20002fe8
 800bf24:	e000ed04 	.word	0xe000ed04

0800bf28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf30:	4b0e      	ldr	r3, [pc, #56]	; (800bf6c <prvGetNextExpireTime+0x44>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <prvGetNextExpireTime+0x16>
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	e000      	b.n	800bf40 <prvGetNextExpireTime+0x18>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d105      	bne.n	800bf58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf4c:	4b07      	ldr	r3, [pc, #28]	; (800bf6c <prvGetNextExpireTime+0x44>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	60fb      	str	r3, [r7, #12]
 800bf56:	e001      	b.n	800bf5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	20002fe0 	.word	0x20002fe0

0800bf70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf78:	f7ff f96e 	bl	800b258 <xTaskGetTickCount>
 800bf7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf7e:	4b0b      	ldr	r3, [pc, #44]	; (800bfac <prvSampleTimeNow+0x3c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d205      	bcs.n	800bf94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf88:	f000 f936 	bl	800c1f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	e002      	b.n	800bf9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf9a:	4a04      	ldr	r2, [pc, #16]	; (800bfac <prvSampleTimeNow+0x3c>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20002ff0 	.word	0x20002ff0

0800bfb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d812      	bhi.n	800bffc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	1ad2      	subs	r2, r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d302      	bcc.n	800bfea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	e01b      	b.n	800c022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfea:	4b10      	ldr	r3, [pc, #64]	; (800c02c <prvInsertTimerInActiveList+0x7c>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3304      	adds	r3, #4
 800bff2:	4619      	mov	r1, r3
 800bff4:	4610      	mov	r0, r2
 800bff6:	f7fd fdd6 	bl	8009ba6 <vListInsert>
 800bffa:	e012      	b.n	800c022 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d206      	bcs.n	800c012 <prvInsertTimerInActiveList+0x62>
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d302      	bcc.n	800c012 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c00c:	2301      	movs	r3, #1
 800c00e:	617b      	str	r3, [r7, #20]
 800c010:	e007      	b.n	800c022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c012:	4b07      	ldr	r3, [pc, #28]	; (800c030 <prvInsertTimerInActiveList+0x80>)
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3304      	adds	r3, #4
 800c01a:	4619      	mov	r1, r3
 800c01c:	4610      	mov	r0, r2
 800c01e:	f7fd fdc2 	bl	8009ba6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c022:	697b      	ldr	r3, [r7, #20]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20002fe4 	.word	0x20002fe4
 800c030:	20002fe0 	.word	0x20002fe0

0800c034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08e      	sub	sp, #56	; 0x38
 800c038:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c03a:	e0ca      	b.n	800c1d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	da18      	bge.n	800c074 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c042:	1d3b      	adds	r3, r7, #4
 800c044:	3304      	adds	r3, #4
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10a      	bne.n	800c064 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	61fb      	str	r3, [r7, #28]
}
 800c060:	bf00      	nop
 800c062:	e7fe      	b.n	800c062 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c06a:	6850      	ldr	r0, [r2, #4]
 800c06c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c06e:	6892      	ldr	r2, [r2, #8]
 800c070:	4611      	mov	r1, r2
 800c072:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f2c0 80ab 	blt.w	800c1d2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d004      	beq.n	800c092 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	3304      	adds	r3, #4
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fd fdc3 	bl	8009c18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c092:	463b      	mov	r3, r7
 800c094:	4618      	mov	r0, r3
 800c096:	f7ff ff6b 	bl	800bf70 <prvSampleTimeNow>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b09      	cmp	r3, #9
 800c0a0:	f200 8096 	bhi.w	800c1d0 <prvProcessReceivedCommands+0x19c>
 800c0a4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <prvProcessReceivedCommands+0x78>)
 800c0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0aa:	bf00      	nop
 800c0ac:	0800c0d5 	.word	0x0800c0d5
 800c0b0:	0800c0d5 	.word	0x0800c0d5
 800c0b4:	0800c0d5 	.word	0x0800c0d5
 800c0b8:	0800c149 	.word	0x0800c149
 800c0bc:	0800c15d 	.word	0x0800c15d
 800c0c0:	0800c1a7 	.word	0x0800c1a7
 800c0c4:	0800c0d5 	.word	0x0800c0d5
 800c0c8:	0800c0d5 	.word	0x0800c0d5
 800c0cc:	0800c149 	.word	0x0800c149
 800c0d0:	0800c15d 	.word	0x0800c15d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0da:	f043 0301 	orr.w	r3, r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	18d1      	adds	r1, r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0f4:	f7ff ff5c 	bl	800bfb0 <prvInsertTimerInActiveList>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d069      	beq.n	800c1d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c104:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d05e      	beq.n	800c1d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	441a      	add	r2, r3
 800c11c:	2300      	movs	r3, #0
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	2300      	movs	r3, #0
 800c122:	2100      	movs	r1, #0
 800c124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c126:	f7ff fe05 	bl	800bd34 <xTimerGenericCommand>
 800c12a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d14f      	bne.n	800c1d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	61bb      	str	r3, [r7, #24]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c14e:	f023 0301 	bic.w	r3, r3, #1
 800c152:	b2da      	uxtb	r2, r3
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c15a:	e03a      	b.n	800c1d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c162:	f043 0301 	orr.w	r3, r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	617b      	str	r3, [r7, #20]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	699a      	ldr	r2, [r3, #24]
 800c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c198:	18d1      	adds	r1, r2, r3
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1a0:	f7ff ff06 	bl	800bfb0 <prvInsertTimerInActiveList>
					break;
 800c1a4:	e015      	b.n	800c1d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ac:	f003 0302 	and.w	r3, r3, #2
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d103      	bne.n	800c1bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b6:	f000 fbdb 	bl	800c970 <vPortFree>
 800c1ba:	e00a      	b.n	800c1d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1c2:	f023 0301 	bic.w	r3, r3, #1
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1ce:	e000      	b.n	800c1d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c1d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1d2:	4b08      	ldr	r3, [pc, #32]	; (800c1f4 <prvProcessReceivedCommands+0x1c0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	1d39      	adds	r1, r7, #4
 800c1d8:	2200      	movs	r2, #0
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe f914 	bl	800a408 <xQueueReceive>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f47f af2a 	bne.w	800c03c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1e8:	bf00      	nop
 800c1ea:	bf00      	nop
 800c1ec:	3730      	adds	r7, #48	; 0x30
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20002fe8 	.word	0x20002fe8

0800c1f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1fe:	e048      	b.n	800c292 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c200:	4b2d      	ldr	r3, [pc, #180]	; (800c2b8 <prvSwitchTimerLists+0xc0>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c20a:	4b2b      	ldr	r3, [pc, #172]	; (800c2b8 <prvSwitchTimerLists+0xc0>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3304      	adds	r3, #4
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fd fcfd 	bl	8009c18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c22c:	f003 0304 	and.w	r3, r3, #4
 800c230:	2b00      	cmp	r3, #0
 800c232:	d02e      	beq.n	800c292 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	4413      	add	r3, r2
 800c23c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	429a      	cmp	r2, r3
 800c244:	d90e      	bls.n	800c264 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c252:	4b19      	ldr	r3, [pc, #100]	; (800c2b8 <prvSwitchTimerLists+0xc0>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3304      	adds	r3, #4
 800c25a:	4619      	mov	r1, r3
 800c25c:	4610      	mov	r0, r2
 800c25e:	f7fd fca2 	bl	8009ba6 <vListInsert>
 800c262:	e016      	b.n	800c292 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c264:	2300      	movs	r3, #0
 800c266:	9300      	str	r3, [sp, #0]
 800c268:	2300      	movs	r3, #0
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	2100      	movs	r1, #0
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7ff fd60 	bl	800bd34 <xTimerGenericCommand>
 800c274:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10a      	bne.n	800c292 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	603b      	str	r3, [r7, #0]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c292:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <prvSwitchTimerLists+0xc0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1b1      	bne.n	800c200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c29c:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <prvSwitchTimerLists+0xc0>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2a2:	4b06      	ldr	r3, [pc, #24]	; (800c2bc <prvSwitchTimerLists+0xc4>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a04      	ldr	r2, [pc, #16]	; (800c2b8 <prvSwitchTimerLists+0xc0>)
 800c2a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2aa:	4a04      	ldr	r2, [pc, #16]	; (800c2bc <prvSwitchTimerLists+0xc4>)
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	6013      	str	r3, [r2, #0]
}
 800c2b0:	bf00      	nop
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	20002fe0 	.word	0x20002fe0
 800c2bc:	20002fe4 	.word	0x20002fe4

0800c2c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2c6:	f000 f965 	bl	800c594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2ca:	4b15      	ldr	r3, [pc, #84]	; (800c320 <prvCheckForValidListAndQueue+0x60>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d120      	bne.n	800c314 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2d2:	4814      	ldr	r0, [pc, #80]	; (800c324 <prvCheckForValidListAndQueue+0x64>)
 800c2d4:	f7fd fc16 	bl	8009b04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2d8:	4813      	ldr	r0, [pc, #76]	; (800c328 <prvCheckForValidListAndQueue+0x68>)
 800c2da:	f7fd fc13 	bl	8009b04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2de:	4b13      	ldr	r3, [pc, #76]	; (800c32c <prvCheckForValidListAndQueue+0x6c>)
 800c2e0:	4a10      	ldr	r2, [pc, #64]	; (800c324 <prvCheckForValidListAndQueue+0x64>)
 800c2e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2e4:	4b12      	ldr	r3, [pc, #72]	; (800c330 <prvCheckForValidListAndQueue+0x70>)
 800c2e6:	4a10      	ldr	r2, [pc, #64]	; (800c328 <prvCheckForValidListAndQueue+0x68>)
 800c2e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	4b11      	ldr	r3, [pc, #68]	; (800c334 <prvCheckForValidListAndQueue+0x74>)
 800c2f0:	4a11      	ldr	r2, [pc, #68]	; (800c338 <prvCheckForValidListAndQueue+0x78>)
 800c2f2:	2110      	movs	r1, #16
 800c2f4:	200a      	movs	r0, #10
 800c2f6:	f7fd fd21 	bl	8009d3c <xQueueGenericCreateStatic>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4a08      	ldr	r2, [pc, #32]	; (800c320 <prvCheckForValidListAndQueue+0x60>)
 800c2fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c300:	4b07      	ldr	r3, [pc, #28]	; (800c320 <prvCheckForValidListAndQueue+0x60>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d005      	beq.n	800c314 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c308:	4b05      	ldr	r3, [pc, #20]	; (800c320 <prvCheckForValidListAndQueue+0x60>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	490b      	ldr	r1, [pc, #44]	; (800c33c <prvCheckForValidListAndQueue+0x7c>)
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe fc32 	bl	800ab78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c314:	f000 f96e 	bl	800c5f4 <vPortExitCritical>
}
 800c318:	bf00      	nop
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	20002fe8 	.word	0x20002fe8
 800c324:	20002fb8 	.word	0x20002fb8
 800c328:	20002fcc 	.word	0x20002fcc
 800c32c:	20002fe0 	.word	0x20002fe0
 800c330:	20002fe4 	.word	0x20002fe4
 800c334:	20003094 	.word	0x20003094
 800c338:	20002ff4 	.word	0x20002ff4
 800c33c:	0800e534 	.word	0x0800e534

0800c340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3b04      	subs	r3, #4
 800c350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3b04      	subs	r3, #4
 800c35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f023 0201 	bic.w	r2, r3, #1
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3b04      	subs	r3, #4
 800c36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c370:	4a0c      	ldr	r2, [pc, #48]	; (800c3a4 <pxPortInitialiseStack+0x64>)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3b14      	subs	r3, #20
 800c37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3b04      	subs	r3, #4
 800c386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f06f 0202 	mvn.w	r2, #2
 800c38e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	3b20      	subs	r3, #32
 800c394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c396:	68fb      	ldr	r3, [r7, #12]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	0800c3a9 	.word	0x0800c3a9

0800c3a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3b2:	4b12      	ldr	r3, [pc, #72]	; (800c3fc <prvTaskExitError+0x54>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ba:	d00a      	beq.n	800c3d2 <prvTaskExitError+0x2a>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	60fb      	str	r3, [r7, #12]
}
 800c3ce:	bf00      	nop
 800c3d0:	e7fe      	b.n	800c3d0 <prvTaskExitError+0x28>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	60bb      	str	r3, [r7, #8]
}
 800c3e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3e6:	bf00      	nop
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0fc      	beq.n	800c3e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3ee:	bf00      	nop
 800c3f0:	bf00      	nop
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	20000064 	.word	0x20000064

0800c400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c400:	4b07      	ldr	r3, [pc, #28]	; (800c420 <pxCurrentTCBConst2>)
 800c402:	6819      	ldr	r1, [r3, #0]
 800c404:	6808      	ldr	r0, [r1, #0]
 800c406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40a:	f380 8809 	msr	PSP, r0
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f04f 0000 	mov.w	r0, #0
 800c416:	f380 8811 	msr	BASEPRI, r0
 800c41a:	4770      	bx	lr
 800c41c:	f3af 8000 	nop.w

0800c420 <pxCurrentTCBConst2>:
 800c420:	20002ab8 	.word	0x20002ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop

0800c428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c428:	4808      	ldr	r0, [pc, #32]	; (800c44c <prvPortStartFirstTask+0x24>)
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	6800      	ldr	r0, [r0, #0]
 800c42e:	f380 8808 	msr	MSP, r0
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8814 	msr	CONTROL, r0
 800c43a:	b662      	cpsie	i
 800c43c:	b661      	cpsie	f
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	df00      	svc	0
 800c448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c44a:	bf00      	nop
 800c44c:	e000ed08 	.word	0xe000ed08

0800c450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c456:	4b46      	ldr	r3, [pc, #280]	; (800c570 <xPortStartScheduler+0x120>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a46      	ldr	r2, [pc, #280]	; (800c574 <xPortStartScheduler+0x124>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d10a      	bne.n	800c476 <xPortStartScheduler+0x26>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	613b      	str	r3, [r7, #16]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c476:	4b3e      	ldr	r3, [pc, #248]	; (800c570 <xPortStartScheduler+0x120>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a3f      	ldr	r2, [pc, #252]	; (800c578 <xPortStartScheduler+0x128>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d10a      	bne.n	800c496 <xPortStartScheduler+0x46>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c496:	4b39      	ldr	r3, [pc, #228]	; (800c57c <xPortStartScheduler+0x12c>)
 800c498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	22ff      	movs	r2, #255	; 0xff
 800c4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	4b31      	ldr	r3, [pc, #196]	; (800c580 <xPortStartScheduler+0x130>)
 800c4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4be:	4b31      	ldr	r3, [pc, #196]	; (800c584 <xPortStartScheduler+0x134>)
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4c4:	e009      	b.n	800c4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4c6:	4b2f      	ldr	r3, [pc, #188]	; (800c584 <xPortStartScheduler+0x134>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	4a2d      	ldr	r2, [pc, #180]	; (800c584 <xPortStartScheduler+0x134>)
 800c4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4da:	78fb      	ldrb	r3, [r7, #3]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e2:	2b80      	cmp	r3, #128	; 0x80
 800c4e4:	d0ef      	beq.n	800c4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4e6:	4b27      	ldr	r3, [pc, #156]	; (800c584 <xPortStartScheduler+0x134>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f1c3 0307 	rsb	r3, r3, #7
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d00a      	beq.n	800c508 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	60bb      	str	r3, [r7, #8]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c508:	4b1e      	ldr	r3, [pc, #120]	; (800c584 <xPortStartScheduler+0x134>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	021b      	lsls	r3, r3, #8
 800c50e:	4a1d      	ldr	r2, [pc, #116]	; (800c584 <xPortStartScheduler+0x134>)
 800c510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c512:	4b1c      	ldr	r3, [pc, #112]	; (800c584 <xPortStartScheduler+0x134>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c51a:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <xPortStartScheduler+0x134>)
 800c51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	b2da      	uxtb	r2, r3
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c526:	4b18      	ldr	r3, [pc, #96]	; (800c588 <xPortStartScheduler+0x138>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a17      	ldr	r2, [pc, #92]	; (800c588 <xPortStartScheduler+0x138>)
 800c52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <xPortStartScheduler+0x138>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a14      	ldr	r2, [pc, #80]	; (800c588 <xPortStartScheduler+0x138>)
 800c538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c53e:	f000 f8dd 	bl	800c6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c542:	4b12      	ldr	r3, [pc, #72]	; (800c58c <xPortStartScheduler+0x13c>)
 800c544:	2200      	movs	r2, #0
 800c546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c548:	f000 f8fc 	bl	800c744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c54c:	4b10      	ldr	r3, [pc, #64]	; (800c590 <xPortStartScheduler+0x140>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0f      	ldr	r2, [pc, #60]	; (800c590 <xPortStartScheduler+0x140>)
 800c552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c558:	f7ff ff66 	bl	800c428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c55c:	f7fe ff58 	bl	800b410 <vTaskSwitchContext>
	prvTaskExitError();
 800c560:	f7ff ff22 	bl	800c3a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	e000ed00 	.word	0xe000ed00
 800c574:	410fc271 	.word	0x410fc271
 800c578:	410fc270 	.word	0x410fc270
 800c57c:	e000e400 	.word	0xe000e400
 800c580:	200030e4 	.word	0x200030e4
 800c584:	200030e8 	.word	0x200030e8
 800c588:	e000ed20 	.word	0xe000ed20
 800c58c:	20000064 	.word	0x20000064
 800c590:	e000ef34 	.word	0xe000ef34

0800c594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	607b      	str	r3, [r7, #4]
}
 800c5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5ae:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	4a0d      	ldr	r2, [pc, #52]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5b8:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d10f      	bne.n	800c5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <vPortEnterCritical+0x5c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00a      	beq.n	800c5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	603b      	str	r3, [r7, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	e7fe      	b.n	800c5de <vPortEnterCritical+0x4a>
	}
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	20000064 	.word	0x20000064
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5fa:	4b12      	ldr	r3, [pc, #72]	; (800c644 <vPortExitCritical+0x50>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10a      	bne.n	800c618 <vPortExitCritical+0x24>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	607b      	str	r3, [r7, #4]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c618:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <vPortExitCritical+0x50>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	4a09      	ldr	r2, [pc, #36]	; (800c644 <vPortExitCritical+0x50>)
 800c620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c622:	4b08      	ldr	r3, [pc, #32]	; (800c644 <vPortExitCritical+0x50>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d105      	bne.n	800c636 <vPortExitCritical+0x42>
 800c62a:	2300      	movs	r3, #0
 800c62c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	f383 8811 	msr	BASEPRI, r3
}
 800c634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	20000064 	.word	0x20000064
	...

0800c650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c650:	f3ef 8009 	mrs	r0, PSP
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	4b15      	ldr	r3, [pc, #84]	; (800c6b0 <pxCurrentTCBConst>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	f01e 0f10 	tst.w	lr, #16
 800c660:	bf08      	it	eq
 800c662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66a:	6010      	str	r0, [r2, #0]
 800c66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c674:	f380 8811 	msr	BASEPRI, r0
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f7fe fec6 	bl	800b410 <vTaskSwitchContext>
 800c684:	f04f 0000 	mov.w	r0, #0
 800c688:	f380 8811 	msr	BASEPRI, r0
 800c68c:	bc09      	pop	{r0, r3}
 800c68e:	6819      	ldr	r1, [r3, #0]
 800c690:	6808      	ldr	r0, [r1, #0]
 800c692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c696:	f01e 0f10 	tst.w	lr, #16
 800c69a:	bf08      	it	eq
 800c69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6a0:	f380 8809 	msr	PSP, r0
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w

0800c6b0 <pxCurrentTCBConst>:
 800c6b0:	20002ab8 	.word	0x20002ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop

0800c6b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	607b      	str	r3, [r7, #4]
}
 800c6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6d2:	f7fe fde3 	bl	800b29c <xTaskIncrementTick>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <xPortSysTickHandler+0x40>)
 800c6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	f383 8811 	msr	BASEPRI, r3
}
 800c6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6f0:	bf00      	nop
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c700:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <vPortSetupTimerInterrupt+0x34>)
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c706:	4b0b      	ldr	r3, [pc, #44]	; (800c734 <vPortSetupTimerInterrupt+0x38>)
 800c708:	2200      	movs	r2, #0
 800c70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c70c:	4b0a      	ldr	r3, [pc, #40]	; (800c738 <vPortSetupTimerInterrupt+0x3c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a0a      	ldr	r2, [pc, #40]	; (800c73c <vPortSetupTimerInterrupt+0x40>)
 800c712:	fba2 2303 	umull	r2, r3, r2, r3
 800c716:	099b      	lsrs	r3, r3, #6
 800c718:	4a09      	ldr	r2, [pc, #36]	; (800c740 <vPortSetupTimerInterrupt+0x44>)
 800c71a:	3b01      	subs	r3, #1
 800c71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c71e:	4b04      	ldr	r3, [pc, #16]	; (800c730 <vPortSetupTimerInterrupt+0x34>)
 800c720:	2207      	movs	r2, #7
 800c722:	601a      	str	r2, [r3, #0]
}
 800c724:	bf00      	nop
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	e000e010 	.word	0xe000e010
 800c734:	e000e018 	.word	0xe000e018
 800c738:	20000000 	.word	0x20000000
 800c73c:	10624dd3 	.word	0x10624dd3
 800c740:	e000e014 	.word	0xe000e014

0800c744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c754 <vPortEnableVFP+0x10>
 800c748:	6801      	ldr	r1, [r0, #0]
 800c74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c74e:	6001      	str	r1, [r0, #0]
 800c750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c752:	bf00      	nop
 800c754:	e000ed88 	.word	0xe000ed88

0800c758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c75e:	f3ef 8305 	mrs	r3, IPSR
 800c762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b0f      	cmp	r3, #15
 800c768:	d914      	bls.n	800c794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c76a:	4a17      	ldr	r2, [pc, #92]	; (800c7c8 <vPortValidateInterruptPriority+0x70>)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c774:	4b15      	ldr	r3, [pc, #84]	; (800c7cc <vPortValidateInterruptPriority+0x74>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	7afa      	ldrb	r2, [r7, #11]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d20a      	bcs.n	800c794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	607b      	str	r3, [r7, #4]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c794:	4b0e      	ldr	r3, [pc, #56]	; (800c7d0 <vPortValidateInterruptPriority+0x78>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c79c:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <vPortValidateInterruptPriority+0x7c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d90a      	bls.n	800c7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	603b      	str	r3, [r7, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <vPortValidateInterruptPriority+0x60>
	}
 800c7ba:	bf00      	nop
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	e000e3f0 	.word	0xe000e3f0
 800c7cc:	200030e4 	.word	0x200030e4
 800c7d0:	e000ed0c 	.word	0xe000ed0c
 800c7d4:	200030e8 	.word	0x200030e8

0800c7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08a      	sub	sp, #40	; 0x28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7e4:	f7fe fc8c 	bl	800b100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7e8:	4b5b      	ldr	r3, [pc, #364]	; (800c958 <pvPortMalloc+0x180>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7f0:	f000 f920 	bl	800ca34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7f4:	4b59      	ldr	r3, [pc, #356]	; (800c95c <pvPortMalloc+0x184>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f040 8093 	bne.w	800c928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d01d      	beq.n	800c844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c808:	2208      	movs	r2, #8
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4413      	add	r3, r2
 800c80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f003 0307 	and.w	r3, r3, #7
 800c816:	2b00      	cmp	r3, #0
 800c818:	d014      	beq.n	800c844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f023 0307 	bic.w	r3, r3, #7
 800c820:	3308      	adds	r3, #8
 800c822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <pvPortMalloc+0x6c>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	617b      	str	r3, [r7, #20]
}
 800c840:	bf00      	nop
 800c842:	e7fe      	b.n	800c842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d06e      	beq.n	800c928 <pvPortMalloc+0x150>
 800c84a:	4b45      	ldr	r3, [pc, #276]	; (800c960 <pvPortMalloc+0x188>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	d869      	bhi.n	800c928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c854:	4b43      	ldr	r3, [pc, #268]	; (800c964 <pvPortMalloc+0x18c>)
 800c856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c858:	4b42      	ldr	r3, [pc, #264]	; (800c964 <pvPortMalloc+0x18c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c85e:	e004      	b.n	800c86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	429a      	cmp	r2, r3
 800c872:	d903      	bls.n	800c87c <pvPortMalloc+0xa4>
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1f1      	bne.n	800c860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c87c:	4b36      	ldr	r3, [pc, #216]	; (800c958 <pvPortMalloc+0x180>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c882:	429a      	cmp	r2, r3
 800c884:	d050      	beq.n	800c928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c886:	6a3b      	ldr	r3, [r7, #32]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2208      	movs	r2, #8
 800c88c:	4413      	add	r3, r2
 800c88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	6a3b      	ldr	r3, [r7, #32]
 800c896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	1ad2      	subs	r2, r2, r3
 800c8a0:	2308      	movs	r3, #8
 800c8a2:	005b      	lsls	r3, r3, #1
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d91f      	bls.n	800c8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	f003 0307 	and.w	r3, r3, #7
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00a      	beq.n	800c8d0 <pvPortMalloc+0xf8>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	613b      	str	r3, [r7, #16]
}
 800c8cc:	bf00      	nop
 800c8ce:	e7fe      	b.n	800c8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	685a      	ldr	r2, [r3, #4]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	1ad2      	subs	r2, r2, r3
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8e2:	69b8      	ldr	r0, [r7, #24]
 800c8e4:	f000 f908 	bl	800caf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8e8:	4b1d      	ldr	r3, [pc, #116]	; (800c960 <pvPortMalloc+0x188>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	4a1b      	ldr	r2, [pc, #108]	; (800c960 <pvPortMalloc+0x188>)
 800c8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8f6:	4b1a      	ldr	r3, [pc, #104]	; (800c960 <pvPortMalloc+0x188>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	4b1b      	ldr	r3, [pc, #108]	; (800c968 <pvPortMalloc+0x190>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d203      	bcs.n	800c90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c902:	4b17      	ldr	r3, [pc, #92]	; (800c960 <pvPortMalloc+0x188>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a18      	ldr	r2, [pc, #96]	; (800c968 <pvPortMalloc+0x190>)
 800c908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	685a      	ldr	r2, [r3, #4]
 800c90e:	4b13      	ldr	r3, [pc, #76]	; (800c95c <pvPortMalloc+0x184>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	431a      	orrs	r2, r3
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c91e:	4b13      	ldr	r3, [pc, #76]	; (800c96c <pvPortMalloc+0x194>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3301      	adds	r3, #1
 800c924:	4a11      	ldr	r2, [pc, #68]	; (800c96c <pvPortMalloc+0x194>)
 800c926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c928:	f7fe fbf8 	bl	800b11c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	f003 0307 	and.w	r3, r3, #7
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <pvPortMalloc+0x174>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	60fb      	str	r3, [r7, #12]
}
 800c948:	bf00      	nop
 800c94a:	e7fe      	b.n	800c94a <pvPortMalloc+0x172>
	return pvReturn;
 800c94c:	69fb      	ldr	r3, [r7, #28]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3728      	adds	r7, #40	; 0x28
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20006cf4 	.word	0x20006cf4
 800c95c:	20006d08 	.word	0x20006d08
 800c960:	20006cf8 	.word	0x20006cf8
 800c964:	20006cec 	.word	0x20006cec
 800c968:	20006cfc 	.word	0x20006cfc
 800c96c:	20006d00 	.word	0x20006d00

0800c970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d04d      	beq.n	800ca1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c982:	2308      	movs	r3, #8
 800c984:	425b      	negs	r3, r3
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	4413      	add	r3, r2
 800c98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	4b24      	ldr	r3, [pc, #144]	; (800ca28 <vPortFree+0xb8>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4013      	ands	r3, r2
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10a      	bne.n	800c9b4 <vPortFree+0x44>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	60fb      	str	r3, [r7, #12]
}
 800c9b0:	bf00      	nop
 800c9b2:	e7fe      	b.n	800c9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00a      	beq.n	800c9d2 <vPortFree+0x62>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	60bb      	str	r3, [r7, #8]
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	4b14      	ldr	r3, [pc, #80]	; (800ca28 <vPortFree+0xb8>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4013      	ands	r3, r2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d01e      	beq.n	800ca1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d11a      	bne.n	800ca1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <vPortFree+0xb8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	43db      	mvns	r3, r3
 800c9f2:	401a      	ands	r2, r3
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9f8:	f7fe fb82 	bl	800b100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <vPortFree+0xbc>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4413      	add	r3, r2
 800ca06:	4a09      	ldr	r2, [pc, #36]	; (800ca2c <vPortFree+0xbc>)
 800ca08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca0a:	6938      	ldr	r0, [r7, #16]
 800ca0c:	f000 f874 	bl	800caf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca10:	4b07      	ldr	r3, [pc, #28]	; (800ca30 <vPortFree+0xc0>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3301      	adds	r3, #1
 800ca16:	4a06      	ldr	r2, [pc, #24]	; (800ca30 <vPortFree+0xc0>)
 800ca18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca1a:	f7fe fb7f 	bl	800b11c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca1e:	bf00      	nop
 800ca20:	3718      	adds	r7, #24
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20006d08 	.word	0x20006d08
 800ca2c:	20006cf8 	.word	0x20006cf8
 800ca30:	20006d04 	.word	0x20006d04

0800ca34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca40:	4b27      	ldr	r3, [pc, #156]	; (800cae0 <prvHeapInit+0xac>)
 800ca42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00c      	beq.n	800ca68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3307      	adds	r3, #7
 800ca52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0307 	bic.w	r3, r3, #7
 800ca5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	4a1f      	ldr	r2, [pc, #124]	; (800cae0 <prvHeapInit+0xac>)
 800ca64:	4413      	add	r3, r2
 800ca66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca6c:	4a1d      	ldr	r2, [pc, #116]	; (800cae4 <prvHeapInit+0xb0>)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca72:	4b1c      	ldr	r3, [pc, #112]	; (800cae4 <prvHeapInit+0xb0>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca80:	2208      	movs	r2, #8
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	1a9b      	subs	r3, r3, r2
 800ca86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f023 0307 	bic.w	r3, r3, #7
 800ca8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4a15      	ldr	r2, [pc, #84]	; (800cae8 <prvHeapInit+0xb4>)
 800ca94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca96:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <prvHeapInit+0xb4>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca9e:	4b12      	ldr	r3, [pc, #72]	; (800cae8 <prvHeapInit+0xb4>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cab4:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <prvHeapInit+0xb4>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	4a0a      	ldr	r2, [pc, #40]	; (800caec <prvHeapInit+0xb8>)
 800cac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	4a09      	ldr	r2, [pc, #36]	; (800caf0 <prvHeapInit+0xbc>)
 800caca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cacc:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <prvHeapInit+0xc0>)
 800cace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cad2:	601a      	str	r2, [r3, #0]
}
 800cad4:	bf00      	nop
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	200030ec 	.word	0x200030ec
 800cae4:	20006cec 	.word	0x20006cec
 800cae8:	20006cf4 	.word	0x20006cf4
 800caec:	20006cfc 	.word	0x20006cfc
 800caf0:	20006cf8 	.word	0x20006cf8
 800caf4:	20006d08 	.word	0x20006d08

0800caf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb00:	4b28      	ldr	r3, [pc, #160]	; (800cba4 <prvInsertBlockIntoFreeList+0xac>)
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	e002      	b.n	800cb0c <prvInsertBlockIntoFreeList+0x14>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d8f7      	bhi.n	800cb06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	4413      	add	r3, r2
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d108      	bne.n	800cb3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	441a      	add	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	441a      	add	r2, r3
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d118      	bne.n	800cb80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d00d      	beq.n	800cb76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	441a      	add	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	e008      	b.n	800cb88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb76:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	601a      	str	r2, [r3, #0]
 800cb7e:	e003      	b.n	800cb88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d002      	beq.n	800cb96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb96:	bf00      	nop
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	20006cec 	.word	0x20006cec
 800cba8:	20006cf4 	.word	0x20006cf4

0800cbac <malloc>:
 800cbac:	4b02      	ldr	r3, [pc, #8]	; (800cbb8 <malloc+0xc>)
 800cbae:	4601      	mov	r1, r0
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	f000 b823 	b.w	800cbfc <_malloc_r>
 800cbb6:	bf00      	nop
 800cbb8:	200000c0 	.word	0x200000c0

0800cbbc <sbrk_aligned>:
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	4e0e      	ldr	r6, [pc, #56]	; (800cbf8 <sbrk_aligned+0x3c>)
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	6831      	ldr	r1, [r6, #0]
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	b911      	cbnz	r1, 800cbce <sbrk_aligned+0x12>
 800cbc8:	f000 fb1c 	bl	800d204 <_sbrk_r>
 800cbcc:	6030      	str	r0, [r6, #0]
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f000 fb17 	bl	800d204 <_sbrk_r>
 800cbd6:	1c43      	adds	r3, r0, #1
 800cbd8:	d00a      	beq.n	800cbf0 <sbrk_aligned+0x34>
 800cbda:	1cc4      	adds	r4, r0, #3
 800cbdc:	f024 0403 	bic.w	r4, r4, #3
 800cbe0:	42a0      	cmp	r0, r4
 800cbe2:	d007      	beq.n	800cbf4 <sbrk_aligned+0x38>
 800cbe4:	1a21      	subs	r1, r4, r0
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	f000 fb0c 	bl	800d204 <_sbrk_r>
 800cbec:	3001      	adds	r0, #1
 800cbee:	d101      	bne.n	800cbf4 <sbrk_aligned+0x38>
 800cbf0:	f04f 34ff 	mov.w	r4, #4294967295
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
 800cbf8:	20006d10 	.word	0x20006d10

0800cbfc <_malloc_r>:
 800cbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc00:	1ccd      	adds	r5, r1, #3
 800cc02:	f025 0503 	bic.w	r5, r5, #3
 800cc06:	3508      	adds	r5, #8
 800cc08:	2d0c      	cmp	r5, #12
 800cc0a:	bf38      	it	cc
 800cc0c:	250c      	movcc	r5, #12
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	4607      	mov	r7, r0
 800cc12:	db01      	blt.n	800cc18 <_malloc_r+0x1c>
 800cc14:	42a9      	cmp	r1, r5
 800cc16:	d905      	bls.n	800cc24 <_malloc_r+0x28>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	2600      	movs	r6, #0
 800cc1e:	4630      	mov	r0, r6
 800cc20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ccf8 <_malloc_r+0xfc>
 800cc28:	f000 f868 	bl	800ccfc <__malloc_lock>
 800cc2c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc30:	461c      	mov	r4, r3
 800cc32:	bb5c      	cbnz	r4, 800cc8c <_malloc_r+0x90>
 800cc34:	4629      	mov	r1, r5
 800cc36:	4638      	mov	r0, r7
 800cc38:	f7ff ffc0 	bl	800cbbc <sbrk_aligned>
 800cc3c:	1c43      	adds	r3, r0, #1
 800cc3e:	4604      	mov	r4, r0
 800cc40:	d155      	bne.n	800ccee <_malloc_r+0xf2>
 800cc42:	f8d8 4000 	ldr.w	r4, [r8]
 800cc46:	4626      	mov	r6, r4
 800cc48:	2e00      	cmp	r6, #0
 800cc4a:	d145      	bne.n	800ccd8 <_malloc_r+0xdc>
 800cc4c:	2c00      	cmp	r4, #0
 800cc4e:	d048      	beq.n	800cce2 <_malloc_r+0xe6>
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	4631      	mov	r1, r6
 800cc54:	4638      	mov	r0, r7
 800cc56:	eb04 0903 	add.w	r9, r4, r3
 800cc5a:	f000 fad3 	bl	800d204 <_sbrk_r>
 800cc5e:	4581      	cmp	r9, r0
 800cc60:	d13f      	bne.n	800cce2 <_malloc_r+0xe6>
 800cc62:	6821      	ldr	r1, [r4, #0]
 800cc64:	1a6d      	subs	r5, r5, r1
 800cc66:	4629      	mov	r1, r5
 800cc68:	4638      	mov	r0, r7
 800cc6a:	f7ff ffa7 	bl	800cbbc <sbrk_aligned>
 800cc6e:	3001      	adds	r0, #1
 800cc70:	d037      	beq.n	800cce2 <_malloc_r+0xe6>
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	442b      	add	r3, r5
 800cc76:	6023      	str	r3, [r4, #0]
 800cc78:	f8d8 3000 	ldr.w	r3, [r8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d038      	beq.n	800ccf2 <_malloc_r+0xf6>
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	42a2      	cmp	r2, r4
 800cc84:	d12b      	bne.n	800ccde <_malloc_r+0xe2>
 800cc86:	2200      	movs	r2, #0
 800cc88:	605a      	str	r2, [r3, #4]
 800cc8a:	e00f      	b.n	800ccac <_malloc_r+0xb0>
 800cc8c:	6822      	ldr	r2, [r4, #0]
 800cc8e:	1b52      	subs	r2, r2, r5
 800cc90:	d41f      	bmi.n	800ccd2 <_malloc_r+0xd6>
 800cc92:	2a0b      	cmp	r2, #11
 800cc94:	d917      	bls.n	800ccc6 <_malloc_r+0xca>
 800cc96:	1961      	adds	r1, r4, r5
 800cc98:	42a3      	cmp	r3, r4
 800cc9a:	6025      	str	r5, [r4, #0]
 800cc9c:	bf18      	it	ne
 800cc9e:	6059      	strne	r1, [r3, #4]
 800cca0:	6863      	ldr	r3, [r4, #4]
 800cca2:	bf08      	it	eq
 800cca4:	f8c8 1000 	streq.w	r1, [r8]
 800cca8:	5162      	str	r2, [r4, r5]
 800ccaa:	604b      	str	r3, [r1, #4]
 800ccac:	4638      	mov	r0, r7
 800ccae:	f104 060b 	add.w	r6, r4, #11
 800ccb2:	f000 f829 	bl	800cd08 <__malloc_unlock>
 800ccb6:	f026 0607 	bic.w	r6, r6, #7
 800ccba:	1d23      	adds	r3, r4, #4
 800ccbc:	1af2      	subs	r2, r6, r3
 800ccbe:	d0ae      	beq.n	800cc1e <_malloc_r+0x22>
 800ccc0:	1b9b      	subs	r3, r3, r6
 800ccc2:	50a3      	str	r3, [r4, r2]
 800ccc4:	e7ab      	b.n	800cc1e <_malloc_r+0x22>
 800ccc6:	42a3      	cmp	r3, r4
 800ccc8:	6862      	ldr	r2, [r4, #4]
 800ccca:	d1dd      	bne.n	800cc88 <_malloc_r+0x8c>
 800cccc:	f8c8 2000 	str.w	r2, [r8]
 800ccd0:	e7ec      	b.n	800ccac <_malloc_r+0xb0>
 800ccd2:	4623      	mov	r3, r4
 800ccd4:	6864      	ldr	r4, [r4, #4]
 800ccd6:	e7ac      	b.n	800cc32 <_malloc_r+0x36>
 800ccd8:	4634      	mov	r4, r6
 800ccda:	6876      	ldr	r6, [r6, #4]
 800ccdc:	e7b4      	b.n	800cc48 <_malloc_r+0x4c>
 800ccde:	4613      	mov	r3, r2
 800cce0:	e7cc      	b.n	800cc7c <_malloc_r+0x80>
 800cce2:	230c      	movs	r3, #12
 800cce4:	603b      	str	r3, [r7, #0]
 800cce6:	4638      	mov	r0, r7
 800cce8:	f000 f80e 	bl	800cd08 <__malloc_unlock>
 800ccec:	e797      	b.n	800cc1e <_malloc_r+0x22>
 800ccee:	6025      	str	r5, [r4, #0]
 800ccf0:	e7dc      	b.n	800ccac <_malloc_r+0xb0>
 800ccf2:	605b      	str	r3, [r3, #4]
 800ccf4:	deff      	udf	#255	; 0xff
 800ccf6:	bf00      	nop
 800ccf8:	20006d0c 	.word	0x20006d0c

0800ccfc <__malloc_lock>:
 800ccfc:	4801      	ldr	r0, [pc, #4]	; (800cd04 <__malloc_lock+0x8>)
 800ccfe:	f000 bace 	b.w	800d29e <__retarget_lock_acquire_recursive>
 800cd02:	bf00      	nop
 800cd04:	20006e54 	.word	0x20006e54

0800cd08 <__malloc_unlock>:
 800cd08:	4801      	ldr	r0, [pc, #4]	; (800cd10 <__malloc_unlock+0x8>)
 800cd0a:	f000 bac9 	b.w	800d2a0 <__retarget_lock_release_recursive>
 800cd0e:	bf00      	nop
 800cd10:	20006e54 	.word	0x20006e54

0800cd14 <std>:
 800cd14:	2300      	movs	r3, #0
 800cd16:	b510      	push	{r4, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd22:	6083      	str	r3, [r0, #8]
 800cd24:	8181      	strh	r1, [r0, #12]
 800cd26:	6643      	str	r3, [r0, #100]	; 0x64
 800cd28:	81c2      	strh	r2, [r0, #14]
 800cd2a:	6183      	str	r3, [r0, #24]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	2208      	movs	r2, #8
 800cd30:	305c      	adds	r0, #92	; 0x5c
 800cd32:	f000 fa2b 	bl	800d18c <memset>
 800cd36:	4b0d      	ldr	r3, [pc, #52]	; (800cd6c <std+0x58>)
 800cd38:	6263      	str	r3, [r4, #36]	; 0x24
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	; (800cd70 <std+0x5c>)
 800cd3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd3e:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <std+0x60>)
 800cd40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd42:	4b0d      	ldr	r3, [pc, #52]	; (800cd78 <std+0x64>)
 800cd44:	6323      	str	r3, [r4, #48]	; 0x30
 800cd46:	4b0d      	ldr	r3, [pc, #52]	; (800cd7c <std+0x68>)
 800cd48:	6224      	str	r4, [r4, #32]
 800cd4a:	429c      	cmp	r4, r3
 800cd4c:	d006      	beq.n	800cd5c <std+0x48>
 800cd4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cd52:	4294      	cmp	r4, r2
 800cd54:	d002      	beq.n	800cd5c <std+0x48>
 800cd56:	33d0      	adds	r3, #208	; 0xd0
 800cd58:	429c      	cmp	r4, r3
 800cd5a:	d105      	bne.n	800cd68 <std+0x54>
 800cd5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd64:	f000 ba9a 	b.w	800d29c <__retarget_lock_init_recursive>
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	bf00      	nop
 800cd6c:	0800cfdd 	.word	0x0800cfdd
 800cd70:	0800cfff 	.word	0x0800cfff
 800cd74:	0800d037 	.word	0x0800d037
 800cd78:	0800d05b 	.word	0x0800d05b
 800cd7c:	20006d14 	.word	0x20006d14

0800cd80 <stdio_exit_handler>:
 800cd80:	4a02      	ldr	r2, [pc, #8]	; (800cd8c <stdio_exit_handler+0xc>)
 800cd82:	4903      	ldr	r1, [pc, #12]	; (800cd90 <stdio_exit_handler+0x10>)
 800cd84:	4803      	ldr	r0, [pc, #12]	; (800cd94 <stdio_exit_handler+0x14>)
 800cd86:	f000 b869 	b.w	800ce5c <_fwalk_sglue>
 800cd8a:	bf00      	nop
 800cd8c:	20000068 	.word	0x20000068
 800cd90:	0800dcbd 	.word	0x0800dcbd
 800cd94:	20000074 	.word	0x20000074

0800cd98 <cleanup_stdio>:
 800cd98:	6841      	ldr	r1, [r0, #4]
 800cd9a:	4b0c      	ldr	r3, [pc, #48]	; (800cdcc <cleanup_stdio+0x34>)
 800cd9c:	4299      	cmp	r1, r3
 800cd9e:	b510      	push	{r4, lr}
 800cda0:	4604      	mov	r4, r0
 800cda2:	d001      	beq.n	800cda8 <cleanup_stdio+0x10>
 800cda4:	f000 ff8a 	bl	800dcbc <_fflush_r>
 800cda8:	68a1      	ldr	r1, [r4, #8]
 800cdaa:	4b09      	ldr	r3, [pc, #36]	; (800cdd0 <cleanup_stdio+0x38>)
 800cdac:	4299      	cmp	r1, r3
 800cdae:	d002      	beq.n	800cdb6 <cleanup_stdio+0x1e>
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 ff83 	bl	800dcbc <_fflush_r>
 800cdb6:	68e1      	ldr	r1, [r4, #12]
 800cdb8:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <cleanup_stdio+0x3c>)
 800cdba:	4299      	cmp	r1, r3
 800cdbc:	d004      	beq.n	800cdc8 <cleanup_stdio+0x30>
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdc4:	f000 bf7a 	b.w	800dcbc <_fflush_r>
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	bf00      	nop
 800cdcc:	20006d14 	.word	0x20006d14
 800cdd0:	20006d7c 	.word	0x20006d7c
 800cdd4:	20006de4 	.word	0x20006de4

0800cdd8 <global_stdio_init.part.0>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <global_stdio_init.part.0+0x30>)
 800cddc:	4c0b      	ldr	r4, [pc, #44]	; (800ce0c <global_stdio_init.part.0+0x34>)
 800cdde:	4a0c      	ldr	r2, [pc, #48]	; (800ce10 <global_stdio_init.part.0+0x38>)
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	4620      	mov	r0, r4
 800cde4:	2200      	movs	r2, #0
 800cde6:	2104      	movs	r1, #4
 800cde8:	f7ff ff94 	bl	800cd14 <std>
 800cdec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	2109      	movs	r1, #9
 800cdf4:	f7ff ff8e 	bl	800cd14 <std>
 800cdf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce02:	2112      	movs	r1, #18
 800ce04:	f7ff bf86 	b.w	800cd14 <std>
 800ce08:	20006e4c 	.word	0x20006e4c
 800ce0c:	20006d14 	.word	0x20006d14
 800ce10:	0800cd81 	.word	0x0800cd81

0800ce14 <__sfp_lock_acquire>:
 800ce14:	4801      	ldr	r0, [pc, #4]	; (800ce1c <__sfp_lock_acquire+0x8>)
 800ce16:	f000 ba42 	b.w	800d29e <__retarget_lock_acquire_recursive>
 800ce1a:	bf00      	nop
 800ce1c:	20006e55 	.word	0x20006e55

0800ce20 <__sfp_lock_release>:
 800ce20:	4801      	ldr	r0, [pc, #4]	; (800ce28 <__sfp_lock_release+0x8>)
 800ce22:	f000 ba3d 	b.w	800d2a0 <__retarget_lock_release_recursive>
 800ce26:	bf00      	nop
 800ce28:	20006e55 	.word	0x20006e55

0800ce2c <__sinit>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	4604      	mov	r4, r0
 800ce30:	f7ff fff0 	bl	800ce14 <__sfp_lock_acquire>
 800ce34:	6a23      	ldr	r3, [r4, #32]
 800ce36:	b11b      	cbz	r3, 800ce40 <__sinit+0x14>
 800ce38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce3c:	f7ff bff0 	b.w	800ce20 <__sfp_lock_release>
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <__sinit+0x28>)
 800ce42:	6223      	str	r3, [r4, #32]
 800ce44:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <__sinit+0x2c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1f5      	bne.n	800ce38 <__sinit+0xc>
 800ce4c:	f7ff ffc4 	bl	800cdd8 <global_stdio_init.part.0>
 800ce50:	e7f2      	b.n	800ce38 <__sinit+0xc>
 800ce52:	bf00      	nop
 800ce54:	0800cd99 	.word	0x0800cd99
 800ce58:	20006e4c 	.word	0x20006e4c

0800ce5c <_fwalk_sglue>:
 800ce5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce60:	4607      	mov	r7, r0
 800ce62:	4688      	mov	r8, r1
 800ce64:	4614      	mov	r4, r2
 800ce66:	2600      	movs	r6, #0
 800ce68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce6c:	f1b9 0901 	subs.w	r9, r9, #1
 800ce70:	d505      	bpl.n	800ce7e <_fwalk_sglue+0x22>
 800ce72:	6824      	ldr	r4, [r4, #0]
 800ce74:	2c00      	cmp	r4, #0
 800ce76:	d1f7      	bne.n	800ce68 <_fwalk_sglue+0xc>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce7e:	89ab      	ldrh	r3, [r5, #12]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d907      	bls.n	800ce94 <_fwalk_sglue+0x38>
 800ce84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	d003      	beq.n	800ce94 <_fwalk_sglue+0x38>
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4638      	mov	r0, r7
 800ce90:	47c0      	blx	r8
 800ce92:	4306      	orrs	r6, r0
 800ce94:	3568      	adds	r5, #104	; 0x68
 800ce96:	e7e9      	b.n	800ce6c <_fwalk_sglue+0x10>

0800ce98 <iprintf>:
 800ce98:	b40f      	push	{r0, r1, r2, r3}
 800ce9a:	b507      	push	{r0, r1, r2, lr}
 800ce9c:	4906      	ldr	r1, [pc, #24]	; (800ceb8 <iprintf+0x20>)
 800ce9e:	ab04      	add	r3, sp, #16
 800cea0:	6808      	ldr	r0, [r1, #0]
 800cea2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea6:	6881      	ldr	r1, [r0, #8]
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	f000 fbd7 	bl	800d65c <_vfiprintf_r>
 800ceae:	b003      	add	sp, #12
 800ceb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceb4:	b004      	add	sp, #16
 800ceb6:	4770      	bx	lr
 800ceb8:	200000c0 	.word	0x200000c0

0800cebc <_puts_r>:
 800cebc:	6a03      	ldr	r3, [r0, #32]
 800cebe:	b570      	push	{r4, r5, r6, lr}
 800cec0:	6884      	ldr	r4, [r0, #8]
 800cec2:	4605      	mov	r5, r0
 800cec4:	460e      	mov	r6, r1
 800cec6:	b90b      	cbnz	r3, 800cecc <_puts_r+0x10>
 800cec8:	f7ff ffb0 	bl	800ce2c <__sinit>
 800cecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cece:	07db      	lsls	r3, r3, #31
 800ced0:	d405      	bmi.n	800cede <_puts_r+0x22>
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	0598      	lsls	r0, r3, #22
 800ced6:	d402      	bmi.n	800cede <_puts_r+0x22>
 800ced8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceda:	f000 f9e0 	bl	800d29e <__retarget_lock_acquire_recursive>
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	0719      	lsls	r1, r3, #28
 800cee2:	d513      	bpl.n	800cf0c <_puts_r+0x50>
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	b18b      	cbz	r3, 800cf0c <_puts_r+0x50>
 800cee8:	3e01      	subs	r6, #1
 800ceea:	68a3      	ldr	r3, [r4, #8]
 800ceec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cef0:	3b01      	subs	r3, #1
 800cef2:	60a3      	str	r3, [r4, #8]
 800cef4:	b9e9      	cbnz	r1, 800cf32 <_puts_r+0x76>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	da2e      	bge.n	800cf58 <_puts_r+0x9c>
 800cefa:	4622      	mov	r2, r4
 800cefc:	210a      	movs	r1, #10
 800cefe:	4628      	mov	r0, r5
 800cf00:	f000 f8af 	bl	800d062 <__swbuf_r>
 800cf04:	3001      	adds	r0, #1
 800cf06:	d007      	beq.n	800cf18 <_puts_r+0x5c>
 800cf08:	250a      	movs	r5, #10
 800cf0a:	e007      	b.n	800cf1c <_puts_r+0x60>
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f000 f8e4 	bl	800d0dc <__swsetup_r>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d0e7      	beq.n	800cee8 <_puts_r+0x2c>
 800cf18:	f04f 35ff 	mov.w	r5, #4294967295
 800cf1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf1e:	07da      	lsls	r2, r3, #31
 800cf20:	d405      	bmi.n	800cf2e <_puts_r+0x72>
 800cf22:	89a3      	ldrh	r3, [r4, #12]
 800cf24:	059b      	lsls	r3, r3, #22
 800cf26:	d402      	bmi.n	800cf2e <_puts_r+0x72>
 800cf28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf2a:	f000 f9b9 	bl	800d2a0 <__retarget_lock_release_recursive>
 800cf2e:	4628      	mov	r0, r5
 800cf30:	bd70      	pop	{r4, r5, r6, pc}
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	da04      	bge.n	800cf40 <_puts_r+0x84>
 800cf36:	69a2      	ldr	r2, [r4, #24]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	dc06      	bgt.n	800cf4a <_puts_r+0x8e>
 800cf3c:	290a      	cmp	r1, #10
 800cf3e:	d004      	beq.n	800cf4a <_puts_r+0x8e>
 800cf40:	6823      	ldr	r3, [r4, #0]
 800cf42:	1c5a      	adds	r2, r3, #1
 800cf44:	6022      	str	r2, [r4, #0]
 800cf46:	7019      	strb	r1, [r3, #0]
 800cf48:	e7cf      	b.n	800ceea <_puts_r+0x2e>
 800cf4a:	4622      	mov	r2, r4
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f000 f888 	bl	800d062 <__swbuf_r>
 800cf52:	3001      	adds	r0, #1
 800cf54:	d1c9      	bne.n	800ceea <_puts_r+0x2e>
 800cf56:	e7df      	b.n	800cf18 <_puts_r+0x5c>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	250a      	movs	r5, #10
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	6022      	str	r2, [r4, #0]
 800cf60:	701d      	strb	r5, [r3, #0]
 800cf62:	e7db      	b.n	800cf1c <_puts_r+0x60>

0800cf64 <puts>:
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <puts+0xc>)
 800cf66:	4601      	mov	r1, r0
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	f7ff bfa7 	b.w	800cebc <_puts_r>
 800cf6e:	bf00      	nop
 800cf70:	200000c0 	.word	0x200000c0

0800cf74 <sniprintf>:
 800cf74:	b40c      	push	{r2, r3}
 800cf76:	b530      	push	{r4, r5, lr}
 800cf78:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <sniprintf+0x64>)
 800cf7a:	1e0c      	subs	r4, r1, #0
 800cf7c:	681d      	ldr	r5, [r3, #0]
 800cf7e:	b09d      	sub	sp, #116	; 0x74
 800cf80:	da08      	bge.n	800cf94 <sniprintf+0x20>
 800cf82:	238b      	movs	r3, #139	; 0x8b
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8a:	b01d      	add	sp, #116	; 0x74
 800cf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf90:	b002      	add	sp, #8
 800cf92:	4770      	bx	lr
 800cf94:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cf9c:	bf14      	ite	ne
 800cf9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cfa2:	4623      	moveq	r3, r4
 800cfa4:	9304      	str	r3, [sp, #16]
 800cfa6:	9307      	str	r3, [sp, #28]
 800cfa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfac:	9002      	str	r0, [sp, #8]
 800cfae:	9006      	str	r0, [sp, #24]
 800cfb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cfb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cfb6:	ab21      	add	r3, sp, #132	; 0x84
 800cfb8:	a902      	add	r1, sp, #8
 800cfba:	4628      	mov	r0, r5
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	f000 fa25 	bl	800d40c <_svfiprintf_r>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	bfbc      	itt	lt
 800cfc6:	238b      	movlt	r3, #139	; 0x8b
 800cfc8:	602b      	strlt	r3, [r5, #0]
 800cfca:	2c00      	cmp	r4, #0
 800cfcc:	d0dd      	beq.n	800cf8a <sniprintf+0x16>
 800cfce:	9b02      	ldr	r3, [sp, #8]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	701a      	strb	r2, [r3, #0]
 800cfd4:	e7d9      	b.n	800cf8a <sniprintf+0x16>
 800cfd6:	bf00      	nop
 800cfd8:	200000c0 	.word	0x200000c0

0800cfdc <__sread>:
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	460c      	mov	r4, r1
 800cfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe4:	f000 f8fc 	bl	800d1e0 <_read_r>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	bfab      	itete	ge
 800cfec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfee:	89a3      	ldrhlt	r3, [r4, #12]
 800cff0:	181b      	addge	r3, r3, r0
 800cff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cff6:	bfac      	ite	ge
 800cff8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cffa:	81a3      	strhlt	r3, [r4, #12]
 800cffc:	bd10      	pop	{r4, pc}

0800cffe <__swrite>:
 800cffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d002:	461f      	mov	r7, r3
 800d004:	898b      	ldrh	r3, [r1, #12]
 800d006:	05db      	lsls	r3, r3, #23
 800d008:	4605      	mov	r5, r0
 800d00a:	460c      	mov	r4, r1
 800d00c:	4616      	mov	r6, r2
 800d00e:	d505      	bpl.n	800d01c <__swrite+0x1e>
 800d010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d014:	2302      	movs	r3, #2
 800d016:	2200      	movs	r2, #0
 800d018:	f000 f8d0 	bl	800d1bc <_lseek_r>
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d026:	81a3      	strh	r3, [r4, #12]
 800d028:	4632      	mov	r2, r6
 800d02a:	463b      	mov	r3, r7
 800d02c:	4628      	mov	r0, r5
 800d02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d032:	f000 b8f7 	b.w	800d224 <_write_r>

0800d036 <__sseek>:
 800d036:	b510      	push	{r4, lr}
 800d038:	460c      	mov	r4, r1
 800d03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03e:	f000 f8bd 	bl	800d1bc <_lseek_r>
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	bf15      	itete	ne
 800d048:	6560      	strne	r0, [r4, #84]	; 0x54
 800d04a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d04e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d052:	81a3      	strheq	r3, [r4, #12]
 800d054:	bf18      	it	ne
 800d056:	81a3      	strhne	r3, [r4, #12]
 800d058:	bd10      	pop	{r4, pc}

0800d05a <__sclose>:
 800d05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d05e:	f000 b89d 	b.w	800d19c <_close_r>

0800d062 <__swbuf_r>:
 800d062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d064:	460e      	mov	r6, r1
 800d066:	4614      	mov	r4, r2
 800d068:	4605      	mov	r5, r0
 800d06a:	b118      	cbz	r0, 800d074 <__swbuf_r+0x12>
 800d06c:	6a03      	ldr	r3, [r0, #32]
 800d06e:	b90b      	cbnz	r3, 800d074 <__swbuf_r+0x12>
 800d070:	f7ff fedc 	bl	800ce2c <__sinit>
 800d074:	69a3      	ldr	r3, [r4, #24]
 800d076:	60a3      	str	r3, [r4, #8]
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	071a      	lsls	r2, r3, #28
 800d07c:	d525      	bpl.n	800d0ca <__swbuf_r+0x68>
 800d07e:	6923      	ldr	r3, [r4, #16]
 800d080:	b31b      	cbz	r3, 800d0ca <__swbuf_r+0x68>
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	6922      	ldr	r2, [r4, #16]
 800d086:	1a98      	subs	r0, r3, r2
 800d088:	6963      	ldr	r3, [r4, #20]
 800d08a:	b2f6      	uxtb	r6, r6
 800d08c:	4283      	cmp	r3, r0
 800d08e:	4637      	mov	r7, r6
 800d090:	dc04      	bgt.n	800d09c <__swbuf_r+0x3a>
 800d092:	4621      	mov	r1, r4
 800d094:	4628      	mov	r0, r5
 800d096:	f000 fe11 	bl	800dcbc <_fflush_r>
 800d09a:	b9e0      	cbnz	r0, 800d0d6 <__swbuf_r+0x74>
 800d09c:	68a3      	ldr	r3, [r4, #8]
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	60a3      	str	r3, [r4, #8]
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	6022      	str	r2, [r4, #0]
 800d0a8:	701e      	strb	r6, [r3, #0]
 800d0aa:	6962      	ldr	r2, [r4, #20]
 800d0ac:	1c43      	adds	r3, r0, #1
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d004      	beq.n	800d0bc <__swbuf_r+0x5a>
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	07db      	lsls	r3, r3, #31
 800d0b6:	d506      	bpl.n	800d0c6 <__swbuf_r+0x64>
 800d0b8:	2e0a      	cmp	r6, #10
 800d0ba:	d104      	bne.n	800d0c6 <__swbuf_r+0x64>
 800d0bc:	4621      	mov	r1, r4
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f000 fdfc 	bl	800dcbc <_fflush_r>
 800d0c4:	b938      	cbnz	r0, 800d0d6 <__swbuf_r+0x74>
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f000 f805 	bl	800d0dc <__swsetup_r>
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d0d5      	beq.n	800d082 <__swbuf_r+0x20>
 800d0d6:	f04f 37ff 	mov.w	r7, #4294967295
 800d0da:	e7f4      	b.n	800d0c6 <__swbuf_r+0x64>

0800d0dc <__swsetup_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4b2a      	ldr	r3, [pc, #168]	; (800d188 <__swsetup_r+0xac>)
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	6818      	ldr	r0, [r3, #0]
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	b118      	cbz	r0, 800d0f0 <__swsetup_r+0x14>
 800d0e8:	6a03      	ldr	r3, [r0, #32]
 800d0ea:	b90b      	cbnz	r3, 800d0f0 <__swsetup_r+0x14>
 800d0ec:	f7ff fe9e 	bl	800ce2c <__sinit>
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0f6:	0718      	lsls	r0, r3, #28
 800d0f8:	d422      	bmi.n	800d140 <__swsetup_r+0x64>
 800d0fa:	06d9      	lsls	r1, r3, #27
 800d0fc:	d407      	bmi.n	800d10e <__swsetup_r+0x32>
 800d0fe:	2309      	movs	r3, #9
 800d100:	602b      	str	r3, [r5, #0]
 800d102:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d106:	81a3      	strh	r3, [r4, #12]
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	e034      	b.n	800d178 <__swsetup_r+0x9c>
 800d10e:	0758      	lsls	r0, r3, #29
 800d110:	d512      	bpl.n	800d138 <__swsetup_r+0x5c>
 800d112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d114:	b141      	cbz	r1, 800d128 <__swsetup_r+0x4c>
 800d116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d11a:	4299      	cmp	r1, r3
 800d11c:	d002      	beq.n	800d124 <__swsetup_r+0x48>
 800d11e:	4628      	mov	r0, r5
 800d120:	f000 f8ce 	bl	800d2c0 <_free_r>
 800d124:	2300      	movs	r3, #0
 800d126:	6363      	str	r3, [r4, #52]	; 0x34
 800d128:	89a3      	ldrh	r3, [r4, #12]
 800d12a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d12e:	81a3      	strh	r3, [r4, #12]
 800d130:	2300      	movs	r3, #0
 800d132:	6063      	str	r3, [r4, #4]
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	6023      	str	r3, [r4, #0]
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	f043 0308 	orr.w	r3, r3, #8
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	b94b      	cbnz	r3, 800d158 <__swsetup_r+0x7c>
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d14a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d14e:	d003      	beq.n	800d158 <__swsetup_r+0x7c>
 800d150:	4621      	mov	r1, r4
 800d152:	4628      	mov	r0, r5
 800d154:	f000 fe00 	bl	800dd58 <__smakebuf_r>
 800d158:	89a0      	ldrh	r0, [r4, #12]
 800d15a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d15e:	f010 0301 	ands.w	r3, r0, #1
 800d162:	d00a      	beq.n	800d17a <__swsetup_r+0x9e>
 800d164:	2300      	movs	r3, #0
 800d166:	60a3      	str	r3, [r4, #8]
 800d168:	6963      	ldr	r3, [r4, #20]
 800d16a:	425b      	negs	r3, r3
 800d16c:	61a3      	str	r3, [r4, #24]
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	b943      	cbnz	r3, 800d184 <__swsetup_r+0xa8>
 800d172:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d176:	d1c4      	bne.n	800d102 <__swsetup_r+0x26>
 800d178:	bd38      	pop	{r3, r4, r5, pc}
 800d17a:	0781      	lsls	r1, r0, #30
 800d17c:	bf58      	it	pl
 800d17e:	6963      	ldrpl	r3, [r4, #20]
 800d180:	60a3      	str	r3, [r4, #8]
 800d182:	e7f4      	b.n	800d16e <__swsetup_r+0x92>
 800d184:	2000      	movs	r0, #0
 800d186:	e7f7      	b.n	800d178 <__swsetup_r+0x9c>
 800d188:	200000c0 	.word	0x200000c0

0800d18c <memset>:
 800d18c:	4402      	add	r2, r0
 800d18e:	4603      	mov	r3, r0
 800d190:	4293      	cmp	r3, r2
 800d192:	d100      	bne.n	800d196 <memset+0xa>
 800d194:	4770      	bx	lr
 800d196:	f803 1b01 	strb.w	r1, [r3], #1
 800d19a:	e7f9      	b.n	800d190 <memset+0x4>

0800d19c <_close_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	; (800d1b8 <_close_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f3 fc7d 	bl	8000aa6 <_close>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_close_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_close_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	20006e50 	.word	0x20006e50

0800d1bc <_lseek_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4d07      	ldr	r5, [pc, #28]	; (800d1dc <_lseek_r+0x20>)
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	4608      	mov	r0, r1
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	602a      	str	r2, [r5, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	f7f3 fc92 	bl	8000af4 <_lseek>
 800d1d0:	1c43      	adds	r3, r0, #1
 800d1d2:	d102      	bne.n	800d1da <_lseek_r+0x1e>
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	b103      	cbz	r3, 800d1da <_lseek_r+0x1e>
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
 800d1dc:	20006e50 	.word	0x20006e50

0800d1e0 <_read_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4d07      	ldr	r5, [pc, #28]	; (800d200 <_read_r+0x20>)
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	4608      	mov	r0, r1
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	602a      	str	r2, [r5, #0]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f7f3 fc3c 	bl	8000a6c <_read>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_read_r+0x1e>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_read_r+0x1e>
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	20006e50 	.word	0x20006e50

0800d204 <_sbrk_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4d06      	ldr	r5, [pc, #24]	; (800d220 <_sbrk_r+0x1c>)
 800d208:	2300      	movs	r3, #0
 800d20a:	4604      	mov	r4, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	602b      	str	r3, [r5, #0]
 800d210:	f7f3 fc7e 	bl	8000b10 <_sbrk>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_sbrk_r+0x1a>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_sbrk_r+0x1a>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	20006e50 	.word	0x20006e50

0800d224 <_write_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d07      	ldr	r5, [pc, #28]	; (800d244 <_write_r+0x20>)
 800d228:	4604      	mov	r4, r0
 800d22a:	4608      	mov	r0, r1
 800d22c:	4611      	mov	r1, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	602a      	str	r2, [r5, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	f7f3 fa5c 	bl	80006f0 <_write>
 800d238:	1c43      	adds	r3, r0, #1
 800d23a:	d102      	bne.n	800d242 <_write_r+0x1e>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b103      	cbz	r3, 800d242 <_write_r+0x1e>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	20006e50 	.word	0x20006e50

0800d248 <__errno>:
 800d248:	4b01      	ldr	r3, [pc, #4]	; (800d250 <__errno+0x8>)
 800d24a:	6818      	ldr	r0, [r3, #0]
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	200000c0 	.word	0x200000c0

0800d254 <__libc_init_array>:
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	4d0d      	ldr	r5, [pc, #52]	; (800d28c <__libc_init_array+0x38>)
 800d258:	4c0d      	ldr	r4, [pc, #52]	; (800d290 <__libc_init_array+0x3c>)
 800d25a:	1b64      	subs	r4, r4, r5
 800d25c:	10a4      	asrs	r4, r4, #2
 800d25e:	2600      	movs	r6, #0
 800d260:	42a6      	cmp	r6, r4
 800d262:	d109      	bne.n	800d278 <__libc_init_array+0x24>
 800d264:	4d0b      	ldr	r5, [pc, #44]	; (800d294 <__libc_init_array+0x40>)
 800d266:	4c0c      	ldr	r4, [pc, #48]	; (800d298 <__libc_init_array+0x44>)
 800d268:	f000 fe26 	bl	800deb8 <_init>
 800d26c:	1b64      	subs	r4, r4, r5
 800d26e:	10a4      	asrs	r4, r4, #2
 800d270:	2600      	movs	r6, #0
 800d272:	42a6      	cmp	r6, r4
 800d274:	d105      	bne.n	800d282 <__libc_init_array+0x2e>
 800d276:	bd70      	pop	{r4, r5, r6, pc}
 800d278:	f855 3b04 	ldr.w	r3, [r5], #4
 800d27c:	4798      	blx	r3
 800d27e:	3601      	adds	r6, #1
 800d280:	e7ee      	b.n	800d260 <__libc_init_array+0xc>
 800d282:	f855 3b04 	ldr.w	r3, [r5], #4
 800d286:	4798      	blx	r3
 800d288:	3601      	adds	r6, #1
 800d28a:	e7f2      	b.n	800d272 <__libc_init_array+0x1e>
 800d28c:	0800ea58 	.word	0x0800ea58
 800d290:	0800ea58 	.word	0x0800ea58
 800d294:	0800ea58 	.word	0x0800ea58
 800d298:	0800ea5c 	.word	0x0800ea5c

0800d29c <__retarget_lock_init_recursive>:
 800d29c:	4770      	bx	lr

0800d29e <__retarget_lock_acquire_recursive>:
 800d29e:	4770      	bx	lr

0800d2a0 <__retarget_lock_release_recursive>:
 800d2a0:	4770      	bx	lr

0800d2a2 <memcpy>:
 800d2a2:	440a      	add	r2, r1
 800d2a4:	4291      	cmp	r1, r2
 800d2a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2aa:	d100      	bne.n	800d2ae <memcpy+0xc>
 800d2ac:	4770      	bx	lr
 800d2ae:	b510      	push	{r4, lr}
 800d2b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2b8:	4291      	cmp	r1, r2
 800d2ba:	d1f9      	bne.n	800d2b0 <memcpy+0xe>
 800d2bc:	bd10      	pop	{r4, pc}
	...

0800d2c0 <_free_r>:
 800d2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2c2:	2900      	cmp	r1, #0
 800d2c4:	d044      	beq.n	800d350 <_free_r+0x90>
 800d2c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2ca:	9001      	str	r0, [sp, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f1a1 0404 	sub.w	r4, r1, #4
 800d2d2:	bfb8      	it	lt
 800d2d4:	18e4      	addlt	r4, r4, r3
 800d2d6:	f7ff fd11 	bl	800ccfc <__malloc_lock>
 800d2da:	4a1e      	ldr	r2, [pc, #120]	; (800d354 <_free_r+0x94>)
 800d2dc:	9801      	ldr	r0, [sp, #4]
 800d2de:	6813      	ldr	r3, [r2, #0]
 800d2e0:	b933      	cbnz	r3, 800d2f0 <_free_r+0x30>
 800d2e2:	6063      	str	r3, [r4, #4]
 800d2e4:	6014      	str	r4, [r2, #0]
 800d2e6:	b003      	add	sp, #12
 800d2e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2ec:	f7ff bd0c 	b.w	800cd08 <__malloc_unlock>
 800d2f0:	42a3      	cmp	r3, r4
 800d2f2:	d908      	bls.n	800d306 <_free_r+0x46>
 800d2f4:	6825      	ldr	r5, [r4, #0]
 800d2f6:	1961      	adds	r1, r4, r5
 800d2f8:	428b      	cmp	r3, r1
 800d2fa:	bf01      	itttt	eq
 800d2fc:	6819      	ldreq	r1, [r3, #0]
 800d2fe:	685b      	ldreq	r3, [r3, #4]
 800d300:	1949      	addeq	r1, r1, r5
 800d302:	6021      	streq	r1, [r4, #0]
 800d304:	e7ed      	b.n	800d2e2 <_free_r+0x22>
 800d306:	461a      	mov	r2, r3
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	b10b      	cbz	r3, 800d310 <_free_r+0x50>
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	d9fa      	bls.n	800d306 <_free_r+0x46>
 800d310:	6811      	ldr	r1, [r2, #0]
 800d312:	1855      	adds	r5, r2, r1
 800d314:	42a5      	cmp	r5, r4
 800d316:	d10b      	bne.n	800d330 <_free_r+0x70>
 800d318:	6824      	ldr	r4, [r4, #0]
 800d31a:	4421      	add	r1, r4
 800d31c:	1854      	adds	r4, r2, r1
 800d31e:	42a3      	cmp	r3, r4
 800d320:	6011      	str	r1, [r2, #0]
 800d322:	d1e0      	bne.n	800d2e6 <_free_r+0x26>
 800d324:	681c      	ldr	r4, [r3, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	6053      	str	r3, [r2, #4]
 800d32a:	440c      	add	r4, r1
 800d32c:	6014      	str	r4, [r2, #0]
 800d32e:	e7da      	b.n	800d2e6 <_free_r+0x26>
 800d330:	d902      	bls.n	800d338 <_free_r+0x78>
 800d332:	230c      	movs	r3, #12
 800d334:	6003      	str	r3, [r0, #0]
 800d336:	e7d6      	b.n	800d2e6 <_free_r+0x26>
 800d338:	6825      	ldr	r5, [r4, #0]
 800d33a:	1961      	adds	r1, r4, r5
 800d33c:	428b      	cmp	r3, r1
 800d33e:	bf04      	itt	eq
 800d340:	6819      	ldreq	r1, [r3, #0]
 800d342:	685b      	ldreq	r3, [r3, #4]
 800d344:	6063      	str	r3, [r4, #4]
 800d346:	bf04      	itt	eq
 800d348:	1949      	addeq	r1, r1, r5
 800d34a:	6021      	streq	r1, [r4, #0]
 800d34c:	6054      	str	r4, [r2, #4]
 800d34e:	e7ca      	b.n	800d2e6 <_free_r+0x26>
 800d350:	b003      	add	sp, #12
 800d352:	bd30      	pop	{r4, r5, pc}
 800d354:	20006d0c 	.word	0x20006d0c

0800d358 <__ssputs_r>:
 800d358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d35c:	688e      	ldr	r6, [r1, #8]
 800d35e:	461f      	mov	r7, r3
 800d360:	42be      	cmp	r6, r7
 800d362:	680b      	ldr	r3, [r1, #0]
 800d364:	4682      	mov	sl, r0
 800d366:	460c      	mov	r4, r1
 800d368:	4690      	mov	r8, r2
 800d36a:	d82c      	bhi.n	800d3c6 <__ssputs_r+0x6e>
 800d36c:	898a      	ldrh	r2, [r1, #12]
 800d36e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d372:	d026      	beq.n	800d3c2 <__ssputs_r+0x6a>
 800d374:	6965      	ldr	r5, [r4, #20]
 800d376:	6909      	ldr	r1, [r1, #16]
 800d378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d37c:	eba3 0901 	sub.w	r9, r3, r1
 800d380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d384:	1c7b      	adds	r3, r7, #1
 800d386:	444b      	add	r3, r9
 800d388:	106d      	asrs	r5, r5, #1
 800d38a:	429d      	cmp	r5, r3
 800d38c:	bf38      	it	cc
 800d38e:	461d      	movcc	r5, r3
 800d390:	0553      	lsls	r3, r2, #21
 800d392:	d527      	bpl.n	800d3e4 <__ssputs_r+0x8c>
 800d394:	4629      	mov	r1, r5
 800d396:	f7ff fc31 	bl	800cbfc <_malloc_r>
 800d39a:	4606      	mov	r6, r0
 800d39c:	b360      	cbz	r0, 800d3f8 <__ssputs_r+0xa0>
 800d39e:	6921      	ldr	r1, [r4, #16]
 800d3a0:	464a      	mov	r2, r9
 800d3a2:	f7ff ff7e 	bl	800d2a2 <memcpy>
 800d3a6:	89a3      	ldrh	r3, [r4, #12]
 800d3a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3b0:	81a3      	strh	r3, [r4, #12]
 800d3b2:	6126      	str	r6, [r4, #16]
 800d3b4:	6165      	str	r5, [r4, #20]
 800d3b6:	444e      	add	r6, r9
 800d3b8:	eba5 0509 	sub.w	r5, r5, r9
 800d3bc:	6026      	str	r6, [r4, #0]
 800d3be:	60a5      	str	r5, [r4, #8]
 800d3c0:	463e      	mov	r6, r7
 800d3c2:	42be      	cmp	r6, r7
 800d3c4:	d900      	bls.n	800d3c8 <__ssputs_r+0x70>
 800d3c6:	463e      	mov	r6, r7
 800d3c8:	6820      	ldr	r0, [r4, #0]
 800d3ca:	4632      	mov	r2, r6
 800d3cc:	4641      	mov	r1, r8
 800d3ce:	f000 fcff 	bl	800ddd0 <memmove>
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	1b9b      	subs	r3, r3, r6
 800d3d6:	60a3      	str	r3, [r4, #8]
 800d3d8:	6823      	ldr	r3, [r4, #0]
 800d3da:	4433      	add	r3, r6
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	2000      	movs	r0, #0
 800d3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	f000 fd2f 	bl	800de48 <_realloc_r>
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d1e0      	bne.n	800d3b2 <__ssputs_r+0x5a>
 800d3f0:	6921      	ldr	r1, [r4, #16]
 800d3f2:	4650      	mov	r0, sl
 800d3f4:	f7ff ff64 	bl	800d2c0 <_free_r>
 800d3f8:	230c      	movs	r3, #12
 800d3fa:	f8ca 3000 	str.w	r3, [sl]
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d404:	81a3      	strh	r3, [r4, #12]
 800d406:	f04f 30ff 	mov.w	r0, #4294967295
 800d40a:	e7e9      	b.n	800d3e0 <__ssputs_r+0x88>

0800d40c <_svfiprintf_r>:
 800d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d410:	4698      	mov	r8, r3
 800d412:	898b      	ldrh	r3, [r1, #12]
 800d414:	061b      	lsls	r3, r3, #24
 800d416:	b09d      	sub	sp, #116	; 0x74
 800d418:	4607      	mov	r7, r0
 800d41a:	460d      	mov	r5, r1
 800d41c:	4614      	mov	r4, r2
 800d41e:	d50e      	bpl.n	800d43e <_svfiprintf_r+0x32>
 800d420:	690b      	ldr	r3, [r1, #16]
 800d422:	b963      	cbnz	r3, 800d43e <_svfiprintf_r+0x32>
 800d424:	2140      	movs	r1, #64	; 0x40
 800d426:	f7ff fbe9 	bl	800cbfc <_malloc_r>
 800d42a:	6028      	str	r0, [r5, #0]
 800d42c:	6128      	str	r0, [r5, #16]
 800d42e:	b920      	cbnz	r0, 800d43a <_svfiprintf_r+0x2e>
 800d430:	230c      	movs	r3, #12
 800d432:	603b      	str	r3, [r7, #0]
 800d434:	f04f 30ff 	mov.w	r0, #4294967295
 800d438:	e0d0      	b.n	800d5dc <_svfiprintf_r+0x1d0>
 800d43a:	2340      	movs	r3, #64	; 0x40
 800d43c:	616b      	str	r3, [r5, #20]
 800d43e:	2300      	movs	r3, #0
 800d440:	9309      	str	r3, [sp, #36]	; 0x24
 800d442:	2320      	movs	r3, #32
 800d444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d448:	f8cd 800c 	str.w	r8, [sp, #12]
 800d44c:	2330      	movs	r3, #48	; 0x30
 800d44e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d5f4 <_svfiprintf_r+0x1e8>
 800d452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d456:	f04f 0901 	mov.w	r9, #1
 800d45a:	4623      	mov	r3, r4
 800d45c:	469a      	mov	sl, r3
 800d45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d462:	b10a      	cbz	r2, 800d468 <_svfiprintf_r+0x5c>
 800d464:	2a25      	cmp	r2, #37	; 0x25
 800d466:	d1f9      	bne.n	800d45c <_svfiprintf_r+0x50>
 800d468:	ebba 0b04 	subs.w	fp, sl, r4
 800d46c:	d00b      	beq.n	800d486 <_svfiprintf_r+0x7a>
 800d46e:	465b      	mov	r3, fp
 800d470:	4622      	mov	r2, r4
 800d472:	4629      	mov	r1, r5
 800d474:	4638      	mov	r0, r7
 800d476:	f7ff ff6f 	bl	800d358 <__ssputs_r>
 800d47a:	3001      	adds	r0, #1
 800d47c:	f000 80a9 	beq.w	800d5d2 <_svfiprintf_r+0x1c6>
 800d480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d482:	445a      	add	r2, fp
 800d484:	9209      	str	r2, [sp, #36]	; 0x24
 800d486:	f89a 3000 	ldrb.w	r3, [sl]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 80a1 	beq.w	800d5d2 <_svfiprintf_r+0x1c6>
 800d490:	2300      	movs	r3, #0
 800d492:	f04f 32ff 	mov.w	r2, #4294967295
 800d496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d49a:	f10a 0a01 	add.w	sl, sl, #1
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	9307      	str	r3, [sp, #28]
 800d4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4a6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4a8:	4654      	mov	r4, sl
 800d4aa:	2205      	movs	r2, #5
 800d4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b0:	4850      	ldr	r0, [pc, #320]	; (800d5f4 <_svfiprintf_r+0x1e8>)
 800d4b2:	f7f2 fe95 	bl	80001e0 <memchr>
 800d4b6:	9a04      	ldr	r2, [sp, #16]
 800d4b8:	b9d8      	cbnz	r0, 800d4f2 <_svfiprintf_r+0xe6>
 800d4ba:	06d0      	lsls	r0, r2, #27
 800d4bc:	bf44      	itt	mi
 800d4be:	2320      	movmi	r3, #32
 800d4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4c4:	0711      	lsls	r1, r2, #28
 800d4c6:	bf44      	itt	mi
 800d4c8:	232b      	movmi	r3, #43	; 0x2b
 800d4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d4:	d015      	beq.n	800d502 <_svfiprintf_r+0xf6>
 800d4d6:	9a07      	ldr	r2, [sp, #28]
 800d4d8:	4654      	mov	r4, sl
 800d4da:	2000      	movs	r0, #0
 800d4dc:	f04f 0c0a 	mov.w	ip, #10
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e6:	3b30      	subs	r3, #48	; 0x30
 800d4e8:	2b09      	cmp	r3, #9
 800d4ea:	d94d      	bls.n	800d588 <_svfiprintf_r+0x17c>
 800d4ec:	b1b0      	cbz	r0, 800d51c <_svfiprintf_r+0x110>
 800d4ee:	9207      	str	r2, [sp, #28]
 800d4f0:	e014      	b.n	800d51c <_svfiprintf_r+0x110>
 800d4f2:	eba0 0308 	sub.w	r3, r0, r8
 800d4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	9304      	str	r3, [sp, #16]
 800d4fe:	46a2      	mov	sl, r4
 800d500:	e7d2      	b.n	800d4a8 <_svfiprintf_r+0x9c>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	1d19      	adds	r1, r3, #4
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	9103      	str	r1, [sp, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfbb      	ittet	lt
 800d50e:	425b      	neglt	r3, r3
 800d510:	f042 0202 	orrlt.w	r2, r2, #2
 800d514:	9307      	strge	r3, [sp, #28]
 800d516:	9307      	strlt	r3, [sp, #28]
 800d518:	bfb8      	it	lt
 800d51a:	9204      	strlt	r2, [sp, #16]
 800d51c:	7823      	ldrb	r3, [r4, #0]
 800d51e:	2b2e      	cmp	r3, #46	; 0x2e
 800d520:	d10c      	bne.n	800d53c <_svfiprintf_r+0x130>
 800d522:	7863      	ldrb	r3, [r4, #1]
 800d524:	2b2a      	cmp	r3, #42	; 0x2a
 800d526:	d134      	bne.n	800d592 <_svfiprintf_r+0x186>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	1d1a      	adds	r2, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9203      	str	r2, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	bfb8      	it	lt
 800d534:	f04f 33ff 	movlt.w	r3, #4294967295
 800d538:	3402      	adds	r4, #2
 800d53a:	9305      	str	r3, [sp, #20]
 800d53c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d604 <_svfiprintf_r+0x1f8>
 800d540:	7821      	ldrb	r1, [r4, #0]
 800d542:	2203      	movs	r2, #3
 800d544:	4650      	mov	r0, sl
 800d546:	f7f2 fe4b 	bl	80001e0 <memchr>
 800d54a:	b138      	cbz	r0, 800d55c <_svfiprintf_r+0x150>
 800d54c:	9b04      	ldr	r3, [sp, #16]
 800d54e:	eba0 000a 	sub.w	r0, r0, sl
 800d552:	2240      	movs	r2, #64	; 0x40
 800d554:	4082      	lsls	r2, r0
 800d556:	4313      	orrs	r3, r2
 800d558:	3401      	adds	r4, #1
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d560:	4825      	ldr	r0, [pc, #148]	; (800d5f8 <_svfiprintf_r+0x1ec>)
 800d562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d566:	2206      	movs	r2, #6
 800d568:	f7f2 fe3a 	bl	80001e0 <memchr>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d038      	beq.n	800d5e2 <_svfiprintf_r+0x1d6>
 800d570:	4b22      	ldr	r3, [pc, #136]	; (800d5fc <_svfiprintf_r+0x1f0>)
 800d572:	bb1b      	cbnz	r3, 800d5bc <_svfiprintf_r+0x1b0>
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	3307      	adds	r3, #7
 800d578:	f023 0307 	bic.w	r3, r3, #7
 800d57c:	3308      	adds	r3, #8
 800d57e:	9303      	str	r3, [sp, #12]
 800d580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d582:	4433      	add	r3, r6
 800d584:	9309      	str	r3, [sp, #36]	; 0x24
 800d586:	e768      	b.n	800d45a <_svfiprintf_r+0x4e>
 800d588:	fb0c 3202 	mla	r2, ip, r2, r3
 800d58c:	460c      	mov	r4, r1
 800d58e:	2001      	movs	r0, #1
 800d590:	e7a6      	b.n	800d4e0 <_svfiprintf_r+0xd4>
 800d592:	2300      	movs	r3, #0
 800d594:	3401      	adds	r4, #1
 800d596:	9305      	str	r3, [sp, #20]
 800d598:	4619      	mov	r1, r3
 800d59a:	f04f 0c0a 	mov.w	ip, #10
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5a4:	3a30      	subs	r2, #48	; 0x30
 800d5a6:	2a09      	cmp	r2, #9
 800d5a8:	d903      	bls.n	800d5b2 <_svfiprintf_r+0x1a6>
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d0c6      	beq.n	800d53c <_svfiprintf_r+0x130>
 800d5ae:	9105      	str	r1, [sp, #20]
 800d5b0:	e7c4      	b.n	800d53c <_svfiprintf_r+0x130>
 800d5b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e7f0      	b.n	800d59e <_svfiprintf_r+0x192>
 800d5bc:	ab03      	add	r3, sp, #12
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	462a      	mov	r2, r5
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	; (800d600 <_svfiprintf_r+0x1f4>)
 800d5c4:	a904      	add	r1, sp, #16
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	f3af 8000 	nop.w
 800d5cc:	1c42      	adds	r2, r0, #1
 800d5ce:	4606      	mov	r6, r0
 800d5d0:	d1d6      	bne.n	800d580 <_svfiprintf_r+0x174>
 800d5d2:	89ab      	ldrh	r3, [r5, #12]
 800d5d4:	065b      	lsls	r3, r3, #25
 800d5d6:	f53f af2d 	bmi.w	800d434 <_svfiprintf_r+0x28>
 800d5da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5dc:	b01d      	add	sp, #116	; 0x74
 800d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e2:	ab03      	add	r3, sp, #12
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	4b05      	ldr	r3, [pc, #20]	; (800d600 <_svfiprintf_r+0x1f4>)
 800d5ea:	a904      	add	r1, sp, #16
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f000 f9bd 	bl	800d96c <_printf_i>
 800d5f2:	e7eb      	b.n	800d5cc <_svfiprintf_r+0x1c0>
 800d5f4:	0800ea1c 	.word	0x0800ea1c
 800d5f8:	0800ea26 	.word	0x0800ea26
 800d5fc:	00000000 	.word	0x00000000
 800d600:	0800d359 	.word	0x0800d359
 800d604:	0800ea22 	.word	0x0800ea22

0800d608 <__sfputc_r>:
 800d608:	6893      	ldr	r3, [r2, #8]
 800d60a:	3b01      	subs	r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	b410      	push	{r4}
 800d610:	6093      	str	r3, [r2, #8]
 800d612:	da08      	bge.n	800d626 <__sfputc_r+0x1e>
 800d614:	6994      	ldr	r4, [r2, #24]
 800d616:	42a3      	cmp	r3, r4
 800d618:	db01      	blt.n	800d61e <__sfputc_r+0x16>
 800d61a:	290a      	cmp	r1, #10
 800d61c:	d103      	bne.n	800d626 <__sfputc_r+0x1e>
 800d61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d622:	f7ff bd1e 	b.w	800d062 <__swbuf_r>
 800d626:	6813      	ldr	r3, [r2, #0]
 800d628:	1c58      	adds	r0, r3, #1
 800d62a:	6010      	str	r0, [r2, #0]
 800d62c:	7019      	strb	r1, [r3, #0]
 800d62e:	4608      	mov	r0, r1
 800d630:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <__sfputs_r>:
 800d636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d638:	4606      	mov	r6, r0
 800d63a:	460f      	mov	r7, r1
 800d63c:	4614      	mov	r4, r2
 800d63e:	18d5      	adds	r5, r2, r3
 800d640:	42ac      	cmp	r4, r5
 800d642:	d101      	bne.n	800d648 <__sfputs_r+0x12>
 800d644:	2000      	movs	r0, #0
 800d646:	e007      	b.n	800d658 <__sfputs_r+0x22>
 800d648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64c:	463a      	mov	r2, r7
 800d64e:	4630      	mov	r0, r6
 800d650:	f7ff ffda 	bl	800d608 <__sfputc_r>
 800d654:	1c43      	adds	r3, r0, #1
 800d656:	d1f3      	bne.n	800d640 <__sfputs_r+0xa>
 800d658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d65c <_vfiprintf_r>:
 800d65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	460d      	mov	r5, r1
 800d662:	b09d      	sub	sp, #116	; 0x74
 800d664:	4614      	mov	r4, r2
 800d666:	4698      	mov	r8, r3
 800d668:	4606      	mov	r6, r0
 800d66a:	b118      	cbz	r0, 800d674 <_vfiprintf_r+0x18>
 800d66c:	6a03      	ldr	r3, [r0, #32]
 800d66e:	b90b      	cbnz	r3, 800d674 <_vfiprintf_r+0x18>
 800d670:	f7ff fbdc 	bl	800ce2c <__sinit>
 800d674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d676:	07d9      	lsls	r1, r3, #31
 800d678:	d405      	bmi.n	800d686 <_vfiprintf_r+0x2a>
 800d67a:	89ab      	ldrh	r3, [r5, #12]
 800d67c:	059a      	lsls	r2, r3, #22
 800d67e:	d402      	bmi.n	800d686 <_vfiprintf_r+0x2a>
 800d680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d682:	f7ff fe0c 	bl	800d29e <__retarget_lock_acquire_recursive>
 800d686:	89ab      	ldrh	r3, [r5, #12]
 800d688:	071b      	lsls	r3, r3, #28
 800d68a:	d501      	bpl.n	800d690 <_vfiprintf_r+0x34>
 800d68c:	692b      	ldr	r3, [r5, #16]
 800d68e:	b99b      	cbnz	r3, 800d6b8 <_vfiprintf_r+0x5c>
 800d690:	4629      	mov	r1, r5
 800d692:	4630      	mov	r0, r6
 800d694:	f7ff fd22 	bl	800d0dc <__swsetup_r>
 800d698:	b170      	cbz	r0, 800d6b8 <_vfiprintf_r+0x5c>
 800d69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d69c:	07dc      	lsls	r4, r3, #31
 800d69e:	d504      	bpl.n	800d6aa <_vfiprintf_r+0x4e>
 800d6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a4:	b01d      	add	sp, #116	; 0x74
 800d6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6aa:	89ab      	ldrh	r3, [r5, #12]
 800d6ac:	0598      	lsls	r0, r3, #22
 800d6ae:	d4f7      	bmi.n	800d6a0 <_vfiprintf_r+0x44>
 800d6b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6b2:	f7ff fdf5 	bl	800d2a0 <__retarget_lock_release_recursive>
 800d6b6:	e7f3      	b.n	800d6a0 <_vfiprintf_r+0x44>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d6bc:	2320      	movs	r3, #32
 800d6be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6c6:	2330      	movs	r3, #48	; 0x30
 800d6c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d87c <_vfiprintf_r+0x220>
 800d6cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6d0:	f04f 0901 	mov.w	r9, #1
 800d6d4:	4623      	mov	r3, r4
 800d6d6:	469a      	mov	sl, r3
 800d6d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6dc:	b10a      	cbz	r2, 800d6e2 <_vfiprintf_r+0x86>
 800d6de:	2a25      	cmp	r2, #37	; 0x25
 800d6e0:	d1f9      	bne.n	800d6d6 <_vfiprintf_r+0x7a>
 800d6e2:	ebba 0b04 	subs.w	fp, sl, r4
 800d6e6:	d00b      	beq.n	800d700 <_vfiprintf_r+0xa4>
 800d6e8:	465b      	mov	r3, fp
 800d6ea:	4622      	mov	r2, r4
 800d6ec:	4629      	mov	r1, r5
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7ff ffa1 	bl	800d636 <__sfputs_r>
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	f000 80a9 	beq.w	800d84c <_vfiprintf_r+0x1f0>
 800d6fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6fc:	445a      	add	r2, fp
 800d6fe:	9209      	str	r2, [sp, #36]	; 0x24
 800d700:	f89a 3000 	ldrb.w	r3, [sl]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f000 80a1 	beq.w	800d84c <_vfiprintf_r+0x1f0>
 800d70a:	2300      	movs	r3, #0
 800d70c:	f04f 32ff 	mov.w	r2, #4294967295
 800d710:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d714:	f10a 0a01 	add.w	sl, sl, #1
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	9307      	str	r3, [sp, #28]
 800d71c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d720:	931a      	str	r3, [sp, #104]	; 0x68
 800d722:	4654      	mov	r4, sl
 800d724:	2205      	movs	r2, #5
 800d726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72a:	4854      	ldr	r0, [pc, #336]	; (800d87c <_vfiprintf_r+0x220>)
 800d72c:	f7f2 fd58 	bl	80001e0 <memchr>
 800d730:	9a04      	ldr	r2, [sp, #16]
 800d732:	b9d8      	cbnz	r0, 800d76c <_vfiprintf_r+0x110>
 800d734:	06d1      	lsls	r1, r2, #27
 800d736:	bf44      	itt	mi
 800d738:	2320      	movmi	r3, #32
 800d73a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d73e:	0713      	lsls	r3, r2, #28
 800d740:	bf44      	itt	mi
 800d742:	232b      	movmi	r3, #43	; 0x2b
 800d744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d748:	f89a 3000 	ldrb.w	r3, [sl]
 800d74c:	2b2a      	cmp	r3, #42	; 0x2a
 800d74e:	d015      	beq.n	800d77c <_vfiprintf_r+0x120>
 800d750:	9a07      	ldr	r2, [sp, #28]
 800d752:	4654      	mov	r4, sl
 800d754:	2000      	movs	r0, #0
 800d756:	f04f 0c0a 	mov.w	ip, #10
 800d75a:	4621      	mov	r1, r4
 800d75c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d760:	3b30      	subs	r3, #48	; 0x30
 800d762:	2b09      	cmp	r3, #9
 800d764:	d94d      	bls.n	800d802 <_vfiprintf_r+0x1a6>
 800d766:	b1b0      	cbz	r0, 800d796 <_vfiprintf_r+0x13a>
 800d768:	9207      	str	r2, [sp, #28]
 800d76a:	e014      	b.n	800d796 <_vfiprintf_r+0x13a>
 800d76c:	eba0 0308 	sub.w	r3, r0, r8
 800d770:	fa09 f303 	lsl.w	r3, r9, r3
 800d774:	4313      	orrs	r3, r2
 800d776:	9304      	str	r3, [sp, #16]
 800d778:	46a2      	mov	sl, r4
 800d77a:	e7d2      	b.n	800d722 <_vfiprintf_r+0xc6>
 800d77c:	9b03      	ldr	r3, [sp, #12]
 800d77e:	1d19      	adds	r1, r3, #4
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	9103      	str	r1, [sp, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	bfbb      	ittet	lt
 800d788:	425b      	neglt	r3, r3
 800d78a:	f042 0202 	orrlt.w	r2, r2, #2
 800d78e:	9307      	strge	r3, [sp, #28]
 800d790:	9307      	strlt	r3, [sp, #28]
 800d792:	bfb8      	it	lt
 800d794:	9204      	strlt	r2, [sp, #16]
 800d796:	7823      	ldrb	r3, [r4, #0]
 800d798:	2b2e      	cmp	r3, #46	; 0x2e
 800d79a:	d10c      	bne.n	800d7b6 <_vfiprintf_r+0x15a>
 800d79c:	7863      	ldrb	r3, [r4, #1]
 800d79e:	2b2a      	cmp	r3, #42	; 0x2a
 800d7a0:	d134      	bne.n	800d80c <_vfiprintf_r+0x1b0>
 800d7a2:	9b03      	ldr	r3, [sp, #12]
 800d7a4:	1d1a      	adds	r2, r3, #4
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	9203      	str	r2, [sp, #12]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	bfb8      	it	lt
 800d7ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7b2:	3402      	adds	r4, #2
 800d7b4:	9305      	str	r3, [sp, #20]
 800d7b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d88c <_vfiprintf_r+0x230>
 800d7ba:	7821      	ldrb	r1, [r4, #0]
 800d7bc:	2203      	movs	r2, #3
 800d7be:	4650      	mov	r0, sl
 800d7c0:	f7f2 fd0e 	bl	80001e0 <memchr>
 800d7c4:	b138      	cbz	r0, 800d7d6 <_vfiprintf_r+0x17a>
 800d7c6:	9b04      	ldr	r3, [sp, #16]
 800d7c8:	eba0 000a 	sub.w	r0, r0, sl
 800d7cc:	2240      	movs	r2, #64	; 0x40
 800d7ce:	4082      	lsls	r2, r0
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	3401      	adds	r4, #1
 800d7d4:	9304      	str	r3, [sp, #16]
 800d7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7da:	4829      	ldr	r0, [pc, #164]	; (800d880 <_vfiprintf_r+0x224>)
 800d7dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7e0:	2206      	movs	r2, #6
 800d7e2:	f7f2 fcfd 	bl	80001e0 <memchr>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d03f      	beq.n	800d86a <_vfiprintf_r+0x20e>
 800d7ea:	4b26      	ldr	r3, [pc, #152]	; (800d884 <_vfiprintf_r+0x228>)
 800d7ec:	bb1b      	cbnz	r3, 800d836 <_vfiprintf_r+0x1da>
 800d7ee:	9b03      	ldr	r3, [sp, #12]
 800d7f0:	3307      	adds	r3, #7
 800d7f2:	f023 0307 	bic.w	r3, r3, #7
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	9303      	str	r3, [sp, #12]
 800d7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fc:	443b      	add	r3, r7
 800d7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d800:	e768      	b.n	800d6d4 <_vfiprintf_r+0x78>
 800d802:	fb0c 3202 	mla	r2, ip, r2, r3
 800d806:	460c      	mov	r4, r1
 800d808:	2001      	movs	r0, #1
 800d80a:	e7a6      	b.n	800d75a <_vfiprintf_r+0xfe>
 800d80c:	2300      	movs	r3, #0
 800d80e:	3401      	adds	r4, #1
 800d810:	9305      	str	r3, [sp, #20]
 800d812:	4619      	mov	r1, r3
 800d814:	f04f 0c0a 	mov.w	ip, #10
 800d818:	4620      	mov	r0, r4
 800d81a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d81e:	3a30      	subs	r2, #48	; 0x30
 800d820:	2a09      	cmp	r2, #9
 800d822:	d903      	bls.n	800d82c <_vfiprintf_r+0x1d0>
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0c6      	beq.n	800d7b6 <_vfiprintf_r+0x15a>
 800d828:	9105      	str	r1, [sp, #20]
 800d82a:	e7c4      	b.n	800d7b6 <_vfiprintf_r+0x15a>
 800d82c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d830:	4604      	mov	r4, r0
 800d832:	2301      	movs	r3, #1
 800d834:	e7f0      	b.n	800d818 <_vfiprintf_r+0x1bc>
 800d836:	ab03      	add	r3, sp, #12
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	462a      	mov	r2, r5
 800d83c:	4b12      	ldr	r3, [pc, #72]	; (800d888 <_vfiprintf_r+0x22c>)
 800d83e:	a904      	add	r1, sp, #16
 800d840:	4630      	mov	r0, r6
 800d842:	f3af 8000 	nop.w
 800d846:	4607      	mov	r7, r0
 800d848:	1c78      	adds	r0, r7, #1
 800d84a:	d1d6      	bne.n	800d7fa <_vfiprintf_r+0x19e>
 800d84c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d84e:	07d9      	lsls	r1, r3, #31
 800d850:	d405      	bmi.n	800d85e <_vfiprintf_r+0x202>
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	059a      	lsls	r2, r3, #22
 800d856:	d402      	bmi.n	800d85e <_vfiprintf_r+0x202>
 800d858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d85a:	f7ff fd21 	bl	800d2a0 <__retarget_lock_release_recursive>
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	065b      	lsls	r3, r3, #25
 800d862:	f53f af1d 	bmi.w	800d6a0 <_vfiprintf_r+0x44>
 800d866:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d868:	e71c      	b.n	800d6a4 <_vfiprintf_r+0x48>
 800d86a:	ab03      	add	r3, sp, #12
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	462a      	mov	r2, r5
 800d870:	4b05      	ldr	r3, [pc, #20]	; (800d888 <_vfiprintf_r+0x22c>)
 800d872:	a904      	add	r1, sp, #16
 800d874:	4630      	mov	r0, r6
 800d876:	f000 f879 	bl	800d96c <_printf_i>
 800d87a:	e7e4      	b.n	800d846 <_vfiprintf_r+0x1ea>
 800d87c:	0800ea1c 	.word	0x0800ea1c
 800d880:	0800ea26 	.word	0x0800ea26
 800d884:	00000000 	.word	0x00000000
 800d888:	0800d637 	.word	0x0800d637
 800d88c:	0800ea22 	.word	0x0800ea22

0800d890 <_printf_common>:
 800d890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d894:	4616      	mov	r6, r2
 800d896:	4699      	mov	r9, r3
 800d898:	688a      	ldr	r2, [r1, #8]
 800d89a:	690b      	ldr	r3, [r1, #16]
 800d89c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	bfb8      	it	lt
 800d8a4:	4613      	movlt	r3, r2
 800d8a6:	6033      	str	r3, [r6, #0]
 800d8a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	b10a      	cbz	r2, 800d8b6 <_printf_common+0x26>
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	6033      	str	r3, [r6, #0]
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	0699      	lsls	r1, r3, #26
 800d8ba:	bf42      	ittt	mi
 800d8bc:	6833      	ldrmi	r3, [r6, #0]
 800d8be:	3302      	addmi	r3, #2
 800d8c0:	6033      	strmi	r3, [r6, #0]
 800d8c2:	6825      	ldr	r5, [r4, #0]
 800d8c4:	f015 0506 	ands.w	r5, r5, #6
 800d8c8:	d106      	bne.n	800d8d8 <_printf_common+0x48>
 800d8ca:	f104 0a19 	add.w	sl, r4, #25
 800d8ce:	68e3      	ldr	r3, [r4, #12]
 800d8d0:	6832      	ldr	r2, [r6, #0]
 800d8d2:	1a9b      	subs	r3, r3, r2
 800d8d4:	42ab      	cmp	r3, r5
 800d8d6:	dc26      	bgt.n	800d926 <_printf_common+0x96>
 800d8d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8dc:	1e13      	subs	r3, r2, #0
 800d8de:	6822      	ldr	r2, [r4, #0]
 800d8e0:	bf18      	it	ne
 800d8e2:	2301      	movne	r3, #1
 800d8e4:	0692      	lsls	r2, r2, #26
 800d8e6:	d42b      	bmi.n	800d940 <_printf_common+0xb0>
 800d8e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	47c0      	blx	r8
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	d01e      	beq.n	800d934 <_printf_common+0xa4>
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	6922      	ldr	r2, [r4, #16]
 800d8fa:	f003 0306 	and.w	r3, r3, #6
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	bf02      	ittt	eq
 800d902:	68e5      	ldreq	r5, [r4, #12]
 800d904:	6833      	ldreq	r3, [r6, #0]
 800d906:	1aed      	subeq	r5, r5, r3
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	bf0c      	ite	eq
 800d90c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d910:	2500      	movne	r5, #0
 800d912:	4293      	cmp	r3, r2
 800d914:	bfc4      	itt	gt
 800d916:	1a9b      	subgt	r3, r3, r2
 800d918:	18ed      	addgt	r5, r5, r3
 800d91a:	2600      	movs	r6, #0
 800d91c:	341a      	adds	r4, #26
 800d91e:	42b5      	cmp	r5, r6
 800d920:	d11a      	bne.n	800d958 <_printf_common+0xc8>
 800d922:	2000      	movs	r0, #0
 800d924:	e008      	b.n	800d938 <_printf_common+0xa8>
 800d926:	2301      	movs	r3, #1
 800d928:	4652      	mov	r2, sl
 800d92a:	4649      	mov	r1, r9
 800d92c:	4638      	mov	r0, r7
 800d92e:	47c0      	blx	r8
 800d930:	3001      	adds	r0, #1
 800d932:	d103      	bne.n	800d93c <_printf_common+0xac>
 800d934:	f04f 30ff 	mov.w	r0, #4294967295
 800d938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d93c:	3501      	adds	r5, #1
 800d93e:	e7c6      	b.n	800d8ce <_printf_common+0x3e>
 800d940:	18e1      	adds	r1, r4, r3
 800d942:	1c5a      	adds	r2, r3, #1
 800d944:	2030      	movs	r0, #48	; 0x30
 800d946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d94a:	4422      	add	r2, r4
 800d94c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d954:	3302      	adds	r3, #2
 800d956:	e7c7      	b.n	800d8e8 <_printf_common+0x58>
 800d958:	2301      	movs	r3, #1
 800d95a:	4622      	mov	r2, r4
 800d95c:	4649      	mov	r1, r9
 800d95e:	4638      	mov	r0, r7
 800d960:	47c0      	blx	r8
 800d962:	3001      	adds	r0, #1
 800d964:	d0e6      	beq.n	800d934 <_printf_common+0xa4>
 800d966:	3601      	adds	r6, #1
 800d968:	e7d9      	b.n	800d91e <_printf_common+0x8e>
	...

0800d96c <_printf_i>:
 800d96c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d970:	7e0f      	ldrb	r7, [r1, #24]
 800d972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d974:	2f78      	cmp	r7, #120	; 0x78
 800d976:	4691      	mov	r9, r2
 800d978:	4680      	mov	r8, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	469a      	mov	sl, r3
 800d97e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d982:	d807      	bhi.n	800d994 <_printf_i+0x28>
 800d984:	2f62      	cmp	r7, #98	; 0x62
 800d986:	d80a      	bhi.n	800d99e <_printf_i+0x32>
 800d988:	2f00      	cmp	r7, #0
 800d98a:	f000 80d4 	beq.w	800db36 <_printf_i+0x1ca>
 800d98e:	2f58      	cmp	r7, #88	; 0x58
 800d990:	f000 80c0 	beq.w	800db14 <_printf_i+0x1a8>
 800d994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d99c:	e03a      	b.n	800da14 <_printf_i+0xa8>
 800d99e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9a2:	2b15      	cmp	r3, #21
 800d9a4:	d8f6      	bhi.n	800d994 <_printf_i+0x28>
 800d9a6:	a101      	add	r1, pc, #4	; (adr r1, 800d9ac <_printf_i+0x40>)
 800d9a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9ac:	0800da05 	.word	0x0800da05
 800d9b0:	0800da19 	.word	0x0800da19
 800d9b4:	0800d995 	.word	0x0800d995
 800d9b8:	0800d995 	.word	0x0800d995
 800d9bc:	0800d995 	.word	0x0800d995
 800d9c0:	0800d995 	.word	0x0800d995
 800d9c4:	0800da19 	.word	0x0800da19
 800d9c8:	0800d995 	.word	0x0800d995
 800d9cc:	0800d995 	.word	0x0800d995
 800d9d0:	0800d995 	.word	0x0800d995
 800d9d4:	0800d995 	.word	0x0800d995
 800d9d8:	0800db1d 	.word	0x0800db1d
 800d9dc:	0800da45 	.word	0x0800da45
 800d9e0:	0800dad7 	.word	0x0800dad7
 800d9e4:	0800d995 	.word	0x0800d995
 800d9e8:	0800d995 	.word	0x0800d995
 800d9ec:	0800db3f 	.word	0x0800db3f
 800d9f0:	0800d995 	.word	0x0800d995
 800d9f4:	0800da45 	.word	0x0800da45
 800d9f8:	0800d995 	.word	0x0800d995
 800d9fc:	0800d995 	.word	0x0800d995
 800da00:	0800dadf 	.word	0x0800dadf
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	1d1a      	adds	r2, r3, #4
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	602a      	str	r2, [r5, #0]
 800da0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da14:	2301      	movs	r3, #1
 800da16:	e09f      	b.n	800db58 <_printf_i+0x1ec>
 800da18:	6820      	ldr	r0, [r4, #0]
 800da1a:	682b      	ldr	r3, [r5, #0]
 800da1c:	0607      	lsls	r7, r0, #24
 800da1e:	f103 0104 	add.w	r1, r3, #4
 800da22:	6029      	str	r1, [r5, #0]
 800da24:	d501      	bpl.n	800da2a <_printf_i+0xbe>
 800da26:	681e      	ldr	r6, [r3, #0]
 800da28:	e003      	b.n	800da32 <_printf_i+0xc6>
 800da2a:	0646      	lsls	r6, r0, #25
 800da2c:	d5fb      	bpl.n	800da26 <_printf_i+0xba>
 800da2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da32:	2e00      	cmp	r6, #0
 800da34:	da03      	bge.n	800da3e <_printf_i+0xd2>
 800da36:	232d      	movs	r3, #45	; 0x2d
 800da38:	4276      	negs	r6, r6
 800da3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da3e:	485a      	ldr	r0, [pc, #360]	; (800dba8 <_printf_i+0x23c>)
 800da40:	230a      	movs	r3, #10
 800da42:	e012      	b.n	800da6a <_printf_i+0xfe>
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	6820      	ldr	r0, [r4, #0]
 800da48:	1d19      	adds	r1, r3, #4
 800da4a:	6029      	str	r1, [r5, #0]
 800da4c:	0605      	lsls	r5, r0, #24
 800da4e:	d501      	bpl.n	800da54 <_printf_i+0xe8>
 800da50:	681e      	ldr	r6, [r3, #0]
 800da52:	e002      	b.n	800da5a <_printf_i+0xee>
 800da54:	0641      	lsls	r1, r0, #25
 800da56:	d5fb      	bpl.n	800da50 <_printf_i+0xe4>
 800da58:	881e      	ldrh	r6, [r3, #0]
 800da5a:	4853      	ldr	r0, [pc, #332]	; (800dba8 <_printf_i+0x23c>)
 800da5c:	2f6f      	cmp	r7, #111	; 0x6f
 800da5e:	bf0c      	ite	eq
 800da60:	2308      	moveq	r3, #8
 800da62:	230a      	movne	r3, #10
 800da64:	2100      	movs	r1, #0
 800da66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da6a:	6865      	ldr	r5, [r4, #4]
 800da6c:	60a5      	str	r5, [r4, #8]
 800da6e:	2d00      	cmp	r5, #0
 800da70:	bfa2      	ittt	ge
 800da72:	6821      	ldrge	r1, [r4, #0]
 800da74:	f021 0104 	bicge.w	r1, r1, #4
 800da78:	6021      	strge	r1, [r4, #0]
 800da7a:	b90e      	cbnz	r6, 800da80 <_printf_i+0x114>
 800da7c:	2d00      	cmp	r5, #0
 800da7e:	d04b      	beq.n	800db18 <_printf_i+0x1ac>
 800da80:	4615      	mov	r5, r2
 800da82:	fbb6 f1f3 	udiv	r1, r6, r3
 800da86:	fb03 6711 	mls	r7, r3, r1, r6
 800da8a:	5dc7      	ldrb	r7, [r0, r7]
 800da8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da90:	4637      	mov	r7, r6
 800da92:	42bb      	cmp	r3, r7
 800da94:	460e      	mov	r6, r1
 800da96:	d9f4      	bls.n	800da82 <_printf_i+0x116>
 800da98:	2b08      	cmp	r3, #8
 800da9a:	d10b      	bne.n	800dab4 <_printf_i+0x148>
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	07de      	lsls	r6, r3, #31
 800daa0:	d508      	bpl.n	800dab4 <_printf_i+0x148>
 800daa2:	6923      	ldr	r3, [r4, #16]
 800daa4:	6861      	ldr	r1, [r4, #4]
 800daa6:	4299      	cmp	r1, r3
 800daa8:	bfde      	ittt	le
 800daaa:	2330      	movle	r3, #48	; 0x30
 800daac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dab0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dab4:	1b52      	subs	r2, r2, r5
 800dab6:	6122      	str	r2, [r4, #16]
 800dab8:	f8cd a000 	str.w	sl, [sp]
 800dabc:	464b      	mov	r3, r9
 800dabe:	aa03      	add	r2, sp, #12
 800dac0:	4621      	mov	r1, r4
 800dac2:	4640      	mov	r0, r8
 800dac4:	f7ff fee4 	bl	800d890 <_printf_common>
 800dac8:	3001      	adds	r0, #1
 800daca:	d14a      	bne.n	800db62 <_printf_i+0x1f6>
 800dacc:	f04f 30ff 	mov.w	r0, #4294967295
 800dad0:	b004      	add	sp, #16
 800dad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	f043 0320 	orr.w	r3, r3, #32
 800dadc:	6023      	str	r3, [r4, #0]
 800dade:	4833      	ldr	r0, [pc, #204]	; (800dbac <_printf_i+0x240>)
 800dae0:	2778      	movs	r7, #120	; 0x78
 800dae2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	6829      	ldr	r1, [r5, #0]
 800daea:	061f      	lsls	r7, r3, #24
 800daec:	f851 6b04 	ldr.w	r6, [r1], #4
 800daf0:	d402      	bmi.n	800daf8 <_printf_i+0x18c>
 800daf2:	065f      	lsls	r7, r3, #25
 800daf4:	bf48      	it	mi
 800daf6:	b2b6      	uxthmi	r6, r6
 800daf8:	07df      	lsls	r7, r3, #31
 800dafa:	bf48      	it	mi
 800dafc:	f043 0320 	orrmi.w	r3, r3, #32
 800db00:	6029      	str	r1, [r5, #0]
 800db02:	bf48      	it	mi
 800db04:	6023      	strmi	r3, [r4, #0]
 800db06:	b91e      	cbnz	r6, 800db10 <_printf_i+0x1a4>
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	f023 0320 	bic.w	r3, r3, #32
 800db0e:	6023      	str	r3, [r4, #0]
 800db10:	2310      	movs	r3, #16
 800db12:	e7a7      	b.n	800da64 <_printf_i+0xf8>
 800db14:	4824      	ldr	r0, [pc, #144]	; (800dba8 <_printf_i+0x23c>)
 800db16:	e7e4      	b.n	800dae2 <_printf_i+0x176>
 800db18:	4615      	mov	r5, r2
 800db1a:	e7bd      	b.n	800da98 <_printf_i+0x12c>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	6826      	ldr	r6, [r4, #0]
 800db20:	6961      	ldr	r1, [r4, #20]
 800db22:	1d18      	adds	r0, r3, #4
 800db24:	6028      	str	r0, [r5, #0]
 800db26:	0635      	lsls	r5, r6, #24
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	d501      	bpl.n	800db30 <_printf_i+0x1c4>
 800db2c:	6019      	str	r1, [r3, #0]
 800db2e:	e002      	b.n	800db36 <_printf_i+0x1ca>
 800db30:	0670      	lsls	r0, r6, #25
 800db32:	d5fb      	bpl.n	800db2c <_printf_i+0x1c0>
 800db34:	8019      	strh	r1, [r3, #0]
 800db36:	2300      	movs	r3, #0
 800db38:	6123      	str	r3, [r4, #16]
 800db3a:	4615      	mov	r5, r2
 800db3c:	e7bc      	b.n	800dab8 <_printf_i+0x14c>
 800db3e:	682b      	ldr	r3, [r5, #0]
 800db40:	1d1a      	adds	r2, r3, #4
 800db42:	602a      	str	r2, [r5, #0]
 800db44:	681d      	ldr	r5, [r3, #0]
 800db46:	6862      	ldr	r2, [r4, #4]
 800db48:	2100      	movs	r1, #0
 800db4a:	4628      	mov	r0, r5
 800db4c:	f7f2 fb48 	bl	80001e0 <memchr>
 800db50:	b108      	cbz	r0, 800db56 <_printf_i+0x1ea>
 800db52:	1b40      	subs	r0, r0, r5
 800db54:	6060      	str	r0, [r4, #4]
 800db56:	6863      	ldr	r3, [r4, #4]
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	2300      	movs	r3, #0
 800db5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db60:	e7aa      	b.n	800dab8 <_printf_i+0x14c>
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	462a      	mov	r2, r5
 800db66:	4649      	mov	r1, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	47d0      	blx	sl
 800db6c:	3001      	adds	r0, #1
 800db6e:	d0ad      	beq.n	800dacc <_printf_i+0x160>
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	079b      	lsls	r3, r3, #30
 800db74:	d413      	bmi.n	800db9e <_printf_i+0x232>
 800db76:	68e0      	ldr	r0, [r4, #12]
 800db78:	9b03      	ldr	r3, [sp, #12]
 800db7a:	4298      	cmp	r0, r3
 800db7c:	bfb8      	it	lt
 800db7e:	4618      	movlt	r0, r3
 800db80:	e7a6      	b.n	800dad0 <_printf_i+0x164>
 800db82:	2301      	movs	r3, #1
 800db84:	4632      	mov	r2, r6
 800db86:	4649      	mov	r1, r9
 800db88:	4640      	mov	r0, r8
 800db8a:	47d0      	blx	sl
 800db8c:	3001      	adds	r0, #1
 800db8e:	d09d      	beq.n	800dacc <_printf_i+0x160>
 800db90:	3501      	adds	r5, #1
 800db92:	68e3      	ldr	r3, [r4, #12]
 800db94:	9903      	ldr	r1, [sp, #12]
 800db96:	1a5b      	subs	r3, r3, r1
 800db98:	42ab      	cmp	r3, r5
 800db9a:	dcf2      	bgt.n	800db82 <_printf_i+0x216>
 800db9c:	e7eb      	b.n	800db76 <_printf_i+0x20a>
 800db9e:	2500      	movs	r5, #0
 800dba0:	f104 0619 	add.w	r6, r4, #25
 800dba4:	e7f5      	b.n	800db92 <_printf_i+0x226>
 800dba6:	bf00      	nop
 800dba8:	0800ea2d 	.word	0x0800ea2d
 800dbac:	0800ea3e 	.word	0x0800ea3e

0800dbb0 <__sflush_r>:
 800dbb0:	898a      	ldrh	r2, [r1, #12]
 800dbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	0710      	lsls	r0, r2, #28
 800dbba:	460c      	mov	r4, r1
 800dbbc:	d458      	bmi.n	800dc70 <__sflush_r+0xc0>
 800dbbe:	684b      	ldr	r3, [r1, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	dc05      	bgt.n	800dbd0 <__sflush_r+0x20>
 800dbc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	dc02      	bgt.n	800dbd0 <__sflush_r+0x20>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbd2:	2e00      	cmp	r6, #0
 800dbd4:	d0f9      	beq.n	800dbca <__sflush_r+0x1a>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbdc:	682f      	ldr	r7, [r5, #0]
 800dbde:	6a21      	ldr	r1, [r4, #32]
 800dbe0:	602b      	str	r3, [r5, #0]
 800dbe2:	d032      	beq.n	800dc4a <__sflush_r+0x9a>
 800dbe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	075a      	lsls	r2, r3, #29
 800dbea:	d505      	bpl.n	800dbf8 <__sflush_r+0x48>
 800dbec:	6863      	ldr	r3, [r4, #4]
 800dbee:	1ac0      	subs	r0, r0, r3
 800dbf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbf2:	b10b      	cbz	r3, 800dbf8 <__sflush_r+0x48>
 800dbf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbf6:	1ac0      	subs	r0, r0, r3
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbfe:	6a21      	ldr	r1, [r4, #32]
 800dc00:	4628      	mov	r0, r5
 800dc02:	47b0      	blx	r6
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	d106      	bne.n	800dc18 <__sflush_r+0x68>
 800dc0a:	6829      	ldr	r1, [r5, #0]
 800dc0c:	291d      	cmp	r1, #29
 800dc0e:	d82b      	bhi.n	800dc68 <__sflush_r+0xb8>
 800dc10:	4a29      	ldr	r2, [pc, #164]	; (800dcb8 <__sflush_r+0x108>)
 800dc12:	410a      	asrs	r2, r1
 800dc14:	07d6      	lsls	r6, r2, #31
 800dc16:	d427      	bmi.n	800dc68 <__sflush_r+0xb8>
 800dc18:	2200      	movs	r2, #0
 800dc1a:	6062      	str	r2, [r4, #4]
 800dc1c:	04d9      	lsls	r1, r3, #19
 800dc1e:	6922      	ldr	r2, [r4, #16]
 800dc20:	6022      	str	r2, [r4, #0]
 800dc22:	d504      	bpl.n	800dc2e <__sflush_r+0x7e>
 800dc24:	1c42      	adds	r2, r0, #1
 800dc26:	d101      	bne.n	800dc2c <__sflush_r+0x7c>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	b903      	cbnz	r3, 800dc2e <__sflush_r+0x7e>
 800dc2c:	6560      	str	r0, [r4, #84]	; 0x54
 800dc2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc30:	602f      	str	r7, [r5, #0]
 800dc32:	2900      	cmp	r1, #0
 800dc34:	d0c9      	beq.n	800dbca <__sflush_r+0x1a>
 800dc36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc3a:	4299      	cmp	r1, r3
 800dc3c:	d002      	beq.n	800dc44 <__sflush_r+0x94>
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f7ff fb3e 	bl	800d2c0 <_free_r>
 800dc44:	2000      	movs	r0, #0
 800dc46:	6360      	str	r0, [r4, #52]	; 0x34
 800dc48:	e7c0      	b.n	800dbcc <__sflush_r+0x1c>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	47b0      	blx	r6
 800dc50:	1c41      	adds	r1, r0, #1
 800dc52:	d1c8      	bne.n	800dbe6 <__sflush_r+0x36>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0c5      	beq.n	800dbe6 <__sflush_r+0x36>
 800dc5a:	2b1d      	cmp	r3, #29
 800dc5c:	d001      	beq.n	800dc62 <__sflush_r+0xb2>
 800dc5e:	2b16      	cmp	r3, #22
 800dc60:	d101      	bne.n	800dc66 <__sflush_r+0xb6>
 800dc62:	602f      	str	r7, [r5, #0]
 800dc64:	e7b1      	b.n	800dbca <__sflush_r+0x1a>
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	e7ad      	b.n	800dbcc <__sflush_r+0x1c>
 800dc70:	690f      	ldr	r7, [r1, #16]
 800dc72:	2f00      	cmp	r7, #0
 800dc74:	d0a9      	beq.n	800dbca <__sflush_r+0x1a>
 800dc76:	0793      	lsls	r3, r2, #30
 800dc78:	680e      	ldr	r6, [r1, #0]
 800dc7a:	bf08      	it	eq
 800dc7c:	694b      	ldreq	r3, [r1, #20]
 800dc7e:	600f      	str	r7, [r1, #0]
 800dc80:	bf18      	it	ne
 800dc82:	2300      	movne	r3, #0
 800dc84:	eba6 0807 	sub.w	r8, r6, r7
 800dc88:	608b      	str	r3, [r1, #8]
 800dc8a:	f1b8 0f00 	cmp.w	r8, #0
 800dc8e:	dd9c      	ble.n	800dbca <__sflush_r+0x1a>
 800dc90:	6a21      	ldr	r1, [r4, #32]
 800dc92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc94:	4643      	mov	r3, r8
 800dc96:	463a      	mov	r2, r7
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b0      	blx	r6
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	dc06      	bgt.n	800dcae <__sflush_r+0xfe>
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcac:	e78e      	b.n	800dbcc <__sflush_r+0x1c>
 800dcae:	4407      	add	r7, r0
 800dcb0:	eba8 0800 	sub.w	r8, r8, r0
 800dcb4:	e7e9      	b.n	800dc8a <__sflush_r+0xda>
 800dcb6:	bf00      	nop
 800dcb8:	dfbffffe 	.word	0xdfbffffe

0800dcbc <_fflush_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	690b      	ldr	r3, [r1, #16]
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	b913      	cbnz	r3, 800dccc <_fflush_r+0x10>
 800dcc6:	2500      	movs	r5, #0
 800dcc8:	4628      	mov	r0, r5
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	b118      	cbz	r0, 800dcd6 <_fflush_r+0x1a>
 800dcce:	6a03      	ldr	r3, [r0, #32]
 800dcd0:	b90b      	cbnz	r3, 800dcd6 <_fflush_r+0x1a>
 800dcd2:	f7ff f8ab 	bl	800ce2c <__sinit>
 800dcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0f3      	beq.n	800dcc6 <_fflush_r+0xa>
 800dcde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dce0:	07d0      	lsls	r0, r2, #31
 800dce2:	d404      	bmi.n	800dcee <_fflush_r+0x32>
 800dce4:	0599      	lsls	r1, r3, #22
 800dce6:	d402      	bmi.n	800dcee <_fflush_r+0x32>
 800dce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcea:	f7ff fad8 	bl	800d29e <__retarget_lock_acquire_recursive>
 800dcee:	4628      	mov	r0, r5
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	f7ff ff5d 	bl	800dbb0 <__sflush_r>
 800dcf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcf8:	07da      	lsls	r2, r3, #31
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	d4e4      	bmi.n	800dcc8 <_fflush_r+0xc>
 800dcfe:	89a3      	ldrh	r3, [r4, #12]
 800dd00:	059b      	lsls	r3, r3, #22
 800dd02:	d4e1      	bmi.n	800dcc8 <_fflush_r+0xc>
 800dd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd06:	f7ff facb 	bl	800d2a0 <__retarget_lock_release_recursive>
 800dd0a:	e7dd      	b.n	800dcc8 <_fflush_r+0xc>

0800dd0c <__swhatbuf_r>:
 800dd0c:	b570      	push	{r4, r5, r6, lr}
 800dd0e:	460c      	mov	r4, r1
 800dd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd14:	2900      	cmp	r1, #0
 800dd16:	b096      	sub	sp, #88	; 0x58
 800dd18:	4615      	mov	r5, r2
 800dd1a:	461e      	mov	r6, r3
 800dd1c:	da0d      	bge.n	800dd3a <__swhatbuf_r+0x2e>
 800dd1e:	89a3      	ldrh	r3, [r4, #12]
 800dd20:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd24:	f04f 0100 	mov.w	r1, #0
 800dd28:	bf0c      	ite	eq
 800dd2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd2e:	2340      	movne	r3, #64	; 0x40
 800dd30:	2000      	movs	r0, #0
 800dd32:	6031      	str	r1, [r6, #0]
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	b016      	add	sp, #88	; 0x58
 800dd38:	bd70      	pop	{r4, r5, r6, pc}
 800dd3a:	466a      	mov	r2, sp
 800dd3c:	f000 f862 	bl	800de04 <_fstat_r>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	dbec      	blt.n	800dd1e <__swhatbuf_r+0x12>
 800dd44:	9901      	ldr	r1, [sp, #4]
 800dd46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd4e:	4259      	negs	r1, r3
 800dd50:	4159      	adcs	r1, r3
 800dd52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd56:	e7eb      	b.n	800dd30 <__swhatbuf_r+0x24>

0800dd58 <__smakebuf_r>:
 800dd58:	898b      	ldrh	r3, [r1, #12]
 800dd5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd5c:	079d      	lsls	r5, r3, #30
 800dd5e:	4606      	mov	r6, r0
 800dd60:	460c      	mov	r4, r1
 800dd62:	d507      	bpl.n	800dd74 <__smakebuf_r+0x1c>
 800dd64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	6123      	str	r3, [r4, #16]
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	6163      	str	r3, [r4, #20]
 800dd70:	b002      	add	sp, #8
 800dd72:	bd70      	pop	{r4, r5, r6, pc}
 800dd74:	ab01      	add	r3, sp, #4
 800dd76:	466a      	mov	r2, sp
 800dd78:	f7ff ffc8 	bl	800dd0c <__swhatbuf_r>
 800dd7c:	9900      	ldr	r1, [sp, #0]
 800dd7e:	4605      	mov	r5, r0
 800dd80:	4630      	mov	r0, r6
 800dd82:	f7fe ff3b 	bl	800cbfc <_malloc_r>
 800dd86:	b948      	cbnz	r0, 800dd9c <__smakebuf_r+0x44>
 800dd88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd8c:	059a      	lsls	r2, r3, #22
 800dd8e:	d4ef      	bmi.n	800dd70 <__smakebuf_r+0x18>
 800dd90:	f023 0303 	bic.w	r3, r3, #3
 800dd94:	f043 0302 	orr.w	r3, r3, #2
 800dd98:	81a3      	strh	r3, [r4, #12]
 800dd9a:	e7e3      	b.n	800dd64 <__smakebuf_r+0xc>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	6020      	str	r0, [r4, #0]
 800dda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dda4:	81a3      	strh	r3, [r4, #12]
 800dda6:	9b00      	ldr	r3, [sp, #0]
 800dda8:	6163      	str	r3, [r4, #20]
 800ddaa:	9b01      	ldr	r3, [sp, #4]
 800ddac:	6120      	str	r0, [r4, #16]
 800ddae:	b15b      	cbz	r3, 800ddc8 <__smakebuf_r+0x70>
 800ddb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f000 f837 	bl	800de28 <_isatty_r>
 800ddba:	b128      	cbz	r0, 800ddc8 <__smakebuf_r+0x70>
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	f023 0303 	bic.w	r3, r3, #3
 800ddc2:	f043 0301 	orr.w	r3, r3, #1
 800ddc6:	81a3      	strh	r3, [r4, #12]
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	431d      	orrs	r5, r3
 800ddcc:	81a5      	strh	r5, [r4, #12]
 800ddce:	e7cf      	b.n	800dd70 <__smakebuf_r+0x18>

0800ddd0 <memmove>:
 800ddd0:	4288      	cmp	r0, r1
 800ddd2:	b510      	push	{r4, lr}
 800ddd4:	eb01 0402 	add.w	r4, r1, r2
 800ddd8:	d902      	bls.n	800dde0 <memmove+0x10>
 800ddda:	4284      	cmp	r4, r0
 800dddc:	4623      	mov	r3, r4
 800ddde:	d807      	bhi.n	800ddf0 <memmove+0x20>
 800dde0:	1e43      	subs	r3, r0, #1
 800dde2:	42a1      	cmp	r1, r4
 800dde4:	d008      	beq.n	800ddf8 <memmove+0x28>
 800dde6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddee:	e7f8      	b.n	800dde2 <memmove+0x12>
 800ddf0:	4402      	add	r2, r0
 800ddf2:	4601      	mov	r1, r0
 800ddf4:	428a      	cmp	r2, r1
 800ddf6:	d100      	bne.n	800ddfa <memmove+0x2a>
 800ddf8:	bd10      	pop	{r4, pc}
 800ddfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de02:	e7f7      	b.n	800ddf4 <memmove+0x24>

0800de04 <_fstat_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4d07      	ldr	r5, [pc, #28]	; (800de24 <_fstat_r+0x20>)
 800de08:	2300      	movs	r3, #0
 800de0a:	4604      	mov	r4, r0
 800de0c:	4608      	mov	r0, r1
 800de0e:	4611      	mov	r1, r2
 800de10:	602b      	str	r3, [r5, #0]
 800de12:	f7f2 fe54 	bl	8000abe <_fstat>
 800de16:	1c43      	adds	r3, r0, #1
 800de18:	d102      	bne.n	800de20 <_fstat_r+0x1c>
 800de1a:	682b      	ldr	r3, [r5, #0]
 800de1c:	b103      	cbz	r3, 800de20 <_fstat_r+0x1c>
 800de1e:	6023      	str	r3, [r4, #0]
 800de20:	bd38      	pop	{r3, r4, r5, pc}
 800de22:	bf00      	nop
 800de24:	20006e50 	.word	0x20006e50

0800de28 <_isatty_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4d06      	ldr	r5, [pc, #24]	; (800de44 <_isatty_r+0x1c>)
 800de2c:	2300      	movs	r3, #0
 800de2e:	4604      	mov	r4, r0
 800de30:	4608      	mov	r0, r1
 800de32:	602b      	str	r3, [r5, #0]
 800de34:	f7f2 fe53 	bl	8000ade <_isatty>
 800de38:	1c43      	adds	r3, r0, #1
 800de3a:	d102      	bne.n	800de42 <_isatty_r+0x1a>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	b103      	cbz	r3, 800de42 <_isatty_r+0x1a>
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	20006e50 	.word	0x20006e50

0800de48 <_realloc_r>:
 800de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4c:	4680      	mov	r8, r0
 800de4e:	4614      	mov	r4, r2
 800de50:	460e      	mov	r6, r1
 800de52:	b921      	cbnz	r1, 800de5e <_realloc_r+0x16>
 800de54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de58:	4611      	mov	r1, r2
 800de5a:	f7fe becf 	b.w	800cbfc <_malloc_r>
 800de5e:	b92a      	cbnz	r2, 800de6c <_realloc_r+0x24>
 800de60:	f7ff fa2e 	bl	800d2c0 <_free_r>
 800de64:	4625      	mov	r5, r4
 800de66:	4628      	mov	r0, r5
 800de68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6c:	f000 f81b 	bl	800dea6 <_malloc_usable_size_r>
 800de70:	4284      	cmp	r4, r0
 800de72:	4607      	mov	r7, r0
 800de74:	d802      	bhi.n	800de7c <_realloc_r+0x34>
 800de76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de7a:	d812      	bhi.n	800dea2 <_realloc_r+0x5a>
 800de7c:	4621      	mov	r1, r4
 800de7e:	4640      	mov	r0, r8
 800de80:	f7fe febc 	bl	800cbfc <_malloc_r>
 800de84:	4605      	mov	r5, r0
 800de86:	2800      	cmp	r0, #0
 800de88:	d0ed      	beq.n	800de66 <_realloc_r+0x1e>
 800de8a:	42bc      	cmp	r4, r7
 800de8c:	4622      	mov	r2, r4
 800de8e:	4631      	mov	r1, r6
 800de90:	bf28      	it	cs
 800de92:	463a      	movcs	r2, r7
 800de94:	f7ff fa05 	bl	800d2a2 <memcpy>
 800de98:	4631      	mov	r1, r6
 800de9a:	4640      	mov	r0, r8
 800de9c:	f7ff fa10 	bl	800d2c0 <_free_r>
 800dea0:	e7e1      	b.n	800de66 <_realloc_r+0x1e>
 800dea2:	4635      	mov	r5, r6
 800dea4:	e7df      	b.n	800de66 <_realloc_r+0x1e>

0800dea6 <_malloc_usable_size_r>:
 800dea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deaa:	1f18      	subs	r0, r3, #4
 800deac:	2b00      	cmp	r3, #0
 800deae:	bfbc      	itt	lt
 800deb0:	580b      	ldrlt	r3, [r1, r0]
 800deb2:	18c0      	addlt	r0, r0, r3
 800deb4:	4770      	bx	lr
	...

0800deb8 <_init>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	bf00      	nop
 800debc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800debe:	bc08      	pop	{r3}
 800dec0:	469e      	mov	lr, r3
 800dec2:	4770      	bx	lr

0800dec4 <_fini>:
 800dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec6:	bf00      	nop
 800dec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deca:	bc08      	pop	{r3}
 800decc:	469e      	mov	lr, r3
 800dece:	4770      	bx	lr
