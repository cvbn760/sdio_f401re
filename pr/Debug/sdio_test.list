
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0800d18c  0800d18c  0001d18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db20  0800db20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800db20  0800db20  0001db20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db28  0800db28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db2c  0800db2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800db30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d58  20000070  0800dba0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dc8  0800dba0  00024dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f30e  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ecc  00000000  00000000  0003f3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d4  00000000  00000000  00045dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007f2c  00000000  00000000  000472ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024a7f  00000000  00000000  0004f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b1d6  00000000  00000000  00073c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077f8  00000000  00000000  0010ee30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  00116628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d174 	.word	0x0800d174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800d174 	.word	0x0800d174

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80005d0:	f001 f83a 	bl	8001648 <HAL_Init>
    SystemClock_Config();
 80005d4:	f000 f822 	bl	800061c <SystemClock_Config>
	MX_USART2_UART_Init();
 80005d8:	f000 f88c 	bl	80006f4 <MX_USART2_UART_Init>
    if(init_tasks()) printf("Tasks was initialized\n");
 80005dc:	f000 ff96 	bl	800150c <init_tasks>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <main+0x20>
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <main+0x44>)
 80005e8:	f00b ff18 	bl	800c41c <puts>
	if(i2c_init()) printf("I2C1 was init success\n");
 80005ec:	f000 fea0 	bl	8001330 <i2c_init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <main+0x30>
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <main+0x48>)
 80005f8:	f00b ff10 	bl	800c41c <puts>

	osKernelStart();
 80005fc:	f008 f9f6 	bl	80089ec <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000604:	f001 f892 	bl	800172c <HAL_Delay>
	  printf("test\n");
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <main+0x4c>)
 800060a:	f00b ff07 	bl	800c41c <puts>
	  HAL_Delay(1000);
 800060e:	e7f7      	b.n	8000600 <main+0x34>
 8000610:	0800d1a0 	.word	0x0800d1a0
 8000614:	0800d1b8 	.word	0x0800d1b8
 8000618:	0800d1d0 	.word	0x0800d1d0

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f00b ffd6 	bl	800c5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd4>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000694:	2354      	movs	r3, #84	; 0x54
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f973 	bl	8002990 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 f866 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fbd4 	bl	8002e80 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f000 f84f 	bl	8000780 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_USART2_UART_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x4c>)
 800072c:	f003 fe61 	bl	80043f2 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000736:	f000 f823 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000008c 	.word	0x2000008c
 8000744:	40004400 	.word	0x40004400

08000748 <_write>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e009      	b.n	800076e <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	60ba      	str	r2, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff0a 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbf1      	blt.n	800075a <_write+0x12>
	}
	return len;
 8000776:	687b      	ldr	r3, [r7, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_MspInit+0x54>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <HAL_MspInit+0x54>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x54>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_MspInit+0x54>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_MspInit+0x54>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_MspInit+0x54>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	210f      	movs	r1, #15
 80007ce:	f06f 0001 	mvn.w	r0, #1
 80007d2:	f001 f8aa 	bl	800192a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a19      	ldr	r2, [pc, #100]	; (8000868 <HAL_I2C_MspInit+0x84>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d12b      	bne.n	800085e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_I2C_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000822:	23c0      	movs	r3, #192	; 0xc0
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <HAL_I2C_MspInit+0x8c>)
 800083e:	f001 fc27 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_I2C_MspInit+0x88>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_I2C_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	; 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40005400 	.word	0x40005400
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400

08000874 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a65      	ldr	r2, [pc, #404]	; (8000a28 <HAL_SD_MspInit+0x1b4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	f040 80c3 	bne.w	8000a1e <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	4b63      	ldr	r3, [pc, #396]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a6:	6453      	str	r3, [r2, #68]	; 0x44
 80008a8:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	4a5b      	ldr	r2, [pc, #364]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6313      	str	r3, [r2, #48]	; 0x30
 80008c4:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b55      	ldr	r3, [pc, #340]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4a54      	ldr	r2, [pc, #336]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6313      	str	r3, [r2, #48]	; 0x30
 80008e0:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <HAL_SD_MspInit+0x1b8>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008fe:	230c      	movs	r3, #12
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4849      	ldr	r0, [pc, #292]	; (8000a30 <HAL_SD_MspInit+0x1bc>)
 800090a:	f001 fbc1 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090e:	2304      	movs	r3, #4
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800091e:	230c      	movs	r3, #12
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4842      	ldr	r0, [pc, #264]	; (8000a34 <HAL_SD_MspInit+0x1c0>)
 800092a:	f001 fbb1 	bl	8002090 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000930:	4a42      	ldr	r2, [pc, #264]	; (8000a3c <HAL_SD_MspInit+0x1c8>)
 8000932:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000942:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000948:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800094a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000950:	4b39      	ldr	r3, [pc, #228]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000956:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000962:	2220      	movs	r2, #32
 8000964:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000966:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000968:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800096c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000970:	2204      	movs	r2, #4
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000976:	2203      	movs	r2, #3
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800097c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 8000984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800098a:	482b      	ldr	r0, [pc, #172]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800098c:	f001 f804 	bl	8001998 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8000996:	f7ff fef3 	bl	8000780 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a26      	ldr	r2, [pc, #152]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 800099e:	641a      	str	r2, [r3, #64]	; 0x40
 80009a0:	4a25      	ldr	r2, [pc, #148]	; (8000a38 <HAL_SD_MspInit+0x1c4>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <HAL_SD_MspInit+0x1d0>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009b6:	2240      	movs	r2, #64	; 0x40
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009da:	2220      	movs	r2, #32
 80009dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009e4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 80009fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 8000a04:	f000 ffc8 	bl	8001998 <HAL_DMA_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8000a0e:	f7ff feb7 	bl	8000780 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 8000a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_SD_MspInit+0x1cc>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012c00 	.word	0x40012c00
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	20000158 	.word	0x20000158
 8000a3c:	40026458 	.word	0x40026458
 8000a40:	200001b8 	.word	0x200001b8
 8000a44:	400264a0 	.word	0x400264a0

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0x8c>)
 8000abe:	f001 fae7 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>
	...

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
   printf("HardFault_Handler\n");
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <HardFault_Handler+0x10>)
 8000ae6:	f00b fc99 	bl	800c41c <puts>
  /* USER CODE END HardFault_IRQn 0 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	0800d1d8 	.word	0x0800d1d8

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 fde8 	bl	80016ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b1c:	f00a f9ea 	bl	800aef4 <xTaskGetSchedulerState>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d001      	beq.n	8000b2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b26:	f00b f8cf 	bl	800bcc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <DMA2_Stream3_IRQHandler+0x10>)
 8000b36:	f001 f835 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000158 	.word	0x20000158

08000b44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <DMA2_Stream6_IRQHandler+0x10>)
 8000b4a:	f001 f82b 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001b8 	.word	0x200001b8

08000b58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e00a      	b.n	8000b80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b6a:	f3af 8000 	nop.w
 8000b6e:	4601      	mov	r1, r0
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	b2ca      	uxtb	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf0      	blt.n	8000b6a <_read+0x12>
  }

  return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f00b fd24 	bl	800c678 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20018000 	.word	0x20018000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200000d0 	.word	0x200000d0
 8000c64:	20004dc8 	.word	0x20004dc8

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f00b fce3 	bl	800c684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc85 	bl	80005cc <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd0:	0800db30 	.word	0x0800db30
  ldr r2, =_sbss
 8000cd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd8:	20004dc8 	.word	0x20004dc8

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <update_firmware>:
     if(!i2c_send_data_to_device(SNP_ADDR, reset_cmd_2, 4)) return FALSE;

     return TRUE;
}

extern BOOLEAN update_firmware(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
	// Подготовка к прошивке
    if(!prep_firmware()) {
 8000cea:	f000 f893 	bl	8000e14 <prep_firmware>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <update_firmware+0x1e>
    	printf("Can't switch SNP73X to programming mode\n");
 8000cf4:	4831      	ldr	r0, [pc, #196]	; (8000dbc <update_firmware+0xdc>)
 8000cf6:	f00b fb91 	bl	800c41c <puts>
    	return FALSE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e057      	b.n	8000dae <update_firmware+0xce>
    }
    printf("Switch SNP73X to factory state was success\n");
 8000cfe:	4830      	ldr	r0, [pc, #192]	; (8000dc0 <update_firmware+0xe0>)
 8000d00:	f00b fb8c 	bl	800c41c <puts>

    MX_DMA_Init();
 8000d04:	f000 f966 	bl	8000fd4 <MX_DMA_Init>
    MX_SDIO_SD_Init();
 8000d08:	f000 f864 	bl	8000dd4 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8000d0c:	f004 fb94 	bl	8005438 <MX_FATFS_Init>

	 FATFS FatFs;
    FIL fil;
FRESULT fr;

		  fr = f_mount(&FatFs, "", 1);
 8000d10:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8000d14:	f103 0318 	add.w	r3, r3, #24
 8000d18:	2201      	movs	r2, #1
 8000d1a:	492a      	ldr	r1, [pc, #168]	; (8000dc4 <update_firmware+0xe4>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f006 ffd9 	bl	8007cd4 <f_mount>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000d28:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000d2c:	7013      	strb	r3, [r2, #0]
		  print_err(fr);
 8000d2e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000d32:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f89b 	bl	8000e74 <print_err>

		  fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 8000d3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000d42:	3b30      	subs	r3, #48	; 0x30
 8000d44:	2201      	movs	r2, #1
 8000d46:	4920      	ldr	r1, [pc, #128]	; (8000dc8 <update_firmware+0xe8>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f007 f827 	bl	8007d9c <f_open>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000d54:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000d58:	7013      	strb	r3, [r2, #0]
		  print_err(fr);
 8000d5a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8000d5e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f885 	bl	8000e74 <print_err>

		  unsigned int bytesRead;
		  char readBuff[128];
		  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 8000d6a:	e007      	b.n	8000d7c <update_firmware+0x9c>
			  printf("%02x\n ", readBuff[0]);
 8000d6c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000d70:	f813 3cf4 	ldrb.w	r3, [r3, #-244]
 8000d74:	4619      	mov	r1, r3
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <update_firmware+0xec>)
 8000d78:	f00b fae2 	bl	800c340 <iprintf>
		  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 8000d7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000d80:	3b34      	subs	r3, #52	; 0x34
 8000d82:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000d86:	3934      	subs	r1, #52	; 0x34
 8000d88:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8000d8c:	3830      	subs	r0, #48	; 0x30
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f007 f9ec 	bl	800816c <f_read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0e8      	beq.n	8000d6c <update_firmware+0x8c>
	//  unsigned int bytesRead;
	//  fr = f_read(&fil, readBuff, sizeof(readBuff)-1, &bytesRead);
	//  print_err(fr);
	//  printf("%s\n ", readBuff);

	  f_close(&fil);
 8000d9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000d9e:	3b30      	subs	r3, #48	; 0x30
 8000da0:	4618      	mov	r0, r3
 8000da2:	f007 fbfa 	bl	800859a <f_close>
    //                        1     2    3   4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66
//    char buff[66];
//    memset(&buff[0], 0x00, 66);
//    i2c_read_data_from_device(0x36, 0x4000, buff, 66);

    printf("FW was finish\n");
 8000da6:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <update_firmware+0xf0>)
 8000da8:	f00b fb38 	bl	800c41c <puts>
    return TRUE;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	f507 5703 	add.w	r7, r7, #8384	; 0x20c0
 8000db4:	3738      	adds	r7, #56	; 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	0800d1ec 	.word	0x0800d1ec
 8000dc0:	0800d214 	.word	0x0800d214
 8000dc4:	0800d240 	.word	0x0800d240
 8000dc8:	0800d244 	.word	0x0800d244
 8000dcc:	0800d25c 	.word	0x0800d25c
 8000dd0:	0800d264 	.word	0x0800d264

08000dd4 <MX_SDIO_SD_Init>:

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */static void MX_SDIO_SD_Init(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    hsd.Instance = SDIO;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <MX_SDIO_SD_Init+0x3c>)
 8000ddc:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
    HAL_SD_Init(&hsd);
 8000e02:	4802      	ldr	r0, [pc, #8]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000e04:	f002 fa5c 	bl	80032c0 <HAL_SD_Init>
  }
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000d4 	.word	0x200000d4
 8000e10:	40012c00 	.word	0x40012c00

08000e14 <prep_firmware>:

static BOOLEAN prep_firmware(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	// Перевод SDA/SCL пинов в режим GPIO
	switch_mode_sda_scl(GPIO_M);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 f919 	bl	8001050 <switch_mode_sda_scl>

	set_sda(GPIO_PIN_RESET);   // SDA off
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 fa34 	bl	800128c <set_sda>
	set_scl(GPIO_PIN_RESET);   // SCL off
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fa4b 	bl	80012c0 <set_scl>
	set_power(GPIO_PIN_RESET); // VDD off
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 fa1c 	bl	8001268 <set_power>
	osDelay(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e34:	f007 fea7 	bl	8008b86 <osDelay>
 	set_power(GPIO_PIN_SET);   // VDD on
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fa15 	bl	8001268 <set_power>

	// GPIO0(SCL) GPIO1(SDA) должны удерживаться в состояниий  GPIO1 = 1, GPIO0 = 0 не менее 256 мсек
	set_sda(GPIO_PIN_RESET);    // SDA on
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fa24 	bl	800128c <set_sda>
	set_scl(GPIO_PIN_SET);  // SCL off
 8000e44:	2001      	movs	r0, #1
 8000e46:	f000 fa3b 	bl	80012c0 <set_scl>
	osDelay(2000);
 8000e4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e4e:	f007 fe9a 	bl	8008b86 <osDelay>

	// Перевод SDA/SCL пинов в режим I2C
	switch_mode_sda_scl(I2C_M);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f000 f8fc 	bl	8001050 <switch_mode_sda_scl>
	osDelay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5c:	f007 fe93 	bl	8008b86 <osDelay>

	// Убедиться, что на шине появилось устройство с адресом 0x36
    scan_bus_and_print();
 8000e60:	f000 fac2 	bl	80013e8 <scan_bus_and_print>
	return has_device(SNP_ADDR);
 8000e64:	2036      	movs	r0, #54	; 0x36
 8000e66:	f000 fa95 	bl	8001394 <has_device>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b2db      	uxtb	r3, r3
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <print_err>:

static void print_err(FRESULT fr){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	switch(fr){
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b13      	cmp	r3, #19
 8000e82:	d87b      	bhi.n	8000f7c <print_err+0x108>
 8000e84:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <print_err+0x18>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000edd 	.word	0x08000edd
 8000e90:	08000ee5 	.word	0x08000ee5
 8000e94:	08000eed 	.word	0x08000eed
 8000e98:	08000ef5 	.word	0x08000ef5
 8000e9c:	08000efd 	.word	0x08000efd
 8000ea0:	08000f05 	.word	0x08000f05
 8000ea4:	08000f0d 	.word	0x08000f0d
 8000ea8:	08000f15 	.word	0x08000f15
 8000eac:	08000f1d 	.word	0x08000f1d
 8000eb0:	08000f25 	.word	0x08000f25
 8000eb4:	08000f2d 	.word	0x08000f2d
 8000eb8:	08000f35 	.word	0x08000f35
 8000ebc:	08000f3d 	.word	0x08000f3d
 8000ec0:	08000f45 	.word	0x08000f45
 8000ec4:	08000f4d 	.word	0x08000f4d
 8000ec8:	08000f55 	.word	0x08000f55
 8000ecc:	08000f5d 	.word	0x08000f5d
 8000ed0:	08000f65 	.word	0x08000f65
 8000ed4:	08000f6d 	.word	0x08000f6d
 8000ed8:	08000f75 	.word	0x08000f75
	case FR_OK:				/* (0) Succeeded */
		printf("SD: FR_OK \n");
 8000edc:	4829      	ldr	r0, [pc, #164]	; (8000f84 <print_err+0x110>)
 8000ede:	f00b fa9d 	bl	800c41c <puts>
		break;
 8000ee2:	e04b      	b.n	8000f7c <print_err+0x108>
	case FR_DISK_ERR:			/* (1) A hard error occurred in the low level disk I/O layer */
		printf("SD: FR_DISK_ERR \n");
 8000ee4:	4828      	ldr	r0, [pc, #160]	; (8000f88 <print_err+0x114>)
 8000ee6:	f00b fa99 	bl	800c41c <puts>
		break;
 8000eea:	e047      	b.n	8000f7c <print_err+0x108>
	case FR_INT_ERR:				/* (2) Assertion failed */
		printf("SD: FR_INT_ERR \n");
 8000eec:	4827      	ldr	r0, [pc, #156]	; (8000f8c <print_err+0x118>)
 8000eee:	f00b fa95 	bl	800c41c <puts>
		break;
 8000ef2:	e043      	b.n	8000f7c <print_err+0x108>
	case FR_NOT_READY:			/* (3) The physical drive cannot work */
		printf("SD: FR_NOT_READY \n");
 8000ef4:	4826      	ldr	r0, [pc, #152]	; (8000f90 <print_err+0x11c>)
 8000ef6:	f00b fa91 	bl	800c41c <puts>
		break;
 8000efa:	e03f      	b.n	8000f7c <print_err+0x108>
	case FR_NO_FILE:				/* (4) Could not find the file */
		printf("SD: FR_NO_FILE \n");
 8000efc:	4825      	ldr	r0, [pc, #148]	; (8000f94 <print_err+0x120>)
 8000efe:	f00b fa8d 	bl	800c41c <puts>
		break;
 8000f02:	e03b      	b.n	8000f7c <print_err+0x108>
	case FR_NO_PATH:				/* (5) Could not find the path */
		printf("SD: FR_NO_PATH \n");
 8000f04:	4824      	ldr	r0, [pc, #144]	; (8000f98 <print_err+0x124>)
 8000f06:	f00b fa89 	bl	800c41c <puts>
		break;
 8000f0a:	e037      	b.n	8000f7c <print_err+0x108>
	case FR_INVALID_NAME:		/* (6) The path name format is invalid */
		printf("SD: FR_INVALID_NAME \n");
 8000f0c:	4823      	ldr	r0, [pc, #140]	; (8000f9c <print_err+0x128>)
 8000f0e:	f00b fa85 	bl	800c41c <puts>
		break;
 8000f12:	e033      	b.n	8000f7c <print_err+0x108>
	case FR_DENIED:				/* (7) Access denied due to prohibited access or directory full */
		printf("SD: FR_DENIED \n");
 8000f14:	4822      	ldr	r0, [pc, #136]	; (8000fa0 <print_err+0x12c>)
 8000f16:	f00b fa81 	bl	800c41c <puts>
		break;
 8000f1a:	e02f      	b.n	8000f7c <print_err+0x108>
	case FR_EXIST:				/* (8) Access denied due to prohibited access */
		printf("SD: FR_EXIST \n");
 8000f1c:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <print_err+0x130>)
 8000f1e:	f00b fa7d 	bl	800c41c <puts>
		break;
 8000f22:	e02b      	b.n	8000f7c <print_err+0x108>
	case FR_INVALID_OBJECT:		/* (9) The file/directory object is invalid */
		printf("SD: FR_INVALID_OBJECT \n");
 8000f24:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <print_err+0x134>)
 8000f26:	f00b fa79 	bl	800c41c <puts>
		break;
 8000f2a:	e027      	b.n	8000f7c <print_err+0x108>
	case FR_WRITE_PROTECTED:		/* (10) The physical drive is write protected */
		printf("SD: FR_WRITE_PROTECTED \n");
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <print_err+0x138>)
 8000f2e:	f00b fa75 	bl	800c41c <puts>
		break;
 8000f32:	e023      	b.n	8000f7c <print_err+0x108>
	case FR_INVALID_DRIVE:		/* (11) The logical drive number is invalid */
		printf("SD: FR_INVALID_DRIVE \n");
 8000f34:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <print_err+0x13c>)
 8000f36:	f00b fa71 	bl	800c41c <puts>
		break;
 8000f3a:	e01f      	b.n	8000f7c <print_err+0x108>
	case FR_NOT_ENABLED:			/* (12) The volume has no work area */
		printf("SD: FR_NOT_ENABLED \n");
 8000f3c:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <print_err+0x140>)
 8000f3e:	f00b fa6d 	bl	800c41c <puts>
		break;
 8000f42:	e01b      	b.n	8000f7c <print_err+0x108>
	case FR_NO_FILESYSTEM:		/* (13) There is no valid FAT volume */
		printf("SD: FR_NO_FILESYSTEM \n");
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <print_err+0x144>)
 8000f46:	f00b fa69 	bl	800c41c <puts>
		break;
 8000f4a:	e017      	b.n	8000f7c <print_err+0x108>
	case FR_MKFS_ABORTED:		/* (14) The f_mkfs() aborted due to any problem */
		printf("SD: FR_MKFS_ABORTED \n");
 8000f4c:	481b      	ldr	r0, [pc, #108]	; (8000fbc <print_err+0x148>)
 8000f4e:	f00b fa65 	bl	800c41c <puts>
		break;
 8000f52:	e013      	b.n	8000f7c <print_err+0x108>
	case FR_TIMEOUT:				/* (15) Could not get a grant to access the volume within defined period */
		printf("SD: FR_TIMEOUT \n");
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <print_err+0x14c>)
 8000f56:	f00b fa61 	bl	800c41c <puts>
		break;
 8000f5a:	e00f      	b.n	8000f7c <print_err+0x108>
	case FR_LOCKED:				/* (16) The operation is rejected according to the file sharing policy */
		printf("SD: FR_LOCKED \n");
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <print_err+0x150>)
 8000f5e:	f00b fa5d 	bl	800c41c <puts>
		break;
 8000f62:	e00b      	b.n	8000f7c <print_err+0x108>
	case FR_NOT_ENOUGH_CORE:		/* (17) LFN working buffer could not be allocated */
		printf("SD: FR_NOT_ENOUGH_CORE \n");
 8000f64:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <print_err+0x154>)
 8000f66:	f00b fa59 	bl	800c41c <puts>
		break;
 8000f6a:	e007      	b.n	8000f7c <print_err+0x108>
	case FR_TOO_MANY_OPEN_FILES:	/* (18) Number of open files > _FS_LOCK */
		printf("SD: FR_TOO_MANY_OPEN_FILES \n");
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <print_err+0x158>)
 8000f6e:	f00b fa55 	bl	800c41c <puts>
		break;
 8000f72:	e003      	b.n	8000f7c <print_err+0x108>
	case FR_INVALID_PARAMETER:	/* (19) Given parameter is invalid */
		printf("SD: FR_INVALID_PARAMETER \n");
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <print_err+0x15c>)
 8000f76:	f00b fa51 	bl	800c41c <puts>
		break;
 8000f7a:	bf00      	nop
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	0800d274 	.word	0x0800d274
 8000f88:	0800d280 	.word	0x0800d280
 8000f8c:	0800d294 	.word	0x0800d294
 8000f90:	0800d2a4 	.word	0x0800d2a4
 8000f94:	0800d2b8 	.word	0x0800d2b8
 8000f98:	0800d2c8 	.word	0x0800d2c8
 8000f9c:	0800d2d8 	.word	0x0800d2d8
 8000fa0:	0800d2f0 	.word	0x0800d2f0
 8000fa4:	0800d300 	.word	0x0800d300
 8000fa8:	0800d310 	.word	0x0800d310
 8000fac:	0800d328 	.word	0x0800d328
 8000fb0:	0800d340 	.word	0x0800d340
 8000fb4:	0800d358 	.word	0x0800d358
 8000fb8:	0800d36c 	.word	0x0800d36c
 8000fbc:	0800d384 	.word	0x0800d384
 8000fc0:	0800d39c 	.word	0x0800d39c
 8000fc4:	0800d3ac 	.word	0x0800d3ac
 8000fc8:	0800d3bc 	.word	0x0800d3bc
 8000fcc:	0800d3d4 	.word	0x0800d3d4
 8000fd0:	0800d3f0 	.word	0x0800d3f0

08000fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_DMA_Init+0x4c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <MX_DMA_Init+0x4c>)
 8000fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_DMA_Init+0x4c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	203b      	movs	r0, #59	; 0x3b
 8000ffc:	f000 fc95 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001000:	203b      	movs	r0, #59	; 0x3b
 8001002:	f000 fcae 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2105      	movs	r1, #5
 800100a:	2045      	movs	r0, #69	; 0x45
 800100c:	f000 fc8d 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001010:	2045      	movs	r0, #69	; 0x45
 8001012:	f000 fca6 	bl	8001962 <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <gpio_start>:

static BOOLEAN init_io(void);
static void gpio_watcher(void);


extern BOOLEAN gpio_start(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
   if(is_init) return TRUE;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <gpio_start+0x28>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <gpio_start+0x10>
 8001030:	2301      	movs	r3, #1
 8001032:	e008      	b.n	8001046 <gpio_start+0x22>
   is_init = init_io();
 8001034:	f000 f88c 	bl	8001150 <init_io>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <gpio_start+0x28>)
 800103e:	701a      	strb	r2, [r3, #0]
   gpio_watcher();
 8001040:	f000 f876 	bl	8001130 <gpio_watcher>
   return TRUE;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000218 	.word	0x20000218

08001050 <switch_mode_sda_scl>:


extern BOOLEAN switch_mode_sda_scl(SDA_SCL_MODE mode){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <switch_mode_sda_scl+0x16>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d00d      	beq.n	8001080 <switch_mode_sda_scl+0x30>
 8001064:	e01f      	b.n	80010a6 <switch_mode_sda_scl+0x56>
	case GPIO_M:
		printf("SDA/SCL has GPIO_MODE\n");
 8001066:	482a      	ldr	r0, [pc, #168]	; (8001110 <switch_mode_sda_scl+0xc0>)
 8001068:	f00b f9d8 	bl	800c41c <puts>
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <switch_mode_sda_scl+0xc4>)
 800106e:	2201      	movs	r2, #1
 8001070:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <switch_mode_sda_scl+0xc8>)
 8001074:	2201      	movs	r2, #1
 8001076:	605a      	str	r2, [r3, #4]
		current_mode = GPIO_M;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <switch_mode_sda_scl+0xcc>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
		break;
 800107e:	e017      	b.n	80010b0 <switch_mode_sda_scl+0x60>
	case I2C_M:
		printf("SDA/SCL has I2C_MODE\n");
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <switch_mode_sda_scl+0xd0>)
 8001082:	f00b f9cb 	bl	800c41c <puts>
	    GPIO_InitStruct_i2c_sda.Alternate = GPIO_AF4_I2C1;
 8001086:	4b24      	ldr	r3, [pc, #144]	; (8001118 <switch_mode_sda_scl+0xc8>)
 8001088:	2204      	movs	r2, #4
 800108a:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Alternate = GPIO_AF4_I2C1;
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <switch_mode_sda_scl+0xc4>)
 800108e:	2204      	movs	r2, #4
 8001090:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_AF_OD;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <switch_mode_sda_scl+0xc4>)
 8001094:	2212      	movs	r2, #18
 8001096:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_AF_OD;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <switch_mode_sda_scl+0xc8>)
 800109a:	2212      	movs	r2, #18
 800109c:	605a      	str	r2, [r3, #4]
		current_mode = I2C_M;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <switch_mode_sda_scl+0xcc>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
        break;
 80010a4:	e004      	b.n	80010b0 <switch_mode_sda_scl+0x60>
	default:
		printf("Unknown state for SDA/SCL pins\n");
 80010a6:	481f      	ldr	r0, [pc, #124]	; (8001124 <switch_mode_sda_scl+0xd4>)
 80010a8:	f00b f9b8 	bl	800c41c <puts>
		return FALSE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e02a      	b.n	8001106 <switch_mode_sda_scl+0xb6>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <switch_mode_sda_scl+0xd8>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <switch_mode_sda_scl+0xd8>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <switch_mode_sda_scl+0xd8>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct_i2c_scl.Pin = SCL;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <switch_mode_sda_scl+0xc4>)
 80010ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct_i2c_sda.Pin = SDA;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <switch_mode_sda_scl+0xc8>)
 80010d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010da:	601a      	str	r2, [r3, #0]

	GPIO_InitStruct_i2c_scl.Pull = GPIO_PULLUP;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <switch_mode_sda_scl+0xc4>)
 80010de:	2201      	movs	r2, #1
 80010e0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct_i2c_sda.Pull = GPIO_PULLUP;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <switch_mode_sda_scl+0xc8>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	609a      	str	r2, [r3, #8]

	GPIO_InitStruct_i2c_scl.Speed = GPIO_SPEED_HIGH;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <switch_mode_sda_scl+0xc4>)
 80010ea:	2203      	movs	r2, #3
 80010ec:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct_i2c_sda.Speed = GPIO_SPEED_HIGH;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <switch_mode_sda_scl+0xc8>)
 80010f0:	2203      	movs	r2, #3
 80010f2:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct_i2c_sda);
 80010f4:	4908      	ldr	r1, [pc, #32]	; (8001118 <switch_mode_sda_scl+0xc8>)
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <switch_mode_sda_scl+0xdc>)
 80010f8:	f000 ffca 	bl	8002090 <HAL_GPIO_Init>
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct_i2c_scl);
 80010fc:	4905      	ldr	r1, [pc, #20]	; (8001114 <switch_mode_sda_scl+0xc4>)
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <switch_mode_sda_scl+0xdc>)
 8001100:	f000 ffc6 	bl	8002090 <HAL_GPIO_Init>
	return TRUE;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	0800d40c 	.word	0x0800d40c
 8001114:	20000258 	.word	0x20000258
 8001118:	20000244 	.word	0x20000244
 800111c:	20000004 	.word	0x20000004
 8001120:	0800d424 	.word	0x0800d424
 8001124:	0800d43c 	.word	0x0800d43c
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400

08001130 <gpio_watcher>:

static void gpio_watcher(void){
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
	while(is_init){
 8001134:	bf00      	nop
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <gpio_watcher+0x1c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1fb      	bne.n	8001136 <gpio_watcher+0x6>

	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000218 	.word	0x20000218

08001150 <init_io>:

extern void gpio_stop(void){
	is_init = FALSE;
}

static BOOLEAN init_io(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <init_io+0x100>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a3c      	ldr	r2, [pc, #240]	; (8001250 <init_io+0x100>)
 8001160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <init_io+0x100>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <init_io+0x100>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a35      	ldr	r2, [pc, #212]	; (8001250 <init_io+0x100>)
 800117c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b33      	ldr	r3, [pc, #204]	; (8001250 <init_io+0x100>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_SDIO_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <init_io+0x100>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a2e      	ldr	r2, [pc, #184]	; (8001250 <init_io+0x100>)
 8001198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <init_io+0x100>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

	 // Инит кнопки
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <init_io+0x100>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <init_io+0x100>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <init_io+0x100>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
	 GPIO_InitStruct_green_led.Pin = BLUE_BUTTON;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <init_io+0x104>)
 80011c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011cc:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_green_led.Mode = GPIO_MODE_INPUT; // вход
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <init_io+0x104>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_green_led.Pull = GPIO_PULLDOWN;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <init_io+0x104>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_green_led.Speed = GPIO_SPEED_HIGH;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <init_io+0x104>)
 80011dc:	2203      	movs	r2, #3
 80011de:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(BLUE_BUTTON_PORT, &GPIO_InitStruct_green_led);
 80011e0:	491c      	ldr	r1, [pc, #112]	; (8001254 <init_io+0x104>)
 80011e2:	481d      	ldr	r0, [pc, #116]	; (8001258 <init_io+0x108>)
 80011e4:	f000 ff54 	bl	8002090 <HAL_GPIO_Init>

	 // Инит индикатора
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <init_io+0x100>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <init_io+0x100>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <init_io+0x100>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
	 GPIO_InitStruct_blue_button.Pin = LED_GREEN;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <init_io+0x10c>)
 8001206:	2220      	movs	r2, #32
 8001208:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_blue_button.Mode = GPIO_MODE_OUTPUT_PP; // выход
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <init_io+0x10c>)
 800120c:	2201      	movs	r2, #1
 800120e:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_blue_button.Pull = GPIO_NOPULL;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <init_io+0x10c>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_blue_button.Speed = GPIO_SPEED_HIGH;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <init_io+0x10c>)
 8001218:	2203      	movs	r2, #3
 800121a:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct_blue_button);
 800121c:	490f      	ldr	r1, [pc, #60]	; (800125c <init_io+0x10c>)
 800121e:	4810      	ldr	r0, [pc, #64]	; (8001260 <init_io+0x110>)
 8001220:	f000 ff36 	bl	8002090 <HAL_GPIO_Init>


	 // Инит питания
	 GPIO_InitStruct_power.Pin = POWER;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <init_io+0x114>)
 8001226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122a:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_power.Mode = GPIO_MODE_OUTPUT_PP; // выход
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <init_io+0x114>)
 800122e:	2201      	movs	r2, #1
 8001230:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_power.Pull = GPIO_PULLDOWN;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <init_io+0x114>)
 8001234:	2202      	movs	r2, #2
 8001236:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_power.Speed = GPIO_SPEED_HIGH;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <init_io+0x114>)
 800123a:	2203      	movs	r2, #3
 800123c:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(POWER_PORT, &GPIO_InitStruct_power);
 800123e:	4909      	ldr	r1, [pc, #36]	; (8001264 <init_io+0x114>)
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <init_io+0x110>)
 8001242:	f000 ff25 	bl	8002090 <HAL_GPIO_Init>

	 return TRUE;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	2000021c 	.word	0x2000021c
 8001258:	40020800 	.word	0x40020800
 800125c:	20000230 	.word	0x20000230
 8001260:	40020000 	.word	0x40020000
 8001264:	2000026c 	.word	0x2000026c

08001268 <set_power>:

extern void set_power(GPIO_PinState state){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
     HAL_GPIO_WritePin(POWER_PORT, POWER, state);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	461a      	mov	r2, r3
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <set_power+0x20>)
 800127c:	f001 f8a4 	bl	80023c8 <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40020000 	.word	0x40020000

0800128c <set_sda>:

extern void set_sda(GPIO_PinState state){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
     if(current_mode != GPIO_M) return;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <set_sda+0x2c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <set_sda+0x22>
	 HAL_GPIO_WritePin(SDA_PORT, SDA, state);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	461a      	mov	r2, r3
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <set_sda+0x30>)
 80012a8:	f001 f88e 	bl	80023c8 <HAL_GPIO_WritePin>
 80012ac:	e000      	b.n	80012b0 <set_sda+0x24>
     if(current_mode != GPIO_M) return;
 80012ae:	bf00      	nop
}
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000004 	.word	0x20000004
 80012bc:	40020400 	.word	0x40020400

080012c0 <set_scl>:

extern void set_scl(GPIO_PinState state){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	 if(current_mode != GPIO_M) return;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <set_scl+0x2c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <set_scl+0x22>
	 HAL_GPIO_WritePin(SCL_PORT, SCL, state);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	461a      	mov	r2, r3
 80012d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <set_scl+0x30>)
 80012dc:	f001 f874 	bl	80023c8 <HAL_GPIO_WritePin>
 80012e0:	e000      	b.n	80012e4 <set_scl+0x24>
	 if(current_mode != GPIO_M) return;
 80012e2:	bf00      	nop
}
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000004 	.word	0x20000004
 80012f0:	40020400 	.word	0x40020400

080012f4 <set_green_led>:

extern GPIO_PinState get_current_green_led(){
	 return HAL_GPIO_ReadPin(LED_GREEN_PORT, LED_GREEN);
}

extern void set_green_led(GPIO_PinState state){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN, state);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	461a      	mov	r2, r3
 8001302:	2120      	movs	r1, #32
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <set_green_led+0x20>)
 8001306:	f001 f85f 	bl	80023c8 <HAL_GPIO_WritePin>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020000 	.word	0x40020000

08001318 <get_current_button_state>:

extern GPIO_PinState get_current_button_state(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLUE_BUTTON_PORT, BLUE_BUTTON);
 800131c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <get_current_button_state+0x14>)
 8001322:	f001 f839 	bl	8002398 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40020800 	.word	0x40020800

08001330 <i2c_init>:
#include "i2c_manager.h"

static I2C_HandleTypeDef hi2c1;

extern BOOLEAN i2c_init(void){
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <i2c_init+0x58>)
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <i2c_init+0x5c>)
 8001338:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <i2c_init+0x58>)
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <i2c_init+0x60>)
 800133e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <i2c_init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0x0;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <i2c_init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <i2c_init+0x58>)
 800134e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001352:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <i2c_init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <i2c_init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <i2c_init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <i2c_init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]


	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <i2c_init+0x58>)
 800136e:	f001 f845 	bl	80023fc <HAL_I2C_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <i2c_init+0x4c>
	  {
	    return FALSE;
 8001378:	2300      	movs	r3, #0
 800137a:	e003      	b.n	8001384 <i2c_init+0x54>
	  }
	  switch_mode_sda_scl(I2C_M);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe67 	bl	8001050 <switch_mode_sda_scl>
      return TRUE;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000280 	.word	0x20000280
 800138c:	40005400 	.word	0x40005400
 8001390:	000186a0 	.word	0x000186a0

08001394 <has_device>:
    print_hex("ack data: ", data, data_size);
	return TRUE;
}


extern BOOLEAN has_device(UINT16 addr){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
	UINT8 state = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
	state = HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 30, 5000);
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b299      	uxth	r1, r3
 80013a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ac:	221e      	movs	r2, #30
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <has_device+0x48>)
 80013b0:	f001 f968 	bl	8002684 <HAL_I2C_IsDeviceReady>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
	if(state == HAL_OK){
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d105      	bne.n	80013ca <has_device+0x36>
	    printf("Has device 0x%02X\n", addr);
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	; (80013e0 <has_device+0x4c>)
 80013c4:	f00a ffbc 	bl	800c340 <iprintf>
 80013c8:	e002      	b.n	80013d0 <has_device+0x3c>
	} else {
		printf("Device was not found\n");
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <has_device+0x50>)
 80013cc:	f00b f826 	bl	800c41c <puts>
	}
    return TRUE;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000280 	.word	0x20000280
 80013e0:	0800d4e0 	.word	0x0800d4e0
 80013e4:	0800d4f4 	.word	0x0800d4f4

080013e8 <scan_bus_and_print>:


extern void scan_bus_and_print(void){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	UINT8 state = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	70fb      	strb	r3, [r7, #3]
	printf("Start scanning slaves I2C:\n");
 80013f2:	481d      	ldr	r0, [pc, #116]	; (8001468 <scan_bus_and_print+0x80>)
 80013f4:	f00b f812 	bl	800c41c <puts>
	for(int  i = 0; i < 128; i++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	e02a      	b.n	8001454 <scan_bus_and_print+0x6c>
		state = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 30, 5000);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	b29b      	uxth	r3, r3
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	b299      	uxth	r1, r3
 8001406:	f241 3388 	movw	r3, #5000	; 0x1388
 800140a:	221e      	movs	r2, #30
 800140c:	4817      	ldr	r0, [pc, #92]	; (800146c <scan_bus_and_print+0x84>)
 800140e:	f001 f939 	bl	8002684 <HAL_I2C_IsDeviceReady>
 8001412:	4603      	mov	r3, r0
 8001414:	70fb      	strb	r3, [r7, #3]
		if(state == HAL_OK){
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d104      	bne.n	8001426 <scan_bus_and_print+0x3e>
			printf(" 0x%02X", i);
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4814      	ldr	r0, [pc, #80]	; (8001470 <scan_bus_and_print+0x88>)
 8001420:	f00a ff8e 	bl	800c340 <iprintf>
 8001424:	e002      	b.n	800142c <scan_bus_and_print+0x44>
		} else {
			printf("  .  ");
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <scan_bus_and_print+0x8c>)
 8001428:	f00a ff8a 	bl	800c340 <iprintf>
		}

		if(i % 12 == 0){
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <scan_bus_and_print+0x90>)
 8001430:	fb83 2301 	smull	r2, r3, r3, r1
 8001434:	105a      	asrs	r2, r3, #1
 8001436:	17cb      	asrs	r3, r1, #31
 8001438:	1ad2      	subs	r2, r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	1aca      	subs	r2, r1, r3
 8001444:	2a00      	cmp	r2, #0
 8001446:	d102      	bne.n	800144e <scan_bus_and_print+0x66>
			printf("\n");
 8001448:	200a      	movs	r0, #10
 800144a:	f00a ff8b 	bl	800c364 <putchar>
	for(int  i = 0; i < 128; i++){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3301      	adds	r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	ddd1      	ble.n	80013fe <scan_bus_and_print+0x16>
		}
	}
	printf("\nStop scanning.\n");
 800145a:	4808      	ldr	r0, [pc, #32]	; (800147c <scan_bus_and_print+0x94>)
 800145c:	f00a ffde 	bl	800c41c <puts>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0800d50c 	.word	0x0800d50c
 800146c:	20000280 	.word	0x20000280
 8001470:	0800d528 	.word	0x0800d528
 8001474:	0800d530 	.word	0x0800d530
 8001478:	2aaaaaab 	.word	0x2aaaaaab
 800147c:	0800d538 	.word	0x0800d538

08001480 <start_indication>:
static UINT8 state = 0;
static void reset_task(void);
static void firmware_update(void);


extern void start_indication(void *argument){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	while(1){
        switch(current_task){
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <start_indication+0x1c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <start_indication+0x16>
             case 1:
            	 firmware_update();
 8001490:	f000 f806 	bl	80014a0 <firmware_update>
            	 break;
 8001494:	e000      	b.n	8001498 <start_indication+0x18>
             default:
            	 break;
 8001496:	bf00      	nop
        switch(current_task){
 8001498:	e7f6      	b.n	8001488 <start_indication+0x8>
 800149a:	bf00      	nop
 800149c:	200002d4 	.word	0x200002d4

080014a0 <firmware_update>:
        }
	}
}

static void firmware_update(void){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	if(state == 0){
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <firmware_update+0x30>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d106      	bne.n	80014ba <firmware_update+0x1a>
		state = 1;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <firmware_update+0x30>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_RESET);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff ff1e 	bl	80012f4 <set_green_led>
 80014b8:	e005      	b.n	80014c6 <firmware_update+0x26>
	} else {
	    state = 0;
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <firmware_update+0x30>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_SET);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff ff17 	bl	80012f4 <set_green_led>
	}
	osDelay(50);
 80014c6:	2032      	movs	r0, #50	; 0x32
 80014c8:	f007 fb5d 	bl	8008b86 <osDelay>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200002d5 	.word	0x200002d5

080014d4 <set_indication_task>:

extern void set_indication_task(UINT8 cmd){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	reset_task();
 80014de:	f000 f809 	bl	80014f4 <reset_task>
	current_task = cmd;
 80014e2:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <set_indication_task+0x1c>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	7013      	strb	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200002d4 	.word	0x200002d4

080014f4 <reset_task>:

static void reset_task(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	state = 0;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <reset_task+0x14>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
	set_green_led(GPIO_PIN_RESET);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fef8 	bl	80012f4 <set_green_led>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200002d5 	.word	0x200002d5

0800150c <init_tasks>:
static void init_gpio_task(void *argument);
static void init_i2c_task(void *argument);
static void init_ind_task(void *argument);


extern BOOLEAN init_tasks(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	  osKernelInitialize();
 8001512:	f007 fa25 	bl	8008960 <osKernelInitialize>

	  UINT8 fail_cnt = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	71fb      	strb	r3, [r7, #7]
	  gpio_taskHandle = osThreadNew(init_gpio_task, NULL, &gpio_task_attributes);
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <init_tasks+0x90>)
 800151c:	2100      	movs	r1, #0
 800151e:	4820      	ldr	r0, [pc, #128]	; (80015a0 <init_tasks+0x94>)
 8001520:	f007 fa9f 	bl	8008a62 <osThreadNew>
 8001524:	4603      	mov	r3, r0
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <init_tasks+0x98>)
 8001528:	6013      	str	r3, [r2, #0]
	  if(gpio_taskHandle == NULL){
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <init_tasks+0x98>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d105      	bne.n	800153e <init_tasks+0x32>
		 printf("Error init gpio task\n");
 8001532:	481d      	ldr	r0, [pc, #116]	; (80015a8 <init_tasks+0x9c>)
 8001534:	f00a ff72 	bl	800c41c <puts>
		 fail_cnt++;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	3301      	adds	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
	  }

	  i2c_taskHandle = osThreadNew(init_i2c_task, NULL, &i2c_task_attributes);
 800153e:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <init_tasks+0xa0>)
 8001540:	2100      	movs	r1, #0
 8001542:	481b      	ldr	r0, [pc, #108]	; (80015b0 <init_tasks+0xa4>)
 8001544:	f007 fa8d 	bl	8008a62 <osThreadNew>
 8001548:	4603      	mov	r3, r0
 800154a:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <init_tasks+0xa8>)
 800154c:	6013      	str	r3, [r2, #0]
	  if(i2c_taskHandle == NULL){
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <init_tasks+0xa8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <init_tasks+0x56>
		 printf("Error init i2c task\n");
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <init_tasks+0xac>)
 8001558:	f00a ff60 	bl	800c41c <puts>
		 fail_cnt++;
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	3301      	adds	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
	  }

	  ind_taskHandle = osThreadNew(init_ind_task, NULL, &ind_task_attributes);
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <init_tasks+0xb0>)
 8001564:	2100      	movs	r1, #0
 8001566:	4816      	ldr	r0, [pc, #88]	; (80015c0 <init_tasks+0xb4>)
 8001568:	f007 fa7b 	bl	8008a62 <osThreadNew>
 800156c:	4603      	mov	r3, r0
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <init_tasks+0xb8>)
 8001570:	6013      	str	r3, [r2, #0]
	  if(ind_taskHandle == NULL){
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <init_tasks+0xb8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <init_tasks+0x7a>
	 	 printf("Error init ind task\n");
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <init_tasks+0xbc>)
 800157c:	f00a ff4e 	bl	800c41c <puts>
	 	 fail_cnt++;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	3301      	adds	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
	  }

	  return (fail_cnt == 0) ? TRUE : FALSE;
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	0800d624 	.word	0x0800d624
 80015a0:	080015cd 	.word	0x080015cd
 80015a4:	200002d8 	.word	0x200002d8
 80015a8:	0800d56c 	.word	0x0800d56c
 80015ac:	0800d648 	.word	0x0800d648
 80015b0:	080015f9 	.word	0x080015f9
 80015b4:	200002dc 	.word	0x200002dc
 80015b8:	0800d584 	.word	0x0800d584
 80015bc:	0800d66c 	.word	0x0800d66c
 80015c0:	080015e1 	.word	0x080015e1
 80015c4:	200002e0 	.word	0x200002e0
 80015c8:	0800d598 	.word	0x0800d598

080015cc <init_gpio_task>:


static void init_gpio_task(void *argument){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	gpio_start();
 80015d4:	f7ff fd26 	bl	8001024 <gpio_start>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <init_ind_task>:

static void init_ind_task(void *argument){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	start_indication(NULL);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ff49 	bl	8001480 <start_indication>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <init_i2c_task>:



static BOOLEAN is_start = FALSE;

static void init_i2c_task(void *argument){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	set_power(GPIO_PIN_SET);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fe31 	bl	8001268 <set_power>
	osDelay(1000);
 8001606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160a:	f007 fabc 	bl	8008b86 <osDelay>
	while(1){
		osDelay(100);
 800160e:	2064      	movs	r0, #100	; 0x64
 8001610:	f007 fab9 	bl	8008b86 <osDelay>
		if(get_current_button_state() == GPIO_PIN_RESET){
 8001614:	f7ff fe80 	bl	8001318 <get_current_button_state>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f7      	bne.n	800160e <init_i2c_task+0x16>
			if(!is_start){
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <init_i2c_task+0x4c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f3      	bne.n	800160e <init_i2c_task+0x16>
				is_start = TRUE;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <init_i2c_task+0x4c>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
				set_indication_task(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff ff51 	bl	80014d4 <set_indication_task>
				update_firmware();
 8001632:	f7ff fb55 	bl	8000ce0 <update_firmware>
				is_start = FALSE;
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <init_i2c_task+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
				set_indication_task(0);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff ff49 	bl	80014d4 <set_indication_task>
		osDelay(100);
 8001642:	e7e4      	b.n	800160e <init_i2c_task+0x16>
 8001644:	200002e4 	.word	0x200002e4

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_Init+0x40>)
 8001652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_Init+0x40>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x40>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f94f 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff f886 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f967 	bl	800197e <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f92f 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	20000008 	.word	0x20000008

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000000c 	.word	0x2000000c
 8001710:	200002e8 	.word	0x200002e8

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200002e8 	.word	0x200002e8

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff ffee 	bl	8001714 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_Delay+0x44>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffde 	bl	8001714 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000000c 	.word	0x2000000c

08001774 <__NVIC_SetPriorityGrouping>:
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff feb6 	bl	8001714 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e099      	b.n	8001ae8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d4:	e00f      	b.n	80019f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d6:	f7ff fe9d 	bl	8001714 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d908      	bls.n	80019f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e078      	b.n	8001ae8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e8      	bne.n	80019d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_DMA_Init+0x158>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d117      	bne.n	8001aba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00e      	beq.n	8001aba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fa7b 	bl	8001f98 <DMA_CheckFifoParam>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa32 	bl	8001f2c <DMA_CalcBaseAndBitshift>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	223f      	movs	r2, #63	; 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	f010803f 	.word	0xf010803f

08001af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_Start_IT+0x26>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e040      	b.n	8001b9c <HAL_DMA_Start_IT+0xa8>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d12f      	bne.n	8001b8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f9c4 	bl	8001ed0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	223f      	movs	r2, #63	; 0x3f
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0216 	orr.w	r2, r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0208 	orr.w	r2, r2, #8
 8001b7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e005      	b.n	8001b9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	; (8001dec <HAL_DMA_IRQHandler+0x248>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a8e      	ldr	r2, [pc, #568]	; (8001df0 <HAL_DMA_IRQHandler+0x24c>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2208      	movs	r2, #8
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d012      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d012      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	2204      	movs	r2, #4
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2210      	movs	r2, #16
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d043      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e01f      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0208 	bic.w	r2, r2, #8
 8001d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	2220      	movs	r2, #32
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 808f 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8087 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d136      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x1da>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	223f      	movs	r2, #63	; 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
        }
        return;
 8001dba:	e079      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d031      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e02c      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000
 8001df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e01e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d307      	bcc.n	8001e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f2      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x2cc>
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001eec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d108      	bne.n	8001f10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f0e:	e007      	b.n	8001f20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3b10      	subs	r3, #16
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <DMA_CalcBaseAndBitshift+0x64>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <DMA_CalcBaseAndBitshift+0x68>)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d909      	bls.n	8001f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f62:	f023 0303 	bic.w	r3, r3, #3
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f6c:	e007      	b.n	8001f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	aaaaaaab 	.word	0xaaaaaaab
 8001f94:	0800d690 	.word	0x0800d690

08001f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11f      	bne.n	8001ff2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d856      	bhi.n	8002066 <DMA_CheckFifoParam+0xce>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <DMA_CheckFifoParam+0x28>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fe3 	.word	0x08001fe3
 8001fc8:	08001fd1 	.word	0x08001fd1
 8001fcc:	08002067 	.word	0x08002067
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d046      	beq.n	800206a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe0:	e043      	b.n	800206a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fea:	d140      	bne.n	800206e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff0:	e03d      	b.n	800206e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ffa:	d121      	bne.n	8002040 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d837      	bhi.n	8002072 <DMA_CheckFifoParam+0xda>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <DMA_CheckFifoParam+0x70>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002019 	.word	0x08002019
 800200c:	0800201f 	.word	0x0800201f
 8002010:	08002019 	.word	0x08002019
 8002014:	08002031 	.word	0x08002031
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      break;
 800201c:	e030      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d025      	beq.n	8002076 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800202e:	e022      	b.n	8002076 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002038:	d11f      	bne.n	800207a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800203e:	e01c      	b.n	800207a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d903      	bls.n	800204e <DMA_CheckFifoParam+0xb6>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d003      	beq.n	8002054 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800204c:	e018      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
      break;
 8002052:	e015      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      break;
 8002064:	e00b      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 8002066:	bf00      	nop
 8002068:	e00a      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800206a:	bf00      	nop
 800206c:	e008      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800206e:	bf00      	nop
 8002070:	e006      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 8002072:	bf00      	nop
 8002074:	e004      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
 8002078:	e002      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;   
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
    }
  } 
  
  return status; 
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e159      	b.n	8002360 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8148 	bne.w	800235a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a2 	beq.w	800235a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_GPIO_Init+0x2e8>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_GPIO_Init+0x2e8>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b54      	ldr	r3, [pc, #336]	; (8002378 <HAL_GPIO_Init+0x2e8>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_GPIO_Init+0x2ec>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a49      	ldr	r2, [pc, #292]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d019      	beq.n	8002292 <HAL_GPIO_Init+0x202>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a48      	ldr	r2, [pc, #288]	; (8002384 <HAL_GPIO_Init+0x2f4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_GPIO_Init+0x1fe>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a47      	ldr	r2, [pc, #284]	; (8002388 <HAL_GPIO_Init+0x2f8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00d      	beq.n	800228a <HAL_GPIO_Init+0x1fa>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a46      	ldr	r2, [pc, #280]	; (800238c <HAL_GPIO_Init+0x2fc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0x1f6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a45      	ldr	r2, [pc, #276]	; (8002390 <HAL_GPIO_Init+0x300>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <HAL_GPIO_Init+0x1f2>
 800227e:	2304      	movs	r3, #4
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x204>
 8002282:	2307      	movs	r3, #7
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x204>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x204>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x204>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x204>
 8002292:	2300      	movs	r3, #0
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	; (800237c <HAL_GPIO_Init+0x2ec>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_GPIO_Init+0x304>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d6:	4a2f      	ldr	r2, [pc, #188]	; (8002394 <HAL_GPIO_Init+0x304>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_GPIO_Init+0x304>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002300:	4a24      	ldr	r2, [pc, #144]	; (8002394 <HAL_GPIO_Init+0x304>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_GPIO_Init+0x304>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232a:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_GPIO_Init+0x304>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_GPIO_Init+0x304>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002354:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <HAL_GPIO_Init+0x304>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	f67f aea2 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40013c00 	.word	0x40013c00

08002398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e001      	b.n	80023ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e12b      	b.n	8002666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe f9de 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800245e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002460:	f000 ff06 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8002464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a81      	ldr	r2, [pc, #516]	; (8002670 <HAL_I2C_Init+0x274>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d807      	bhi.n	8002480 <HAL_I2C_Init+0x84>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4a80      	ldr	r2, [pc, #512]	; (8002674 <HAL_I2C_Init+0x278>)
 8002474:	4293      	cmp	r3, r2
 8002476:	bf94      	ite	ls
 8002478:	2301      	movls	r3, #1
 800247a:	2300      	movhi	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	e006      	b.n	800248e <HAL_I2C_Init+0x92>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a7d      	ldr	r2, [pc, #500]	; (8002678 <HAL_I2C_Init+0x27c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	bf94      	ite	ls
 8002488:	2301      	movls	r3, #1
 800248a:	2300      	movhi	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0e7      	b.n	8002666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a78      	ldr	r2, [pc, #480]	; (800267c <HAL_I2C_Init+0x280>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9b      	lsrs	r3, r3, #18
 80024a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a6a      	ldr	r2, [pc, #424]	; (8002670 <HAL_I2C_Init+0x274>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d802      	bhi.n	80024d0 <HAL_I2C_Init+0xd4>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3301      	adds	r3, #1
 80024ce:	e009      	b.n	80024e4 <HAL_I2C_Init+0xe8>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_I2C_Init+0x284>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	3301      	adds	r3, #1
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	495c      	ldr	r1, [pc, #368]	; (8002670 <HAL_I2C_Init+0x274>)
 8002500:	428b      	cmp	r3, r1
 8002502:	d819      	bhi.n	8002538 <HAL_I2C_Init+0x13c>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e59      	subs	r1, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002512:	1c59      	adds	r1, r3, #1
 8002514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002518:	400b      	ands	r3, r1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_I2C_Init+0x138>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1e59      	subs	r1, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fbb1 f3f3 	udiv	r3, r1, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002532:	e051      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 8002534:	2304      	movs	r3, #4
 8002536:	e04f      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <HAL_I2C_Init+0x168>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e012      	b.n	800258a <HAL_I2C_Init+0x18e>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1e58      	subs	r0, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	0099      	lsls	r1, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	fbb0 f3f3 	udiv	r3, r0, r3
 800257a:	3301      	adds	r3, #1
 800257c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x196>
 800258e:	2301      	movs	r3, #1
 8002590:	e022      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10e      	bne.n	80025b8 <HAL_I2C_Init+0x1bc>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1e58      	subs	r0, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	440b      	add	r3, r1
 80025a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b6:	e00f      	b.n	80025d8 <HAL_I2C_Init+0x1dc>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	6809      	ldr	r1, [r1, #0]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6911      	ldr	r1, [r2, #16]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	430b      	orrs	r3, r1
 800261a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	000186a0 	.word	0x000186a0
 8002674:	001e847f 	.word	0x001e847f
 8002678:	003d08ff 	.word	0x003d08ff
 800267c:	431bde83 	.word	0x431bde83
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	460b      	mov	r3, r1
 8002692:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff f83e 	bl	8001714 <HAL_GetTick>
 8002698:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	f040 8111 	bne.w	80028ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	4988      	ldr	r1, [pc, #544]	; (80028d8 <HAL_I2C_IsDeviceReady+0x254>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f912 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	e104      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_I2C_IsDeviceReady+0x50>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0fd      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x24c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d007      	beq.n	80026fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002708:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2224      	movs	r2, #36	; 0x24
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_I2C_IsDeviceReady+0x258>)
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8d0 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002754:	d103      	bne.n	800275e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0b6      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002770:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe ffcf 	bl	8001714 <HAL_GetTick>
 8002776:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279c:	bf0c      	ite	eq
 800279e:	2301      	moveq	r3, #1
 80027a0:	2300      	movne	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027a6:	e025      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027a8:	f7fe ffb4 	bl	8001714 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d302      	bcc.n	80027be <HAL_I2C_IsDeviceReady+0x13a>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	22a0      	movs	r2, #160	; 0xa0
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2ba0      	cmp	r3, #160	; 0xa0
 80027fe:	d005      	beq.n	800280c <HAL_I2C_IsDeviceReady+0x188>
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_I2C_IsDeviceReady+0x188>
 8002806:	7dbb      	ldrb	r3, [r7, #22]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0cd      	beq.n	80027a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d129      	bne.n	8002876 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002830:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2319      	movs	r3, #25
 800284e:	2201      	movs	r2, #1
 8002850:	4921      	ldr	r1, [pc, #132]	; (80028d8 <HAL_I2C_IsDeviceReady+0x254>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f844 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e036      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e02c      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002884:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800288e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2319      	movs	r3, #25
 8002896:	2201      	movs	r2, #1
 8002898:	490f      	ldr	r1, [pc, #60]	; (80028d8 <HAL_I2C_IsDeviceReady+0x254>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f820 	bl	80028e0 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e012      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f4ff af32 	bcc.w	800271e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	00100002 	.word	0x00100002
 80028dc:	ffff0000 	.word	0xffff0000

080028e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f0:	e025      	b.n	800293e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d021      	beq.n	800293e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe ff0b 	bl	8001714 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e023      	b.n	8002986 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10d      	bne.n	8002964 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	e00c      	b.n	800297e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4013      	ands	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	429a      	cmp	r2, r3
 8002982:	d0b6      	beq.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e267      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d075      	beq.n	8002a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d00c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ba:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c6:	4b82      	ldr	r3, [pc, #520]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d2:	d10b      	bne.n	80029ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	4b7e      	ldr	r3, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d05b      	beq.n	8002a98 <HAL_RCC_OscConfig+0x108>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d157      	bne.n	8002a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e242      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d106      	bne.n	8002a04 <HAL_RCC_OscConfig+0x74>
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xb0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x98>
 8002a0e:	4b70      	ldr	r3, [pc, #448]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6f      	ldr	r2, [pc, #444]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6c      	ldr	r2, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xb0>
 8002a28:	4b69      	ldr	r3, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a68      	ldr	r2, [pc, #416]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a65      	ldr	r2, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe64 	bl	8001714 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fe60 	bl	8001714 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e207      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xc0>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fe50 	bl	8001714 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fe4c 	bl	8001714 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1f3      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0xe8>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d063      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002abe:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x152>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1c7      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4937      	ldr	r1, [pc, #220]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	e03a      	b.n	8002b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x244>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fe05 	bl	8001714 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fe01 	bl	8001714 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1a8      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4925      	ldr	r1, [pc, #148]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x244>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fde4 	bl	8001714 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fde0 	bl	8001714 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e187      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_RCC_OscConfig+0x248>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fdc4 	bl	8001714 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fdc0 	bl	8001714 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e167      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x200>
 8002bae:	e01b      	b.n	8002be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x248>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fdad 	bl	8001714 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	e00e      	b.n	8002bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fda9 	bl	8001714 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d907      	bls.n	8002bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e150      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ea      	bne.n	8002bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8097 	beq.w	8002d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4b81      	ldr	r3, [pc, #516]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b7d      	ldr	r3, [pc, #500]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a7c      	ldr	r2, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b7a      	ldr	r3, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b77      	ldr	r3, [pc, #476]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b74      	ldr	r3, [pc, #464]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a73      	ldr	r2, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fd69 	bl	8001714 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe fd65 	bl	8001714 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e10c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2ea>
 8002c6c:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a63      	ldr	r2, [pc, #396]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x324>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x30c>
 8002c82:	4b5f      	ldr	r3, [pc, #380]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a5e      	ldr	r2, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	4b5c      	ldr	r3, [pc, #368]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a5b      	ldr	r2, [pc, #364]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x324>
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a54      	ldr	r2, [pc, #336]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002cae:	f023 0304 	bic.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd2a 	bl	8001714 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fd26 	bl	8001714 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0cb      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ee      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x334>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fd14 	bl	8001714 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fd10 	bl	8001714 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0b5      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a38      	ldr	r2, [pc, #224]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a1 	beq.w	8002e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d05c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d141      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fce4 	bl	8001714 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fce0 	bl	8001714 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e087      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	491b      	ldr	r1, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fcb9 	bl	8001714 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fcb5 	bl	8001714 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e05c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x416>
 8002dc4:	e054      	b.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fca2 	bl	8001714 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fc9e 	bl	8001714 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e045      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x444>
 8002df2:	e03d      	b.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e038      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
 8002e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x4ec>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d028      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d121      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d11a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0cc      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d90c      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b8      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494d      	ldr	r1, [pc, #308]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d044      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d119      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e06f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e067      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4934      	ldr	r1, [pc, #208]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fbd0 	bl	8001714 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fbcc 	bl	8001714 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d20c      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4916      	ldr	r1, [pc, #88]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003006:	f000 f821 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490a      	ldr	r1, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fb30 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	0800d60c 	.word	0x0800d60c
 8003044:	20000000 	.word	0x20000000
 8003048:	20000008 	.word	0x20000008

0800304c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b094      	sub	sp, #80	; 0x50
 8003052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	647b      	str	r3, [r7, #68]	; 0x44
 8003058:	2300      	movs	r3, #0
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d00d      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x40>
 8003070:	2b08      	cmp	r3, #8
 8003072:	f200 80e1 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x34>
 800307a:	2b04      	cmp	r3, #4
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x3a>
 800307e:	e0db      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003084:	e0db      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_GetSysClockFreq+0x208>)
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308a:	e0d8      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
 80030b6:	2300      	movs	r3, #0
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4621      	mov	r1, r4
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	6139      	str	r1, [r7, #16]
 80030dc:	4629      	mov	r1, r5
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	ebb2 0801 	subs.w	r8, r2, r1
 8003104:	4659      	mov	r1, fp
 8003106:	eb63 0901 	sbc.w	r9, r3, r1
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311e:	4690      	mov	r8, r2
 8003120:	4699      	mov	r9, r3
 8003122:	4623      	mov	r3, r4
 8003124:	eb18 0303 	adds.w	r3, r8, r3
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	462b      	mov	r3, r5
 800312c:	eb49 0303 	adc.w	r3, r9, r3
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800313e:	4629      	mov	r1, r5
 8003140:	024b      	lsls	r3, r1, #9
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003148:	4621      	mov	r1, r4
 800314a:	024a      	lsls	r2, r1, #9
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
 8003156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800315c:	f7fd f890 	bl	8000280 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003168:	e058      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	2200      	movs	r2, #0
 8003172:	4618      	mov	r0, r3
 8003174:	4611      	mov	r1, r2
 8003176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	0159      	lsls	r1, r3, #5
 8003192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003196:	0150      	lsls	r0, r2, #5
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4641      	mov	r1, r8
 800319e:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a2:	4649      	mov	r1, r9
 80031a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031bc:	ebb2 040a 	subs.w	r4, r2, sl
 80031c0:	eb63 050b 	sbc.w	r5, r3, fp
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	464b      	mov	r3, r9
 80031e0:	eb45 0303 	adc.w	r3, r5, r3
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f2:	4629      	mov	r1, r5
 80031f4:	028b      	lsls	r3, r1, #10
 80031f6:	4621      	mov	r1, r4
 80031f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031fc:	4621      	mov	r1, r4
 80031fe:	028a      	lsls	r2, r1, #10
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003206:	2200      	movs	r2, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	61fa      	str	r2, [r7, #28]
 800320c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003210:	f7fd f836 	bl	8000280 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4613      	mov	r3, r2
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800322c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003236:	e002      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003240:	4618      	mov	r0, r3
 8003242:	3750      	adds	r7, #80	; 0x50
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	0800d61c 	.word	0x0800d61c

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800329c:	f7ff ffdc 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0b5b      	lsrs	r3, r3, #13
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	0800d61c 	.word	0x0800d61c

080032c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e022      	b.n	8003318 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fac5 	bl	8000874 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f814 	bl	8003320 <HAL_SD_InitCard>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00a      	b.n	8003318 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b08e      	sub	sp, #56	; 0x38
 8003324:	af04      	add	r7, sp, #16
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800333c:	2376      	movs	r3, #118	; 0x76
 800333e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681d      	ldr	r5, [r3, #0]
 8003344:	466c      	mov	r4, sp
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800334e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003358:	4628      	mov	r0, r5
 800335a:	f001 fb0b 	bl	8004974 <SDIO_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e04f      	b.n	8003410 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003370:	4b29      	ldr	r3, [pc, #164]	; (8003418 <HAL_SD_InitCard+0xf8>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fb32 	bl	80049e4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_SD_InitCard+0xf8>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003386:	2002      	movs	r0, #2
 8003388:	f7fe f9d0 	bl	800172c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fe11 	bl	8003fb4 <SD_PowerON>
 8003392:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e02e      	b.n	8003410 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fd30 	bl	8003e18 <SD_InitCard>
 80033b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e01b      	b.n	8003410 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fb91 	bl	8004b08 <SDMMC_CmdBlockLength>
 80033e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00f      	beq.n	800340e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_SD_InitCard+0xfc>)
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bdb0      	pop	{r4, r5, r7, pc}
 8003418:	422580a0 	.word	0x422580a0
 800341c:	004005ff 	.word	0x004005ff

08003420 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08c      	sub	sp, #48	; 0x30
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0c0      	b.n	80035ca <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	f040 80b9 	bne.w	80035c8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800345c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	429a      	cmp	r2, r3
 8003468:	d907      	bls.n	800347a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0a7      	b.n	80035ca <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a4b      	ldr	r2, [pc, #300]	; (80035d8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80034ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2200      	movs	r2, #0
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3380      	adds	r3, #128	; 0x80
 80034e4:	4619      	mov	r1, r3
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	025b      	lsls	r3, r3, #9
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	f7fe fb01 	bl	8001af4 <HAL_DMA_Start_IT>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d017      	beq.n	8003528 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003506:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a33      	ldr	r2, [pc, #204]	; (80035dc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e050      	b.n	80035ca <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003528:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	2b01      	cmp	r3, #1
 8003534:	d002      	beq.n	800353c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	025b      	lsls	r3, r3, #9
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003548:	2390      	movs	r3, #144	; 0x90
 800354a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800354c:	2302      	movs	r3, #2
 800354e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003554:	2301      	movs	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f107 0210 	add.w	r2, r7, #16
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 faa4 	bl	8004ab0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d90a      	bls.n	8003584 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2282      	movs	r2, #130	; 0x82
 8003572:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fb08 	bl	8004b90 <SDMMC_CmdReadMultiBlock>
 8003580:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003582:	e009      	b.n	8003598 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2281      	movs	r2, #129	; 0x81
 8003588:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003590:	4618      	mov	r0, r3
 8003592:	f001 fadb 	bl	8004b4c <SDMMC_CmdReadSingleBlock>
 8003596:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e002      	b.n	80035ca <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3730      	adds	r7, #48	; 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	08003d03 	.word	0x08003d03
 80035d8:	08003d75 	.word	0x08003d75
 80035dc:	004005ff 	.word	0x004005ff
 80035e0:	4225858c 	.word	0x4225858c

080035e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08c      	sub	sp, #48	; 0x30
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0c5      	b.n	8003798 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 80be 	bne.w	8003796 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	441a      	add	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	429a      	cmp	r2, r3
 800362c:	d907      	bls.n	800363e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0ac      	b.n	8003798 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2203      	movs	r2, #3
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	4a4e      	ldr	r2, [pc, #312]	; (80037a0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003670:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	2200      	movs	r2, #0
 8003678:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	2b01      	cmp	r3, #1
 8003680:	d002      	beq.n	8003688 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	025b      	lsls	r3, r3, #9
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d90a      	bls.n	80036a4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22a0      	movs	r2, #160	; 0xa0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fabc 	bl	8004c18 <SDMMC_CmdWriteMultiBlock>
 80036a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80036a2:	e009      	b.n	80036b8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2290      	movs	r2, #144	; 0x90
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fa8f 	bl	8004bd4 <SDMMC_CmdWriteSingleBlock>
 80036b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a39      	ldr	r2, [pc, #228]	; (80037a8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e059      	b.n	8003798 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80036e4:	4b31      	ldr	r3, [pc, #196]	; (80037ac <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3380      	adds	r3, #128	; 0x80
 800371a:	461a      	mov	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	025b      	lsls	r3, r3, #9
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	f7fe f9e7 	bl	8001af4 <HAL_DMA_Start_IT>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01c      	beq.n	8003766 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800373a:	f023 0302 	bic.w	r3, r3, #2
 800373e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e018      	b.n	8003798 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	025b      	lsls	r3, r3, #9
 8003770:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003772:	2390      	movs	r3, #144	; 0x90
 8003774:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800377a:	2300      	movs	r3, #0
 800377c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800377e:	2301      	movs	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f107 0210 	add.w	r2, r7, #16
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f98f 	bl	8004ab0 <SDIO_ConfigData>

      return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3730      	adds	r7, #48	; 0x30
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	08003cd9 	.word	0x08003cd9
 80037a4:	08003d75 	.word	0x08003d75
 80037a8:	004005ff 	.word	0x004005ff
 80037ac:	4225858c 	.word	0x4225858c

080037b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d2:	0f9b      	lsrs	r3, r3, #30
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f0:	0e1b      	lsrs	r3, r3, #24
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	b2da      	uxtb	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2da      	uxtb	r2, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003824:	0d1b      	lsrs	r3, r3, #20
 8003826:	b29a      	uxth	r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	b2da      	uxtb	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003842:	0bdb      	lsrs	r3, r3, #15
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003854:	0b9b      	lsrs	r3, r3, #14
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	b2da      	uxtb	r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003866:	0b5b      	lsrs	r3, r3, #13
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003878:	0b1b      	lsrs	r3, r3, #12
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	b2da      	uxtb	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2200      	movs	r2, #0
 800388a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	2b00      	cmp	r3, #0
 8003892:	d163      	bne.n	800395c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800389e:	4013      	ands	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80038a4:	0f92      	lsrs	r2, r2, #30
 80038a6:	431a      	orrs	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b0:	0edb      	lsrs	r3, r3, #27
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	0e1b      	lsrs	r3, r3, #24
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	0d5b      	lsrs	r3, r3, #21
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e6:	0c9b      	lsrs	r3, r3, #18
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f8:	0bdb      	lsrs	r3, r3, #15
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	b2da      	uxtb	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	7e1b      	ldrb	r3, [r3, #24]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	3302      	adds	r3, #2
 800391c:	2201      	movs	r2, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003926:	fb03 f202 	mul.w	r2, r3, r2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	7a1b      	ldrb	r3, [r3, #8]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	2201      	movs	r2, #1
 800393a:	409a      	lsls	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003948:	0a52      	lsrs	r2, r2, #9
 800394a:	fb03 f202 	mul.w	r2, r3, r2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003958:	661a      	str	r2, [r3, #96]	; 0x60
 800395a:	e031      	b.n	80039c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003960:	2b01      	cmp	r3, #1
 8003962:	d11d      	bne.n	80039a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	3301      	adds	r3, #1
 8003980:	029a      	lsls	r2, r3, #10
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003994:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	661a      	str	r2, [r3, #96]	; 0x60
 800399e:	e00f      	b.n	80039c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <HAL_SD_GetCardCSD+0x344>)
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e09d      	b.n	8003afc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c4:	0b9b      	lsrs	r3, r3, #14
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	09db      	lsrs	r3, r3, #7
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	0fdb      	lsrs	r3, r3, #31
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	0f5b      	lsrs	r3, r3, #29
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	0e9b      	lsrs	r3, r3, #26
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	0d9b      	lsrs	r3, r3, #22
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	0d5b      	lsrs	r3, r3, #21
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	0bdb      	lsrs	r3, r3, #15
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	0b9b      	lsrs	r3, r3, #14
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	0b5b      	lsrs	r3, r3, #13
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	0b1b      	lsrs	r3, r3, #12
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	0a9b      	lsrs	r3, r3, #10
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	004005ff 	.word	0x004005ff

08003b0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2203      	movs	r2, #3
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d02e      	beq.n	8003be2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d106      	bne.n	8003b9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
 8003b98:	e029      	b.n	8003bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fabc 	bl	8004120 <SD_WideBus_Enable>
 8003ba8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8003bb6:	e01a      	b.n	8003bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 faf9 	bl	80041b6 <SD_WideBus_Disable>
 8003bc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8003bd2:	e00c      	b.n	8003bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
 8003be0:	e005      	b.n	8003bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c0c:	e01f      	b.n	8003c4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681d      	ldr	r5, [r3, #0]
 8003c34:	466c      	mov	r4, sp
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 fe93 	bl	8004974 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 ff56 	bl	8004b08 <SDMMC_CmdBlockLength>
 8003c5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bdb0      	pop	{r4, r5, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	004005ff 	.word	0x004005ff

08003c98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa10 	bl	80040d0 <SD_SendStatus>
 8003cb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	0a5b      	lsrs	r3, r3, #9
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003cce:	693b      	ldr	r3, [r7, #16]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	2b82      	cmp	r3, #130	; 0x82
 8003d16:	d111      	bne.n	8003d3c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 ff9d 	bl	8004c5c <SDMMC_CmdStopTransfer>
 8003d22:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff fd3a 	bl	80037b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0208 	bic.w	r2, r2, #8
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f001 fbf9 	bl	800555c <HAL_SD_RxCpltCallback>
#endif
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fe f898 	bl	8001eb8 <HAL_DMA_GetError>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d03e      	beq.n	8003e0c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d002      	beq.n	8003daa <SD_DMAError+0x36>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d12d      	bne.n	8003e06 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <SD_DMAError+0xa0>)
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003dc0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f7ff ff62 	bl	8003c98 <HAL_SD_GetCardState>
 8003dd4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d002      	beq.n	8003de2 <SD_DMAError+0x6e>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d10a      	bne.n	8003df8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 ff38 	bl	8004c5c <SDMMC_CmdStopTransfer>
 8003dec:	4602      	mov	r2, r0
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	431a      	orrs	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff fcd2 	bl	80037b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	004005ff 	.word	0x004005ff

08003e18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b094      	sub	sp, #80	; 0x50
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e20:	2301      	movs	r3, #1
 8003e22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fde9 	bl	8004a00 <SDIO_GetPowerState>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e38:	e0b8      	b.n	8003fac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d02f      	beq.n	8003ea2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f812 	bl	8004e70 <SDMMC_CmdSendCID>
 8003e4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <SD_InitCard+0x40>
    {
      return errorstate;
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	e0a9      	b.n	8003fac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fe13 	bl	8004a8a <SDIO_GetResponse>
 8003e64:	4602      	mov	r2, r0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2104      	movs	r1, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fe0a 	bl	8004a8a <SDIO_GetResponse>
 8003e76:	4602      	mov	r2, r0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2108      	movs	r1, #8
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fe01 	bl	8004a8a <SDIO_GetResponse>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	210c      	movs	r1, #12
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fdf8 	bl	8004a8a <SDIO_GetResponse>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d00d      	beq.n	8003ec6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f107 020e 	add.w	r2, r7, #14
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f818 	bl	8004eea <SDMMC_CmdSetRelAdd>
 8003eba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <SD_InitCard+0xae>
    {
      return errorstate;
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec4:	e072      	b.n	8003fac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d036      	beq.n	8003f3c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003ece:	89fb      	ldrh	r3, [r7, #14]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 ffe2 	bl	8004eac <SDMMC_CmdSendCSD>
 8003ee8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef2:	e05b      	b.n	8003fac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fdc5 	bl	8004a8a <SDIO_GetResponse>
 8003f00:	4602      	mov	r2, r0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fdbc 	bl	8004a8a <SDIO_GetResponse>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2108      	movs	r1, #8
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fdb3 	bl	8004a8a <SDIO_GetResponse>
 8003f24:	4602      	mov	r2, r0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	210c      	movs	r1, #12
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fdaa 	bl	8004a8a <SDIO_GetResponse>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2104      	movs	r1, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fda1 	bl	8004a8a <SDIO_GetResponse>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	0d1a      	lsrs	r2, r3, #20
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f50:	f107 0310 	add.w	r3, r7, #16
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fc34 	bl	80037c4 <HAL_SD_GetCardCSD>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f66:	e021      	b.n	8003fac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6819      	ldr	r1, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	2200      	movs	r2, #0
 8003f74:	461c      	mov	r4, r3
 8003f76:	4615      	mov	r5, r2
 8003f78:	4622      	mov	r2, r4
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	f000 fe8f 	bl	8004ca0 <SDMMC_CmdSelDesel>
 8003f82:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <SD_InitCard+0x176>
  {
    return errorstate;
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	e00e      	b.n	8003fac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681d      	ldr	r5, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	466c      	mov	r4, sp
 8003f96:	f103 0210 	add.w	r2, r3, #16
 8003f9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f000 fce5 	bl	8004974 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3740      	adds	r7, #64	; 0x40
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bdb0      	pop	{r4, r5, r7, pc}

08003fb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fe8a 	bl	8004ce6 <SDMMC_CmdGoIdleState>
 8003fd2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <SD_PowerON+0x2a>
  {
    return errorstate;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	e072      	b.n	80040c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fe9d 	bl	8004d22 <SDMMC_CmdOperCond>
 8003fe8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fe73 	bl	8004ce6 <SDMMC_CmdGoIdleState>
 8004000:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e05b      	b.n	80040c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004016:	2b01      	cmp	r3, #1
 8004018:	d137      	bne.n	800408a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fe9d 	bl	8004d60 <SDMMC_CmdAppCommand>
 8004026:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02d      	beq.n	800408a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800402e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004032:	e047      	b.n	80040c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fe90 	bl	8004d60 <SDMMC_CmdAppCommand>
 8004040:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <SD_PowerON+0x98>
    {
      return errorstate;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	e03b      	b.n	80040c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	491e      	ldr	r1, [pc, #120]	; (80040cc <SD_PowerON+0x118>)
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fea6 	bl	8004da4 <SDMMC_CmdAppOperCommand>
 8004058:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004064:	e02e      	b.n	80040c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fd0c 	bl	8004a8a <SDIO_GetResponse>
 8004072:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	0fdb      	lsrs	r3, r3, #31
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <SD_PowerON+0xcc>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <SD_PowerON+0xce>
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]

    count++;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	3301      	adds	r3, #1
 8004088:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004090:	4293      	cmp	r3, r2
 8004092:	d802      	bhi.n	800409a <SD_PowerON+0xe6>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0cc      	beq.n	8004034 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d902      	bls.n	80040aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80040a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040a8:	e00c      	b.n	80040c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
 80040ba:	e002      	b.n	80040c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	c1100000 	.word	0xc1100000

080040d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80040e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040e4:	e018      	b.n	8004118 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f000 ff1a 	bl	8004f2c <SDMMC_CmdSendStatus>
 80040f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	e009      	b.n	8004118 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fcbd 	bl	8004a8a <SDIO_GetResponse>
 8004110:	4602      	mov	r2, r0
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fca7 	bl	8004a8a <SDIO_GetResponse>
 800413c:	4603      	mov	r3, r0
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004146:	d102      	bne.n	800414e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800414c:	e02f      	b.n	80041ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800414e:	f107 030c 	add.w	r3, r7, #12
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f879 	bl	800424c <SD_FindSCR>
 800415a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	e023      	b.n	80041ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01c      	beq.n	80041aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f000 fdef 	bl	8004d60 <SDMMC_CmdAppCommand>
 8004182:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	e00f      	b.n	80041ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2102      	movs	r1, #2
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fe28 	bl	8004dea <SDMMC_CmdBusWidth>
 800419a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	e003      	b.n	80041ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e001      	b.n	80041ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fc5c 	bl	8004a8a <SDIO_GetResponse>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041dc:	d102      	bne.n	80041e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80041de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041e2:	e02f      	b.n	8004244 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80041e4:	f107 030c 	add.w	r3, r7, #12
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f82e 	bl	800424c <SD_FindSCR>
 80041f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	e023      	b.n	8004244 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01c      	beq.n	8004240 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fda4 	bl	8004d60 <SDMMC_CmdAppCommand>
 8004218:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	e00f      	b.n	8004244 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fddd 	bl	8004dea <SDMMC_CmdBusWidth>
 8004230:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	e003      	b.n	8004244 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800423c:	2300      	movs	r3, #0
 800423e:	e001      	b.n	8004244 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004240:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800424c:	b590      	push	{r4, r7, lr}
 800424e:	b08f      	sub	sp, #60	; 0x3c
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004256:	f7fd fa5d 	bl	8001714 <HAL_GetTick>
 800425a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2108      	movs	r1, #8
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fc48 	bl	8004b08 <SDMMC_CmdBlockLength>
 8004278:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	e0b2      	b.n	80043ea <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f000 fd65 	bl	8004d60 <SDMMC_CmdAppCommand>
 8004296:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	e0a3      	b.n	80043ea <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80042a8:	2308      	movs	r3, #8
 80042aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80042ac:	2330      	movs	r3, #48	; 0x30
 80042ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80042b0:	2302      	movs	r3, #2
 80042b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f107 0210 	add.w	r2, r7, #16
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fbf2 	bl	8004ab0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fdac 	bl	8004e2e <SDMMC_CmdSendSCR>
 80042d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02a      	beq.n	8004334 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	e083      	b.n	80043ea <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00f      	beq.n	8004310 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	f107 0208 	add.w	r2, r7, #8
 80042fc:	18d4      	adds	r4, r2, r3
 80042fe:	4608      	mov	r0, r1
 8004300:	f000 fb63 	bl	80049ca <SDIO_ReadFIFO>
 8004304:	4603      	mov	r3, r0
 8004306:	6023      	str	r3, [r4, #0]
      index++;
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	3301      	adds	r3, #1
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
 800430e:	e006      	b.n	800431e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d012      	beq.n	8004344 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800431e:	f7fd f9f9 	bl	8001714 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d102      	bne.n	8004334 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800432e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004332:	e05a      	b.n	80043ea <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0cf      	beq.n	80042e2 <SD_FindSCR+0x96>
 8004342:	e000      	b.n	8004346 <SD_FindSCR+0xfa>
      break;
 8004344:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2208      	movs	r2, #8
 800435a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800435c:	2308      	movs	r3, #8
 800435e:	e044      	b.n	80043ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2202      	movs	r2, #2
 8004374:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004376:	2302      	movs	r3, #2
 8004378:	e037      	b.n	80043ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2220      	movs	r2, #32
 800438e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004390:	2320      	movs	r3, #32
 8004392:	e02a      	b.n	80043ea <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f240 523a 	movw	r2, #1338	; 0x53a
 800439c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	061a      	lsls	r2, r3, #24
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80043b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	601a      	str	r2, [r3, #0]
    scr++;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	3304      	adds	r3, #4
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	061a      	lsls	r2, r3, #24
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	0e1b      	lsrs	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	373c      	adds	r7, #60	; 0x3c
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd90      	pop	{r4, r7, pc}

080043f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e03f      	b.n	8004484 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fc fb15 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2224      	movs	r2, #36	; 0x24
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004434:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f828 	bl	800448c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800444a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800445a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b0c0      	sub	sp, #256	; 0x100
 8004492:	af00      	add	r7, sp, #0
 8004494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	68d9      	ldr	r1, [r3, #12]
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	ea40 0301 	orr.w	r3, r0, r1
 80044b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044e4:	f021 010c 	bic.w	r1, r1, #12
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044f2:	430b      	orrs	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	6999      	ldr	r1, [r3, #24]
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	ea40 0301 	orr.w	r3, r0, r1
 8004512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b8f      	ldr	r3, [pc, #572]	; (8004758 <UART_SetConfig+0x2cc>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d005      	beq.n	800452c <UART_SetConfig+0xa0>
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b8d      	ldr	r3, [pc, #564]	; (800475c <UART_SetConfig+0x2d0>)
 8004528:	429a      	cmp	r2, r3
 800452a:	d104      	bne.n	8004536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7fe feb4 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8004530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004534:	e003      	b.n	800453e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004536:	f7fe fe9b 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 800453a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004548:	f040 810c 	bne.w	8004764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800455a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	1891      	adds	r1, r2, r2
 8004564:	65b9      	str	r1, [r7, #88]	; 0x58
 8004566:	415b      	adcs	r3, r3
 8004568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800456e:	4621      	mov	r1, r4
 8004570:	eb12 0801 	adds.w	r8, r2, r1
 8004574:	4629      	mov	r1, r5
 8004576:	eb43 0901 	adc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800459c:	462b      	mov	r3, r5
 800459e:	eb49 0303 	adc.w	r3, r9, r3
 80045a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045ba:	460b      	mov	r3, r1
 80045bc:	18db      	adds	r3, r3, r3
 80045be:	653b      	str	r3, [r7, #80]	; 0x50
 80045c0:	4613      	mov	r3, r2
 80045c2:	eb42 0303 	adc.w	r3, r2, r3
 80045c6:	657b      	str	r3, [r7, #84]	; 0x54
 80045c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045d0:	f7fb fe56 	bl	8000280 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4b61      	ldr	r3, [pc, #388]	; (8004760 <UART_SetConfig+0x2d4>)
 80045da:	fba3 2302 	umull	r2, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	011c      	lsls	r4, r3, #4
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80045fc:	415b      	adcs	r3, r3
 80045fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004604:	4641      	mov	r1, r8
 8004606:	eb12 0a01 	adds.w	sl, r2, r1
 800460a:	4649      	mov	r1, r9
 800460c:	eb43 0b01 	adc.w	fp, r3, r1
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800461c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004624:	4692      	mov	sl, r2
 8004626:	469b      	mov	fp, r3
 8004628:	4643      	mov	r3, r8
 800462a:	eb1a 0303 	adds.w	r3, sl, r3
 800462e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004632:	464b      	mov	r3, r9
 8004634:	eb4b 0303 	adc.w	r3, fp, r3
 8004638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800464c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004650:	460b      	mov	r3, r1
 8004652:	18db      	adds	r3, r3, r3
 8004654:	643b      	str	r3, [r7, #64]	; 0x40
 8004656:	4613      	mov	r3, r2
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
 800465e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004666:	f7fb fe0b 	bl	8000280 <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4611      	mov	r1, r2
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <UART_SetConfig+0x2d4>)
 8004672:	fba3 2301 	umull	r2, r3, r3, r1
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2264      	movs	r2, #100	; 0x64
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	1acb      	subs	r3, r1, r3
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <UART_SetConfig+0x2d4>)
 8004688:	fba3 2302 	umull	r2, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004694:	441c      	add	r4, r3
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80046b0:	415b      	adcs	r3, r3
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046b8:	4641      	mov	r1, r8
 80046ba:	1851      	adds	r1, r2, r1
 80046bc:	6339      	str	r1, [r7, #48]	; 0x30
 80046be:	4649      	mov	r1, r9
 80046c0:	414b      	adcs	r3, r1
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046d0:	4659      	mov	r1, fp
 80046d2:	00cb      	lsls	r3, r1, #3
 80046d4:	4651      	mov	r1, sl
 80046d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046da:	4651      	mov	r1, sl
 80046dc:	00ca      	lsls	r2, r1, #3
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	4642      	mov	r2, r8
 80046e6:	189b      	adds	r3, r3, r2
 80046e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046ec:	464b      	mov	r3, r9
 80046ee:	460a      	mov	r2, r1
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800470c:	460b      	mov	r3, r1
 800470e:	18db      	adds	r3, r3, r3
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	4613      	mov	r3, r2
 8004714:	eb42 0303 	adc.w	r3, r2, r3
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800471e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004722:	f7fb fdad 	bl	8000280 <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <UART_SetConfig+0x2d4>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	; 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a08      	ldr	r2, [pc, #32]	; (8004760 <UART_SetConfig+0x2d4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 0207 	and.w	r2, r3, #7
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4422      	add	r2, r4
 8004752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004754:	e106      	b.n	8004964 <UART_SetConfig+0x4d8>
 8004756:	bf00      	nop
 8004758:	40011000 	.word	0x40011000
 800475c:	40011400 	.word	0x40011400
 8004760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800476e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004776:	4642      	mov	r2, r8
 8004778:	464b      	mov	r3, r9
 800477a:	1891      	adds	r1, r2, r2
 800477c:	6239      	str	r1, [r7, #32]
 800477e:	415b      	adcs	r3, r3
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004786:	4641      	mov	r1, r8
 8004788:	1854      	adds	r4, r2, r1
 800478a:	4649      	mov	r1, r9
 800478c:	eb43 0501 	adc.w	r5, r3, r1
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	00eb      	lsls	r3, r5, #3
 800479a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479e:	00e2      	lsls	r2, r4, #3
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	4643      	mov	r3, r8
 80047a6:	18e3      	adds	r3, r4, r3
 80047a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047ac:	464b      	mov	r3, r9
 80047ae:	eb45 0303 	adc.w	r3, r5, r3
 80047b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047d2:	4629      	mov	r1, r5
 80047d4:	008b      	lsls	r3, r1, #2
 80047d6:	4621      	mov	r1, r4
 80047d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047dc:	4621      	mov	r1, r4
 80047de:	008a      	lsls	r2, r1, #2
 80047e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047e4:	f7fb fd4c 	bl	8000280 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4b60      	ldr	r3, [pc, #384]	; (8004970 <UART_SetConfig+0x4e4>)
 80047ee:	fba3 2302 	umull	r2, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	011c      	lsls	r4, r3, #4
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	61b9      	str	r1, [r7, #24]
 8004810:	415b      	adcs	r3, r3
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6139      	str	r1, [r7, #16]
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	67bb      	str	r3, [r7, #120]	; 0x78
 8004862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004870:	4649      	mov	r1, r9
 8004872:	008b      	lsls	r3, r1, #2
 8004874:	4641      	mov	r1, r8
 8004876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487a:	4641      	mov	r1, r8
 800487c:	008a      	lsls	r2, r1, #2
 800487e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004882:	f7fb fcfd 	bl	8000280 <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4611      	mov	r1, r2
 800488c:	4b38      	ldr	r3, [pc, #224]	; (8004970 <UART_SetConfig+0x4e4>)
 800488e:	fba3 2301 	umull	r2, r3, r3, r1
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2264      	movs	r2, #100	; 0x64
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	1acb      	subs	r3, r1, r3
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	3332      	adds	r3, #50	; 0x32
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <UART_SetConfig+0x4e4>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ac:	441c      	add	r4, r3
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	673b      	str	r3, [r7, #112]	; 0x70
 80048b6:	677a      	str	r2, [r7, #116]	; 0x74
 80048b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	415b      	adcs	r3, r3
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048cc:	4641      	mov	r1, r8
 80048ce:	1851      	adds	r1, r2, r1
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	4649      	mov	r1, r9
 80048d4:	414b      	adcs	r3, r1
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048e4:	4659      	mov	r1, fp
 80048e6:	00cb      	lsls	r3, r1, #3
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ee:	4651      	mov	r1, sl
 80048f0:	00ca      	lsls	r2, r1, #3
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	4642      	mov	r2, r8
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80048fe:	464b      	mov	r3, r9
 8004900:	460a      	mov	r2, r1
 8004902:	eb42 0303 	adc.w	r3, r2, r3
 8004906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	663b      	str	r3, [r7, #96]	; 0x60
 8004912:	667a      	str	r2, [r7, #100]	; 0x64
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004920:	4649      	mov	r1, r9
 8004922:	008b      	lsls	r3, r1, #2
 8004924:	4641      	mov	r1, r8
 8004926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492a:	4641      	mov	r1, r8
 800492c:	008a      	lsls	r2, r1, #2
 800492e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004932:	f7fb fca5 	bl	8000280 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <UART_SetConfig+0x4e4>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a08      	ldr	r2, [pc, #32]	; (8004970 <UART_SetConfig+0x4e4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 020f 	and.w	r2, r3, #15
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4422      	add	r2, r4
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	bf00      	nop
 8004966:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800496a:	46bd      	mov	sp, r7
 800496c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004970:	51eb851f 	.word	0x51eb851f

08004974 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004974:	b084      	sub	sp, #16
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	f107 001c 	add.w	r0, r7, #28
 8004982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800498a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800498c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800498e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004992:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004996:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800499a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800499e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80049ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	b004      	add	sp, #16
 80049c8:	4770      	bx	lr

080049ca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2203      	movs	r2, #3
 80049f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a3a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004a40:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004a46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a56:	f023 030f 	bic.w	r3, r3, #15
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	b2db      	uxtb	r3, r3
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3314      	adds	r3, #20
 8004a98:	461a      	mov	r2, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
}  
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ad6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004adc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004ae2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0

}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004b16:	2310      	movs	r3, #16
 8004b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b1a:	2340      	movs	r3, #64	; 0x40
 8004b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b28:	f107 0308 	add.w	r3, r7, #8
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff ff74 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b38:	2110      	movs	r1, #16
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa18 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b42:	69fb      	ldr	r3, [r7, #28]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004b5a:	2311      	movs	r3, #17
 8004b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b5e:	2340      	movs	r3, #64	; 0x40
 8004b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b6c:	f107 0308 	add.w	r3, r7, #8
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ff52 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7c:	2111      	movs	r1, #17
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9f6 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b86:	69fb      	ldr	r3, [r7, #28]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3720      	adds	r7, #32
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004b9e:	2312      	movs	r3, #18
 8004ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ff30 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc0:	2112      	movs	r1, #18
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f9d4 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bca:	69fb      	ldr	r3, [r7, #28]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004be2:	2318      	movs	r3, #24
 8004be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004be6:	2340      	movs	r3, #64	; 0x40
 8004be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bf4:	f107 0308 	add.w	r3, r7, #8
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff0e 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	2118      	movs	r1, #24
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9b2 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004c0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004c26:	2319      	movs	r3, #25
 8004c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c2a:	2340      	movs	r3, #64	; 0x40
 8004c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff feec 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c48:	2119      	movs	r1, #25
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f990 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c52:	69fb      	ldr	r3, [r7, #28]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004c68:	230c      	movs	r3, #12
 8004c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff fecb 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <SDMMC_CmdStopTransfer+0x40>)
 8004c88:	210c      	movs	r1, #12
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f970 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c92:	69fb      	ldr	r3, [r7, #28]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	05f5e100 	.word	0x05f5e100

08004ca0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004cb0:	2307      	movs	r3, #7
 8004cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cc2:	f107 0310 	add.w	r3, r7, #16
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fea7 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	2107      	movs	r1, #7
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f94b 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004cda:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b088      	sub	sp, #32
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d04:	f107 0308 	add.w	r3, r7, #8
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff fe86 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fb65 	bl	80053e0 <SDMMC_GetCmdError>
 8004d16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d18:	69fb      	ldr	r3, [r7, #28]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b088      	sub	sp, #32
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004d2a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004d2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004d30:	2308      	movs	r3, #8
 8004d32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d34:	2340      	movs	r3, #64	; 0x40
 8004d36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fe67 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 faf8 	bl	8005344 <SDMMC_GetCmdResp7>
 8004d54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d56:	69fb      	ldr	r3, [r7, #28]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004d6e:	2337      	movs	r3, #55	; 0x37
 8004d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d72:	2340      	movs	r3, #64	; 0x40
 8004d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d80:	f107 0308 	add.w	r3, r7, #8
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fe48 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	2137      	movs	r1, #55	; 0x37
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8ec 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004dba:	2329      	movs	r3, #41	; 0x29
 8004dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dbe:	2340      	movs	r3, #64	; 0x40
 8004dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fe22 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f9ff 	bl	80051dc <SDMMC_GetCmdResp3>
 8004dde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004de0:	69fb      	ldr	r3, [r7, #28]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004df8:	2306      	movs	r3, #6
 8004dfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e0a:	f107 0308 	add.w	r3, r7, #8
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fe03 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	2106      	movs	r1, #6
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f8a7 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004e22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e24:	69fb      	ldr	r3, [r7, #28]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004e3a:	2333      	movs	r3, #51	; 0x33
 8004e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e3e:	2340      	movs	r3, #64	; 0x40
 8004e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fde2 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	2133      	movs	r1, #51	; 0x33
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f886 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004e64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e66:	69fb      	ldr	r3, [r7, #28]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e80:	23c0      	movs	r3, #192	; 0xc0
 8004e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fdc1 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f956 	bl	800514c <SDMMC_GetCmdResp2>
 8004ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004eba:	2309      	movs	r3, #9
 8004ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ebe:	23c0      	movs	r3, #192	; 0xc0
 8004ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fda2 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f937 	bl	800514c <SDMMC_GetCmdResp2>
 8004ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b088      	sub	sp, #32
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004efc:	2340      	movs	r3, #64	; 0x40
 8004efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f0a:	f107 0308 	add.w	r3, r7, #8
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fd83 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	2103      	movs	r1, #3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f99c 	bl	8005258 <SDMMC_GetCmdResp6>
 8004f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f22:	69fb      	ldr	r3, [r7, #28]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004f3a:	230d      	movs	r3, #13
 8004f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f3e:	2340      	movs	r3, #64	; 0x40
 8004f40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fd62 	bl	8004a1c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	210d      	movs	r1, #13
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f806 	bl	8004f70 <SDMMC_GetCmdResp1>
 8004f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f66:	69fb      	ldr	r3, [r7, #28]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f7e:	4b70      	ldr	r3, [pc, #448]	; (8005140 <SDMMC_GetCmdResp1+0x1d0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a70      	ldr	r2, [pc, #448]	; (8005144 <SDMMC_GetCmdResp1+0x1d4>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	0a5a      	lsrs	r2, r3, #9
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	61fa      	str	r2, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fa0:	e0c9      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ef      	beq.n	8004f92 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ea      	bne.n	8004f92 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fce:	2304      	movs	r3, #4
 8004fd0:	e0b1      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0a6      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22c5      	movs	r2, #197	; 0xc5
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff fd3e 	bl	8004a70 <SDIO_GetCommandResponse>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d001      	beq.n	8005002 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e099      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005002:	2100      	movs	r1, #0
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff fd40 	bl	8004a8a <SDIO_GetResponse>
 800500a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4b4e      	ldr	r3, [pc, #312]	; (8005148 <SDMMC_GetCmdResp1+0x1d8>)
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005016:	2300      	movs	r3, #0
 8005018:	e08d      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	da02      	bge.n	8005026 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005024:	e087      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	e080      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	e079      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800504c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005050:	e071      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800505c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005060:	e069      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800506c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005070:	e061      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800507c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005080:	e059      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800508c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005090:	e051      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800509c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050a0:	e049      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80050ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050b0:	e041      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80050bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c0:	e039      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80050cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050d0:	e031      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80050dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050e0:	e029      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80050ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050f0:	e021      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80050fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005100:	e019      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800510c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005110:	e011      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800511c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005120:	e009      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800512c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005130:	e001      	b.n	8005136 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000000 	.word	0x20000000
 8005144:	10624dd3 	.word	0x10624dd3
 8005148:	fdffe008 	.word	0xfdffe008

0800514c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <SDMMC_GetCmdResp2+0x88>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <SDMMC_GetCmdResp2+0x8c>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0a5b      	lsrs	r3, r3, #9
 8005160:	f241 3288 	movw	r2, #5000	; 0x1388
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	60fa      	str	r2, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005178:	e026      	b.n	80051c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ea      	bne.n	800516a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2204      	movs	r2, #4
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051a6:	2304      	movs	r3, #4
 80051a8:	e00e      	b.n	80051c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051bc:	2301      	movs	r3, #1
 80051be:	e003      	b.n	80051c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	22c5      	movs	r2, #197	; 0xc5
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	20000000 	.word	0x20000000
 80051d8:	10624dd3 	.word	0x10624dd3

080051dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051e4:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <SDMMC_GetCmdResp3+0x74>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <SDMMC_GetCmdResp3+0x78>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	0a5b      	lsrs	r3, r3, #9
 80051f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	60fa      	str	r2, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005208:	e01b      	b.n	8005242 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ef      	beq.n	80051fa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ea      	bne.n	80051fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2204      	movs	r2, #4
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005236:	2304      	movs	r3, #4
 8005238:	e003      	b.n	8005242 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	22c5      	movs	r2, #197	; 0xc5
 800523e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000000 	.word	0x20000000
 8005254:	10624dd3 	.word	0x10624dd3

08005258 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	460b      	mov	r3, r1
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005266:	4b35      	ldr	r3, [pc, #212]	; (800533c <SDMMC_GetCmdResp6+0xe4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a35      	ldr	r2, [pc, #212]	; (8005340 <SDMMC_GetCmdResp6+0xe8>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	0a5b      	lsrs	r3, r3, #9
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	1e5a      	subs	r2, r3, #1
 8005280:	61fa      	str	r2, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800528a:	e052      	b.n	8005332 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ef      	beq.n	800527c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1ea      	bne.n	800527c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2204      	movs	r2, #4
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052b8:	2304      	movs	r3, #4
 80052ba:	e03a      	b.n	8005332 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e02f      	b.n	8005332 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff fbcc 	bl	8004a70 <SDIO_GetCommandResponse>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	7afb      	ldrb	r3, [r7, #11]
 80052de:	4293      	cmp	r3, r2
 80052e0:	d001      	beq.n	80052e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e025      	b.n	8005332 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	22c5      	movs	r2, #197	; 0xc5
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80052ec:	2100      	movs	r1, #0
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff fbcb 	bl	8004a8a <SDIO_GetResponse>
 80052f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800530a:	2300      	movs	r3, #0
 800530c:	e011      	b.n	8005332 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800531c:	e009      	b.n	8005332 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532c:	e001      	b.n	8005332 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800532e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000000 	.word	0x20000000
 8005340:	10624dd3 	.word	0x10624dd3

08005344 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800534c:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <SDMMC_GetCmdResp7+0x94>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <SDMMC_GetCmdResp7+0x98>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	0a5b      	lsrs	r3, r3, #9
 8005358:	f241 3288 	movw	r2, #5000	; 0x1388
 800535c:	fb02 f303 	mul.w	r3, r2, r3
 8005360:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1e5a      	subs	r2, r3, #1
 8005366:	60fa      	str	r2, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800536c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005370:	e02c      	b.n	80053cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0ef      	beq.n	8005362 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ea      	bne.n	8005362 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2204      	movs	r2, #4
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800539e:	2304      	movs	r3, #4
 80053a0:	e014      	b.n	80053cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d004      	beq.n	80053b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e009      	b.n	80053cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80053ca:	2300      	movs	r3, #0
  
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	20000000 	.word	0x20000000
 80053dc:	10624dd3 	.word	0x10624dd3

080053e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <SDMMC_GetCmdError+0x50>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a11      	ldr	r2, [pc, #68]	; (8005434 <SDMMC_GetCmdError+0x54>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0a5b      	lsrs	r3, r3, #9
 80053f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f8:	fb02 f303 	mul.w	r3, r2, r3
 80053fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1e5a      	subs	r2, r3, #1
 8005402:	60fa      	str	r2, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005408:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800540c:	e009      	b.n	8005422 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f1      	beq.n	80053fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	22c5      	movs	r2, #197	; 0xc5
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	20000000 	.word	0x20000000
 8005434:	10624dd3 	.word	0x10624dd3

08005438 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800543c:	4904      	ldr	r1, [pc, #16]	; (8005450 <MX_FATFS_Init+0x18>)
 800543e:	4805      	ldr	r0, [pc, #20]	; (8005454 <MX_FATFS_Init+0x1c>)
 8005440:	f003 f926 	bl	8008690 <FATFS_LinkDriver>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <MX_FATFS_Init+0x20>)
 800544a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800544c:	bf00      	nop
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200002f0 	.word	0x200002f0
 8005454:	0800d698 	.word	0x0800d698
 8005458:	200002ec 	.word	0x200002ec

0800545c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005460:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005476:	f000 f87b 	bl	8005570 <BSP_SD_IsDetected>
 800547a:	4603      	mov	r3, r0
 800547c:	2b01      	cmp	r3, #1
 800547e:	d001      	beq.n	8005484 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e012      	b.n	80054aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005484:	480b      	ldr	r0, [pc, #44]	; (80054b4 <BSP_SD_Init+0x48>)
 8005486:	f7fd ff1b 	bl	80032c0 <HAL_SD_Init>
 800548a:	4603      	mov	r3, r0
 800548c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005498:	4806      	ldr	r0, [pc, #24]	; (80054b4 <BSP_SD_Init+0x48>)
 800549a:	f7fe fb63 	bl	8003b64 <HAL_SD_ConfigWideBusOperation>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80054a8:	79fb      	ldrb	r3, [r7, #7]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200000d4 	.word	0x200000d4

080054b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	4806      	ldr	r0, [pc, #24]	; (80054e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80054d0:	f7fd ffa6 	bl	8003420 <HAL_SD_ReadBlocks_DMA>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	200000d4 	.word	0x200000d4

080054ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	4806      	ldr	r0, [pc, #24]	; (800551c <BSP_SD_WriteBlocks_DMA+0x30>)
 8005504:	f7fe f86e 	bl	80035e4 <HAL_SD_WriteBlocks_DMA>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	200000d4 	.word	0x200000d4

08005520 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005524:	4805      	ldr	r0, [pc, #20]	; (800553c <BSP_SD_GetCardState+0x1c>)
 8005526:	f7fe fbb7 	bl	8003c98 <HAL_SD_GetCardState>
 800552a:	4603      	mov	r3, r0
 800552c:	2b04      	cmp	r3, #4
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
}
 8005536:	4618      	mov	r0, r3
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	200000d4 	.word	0x200000d4

08005540 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4803      	ldr	r0, [pc, #12]	; (8005558 <BSP_SD_GetCardInfo+0x18>)
 800554c:	f7fe fade 	bl	8003b0c <HAL_SD_GetCardInfo>
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	200000d4 	.word	0x200000d4

0800555c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005564:	f000 f986 	bl	8005874 <BSP_SD_ReadCpltCallback>
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005576:	2301      	movs	r3, #1
 8005578:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	b2db      	uxtb	r3, r3
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005592:	f003 fa51 	bl	8008a38 <osKernelGetTickCount>
 8005596:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005598:	e006      	b.n	80055a8 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800559a:	f7ff ffc1 	bl	8005520 <BSP_SD_GetCardState>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	e009      	b.n	80055bc <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80055a8:	f003 fa46 	bl	8008a38 <osKernelGetTickCount>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d8f0      	bhi.n	800559a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <SD_CheckStatus+0x38>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80055d4:	f7ff ffa4 	bl	8005520 <BSP_SD_GetCardState>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d107      	bne.n	80055ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <SD_CheckStatus+0x38>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4b04      	ldr	r3, [pc, #16]	; (80055fc <SD_CheckStatus+0x38>)
 80055ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80055ee:	4b03      	ldr	r3, [pc, #12]	; (80055fc <SD_CheckStatus+0x38>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	2000000d 	.word	0x2000000d

08005600 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <SD_initialize+0x7c>)
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005610:	f003 f9ca 	bl	80089a8 <osKernelGetState>
 8005614:	4603      	mov	r3, r0
 8005616:	2b02      	cmp	r3, #2
 8005618:	d129      	bne.n	800566e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800561a:	f7ff ff27 	bl	800546c <BSP_SD_Init>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff ffcc 	bl	80055c4 <SD_CheckStatus>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <SD_initialize+0x7c>)
 8005632:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <SD_initialize+0x7c>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d017      	beq.n	800566e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <SD_initialize+0x80>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005646:	2200      	movs	r2, #0
 8005648:	2102      	movs	r1, #2
 800564a:	200a      	movs	r0, #10
 800564c:	f003 fbfa 	bl	8008e44 <osMessageQueueNew>
 8005650:	4603      	mov	r3, r0
 8005652:	4a0b      	ldr	r2, [pc, #44]	; (8005680 <SD_initialize+0x80>)
 8005654:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <SD_initialize+0x80>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d107      	bne.n	800566e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <SD_initialize+0x7c>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	b2da      	uxtb	r2, r3
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <SD_initialize+0x7c>)
 800566c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800566e:	4b03      	ldr	r3, [pc, #12]	; (800567c <SD_initialize+0x7c>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b2db      	uxtb	r3, r3
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2000000d 	.word	0x2000000d
 8005680:	200002f4 	.word	0x200002f4

08005684 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ff97 	bl	80055c4 <SD_CheckStatus>
 8005696:	4603      	mov	r3, r0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80056b4:	f247 5030 	movw	r0, #30000	; 0x7530
 80056b8:	f7ff ff67 	bl	800558a <SD_CheckStatusWithTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da01      	bge.n	80056c6 <SD_read+0x26>
  {
    return res;
 80056c2:	7ffb      	ldrb	r3, [r7, #31]
 80056c4:	e02f      	b.n	8005726 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	68b8      	ldr	r0, [r7, #8]
 80056cc:	f7ff fef4 	bl	80054b8 <BSP_SD_ReadBlocks_DMA>
 80056d0:	4603      	mov	r3, r0
 80056d2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80056d4:	7fbb      	ldrb	r3, [r7, #30]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d124      	bne.n	8005724 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <SD_read+0x90>)
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	f107 0112 	add.w	r1, r7, #18
 80056e2:	f247 5330 	movw	r3, #30000	; 0x7530
 80056e6:	2200      	movs	r2, #0
 80056e8:	f003 fc80 	bl	8008fec <osMessageQueueGet>
 80056ec:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d117      	bne.n	8005724 <SD_read+0x84>
 80056f4:	8a7b      	ldrh	r3, [r7, #18]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d114      	bne.n	8005724 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80056fa:	f003 f99d 	bl	8008a38 <osKernelGetTickCount>
 80056fe:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005700:	e007      	b.n	8005712 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005702:	f7ff ff0d 	bl	8005520 <BSP_SD_GetCardState>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <SD_read+0x72>
              {
                res = RES_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005710:	e008      	b.n	8005724 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8005712:	f003 f991 	bl	8008a38 <osKernelGetTickCount>
 8005716:	4602      	mov	r2, r0
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005720:	4293      	cmp	r3, r2
 8005722:	d9ee      	bls.n	8005702 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8005724:	7ffb      	ldrb	r3, [r7, #31]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200002f4 	.word	0x200002f4

08005734 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005748:	f247 5030 	movw	r0, #30000	; 0x7530
 800574c:	f7ff ff1d 	bl	800558a <SD_CheckStatusWithTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	da01      	bge.n	800575a <SD_write+0x26>
  {
    return res;
 8005756:	7ffb      	ldrb	r3, [r7, #31]
 8005758:	e02d      	b.n	80057b6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f7ff fec4 	bl	80054ec <BSP_SD_WriteBlocks_DMA>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d124      	bne.n	80057b4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <SD_write+0x8c>)
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	f107 0112 	add.w	r1, r7, #18
 8005772:	f247 5330 	movw	r3, #30000	; 0x7530
 8005776:	2200      	movs	r2, #0
 8005778:	f003 fc38 	bl	8008fec <osMessageQueueGet>
 800577c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d117      	bne.n	80057b4 <SD_write+0x80>
 8005784:	8a7b      	ldrh	r3, [r7, #18]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d114      	bne.n	80057b4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800578a:	f003 f955 	bl	8008a38 <osKernelGetTickCount>
 800578e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8005790:	e007      	b.n	80057a2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005792:	f7ff fec5 	bl	8005520 <BSP_SD_GetCardState>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <SD_write+0x6e>
          {
            res = RES_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	77fb      	strb	r3, [r7, #31]
            break;
 80057a0:	e008      	b.n	80057b4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80057a2:	f003 f949 	bl	8008a38 <osKernelGetTickCount>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d9ee      	bls.n	8005792 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80057b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200002f4 	.word	0x200002f4

080057c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08c      	sub	sp, #48	; 0x30
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	603a      	str	r2, [r7, #0]
 80057ce:	71fb      	strb	r3, [r7, #7]
 80057d0:	460b      	mov	r3, r1
 80057d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80057da:	4b25      	ldr	r3, [pc, #148]	; (8005870 <SD_ioctl+0xac>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <SD_ioctl+0x28>
 80057e8:	2303      	movs	r3, #3
 80057ea:	e03c      	b.n	8005866 <SD_ioctl+0xa2>

  switch (cmd)
 80057ec:	79bb      	ldrb	r3, [r7, #6]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d834      	bhi.n	800585c <SD_ioctl+0x98>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <SD_ioctl+0x34>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	08005809 	.word	0x08005809
 80057fc:	08005811 	.word	0x08005811
 8005800:	08005829 	.word	0x08005829
 8005804:	08005843 	.word	0x08005843
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800580e:	e028      	b.n	8005862 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005810:	f107 030c 	add.w	r3, r7, #12
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fe93 	bl	8005540 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005826:	e01c      	b.n	8005862 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fe87 	bl	8005540 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	b29a      	uxth	r2, r3
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005840:	e00f      	b.n	8005862 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005842:	f107 030c 	add.w	r3, r7, #12
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fe7a 	bl	8005540 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	0a5a      	lsrs	r2, r3, #9
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800585a:	e002      	b.n	8005862 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800585c:	2304      	movs	r3, #4
 800585e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005866:	4618      	mov	r0, r3
 8005868:	3730      	adds	r7, #48	; 0x30
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	2000000d 	.word	0x2000000d

08005874 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800587a:	2301      	movs	r3, #1
 800587c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <BSP_SD_ReadCpltCallback+0x20>)
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	1db9      	adds	r1, r7, #6
 8005884:	2300      	movs	r3, #0
 8005886:	2200      	movs	r2, #0
 8005888:	f003 fb50 	bl	8008f2c <osMessageQueuePut>
#endif
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200002f4 	.word	0x200002f4

08005898 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	4a08      	ldr	r2, [pc, #32]	; (80058c8 <disk_status+0x30>)
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	79fa      	ldrb	r2, [r7, #7]
 80058b0:	4905      	ldr	r1, [pc, #20]	; (80058c8 <disk_status+0x30>)
 80058b2:	440a      	add	r2, r1
 80058b4:	7a12      	ldrb	r2, [r2, #8]
 80058b6:	4610      	mov	r0, r2
 80058b8:	4798      	blx	r3
 80058ba:	4603      	mov	r3, r0
 80058bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20000320 	.word	0x20000320

080058cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <disk_initialize+0x48>)
 80058de:	5cd3      	ldrb	r3, [r2, r3]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d111      	bne.n	8005908 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <disk_initialize+0x48>)
 80058e8:	2101      	movs	r1, #1
 80058ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <disk_initialize+0x48>)
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	79fa      	ldrb	r2, [r7, #7]
 80058fa:	4906      	ldr	r1, [pc, #24]	; (8005914 <disk_initialize+0x48>)
 80058fc:	440a      	add	r2, r1
 80058fe:	7a12      	ldrb	r2, [r2, #8]
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000320 	.word	0x20000320

08005918 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <disk_read+0x3c>)
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	689c      	ldr	r4, [r3, #8]
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	4a07      	ldr	r2, [pc, #28]	; (8005954 <disk_read+0x3c>)
 8005938:	4413      	add	r3, r2
 800593a:	7a18      	ldrb	r0, [r3, #8]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	47a0      	blx	r4
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]
  return res;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	bd90      	pop	{r4, r7, pc}
 8005952:	bf00      	nop
 8005954:	20000320 	.word	0x20000320

08005958 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <disk_write+0x3c>)
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68dc      	ldr	r4, [r3, #12]
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	4a07      	ldr	r2, [pc, #28]	; (8005994 <disk_write+0x3c>)
 8005978:	4413      	add	r3, r2
 800597a:	7a18      	ldrb	r0, [r3, #8]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	47a0      	blx	r4
 8005984:	4603      	mov	r3, r0
 8005986:	75fb      	strb	r3, [r7, #23]
  return res;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
}
 800598a:	4618      	mov	r0, r3
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd90      	pop	{r4, r7, pc}
 8005992:	bf00      	nop
 8005994:	20000320 	.word	0x20000320

08005998 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	603a      	str	r2, [r7, #0]
 80059a2:	71fb      	strb	r3, [r7, #7]
 80059a4:	460b      	mov	r3, r1
 80059a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <disk_ioctl+0x38>)
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	79fa      	ldrb	r2, [r7, #7]
 80059b6:	4906      	ldr	r1, [pc, #24]	; (80059d0 <disk_ioctl+0x38>)
 80059b8:	440a      	add	r2, r1
 80059ba:	7a10      	ldrb	r0, [r2, #8]
 80059bc:	79b9      	ldrb	r1, [r7, #6]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	4798      	blx	r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000320 	.word	0x20000320

080059d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3301      	adds	r3, #1
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80059e4:	89fb      	ldrh	r3, [r7, #14]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	b21a      	sxth	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	b21b      	sxth	r3, r3
 80059f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80059f6:	89fb      	ldrh	r3, [r7, #14]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3303      	adds	r3, #3
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	3202      	adds	r2, #2
 8005a1c:	7812      	ldrb	r2, [r2, #0]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	3201      	adds	r2, #1
 8005a2a:	7812      	ldrb	r2, [r2, #0]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	7812      	ldrb	r2, [r2, #0]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	887a      	ldrh	r2, [r7, #2]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	887b      	ldrh	r3, [r7, #2]
 8005a64:	0a1b      	lsrs	r3, r3, #8
 8005a66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	1c53      	adds	r3, r2, #1
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	6179      	str	r1, [r7, #20]
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	607b      	str	r3, [r7, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f1      	bne.n	8005af2 <mem_cpy+0x1a>
	}
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b1a:	b480      	push	{r7}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	617a      	str	r2, [r7, #20]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f3      	bne.n	8005b2a <mem_set+0x10>
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b50:	b480      	push	{r7}
 8005b52:	b089      	sub	sp, #36	; 0x24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	61fa      	str	r2, [r7, #28]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	4619      	mov	r1, r3
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	61ba      	str	r2, [r7, #24]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	1acb      	subs	r3, r1, r3
 8005b7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <mem_cmp+0x40>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0eb      	beq.n	8005b68 <mem_cmp+0x18>

	return r;
 8005b90:	697b      	ldr	r3, [r7, #20]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ba8:	e002      	b.n	8005bb0 <chk_chr+0x12>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3301      	adds	r3, #1
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <chk_chr+0x26>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d1f2      	bne.n	8005baa <chk_chr+0xc>
	return *str;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <lock_fs+0x22>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f002 fe4f 	bl	800888a <ff_req_grant>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <lock_fs+0x22>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <lock_fs+0x24>
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <unlock_fs+0x2e>
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2b0c      	cmp	r3, #12
 8005c16:	d00a      	beq.n	8005c2e <unlock_fs+0x2e>
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	2b0b      	cmp	r3, #11
 8005c1c:	d007      	beq.n	8005c2e <unlock_fs+0x2e>
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	2b0f      	cmp	r3, #15
 8005c22:	d004      	beq.n	8005c2e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f002 fe43 	bl	80088b4 <ff_rel_grant>
	}
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e029      	b.n	8005ca0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <chk_lock+0xb4>)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	4413      	add	r3, r2
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01d      	beq.n	8005c96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c5a:	4a24      	ldr	r2, [pc, #144]	; (8005cec <chk_lock+0xb4>)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	4413      	add	r3, r2
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d116      	bne.n	8005c9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005c6c:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <chk_lock+0xb4>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d10c      	bne.n	8005c9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c80:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <chk_lock+0xb4>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	4413      	add	r3, r2
 8005c88:	3308      	adds	r3, #8
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d102      	bne.n	8005c9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c94:	e007      	b.n	8005ca6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005c96:	2301      	movs	r3, #1
 8005c98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d9d2      	bls.n	8005c4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d109      	bne.n	8005cc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <chk_lock+0x80>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d101      	bne.n	8005cbc <chk_lock+0x84>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e010      	b.n	8005cde <chk_lock+0xa6>
 8005cbc:	2312      	movs	r3, #18
 8005cbe:	e00e      	b.n	8005cde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <chk_lock+0xa0>
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <chk_lock+0xb4>)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	4413      	add	r3, r2
 8005cce:	330c      	adds	r3, #12
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd6:	d101      	bne.n	8005cdc <chk_lock+0xa4>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	e000      	b.n	8005cde <chk_lock+0xa6>
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000300 	.word	0x20000300

08005cf0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	e002      	b.n	8005d02 <enq_lock+0x12>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d806      	bhi.n	8005d16 <enq_lock+0x26>
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <enq_lock+0x40>)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	4413      	add	r3, r2
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f2      	bne.n	8005cfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000300 	.word	0x20000300

08005d34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e01f      	b.n	8005d84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005d44:	4a41      	ldr	r2, [pc, #260]	; (8005e4c <inc_lock+0x118>)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d113      	bne.n	8005d7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005d56:	4a3d      	ldr	r2, [pc, #244]	; (8005e4c <inc_lock+0x118>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3304      	adds	r3, #4
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d109      	bne.n	8005d7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005d6a:	4a38      	ldr	r2, [pc, #224]	; (8005e4c <inc_lock+0x118>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	4413      	add	r3, r2
 8005d72:	3308      	adds	r3, #8
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d006      	beq.n	8005d8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d9dc      	bls.n	8005d44 <inc_lock+0x10>
 8005d8a:	e000      	b.n	8005d8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005d8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d132      	bne.n	8005dfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e002      	b.n	8005da0 <inc_lock+0x6c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d806      	bhi.n	8005db4 <inc_lock+0x80>
 8005da6:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <inc_lock+0x118>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	4413      	add	r3, r2
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f2      	bne.n	8005d9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d101      	bne.n	8005dbe <inc_lock+0x8a>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e040      	b.n	8005e40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4922      	ldr	r1, [pc, #136]	; (8005e4c <inc_lock+0x118>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	440b      	add	r3, r1
 8005dca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	491e      	ldr	r1, [pc, #120]	; (8005e4c <inc_lock+0x118>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3304      	adds	r3, #4
 8005dda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	491a      	ldr	r1, [pc, #104]	; (8005e4c <inc_lock+0x118>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	440b      	add	r3, r1
 8005de8:	3308      	adds	r3, #8
 8005dea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <inc_lock+0x118>)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	4413      	add	r3, r2
 8005df4:	330c      	adds	r3, #12
 8005df6:	2200      	movs	r2, #0
 8005df8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <inc_lock+0xe0>
 8005e00:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <inc_lock+0x118>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	4413      	add	r3, r2
 8005e08:	330c      	adds	r3, #12
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <inc_lock+0xe0>
 8005e10:	2300      	movs	r3, #0
 8005e12:	e015      	b.n	8005e40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d108      	bne.n	8005e2c <inc_lock+0xf8>
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <inc_lock+0x118>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	4413      	add	r3, r2
 8005e22:	330c      	adds	r3, #12
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	3301      	adds	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	e001      	b.n	8005e30 <inc_lock+0xfc>
 8005e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e30:	4906      	ldr	r1, [pc, #24]	; (8005e4c <inc_lock+0x118>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	440b      	add	r3, r1
 8005e38:	330c      	adds	r3, #12
 8005e3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3301      	adds	r3, #1
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20000300 	.word	0x20000300

08005e50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d825      	bhi.n	8005eb0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005e64:	4a17      	ldr	r2, [pc, #92]	; (8005ec4 <dec_lock+0x74>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	4413      	add	r3, r2
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005e72:	89fb      	ldrh	r3, [r7, #14]
 8005e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e78:	d101      	bne.n	8005e7e <dec_lock+0x2e>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <dec_lock+0x3a>
 8005e84:	89fb      	ldrh	r3, [r7, #14]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005e8a:	4a0e      	ldr	r2, [pc, #56]	; (8005ec4 <dec_lock+0x74>)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	4413      	add	r3, r2
 8005e92:	330c      	adds	r3, #12
 8005e94:	89fa      	ldrh	r2, [r7, #14]
 8005e96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d105      	bne.n	8005eaa <dec_lock+0x5a>
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <dec_lock+0x74>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	4413      	add	r3, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	737b      	strb	r3, [r7, #13]
 8005eae:	e001      	b.n	8005eb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005eb4:	7b7b      	ldrb	r3, [r7, #13]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000300 	.word	0x20000300

08005ec8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e010      	b.n	8005ef8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <clear_lock+0x44>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	4413      	add	r3, r2
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d105      	bne.n	8005ef2 <clear_lock+0x2a>
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <clear_lock+0x44>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	4413      	add	r3, r2
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d9eb      	bls.n	8005ed6 <clear_lock+0xe>
	}
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	20000300 	.word	0x20000300

08005f10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d034      	beq.n	8005f8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7858      	ldrb	r0, [r3, #1]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005f34:	2301      	movs	r3, #1
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	f7ff fd0e 	bl	8005958 <disk_write>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
 8005f46:	e022      	b.n	8005f8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d217      	bcs.n	8005f8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	789b      	ldrb	r3, [r3, #2]
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	e010      	b.n	8005f88 <sync_window+0x78>
					wsect += fs->fsize;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	7858      	ldrb	r0, [r3, #1]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	f7ff fceb 	bl	8005958 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d8eb      	bhi.n	8005f66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d01b      	beq.n	8005fe8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff ffad 	bl	8005f10 <sync_window>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d113      	bne.n	8005fe8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7858      	ldrb	r0, [r3, #1]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005fca:	2301      	movs	r3, #1
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	f7ff fca3 	bl	8005918 <disk_read>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff87 	bl	8005f10 <sync_window>
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d159      	bne.n	80060c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d149      	bne.n	80060a8 <sync_fs+0xb4>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	791b      	ldrb	r3, [r3, #4]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d145      	bne.n	80060a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	899b      	ldrh	r3, [r3, #12]
 8006026:	461a      	mov	r2, r3
 8006028:	2100      	movs	r1, #0
 800602a:	f7ff fd76 	bl	8005b1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	333c      	adds	r3, #60	; 0x3c
 8006032:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006036:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fd05 	bl	8005a4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	333c      	adds	r3, #60	; 0x3c
 8006044:	4921      	ldr	r1, [pc, #132]	; (80060cc <sync_fs+0xd8>)
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fd1a 	bl	8005a80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	333c      	adds	r3, #60	; 0x3c
 8006050:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006054:	491e      	ldr	r1, [pc, #120]	; (80060d0 <sync_fs+0xdc>)
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fd12 	bl	8005a80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	333c      	adds	r3, #60	; 0x3c
 8006060:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f7ff fd08 	bl	8005a80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	333c      	adds	r3, #60	; 0x3c
 8006074:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f7ff fcfe 	bl	8005a80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7858      	ldrb	r0, [r3, #1]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800609c:	2301      	movs	r3, #1
 800609e:	f7ff fc5b 	bl	8005958 <disk_write>
			fs->fsi_flag = 0;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fc71 	bl	8005998 <disk_ioctl>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <sync_fs+0xcc>
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	41615252 	.word	0x41615252
 80060d0:	61417272 	.word	0x61417272

080060d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	3b02      	subs	r3, #2
 80060e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	3b02      	subs	r3, #2
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d301      	bcc.n	80060f4 <clust2sect+0x20>
 80060f0:	2300      	movs	r3, #0
 80060f2:	e008      	b.n	8006106 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	895b      	ldrh	r3, [r3, #10]
 80060f8:	461a      	mov	r2, r3
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	fb03 f202 	mul.w	r2, r3, r2
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006104:	4413      	add	r3, r2
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b086      	sub	sp, #24
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d904      	bls.n	8006132 <get_fat+0x20>
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d302      	bcc.n	8006138 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006132:	2301      	movs	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e0bb      	b.n	80062b0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006138:	f04f 33ff 	mov.w	r3, #4294967295
 800613c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b03      	cmp	r3, #3
 8006144:	f000 8083 	beq.w	800624e <get_fat+0x13c>
 8006148:	2b03      	cmp	r3, #3
 800614a:	f300 80a7 	bgt.w	800629c <get_fat+0x18a>
 800614e:	2b01      	cmp	r3, #1
 8006150:	d002      	beq.n	8006158 <get_fat+0x46>
 8006152:	2b02      	cmp	r3, #2
 8006154:	d056      	beq.n	8006204 <get_fat+0xf2>
 8006156:	e0a1      	b.n	800629c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	899b      	ldrh	r3, [r3, #12]
 800616e:	4619      	mov	r1, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	fbb3 f3f1 	udiv	r3, r3, r1
 8006176:	4413      	add	r3, r2
 8006178:	4619      	mov	r1, r3
 800617a:	6938      	ldr	r0, [r7, #16]
 800617c:	f7ff ff0c 	bl	8005f98 <move_window>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 808d 	bne.w	80062a2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	60fa      	str	r2, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	8992      	ldrh	r2, [r2, #12]
 8006192:	fbb3 f1f2 	udiv	r1, r3, r2
 8006196:	fb01 f202 	mul.w	r2, r1, r2
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	899b      	ldrh	r3, [r3, #12]
 80061ae:	4619      	mov	r1, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b6:	4413      	add	r3, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f7ff feec 	bl	8005f98 <move_window>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d16f      	bne.n	80062a6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	899b      	ldrh	r3, [r3, #12]
 80061ca:	461a      	mov	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80061d2:	fb01 f202 	mul.w	r2, r1, r2
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	461a      	mov	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <get_fat+0xe8>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	e002      	b.n	8006200 <get_fat+0xee>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006200:	617b      	str	r3, [r7, #20]
			break;
 8006202:	e055      	b.n	80062b0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	899b      	ldrh	r3, [r3, #12]
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	b29b      	uxth	r3, r3
 8006210:	4619      	mov	r1, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	fbb3 f3f1 	udiv	r3, r3, r1
 8006218:	4413      	add	r3, r2
 800621a:	4619      	mov	r1, r3
 800621c:	6938      	ldr	r0, [r7, #16]
 800621e:	f7ff febb 	bl	8005f98 <move_window>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d140      	bne.n	80062aa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	8992      	ldrh	r2, [r2, #12]
 8006236:	fbb3 f0f2 	udiv	r0, r3, r2
 800623a:	fb00 f202 	mul.w	r2, r0, r2
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	440b      	add	r3, r1
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fbc6 	bl	80059d4 <ld_word>
 8006248:	4603      	mov	r3, r0
 800624a:	617b      	str	r3, [r7, #20]
			break;
 800624c:	e030      	b.n	80062b0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	899b      	ldrh	r3, [r3, #12]
 8006256:	089b      	lsrs	r3, r3, #2
 8006258:	b29b      	uxth	r3, r3
 800625a:	4619      	mov	r1, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006262:	4413      	add	r3, r2
 8006264:	4619      	mov	r1, r3
 8006266:	6938      	ldr	r0, [r7, #16]
 8006268:	f7ff fe96 	bl	8005f98 <move_window>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d11d      	bne.n	80062ae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	8992      	ldrh	r2, [r2, #12]
 8006280:	fbb3 f0f2 	udiv	r0, r3, r2
 8006284:	fb00 f202 	mul.w	r2, r0, r2
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	440b      	add	r3, r1
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff fbb9 	bl	8005a04 <ld_dword>
 8006292:	4603      	mov	r3, r0
 8006294:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006298:	617b      	str	r3, [r7, #20]
			break;
 800629a:	e009      	b.n	80062b0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e006      	b.n	80062b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062a2:	bf00      	nop
 80062a4:	e004      	b.n	80062b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062ae:	bf00      	nop
		}
	}

	return val;
 80062b0:	697b      	ldr	r3, [r7, #20]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80062ba:	b590      	push	{r4, r7, lr}
 80062bc:	b089      	sub	sp, #36	; 0x24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80062c6:	2302      	movs	r3, #2
 80062c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	f240 8109 	bls.w	80064e4 <put_fat+0x22a>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	429a      	cmp	r2, r3
 80062da:	f080 8103 	bcs.w	80064e4 <put_fat+0x22a>
		switch (fs->fs_type) {
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	f000 80b6 	beq.w	8006454 <put_fat+0x19a>
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	f300 80fb 	bgt.w	80064e4 <put_fat+0x22a>
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d003      	beq.n	80062fa <put_fat+0x40>
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	f000 8083 	beq.w	80063fe <put_fat+0x144>
 80062f8:	e0f4      	b.n	80064e4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4413      	add	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	899b      	ldrh	r3, [r3, #12]
 8006310:	4619      	mov	r1, r3
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	fbb3 f3f1 	udiv	r3, r3, r1
 8006318:	4413      	add	r3, r2
 800631a:	4619      	mov	r1, r3
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff fe3b 	bl	8005f98 <move_window>
 8006322:	4603      	mov	r3, r0
 8006324:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006326:	7ffb      	ldrb	r3, [r7, #31]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 80d4 	bne.w	80064d6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	61ba      	str	r2, [r7, #24]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	8992      	ldrh	r2, [r2, #12]
 800633e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006342:	fb00 f202 	mul.w	r2, r0, r2
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	440b      	add	r3, r1
 800634a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00d      	beq.n	8006372 <put_fat+0xb8>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b25b      	sxtb	r3, r3
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	b25a      	sxtb	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	b25b      	sxtb	r3, r3
 800636a:	4313      	orrs	r3, r2
 800636c:	b25b      	sxtb	r3, r3
 800636e:	b2db      	uxtb	r3, r3
 8006370:	e001      	b.n	8006376 <put_fat+0xbc>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	899b      	ldrh	r3, [r3, #12]
 8006388:	4619      	mov	r1, r3
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006390:	4413      	add	r3, r2
 8006392:	4619      	mov	r1, r3
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f7ff fdff 	bl	8005f98 <move_window>
 800639a:	4603      	mov	r3, r0
 800639c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800639e:	7ffb      	ldrb	r3, [r7, #31]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 809a 	bne.w	80064da <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	899b      	ldrh	r3, [r3, #12]
 80063b0:	461a      	mov	r2, r3
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80063b8:	fb00 f202 	mul.w	r2, r0, r2
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	440b      	add	r3, r1
 80063c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <put_fat+0x11a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	091b      	lsrs	r3, r3, #4
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e00e      	b.n	80063f2 <put_fat+0x138>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	f023 030f 	bic.w	r3, r3, #15
 80063de:	b25a      	sxtb	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	0a1b      	lsrs	r3, r3, #8
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	70da      	strb	r2, [r3, #3]
			break;
 80063fc:	e072      	b.n	80064e4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	899b      	ldrh	r3, [r3, #12]
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	b29b      	uxth	r3, r3
 800640a:	4619      	mov	r1, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006412:	4413      	add	r3, r2
 8006414:	4619      	mov	r1, r3
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fdbe 	bl	8005f98 <move_window>
 800641c:	4603      	mov	r3, r0
 800641e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006420:	7ffb      	ldrb	r3, [r7, #31]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d15b      	bne.n	80064de <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	8992      	ldrh	r2, [r2, #12]
 8006434:	fbb3 f0f2 	udiv	r0, r3, r2
 8006438:	fb00 f202 	mul.w	r2, r0, r2
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	440b      	add	r3, r1
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	b292      	uxth	r2, r2
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff faff 	bl	8005a4a <st_word>
			fs->wflag = 1;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	70da      	strb	r2, [r3, #3]
			break;
 8006452:	e047      	b.n	80064e4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	899b      	ldrh	r3, [r3, #12]
 800645c:	089b      	lsrs	r3, r3, #2
 800645e:	b29b      	uxth	r3, r3
 8006460:	4619      	mov	r1, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	fbb3 f3f1 	udiv	r3, r3, r1
 8006468:	4413      	add	r3, r2
 800646a:	4619      	mov	r1, r3
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff fd93 	bl	8005f98 <move_window>
 8006472:	4603      	mov	r3, r0
 8006474:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d132      	bne.n	80064e2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	8992      	ldrh	r2, [r2, #12]
 8006490:	fbb3 f0f2 	udiv	r0, r3, r2
 8006494:	fb00 f202 	mul.w	r2, r0, r2
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	440b      	add	r3, r1
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fab1 	bl	8005a04 <ld_dword>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064a8:	4323      	orrs	r3, r4
 80064aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	8992      	ldrh	r2, [r2, #12]
 80064ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80064be:	fb00 f202 	mul.w	r2, r0, r2
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	440b      	add	r3, r1
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fad9 	bl	8005a80 <st_dword>
			fs->wflag = 1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	70da      	strb	r2, [r3, #3]
			break;
 80064d4:	e006      	b.n	80064e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80064e2:	bf00      	nop
		}
	}
	return res;
 80064e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3724      	adds	r7, #36	; 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd90      	pop	{r4, r7, pc}

080064ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b088      	sub	sp, #32
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d904      	bls.n	8006514 <remove_chain+0x26>
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	429a      	cmp	r2, r3
 8006512:	d301      	bcc.n	8006518 <remove_chain+0x2a>
 8006514:	2302      	movs	r3, #2
 8006516:	e04b      	b.n	80065b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800651e:	f04f 32ff 	mov.w	r2, #4294967295
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	69b8      	ldr	r0, [r7, #24]
 8006526:	f7ff fec8 	bl	80062ba <put_fat>
 800652a:	4603      	mov	r3, r0
 800652c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800652e:	7ffb      	ldrb	r3, [r7, #31]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <remove_chain+0x4a>
 8006534:	7ffb      	ldrb	r3, [r7, #31]
 8006536:	e03b      	b.n	80065b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fde9 	bl	8006112 <get_fat>
 8006540:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d031      	beq.n	80065ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <remove_chain+0x64>
 800654e:	2302      	movs	r3, #2
 8006550:	e02e      	b.n	80065b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d101      	bne.n	800655e <remove_chain+0x70>
 800655a:	2301      	movs	r3, #1
 800655c:	e028      	b.n	80065b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800655e:	2200      	movs	r2, #0
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	69b8      	ldr	r0, [r7, #24]
 8006564:	f7ff fea9 	bl	80062ba <put_fat>
 8006568:	4603      	mov	r3, r0
 800656a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800656c:	7ffb      	ldrb	r3, [r7, #31]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <remove_chain+0x88>
 8006572:	7ffb      	ldrb	r3, [r7, #31]
 8006574:	e01c      	b.n	80065b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	69da      	ldr	r2, [r3, #28]
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	3b02      	subs	r3, #2
 8006580:	429a      	cmp	r2, r3
 8006582:	d20b      	bcs.n	800659c <remove_chain+0xae>
			fs->free_clst++;
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	791b      	ldrb	r3, [r3, #4]
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	b2da      	uxtb	r2, r3
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d3c6      	bcc.n	8006538 <remove_chain+0x4a>
 80065aa:	e000      	b.n	80065ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80065ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <create_chain+0x2c>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d31b      	bcc.n	800661c <create_chain+0x64>
 80065e4:	2301      	movs	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e018      	b.n	800661c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fd90 	bl	8006112 <get_fat>
 80065f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d801      	bhi.n	80065fe <create_chain+0x46>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e070      	b.n	80066e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d101      	bne.n	800660a <create_chain+0x52>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	e06a      	b.n	80066e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	429a      	cmp	r2, r3
 8006612:	d201      	bcs.n	8006618 <create_chain+0x60>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	e063      	b.n	80066e0 <create_chain+0x128>
		scl = clst;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	429a      	cmp	r2, r3
 800662e:	d307      	bcc.n	8006640 <create_chain+0x88>
				ncl = 2;
 8006630:	2302      	movs	r3, #2
 8006632:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	429a      	cmp	r2, r3
 800663a:	d901      	bls.n	8006640 <create_chain+0x88>
 800663c:	2300      	movs	r3, #0
 800663e:	e04f      	b.n	80066e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006640:	69f9      	ldr	r1, [r7, #28]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff fd65 	bl	8006112 <get_fat>
 8006648:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d003      	beq.n	800665e <create_chain+0xa6>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d101      	bne.n	8006662 <create_chain+0xaa>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	e03e      	b.n	80066e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	429a      	cmp	r2, r3
 8006668:	d1da      	bne.n	8006620 <create_chain+0x68>
 800666a:	2300      	movs	r3, #0
 800666c:	e038      	b.n	80066e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800666e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	69f9      	ldr	r1, [r7, #28]
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f7ff fe1f 	bl	80062ba <put_fat>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <create_chain+0xe2>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6938      	ldr	r0, [r7, #16]
 8006692:	f7ff fe12 	bl	80062ba <put_fat>
 8006696:	4603      	mov	r3, r0
 8006698:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d116      	bne.n	80066ce <create_chain+0x116>
		fs->last_clst = ncl;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	3b02      	subs	r3, #2
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d804      	bhi.n	80066be <create_chain+0x106>
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	1e5a      	subs	r2, r3, #1
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	791b      	ldrb	r3, [r3, #4]
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	711a      	strb	r2, [r3, #4]
 80066cc:	e007      	b.n	80066de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d102      	bne.n	80066da <create_chain+0x122>
 80066d4:	f04f 33ff 	mov.w	r3, #4294967295
 80066d8:	e000      	b.n	80066dc <create_chain+0x124>
 80066da:	2301      	movs	r3, #1
 80066dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80066de:	69fb      	ldr	r3, [r7, #28]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3720      	adds	r7, #32
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	3304      	adds	r3, #4
 80066fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	899b      	ldrh	r3, [r3, #12]
 8006704:	461a      	mov	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	fbb3 f3f2 	udiv	r3, r3, r2
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	8952      	ldrh	r2, [r2, #10]
 8006710:	fbb3 f3f2 	udiv	r3, r3, r2
 8006714:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1d1a      	adds	r2, r3, #4
 800671a:	613a      	str	r2, [r7, #16]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <clmt_clust+0x42>
 8006726:	2300      	movs	r3, #0
 8006728:	e010      	b.n	800674c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d307      	bcc.n	8006742 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3304      	adds	r3, #4
 800673e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006740:	e7e9      	b.n	8006716 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006742:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	4413      	add	r3, r2
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676e:	d204      	bcs.n	800677a <dir_sdi+0x22>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <dir_sdi+0x26>
		return FR_INT_ERR;
 800677a:	2302      	movs	r3, #2
 800677c:	e071      	b.n	8006862 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <dir_sdi+0x46>
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d902      	bls.n	800679e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10c      	bne.n	80067be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	8912      	ldrh	r2, [r2, #8]
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d301      	bcc.n	80067b4 <dir_sdi+0x5c>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e056      	b.n	8006862 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	61da      	str	r2, [r3, #28]
 80067bc:	e02d      	b.n	800681a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	895b      	ldrh	r3, [r3, #10]
 80067c2:	461a      	mov	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	899b      	ldrh	r3, [r3, #12]
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067ce:	e019      	b.n	8006804 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6979      	ldr	r1, [r7, #20]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fc9c 	bl	8006112 <get_fat>
 80067da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d101      	bne.n	80067e8 <dir_sdi+0x90>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e03c      	b.n	8006862 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d904      	bls.n	80067f8 <dir_sdi+0xa0>
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d301      	bcc.n	80067fc <dir_sdi+0xa4>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e032      	b.n	8006862 <dir_sdi+0x10a>
			ofs -= csz;
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	429a      	cmp	r2, r3
 800680a:	d2e1      	bcs.n	80067d0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	6938      	ldr	r0, [r7, #16]
 8006810:	f7ff fc60 	bl	80060d4 <clust2sect>
 8006814:	4602      	mov	r2, r0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <dir_sdi+0xd4>
 8006828:	2302      	movs	r3, #2
 800682a:	e01a      	b.n	8006862 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	899b      	ldrh	r3, [r3, #12]
 8006834:	4619      	mov	r1, r3
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	fbb3 f3f1 	udiv	r3, r3, r1
 800683c:	441a      	add	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	899b      	ldrh	r3, [r3, #12]
 800684c:	461a      	mov	r2, r3
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	fbb3 f0f2 	udiv	r0, r3, r2
 8006854:	fb00 f202 	mul.w	r2, r0, r2
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	18ca      	adds	r2, r1, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	3320      	adds	r3, #32
 8006880:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <dir_next+0x28>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006890:	d301      	bcc.n	8006896 <dir_next+0x2c>
 8006892:	2304      	movs	r3, #4
 8006894:	e0bb      	b.n	8006a0e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	899b      	ldrh	r3, [r3, #12]
 800689a:	461a      	mov	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	fbb3 f1f2 	udiv	r1, r3, r2
 80068a2:	fb01 f202 	mul.w	r2, r1, r2
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 809d 	bne.w	80069e8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10b      	bne.n	80068d8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	8912      	ldrh	r2, [r2, #8]
 80068c8:	4293      	cmp	r3, r2
 80068ca:	f0c0 808d 	bcc.w	80069e8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	61da      	str	r2, [r3, #28]
 80068d4:	2304      	movs	r3, #4
 80068d6:	e09a      	b.n	8006a0e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	899b      	ldrh	r3, [r3, #12]
 80068dc:	461a      	mov	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	8952      	ldrh	r2, [r2, #10]
 80068e8:	3a01      	subs	r2, #1
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d17b      	bne.n	80069e8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7ff fc0a 	bl	8006112 <get_fat>
 80068fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d801      	bhi.n	800690a <dir_next+0xa0>
 8006906:	2302      	movs	r3, #2
 8006908:	e081      	b.n	8006a0e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d101      	bne.n	8006916 <dir_next+0xac>
 8006912:	2301      	movs	r3, #1
 8006914:	e07b      	b.n	8006a0e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	429a      	cmp	r2, r3
 800691e:	d359      	bcc.n	80069d4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	61da      	str	r2, [r3, #28]
 800692c:	2304      	movs	r3, #4
 800692e:	e06e      	b.n	8006a0e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7ff fe3d 	bl	80065b8 <create_chain>
 800693e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <dir_next+0xe0>
 8006946:	2307      	movs	r3, #7
 8006948:	e061      	b.n	8006a0e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <dir_next+0xea>
 8006950:	2302      	movs	r3, #2
 8006952:	e05c      	b.n	8006a0e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d101      	bne.n	8006960 <dir_next+0xf6>
 800695c:	2301      	movs	r3, #1
 800695e:	e056      	b.n	8006a0e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff fad5 	bl	8005f10 <sync_window>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <dir_next+0x106>
 800696c:	2301      	movs	r3, #1
 800696e:	e04e      	b.n	8006a0e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	899b      	ldrh	r3, [r3, #12]
 800697a:	461a      	mov	r2, r3
 800697c:	2100      	movs	r1, #0
 800697e:	f7ff f8cc 	bl	8005b1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fba3 	bl	80060d4 <clust2sect>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
 8006994:	e012      	b.n	80069bc <dir_next+0x152>
						fs->wflag = 1;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fab7 	bl	8005f10 <sync_window>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <dir_next+0x142>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e030      	b.n	8006a0e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3301      	adds	r3, #1
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	895b      	ldrh	r3, [r3, #10]
 80069c0:	461a      	mov	r2, r3
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d3e6      	bcc.n	8006996 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff fb79 	bl	80060d4 <clust2sect>
 80069e2:	4602      	mov	r2, r0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	899b      	ldrh	r3, [r3, #12]
 80069f8:	461a      	mov	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a00:	fb00 f202 	mul.w	r2, r0, r2
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	18ca      	adds	r2, r1, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006a26:	2100      	movs	r1, #0
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fe95 	bl	8006758 <dir_sdi>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d12b      	bne.n	8006a90 <dir_alloc+0x7a>
		n = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	4619      	mov	r1, r3
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff faa8 	bl	8005f98 <move_window>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d11d      	bne.n	8006a8e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2be5      	cmp	r3, #229	; 0xe5
 8006a5a:	d004      	beq.n	8006a66 <dir_alloc+0x50>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d107      	bne.n	8006a76 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d102      	bne.n	8006a7a <dir_alloc+0x64>
 8006a74:	e00c      	b.n	8006a90 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fef4 	bl	800686a <dir_next>
 8006a82:	4603      	mov	r3, r0
 8006a84:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0d7      	beq.n	8006a3c <dir_alloc+0x26>
 8006a8c:	e000      	b.n	8006a90 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a8e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d101      	bne.n	8006a9a <dir_alloc+0x84>
 8006a96:	2307      	movs	r3, #7
 8006a98:	75fb      	strb	r3, [r7, #23]
	return res;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	331a      	adds	r3, #26
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe ff8e 	bl	80059d4 <ld_word>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d109      	bne.n	8006ad8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe ff83 	bl	80059d4 <ld_word>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	331a      	adds	r3, #26
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	b292      	uxth	r2, r2
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe ffa6 	bl	8005a4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d109      	bne.n	8006b1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f103 0214 	add.w	r2, r3, #20
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7fe ff98 	bl	8005a4a <st_word>
	}
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	331a      	adds	r3, #26
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe ff4e 	bl	80059d4 <ld_word>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <cmp_lfn+0x1e>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e059      	b.n	8006bf6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b4a:	1e5a      	subs	r2, r3, #1
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006b58:	2301      	movs	r3, #1
 8006b5a:	81fb      	strh	r3, [r7, #14]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	e033      	b.n	8006bca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006b62:	4a27      	ldr	r2, [pc, #156]	; (8006c00 <cmp_lfn+0xdc>)
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	4413      	add	r3, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe ff2f 	bl	80059d4 <ld_word>
 8006b76:	4603      	mov	r3, r0
 8006b78:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006b7a:	89fb      	ldrh	r3, [r7, #14]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01a      	beq.n	8006bb6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2bfe      	cmp	r3, #254	; 0xfe
 8006b84:	d812      	bhi.n	8006bac <cmp_lfn+0x88>
 8006b86:	89bb      	ldrh	r3, [r7, #12]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fdcd 	bl	8008728 <ff_wtoupper>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461c      	mov	r4, r3
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	617a      	str	r2, [r7, #20]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fdc1 	bl	8008728 <ff_wtoupper>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	d001      	beq.n	8006bb0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006bac:	2300      	movs	r3, #0
 8006bae:	e022      	b.n	8006bf6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006bb0:	89bb      	ldrh	r3, [r7, #12]
 8006bb2:	81fb      	strh	r3, [r7, #14]
 8006bb4:	e006      	b.n	8006bc4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006bb6:	89bb      	ldrh	r3, [r7, #12]
 8006bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d001      	beq.n	8006bc4 <cmp_lfn+0xa0>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e018      	b.n	8006bf6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b0c      	cmp	r3, #12
 8006bce:	d9c8      	bls.n	8006b62 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <cmp_lfn+0xd0>
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <cmp_lfn+0xd0>
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <cmp_lfn+0xd0>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006bf4:	2301      	movs	r3, #1
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd90      	pop	{r4, r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	0800d72c 	.word	0x0800d72c

08006c04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	460b      	mov	r3, r1
 8006c14:	71fb      	strb	r3, [r7, #7]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	330d      	adds	r3, #13
 8006c1e:	79ba      	ldrb	r2, [r7, #6]
 8006c20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	330b      	adds	r3, #11
 8006c26:	220f      	movs	r2, #15
 8006c28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	331a      	adds	r3, #26
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe ff06 	bl	8005a4a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	1e5a      	subs	r2, r3, #1
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	82fb      	strh	r3, [r7, #22]
 8006c52:	2300      	movs	r3, #0
 8006c54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006c56:	8afb      	ldrh	r3, [r7, #22]
 8006c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d007      	beq.n	8006c70 <put_lfn+0x6c>
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	61fa      	str	r2, [r7, #28]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006c70:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <put_lfn+0xcc>)
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	4413      	add	r3, r2
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	8afa      	ldrh	r2, [r7, #22]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fee1 	bl	8005a4a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006c88:	8afb      	ldrh	r3, [r7, #22]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <put_lfn+0x90>
 8006c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	3301      	adds	r3, #1
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b0c      	cmp	r3, #12
 8006c9e:	d9da      	bls.n	8006c56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006ca0:	8afb      	ldrh	r3, [r7, #22]
 8006ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d006      	beq.n	8006cb8 <put_lfn+0xb4>
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <put_lfn+0xbc>
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	79fa      	ldrb	r2, [r7, #7]
 8006cc4:	701a      	strb	r2, [r3, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	0800d72c 	.word	0x0800d72c

08006cd4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08c      	sub	sp, #48	; 0x30
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ce2:	220b      	movs	r2, #11
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7fe fef6 	bl	8005ad8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b05      	cmp	r3, #5
 8006cf0:	d92b      	bls.n	8006d4a <gen_numname+0x76>
		sr = seq;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006cf6:	e022      	b.n	8006d3e <gen_numname+0x6a>
			wc = *lfn++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	1c9a      	adds	r2, r3, #2
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006d02:	2300      	movs	r3, #0
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d06:	e017      	b.n	8006d38 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	005a      	lsls	r2, r3, #1
 8006d0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <gen_numname+0x5e>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006d2c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006d30:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	3301      	adds	r3, #1
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d9e4      	bls.n	8006d08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1d8      	bne.n	8006cf8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006d4a:	2307      	movs	r3, #7
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	3330      	adds	r3, #48	; 0x30
 8006d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d62:	2b39      	cmp	r3, #57	; 0x39
 8006d64:	d904      	bls.n	8006d70 <gen_numname+0x9c>
 8006d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d6a:	3307      	adds	r3, #7
 8006d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	1e5a      	subs	r2, r3, #1
 8006d74:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d76:	3330      	adds	r3, #48	; 0x30
 8006d78:	443b      	add	r3, r7
 8006d7a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006d7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	091b      	lsrs	r3, r3, #4
 8006d86:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1df      	bne.n	8006d4e <gen_numname+0x7a>
	ns[i] = '~';
 8006d8e:	f107 0214 	add.w	r2, r7, #20
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	4413      	add	r3, r2
 8006d96:	227e      	movs	r2, #126	; 0x7e
 8006d98:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9e:	e002      	b.n	8006da6 <gen_numname+0xd2>
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	3301      	adds	r3, #1
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d205      	bcs.n	8006dba <gen_numname+0xe6>
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	4413      	add	r3, r2
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d1f2      	bne.n	8006da0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	2b07      	cmp	r3, #7
 8006dbe:	d807      	bhi.n	8006dd0 <gen_numname+0xfc>
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dc6:	3330      	adds	r3, #48	; 0x30
 8006dc8:	443b      	add	r3, r7
 8006dca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006dce:	e000      	b.n	8006dd2 <gen_numname+0xfe>
 8006dd0:	2120      	movs	r1, #32
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	460a      	mov	r2, r1
 8006dde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	2b07      	cmp	r3, #7
 8006de4:	d9e9      	bls.n	8006dba <gen_numname+0xe6>
}
 8006de6:	bf00      	nop
 8006de8:	bf00      	nop
 8006dea:	3730      	adds	r7, #48	; 0x30
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006dfc:	230b      	movs	r3, #11
 8006dfe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	0852      	lsrs	r2, r2, #1
 8006e06:	01db      	lsls	r3, r3, #7
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1c59      	adds	r1, r3, #1
 8006e10:	6079      	str	r1, [r7, #4]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ed      	bne.n	8006e00 <sum_sfn+0x10>
	return sum;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b086      	sub	sp, #24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e40:	2100      	movs	r1, #0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fc88 	bl	8006758 <dir_sdi>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <dir_find+0x24>
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	e0a9      	b.n	8006faa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e56:	23ff      	movs	r3, #255	; 0xff
 8006e58:	753b      	strb	r3, [r7, #20]
 8006e5a:	7d3b      	ldrb	r3, [r7, #20]
 8006e5c:	757b      	strb	r3, [r7, #21]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f04f 32ff 	mov.w	r2, #4294967295
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6938      	ldr	r0, [r7, #16]
 8006e6e:	f7ff f893 	bl	8005f98 <move_window>
 8006e72:	4603      	mov	r3, r0
 8006e74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f040 8090 	bne.w	8006f9e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e86:	7dbb      	ldrb	r3, [r7, #22]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <dir_find+0x60>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	75fb      	strb	r3, [r7, #23]
 8006e90:	e08a      	b.n	8006fa8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	330b      	adds	r3, #11
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006ea6:	7dbb      	ldrb	r3, [r7, #22]
 8006ea8:	2be5      	cmp	r3, #229	; 0xe5
 8006eaa:	d007      	beq.n	8006ebc <dir_find+0x8a>
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <dir_find+0x98>
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d006      	beq.n	8006eca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ebc:	23ff      	movs	r3, #255	; 0xff
 8006ebe:	757b      	strb	r3, [r7, #21]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec8:	e05e      	b.n	8006f88 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b0f      	cmp	r3, #15
 8006ece:	d136      	bne.n	8006f3e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d154      	bne.n	8006f88 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006ede:	7dbb      	ldrb	r3, [r7, #22]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	7b5b      	ldrb	r3, [r3, #13]
 8006eee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006ef0:	7dbb      	ldrb	r3, [r7, #22]
 8006ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef6:	75bb      	strb	r3, [r7, #22]
 8006ef8:	7dbb      	ldrb	r3, [r7, #22]
 8006efa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006f04:	7dba      	ldrb	r2, [r7, #22]
 8006f06:	7d7b      	ldrb	r3, [r7, #21]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d115      	bne.n	8006f38 <dir_find+0x106>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	330d      	adds	r3, #13
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	7d3a      	ldrb	r2, [r7, #20]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d10e      	bne.n	8006f38 <dir_find+0x106>
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f7ff fdfd 	bl	8006b24 <cmp_lfn>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <dir_find+0x106>
 8006f30:	7d7b      	ldrb	r3, [r7, #21]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	e000      	b.n	8006f3a <dir_find+0x108>
 8006f38:	23ff      	movs	r3, #255	; 0xff
 8006f3a:	757b      	strb	r3, [r7, #21]
 8006f3c:	e024      	b.n	8006f88 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006f3e:	7d7b      	ldrb	r3, [r7, #21]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <dir_find+0x126>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff ff51 	bl	8006df0 <sum_sfn>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	7d3b      	ldrb	r3, [r7, #20]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d024      	beq.n	8006fa2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <dir_find+0x14a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a18      	ldr	r0, [r3, #32]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3324      	adds	r3, #36	; 0x24
 8006f6e:	220b      	movs	r2, #11
 8006f70:	4619      	mov	r1, r3
 8006f72:	f7fe fded 	bl	8005b50 <mem_cmp>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d014      	beq.n	8006fa6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f7c:	23ff      	movs	r3, #255	; 0xff
 8006f7e:	757b      	strb	r3, [r7, #21]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f88:	2100      	movs	r1, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fc6d 	bl	800686a <dir_next>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f43f af65 	beq.w	8006e66 <dir_find+0x34>
 8006f9c:	e004      	b.n	8006fa8 <dir_find+0x176>
		if (res != FR_OK) break;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006fa6:	bf00      	nop

	return res;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08c      	sub	sp, #48	; 0x30
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <dir_register+0x20>
 8006fd0:	2306      	movs	r3, #6
 8006fd2:	e0e0      	b.n	8007196 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd8:	e002      	b.n	8006fe0 <dir_register+0x2c>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	3301      	adds	r3, #1
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f4      	bne.n	8006fda <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006ff6:	f107 030c 	add.w	r3, r7, #12
 8006ffa:	220c      	movs	r2, #12
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fd6b 	bl	8005ad8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d032      	beq.n	8007072 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2240      	movs	r2, #64	; 0x40
 8007010:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007014:	2301      	movs	r3, #1
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
 8007018:	e016      	b.n	8007048 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	f107 010c 	add.w	r1, r7, #12
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	f7ff fe53 	bl	8006cd4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff feff 	bl	8006e32 <dir_find>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800703a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	3301      	adds	r3, #1
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	2b63      	cmp	r3, #99	; 0x63
 800704c:	d9e5      	bls.n	800701a <dir_register+0x66>
 800704e:	e000      	b.n	8007052 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007050:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	2b64      	cmp	r3, #100	; 0x64
 8007056:	d101      	bne.n	800705c <dir_register+0xa8>
 8007058:	2307      	movs	r3, #7
 800705a:	e09c      	b.n	8007196 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800705c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007060:	2b04      	cmp	r3, #4
 8007062:	d002      	beq.n	800706a <dir_register+0xb6>
 8007064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007068:	e095      	b.n	8007196 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800706a:	7dfa      	ldrb	r2, [r7, #23]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d007      	beq.n	800708c <dir_register+0xd8>
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	330c      	adds	r3, #12
 8007080:	4a47      	ldr	r2, [pc, #284]	; (80071a0 <dir_register+0x1ec>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	089b      	lsrs	r3, r3, #2
 8007088:	3301      	adds	r3, #1
 800708a:	e000      	b.n	800708e <dir_register+0xda>
 800708c:	2301      	movs	r3, #1
 800708e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007090:	6a39      	ldr	r1, [r7, #32]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fcbf 	bl	8006a16 <dir_alloc>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800709e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d148      	bne.n	8007138 <dir_register+0x184>
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	623b      	str	r3, [r7, #32]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d042      	beq.n	8007138 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	015b      	lsls	r3, r3, #5
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fb4a 	bl	8006758 <dir_sdi>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80070ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d132      	bne.n	8007138 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3324      	adds	r3, #36	; 0x24
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fe8a 	bl	8006df0 <sum_sfn>
 80070dc:	4603      	mov	r3, r0
 80070de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	4619      	mov	r1, r3
 80070e6:	69f8      	ldr	r0, [r7, #28]
 80070e8:	f7fe ff56 	bl	8005f98 <move_window>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80070f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d11d      	bne.n	8007136 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	6918      	ldr	r0, [r3, #16]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a19      	ldr	r1, [r3, #32]
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	b2da      	uxtb	r2, r3
 8007106:	7efb      	ldrb	r3, [r7, #27]
 8007108:	f7ff fd7c 	bl	8006c04 <put_lfn>
				fs->wflag = 1;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	2201      	movs	r2, #1
 8007110:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007112:	2100      	movs	r1, #0
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff fba8 	bl	800686a <dir_next>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007120:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <dir_register+0x184>
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	3b01      	subs	r3, #1
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1d5      	bne.n	80070e0 <dir_register+0x12c>
 8007134:	e000      	b.n	8007138 <dir_register+0x184>
				if (res != FR_OK) break;
 8007136:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800713c:	2b00      	cmp	r3, #0
 800713e:	d128      	bne.n	8007192 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	4619      	mov	r1, r3
 8007146:	69f8      	ldr	r0, [r7, #28]
 8007148:	f7fe ff26 	bl	8005f98 <move_window>
 800714c:	4603      	mov	r3, r0
 800714e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007156:	2b00      	cmp	r3, #0
 8007158:	d11b      	bne.n	8007192 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	2220      	movs	r2, #32
 8007160:	2100      	movs	r1, #0
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fcd9 	bl	8005b1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a18      	ldr	r0, [r3, #32]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3324      	adds	r3, #36	; 0x24
 8007170:	220b      	movs	r2, #11
 8007172:	4619      	mov	r1, r3
 8007174:	f7fe fcb0 	bl	8005ad8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	330c      	adds	r3, #12
 8007184:	f002 0218 	and.w	r2, r2, #24
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2201      	movs	r2, #1
 8007190:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007196:	4618      	mov	r0, r3
 8007198:	3730      	adds	r7, #48	; 0x30
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	4ec4ec4f 	.word	0x4ec4ec4f

080071a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	61ba      	str	r2, [r7, #24]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4413      	add	r3, r2
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80071d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071d4:	2b1f      	cmp	r3, #31
 80071d6:	d940      	bls.n	800725a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80071d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071da:	2b2f      	cmp	r3, #47	; 0x2f
 80071dc:	d006      	beq.n	80071ec <create_name+0x48>
 80071de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e0:	2b5c      	cmp	r3, #92	; 0x5c
 80071e2:	d110      	bne.n	8007206 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80071e4:	e002      	b.n	80071ec <create_name+0x48>
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	3301      	adds	r3, #1
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	4413      	add	r3, r2
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b2f      	cmp	r3, #47	; 0x2f
 80071f6:	d0f6      	beq.n	80071e6 <create_name+0x42>
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	4413      	add	r3, r2
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b5c      	cmp	r3, #92	; 0x5c
 8007202:	d0f0      	beq.n	80071e6 <create_name+0x42>
			break;
 8007204:	e02a      	b.n	800725c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2bfe      	cmp	r3, #254	; 0xfe
 800720a:	d901      	bls.n	8007210 <create_name+0x6c>
 800720c:	2306      	movs	r3, #6
 800720e:	e17d      	b.n	800750c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007212:	b2db      	uxtb	r3, r3
 8007214:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fa48 	bl	80086b0 <ff_convert>
 8007220:	4603      	mov	r3, r0
 8007222:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <create_name+0x8a>
 800722a:	2306      	movs	r3, #6
 800722c:	e16e      	b.n	800750c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800722e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007230:	2b7f      	cmp	r3, #127	; 0x7f
 8007232:	d809      	bhi.n	8007248 <create_name+0xa4>
 8007234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007236:	4619      	mov	r1, r3
 8007238:	488d      	ldr	r0, [pc, #564]	; (8007470 <create_name+0x2cc>)
 800723a:	f7fe fcb0 	bl	8005b9e <chk_chr>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <create_name+0xa4>
 8007244:	2306      	movs	r3, #6
 8007246:	e161      	b.n	800750c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	617a      	str	r2, [r7, #20]
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007256:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007258:	e7b4      	b.n	80071c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800725a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	441a      	add	r2, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007268:	2b1f      	cmp	r3, #31
 800726a:	d801      	bhi.n	8007270 <create_name+0xcc>
 800726c:	2304      	movs	r3, #4
 800726e:	e000      	b.n	8007272 <create_name+0xce>
 8007270:	2300      	movs	r3, #0
 8007272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007276:	e011      	b.n	800729c <create_name+0xf8>
		w = lfn[di - 1];
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800727e:	3b01      	subs	r3, #1
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800728a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800728c:	2b20      	cmp	r3, #32
 800728e:	d002      	beq.n	8007296 <create_name+0xf2>
 8007290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007292:	2b2e      	cmp	r3, #46	; 0x2e
 8007294:	d106      	bne.n	80072a4 <create_name+0x100>
		di--;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	3b01      	subs	r3, #1
 800729a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1ea      	bne.n	8007278 <create_name+0xd4>
 80072a2:	e000      	b.n	80072a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80072a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <create_name+0x118>
 80072b8:	2306      	movs	r3, #6
 80072ba:	e127      	b.n	800750c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3324      	adds	r3, #36	; 0x24
 80072c0:	220b      	movs	r2, #11
 80072c2:	2120      	movs	r1, #32
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fc28 	bl	8005b1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e002      	b.n	80072d6 <create_name+0x132>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	3301      	adds	r3, #1
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d0f5      	beq.n	80072d0 <create_name+0x12c>
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	2b2e      	cmp	r3, #46	; 0x2e
 80072f0:	d0ee      	beq.n	80072d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <create_name+0x168>
 80072f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072fc:	f043 0303 	orr.w	r3, r3, #3
 8007300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007304:	e002      	b.n	800730c <create_name+0x168>
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	3b01      	subs	r3, #1
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <create_name+0x182>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007318:	3b01      	subs	r3, #1
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	2b2e      	cmp	r3, #46	; 0x2e
 8007324:	d1ef      	bne.n	8007306 <create_name+0x162>

	i = b = 0; ni = 8;
 8007326:	2300      	movs	r3, #0
 8007328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800732c:	2300      	movs	r3, #0
 800732e:	623b      	str	r3, [r7, #32]
 8007330:	2308      	movs	r3, #8
 8007332:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	61ba      	str	r2, [r7, #24]
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8090 	beq.w	800746c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800734c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800734e:	2b20      	cmp	r3, #32
 8007350:	d006      	beq.n	8007360 <create_name+0x1bc>
 8007352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007354:	2b2e      	cmp	r3, #46	; 0x2e
 8007356:	d10a      	bne.n	800736e <create_name+0x1ca>
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	429a      	cmp	r2, r3
 800735e:	d006      	beq.n	800736e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007364:	f043 0303 	orr.w	r3, r3, #3
 8007368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800736c:	e07d      	b.n	800746a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	429a      	cmp	r2, r3
 8007374:	d203      	bcs.n	800737e <create_name+0x1da>
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	429a      	cmp	r2, r3
 800737c:	d123      	bne.n	80073c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2b0b      	cmp	r3, #11
 8007382:	d106      	bne.n	8007392 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007388:	f043 0303 	orr.w	r3, r3, #3
 800738c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007390:	e075      	b.n	800747e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	429a      	cmp	r2, r3
 8007398:	d005      	beq.n	80073a6 <create_name+0x202>
 800739a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800739e:	f043 0303 	orr.w	r3, r3, #3
 80073a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d866      	bhi.n	800747c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	2308      	movs	r3, #8
 80073b4:	623b      	str	r3, [r7, #32]
 80073b6:	230b      	movs	r3, #11
 80073b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80073ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073c4:	e051      	b.n	800746a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80073c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073c8:	2b7f      	cmp	r3, #127	; 0x7f
 80073ca:	d914      	bls.n	80073f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80073cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 f96d 	bl	80086b0 <ff_convert>
 80073d6:	4603      	mov	r3, r0
 80073d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80073da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <create_name+0x246>
 80073e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e2:	3b80      	subs	r3, #128	; 0x80
 80073e4:	4a23      	ldr	r2, [pc, #140]	; (8007474 <create_name+0x2d0>)
 80073e6:	5cd3      	ldrb	r3, [r2, r3]
 80073e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80073ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ee:	f043 0302 	orr.w	r3, r3, #2
 80073f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80073f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <create_name+0x268>
 80073fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073fe:	4619      	mov	r1, r3
 8007400:	481d      	ldr	r0, [pc, #116]	; (8007478 <create_name+0x2d4>)
 8007402:	f7fe fbcc 	bl	8005b9e <chk_chr>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800740c:	235f      	movs	r3, #95	; 0x5f
 800740e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007414:	f043 0303 	orr.w	r3, r3, #3
 8007418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800741c:	e01b      	b.n	8007456 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800741e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d909      	bls.n	8007438 <create_name+0x294>
 8007424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007426:	2b5a      	cmp	r3, #90	; 0x5a
 8007428:	d806      	bhi.n	8007438 <create_name+0x294>
					b |= 2;
 800742a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800742e:	f043 0302 	orr.w	r3, r3, #2
 8007432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007436:	e00e      	b.n	8007456 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800743a:	2b60      	cmp	r3, #96	; 0x60
 800743c:	d90b      	bls.n	8007456 <create_name+0x2b2>
 800743e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007440:	2b7a      	cmp	r3, #122	; 0x7a
 8007442:	d808      	bhi.n	8007456 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007444:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007452:	3b20      	subs	r3, #32
 8007454:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	623a      	str	r2, [r7, #32]
 800745c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800745e:	b2d1      	uxtb	r1, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	460a      	mov	r2, r1
 8007466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800746a:	e763      	b.n	8007334 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800746c:	bf00      	nop
 800746e:	e006      	b.n	800747e <create_name+0x2da>
 8007470:	0800d5ac 	.word	0x0800d5ac
 8007474:	0800d6ac 	.word	0x0800d6ac
 8007478:	0800d5b8 	.word	0x0800d5b8
			if (si > di) break;			/* No extension */
 800747c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007484:	2be5      	cmp	r3, #229	; 0xe5
 8007486:	d103      	bne.n	8007490 <create_name+0x2ec>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2205      	movs	r2, #5
 800748c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2b08      	cmp	r3, #8
 8007494:	d104      	bne.n	80074a0 <create_name+0x2fc>
 8007496:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80074a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074a4:	f003 030c 	and.w	r3, r3, #12
 80074a8:	2b0c      	cmp	r3, #12
 80074aa:	d005      	beq.n	80074b8 <create_name+0x314>
 80074ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d105      	bne.n	80074c4 <create_name+0x320>
 80074b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074bc:	f043 0302 	orr.w	r3, r3, #2
 80074c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d117      	bne.n	8007500 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80074d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d105      	bne.n	80074e8 <create_name+0x344>
 80074dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e0:	f043 0310 	orr.w	r3, r3, #16
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80074e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d105      	bne.n	8007500 <create_name+0x35c>
 80074f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f8:	f043 0308 	orr.w	r3, r3, #8
 80074fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007506:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800750a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800750c:	4618      	mov	r0, r3
 800750e:	3728      	adds	r7, #40	; 0x28
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007528:	e002      	b.n	8007530 <follow_path+0x1c>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	3301      	adds	r3, #1
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b2f      	cmp	r3, #47	; 0x2f
 8007536:	d0f8      	beq.n	800752a <follow_path+0x16>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b5c      	cmp	r3, #92	; 0x5c
 800753e:	d0f4      	beq.n	800752a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2200      	movs	r2, #0
 8007544:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b1f      	cmp	r3, #31
 800754c:	d80a      	bhi.n	8007564 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2280      	movs	r2, #128	; 0x80
 8007552:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007556:	2100      	movs	r1, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff f8fd 	bl	8006758 <dir_sdi>
 800755e:	4603      	mov	r3, r0
 8007560:	75fb      	strb	r3, [r7, #23]
 8007562:	e048      	b.n	80075f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007564:	463b      	mov	r3, r7
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff fe1b 	bl	80071a4 <create_name>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d139      	bne.n	80075ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff fc5a 	bl	8006e32 <dir_find>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007588:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00a      	beq.n	80075a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	2b04      	cmp	r3, #4
 8007594:	d12c      	bne.n	80075f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d127      	bne.n	80075f0 <follow_path+0xdc>
 80075a0:	2305      	movs	r3, #5
 80075a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80075a4:	e024      	b.n	80075f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d121      	bne.n	80075f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	799b      	ldrb	r3, [r3, #6]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80075bc:	2305      	movs	r3, #5
 80075be:	75fb      	strb	r3, [r7, #23]
 80075c0:	e019      	b.n	80075f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	8992      	ldrh	r2, [r2, #12]
 80075d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80075d4:	fb00 f202 	mul.w	r2, r0, r2
 80075d8:	1a9b      	subs	r3, r3, r2
 80075da:	440b      	add	r3, r1
 80075dc:	4619      	mov	r1, r3
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fa60 	bl	8006aa4 <ld_clust>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075ea:	e7bb      	b.n	8007564 <follow_path+0x50>
			if (res != FR_OK) break;
 80075ec:	bf00      	nop
 80075ee:	e002      	b.n	80075f6 <follow_path+0xe2>
				break;
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075f4:	bf00      	nop
			}
		}
	}

	return res;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295
 800760c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d031      	beq.n	800767a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e002      	b.n	8007624 <get_ldnumber+0x24>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	3301      	adds	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b1f      	cmp	r3, #31
 800762a:	d903      	bls.n	8007634 <get_ldnumber+0x34>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b3a      	cmp	r3, #58	; 0x3a
 8007632:	d1f4      	bne.n	800761e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b3a      	cmp	r3, #58	; 0x3a
 800763a:	d11c      	bne.n	8007676 <get_ldnumber+0x76>
			tp = *path;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	60fa      	str	r2, [r7, #12]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	3b30      	subs	r3, #48	; 0x30
 800764c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b09      	cmp	r3, #9
 8007652:	d80e      	bhi.n	8007672 <get_ldnumber+0x72>
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	429a      	cmp	r2, r3
 800765a:	d10a      	bne.n	8007672 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d107      	bne.n	8007672 <get_ldnumber+0x72>
					vol = (int)i;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	3301      	adds	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	e002      	b.n	800767c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007676:	2300      	movs	r3, #0
 8007678:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800767a:	693b      	ldr	r3, [r7, #16]
}
 800767c:	4618      	mov	r0, r3
 800767e:	371c      	adds	r7, #28
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	70da      	strb	r2, [r3, #3]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f04f 32ff 	mov.w	r2, #4294967295
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fe fc78 	bl	8005f98 <move_window>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <check_fs+0x2a>
 80076ae:	2304      	movs	r3, #4
 80076b0:	e038      	b.n	8007724 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	333c      	adds	r3, #60	; 0x3c
 80076b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe f98a 	bl	80059d4 <ld_word>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <check_fs+0x48>
 80076cc:	2303      	movs	r3, #3
 80076ce:	e029      	b.n	8007724 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d6:	2be9      	cmp	r3, #233	; 0xe9
 80076d8:	d009      	beq.n	80076ee <check_fs+0x66>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e0:	2beb      	cmp	r3, #235	; 0xeb
 80076e2:	d11e      	bne.n	8007722 <check_fs+0x9a>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ea:	2b90      	cmp	r3, #144	; 0x90
 80076ec:	d119      	bne.n	8007722 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	333c      	adds	r3, #60	; 0x3c
 80076f2:	3336      	adds	r3, #54	; 0x36
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe f985 	bl	8005a04 <ld_dword>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007700:	4a0a      	ldr	r2, [pc, #40]	; (800772c <check_fs+0xa4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d101      	bne.n	800770a <check_fs+0x82>
 8007706:	2300      	movs	r3, #0
 8007708:	e00c      	b.n	8007724 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	333c      	adds	r3, #60	; 0x3c
 800770e:	3352      	adds	r3, #82	; 0x52
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe f977 	bl	8005a04 <ld_dword>
 8007716:	4603      	mov	r3, r0
 8007718:	4a05      	ldr	r2, [pc, #20]	; (8007730 <check_fs+0xa8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d101      	bne.n	8007722 <check_fs+0x9a>
 800771e:	2300      	movs	r3, #0
 8007720:	e000      	b.n	8007724 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007722:	2302      	movs	r3, #2
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	00544146 	.word	0x00544146
 8007730:	33544146 	.word	0x33544146

08007734 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b096      	sub	sp, #88	; 0x58
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff ff59 	bl	8007600 <get_ldnumber>
 800774e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007752:	2b00      	cmp	r3, #0
 8007754:	da01      	bge.n	800775a <find_volume+0x26>
 8007756:	230b      	movs	r3, #11
 8007758:	e26a      	b.n	8007c30 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800775a:	4aa3      	ldr	r2, [pc, #652]	; (80079e8 <find_volume+0x2b4>)
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007762:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <find_volume+0x3a>
 800776a:	230c      	movs	r3, #12
 800776c:	e260      	b.n	8007c30 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800776e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007770:	f7fe fa30 	bl	8005bd4 <lock_fs>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <find_volume+0x4a>
 800777a:	230f      	movs	r3, #15
 800777c:	e258      	b.n	8007c30 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007782:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	f023 0301 	bic.w	r3, r3, #1
 800778a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01a      	beq.n	80077ca <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	785b      	ldrb	r3, [r3, #1]
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe f87d 	bl	8005898 <disk_status>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80077a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10c      	bne.n	80077ca <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <find_volume+0x92>
 80077b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80077c2:	230a      	movs	r3, #10
 80077c4:	e234      	b.n	8007c30 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 80077c6:	2300      	movs	r3, #0
 80077c8:	e232      	b.n	8007c30 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80077d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe f875 	bl	80058cc <disk_initialize>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80077e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80077f4:	2303      	movs	r3, #3
 80077f6:	e21b      	b.n	8007c30 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <find_volume+0xda>
 80077fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800780a:	230a      	movs	r3, #10
 800780c:	e210      	b.n	8007c30 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	7858      	ldrb	r0, [r3, #1]
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	330c      	adds	r3, #12
 8007816:	461a      	mov	r2, r3
 8007818:	2102      	movs	r1, #2
 800781a:	f7fe f8bd 	bl	8005998 <disk_ioctl>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <find_volume+0xf4>
 8007824:	2301      	movs	r3, #1
 8007826:	e203      	b.n	8007c30 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	899b      	ldrh	r3, [r3, #12]
 800782c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007830:	d80d      	bhi.n	800784e <find_volume+0x11a>
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	899b      	ldrh	r3, [r3, #12]
 8007836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800783a:	d308      	bcc.n	800784e <find_volume+0x11a>
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	899b      	ldrh	r3, [r3, #12]
 8007840:	461a      	mov	r2, r3
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	899b      	ldrh	r3, [r3, #12]
 8007846:	3b01      	subs	r3, #1
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <find_volume+0x11e>
 800784e:	2301      	movs	r3, #1
 8007850:	e1ee      	b.n	8007c30 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007856:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007858:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800785a:	f7ff ff15 	bl	8007688 <check_fs>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007868:	2b02      	cmp	r3, #2
 800786a:	d149      	bne.n	8007900 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800786c:	2300      	movs	r3, #0
 800786e:	643b      	str	r3, [r7, #64]	; 0x40
 8007870:	e01e      	b.n	80078b0 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007880:	4413      	add	r3, r2
 8007882:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	3304      	adds	r3, #4
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d006      	beq.n	800789c <find_volume+0x168>
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	3308      	adds	r3, #8
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe f8b6 	bl	8005a04 <ld_dword>
 8007898:	4602      	mov	r2, r0
 800789a:	e000      	b.n	800789e <find_volume+0x16a>
 800789c:	2200      	movs	r2, #0
 800789e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	3358      	adds	r3, #88	; 0x58
 80078a4:	443b      	add	r3, r7
 80078a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ac:	3301      	adds	r3, #1
 80078ae:	643b      	str	r3, [r7, #64]	; 0x40
 80078b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d9dd      	bls.n	8007872 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80078b6:	2300      	movs	r3, #0
 80078b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80078ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <find_volume+0x192>
 80078c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c2:	3b01      	subs	r3, #1
 80078c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80078c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	3358      	adds	r3, #88	; 0x58
 80078cc:	443b      	add	r3, r7
 80078ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80078d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80078d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <find_volume+0x1b2>
 80078da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078de:	f7ff fed3 	bl	8007688 <check_fs>
 80078e2:	4603      	mov	r3, r0
 80078e4:	e000      	b.n	80078e8 <find_volume+0x1b4>
 80078e6:	2303      	movs	r3, #3
 80078e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80078ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d905      	bls.n	8007900 <find_volume+0x1cc>
 80078f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f6:	3301      	adds	r3, #1
 80078f8:	643b      	str	r3, [r7, #64]	; 0x40
 80078fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d9e2      	bls.n	80078c6 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007904:	2b04      	cmp	r3, #4
 8007906:	d101      	bne.n	800790c <find_volume+0x1d8>
 8007908:	2301      	movs	r3, #1
 800790a:	e191      	b.n	8007c30 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800790c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007910:	2b01      	cmp	r3, #1
 8007912:	d901      	bls.n	8007918 <find_volume+0x1e4>
 8007914:	230d      	movs	r3, #13
 8007916:	e18b      	b.n	8007c30 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	333c      	adds	r3, #60	; 0x3c
 800791c:	330b      	adds	r3, #11
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe f858 	bl	80059d4 <ld_word>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	899b      	ldrh	r3, [r3, #12]
 800792c:	429a      	cmp	r2, r3
 800792e:	d001      	beq.n	8007934 <find_volume+0x200>
 8007930:	230d      	movs	r3, #13
 8007932:	e17d      	b.n	8007c30 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	333c      	adds	r3, #60	; 0x3c
 8007938:	3316      	adds	r3, #22
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe f84a 	bl	80059d4 <ld_word>
 8007940:	4603      	mov	r3, r0
 8007942:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <find_volume+0x224>
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	333c      	adds	r3, #60	; 0x3c
 800794e:	3324      	adds	r3, #36	; 0x24
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe f857 	bl	8005a04 <ld_dword>
 8007956:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800795c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	789b      	ldrb	r3, [r3, #2]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d005      	beq.n	800797c <find_volume+0x248>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	789b      	ldrb	r3, [r3, #2]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d001      	beq.n	800797c <find_volume+0x248>
 8007978:	230d      	movs	r3, #13
 800797a:	e159      	b.n	8007c30 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	789b      	ldrb	r3, [r3, #2]
 8007980:	461a      	mov	r2, r3
 8007982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007984:	fb02 f303 	mul.w	r3, r2, r3
 8007988:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007990:	b29a      	uxth	r2, r3
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	895b      	ldrh	r3, [r3, #10]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d008      	beq.n	80079b0 <find_volume+0x27c>
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	895b      	ldrh	r3, [r3, #10]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	895b      	ldrh	r3, [r3, #10]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <find_volume+0x280>
 80079b0:	230d      	movs	r3, #13
 80079b2:	e13d      	b.n	8007c30 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	333c      	adds	r3, #60	; 0x3c
 80079b8:	3311      	adds	r3, #17
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f80a 	bl	80059d4 <ld_word>
 80079c0:	4603      	mov	r3, r0
 80079c2:	461a      	mov	r2, r3
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	891b      	ldrh	r3, [r3, #8]
 80079cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ce:	8992      	ldrh	r2, [r2, #12]
 80079d0:	0952      	lsrs	r2, r2, #5
 80079d2:	b292      	uxth	r2, r2
 80079d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80079d8:	fb01 f202 	mul.w	r2, r1, r2
 80079dc:	1a9b      	subs	r3, r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <find_volume+0x2b8>
 80079e4:	230d      	movs	r3, #13
 80079e6:	e123      	b.n	8007c30 <find_volume+0x4fc>
 80079e8:	200002f8 	.word	0x200002f8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	333c      	adds	r3, #60	; 0x3c
 80079f0:	3313      	adds	r3, #19
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd ffee 	bl	80059d4 <ld_word>
 80079f8:	4603      	mov	r3, r0
 80079fa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80079fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <find_volume+0x2dc>
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	333c      	adds	r3, #60	; 0x3c
 8007a06:	3320      	adds	r3, #32
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fd fffb 	bl	8005a04 <ld_dword>
 8007a0e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	333c      	adds	r3, #60	; 0x3c
 8007a14:	330e      	adds	r3, #14
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fd ffdc 	bl	80059d4 <ld_word>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007a20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <find_volume+0x2f6>
 8007a26:	230d      	movs	r3, #13
 8007a28:	e102      	b.n	8007c30 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2e:	4413      	add	r3, r2
 8007a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a32:	8911      	ldrh	r1, [r2, #8]
 8007a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a36:	8992      	ldrh	r2, [r2, #12]
 8007a38:	0952      	lsrs	r2, r2, #5
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a40:	b292      	uxth	r2, r2
 8007a42:	4413      	add	r3, r2
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d201      	bcs.n	8007a52 <find_volume+0x31e>
 8007a4e:	230d      	movs	r3, #13
 8007a50:	e0ee      	b.n	8007c30 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5a:	8952      	ldrh	r2, [r2, #10]
 8007a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <find_volume+0x338>
 8007a68:	230d      	movs	r3, #13
 8007a6a:	e0e1      	b.n	8007c30 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d802      	bhi.n	8007a82 <find_volume+0x34e>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d802      	bhi.n	8007a92 <find_volume+0x35e>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	1c9a      	adds	r2, r3, #2
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a9e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007aa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa4:	441a      	add	r2, r3
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8007aaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	441a      	add	r2, r3
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8007ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d11e      	bne.n	8007afa <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	333c      	adds	r3, #60	; 0x3c
 8007ac0:	332a      	adds	r3, #42	; 0x2a
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd ff86 	bl	80059d4 <ld_word>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <find_volume+0x39e>
 8007ace:	230d      	movs	r3, #13
 8007ad0:	e0ae      	b.n	8007c30 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	891b      	ldrh	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <find_volume+0x3aa>
 8007ada:	230d      	movs	r3, #13
 8007adc:	e0a8      	b.n	8007c30 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	333c      	adds	r3, #60	; 0x3c
 8007ae2:	332c      	adds	r3, #44	; 0x2c
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd ff8d 	bl	8005a04 <ld_dword>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	647b      	str	r3, [r7, #68]	; 0x44
 8007af8:	e01f      	b.n	8007b3a <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	891b      	ldrh	r3, [r3, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <find_volume+0x3d2>
 8007b02:	230d      	movs	r3, #13
 8007b04:	e094      	b.n	8007c30 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	441a      	add	r2, r3
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d103      	bne.n	8007b22 <find_volume+0x3ee>
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	e00a      	b.n	8007b38 <find_volume+0x404>
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	6a1a      	ldr	r2, [r3, #32]
 8007b26:	4613      	mov	r3, r2
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	4413      	add	r3, r2
 8007b2c:	085a      	lsrs	r2, r3, #1
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b38:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	899b      	ldrh	r3, [r3, #12]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b46:	440b      	add	r3, r1
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b4c:	8989      	ldrh	r1, [r1, #12]
 8007b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d201      	bcs.n	8007b5a <find_volume+0x426>
 8007b56:	230d      	movs	r3, #13
 8007b58:	e06a      	b.n	8007c30 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	61da      	str	r2, [r3, #28]
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	69da      	ldr	r2, [r3, #28]
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	2280      	movs	r2, #128	; 0x80
 8007b6e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d149      	bne.n	8007c0c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	333c      	adds	r3, #60	; 0x3c
 8007b7c:	3330      	adds	r3, #48	; 0x30
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fd ff28 	bl	80059d4 <ld_word>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d140      	bne.n	8007c0c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b92:	f7fe fa01 	bl	8005f98 <move_window>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d137      	bne.n	8007c0c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	333c      	adds	r3, #60	; 0x3c
 8007ba6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fd ff12 	bl	80059d4 <ld_word>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d127      	bne.n	8007c0c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	333c      	adds	r3, #60	; 0x3c
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd ff1f 	bl	8005a04 <ld_dword>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4a1b      	ldr	r2, [pc, #108]	; (8007c38 <find_volume+0x504>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d11e      	bne.n	8007c0c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	333c      	adds	r3, #60	; 0x3c
 8007bd2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fd ff14 	bl	8005a04 <ld_dword>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <find_volume+0x508>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d113      	bne.n	8007c0c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	333c      	adds	r3, #60	; 0x3c
 8007be8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fd ff09 	bl	8005a04 <ld_dword>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	333c      	adds	r3, #60	; 0x3c
 8007bfc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd feff 	bl	8005a04 <ld_dword>
 8007c06:	4602      	mov	r2, r0
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007c12:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <find_volume+0x50c>)
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <find_volume+0x50c>)
 8007c1e:	801a      	strh	r2, [r3, #0]
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <find_volume+0x50c>)
 8007c22:	881a      	ldrh	r2, [r3, #0]
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c2a:	f7fe f94d 	bl	8005ec8 <clear_lock>
#endif
	return FR_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3758      	adds	r7, #88	; 0x58
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	41615252 	.word	0x41615252
 8007c3c:	61417272 	.word	0x61417272
 8007c40:	200002fc 	.word	0x200002fc

08007c44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c4e:	2309      	movs	r3, #9
 8007c50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d02e      	beq.n	8007cb6 <validate+0x72>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d02a      	beq.n	8007cb6 <validate+0x72>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d025      	beq.n	8007cb6 <validate+0x72>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	889a      	ldrh	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	88db      	ldrh	r3, [r3, #6]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d11e      	bne.n	8007cb6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fd ffa9 	bl	8005bd4 <lock_fs>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d014      	beq.n	8007cb2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd fe02 	bl	8005898 <disk_status>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <validate+0x60>
				res = FR_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e008      	b.n	8007cb6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fd ffa8 	bl	8005c00 <unlock_fs>
 8007cb0:	e001      	b.n	8007cb6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007cb2:	230f      	movs	r3, #15
 8007cb4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <validate+0x7e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	e000      	b.n	8007cc4 <validate+0x80>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	6013      	str	r3, [r2, #0]
	return res;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ce6:	f107 0310 	add.w	r3, r7, #16
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fc88 	bl	8007600 <get_ldnumber>
 8007cf0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	da01      	bge.n	8007cfc <f_mount+0x28>
 8007cf8:	230b      	movs	r3, #11
 8007cfa:	e048      	b.n	8007d8e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007cfc:	4a26      	ldr	r2, [pc, #152]	; (8007d98 <f_mount+0xc4>)
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00f      	beq.n	8007d2c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d0c:	69b8      	ldr	r0, [r7, #24]
 8007d0e:	f7fe f8db 	bl	8005ec8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fdab 	bl	8008872 <ff_del_syncobj>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <f_mount+0x52>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e033      	b.n	8007d8e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00f      	beq.n	8007d52 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3314      	adds	r3, #20
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f000 fd7a 	bl	800883c <ff_cre_syncobj>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <f_mount+0x7e>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e01d      	b.n	8007d8e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4910      	ldr	r1, [pc, #64]	; (8007d98 <f_mount+0xc4>)
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <f_mount+0x94>
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d001      	beq.n	8007d6c <f_mount+0x98>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e010      	b.n	8007d8e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007d6c:	f107 010c 	add.w	r1, r7, #12
 8007d70:	f107 0308 	add.w	r3, r7, #8
 8007d74:	2200      	movs	r2, #0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fcdc 	bl	8007734 <find_volume>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	7dfa      	ldrb	r2, [r7, #23]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd ff3a 	bl	8005c00 <unlock_fs>
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	200002f8 	.word	0x200002f8

08007d9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b09a      	sub	sp, #104	; 0x68
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <f_open+0x18>
 8007db0:	2309      	movs	r3, #9
 8007db2:	e1d7      	b.n	8008164 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007dbc:	79fa      	ldrb	r2, [r7, #7]
 8007dbe:	f107 0110 	add.w	r1, r7, #16
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff fcb4 	bl	8007734 <find_volume>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f040 81b4 	bne.w	8008144 <f_open+0x3a8>
		dj.obj.fs = fs;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8007de0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007de4:	f000 fd71 	bl	80088ca <ff_memalloc>
 8007de8:	65b8      	str	r0, [r7, #88]	; 0x58
 8007dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d106      	bne.n	8007dfe <f_open+0x62>
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2111      	movs	r1, #17
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd ff03 	bl	8005c00 <unlock_fs>
 8007dfa:	2311      	movs	r3, #17
 8007dfc:	e1b2      	b.n	8008164 <f_open+0x3c8>
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e02:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	f107 0314 	add.w	r3, r7, #20
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff fb81 	bl	8007514 <follow_path>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007e18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d11a      	bne.n	8007e56 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007e20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e24:	b25b      	sxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da03      	bge.n	8007e32 <f_open+0x96>
				res = FR_INVALID_NAME;
 8007e2a:	2306      	movs	r3, #6
 8007e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e30:	e011      	b.n	8007e56 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf14      	ite	ne
 8007e3c:	2301      	movne	r3, #1
 8007e3e:	2300      	moveq	r3, #0
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	f107 0314 	add.w	r3, r7, #20
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fd fef4 	bl	8005c38 <chk_lock>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	f003 031c 	and.w	r3, r3, #28
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d07f      	beq.n	8007f60 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 8007e60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d017      	beq.n	8007e98 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d10e      	bne.n	8007e8e <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e70:	f7fd ff3e 	bl	8005cf0 <enq_lock>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d006      	beq.n	8007e88 <f_open+0xec>
 8007e7a:	f107 0314 	add.w	r3, r7, #20
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff f898 	bl	8006fb4 <dir_register>
 8007e84:	4603      	mov	r3, r0
 8007e86:	e000      	b.n	8007e8a <f_open+0xee>
 8007e88:	2312      	movs	r3, #18
 8007e8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	f043 0308 	orr.w	r3, r3, #8
 8007e94:	71fb      	strb	r3, [r7, #7]
 8007e96:	e010      	b.n	8007eba <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e98:	7ebb      	ldrb	r3, [r7, #26]
 8007e9a:	f003 0311 	and.w	r3, r3, #17
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <f_open+0x10e>
					res = FR_DENIED;
 8007ea2:	2307      	movs	r3, #7
 8007ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ea8:	e007      	b.n	8007eba <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <f_open+0x11e>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007eba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d168      	bne.n	8007f94 <f_open+0x1f8>
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d063      	beq.n	8007f94 <f_open+0x1f8>
				dw = GET_FATTIME();
 8007ecc:	f7fd fac6 	bl	800545c <get_fattime>
 8007ed0:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	330e      	adds	r3, #14
 8007ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd fdd1 	bl	8005a80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	3316      	adds	r3, #22
 8007ee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fd fdcb 	bl	8005a80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eec:	330b      	adds	r3, #11
 8007eee:	2220      	movs	r2, #32
 8007ef0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fdd3 	bl	8006aa4 <ld_clust>
 8007efe:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f04:	2200      	movs	r2, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fdeb 	bl	8006ae2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	331c      	adds	r3, #28
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fd fdb4 	bl	8005a80 <st_dword>
					fs->wflag = 1;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d037      	beq.n	8007f94 <f_open+0x1f8>
						dw = fs->winsect;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8007f2a:	f107 0314 	add.w	r3, r7, #20
 8007f2e:	2200      	movs	r2, #0
 8007f30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fadb 	bl	80064ee <remove_chain>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007f3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d126      	bne.n	8007f94 <f_open+0x1f8>
							res = move_window(fs, dw);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe f824 	bl	8005f98 <move_window>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f5a:	3a01      	subs	r2, #1
 8007f5c:	619a      	str	r2, [r3, #24]
 8007f5e:	e019      	b.n	8007f94 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d115      	bne.n	8007f94 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f68:	7ebb      	ldrb	r3, [r7, #26]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <f_open+0x1de>
					res = FR_NO_FILE;
 8007f72:	2304      	movs	r3, #4
 8007f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f78:	e00c      	b.n	8007f94 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <f_open+0x1f8>
 8007f84:	7ebb      	ldrb	r3, [r7, #26]
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <f_open+0x1f8>
						res = FR_DENIED;
 8007f8e:	2307      	movs	r3, #7
 8007f90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007f94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d128      	bne.n	8007fee <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <f_open+0x212>
				mode |= FA_MODIFIED;
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	f023 0301 	bic.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bf14      	ite	ne
 8007fc6:	2301      	movne	r3, #1
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f107 0314 	add.w	r3, r7, #20
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fd fead 	bl	8005d34 <inc_lock>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <f_open+0x252>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007fee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 80a3 	bne.w	800813e <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fd50 	bl	8006aa4 <ld_clust>
 8008004:	4602      	mov	r2, r0
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800c:	331c      	adds	r3, #28
 800800e:	4618      	mov	r0, r3
 8008010:	f7fd fcf8 	bl	8005a04 <ld_dword>
 8008014:	4602      	mov	r2, r0
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	88da      	ldrh	r2, [r3, #6]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	79fa      	ldrb	r2, [r7, #7]
 8008032:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3330      	adds	r3, #48	; 0x30
 800804a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f7fd fd62 	bl	8005b1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	f003 0320 	and.w	r3, r3, #32
 800805c:	2b00      	cmp	r3, #0
 800805e:	d06e      	beq.n	800813e <f_open+0x3a2>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d06a      	beq.n	800813e <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	895b      	ldrh	r3, [r3, #10]
 8008074:	461a      	mov	r2, r3
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	899b      	ldrh	r3, [r3, #12]
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800808c:	e016      	b.n	80080bc <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe f83d 	bl	8006112 <get_fat>
 8008098:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800809a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800809c:	2b01      	cmp	r3, #1
 800809e:	d802      	bhi.n	80080a6 <f_open+0x30a>
 80080a0:	2302      	movs	r3, #2
 80080a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80080a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d102      	bne.n	80080b4 <f_open+0x318>
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <f_open+0x330>
 80080c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d8e0      	bhi.n	800808e <f_open+0x2f2>
				}
				fp->clust = clst;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80080d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d131      	bne.n	800813e <f_open+0x3a2>
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	899b      	ldrh	r3, [r3, #12]
 80080de:	461a      	mov	r2, r3
 80080e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80080e6:	fb01 f202 	mul.w	r2, r1, r2
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d026      	beq.n	800813e <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fd ffed 	bl	80060d4 <clust2sect>
 80080fa:	64b8      	str	r0, [r7, #72]	; 0x48
 80080fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <f_open+0x36e>
						res = FR_INT_ERR;
 8008102:	2302      	movs	r3, #2
 8008104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008108:	e019      	b.n	800813e <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	899b      	ldrh	r3, [r3, #12]
 800810e:	461a      	mov	r2, r3
 8008110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008112:	fbb3 f2f2 	udiv	r2, r3, r2
 8008116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008118:	441a      	add	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	7858      	ldrb	r0, [r3, #1]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a1a      	ldr	r2, [r3, #32]
 800812c:	2301      	movs	r3, #1
 800812e:	f7fd fbf3 	bl	8005918 <disk_read>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <f_open+0x3a2>
 8008138:	2301      	movs	r3, #1
 800813a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800813e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008140:	f000 fbcf 	bl	80088e2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <f_open+0x3b6>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7fd fd50 	bl	8005c00 <unlock_fs>
 8008160:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008164:	4618      	mov	r0, r3
 8008166:	3768      	adds	r7, #104	; 0x68
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08e      	sub	sp, #56	; 0x38
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f107 0214 	add.w	r2, r7, #20
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fd59 	bl	8007c44 <validate>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800819c:	2b00      	cmp	r3, #0
 800819e:	d107      	bne.n	80081b0 <f_read+0x44>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	7d5b      	ldrb	r3, [r3, #21]
 80081a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80081a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <f_read+0x58>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fd fd21 	bl	8005c00 <unlock_fs>
 80081be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081c2:	e15d      	b.n	8008480 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	7d1b      	ldrb	r3, [r3, #20]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <f_read+0x72>
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2107      	movs	r1, #7
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fd fd13 	bl	8005c00 <unlock_fs>
 80081da:	2307      	movs	r3, #7
 80081dc:	e150      	b.n	8008480 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	f240 813c 	bls.w	800846c <f_read+0x300>
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80081f8:	e138      	b.n	800846c <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	8992      	ldrh	r2, [r2, #12]
 8008202:	fbb3 f1f2 	udiv	r1, r3, r2
 8008206:	fb01 f202 	mul.w	r2, r1, r2
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 80f3 	bne.w	80083f8 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	8992      	ldrh	r2, [r2, #12]
 800821a:	fbb3 f3f2 	udiv	r3, r3, r2
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	8952      	ldrh	r2, [r2, #10]
 8008222:	3a01      	subs	r2, #1
 8008224:	4013      	ands	r3, r2
 8008226:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d139      	bne.n	80082a2 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	633b      	str	r3, [r7, #48]	; 0x30
 800823c:	e013      	b.n	8008266 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	4619      	mov	r1, r3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7fe fa4b 	bl	80066e8 <clmt_clust>
 8008252:	6338      	str	r0, [r7, #48]	; 0x30
 8008254:	e007      	b.n	8008266 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f7fd ff57 	bl	8006112 <get_fat>
 8008264:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	2b01      	cmp	r3, #1
 800826a:	d809      	bhi.n	8008280 <f_read+0x114>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2202      	movs	r2, #2
 8008270:	755a      	strb	r2, [r3, #21]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2102      	movs	r1, #2
 8008276:	4618      	mov	r0, r3
 8008278:	f7fd fcc2 	bl	8005c00 <unlock_fs>
 800827c:	2302      	movs	r3, #2
 800827e:	e0ff      	b.n	8008480 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d109      	bne.n	800829c <f_read+0x130>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	755a      	strb	r2, [r3, #21]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2101      	movs	r1, #1
 8008292:	4618      	mov	r0, r3
 8008294:	f7fd fcb4 	bl	8005c00 <unlock_fs>
 8008298:	2301      	movs	r3, #1
 800829a:	e0f1      	b.n	8008480 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7fd ff12 	bl	80060d4 <clust2sect>
 80082b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <f_read+0x160>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2202      	movs	r2, #2
 80082bc:	755a      	strb	r2, [r3, #21]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2102      	movs	r1, #2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fd fc9c 	bl	8005c00 <unlock_fs>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e0d9      	b.n	8008480 <f_read+0x314>
			sect += csect;
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	899b      	ldrh	r3, [r3, #12]
 80082d8:	461a      	mov	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e0:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d046      	beq.n	8008376 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	4413      	add	r3, r2
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	8952      	ldrh	r2, [r2, #10]
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d905      	bls.n	8008302 <f_read+0x196>
					cc = fs->csize - csect;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	895b      	ldrh	r3, [r3, #10]
 80082fa:	461a      	mov	r2, r3
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	7858      	ldrb	r0, [r3, #1]
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800830c:	f7fd fb04 	bl	8005918 <disk_read>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <f_read+0x1be>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	755a      	strb	r2, [r3, #21]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2101      	movs	r1, #1
 8008320:	4618      	mov	r0, r3
 8008322:	f7fd fc6d 	bl	8005c00 <unlock_fs>
 8008326:	2301      	movs	r3, #1
 8008328:	e0aa      	b.n	8008480 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	7d1b      	ldrb	r3, [r3, #20]
 800832e:	b25b      	sxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	da18      	bge.n	8008366 <f_read+0x1fa>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a1a      	ldr	r2, [r3, #32]
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800833e:	429a      	cmp	r2, r3
 8008340:	d911      	bls.n	8008366 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a1a      	ldr	r2, [r3, #32]
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	8992      	ldrh	r2, [r2, #12]
 800834e:	fb02 f303 	mul.w	r3, r2, r3
 8008352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008354:	18d0      	adds	r0, r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	899b      	ldrh	r3, [r3, #12]
 8008360:	461a      	mov	r2, r3
 8008362:	f7fd fbb9 	bl	8005ad8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	899b      	ldrh	r3, [r3, #12]
 800836a:	461a      	mov	r2, r3
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008374:	e066      	b.n	8008444 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	429a      	cmp	r2, r3
 800837e:	d038      	beq.n	80083f2 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	7d1b      	ldrb	r3, [r3, #20]
 8008384:	b25b      	sxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	da1d      	bge.n	80083c6 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	7858      	ldrb	r0, [r3, #1]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a1a      	ldr	r2, [r3, #32]
 8008398:	2301      	movs	r3, #1
 800839a:	f7fd fadd 	bl	8005958 <disk_write>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d009      	beq.n	80083b8 <f_read+0x24c>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	755a      	strb	r2, [r3, #21]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2101      	movs	r1, #1
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd fc26 	bl	8005c00 <unlock_fs>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e063      	b.n	8008480 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	7d1b      	ldrb	r3, [r3, #20]
 80083bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	7858      	ldrb	r0, [r3, #1]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083d0:	2301      	movs	r3, #1
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	f7fd faa0 	bl	8005918 <disk_read>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d009      	beq.n	80083f2 <f_read+0x286>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	755a      	strb	r2, [r3, #21]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2101      	movs	r1, #1
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd fc09 	bl	8005c00 <unlock_fs>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e046      	b.n	8008480 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	899b      	ldrh	r3, [r3, #12]
 80083fc:	4618      	mov	r0, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	8992      	ldrh	r2, [r2, #12]
 8008406:	fbb3 f1f2 	udiv	r1, r3, r2
 800840a:	fb01 f202 	mul.w	r2, r1, r2
 800840e:	1a9b      	subs	r3, r3, r2
 8008410:	1ac3      	subs	r3, r0, r3
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	429a      	cmp	r2, r3
 800841a:	d901      	bls.n	8008420 <f_read+0x2b4>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	8992      	ldrh	r2, [r2, #12]
 800842e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008432:	fb00 f202 	mul.w	r2, r0, r2
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	440b      	add	r3, r1
 800843a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800843c:	4619      	mov	r1, r3
 800843e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008440:	f7fd fb4a 	bl	8005ad8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	4413      	add	r3, r2
 800844a:	627b      	str	r3, [r7, #36]	; 0x24
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	699a      	ldr	r2, [r3, #24]
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	441a      	add	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	619a      	str	r2, [r3, #24]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	441a      	add	r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f47f aec3 	bne.w	80081fa <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2100      	movs	r1, #0
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd fbc1 	bl	8005c00 <unlock_fs>
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3738      	adds	r7, #56	; 0x38
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f107 0208 	add.w	r2, r7, #8
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff fbd3 	bl	8007c44 <validate>
 800849e:	4603      	mov	r3, r0
 80084a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d16d      	bne.n	8008584 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	7d1b      	ldrb	r3, [r3, #20]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d067      	beq.n	8008584 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	7d1b      	ldrb	r3, [r3, #20]
 80084b8:	b25b      	sxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da1a      	bge.n	80084f4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	7858      	ldrb	r0, [r3, #1]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1a      	ldr	r2, [r3, #32]
 80084cc:	2301      	movs	r3, #1
 80084ce:	f7fd fa43 	bl	8005958 <disk_write>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <f_sync+0x5e>
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2101      	movs	r1, #1
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fd fb8f 	bl	8005c00 <unlock_fs>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e055      	b.n	8008592 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	7d1b      	ldrb	r3, [r3, #20]
 80084ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80084f4:	f7fc ffb2 	bl	800545c <get_fattime>
 80084f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f7fd fd48 	bl	8005f98 <move_window>
 8008508:	4603      	mov	r3, r0
 800850a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d138      	bne.n	8008584 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	330b      	adds	r3, #11
 800851c:	781a      	ldrb	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	330b      	adds	r3, #11
 8008522:	f042 0220 	orr.w	r2, r2, #32
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6818      	ldr	r0, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	461a      	mov	r2, r3
 8008534:	68f9      	ldr	r1, [r7, #12]
 8008536:	f7fe fad4 	bl	8006ae2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f103 021c 	add.w	r2, r3, #28
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fd fa9a 	bl	8005a80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3316      	adds	r3, #22
 8008550:	6939      	ldr	r1, [r7, #16]
 8008552:	4618      	mov	r0, r3
 8008554:	f7fd fa94 	bl	8005a80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3312      	adds	r3, #18
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f7fd fa73 	bl	8005a4a <st_word>
					fs->wflag = 1;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2201      	movs	r2, #1
 8008568:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4618      	mov	r0, r3
 800856e:	f7fd fd41 	bl	8005ff4 <sync_fs>
 8008572:	4603      	mov	r3, r0
 8008574:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7d1b      	ldrb	r3, [r3, #20]
 800857a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857e:	b2da      	uxtb	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	7dfa      	ldrb	r2, [r7, #23]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7fd fb38 	bl	8005c00 <unlock_fs>
 8008590:	7dfb      	ldrb	r3, [r7, #23]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ff70 	bl	8008488 <f_sync>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d11d      	bne.n	80085ee <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f107 0208 	add.w	r2, r7, #8
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff fb42 	bl	8007c44 <validate>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d111      	bne.n	80085ee <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fc3e 	bl	8005e50 <dec_lock>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd fb09 	bl	8005c00 <unlock_fs>
#endif
		}
	}
	return res;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800860e:	4b1f      	ldr	r3, [pc, #124]	; (800868c <FATFS_LinkDriverEx+0x94>)
 8008610:	7a5b      	ldrb	r3, [r3, #9]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d131      	bne.n	800867c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008618:	4b1c      	ldr	r3, [pc, #112]	; (800868c <FATFS_LinkDriverEx+0x94>)
 800861a:	7a5b      	ldrb	r3, [r3, #9]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	461a      	mov	r2, r3
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <FATFS_LinkDriverEx+0x94>)
 8008622:	2100      	movs	r1, #0
 8008624:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008626:	4b19      	ldr	r3, [pc, #100]	; (800868c <FATFS_LinkDriverEx+0x94>)
 8008628:	7a5b      	ldrb	r3, [r3, #9]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	4a17      	ldr	r2, [pc, #92]	; (800868c <FATFS_LinkDriverEx+0x94>)
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008636:	4b15      	ldr	r3, [pc, #84]	; (800868c <FATFS_LinkDriverEx+0x94>)
 8008638:	7a5b      	ldrb	r3, [r3, #9]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <FATFS_LinkDriverEx+0x94>)
 8008640:	4413      	add	r3, r2
 8008642:	79fa      	ldrb	r2, [r7, #7]
 8008644:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008646:	4b11      	ldr	r3, [pc, #68]	; (800868c <FATFS_LinkDriverEx+0x94>)
 8008648:	7a5b      	ldrb	r3, [r3, #9]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	b2d1      	uxtb	r1, r2
 8008650:	4a0e      	ldr	r2, [pc, #56]	; (800868c <FATFS_LinkDriverEx+0x94>)
 8008652:	7251      	strb	r1, [r2, #9]
 8008654:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008656:	7dbb      	ldrb	r3, [r7, #22]
 8008658:	3330      	adds	r3, #48	; 0x30
 800865a:	b2da      	uxtb	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	3301      	adds	r3, #1
 8008664:	223a      	movs	r2, #58	; 0x3a
 8008666:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3302      	adds	r3, #2
 800866c:	222f      	movs	r2, #47	; 0x2f
 800866e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3303      	adds	r3, #3
 8008674:	2200      	movs	r2, #0
 8008676:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
}
 800867e:	4618      	mov	r0, r3
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000320 	.word	0x20000320

08008690 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800869a:	2200      	movs	r2, #0
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff ffaa 	bl	80085f8 <FATFS_LinkDriverEx>
 80086a4:	4603      	mov	r3, r0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80086bc:	88fb      	ldrh	r3, [r7, #6]
 80086be:	2b7f      	cmp	r3, #127	; 0x7f
 80086c0:	d802      	bhi.n	80086c8 <ff_convert+0x18>
		c = chr;
 80086c2:	88fb      	ldrh	r3, [r7, #6]
 80086c4:	81fb      	strh	r3, [r7, #14]
 80086c6:	e025      	b.n	8008714 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80086ce:	88fb      	ldrh	r3, [r7, #6]
 80086d0:	2bff      	cmp	r3, #255	; 0xff
 80086d2:	d805      	bhi.n	80086e0 <ff_convert+0x30>
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	3b80      	subs	r3, #128	; 0x80
 80086d8:	4a12      	ldr	r2, [pc, #72]	; (8008724 <ff_convert+0x74>)
 80086da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086de:	e000      	b.n	80086e2 <ff_convert+0x32>
 80086e0:	2300      	movs	r3, #0
 80086e2:	81fb      	strh	r3, [r7, #14]
 80086e4:	e016      	b.n	8008714 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80086e6:	2300      	movs	r3, #0
 80086e8:	81fb      	strh	r3, [r7, #14]
 80086ea:	e009      	b.n	8008700 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80086ec:	89fb      	ldrh	r3, [r7, #14]
 80086ee:	4a0d      	ldr	r2, [pc, #52]	; (8008724 <ff_convert+0x74>)
 80086f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d006      	beq.n	8008708 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80086fa:	89fb      	ldrh	r3, [r7, #14]
 80086fc:	3301      	adds	r3, #1
 80086fe:	81fb      	strh	r3, [r7, #14]
 8008700:	89fb      	ldrh	r3, [r7, #14]
 8008702:	2b7f      	cmp	r3, #127	; 0x7f
 8008704:	d9f2      	bls.n	80086ec <ff_convert+0x3c>
 8008706:	e000      	b.n	800870a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008708:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800870a:	89fb      	ldrh	r3, [r7, #14]
 800870c:	3380      	adds	r3, #128	; 0x80
 800870e:	b29b      	uxth	r3, r3
 8008710:	b2db      	uxtb	r3, r3
 8008712:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008714:	89fb      	ldrh	r3, [r7, #14]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	0800d73c 	.word	0x0800d73c

08008728 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008738:	d201      	bcs.n	800873e <ff_wtoupper+0x16>
 800873a:	4b3e      	ldr	r3, [pc, #248]	; (8008834 <ff_wtoupper+0x10c>)
 800873c:	e000      	b.n	8008740 <ff_wtoupper+0x18>
 800873e:	4b3e      	ldr	r3, [pc, #248]	; (8008838 <ff_wtoupper+0x110>)
 8008740:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	1c9a      	adds	r2, r3, #2
 8008746:	617a      	str	r2, [r7, #20]
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800874c:	8a7b      	ldrh	r3, [r7, #18]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d068      	beq.n	8008824 <ff_wtoupper+0xfc>
 8008752:	88fa      	ldrh	r2, [r7, #6]
 8008754:	8a7b      	ldrh	r3, [r7, #18]
 8008756:	429a      	cmp	r2, r3
 8008758:	d364      	bcc.n	8008824 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	1c9a      	adds	r2, r3, #2
 800875e:	617a      	str	r2, [r7, #20]
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	823b      	strh	r3, [r7, #16]
 8008764:	8a3b      	ldrh	r3, [r7, #16]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	81fb      	strh	r3, [r7, #14]
 800876a:	8a3b      	ldrh	r3, [r7, #16]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008770:	88fa      	ldrh	r2, [r7, #6]
 8008772:	8a79      	ldrh	r1, [r7, #18]
 8008774:	8a3b      	ldrh	r3, [r7, #16]
 8008776:	440b      	add	r3, r1
 8008778:	429a      	cmp	r2, r3
 800877a:	da49      	bge.n	8008810 <ff_wtoupper+0xe8>
			switch (cmd) {
 800877c:	89fb      	ldrh	r3, [r7, #14]
 800877e:	2b08      	cmp	r3, #8
 8008780:	d84f      	bhi.n	8008822 <ff_wtoupper+0xfa>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <ff_wtoupper+0x60>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	080087ad 	.word	0x080087ad
 800878c:	080087bf 	.word	0x080087bf
 8008790:	080087d5 	.word	0x080087d5
 8008794:	080087dd 	.word	0x080087dd
 8008798:	080087e5 	.word	0x080087e5
 800879c:	080087ed 	.word	0x080087ed
 80087a0:	080087f5 	.word	0x080087f5
 80087a4:	080087fd 	.word	0x080087fd
 80087a8:	08008805 	.word	0x08008805
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80087ac:	88fa      	ldrh	r2, [r7, #6]
 80087ae:	8a7b      	ldrh	r3, [r7, #18]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	80fb      	strh	r3, [r7, #6]
 80087bc:	e027      	b.n	800880e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	8a7b      	ldrh	r3, [r7, #18]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	88fa      	ldrh	r2, [r7, #6]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	80fb      	strh	r3, [r7, #6]
 80087d2:	e01c      	b.n	800880e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80087d4:	88fb      	ldrh	r3, [r7, #6]
 80087d6:	3b10      	subs	r3, #16
 80087d8:	80fb      	strh	r3, [r7, #6]
 80087da:	e018      	b.n	800880e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	3b20      	subs	r3, #32
 80087e0:	80fb      	strh	r3, [r7, #6]
 80087e2:	e014      	b.n	800880e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	3b30      	subs	r3, #48	; 0x30
 80087e8:	80fb      	strh	r3, [r7, #6]
 80087ea:	e010      	b.n	800880e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80087ec:	88fb      	ldrh	r3, [r7, #6]
 80087ee:	3b1a      	subs	r3, #26
 80087f0:	80fb      	strh	r3, [r7, #6]
 80087f2:	e00c      	b.n	800880e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80087f4:	88fb      	ldrh	r3, [r7, #6]
 80087f6:	3308      	adds	r3, #8
 80087f8:	80fb      	strh	r3, [r7, #6]
 80087fa:	e008      	b.n	800880e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80087fc:	88fb      	ldrh	r3, [r7, #6]
 80087fe:	3b50      	subs	r3, #80	; 0x50
 8008800:	80fb      	strh	r3, [r7, #6]
 8008802:	e004      	b.n	800880e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800880a:	80fb      	strh	r3, [r7, #6]
 800880c:	bf00      	nop
			}
			break;
 800880e:	e008      	b.n	8008822 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008810:	89fb      	ldrh	r3, [r7, #14]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d195      	bne.n	8008742 <ff_wtoupper+0x1a>
 8008816:	8a3b      	ldrh	r3, [r7, #16]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4413      	add	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008820:	e78f      	b.n	8008742 <ff_wtoupper+0x1a>
			break;
 8008822:	bf00      	nop
	}

	return chr;
 8008824:	88fb      	ldrh	r3, [r7, #6]
}
 8008826:	4618      	mov	r0, r3
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	0800d83c 	.word	0x0800d83c
 8008838:	0800da30 	.word	0x0800da30

0800883c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8008848:	2200      	movs	r2, #0
 800884a:	2101      	movs	r1, #1
 800884c:	2001      	movs	r0, #1
 800884e:	f000 f9b5 	bl	8008bbc <osSemaphoreNew>
 8008852:	4602      	mov	r2, r0
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	bf14      	ite	ne
 8008860:	2301      	movne	r3, #1
 8008862:	2300      	moveq	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	60fb      	str	r3, [r7, #12]

    return ret;
 8008868:	68fb      	ldr	r3, [r7, #12]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fabe 	bl	8008dfc <osSemaphoreDelete>
#endif
    return 1;
 8008880:	2301      	movs	r3, #1
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8008896:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa18 	bl	8008cd0 <osSemaphoreAcquire>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80088a6:	2301      	movs	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80088aa:	68fb      	ldr	r3, [r7, #12]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fa59 	bl	8008d74 <osSemaphoreRelease>
#endif
}
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f003 fa88 	bl	800bde8 <pvPortMalloc>
 80088d8:	4603      	mov	r3, r0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f003 fb48 	bl	800bf80 <vPortFree>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <__NVIC_SetPriority>:
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008908:	2b00      	cmp	r3, #0
 800890a:	db0a      	blt.n	8008922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	490c      	ldr	r1, [pc, #48]	; (8008944 <__NVIC_SetPriority+0x4c>)
 8008912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008916:	0112      	lsls	r2, r2, #4
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	440b      	add	r3, r1
 800891c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008920:	e00a      	b.n	8008938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	4908      	ldr	r1, [pc, #32]	; (8008948 <__NVIC_SetPriority+0x50>)
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	3b04      	subs	r3, #4
 8008930:	0112      	lsls	r2, r2, #4
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	440b      	add	r3, r1
 8008936:	761a      	strb	r2, [r3, #24]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	e000e100 	.word	0xe000e100
 8008948:	e000ed00 	.word	0xe000ed00

0800894c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008950:	2100      	movs	r1, #0
 8008952:	f06f 0004 	mvn.w	r0, #4
 8008956:	f7ff ffcf 	bl	80088f8 <__NVIC_SetPriority>
#endif
}
 800895a:	bf00      	nop
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008966:	f3ef 8305 	mrs	r3, IPSR
 800896a:	603b      	str	r3, [r7, #0]
  return(result);
 800896c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008972:	f06f 0305 	mvn.w	r3, #5
 8008976:	607b      	str	r3, [r7, #4]
 8008978:	e00c      	b.n	8008994 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <osKernelInitialize+0x44>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <osKernelInitialize+0x44>)
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008988:	2300      	movs	r3, #0
 800898a:	607b      	str	r3, [r7, #4]
 800898c:	e002      	b.n	8008994 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295
 8008992:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008994:	687b      	ldr	r3, [r7, #4]
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	2000032c 	.word	0x2000032c

080089a8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80089ae:	f002 faa1 	bl	800aef4 <xTaskGetSchedulerState>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <osKernelGetState+0x1a>
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d105      	bne.n	80089c8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80089bc:	2302      	movs	r3, #2
 80089be:	607b      	str	r3, [r7, #4]
      break;
 80089c0:	e00c      	b.n	80089dc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80089c2:	2303      	movs	r3, #3
 80089c4:	607b      	str	r3, [r7, #4]
      break;
 80089c6:	e009      	b.n	80089dc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80089c8:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <osKernelGetState+0x40>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d102      	bne.n	80089d6 <osKernelGetState+0x2e>
        state = osKernelReady;
 80089d0:	2301      	movs	r3, #1
 80089d2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80089d4:	e001      	b.n	80089da <osKernelGetState+0x32>
        state = osKernelInactive;
 80089d6:	2300      	movs	r3, #0
 80089d8:	607b      	str	r3, [r7, #4]
      break;
 80089da:	bf00      	nop
  }

  return (state);
 80089dc:	687b      	ldr	r3, [r7, #4]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	2000032c 	.word	0x2000032c

080089ec <osKernelStart>:

osStatus_t osKernelStart (void) {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089f2:	f3ef 8305 	mrs	r3, IPSR
 80089f6:	603b      	str	r3, [r7, #0]
  return(result);
 80089f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <osKernelStart+0x1a>
    stat = osErrorISR;
 80089fe:	f06f 0305 	mvn.w	r3, #5
 8008a02:	607b      	str	r3, [r7, #4]
 8008a04:	e010      	b.n	8008a28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a06:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <osKernelStart+0x48>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d109      	bne.n	8008a22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a0e:	f7ff ff9d 	bl	800894c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a12:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <osKernelStart+0x48>)
 8008a14:	2202      	movs	r2, #2
 8008a16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a18:	f001 fe12 	bl	800a640 <vTaskStartScheduler>
      stat = osOK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	607b      	str	r3, [r7, #4]
 8008a20:	e002      	b.n	8008a28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295
 8008a26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a28:	687b      	ldr	r3, [r7, #4]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	2000032c 	.word	0x2000032c

08008a38 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a3e:	f3ef 8305 	mrs	r3, IPSR
 8008a42:	603b      	str	r3, [r7, #0]
  return(result);
 8008a44:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008a4a:	f001 ff1b 	bl	800a884 <xTaskGetTickCountFromISR>
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	e002      	b.n	8008a58 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008a52:	f001 ff07 	bl	800a864 <xTaskGetTickCount>
 8008a56:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008a58:	687b      	ldr	r3, [r7, #4]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b08e      	sub	sp, #56	; 0x38
 8008a66:	af04      	add	r7, sp, #16
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a72:	f3ef 8305 	mrs	r3, IPSR
 8008a76:	617b      	str	r3, [r7, #20]
  return(result);
 8008a78:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d17e      	bne.n	8008b7c <osThreadNew+0x11a>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d07b      	beq.n	8008b7c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a84:	2380      	movs	r3, #128	; 0x80
 8008a86:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a88:	2318      	movs	r3, #24
 8008a8a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a90:	f04f 33ff 	mov.w	r3, #4294967295
 8008a94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d045      	beq.n	8008b28 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <osThreadNew+0x48>
        name = attr->name;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d008      	beq.n	8008ad0 <osThreadNew+0x6e>
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	2b38      	cmp	r3, #56	; 0x38
 8008ac2:	d805      	bhi.n	8008ad0 <osThreadNew+0x6e>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <osThreadNew+0x72>
        return (NULL);
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e054      	b.n	8008b7e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	089b      	lsrs	r3, r3, #2
 8008ae2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <osThreadNew+0xa8>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	2b5b      	cmp	r3, #91	; 0x5b
 8008af2:	d90a      	bls.n	8008b0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d006      	beq.n	8008b0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <osThreadNew+0xa8>
        mem = 1;
 8008b04:	2301      	movs	r3, #1
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	e010      	b.n	8008b2c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10c      	bne.n	8008b2c <osThreadNew+0xca>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d108      	bne.n	8008b2c <osThreadNew+0xca>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d104      	bne.n	8008b2c <osThreadNew+0xca>
          mem = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	e001      	b.n	8008b2c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d110      	bne.n	8008b54 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f001 fba3 	bl	800a294 <xTaskCreateStatic>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	e013      	b.n	8008b7c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d110      	bne.n	8008b7c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	f107 0310 	add.w	r3, r7, #16
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f001 fbee 	bl	800a34e <xTaskCreate>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d001      	beq.n	8008b7c <osThreadNew+0x11a>
            hTask = NULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b7c:	693b      	ldr	r3, [r7, #16]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3728      	adds	r7, #40	; 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b8e:	f3ef 8305 	mrs	r3, IPSR
 8008b92:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <osDelay+0x1c>
    stat = osErrorISR;
 8008b9a:	f06f 0305 	mvn.w	r3, #5
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e007      	b.n	8008bb2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 fd13 	bl	800a5d8 <vTaskDelay>
    }
  }

  return (stat);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	; 0x28
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bcc:	f3ef 8305 	mrs	r3, IPSR
 8008bd0:	613b      	str	r3, [r7, #16]
  return(result);
 8008bd2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d175      	bne.n	8008cc4 <osSemaphoreNew+0x108>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d072      	beq.n	8008cc4 <osSemaphoreNew+0x108>
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d86e      	bhi.n	8008cc4 <osSemaphoreNew+0x108>
    mem = -1;
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d015      	beq.n	8008c1e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d006      	beq.n	8008c08 <osSemaphoreNew+0x4c>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	2b4f      	cmp	r3, #79	; 0x4f
 8008c00:	d902      	bls.n	8008c08 <osSemaphoreNew+0x4c>
        mem = 1;
 8008c02:	2301      	movs	r3, #1
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	e00c      	b.n	8008c22 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d108      	bne.n	8008c22 <osSemaphoreNew+0x66>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <osSemaphoreNew+0x66>
          mem = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]
 8008c1c:	e001      	b.n	8008c22 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d04c      	beq.n	8008cc4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d128      	bne.n	8008c82 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d10a      	bne.n	8008c4c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	9200      	str	r2, [sp, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	2001      	movs	r0, #1
 8008c44:	f000 fb80 	bl	8009348 <xQueueGenericCreateStatic>
 8008c48:	61f8      	str	r0, [r7, #28]
 8008c4a:	e005      	b.n	8008c58 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	2100      	movs	r1, #0
 8008c50:	2001      	movs	r0, #1
 8008c52:	f000 fbf1 	bl	8009438 <xQueueGenericCreate>
 8008c56:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d022      	beq.n	8008ca4 <osSemaphoreNew+0xe8>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01f      	beq.n	8008ca4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c64:	2300      	movs	r3, #0
 8008c66:	2200      	movs	r2, #0
 8008c68:	2100      	movs	r1, #0
 8008c6a:	69f8      	ldr	r0, [r7, #28]
 8008c6c:	f000 fcac 	bl	80095c8 <xQueueGenericSend>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d016      	beq.n	8008ca4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008c76:	69f8      	ldr	r0, [r7, #28]
 8008c78:	f001 f938 	bl	8009eec <vQueueDelete>
            hSemaphore = NULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61fb      	str	r3, [r7, #28]
 8008c80:	e010      	b.n	8008ca4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d108      	bne.n	8008c9a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fc2e 	bl	80094f2 <xQueueCreateCountingSemaphoreStatic>
 8008c96:	61f8      	str	r0, [r7, #28]
 8008c98:	e004      	b.n	8008ca4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 fc5f 	bl	8009560 <xQueueCreateCountingSemaphore>
 8008ca2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00c      	beq.n	8008cc4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e001      	b.n	8008cbc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008cbc:	6979      	ldr	r1, [r7, #20]
 8008cbe:	69f8      	ldr	r0, [r7, #28]
 8008cc0:	f001 fa60 	bl	800a184 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008cc4:	69fb      	ldr	r3, [r7, #28]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008ce8:	f06f 0303 	mvn.w	r3, #3
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e039      	b.n	8008d64 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cf0:	f3ef 8305 	mrs	r3, IPSR
 8008cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d022      	beq.n	8008d42 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008d02:	f06f 0303 	mvn.w	r3, #3
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e02c      	b.n	8008d64 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	461a      	mov	r2, r3
 8008d14:	2100      	movs	r1, #0
 8008d16:	6938      	ldr	r0, [r7, #16]
 8008d18:	f001 f868 	bl	8009dec <xQueueReceiveFromISR>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d003      	beq.n	8008d2a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008d22:	f06f 0302 	mvn.w	r3, #2
 8008d26:	617b      	str	r3, [r7, #20]
 8008d28:	e01c      	b.n	8008d64 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d019      	beq.n	8008d64 <osSemaphoreAcquire+0x94>
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <osSemaphoreAcquire+0xa0>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	e010      	b.n	8008d64 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6938      	ldr	r0, [r7, #16]
 8008d46:	f000 ff45 	bl	8009bd4 <xQueueSemaphoreTake>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d009      	beq.n	8008d64 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008d56:	f06f 0301 	mvn.w	r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	e002      	b.n	8008d64 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008d5e:	f06f 0302 	mvn.w	r3, #2
 8008d62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008d64:	697b      	ldr	r3, [r7, #20]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008d8a:	f06f 0303 	mvn.w	r3, #3
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	e02c      	b.n	8008dec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d92:	f3ef 8305 	mrs	r3, IPSR
 8008d96:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01a      	beq.n	8008dd4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4619      	mov	r1, r3
 8008da8:	6938      	ldr	r0, [r7, #16]
 8008daa:	f000 fda6 	bl	80098fa <xQueueGiveFromISR>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d003      	beq.n	8008dbc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008db4:	f06f 0302 	mvn.w	r3, #2
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	e017      	b.n	8008dec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d014      	beq.n	8008dec <osSemaphoreRelease+0x78>
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <osSemaphoreRelease+0x84>)
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	e00b      	b.n	8008dec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6938      	ldr	r0, [r7, #16]
 8008ddc:	f000 fbf4 	bl	80095c8 <xQueueGenericSend>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d002      	beq.n	8008dec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008de6:	f06f 0302 	mvn.w	r3, #2
 8008dea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008dec:	697b      	ldr	r3, [r7, #20]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e08:	f3ef 8305 	mrs	r3, IPSR
 8008e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008e14:	f06f 0305 	mvn.w	r3, #5
 8008e18:	617b      	str	r3, [r7, #20]
 8008e1a:	e00e      	b.n	8008e3a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008e22:	f06f 0303 	mvn.w	r3, #3
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e007      	b.n	8008e3a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008e2a:	6938      	ldr	r0, [r7, #16]
 8008e2c:	f001 f9d4 	bl	800a1d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008e34:	6938      	ldr	r0, [r7, #16]
 8008e36:	f001 f859 	bl	8009eec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008e3a:	697b      	ldr	r3, [r7, #20]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e54:	f3ef 8305 	mrs	r3, IPSR
 8008e58:	613b      	str	r3, [r7, #16]
  return(result);
 8008e5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d15f      	bne.n	8008f20 <osMessageQueueNew+0xdc>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d05c      	beq.n	8008f20 <osMessageQueueNew+0xdc>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d059      	beq.n	8008f20 <osMessageQueueNew+0xdc>
    mem = -1;
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d029      	beq.n	8008ecc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d012      	beq.n	8008ea6 <osMessageQueueNew+0x62>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	2b4f      	cmp	r3, #79	; 0x4f
 8008e86:	d90e      	bls.n	8008ea6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	695a      	ldr	r2, [r3, #20]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d302      	bcc.n	8008ea6 <osMessageQueueNew+0x62>
        mem = 1;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	e014      	b.n	8008ed0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d110      	bne.n	8008ed0 <osMessageQueueNew+0x8c>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10c      	bne.n	8008ed0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d108      	bne.n	8008ed0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d104      	bne.n	8008ed0 <osMessageQueueNew+0x8c>
          mem = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61bb      	str	r3, [r7, #24]
 8008eca:	e001      	b.n	8008ed0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10b      	bne.n	8008eee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2100      	movs	r1, #0
 8008ee0:	9100      	str	r1, [sp, #0]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fa2f 	bl	8009348 <xQueueGenericCreateStatic>
 8008eea:	61f8      	str	r0, [r7, #28]
 8008eec:	e008      	b.n	8008f00 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d105      	bne.n	8008f00 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 fa9d 	bl	8009438 <xQueueGenericCreate>
 8008efe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00c      	beq.n	8008f20 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	e001      	b.n	8008f18 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008f18:	6979      	ldr	r1, [r7, #20]
 8008f1a:	69f8      	ldr	r0, [r7, #28]
 8008f1c:	f001 f932 	bl	800a184 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008f20:	69fb      	ldr	r3, [r7, #28]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f44:	f3ef 8305 	mrs	r3, IPSR
 8008f48:	617b      	str	r3, [r7, #20]
  return(result);
 8008f4a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d028      	beq.n	8008fa2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <osMessageQueuePut+0x36>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <osMessageQueuePut+0x36>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008f62:	f06f 0303 	mvn.w	r3, #3
 8008f66:	61fb      	str	r3, [r7, #28]
 8008f68:	e038      	b.n	8008fdc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008f6e:	f107 0210 	add.w	r2, r7, #16
 8008f72:	2300      	movs	r3, #0
 8008f74:	68b9      	ldr	r1, [r7, #8]
 8008f76:	69b8      	ldr	r0, [r7, #24]
 8008f78:	f000 fc24 	bl	80097c4 <xQueueGenericSendFromISR>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d003      	beq.n	8008f8a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008f82:	f06f 0302 	mvn.w	r3, #2
 8008f86:	61fb      	str	r3, [r7, #28]
 8008f88:	e028      	b.n	8008fdc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d025      	beq.n	8008fdc <osMessageQueuePut+0xb0>
 8008f90:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <osMessageQueuePut+0xbc>)
 8008f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	e01c      	b.n	8008fdc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <osMessageQueuePut+0x82>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008fae:	f06f 0303 	mvn.w	r3, #3
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	e012      	b.n	8008fdc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	69b8      	ldr	r0, [r7, #24]
 8008fbe:	f000 fb03 	bl	80095c8 <xQueueGenericSend>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d009      	beq.n	8008fdc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008fce:	f06f 0301 	mvn.w	r3, #1
 8008fd2:	61fb      	str	r3, [r7, #28]
 8008fd4:	e002      	b.n	8008fdc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008fd6:	f06f 0302 	mvn.w	r3, #2
 8008fda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008fdc:	69fb      	ldr	r3, [r7, #28]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3720      	adds	r7, #32
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	e000ed04 	.word	0xe000ed04

08008fec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009002:	f3ef 8305 	mrs	r3, IPSR
 8009006:	617b      	str	r3, [r7, #20]
  return(result);
 8009008:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800900a:	2b00      	cmp	r3, #0
 800900c:	d028      	beq.n	8009060 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <osMessageQueueGet+0x34>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <osMessageQueueGet+0x34>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009020:	f06f 0303 	mvn.w	r3, #3
 8009024:	61fb      	str	r3, [r7, #28]
 8009026:	e037      	b.n	8009098 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	461a      	mov	r2, r3
 8009032:	68b9      	ldr	r1, [r7, #8]
 8009034:	69b8      	ldr	r0, [r7, #24]
 8009036:	f000 fed9 	bl	8009dec <xQueueReceiveFromISR>
 800903a:	4603      	mov	r3, r0
 800903c:	2b01      	cmp	r3, #1
 800903e:	d003      	beq.n	8009048 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009040:	f06f 0302 	mvn.w	r3, #2
 8009044:	61fb      	str	r3, [r7, #28]
 8009046:	e027      	b.n	8009098 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d024      	beq.n	8009098 <osMessageQueueGet+0xac>
 800904e:	4b15      	ldr	r3, [pc, #84]	; (80090a4 <osMessageQueueGet+0xb8>)
 8009050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	e01b      	b.n	8009098 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <osMessageQueueGet+0x80>
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800906c:	f06f 0303 	mvn.w	r3, #3
 8009070:	61fb      	str	r3, [r7, #28]
 8009072:	e011      	b.n	8009098 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	69b8      	ldr	r0, [r7, #24]
 800907a:	f000 fccb 	bl	8009a14 <xQueueReceive>
 800907e:	4603      	mov	r3, r0
 8009080:	2b01      	cmp	r3, #1
 8009082:	d009      	beq.n	8009098 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800908a:	f06f 0301 	mvn.w	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	e002      	b.n	8009098 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009092:	f06f 0302 	mvn.w	r3, #2
 8009096:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009098:	69fb      	ldr	r3, [r7, #28]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3720      	adds	r7, #32
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4a07      	ldr	r2, [pc, #28]	; (80090d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80090b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <vApplicationGetIdleTaskMemory+0x30>)
 80090be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2280      	movs	r2, #128	; 0x80
 80090c4:	601a      	str	r2, [r3, #0]
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000330 	.word	0x20000330
 80090d8:	2000038c 	.word	0x2000038c

080090dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4a07      	ldr	r2, [pc, #28]	; (8009108 <vApplicationGetTimerTaskMemory+0x2c>)
 80090ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	4a06      	ldr	r2, [pc, #24]	; (800910c <vApplicationGetTimerTaskMemory+0x30>)
 80090f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090fa:	601a      	str	r2, [r3, #0]
}
 80090fc:	bf00      	nop
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	2000058c 	.word	0x2000058c
 800910c:	200005e8 	.word	0x200005e8

08009110 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f103 0208 	add.w	r2, r3, #8
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f103 0208 	add.w	r2, r3, #8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f103 0208 	add.w	r2, r3, #8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c8:	d103      	bne.n	80091d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e00c      	b.n	80091ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3308      	adds	r3, #8
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e002      	b.n	80091e0 <vListInsert+0x2e>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d2f6      	bcs.n	80091da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	601a      	str	r2, [r3, #0]
}
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6892      	ldr	r2, [r2, #8]
 800923a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6852      	ldr	r2, [r2, #4]
 8009244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d103      	bne.n	8009258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	1e5a      	subs	r2, r3, #1
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092a2:	f002 fc7f 	bl	800bba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	441a      	add	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d2:	3b01      	subs	r3, #1
 80092d4:	68f9      	ldr	r1, [r7, #12]
 80092d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	441a      	add	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	22ff      	movs	r2, #255	; 0xff
 80092e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d114      	bne.n	8009322 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01a      	beq.n	8009336 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3310      	adds	r3, #16
 8009304:	4618      	mov	r0, r3
 8009306:	f001 fc37 	bl	800ab78 <xTaskRemoveFromEventList>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d012      	beq.n	8009336 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009310:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <xQueueGenericReset+0xcc>)
 8009312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	e009      	b.n	8009336 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3310      	adds	r3, #16
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fef2 	bl	8009110 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff feed 	bl	8009110 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009336:	f002 fc65 	bl	800bc04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800933a:	2301      	movs	r3, #1
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	e000ed04 	.word	0xe000ed04

08009348 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08e      	sub	sp, #56	; 0x38
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <xQueueGenericCreateStatic+0x52>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <xQueueGenericCreateStatic+0x56>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueGenericCreateStatic+0x58>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	623b      	str	r3, [r7, #32]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d102      	bne.n	80093c6 <xQueueGenericCreateStatic+0x7e>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <xQueueGenericCreateStatic+0x82>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e000      	b.n	80093cc <xQueueGenericCreateStatic+0x84>
 80093ca:	2300      	movs	r3, #0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10a      	bne.n	80093e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	61fb      	str	r3, [r7, #28]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093e6:	2350      	movs	r3, #80	; 0x50
 80093e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b50      	cmp	r3, #80	; 0x50
 80093ee:	d00a      	beq.n	8009406 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	61bb      	str	r3, [r7, #24]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009406:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00d      	beq.n	800942e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800941a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	4613      	mov	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 f83f 	bl	80094ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009430:	4618      	mov	r0, r3
 8009432:	3730      	adds	r7, #48	; 0x30
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericCreate+0x2a>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	613b      	str	r3, [r7, #16]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	fb02 f303 	mul.w	r3, r2, r3
 800946a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3350      	adds	r3, #80	; 0x50
 8009470:	4618      	mov	r0, r3
 8009472:	f002 fcb9 	bl	800bde8 <pvPortMalloc>
 8009476:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d011      	beq.n	80094a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	3350      	adds	r3, #80	; 0x50
 8009486:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009490:	79fa      	ldrb	r2, [r7, #7]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	4613      	mov	r3, r2
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f805 	bl	80094ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094a2:	69bb      	ldr	r3, [r7, #24]
	}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3720      	adds	r7, #32
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d103      	bne.n	80094c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	e002      	b.n	80094ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094da:	2101      	movs	r1, #1
 80094dc:	69b8      	ldr	r0, [r7, #24]
 80094de:	f7ff fecb 	bl	8009278 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b08a      	sub	sp, #40	; 0x28
 80094f6:	af02      	add	r7, sp, #8
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	61bb      	str	r3, [r7, #24]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	429a      	cmp	r2, r3
 8009520:	d90a      	bls.n	8009538 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	617b      	str	r3, [r7, #20]
}
 8009534:	bf00      	nop
 8009536:	e7fe      	b.n	8009536 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009538:	2302      	movs	r3, #2
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	2100      	movs	r1, #0
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff ff00 	bl	8009348 <xQueueGenericCreateStatic>
 8009548:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009556:	69fb      	ldr	r3, [r7, #28]
	}
 8009558:	4618      	mov	r0, r3
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	613b      	str	r3, [r7, #16]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	429a      	cmp	r2, r3
 800958c:	d90a      	bls.n	80095a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60fb      	str	r3, [r7, #12]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095a4:	2202      	movs	r2, #2
 80095a6:	2100      	movs	r1, #0
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff ff45 	bl	8009438 <xQueueGenericCreate>
 80095ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80095bc:	697b      	ldr	r3, [r7, #20]
	}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08e      	sub	sp, #56	; 0x38
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095d6:	2300      	movs	r3, #0
 80095d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xQueueGenericSend+0x32>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d103      	bne.n	8009608 <xQueueGenericSend+0x40>
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <xQueueGenericSend+0x44>
 8009608:	2301      	movs	r3, #1
 800960a:	e000      	b.n	800960e <xQueueGenericSend+0x46>
 800960c:	2300      	movs	r3, #0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <xQueueGenericSend+0x60>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009624:	bf00      	nop
 8009626:	e7fe      	b.n	8009626 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d103      	bne.n	8009636 <xQueueGenericSend+0x6e>
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <xQueueGenericSend+0x72>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <xQueueGenericSend+0x74>
 800963a:	2300      	movs	r3, #0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <xQueueGenericSend+0x8e>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	623b      	str	r3, [r7, #32]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009656:	f001 fc4d 	bl	800aef4 <xTaskGetSchedulerState>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <xQueueGenericSend+0x9e>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <xQueueGenericSend+0xa2>
 8009666:	2301      	movs	r3, #1
 8009668:	e000      	b.n	800966c <xQueueGenericSend+0xa4>
 800966a:	2300      	movs	r3, #0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <xQueueGenericSend+0xbe>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	61fb      	str	r3, [r7, #28]
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009686:	f002 fa8d 	bl	800bba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009692:	429a      	cmp	r2, r3
 8009694:	d302      	bcc.n	800969c <xQueueGenericSend+0xd4>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d129      	bne.n	80096f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096a2:	f000 fc5e 	bl	8009f62 <prvCopyDataToQueue>
 80096a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d010      	beq.n	80096d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	3324      	adds	r3, #36	; 0x24
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 fa5f 	bl	800ab78 <xTaskRemoveFromEventList>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d013      	beq.n	80096e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096c0:	4b3f      	ldr	r3, [pc, #252]	; (80097c0 <xQueueGenericSend+0x1f8>)
 80096c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	e00a      	b.n	80096e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096d8:	4b39      	ldr	r3, [pc, #228]	; (80097c0 <xQueueGenericSend+0x1f8>)
 80096da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096e8:	f002 fa8c 	bl	800bc04 <vPortExitCritical>
				return pdPASS;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e063      	b.n	80097b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096f6:	f002 fa85 	bl	800bc04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	e05c      	b.n	80097b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	2b00      	cmp	r3, #0
 8009702:	d106      	bne.n	8009712 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	4618      	mov	r0, r3
 800970a:	f001 fa99 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800970e:	2301      	movs	r3, #1
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009712:	f002 fa77 	bl	800bc04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009716:	f000 fff9 	bl	800a70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800971a:	f002 fa43 	bl	800bba4 <vPortEnterCritical>
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009724:	b25b      	sxtb	r3, r3
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972a:	d103      	bne.n	8009734 <xQueueGenericSend+0x16c>
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800973a:	b25b      	sxtb	r3, r3
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d103      	bne.n	800974a <xQueueGenericSend+0x182>
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800974a:	f002 fa5b 	bl	800bc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800974e:	1d3a      	adds	r2, r7, #4
 8009750:	f107 0314 	add.w	r3, r7, #20
 8009754:	4611      	mov	r1, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f001 fa88 	bl	800ac6c <xTaskCheckForTimeOut>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d124      	bne.n	80097ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009764:	f000 fcf5 	bl	800a152 <prvIsQueueFull>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d018      	beq.n	80097a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	3310      	adds	r3, #16
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f001 f9ae 	bl	800aad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800977c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800977e:	f000 fc80 	bl	800a082 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009782:	f000 ffd1 	bl	800a728 <xTaskResumeAll>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	f47f af7c 	bne.w	8009686 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800978e:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <xQueueGenericSend+0x1f8>)
 8009790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	e772      	b.n	8009686 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097a2:	f000 fc6e 	bl	800a082 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097a6:	f000 ffbf 	bl	800a728 <xTaskResumeAll>
 80097aa:	e76c      	b.n	8009686 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ae:	f000 fc68 	bl	800a082 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097b2:	f000 ffb9 	bl	800a728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3738      	adds	r7, #56	; 0x38
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	e000ed04 	.word	0xe000ed04

080097c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b090      	sub	sp, #64	; 0x40
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d103      	bne.n	8009800 <xQueueGenericSendFromISR+0x3c>
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <xQueueGenericSendFromISR+0x40>
 8009800:	2301      	movs	r3, #1
 8009802:	e000      	b.n	8009806 <xQueueGenericSendFromISR+0x42>
 8009804:	2300      	movs	r3, #0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10a      	bne.n	8009820 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2b02      	cmp	r3, #2
 8009824:	d103      	bne.n	800982e <xQueueGenericSendFromISR+0x6a>
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <xQueueGenericSendFromISR+0x6e>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <xQueueGenericSendFromISR+0x70>
 8009832:	2300      	movs	r3, #0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	623b      	str	r3, [r7, #32]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800984e:	f002 fa8b 	bl	800bd68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009852:	f3ef 8211 	mrs	r2, BASEPRI
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	61fa      	str	r2, [r7, #28]
 8009868:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800986a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800986c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009876:	429a      	cmp	r2, r3
 8009878:	d302      	bcc.n	8009880 <xQueueGenericSendFromISR+0xbc>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b02      	cmp	r3, #2
 800987e:	d12f      	bne.n	80098e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009896:	f000 fb64 	bl	8009f62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800989a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d112      	bne.n	80098ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d016      	beq.n	80098da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	3324      	adds	r3, #36	; 0x24
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 f961 	bl	800ab78 <xTaskRemoveFromEventList>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00e      	beq.n	80098da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	e007      	b.n	80098da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098ce:	3301      	adds	r3, #1
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	b25a      	sxtb	r2, r3
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098da:	2301      	movs	r3, #1
 80098dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80098de:	e001      	b.n	80098e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3740      	adds	r7, #64	; 0x40
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b08e      	sub	sp, #56	; 0x38
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	623b      	str	r3, [r7, #32]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00a      	beq.n	8009942 <xQueueGiveFromISR+0x48>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	61fb      	str	r3, [r7, #28]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d103      	bne.n	8009952 <xQueueGiveFromISR+0x58>
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <xQueueGiveFromISR+0x5c>
 8009952:	2301      	movs	r3, #1
 8009954:	e000      	b.n	8009958 <xQueueGiveFromISR+0x5e>
 8009956:	2300      	movs	r3, #0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <xQueueGiveFromISR+0x78>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	61bb      	str	r3, [r7, #24]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009972:	f002 f9f9 	bl	800bd68 <vPortValidateInterruptPriority>
	__asm volatile
 8009976:	f3ef 8211 	mrs	r2, BASEPRI
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	617a      	str	r2, [r7, #20]
 800998c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800998e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800999e:	429a      	cmp	r2, r3
 80099a0:	d22b      	bcs.n	80099fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	1c5a      	adds	r2, r3, #1
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d112      	bne.n	80099e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d016      	beq.n	80099f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	3324      	adds	r3, #36	; 0x24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 f8d4 	bl	800ab78 <xTaskRemoveFromEventList>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00e      	beq.n	80099f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2201      	movs	r2, #1
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	e007      	b.n	80099f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e8:	3301      	adds	r3, #1
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	b25a      	sxtb	r2, r3
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099f4:	2301      	movs	r3, #1
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
 80099f8:	e001      	b.n	80099fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f383 8811 	msr	BASEPRI, r3
}
 8009a08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3738      	adds	r7, #56	; 0x38
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08c      	sub	sp, #48	; 0x30
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <xQueueReceive+0x30>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	623b      	str	r3, [r7, #32]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d103      	bne.n	8009a52 <xQueueReceive+0x3e>
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <xQueueReceive+0x42>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e000      	b.n	8009a58 <xQueueReceive+0x44>
 8009a56:	2300      	movs	r3, #0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueReceive+0x5e>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	61fb      	str	r3, [r7, #28]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a72:	f001 fa3f 	bl	800aef4 <xTaskGetSchedulerState>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <xQueueReceive+0x6e>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <xQueueReceive+0x72>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e000      	b.n	8009a88 <xQueueReceive+0x74>
 8009a86:	2300      	movs	r3, #0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <xQueueReceive+0x8e>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	61bb      	str	r3, [r7, #24]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009aa2:	f002 f87f 	bl	800bba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d01f      	beq.n	8009af2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab6:	f000 fabe 	bl	800a036 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	1e5a      	subs	r2, r3, #1
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00f      	beq.n	8009aea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	3310      	adds	r3, #16
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f001 f852 	bl	800ab78 <xTaskRemoveFromEventList>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d007      	beq.n	8009aea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ada:	4b3d      	ldr	r3, [pc, #244]	; (8009bd0 <xQueueReceive+0x1bc>)
 8009adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009aea:	f002 f88b 	bl	800bc04 <vPortExitCritical>
				return pdPASS;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e069      	b.n	8009bc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009af8:	f002 f884 	bl	800bc04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009afc:	2300      	movs	r3, #0
 8009afe:	e062      	b.n	8009bc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b06:	f107 0310 	add.w	r3, r7, #16
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 f898 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b10:	2301      	movs	r3, #1
 8009b12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b14:	f002 f876 	bl	800bc04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b18:	f000 fdf8 	bl	800a70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b1c:	f002 f842 	bl	800bba4 <vPortEnterCritical>
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b26:	b25b      	sxtb	r3, r3
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2c:	d103      	bne.n	8009b36 <xQueueReceive+0x122>
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b3c:	b25b      	sxtb	r3, r3
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d103      	bne.n	8009b4c <xQueueReceive+0x138>
 8009b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b4c:	f002 f85a 	bl	800bc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b50:	1d3a      	adds	r2, r7, #4
 8009b52:	f107 0310 	add.w	r3, r7, #16
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 f887 	bl	800ac6c <xTaskCheckForTimeOut>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d123      	bne.n	8009bac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b66:	f000 fade 	bl	800a126 <prvIsQueueEmpty>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d017      	beq.n	8009ba0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	3324      	adds	r3, #36	; 0x24
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 ffad 	bl	800aad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b80:	f000 fa7f 	bl	800a082 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b84:	f000 fdd0 	bl	800a728 <xTaskResumeAll>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d189      	bne.n	8009aa2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b8e:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <xQueueReceive+0x1bc>)
 8009b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	e780      	b.n	8009aa2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba2:	f000 fa6e 	bl	800a082 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ba6:	f000 fdbf 	bl	800a728 <xTaskResumeAll>
 8009baa:	e77a      	b.n	8009aa2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bae:	f000 fa68 	bl	800a082 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bb2:	f000 fdb9 	bl	800a728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb8:	f000 fab5 	bl	800a126 <prvIsQueueEmpty>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f43f af6f 	beq.w	8009aa2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3730      	adds	r7, #48	; 0x30
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08e      	sub	sp, #56	; 0x38
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009be6:	2300      	movs	r3, #0
 8009be8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	623b      	str	r3, [r7, #32]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	61fb      	str	r3, [r7, #28]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c24:	f001 f966 	bl	800aef4 <xTaskGetSchedulerState>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <xQueueSemaphoreTake+0x60>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <xQueueSemaphoreTake+0x64>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e000      	b.n	8009c3a <xQueueSemaphoreTake+0x66>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10a      	bne.n	8009c54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	61bb      	str	r3, [r7, #24]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c54:	f001 ffa6 	bl	800bba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d024      	beq.n	8009cae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	1e5a      	subs	r2, r3, #1
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c74:	f001 fab4 	bl	800b1e0 <pvTaskIncrementMutexHeldCount>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00f      	beq.n	8009ca6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	3310      	adds	r3, #16
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 ff74 	bl	800ab78 <xTaskRemoveFromEventList>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d007      	beq.n	8009ca6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c96:	4b54      	ldr	r3, [pc, #336]	; (8009de8 <xQueueSemaphoreTake+0x214>)
 8009c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ca6:	f001 ffad 	bl	800bc04 <vPortExitCritical>
				return pdPASS;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e097      	b.n	8009dde <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d111      	bne.n	8009cd8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	617b      	str	r3, [r7, #20]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009cd0:	f001 ff98 	bl	800bc04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e082      	b.n	8009dde <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cde:	f107 030c 	add.w	r3, r7, #12
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 ffac 	bl	800ac40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cec:	f001 ff8a 	bl	800bc04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cf0:	f000 fd0c 	bl	800a70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cf4:	f001 ff56 	bl	800bba4 <vPortEnterCritical>
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cfe:	b25b      	sxtb	r3, r3
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d103      	bne.n	8009d0e <xQueueSemaphoreTake+0x13a>
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d14:	b25b      	sxtb	r3, r3
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d103      	bne.n	8009d24 <xQueueSemaphoreTake+0x150>
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d24:	f001 ff6e 	bl	800bc04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d28:	463a      	mov	r2, r7
 8009d2a:	f107 030c 	add.w	r3, r7, #12
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 ff9b 	bl	800ac6c <xTaskCheckForTimeOut>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d132      	bne.n	8009da2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d3e:	f000 f9f2 	bl	800a126 <prvIsQueueEmpty>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d026      	beq.n	8009d96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d109      	bne.n	8009d64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009d50:	f001 ff28 	bl	800bba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 f8e9 	bl	800af30 <xTaskPriorityInherit>
 8009d5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009d60:	f001 ff50 	bl	800bc04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d66:	3324      	adds	r3, #36	; 0x24
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 feb3 	bl	800aad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d74:	f000 f985 	bl	800a082 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d78:	f000 fcd6 	bl	800a728 <xTaskResumeAll>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f47f af68 	bne.w	8009c54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009d84:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <xQueueSemaphoreTake+0x214>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	e75e      	b.n	8009c54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d98:	f000 f973 	bl	800a082 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d9c:	f000 fcc4 	bl	800a728 <xTaskResumeAll>
 8009da0:	e758      	b.n	8009c54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009da4:	f000 f96d 	bl	800a082 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009da8:	f000 fcbe 	bl	800a728 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dae:	f000 f9ba 	bl	800a126 <prvIsQueueEmpty>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f43f af4d 	beq.w	8009c54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00d      	beq.n	8009ddc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009dc0:	f001 fef0 	bl	800bba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dc6:	f000 f8b4 	bl	8009f32 <prvGetDisinheritPriorityAfterTimeout>
 8009dca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 f982 	bl	800b0dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009dd8:	f001 ff14 	bl	800bc04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3738      	adds	r7, #56	; 0x38
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08e      	sub	sp, #56	; 0x38
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	623b      	str	r3, [r7, #32]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d103      	bne.n	8009e26 <xQueueReceiveFromISR+0x3a>
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <xQueueReceiveFromISR+0x3e>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <xQueueReceiveFromISR+0x40>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	61fb      	str	r3, [r7, #28]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e46:	f001 ff8f 	bl	800bd68 <vPortValidateInterruptPriority>
	__asm volatile
 8009e4a:	f3ef 8211 	mrs	r2, BASEPRI
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	61ba      	str	r2, [r7, #24]
 8009e60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d02f      	beq.n	8009ed2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e7c:	68b9      	ldr	r1, [r7, #8]
 8009e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e80:	f000 f8d9 	bl	800a036 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	1e5a      	subs	r2, r3, #1
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e94:	d112      	bne.n	8009ebc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d016      	beq.n	8009ecc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	3310      	adds	r3, #16
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 fe68 	bl	800ab78 <xTaskRemoveFromEventList>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00e      	beq.n	8009ecc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00b      	beq.n	8009ecc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	e007      	b.n	8009ecc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	b25a      	sxtb	r2, r3
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	637b      	str	r3, [r7, #52]	; 0x34
 8009ed0:	e001      	b.n	8009ed6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f383 8811 	msr	BASEPRI, r3
}
 8009ee0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3738      	adds	r7, #56	; 0x38
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <vQueueDelete+0x28>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60bb      	str	r3, [r7, #8]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f95f 	bl	800a1d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f002 f82b 	bl	800bf80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009f2a:	bf00      	nop
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d006      	beq.n	8009f50 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e001      	b.n	8009f54 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f54:	68fb      	ldr	r3, [r7, #12]
	}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b086      	sub	sp, #24
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10d      	bne.n	8009f9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d14d      	bne.n	800a024 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 f837 	bl	800b000 <xTaskPriorityDisinherit>
 8009f92:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	609a      	str	r2, [r3, #8]
 8009f9a:	e043      	b.n	800a024 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d119      	bne.n	8009fd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6858      	ldr	r0, [r3, #4]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	461a      	mov	r2, r3
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	f002 fb90 	bl	800c6d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	441a      	add	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d32b      	bcc.n	800a024 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	605a      	str	r2, [r3, #4]
 8009fd4:	e026      	b.n	800a024 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	68d8      	ldr	r0, [r3, #12]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68b9      	ldr	r1, [r7, #8]
 8009fe2:	f002 fb76 	bl	800c6d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fee:	425b      	negs	r3, r3
 8009ff0:	441a      	add	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d207      	bcs.n	800a012 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	425b      	negs	r3, r3
 800a00c:	441a      	add	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d105      	bne.n	800a024 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	3b01      	subs	r3, #1
 800a022:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a02c:	697b      	ldr	r3, [r7, #20]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a044:	2b00      	cmp	r3, #0
 800a046:	d018      	beq.n	800a07a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d303      	bcc.n	800a06a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68d9      	ldr	r1, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	461a      	mov	r2, r3
 800a074:	6838      	ldr	r0, [r7, #0]
 800a076:	f002 fb2c 	bl	800c6d2 <memcpy>
	}
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a08a:	f001 fd8b 	bl	800bba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a094:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a096:	e011      	b.n	800a0bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d012      	beq.n	800a0c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3324      	adds	r3, #36	; 0x24
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fd67 	bl	800ab78 <xTaskRemoveFromEventList>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0b0:	f000 fe3e 	bl	800ad30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dce9      	bgt.n	800a098 <prvUnlockQueue+0x16>
 800a0c4:	e000      	b.n	800a0c8 <prvUnlockQueue+0x46>
					break;
 800a0c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	22ff      	movs	r2, #255	; 0xff
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0d0:	f001 fd98 	bl	800bc04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0d4:	f001 fd66 	bl	800bba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0e0:	e011      	b.n	800a106 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d012      	beq.n	800a110 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3310      	adds	r3, #16
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fd42 	bl	800ab78 <xTaskRemoveFromEventList>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0fa:	f000 fe19 	bl	800ad30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	3b01      	subs	r3, #1
 800a102:	b2db      	uxtb	r3, r3
 800a104:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	dce9      	bgt.n	800a0e2 <prvUnlockQueue+0x60>
 800a10e:	e000      	b.n	800a112 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a110:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	22ff      	movs	r2, #255	; 0xff
 800a116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a11a:	f001 fd73 	bl	800bc04 <vPortExitCritical>
}
 800a11e:	bf00      	nop
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b084      	sub	sp, #16
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a12e:	f001 fd39 	bl	800bba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a13a:	2301      	movs	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e001      	b.n	800a144 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a144:	f001 fd5e 	bl	800bc04 <vPortExitCritical>

	return xReturn;
 800a148:	68fb      	ldr	r3, [r7, #12]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a15a:	f001 fd23 	bl	800bba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a166:	429a      	cmp	r2, r3
 800a168:	d102      	bne.n	800a170 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a16a:	2301      	movs	r3, #1
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	e001      	b.n	800a174 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a174:	f001 fd46 	bl	800bc04 <vPortExitCritical>

	return xReturn;
 800a178:	68fb      	ldr	r3, [r7, #12]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	e014      	b.n	800a1be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a194:	4a0f      	ldr	r2, [pc, #60]	; (800a1d4 <vQueueAddToRegistry+0x50>)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10b      	bne.n	800a1b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a1a0:	490c      	ldr	r1, [pc, #48]	; (800a1d4 <vQueueAddToRegistry+0x50>)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a1aa:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <vQueueAddToRegistry+0x50>)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1b6:	e006      	b.n	800a1c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b07      	cmp	r3, #7
 800a1c2:	d9e7      	bls.n	800a194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	200009e8 	.word	0x200009e8

0800a1d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	e016      	b.n	800a214 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a1e6:	4a10      	ldr	r2, [pc, #64]	; (800a228 <vQueueUnregisterQueue+0x50>)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d10b      	bne.n	800a20e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a1f6:	4a0c      	ldr	r2, [pc, #48]	; (800a228 <vQueueUnregisterQueue+0x50>)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a200:	4a09      	ldr	r2, [pc, #36]	; (800a228 <vQueueUnregisterQueue+0x50>)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	4413      	add	r3, r2
 800a208:	2200      	movs	r2, #0
 800a20a:	605a      	str	r2, [r3, #4]
				break;
 800a20c:	e006      	b.n	800a21c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3301      	adds	r3, #1
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b07      	cmp	r3, #7
 800a218:	d9e5      	bls.n	800a1e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a21a:	bf00      	nop
 800a21c:	bf00      	nop
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	200009e8 	.word	0x200009e8

0800a22c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a23c:	f001 fcb2 	bl	800bba4 <vPortEnterCritical>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a246:	b25b      	sxtb	r3, r3
 800a248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24c:	d103      	bne.n	800a256 <vQueueWaitForMessageRestricted+0x2a>
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a25c:	b25b      	sxtb	r3, r3
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a262:	d103      	bne.n	800a26c <vQueueWaitForMessageRestricted+0x40>
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a26c:	f001 fcca 	bl	800bc04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	3324      	adds	r3, #36	; 0x24
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fc4d 	bl	800ab20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a286:	6978      	ldr	r0, [r7, #20]
 800a288:	f7ff fefb 	bl	800a082 <prvUnlockQueue>
	}
 800a28c:	bf00      	nop
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08e      	sub	sp, #56	; 0x38
 800a298:	af04      	add	r7, sp, #16
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <xTaskCreateStatic+0x2a>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	623b      	str	r3, [r7, #32]
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xTaskCreateStatic+0x46>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	61fb      	str	r3, [r7, #28]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2da:	235c      	movs	r3, #92	; 0x5c
 800a2dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2b5c      	cmp	r3, #92	; 0x5c
 800a2e2:	d00a      	beq.n	800a2fa <xTaskCreateStatic+0x66>
	__asm volatile
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	61bb      	str	r3, [r7, #24]
}
 800a2f6:	bf00      	nop
 800a2f8:	e7fe      	b.n	800a2f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d01e      	beq.n	800a340 <xTaskCreateStatic+0xac>
 800a302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01b      	beq.n	800a340 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a310:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	2202      	movs	r2, #2
 800a316:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a31a:	2300      	movs	r3, #0
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	9302      	str	r3, [sp, #8]
 800a322:	f107 0314 	add.w	r3, r7, #20
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f850 	bl	800a3d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a33a:	f000 f8dd 	bl	800a4f8 <prvAddNewTaskToReadyList>
 800a33e:	e001      	b.n	800a344 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a344:	697b      	ldr	r3, [r7, #20]
	}
 800a346:	4618      	mov	r0, r3
 800a348:	3728      	adds	r7, #40	; 0x28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b08c      	sub	sp, #48	; 0x30
 800a352:	af04      	add	r7, sp, #16
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	603b      	str	r3, [r7, #0]
 800a35a:	4613      	mov	r3, r2
 800a35c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4618      	mov	r0, r3
 800a364:	f001 fd40 	bl	800bde8 <pvPortMalloc>
 800a368:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00e      	beq.n	800a38e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a370:	205c      	movs	r0, #92	; 0x5c
 800a372:	f001 fd39 	bl	800bde8 <pvPortMalloc>
 800a376:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	631a      	str	r2, [r3, #48]	; 0x30
 800a384:	e005      	b.n	800a392 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a386:	6978      	ldr	r0, [r7, #20]
 800a388:	f001 fdfa 	bl	800bf80 <vPortFree>
 800a38c:	e001      	b.n	800a392 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d017      	beq.n	800a3c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3a0:	88fa      	ldrh	r2, [r7, #6]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 f80e 	bl	800a3d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3bc:	69f8      	ldr	r0, [r7, #28]
 800a3be:	f000 f89b 	bl	800a4f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	e002      	b.n	800a3ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
	}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3720      	adds	r7, #32
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	21a5      	movs	r1, #165	; 0xa5
 800a3f2:	f002 f8f3 	bl	800c5dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a400:	3b01      	subs	r3, #1
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	f023 0307 	bic.w	r3, r3, #7
 800a40e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	f003 0307 	and.w	r3, r3, #7
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	617b      	str	r3, [r7, #20]
}
 800a42c:	bf00      	nop
 800a42e:	e7fe      	b.n	800a42e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d01f      	beq.n	800a476 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a436:	2300      	movs	r3, #0
 800a438:	61fb      	str	r3, [r7, #28]
 800a43a:	e012      	b.n	800a462 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	7819      	ldrb	r1, [r3, #0]
 800a444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	4413      	add	r3, r2
 800a44a:	3334      	adds	r3, #52	; 0x34
 800a44c:	460a      	mov	r2, r1
 800a44e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	4413      	add	r3, r2
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d006      	beq.n	800a46a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	3301      	adds	r3, #1
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	2b0f      	cmp	r3, #15
 800a466:	d9e9      	bls.n	800a43c <prvInitialiseNewTask+0x64>
 800a468:	e000      	b.n	800a46c <prvInitialiseNewTask+0x94>
			{
				break;
 800a46a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a474:	e003      	b.n	800a47e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	2b37      	cmp	r3, #55	; 0x37
 800a482:	d901      	bls.n	800a488 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a484:	2337      	movs	r3, #55	; 0x37
 800a486:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a48c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a492:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	2200      	movs	r2, #0
 800a498:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	3304      	adds	r3, #4
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fe56 	bl	8009150 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a6:	3318      	adds	r3, #24
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe fe51 	bl	8009150 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	68f9      	ldr	r1, [r7, #12]
 800a4d6:	69b8      	ldr	r0, [r7, #24]
 800a4d8:	f001 fa38 	bl	800b94c <pxPortInitialiseStack>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ee:	bf00      	nop
 800a4f0:	3720      	adds	r7, #32
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a500:	f001 fb50 	bl	800bba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a504:	4b2d      	ldr	r3, [pc, #180]	; (800a5bc <prvAddNewTaskToReadyList+0xc4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3301      	adds	r3, #1
 800a50a:	4a2c      	ldr	r2, [pc, #176]	; (800a5bc <prvAddNewTaskToReadyList+0xc4>)
 800a50c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a50e:	4b2c      	ldr	r3, [pc, #176]	; (800a5c0 <prvAddNewTaskToReadyList+0xc8>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d109      	bne.n	800a52a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a516:	4a2a      	ldr	r2, [pc, #168]	; (800a5c0 <prvAddNewTaskToReadyList+0xc8>)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a51c:	4b27      	ldr	r3, [pc, #156]	; (800a5bc <prvAddNewTaskToReadyList+0xc4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d110      	bne.n	800a546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a524:	f000 fc28 	bl	800ad78 <prvInitialiseTaskLists>
 800a528:	e00d      	b.n	800a546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a52a:	4b26      	ldr	r3, [pc, #152]	; (800a5c4 <prvAddNewTaskToReadyList+0xcc>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d109      	bne.n	800a546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a532:	4b23      	ldr	r3, [pc, #140]	; (800a5c0 <prvAddNewTaskToReadyList+0xc8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d802      	bhi.n	800a546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a540:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <prvAddNewTaskToReadyList+0xc8>)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a546:	4b20      	ldr	r3, [pc, #128]	; (800a5c8 <prvAddNewTaskToReadyList+0xd0>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3301      	adds	r3, #1
 800a54c:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <prvAddNewTaskToReadyList+0xd0>)
 800a54e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a550:	4b1d      	ldr	r3, [pc, #116]	; (800a5c8 <prvAddNewTaskToReadyList+0xd0>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55c:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <prvAddNewTaskToReadyList+0xd4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	429a      	cmp	r2, r3
 800a562:	d903      	bls.n	800a56c <prvAddNewTaskToReadyList+0x74>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	4a18      	ldr	r2, [pc, #96]	; (800a5cc <prvAddNewTaskToReadyList+0xd4>)
 800a56a:	6013      	str	r3, [r2, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a570:	4613      	mov	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4a15      	ldr	r2, [pc, #84]	; (800a5d0 <prvAddNewTaskToReadyList+0xd8>)
 800a57a:	441a      	add	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7fe fdf1 	bl	800916a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a588:	f001 fb3c 	bl	800bc04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a58c:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <prvAddNewTaskToReadyList+0xcc>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00e      	beq.n	800a5b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a594:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <prvAddNewTaskToReadyList+0xc8>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d207      	bcs.n	800a5b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5a2:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <prvAddNewTaskToReadyList+0xdc>)
 800a5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000efc 	.word	0x20000efc
 800a5c0:	20000a28 	.word	0x20000a28
 800a5c4:	20000f08 	.word	0x20000f08
 800a5c8:	20000f18 	.word	0x20000f18
 800a5cc:	20000f04 	.word	0x20000f04
 800a5d0:	20000a2c 	.word	0x20000a2c
 800a5d4:	e000ed04 	.word	0xe000ed04

0800a5d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d017      	beq.n	800a61a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5ea:	4b13      	ldr	r3, [pc, #76]	; (800a638 <vTaskDelay+0x60>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <vTaskDelay+0x30>
	__asm volatile
 800a5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	60bb      	str	r3, [r7, #8]
}
 800a604:	bf00      	nop
 800a606:	e7fe      	b.n	800a606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a608:	f000 f880 	bl	800a70c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a60c:	2100      	movs	r1, #0
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fdfa 	bl	800b208 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a614:	f000 f888 	bl	800a728 <xTaskResumeAll>
 800a618:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d107      	bne.n	800a630 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a620:	4b06      	ldr	r3, [pc, #24]	; (800a63c <vTaskDelay+0x64>)
 800a622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000f24 	.word	0x20000f24
 800a63c:	e000ed04 	.word	0xe000ed04

0800a640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08a      	sub	sp, #40	; 0x28
 800a644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a64e:	463a      	mov	r2, r7
 800a650:	1d39      	adds	r1, r7, #4
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fd26 	bl	80090a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	9202      	str	r2, [sp, #8]
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	2300      	movs	r3, #0
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	2300      	movs	r3, #0
 800a66c:	460a      	mov	r2, r1
 800a66e:	4921      	ldr	r1, [pc, #132]	; (800a6f4 <vTaskStartScheduler+0xb4>)
 800a670:	4821      	ldr	r0, [pc, #132]	; (800a6f8 <vTaskStartScheduler+0xb8>)
 800a672:	f7ff fe0f 	bl	800a294 <xTaskCreateStatic>
 800a676:	4603      	mov	r3, r0
 800a678:	4a20      	ldr	r2, [pc, #128]	; (800a6fc <vTaskStartScheduler+0xbc>)
 800a67a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a67c:	4b1f      	ldr	r3, [pc, #124]	; (800a6fc <vTaskStartScheduler+0xbc>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a684:	2301      	movs	r3, #1
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e001      	b.n	800a68e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d102      	bne.n	800a69a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a694:	f000 fe0c 	bl	800b2b0 <xTimerCreateTimerTask>
 800a698:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d116      	bne.n	800a6ce <vTaskStartScheduler+0x8e>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	613b      	str	r3, [r7, #16]
}
 800a6b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6b4:	4b12      	ldr	r3, [pc, #72]	; (800a700 <vTaskStartScheduler+0xc0>)
 800a6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6bc:	4b11      	ldr	r3, [pc, #68]	; (800a704 <vTaskStartScheduler+0xc4>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6c2:	4b11      	ldr	r3, [pc, #68]	; (800a708 <vTaskStartScheduler+0xc8>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6c8:	f001 f9ca 	bl	800ba60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6cc:	e00e      	b.n	800a6ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d10a      	bne.n	800a6ec <vTaskStartScheduler+0xac>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	60fb      	str	r3, [r7, #12]
}
 800a6e8:	bf00      	nop
 800a6ea:	e7fe      	b.n	800a6ea <vTaskStartScheduler+0xaa>
}
 800a6ec:	bf00      	nop
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	0800d5f4 	.word	0x0800d5f4
 800a6f8:	0800ad49 	.word	0x0800ad49
 800a6fc:	20000f20 	.word	0x20000f20
 800a700:	20000f1c 	.word	0x20000f1c
 800a704:	20000f08 	.word	0x20000f08
 800a708:	20000f00 	.word	0x20000f00

0800a70c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a710:	4b04      	ldr	r3, [pc, #16]	; (800a724 <vTaskSuspendAll+0x18>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3301      	adds	r3, #1
 800a716:	4a03      	ldr	r2, [pc, #12]	; (800a724 <vTaskSuspendAll+0x18>)
 800a718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a71a:	bf00      	nop
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	20000f24 	.word	0x20000f24

0800a728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a732:	2300      	movs	r3, #0
 800a734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a736:	4b42      	ldr	r3, [pc, #264]	; (800a840 <xTaskResumeAll+0x118>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <xTaskResumeAll+0x2c>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	603b      	str	r3, [r7, #0]
}
 800a750:	bf00      	nop
 800a752:	e7fe      	b.n	800a752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a754:	f001 fa26 	bl	800bba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a758:	4b39      	ldr	r3, [pc, #228]	; (800a840 <xTaskResumeAll+0x118>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4a38      	ldr	r2, [pc, #224]	; (800a840 <xTaskResumeAll+0x118>)
 800a760:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a762:	4b37      	ldr	r3, [pc, #220]	; (800a840 <xTaskResumeAll+0x118>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d162      	bne.n	800a830 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a76a:	4b36      	ldr	r3, [pc, #216]	; (800a844 <xTaskResumeAll+0x11c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d05e      	beq.n	800a830 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a772:	e02f      	b.n	800a7d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a774:	4b34      	ldr	r3, [pc, #208]	; (800a848 <xTaskResumeAll+0x120>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3318      	adds	r3, #24
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe fd4f 	bl	8009224 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3304      	adds	r3, #4
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fd4a 	bl	8009224 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a794:	4b2d      	ldr	r3, [pc, #180]	; (800a84c <xTaskResumeAll+0x124>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d903      	bls.n	800a7a4 <xTaskResumeAll+0x7c>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a0:	4a2a      	ldr	r2, [pc, #168]	; (800a84c <xTaskResumeAll+0x124>)
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4a27      	ldr	r2, [pc, #156]	; (800a850 <xTaskResumeAll+0x128>)
 800a7b2:	441a      	add	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fe fcd5 	bl	800916a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c4:	4b23      	ldr	r3, [pc, #140]	; (800a854 <xTaskResumeAll+0x12c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d302      	bcc.n	800a7d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a7ce:	4b22      	ldr	r3, [pc, #136]	; (800a858 <xTaskResumeAll+0x130>)
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7d4:	4b1c      	ldr	r3, [pc, #112]	; (800a848 <xTaskResumeAll+0x120>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1cb      	bne.n	800a774 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a7e2:	f000 fb67 	bl	800aeb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7e6:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <xTaskResumeAll+0x134>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d010      	beq.n	800a814 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a7f2:	f000 f859 	bl	800a8a8 <xTaskIncrementTick>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a7fc:	4b16      	ldr	r3, [pc, #88]	; (800a858 <xTaskResumeAll+0x130>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3b01      	subs	r3, #1
 800a806:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1f1      	bne.n	800a7f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <xTaskResumeAll+0x134>)
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a814:	4b10      	ldr	r3, [pc, #64]	; (800a858 <xTaskResumeAll+0x130>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d009      	beq.n	800a830 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a81c:	2301      	movs	r3, #1
 800a81e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <xTaskResumeAll+0x138>)
 800a822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a830:	f001 f9e8 	bl	800bc04 <vPortExitCritical>

	return xAlreadyYielded;
 800a834:	68bb      	ldr	r3, [r7, #8]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20000f24 	.word	0x20000f24
 800a844:	20000efc 	.word	0x20000efc
 800a848:	20000ebc 	.word	0x20000ebc
 800a84c:	20000f04 	.word	0x20000f04
 800a850:	20000a2c 	.word	0x20000a2c
 800a854:	20000a28 	.word	0x20000a28
 800a858:	20000f10 	.word	0x20000f10
 800a85c:	20000f0c 	.word	0x20000f0c
 800a860:	e000ed04 	.word	0xe000ed04

0800a864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a86a:	4b05      	ldr	r3, [pc, #20]	; (800a880 <xTaskGetTickCount+0x1c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a870:	687b      	ldr	r3, [r7, #4]
}
 800a872:	4618      	mov	r0, r3
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20000f00 	.word	0x20000f00

0800a884 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a88a:	f001 fa6d 	bl	800bd68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a88e:	2300      	movs	r3, #0
 800a890:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a892:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <xTaskGetTickCountFromISR+0x20>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a898:	683b      	ldr	r3, [r7, #0]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000f00 	.word	0x20000f00

0800a8a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8b2:	4b4f      	ldr	r3, [pc, #316]	; (800a9f0 <xTaskIncrementTick+0x148>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f040 808f 	bne.w	800a9da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8bc:	4b4d      	ldr	r3, [pc, #308]	; (800a9f4 <xTaskIncrementTick+0x14c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8c4:	4a4b      	ldr	r2, [pc, #300]	; (800a9f4 <xTaskIncrementTick+0x14c>)
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d120      	bne.n	800a912 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8d0:	4b49      	ldr	r3, [pc, #292]	; (800a9f8 <xTaskIncrementTick+0x150>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	603b      	str	r3, [r7, #0]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <xTaskIncrementTick+0x46>
 800a8f0:	4b41      	ldr	r3, [pc, #260]	; (800a9f8 <xTaskIncrementTick+0x150>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	4b41      	ldr	r3, [pc, #260]	; (800a9fc <xTaskIncrementTick+0x154>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a3f      	ldr	r2, [pc, #252]	; (800a9f8 <xTaskIncrementTick+0x150>)
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	4a3f      	ldr	r2, [pc, #252]	; (800a9fc <xTaskIncrementTick+0x154>)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	4b3e      	ldr	r3, [pc, #248]	; (800aa00 <xTaskIncrementTick+0x158>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3301      	adds	r3, #1
 800a90a:	4a3d      	ldr	r2, [pc, #244]	; (800aa00 <xTaskIncrementTick+0x158>)
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	f000 fad1 	bl	800aeb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a912:	4b3c      	ldr	r3, [pc, #240]	; (800aa04 <xTaskIncrementTick+0x15c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d349      	bcc.n	800a9b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a91c:	4b36      	ldr	r3, [pc, #216]	; (800a9f8 <xTaskIncrementTick+0x150>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d104      	bne.n	800a930 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a926:	4b37      	ldr	r3, [pc, #220]	; (800aa04 <xTaskIncrementTick+0x15c>)
 800a928:	f04f 32ff 	mov.w	r2, #4294967295
 800a92c:	601a      	str	r2, [r3, #0]
					break;
 800a92e:	e03f      	b.n	800a9b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a930:	4b31      	ldr	r3, [pc, #196]	; (800a9f8 <xTaskIncrementTick+0x150>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	429a      	cmp	r2, r3
 800a946:	d203      	bcs.n	800a950 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a948:	4a2e      	ldr	r2, [pc, #184]	; (800aa04 <xTaskIncrementTick+0x15c>)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a94e:	e02f      	b.n	800a9b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	3304      	adds	r3, #4
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fc65 	bl	8009224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	3318      	adds	r3, #24
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fc5c 	bl	8009224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a970:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <xTaskIncrementTick+0x160>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d903      	bls.n	800a980 <xTaskIncrementTick+0xd8>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	4a22      	ldr	r2, [pc, #136]	; (800aa08 <xTaskIncrementTick+0x160>)
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a984:	4613      	mov	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4a1f      	ldr	r2, [pc, #124]	; (800aa0c <xTaskIncrementTick+0x164>)
 800a98e:	441a      	add	r2, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	3304      	adds	r3, #4
 800a994:	4619      	mov	r1, r3
 800a996:	4610      	mov	r0, r2
 800a998:	f7fe fbe7 	bl	800916a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a0:	4b1b      	ldr	r3, [pc, #108]	; (800aa10 <xTaskIncrementTick+0x168>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d3b8      	bcc.n	800a91c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9ae:	e7b5      	b.n	800a91c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9b0:	4b17      	ldr	r3, [pc, #92]	; (800aa10 <xTaskIncrementTick+0x168>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b6:	4915      	ldr	r1, [pc, #84]	; (800aa0c <xTaskIncrementTick+0x164>)
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	440b      	add	r3, r1
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d901      	bls.n	800a9cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9cc:	4b11      	ldr	r3, [pc, #68]	; (800aa14 <xTaskIncrementTick+0x16c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d007      	beq.n	800a9e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	e004      	b.n	800a9e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <xTaskIncrementTick+0x170>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	4a0d      	ldr	r2, [pc, #52]	; (800aa18 <xTaskIncrementTick+0x170>)
 800a9e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9e4:	697b      	ldr	r3, [r7, #20]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20000f24 	.word	0x20000f24
 800a9f4:	20000f00 	.word	0x20000f00
 800a9f8:	20000eb4 	.word	0x20000eb4
 800a9fc:	20000eb8 	.word	0x20000eb8
 800aa00:	20000f14 	.word	0x20000f14
 800aa04:	20000f1c 	.word	0x20000f1c
 800aa08:	20000f04 	.word	0x20000f04
 800aa0c:	20000a2c 	.word	0x20000a2c
 800aa10:	20000a28 	.word	0x20000a28
 800aa14:	20000f10 	.word	0x20000f10
 800aa18:	20000f0c 	.word	0x20000f0c

0800aa1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa22:	4b28      	ldr	r3, [pc, #160]	; (800aac4 <vTaskSwitchContext+0xa8>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa2a:	4b27      	ldr	r3, [pc, #156]	; (800aac8 <vTaskSwitchContext+0xac>)
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa30:	e041      	b.n	800aab6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800aa32:	4b25      	ldr	r3, [pc, #148]	; (800aac8 <vTaskSwitchContext+0xac>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa38:	4b24      	ldr	r3, [pc, #144]	; (800aacc <vTaskSwitchContext+0xb0>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	e010      	b.n	800aa62 <vTaskSwitchContext+0x46>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10a      	bne.n	800aa5c <vTaskSwitchContext+0x40>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	607b      	str	r3, [r7, #4]
}
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <vTaskSwitchContext+0x3e>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	491b      	ldr	r1, [pc, #108]	; (800aad0 <vTaskSwitchContext+0xb4>)
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	440b      	add	r3, r1
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0e4      	beq.n	800aa40 <vTaskSwitchContext+0x24>
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4a13      	ldr	r2, [pc, #76]	; (800aad0 <vTaskSwitchContext+0xb4>)
 800aa82:	4413      	add	r3, r2
 800aa84:	60bb      	str	r3, [r7, #8]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	605a      	str	r2, [r3, #4]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	3308      	adds	r3, #8
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d104      	bne.n	800aaa6 <vTaskSwitchContext+0x8a>
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	605a      	str	r2, [r3, #4]
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	4a09      	ldr	r2, [pc, #36]	; (800aad4 <vTaskSwitchContext+0xb8>)
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	4a06      	ldr	r2, [pc, #24]	; (800aacc <vTaskSwitchContext+0xb0>)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6013      	str	r3, [r2, #0]
}
 800aab6:	bf00      	nop
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20000f24 	.word	0x20000f24
 800aac8:	20000f10 	.word	0x20000f10
 800aacc:	20000f04 	.word	0x20000f04
 800aad0:	20000a2c 	.word	0x20000a2c
 800aad4:	20000a28 	.word	0x20000a28

0800aad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	60fb      	str	r3, [r7, #12]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aafe:	4b07      	ldr	r3, [pc, #28]	; (800ab1c <vTaskPlaceOnEventList+0x44>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3318      	adds	r3, #24
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7fe fb53 	bl	80091b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	6838      	ldr	r0, [r7, #0]
 800ab10:	f000 fb7a 	bl	800b208 <prvAddCurrentTaskToDelayedList>
}
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20000a28 	.word	0x20000a28

0800ab20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10a      	bne.n	800ab48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	617b      	str	r3, [r7, #20]
}
 800ab44:	bf00      	nop
 800ab46:	e7fe      	b.n	800ab46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab48:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3318      	adds	r3, #24
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7fe fb0a 	bl	800916a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ab5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	68b8      	ldr	r0, [r7, #8]
 800ab66:	f000 fb4f 	bl	800b208 <prvAddCurrentTaskToDelayedList>
	}
 800ab6a:	bf00      	nop
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20000a28 	.word	0x20000a28

0800ab78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10a      	bne.n	800aba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	60fb      	str	r3, [r7, #12]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	3318      	adds	r3, #24
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fe fb3b 	bl	8009224 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abae:	4b1e      	ldr	r3, [pc, #120]	; (800ac28 <xTaskRemoveFromEventList+0xb0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d11d      	bne.n	800abf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	3304      	adds	r3, #4
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fb32 	bl	8009224 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc4:	4b19      	ldr	r3, [pc, #100]	; (800ac2c <xTaskRemoveFromEventList+0xb4>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d903      	bls.n	800abd4 <xTaskRemoveFromEventList+0x5c>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	4a16      	ldr	r2, [pc, #88]	; (800ac2c <xTaskRemoveFromEventList+0xb4>)
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <xTaskRemoveFromEventList+0xb8>)
 800abe2:	441a      	add	r2, r3
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	3304      	adds	r3, #4
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f7fe fabd 	bl	800916a <vListInsertEnd>
 800abf0:	e005      	b.n	800abfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	3318      	adds	r3, #24
 800abf6:	4619      	mov	r1, r3
 800abf8:	480e      	ldr	r0, [pc, #56]	; (800ac34 <xTaskRemoveFromEventList+0xbc>)
 800abfa:	f7fe fab6 	bl	800916a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac02:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <xTaskRemoveFromEventList+0xc0>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d905      	bls.n	800ac18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <xTaskRemoveFromEventList+0xc4>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	e001      	b.n	800ac1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac1c:	697b      	ldr	r3, [r7, #20]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20000f24 	.word	0x20000f24
 800ac2c:	20000f04 	.word	0x20000f04
 800ac30:	20000a2c 	.word	0x20000a2c
 800ac34:	20000ebc 	.word	0x20000ebc
 800ac38:	20000a28 	.word	0x20000a28
 800ac3c:	20000f10 	.word	0x20000f10

0800ac40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac48:	4b06      	ldr	r3, [pc, #24]	; (800ac64 <vTaskInternalSetTimeOutState+0x24>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <vTaskInternalSetTimeOutState+0x28>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	605a      	str	r2, [r3, #4]
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	20000f14 	.word	0x20000f14
 800ac68:	20000f00 	.word	0x20000f00

0800ac6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	613b      	str	r3, [r7, #16]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	60fb      	str	r3, [r7, #12]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800acae:	f000 ff79 	bl	800bba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acb2:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <xTaskCheckForTimeOut+0xbc>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d102      	bne.n	800acd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800accc:	2300      	movs	r3, #0
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	e023      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	4b15      	ldr	r3, [pc, #84]	; (800ad2c <xTaskCheckForTimeOut+0xc0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d007      	beq.n	800acee <xTaskCheckForTimeOut+0x82>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	69ba      	ldr	r2, [r7, #24]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d302      	bcc.n	800acee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ace8:	2301      	movs	r3, #1
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	e015      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d20b      	bcs.n	800ad10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff ff9b 	bl	800ac40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	e004      	b.n	800ad1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad16:	2301      	movs	r3, #1
 800ad18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad1a:	f000 ff73 	bl	800bc04 <vPortExitCritical>

	return xReturn;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20000f00 	.word	0x20000f00
 800ad2c:	20000f14 	.word	0x20000f14

0800ad30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad34:	4b03      	ldr	r3, [pc, #12]	; (800ad44 <vTaskMissedYield+0x14>)
 800ad36:	2201      	movs	r2, #1
 800ad38:	601a      	str	r2, [r3, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	20000f10 	.word	0x20000f10

0800ad48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad50:	f000 f852 	bl	800adf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <prvIdleTask+0x28>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d9f9      	bls.n	800ad50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <prvIdleTask+0x2c>)
 800ad5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad6c:	e7f0      	b.n	800ad50 <prvIdleTask+0x8>
 800ad6e:	bf00      	nop
 800ad70:	20000a2c 	.word	0x20000a2c
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad7e:	2300      	movs	r3, #0
 800ad80:	607b      	str	r3, [r7, #4]
 800ad82:	e00c      	b.n	800ad9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4a12      	ldr	r2, [pc, #72]	; (800add8 <prvInitialiseTaskLists+0x60>)
 800ad90:	4413      	add	r3, r2
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe f9bc 	bl	8009110 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	607b      	str	r3, [r7, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b37      	cmp	r3, #55	; 0x37
 800ada2:	d9ef      	bls.n	800ad84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ada4:	480d      	ldr	r0, [pc, #52]	; (800addc <prvInitialiseTaskLists+0x64>)
 800ada6:	f7fe f9b3 	bl	8009110 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adaa:	480d      	ldr	r0, [pc, #52]	; (800ade0 <prvInitialiseTaskLists+0x68>)
 800adac:	f7fe f9b0 	bl	8009110 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800adb0:	480c      	ldr	r0, [pc, #48]	; (800ade4 <prvInitialiseTaskLists+0x6c>)
 800adb2:	f7fe f9ad 	bl	8009110 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adb6:	480c      	ldr	r0, [pc, #48]	; (800ade8 <prvInitialiseTaskLists+0x70>)
 800adb8:	f7fe f9aa 	bl	8009110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adbc:	480b      	ldr	r0, [pc, #44]	; (800adec <prvInitialiseTaskLists+0x74>)
 800adbe:	f7fe f9a7 	bl	8009110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adc2:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <prvInitialiseTaskLists+0x78>)
 800adc4:	4a05      	ldr	r2, [pc, #20]	; (800addc <prvInitialiseTaskLists+0x64>)
 800adc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <prvInitialiseTaskLists+0x7c>)
 800adca:	4a05      	ldr	r2, [pc, #20]	; (800ade0 <prvInitialiseTaskLists+0x68>)
 800adcc:	601a      	str	r2, [r3, #0]
}
 800adce:	bf00      	nop
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20000a2c 	.word	0x20000a2c
 800addc:	20000e8c 	.word	0x20000e8c
 800ade0:	20000ea0 	.word	0x20000ea0
 800ade4:	20000ebc 	.word	0x20000ebc
 800ade8:	20000ed0 	.word	0x20000ed0
 800adec:	20000ee8 	.word	0x20000ee8
 800adf0:	20000eb4 	.word	0x20000eb4
 800adf4:	20000eb8 	.word	0x20000eb8

0800adf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adfe:	e019      	b.n	800ae34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae00:	f000 fed0 	bl	800bba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae04:	4b10      	ldr	r3, [pc, #64]	; (800ae48 <prvCheckTasksWaitingTermination+0x50>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fa07 	bl	8009224 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <prvCheckTasksWaitingTermination+0x54>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4a0b      	ldr	r2, [pc, #44]	; (800ae4c <prvCheckTasksWaitingTermination+0x54>)
 800ae1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae20:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	4a0a      	ldr	r2, [pc, #40]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae2a:	f000 feeb 	bl	800bc04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f810 	bl	800ae54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <prvCheckTasksWaitingTermination+0x58>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e1      	bne.n	800ae00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae3c:	bf00      	nop
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20000ed0 	.word	0x20000ed0
 800ae4c:	20000efc 	.word	0x20000efc
 800ae50:	20000ee4 	.word	0x20000ee4

0800ae54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d108      	bne.n	800ae78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 f888 	bl	800bf80 <vPortFree>
				vPortFree( pxTCB );
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 f885 	bl	800bf80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae76:	e018      	b.n	800aeaa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d103      	bne.n	800ae8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f001 f87c 	bl	800bf80 <vPortFree>
	}
 800ae88:	e00f      	b.n	800aeaa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d00a      	beq.n	800aeaa <prvDeleteTCB+0x56>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60fb      	str	r3, [r7, #12]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <prvDeleteTCB+0x54>
	}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aeba:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <prvResetNextTaskUnblockTime+0x38>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d104      	bne.n	800aece <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aec4:	4b0a      	ldr	r3, [pc, #40]	; (800aef0 <prvResetNextTaskUnblockTime+0x3c>)
 800aec6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aecc:	e008      	b.n	800aee0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aece:	4b07      	ldr	r3, [pc, #28]	; (800aeec <prvResetNextTaskUnblockTime+0x38>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	4a04      	ldr	r2, [pc, #16]	; (800aef0 <prvResetNextTaskUnblockTime+0x3c>)
 800aede:	6013      	str	r3, [r2, #0]
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	20000eb4 	.word	0x20000eb4
 800aef0:	20000f1c 	.word	0x20000f1c

0800aef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aefa:	4b0b      	ldr	r3, [pc, #44]	; (800af28 <xTaskGetSchedulerState+0x34>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af02:	2301      	movs	r3, #1
 800af04:	607b      	str	r3, [r7, #4]
 800af06:	e008      	b.n	800af1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af08:	4b08      	ldr	r3, [pc, #32]	; (800af2c <xTaskGetSchedulerState+0x38>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d102      	bne.n	800af16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af10:	2302      	movs	r3, #2
 800af12:	607b      	str	r3, [r7, #4]
 800af14:	e001      	b.n	800af1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af16:	2300      	movs	r3, #0
 800af18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af1a:	687b      	ldr	r3, [r7, #4]
	}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	20000f08 	.word	0x20000f08
 800af2c:	20000f24 	.word	0x20000f24

0800af30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d051      	beq.n	800afea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4a:	4b2a      	ldr	r3, [pc, #168]	; (800aff4 <xTaskPriorityInherit+0xc4>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	429a      	cmp	r2, r3
 800af52:	d241      	bcs.n	800afd8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	db06      	blt.n	800af6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af5c:	4b25      	ldr	r3, [pc, #148]	; (800aff4 <xTaskPriorityInherit+0xc4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	6959      	ldr	r1, [r3, #20]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af72:	4613      	mov	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	4413      	add	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4a1f      	ldr	r2, [pc, #124]	; (800aff8 <xTaskPriorityInherit+0xc8>)
 800af7c:	4413      	add	r3, r2
 800af7e:	4299      	cmp	r1, r3
 800af80:	d122      	bne.n	800afc8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	3304      	adds	r3, #4
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe f94c 	bl	8009224 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af8c:	4b19      	ldr	r3, [pc, #100]	; (800aff4 <xTaskPriorityInherit+0xc4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9a:	4b18      	ldr	r3, [pc, #96]	; (800affc <xTaskPriorityInherit+0xcc>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d903      	bls.n	800afaa <xTaskPriorityInherit+0x7a>
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa6:	4a15      	ldr	r2, [pc, #84]	; (800affc <xTaskPriorityInherit+0xcc>)
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4a10      	ldr	r2, [pc, #64]	; (800aff8 <xTaskPriorityInherit+0xc8>)
 800afb8:	441a      	add	r2, r3
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	3304      	adds	r3, #4
 800afbe:	4619      	mov	r1, r3
 800afc0:	4610      	mov	r0, r2
 800afc2:	f7fe f8d2 	bl	800916a <vListInsertEnd>
 800afc6:	e004      	b.n	800afd2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800afc8:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <xTaskPriorityInherit+0xc4>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800afd2:	2301      	movs	r3, #1
 800afd4:	60fb      	str	r3, [r7, #12]
 800afd6:	e008      	b.n	800afea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <xTaskPriorityInherit+0xc4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d201      	bcs.n	800afea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800afe6:	2301      	movs	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afea:	68fb      	ldr	r3, [r7, #12]
	}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20000a28 	.word	0x20000a28
 800aff8:	20000a2c 	.word	0x20000a2c
 800affc:	20000f04 	.word	0x20000f04

0800b000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d056      	beq.n	800b0c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b016:	4b2e      	ldr	r3, [pc, #184]	; (800b0d0 <xTaskPriorityDisinherit+0xd0>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d00a      	beq.n	800b036 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	60bb      	str	r3, [r7, #8]
}
 800b050:	bf00      	nop
 800b052:	e7fe      	b.n	800b052 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b058:	1e5a      	subs	r2, r3, #1
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b066:	429a      	cmp	r2, r3
 800b068:	d02c      	beq.n	800b0c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d128      	bne.n	800b0c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	3304      	adds	r3, #4
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe f8d4 	bl	8009224 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b094:	4b0f      	ldr	r3, [pc, #60]	; (800b0d4 <xTaskPriorityDisinherit+0xd4>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d903      	bls.n	800b0a4 <xTaskPriorityDisinherit+0xa4>
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	4a0c      	ldr	r2, [pc, #48]	; (800b0d4 <xTaskPriorityDisinherit+0xd4>)
 800b0a2:	6013      	str	r3, [r2, #0]
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4a09      	ldr	r2, [pc, #36]	; (800b0d8 <xTaskPriorityDisinherit+0xd8>)
 800b0b2:	441a      	add	r2, r3
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	f7fe f855 	bl	800916a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0c4:	697b      	ldr	r3, [r7, #20]
	}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000a28 	.word	0x20000a28
 800b0d4:	20000f04 	.word	0x20000f04
 800b0d8:	20000a2c 	.word	0x20000a2c

0800b0dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d06a      	beq.n	800b1ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10a      	bne.n	800b112 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60fb      	str	r3, [r7, #12]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d902      	bls.n	800b122 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	61fb      	str	r3, [r7, #28]
 800b120:	e002      	b.n	800b128 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b126:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	69fa      	ldr	r2, [r7, #28]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d04b      	beq.n	800b1ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d146      	bne.n	800b1ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b13c:	4b25      	ldr	r3, [pc, #148]	; (800b1d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	429a      	cmp	r2, r3
 800b144:	d10a      	bne.n	800b15c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	60bb      	str	r3, [r7, #8]
}
 800b158:	bf00      	nop
 800b15a:	e7fe      	b.n	800b15a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	db04      	blt.n	800b17a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	6959      	ldr	r1, [r3, #20]
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4a13      	ldr	r2, [pc, #76]	; (800b1d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b18a:	4413      	add	r3, r2
 800b18c:	4299      	cmp	r1, r3
 800b18e:	d11c      	bne.n	800b1ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	3304      	adds	r3, #4
 800b194:	4618      	mov	r0, r3
 800b196:	f7fe f845 	bl	8009224 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19e:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d903      	bls.n	800b1ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1aa:	4a0c      	ldr	r2, [pc, #48]	; (800b1dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4a07      	ldr	r2, [pc, #28]	; (800b1d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b1bc:	441a      	add	r2, r3
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	f7fd ffd0 	bl	800916a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1ca:	bf00      	nop
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20000a28 	.word	0x20000a28
 800b1d8:	20000a2c 	.word	0x20000a2c
 800b1dc:	20000f04 	.word	0x20000f04

0800b1e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b1e0:	b480      	push	{r7}
 800b1e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b1e4:	4b07      	ldr	r3, [pc, #28]	; (800b204 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d004      	beq.n	800b1f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1f2:	3201      	adds	r2, #1
 800b1f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b1f6:	4b03      	ldr	r3, [pc, #12]	; (800b204 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
	}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	20000a28 	.word	0x20000a28

0800b208 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b212:	4b21      	ldr	r3, [pc, #132]	; (800b298 <prvAddCurrentTaskToDelayedList+0x90>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b218:	4b20      	ldr	r3, [pc, #128]	; (800b29c <prvAddCurrentTaskToDelayedList+0x94>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3304      	adds	r3, #4
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe f800 	bl	8009224 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d10a      	bne.n	800b242 <prvAddCurrentTaskToDelayedList+0x3a>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d007      	beq.n	800b242 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b232:	4b1a      	ldr	r3, [pc, #104]	; (800b29c <prvAddCurrentTaskToDelayedList+0x94>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3304      	adds	r3, #4
 800b238:	4619      	mov	r1, r3
 800b23a:	4819      	ldr	r0, [pc, #100]	; (800b2a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b23c:	f7fd ff95 	bl	800916a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b240:	e026      	b.n	800b290 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4413      	add	r3, r2
 800b248:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b24a:	4b14      	ldr	r3, [pc, #80]	; (800b29c <prvAddCurrentTaskToDelayedList+0x94>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	429a      	cmp	r2, r3
 800b258:	d209      	bcs.n	800b26e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b25a:	4b12      	ldr	r3, [pc, #72]	; (800b2a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <prvAddCurrentTaskToDelayedList+0x94>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3304      	adds	r3, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7fd ffa3 	bl	80091b2 <vListInsert>
}
 800b26c:	e010      	b.n	800b290 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b26e:	4b0e      	ldr	r3, [pc, #56]	; (800b2a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	4b0a      	ldr	r3, [pc, #40]	; (800b29c <prvAddCurrentTaskToDelayedList+0x94>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3304      	adds	r3, #4
 800b278:	4619      	mov	r1, r3
 800b27a:	4610      	mov	r0, r2
 800b27c:	f7fd ff99 	bl	80091b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b280:	4b0a      	ldr	r3, [pc, #40]	; (800b2ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	429a      	cmp	r2, r3
 800b288:	d202      	bcs.n	800b290 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b28a:	4a08      	ldr	r2, [pc, #32]	; (800b2ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	6013      	str	r3, [r2, #0]
}
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	20000f00 	.word	0x20000f00
 800b29c:	20000a28 	.word	0x20000a28
 800b2a0:	20000ee8 	.word	0x20000ee8
 800b2a4:	20000eb8 	.word	0x20000eb8
 800b2a8:	20000eb4 	.word	0x20000eb4
 800b2ac:	20000f1c 	.word	0x20000f1c

0800b2b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	; 0x28
 800b2b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b2ba:	f000 fb07 	bl	800b8cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b2be:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <xTimerCreateTimerTask+0x80>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d021      	beq.n	800b30a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b2ce:	1d3a      	adds	r2, r7, #4
 800b2d0:	f107 0108 	add.w	r1, r7, #8
 800b2d4:	f107 030c 	add.w	r3, r7, #12
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fd feff 	bl	80090dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	9202      	str	r2, [sp, #8]
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	460a      	mov	r2, r1
 800b2f0:	4910      	ldr	r1, [pc, #64]	; (800b334 <xTimerCreateTimerTask+0x84>)
 800b2f2:	4811      	ldr	r0, [pc, #68]	; (800b338 <xTimerCreateTimerTask+0x88>)
 800b2f4:	f7fe ffce 	bl	800a294 <xTaskCreateStatic>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	4a10      	ldr	r2, [pc, #64]	; (800b33c <xTimerCreateTimerTask+0x8c>)
 800b2fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <xTimerCreateTimerTask+0x8c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b306:	2301      	movs	r3, #1
 800b308:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10a      	bne.n	800b326 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	613b      	str	r3, [r7, #16]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b326:	697b      	ldr	r3, [r7, #20]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20000f58 	.word	0x20000f58
 800b334:	0800d5fc 	.word	0x0800d5fc
 800b338:	0800b475 	.word	0x0800b475
 800b33c:	20000f5c 	.word	0x20000f5c

0800b340 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b08a      	sub	sp, #40	; 0x28
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b34e:	2300      	movs	r3, #0
 800b350:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	623b      	str	r3, [r7, #32]
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b36e:	4b1a      	ldr	r3, [pc, #104]	; (800b3d8 <xTimerGenericCommand+0x98>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d02a      	beq.n	800b3cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b05      	cmp	r3, #5
 800b386:	dc18      	bgt.n	800b3ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b388:	f7ff fdb4 	bl	800aef4 <xTaskGetSchedulerState>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d109      	bne.n	800b3a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b392:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <xTimerGenericCommand+0x98>)
 800b394:	6818      	ldr	r0, [r3, #0]
 800b396:	f107 0110 	add.w	r1, r7, #16
 800b39a:	2300      	movs	r3, #0
 800b39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b39e:	f7fe f913 	bl	80095c8 <xQueueGenericSend>
 800b3a2:	6278      	str	r0, [r7, #36]	; 0x24
 800b3a4:	e012      	b.n	800b3cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3a6:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <xTimerGenericCommand+0x98>)
 800b3a8:	6818      	ldr	r0, [r3, #0]
 800b3aa:	f107 0110 	add.w	r1, r7, #16
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f7fe f909 	bl	80095c8 <xQueueGenericSend>
 800b3b6:	6278      	str	r0, [r7, #36]	; 0x24
 800b3b8:	e008      	b.n	800b3cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b3ba:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <xTimerGenericCommand+0x98>)
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	f107 0110 	add.w	r1, r7, #16
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	f7fe f9fd 	bl	80097c4 <xQueueGenericSendFromISR>
 800b3ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3728      	adds	r7, #40	; 0x28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000f58 	.word	0x20000f58

0800b3dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b088      	sub	sp, #32
 800b3e0:	af02      	add	r7, sp, #8
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e6:	4b22      	ldr	r3, [pc, #136]	; (800b470 <prvProcessExpiredTimer+0x94>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fd ff15 	bl	8009224 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d022      	beq.n	800b44e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	699a      	ldr	r2, [r3, #24]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	18d1      	adds	r1, r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	6978      	ldr	r0, [r7, #20]
 800b416:	f000 f8d1 	bl	800b5bc <prvInsertTimerInActiveList>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d01f      	beq.n	800b460 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b420:	2300      	movs	r3, #0
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	2300      	movs	r3, #0
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	2100      	movs	r1, #0
 800b42a:	6978      	ldr	r0, [r7, #20]
 800b42c:	f7ff ff88 	bl	800b340 <xTimerGenericCommand>
 800b430:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d113      	bne.n	800b460 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	60fb      	str	r3, [r7, #12]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b454:	f023 0301 	bic.w	r3, r3, #1
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	6978      	ldr	r0, [r7, #20]
 800b466:	4798      	blx	r3
}
 800b468:	bf00      	nop
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000f50 	.word	0x20000f50

0800b474 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f857 	bl	800b534 <prvGetNextExpireTime>
 800b486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	4619      	mov	r1, r3
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 f803 	bl	800b498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b492:	f000 f8d5 	bl	800b640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b496:	e7f1      	b.n	800b47c <prvTimerTask+0x8>

0800b498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4a2:	f7ff f933 	bl	800a70c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4a6:	f107 0308 	add.w	r3, r7, #8
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 f866 	bl	800b57c <prvSampleTimeNow>
 800b4b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d130      	bne.n	800b51a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10a      	bne.n	800b4d4 <prvProcessTimerOrBlockTask+0x3c>
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d806      	bhi.n	800b4d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b4c6:	f7ff f92f 	bl	800a728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b4ca:	68f9      	ldr	r1, [r7, #12]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff ff85 	bl	800b3dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b4d2:	e024      	b.n	800b51e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d008      	beq.n	800b4ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b4da:	4b13      	ldr	r3, [pc, #76]	; (800b528 <prvProcessTimerOrBlockTask+0x90>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <prvProcessTimerOrBlockTask+0x50>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e000      	b.n	800b4ea <prvProcessTimerOrBlockTask+0x52>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4ec:	4b0f      	ldr	r3, [pc, #60]	; (800b52c <prvProcessTimerOrBlockTask+0x94>)
 800b4ee:	6818      	ldr	r0, [r3, #0]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	f7fe fe97 	bl	800a22c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4fe:	f7ff f913 	bl	800a728 <xTaskResumeAll>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b508:	4b09      	ldr	r3, [pc, #36]	; (800b530 <prvProcessTimerOrBlockTask+0x98>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
}
 800b518:	e001      	b.n	800b51e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b51a:	f7ff f905 	bl	800a728 <xTaskResumeAll>
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	20000f54 	.word	0x20000f54
 800b52c:	20000f58 	.word	0x20000f58
 800b530:	e000ed04 	.word	0xe000ed04

0800b534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b53c:	4b0e      	ldr	r3, [pc, #56]	; (800b578 <prvGetNextExpireTime+0x44>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <prvGetNextExpireTime+0x16>
 800b546:	2201      	movs	r2, #1
 800b548:	e000      	b.n	800b54c <prvGetNextExpireTime+0x18>
 800b54a:	2200      	movs	r2, #0
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d105      	bne.n	800b564 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b558:	4b07      	ldr	r3, [pc, #28]	; (800b578 <prvGetNextExpireTime+0x44>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e001      	b.n	800b568 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b564:	2300      	movs	r3, #0
 800b566:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b568:	68fb      	ldr	r3, [r7, #12]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	20000f50 	.word	0x20000f50

0800b57c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b584:	f7ff f96e 	bl	800a864 <xTaskGetTickCount>
 800b588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b58a:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <prvSampleTimeNow+0x3c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	429a      	cmp	r2, r3
 800b592:	d205      	bcs.n	800b5a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b594:	f000 f936 	bl	800b804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	e002      	b.n	800b5a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5a6:	4a04      	ldr	r2, [pc, #16]	; (800b5b8 <prvSampleTimeNow+0x3c>)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000f60 	.word	0x20000f60

0800b5bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d812      	bhi.n	800b608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	1ad2      	subs	r2, r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d302      	bcc.n	800b5f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	e01b      	b.n	800b62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5f6:	4b10      	ldr	r3, [pc, #64]	; (800b638 <prvInsertTimerInActiveList+0x7c>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	4619      	mov	r1, r3
 800b600:	4610      	mov	r0, r2
 800b602:	f7fd fdd6 	bl	80091b2 <vListInsert>
 800b606:	e012      	b.n	800b62e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d206      	bcs.n	800b61e <prvInsertTimerInActiveList+0x62>
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	d302      	bcc.n	800b61e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b618:	2301      	movs	r3, #1
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	e007      	b.n	800b62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b61e:	4b07      	ldr	r3, [pc, #28]	; (800b63c <prvInsertTimerInActiveList+0x80>)
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7fd fdc2 	bl	80091b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b62e:	697b      	ldr	r3, [r7, #20]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	20000f54 	.word	0x20000f54
 800b63c:	20000f50 	.word	0x20000f50

0800b640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b08e      	sub	sp, #56	; 0x38
 800b644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b646:	e0ca      	b.n	800b7de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	da18      	bge.n	800b680 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b64e:	1d3b      	adds	r3, r7, #4
 800b650:	3304      	adds	r3, #4
 800b652:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10a      	bne.n	800b670 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	61fb      	str	r3, [r7, #28]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b676:	6850      	ldr	r0, [r2, #4]
 800b678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67a:	6892      	ldr	r2, [r2, #8]
 800b67c:	4611      	mov	r1, r2
 800b67e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f2c0 80ab 	blt.w	800b7de <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d004      	beq.n	800b69e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	3304      	adds	r3, #4
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fd fdc3 	bl	8009224 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b69e:	463b      	mov	r3, r7
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff ff6b 	bl	800b57c <prvSampleTimeNow>
 800b6a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b09      	cmp	r3, #9
 800b6ac:	f200 8096 	bhi.w	800b7dc <prvProcessReceivedCommands+0x19c>
 800b6b0:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <prvProcessReceivedCommands+0x78>)
 800b6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b6:	bf00      	nop
 800b6b8:	0800b6e1 	.word	0x0800b6e1
 800b6bc:	0800b6e1 	.word	0x0800b6e1
 800b6c0:	0800b6e1 	.word	0x0800b6e1
 800b6c4:	0800b755 	.word	0x0800b755
 800b6c8:	0800b769 	.word	0x0800b769
 800b6cc:	0800b7b3 	.word	0x0800b7b3
 800b6d0:	0800b6e1 	.word	0x0800b6e1
 800b6d4:	0800b6e1 	.word	0x0800b6e1
 800b6d8:	0800b755 	.word	0x0800b755
 800b6dc:	0800b769 	.word	0x0800b769
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6e6:	f043 0301 	orr.w	r3, r3, #1
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	18d1      	adds	r1, r2, r3
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b700:	f7ff ff5c 	bl	800b5bc <prvInsertTimerInActiveList>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d069      	beq.n	800b7de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b718:	f003 0304 	and.w	r3, r3, #4
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d05e      	beq.n	800b7de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	441a      	add	r2, r3
 800b728:	2300      	movs	r3, #0
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	2300      	movs	r3, #0
 800b72e:	2100      	movs	r1, #0
 800b730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b732:	f7ff fe05 	bl	800b340 <xTimerGenericCommand>
 800b736:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d14f      	bne.n	800b7de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	61bb      	str	r3, [r7, #24]
}
 800b750:	bf00      	nop
 800b752:	e7fe      	b.n	800b752 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b766:	e03a      	b.n	800b7de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b76e:	f043 0301 	orr.w	r3, r3, #1
 800b772:	b2da      	uxtb	r2, r3
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10a      	bne.n	800b79e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	617b      	str	r3, [r7, #20]
}
 800b79a:	bf00      	nop
 800b79c:	e7fe      	b.n	800b79c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	699a      	ldr	r2, [r3, #24]
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	18d1      	adds	r1, r2, r3
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ac:	f7ff ff06 	bl	800b5bc <prvInsertTimerInActiveList>
					break;
 800b7b0:	e015      	b.n	800b7de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7b8:	f003 0302 	and.w	r3, r3, #2
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d103      	bne.n	800b7c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b7c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7c2:	f000 fbdd 	bl	800bf80 <vPortFree>
 800b7c6:	e00a      	b.n	800b7de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ce:	f023 0301 	bic.w	r3, r3, #1
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b7da:	e000      	b.n	800b7de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b7dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7de:	4b08      	ldr	r3, [pc, #32]	; (800b800 <prvProcessReceivedCommands+0x1c0>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	1d39      	adds	r1, r7, #4
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe f914 	bl	8009a14 <xQueueReceive>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f47f af2a 	bne.w	800b648 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b7f4:	bf00      	nop
 800b7f6:	bf00      	nop
 800b7f8:	3730      	adds	r7, #48	; 0x30
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	20000f58 	.word	0x20000f58

0800b804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b80a:	e048      	b.n	800b89e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b80c:	4b2d      	ldr	r3, [pc, #180]	; (800b8c4 <prvSwitchTimerLists+0xc0>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b816:	4b2b      	ldr	r3, [pc, #172]	; (800b8c4 <prvSwitchTimerLists+0xc0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	3304      	adds	r3, #4
 800b824:	4618      	mov	r0, r3
 800b826:	f7fd fcfd 	bl	8009224 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b838:	f003 0304 	and.w	r3, r3, #4
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d02e      	beq.n	800b89e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	4413      	add	r3, r2
 800b848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d90e      	bls.n	800b870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b85e:	4b19      	ldr	r3, [pc, #100]	; (800b8c4 <prvSwitchTimerLists+0xc0>)
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3304      	adds	r3, #4
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f7fd fca2 	bl	80091b2 <vListInsert>
 800b86e:	e016      	b.n	800b89e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b870:	2300      	movs	r3, #0
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	2300      	movs	r3, #0
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	2100      	movs	r1, #0
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff fd60 	bl	800b340 <xTimerGenericCommand>
 800b880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10a      	bne.n	800b89e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	603b      	str	r3, [r7, #0]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b89e:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <prvSwitchTimerLists+0xc0>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1b1      	bne.n	800b80c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8a8:	4b06      	ldr	r3, [pc, #24]	; (800b8c4 <prvSwitchTimerLists+0xc0>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8ae:	4b06      	ldr	r3, [pc, #24]	; (800b8c8 <prvSwitchTimerLists+0xc4>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a04      	ldr	r2, [pc, #16]	; (800b8c4 <prvSwitchTimerLists+0xc0>)
 800b8b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8b6:	4a04      	ldr	r2, [pc, #16]	; (800b8c8 <prvSwitchTimerLists+0xc4>)
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	6013      	str	r3, [r2, #0]
}
 800b8bc:	bf00      	nop
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	20000f50 	.word	0x20000f50
 800b8c8:	20000f54 	.word	0x20000f54

0800b8cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8d2:	f000 f967 	bl	800bba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8d6:	4b15      	ldr	r3, [pc, #84]	; (800b92c <prvCheckForValidListAndQueue+0x60>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d120      	bne.n	800b920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b8de:	4814      	ldr	r0, [pc, #80]	; (800b930 <prvCheckForValidListAndQueue+0x64>)
 800b8e0:	f7fd fc16 	bl	8009110 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8e4:	4813      	ldr	r0, [pc, #76]	; (800b934 <prvCheckForValidListAndQueue+0x68>)
 800b8e6:	f7fd fc13 	bl	8009110 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8ea:	4b13      	ldr	r3, [pc, #76]	; (800b938 <prvCheckForValidListAndQueue+0x6c>)
 800b8ec:	4a10      	ldr	r2, [pc, #64]	; (800b930 <prvCheckForValidListAndQueue+0x64>)
 800b8ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8f0:	4b12      	ldr	r3, [pc, #72]	; (800b93c <prvCheckForValidListAndQueue+0x70>)
 800b8f2:	4a10      	ldr	r2, [pc, #64]	; (800b934 <prvCheckForValidListAndQueue+0x68>)
 800b8f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	4b11      	ldr	r3, [pc, #68]	; (800b940 <prvCheckForValidListAndQueue+0x74>)
 800b8fc:	4a11      	ldr	r2, [pc, #68]	; (800b944 <prvCheckForValidListAndQueue+0x78>)
 800b8fe:	2110      	movs	r1, #16
 800b900:	200a      	movs	r0, #10
 800b902:	f7fd fd21 	bl	8009348 <xQueueGenericCreateStatic>
 800b906:	4603      	mov	r3, r0
 800b908:	4a08      	ldr	r2, [pc, #32]	; (800b92c <prvCheckForValidListAndQueue+0x60>)
 800b90a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b90c:	4b07      	ldr	r3, [pc, #28]	; (800b92c <prvCheckForValidListAndQueue+0x60>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b914:	4b05      	ldr	r3, [pc, #20]	; (800b92c <prvCheckForValidListAndQueue+0x60>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	490b      	ldr	r1, [pc, #44]	; (800b948 <prvCheckForValidListAndQueue+0x7c>)
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe fc32 	bl	800a184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b920:	f000 f970 	bl	800bc04 <vPortExitCritical>
}
 800b924:	bf00      	nop
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20000f58 	.word	0x20000f58
 800b930:	20000f28 	.word	0x20000f28
 800b934:	20000f3c 	.word	0x20000f3c
 800b938:	20000f50 	.word	0x20000f50
 800b93c:	20000f54 	.word	0x20000f54
 800b940:	20001004 	.word	0x20001004
 800b944:	20000f64 	.word	0x20000f64
 800b948:	0800d604 	.word	0x0800d604

0800b94c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3b04      	subs	r3, #4
 800b95c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3b04      	subs	r3, #4
 800b96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f023 0201 	bic.w	r2, r3, #1
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	3b04      	subs	r3, #4
 800b97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b97c:	4a0c      	ldr	r2, [pc, #48]	; (800b9b0 <pxPortInitialiseStack+0x64>)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	3b14      	subs	r3, #20
 800b986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3b04      	subs	r3, #4
 800b992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f06f 0202 	mvn.w	r2, #2
 800b99a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3b20      	subs	r3, #32
 800b9a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	0800b9b5 	.word	0x0800b9b5

0800b9b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9be:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <prvTaskExitError+0x54>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c6:	d00a      	beq.n	800b9de <prvTaskExitError+0x2a>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	60fb      	str	r3, [r7, #12]
}
 800b9da:	bf00      	nop
 800b9dc:	e7fe      	b.n	800b9dc <prvTaskExitError+0x28>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	60bb      	str	r3, [r7, #8]
}
 800b9f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9f2:	bf00      	nop
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0fc      	beq.n	800b9f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9fa:	bf00      	nop
 800b9fc:	bf00      	nop
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	20000010 	.word	0x20000010
 800ba0c:	00000000 	.word	0x00000000

0800ba10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba10:	4b07      	ldr	r3, [pc, #28]	; (800ba30 <pxCurrentTCBConst2>)
 800ba12:	6819      	ldr	r1, [r3, #0]
 800ba14:	6808      	ldr	r0, [r1, #0]
 800ba16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1a:	f380 8809 	msr	PSP, r0
 800ba1e:	f3bf 8f6f 	isb	sy
 800ba22:	f04f 0000 	mov.w	r0, #0
 800ba26:	f380 8811 	msr	BASEPRI, r0
 800ba2a:	4770      	bx	lr
 800ba2c:	f3af 8000 	nop.w

0800ba30 <pxCurrentTCBConst2>:
 800ba30:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba34:	bf00      	nop
 800ba36:	bf00      	nop

0800ba38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba38:	4808      	ldr	r0, [pc, #32]	; (800ba5c <prvPortStartFirstTask+0x24>)
 800ba3a:	6800      	ldr	r0, [r0, #0]
 800ba3c:	6800      	ldr	r0, [r0, #0]
 800ba3e:	f380 8808 	msr	MSP, r0
 800ba42:	f04f 0000 	mov.w	r0, #0
 800ba46:	f380 8814 	msr	CONTROL, r0
 800ba4a:	b662      	cpsie	i
 800ba4c:	b661      	cpsie	f
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	df00      	svc	0
 800ba58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba5a:	bf00      	nop
 800ba5c:	e000ed08 	.word	0xe000ed08

0800ba60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba66:	4b46      	ldr	r3, [pc, #280]	; (800bb80 <xPortStartScheduler+0x120>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a46      	ldr	r2, [pc, #280]	; (800bb84 <xPortStartScheduler+0x124>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d10a      	bne.n	800ba86 <xPortStartScheduler+0x26>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	613b      	str	r3, [r7, #16]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba86:	4b3e      	ldr	r3, [pc, #248]	; (800bb80 <xPortStartScheduler+0x120>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a3f      	ldr	r2, [pc, #252]	; (800bb88 <xPortStartScheduler+0x128>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d10a      	bne.n	800baa6 <xPortStartScheduler+0x46>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	60fb      	str	r3, [r7, #12]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baa6:	4b39      	ldr	r3, [pc, #228]	; (800bb8c <xPortStartScheduler+0x12c>)
 800baa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	22ff      	movs	r2, #255	; 0xff
 800bab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	b2db      	uxtb	r3, r3
 800babe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bac0:	78fb      	ldrb	r3, [r7, #3]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	4b31      	ldr	r3, [pc, #196]	; (800bb90 <xPortStartScheduler+0x130>)
 800bacc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bace:	4b31      	ldr	r3, [pc, #196]	; (800bb94 <xPortStartScheduler+0x134>)
 800bad0:	2207      	movs	r2, #7
 800bad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bad4:	e009      	b.n	800baea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bad6:	4b2f      	ldr	r3, [pc, #188]	; (800bb94 <xPortStartScheduler+0x134>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3b01      	subs	r3, #1
 800badc:	4a2d      	ldr	r2, [pc, #180]	; (800bb94 <xPortStartScheduler+0x134>)
 800bade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baea:	78fb      	ldrb	r3, [r7, #3]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf2:	2b80      	cmp	r3, #128	; 0x80
 800baf4:	d0ef      	beq.n	800bad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800baf6:	4b27      	ldr	r3, [pc, #156]	; (800bb94 <xPortStartScheduler+0x134>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f1c3 0307 	rsb	r3, r3, #7
 800bafe:	2b04      	cmp	r3, #4
 800bb00:	d00a      	beq.n	800bb18 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	60bb      	str	r3, [r7, #8]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb18:	4b1e      	ldr	r3, [pc, #120]	; (800bb94 <xPortStartScheduler+0x134>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	021b      	lsls	r3, r3, #8
 800bb1e:	4a1d      	ldr	r2, [pc, #116]	; (800bb94 <xPortStartScheduler+0x134>)
 800bb20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb22:	4b1c      	ldr	r3, [pc, #112]	; (800bb94 <xPortStartScheduler+0x134>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb2a:	4a1a      	ldr	r2, [pc, #104]	; (800bb94 <xPortStartScheduler+0x134>)
 800bb2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb36:	4b18      	ldr	r3, [pc, #96]	; (800bb98 <xPortStartScheduler+0x138>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a17      	ldr	r2, [pc, #92]	; (800bb98 <xPortStartScheduler+0x138>)
 800bb3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb42:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <xPortStartScheduler+0x138>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a14      	ldr	r2, [pc, #80]	; (800bb98 <xPortStartScheduler+0x138>)
 800bb48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb4e:	f000 f8dd 	bl	800bd0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb52:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <xPortStartScheduler+0x13c>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb58:	f000 f8fc 	bl	800bd54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb5c:	4b10      	ldr	r3, [pc, #64]	; (800bba0 <xPortStartScheduler+0x140>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a0f      	ldr	r2, [pc, #60]	; (800bba0 <xPortStartScheduler+0x140>)
 800bb62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb68:	f7ff ff66 	bl	800ba38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb6c:	f7fe ff56 	bl	800aa1c <vTaskSwitchContext>
	prvTaskExitError();
 800bb70:	f7ff ff20 	bl	800b9b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	e000ed00 	.word	0xe000ed00
 800bb84:	410fc271 	.word	0x410fc271
 800bb88:	410fc270 	.word	0x410fc270
 800bb8c:	e000e400 	.word	0xe000e400
 800bb90:	20001054 	.word	0x20001054
 800bb94:	20001058 	.word	0x20001058
 800bb98:	e000ed20 	.word	0xe000ed20
 800bb9c:	20000010 	.word	0x20000010
 800bba0:	e000ef34 	.word	0xe000ef34

0800bba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	607b      	str	r3, [r7, #4]
}
 800bbbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbbe:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <vPortEnterCritical+0x58>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	4a0d      	ldr	r2, [pc, #52]	; (800bbfc <vPortEnterCritical+0x58>)
 800bbc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbc8:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <vPortEnterCritical+0x58>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d10f      	bne.n	800bbf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbd0:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <vPortEnterCritical+0x5c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00a      	beq.n	800bbf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	603b      	str	r3, [r7, #0]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <vPortEnterCritical+0x4a>
	}
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	20000010 	.word	0x20000010
 800bc00:	e000ed04 	.word	0xe000ed04

0800bc04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc0a:	4b12      	ldr	r3, [pc, #72]	; (800bc54 <vPortExitCritical+0x50>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10a      	bne.n	800bc28 <vPortExitCritical+0x24>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	607b      	str	r3, [r7, #4]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc28:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <vPortExitCritical+0x50>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	4a09      	ldr	r2, [pc, #36]	; (800bc54 <vPortExitCritical+0x50>)
 800bc30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc32:	4b08      	ldr	r3, [pc, #32]	; (800bc54 <vPortExitCritical+0x50>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d105      	bne.n	800bc46 <vPortExitCritical+0x42>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	f383 8811 	msr	BASEPRI, r3
}
 800bc44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	20000010 	.word	0x20000010
	...

0800bc60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc60:	f3ef 8009 	mrs	r0, PSP
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	4b15      	ldr	r3, [pc, #84]	; (800bcc0 <pxCurrentTCBConst>)
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	f01e 0f10 	tst.w	lr, #16
 800bc70:	bf08      	it	eq
 800bc72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7a:	6010      	str	r0, [r2, #0]
 800bc7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc84:	f380 8811 	msr	BASEPRI, r0
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f7fe fec4 	bl	800aa1c <vTaskSwitchContext>
 800bc94:	f04f 0000 	mov.w	r0, #0
 800bc98:	f380 8811 	msr	BASEPRI, r0
 800bc9c:	bc09      	pop	{r0, r3}
 800bc9e:	6819      	ldr	r1, [r3, #0]
 800bca0:	6808      	ldr	r0, [r1, #0]
 800bca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca6:	f01e 0f10 	tst.w	lr, #16
 800bcaa:	bf08      	it	eq
 800bcac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcb0:	f380 8809 	msr	PSP, r0
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	f3af 8000 	nop.w

0800bcc0 <pxCurrentTCBConst>:
 800bcc0:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop

0800bcc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	607b      	str	r3, [r7, #4]
}
 800bce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bce2:	f7fe fde1 	bl	800a8a8 <xTaskIncrementTick>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d003      	beq.n	800bcf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcec:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <xPortSysTickHandler+0x40>)
 800bcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	f383 8811 	msr	BASEPRI, r3
}
 800bcfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	e000ed04 	.word	0xe000ed04

0800bd0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd10:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <vPortSetupTimerInterrupt+0x34>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd16:	4b0b      	ldr	r3, [pc, #44]	; (800bd44 <vPortSetupTimerInterrupt+0x38>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd1c:	4b0a      	ldr	r3, [pc, #40]	; (800bd48 <vPortSetupTimerInterrupt+0x3c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a0a      	ldr	r2, [pc, #40]	; (800bd4c <vPortSetupTimerInterrupt+0x40>)
 800bd22:	fba2 2303 	umull	r2, r3, r2, r3
 800bd26:	099b      	lsrs	r3, r3, #6
 800bd28:	4a09      	ldr	r2, [pc, #36]	; (800bd50 <vPortSetupTimerInterrupt+0x44>)
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd2e:	4b04      	ldr	r3, [pc, #16]	; (800bd40 <vPortSetupTimerInterrupt+0x34>)
 800bd30:	2207      	movs	r2, #7
 800bd32:	601a      	str	r2, [r3, #0]
}
 800bd34:	bf00      	nop
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	e000e010 	.word	0xe000e010
 800bd44:	e000e018 	.word	0xe000e018
 800bd48:	20000000 	.word	0x20000000
 800bd4c:	10624dd3 	.word	0x10624dd3
 800bd50:	e000e014 	.word	0xe000e014

0800bd54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd64 <vPortEnableVFP+0x10>
 800bd58:	6801      	ldr	r1, [r0, #0]
 800bd5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd5e:	6001      	str	r1, [r0, #0]
 800bd60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd62:	bf00      	nop
 800bd64:	e000ed88 	.word	0xe000ed88

0800bd68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd6e:	f3ef 8305 	mrs	r3, IPSR
 800bd72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b0f      	cmp	r3, #15
 800bd78:	d914      	bls.n	800bda4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd7a:	4a17      	ldr	r2, [pc, #92]	; (800bdd8 <vPortValidateInterruptPriority+0x70>)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	4413      	add	r3, r2
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd84:	4b15      	ldr	r3, [pc, #84]	; (800bddc <vPortValidateInterruptPriority+0x74>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	7afa      	ldrb	r2, [r7, #11]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d20a      	bcs.n	800bda4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	607b      	str	r3, [r7, #4]
}
 800bda0:	bf00      	nop
 800bda2:	e7fe      	b.n	800bda2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bda4:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <vPortValidateInterruptPriority+0x78>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdac:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <vPortValidateInterruptPriority+0x7c>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d90a      	bls.n	800bdca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	603b      	str	r3, [r7, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <vPortValidateInterruptPriority+0x60>
	}
 800bdca:	bf00      	nop
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	e000e3f0 	.word	0xe000e3f0
 800bddc:	20001054 	.word	0x20001054
 800bde0:	e000ed0c 	.word	0xe000ed0c
 800bde4:	20001058 	.word	0x20001058

0800bde8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08a      	sub	sp, #40	; 0x28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdf4:	f7fe fc8a 	bl	800a70c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bdf8:	4b5b      	ldr	r3, [pc, #364]	; (800bf68 <pvPortMalloc+0x180>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be00:	f000 f920 	bl	800c044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be04:	4b59      	ldr	r3, [pc, #356]	; (800bf6c <pvPortMalloc+0x184>)
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4013      	ands	r3, r2
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f040 8093 	bne.w	800bf38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d01d      	beq.n	800be54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be18:	2208      	movs	r2, #8
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4413      	add	r3, r2
 800be1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f003 0307 	and.w	r3, r3, #7
 800be26:	2b00      	cmp	r3, #0
 800be28:	d014      	beq.n	800be54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f023 0307 	bic.w	r3, r3, #7
 800be30:	3308      	adds	r3, #8
 800be32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f003 0307 	and.w	r3, r3, #7
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00a      	beq.n	800be54 <pvPortMalloc+0x6c>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	617b      	str	r3, [r7, #20]
}
 800be50:	bf00      	nop
 800be52:	e7fe      	b.n	800be52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d06e      	beq.n	800bf38 <pvPortMalloc+0x150>
 800be5a:	4b45      	ldr	r3, [pc, #276]	; (800bf70 <pvPortMalloc+0x188>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	429a      	cmp	r2, r3
 800be62:	d869      	bhi.n	800bf38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be64:	4b43      	ldr	r3, [pc, #268]	; (800bf74 <pvPortMalloc+0x18c>)
 800be66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be68:	4b42      	ldr	r3, [pc, #264]	; (800bf74 <pvPortMalloc+0x18c>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be6e:	e004      	b.n	800be7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d903      	bls.n	800be8c <pvPortMalloc+0xa4>
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1f1      	bne.n	800be70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be8c:	4b36      	ldr	r3, [pc, #216]	; (800bf68 <pvPortMalloc+0x180>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be92:	429a      	cmp	r2, r3
 800be94:	d050      	beq.n	800bf38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2208      	movs	r2, #8
 800be9c:	4413      	add	r3, r2
 800be9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	2308      	movs	r3, #8
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d91f      	bls.n	800bef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800beb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4413      	add	r3, r2
 800bebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	f003 0307 	and.w	r3, r3, #7
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00a      	beq.n	800bee0 <pvPortMalloc+0xf8>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	613b      	str	r3, [r7, #16]
}
 800bedc:	bf00      	nop
 800bede:	e7fe      	b.n	800bede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	1ad2      	subs	r2, r2, r3
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bef2:	69b8      	ldr	r0, [r7, #24]
 800bef4:	f000 f908 	bl	800c108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bef8:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <pvPortMalloc+0x188>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	4a1b      	ldr	r2, [pc, #108]	; (800bf70 <pvPortMalloc+0x188>)
 800bf04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf06:	4b1a      	ldr	r3, [pc, #104]	; (800bf70 <pvPortMalloc+0x188>)
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	4b1b      	ldr	r3, [pc, #108]	; (800bf78 <pvPortMalloc+0x190>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d203      	bcs.n	800bf1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf12:	4b17      	ldr	r3, [pc, #92]	; (800bf70 <pvPortMalloc+0x188>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a18      	ldr	r2, [pc, #96]	; (800bf78 <pvPortMalloc+0x190>)
 800bf18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	4b13      	ldr	r3, [pc, #76]	; (800bf6c <pvPortMalloc+0x184>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	431a      	orrs	r2, r3
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf2e:	4b13      	ldr	r3, [pc, #76]	; (800bf7c <pvPortMalloc+0x194>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3301      	adds	r3, #1
 800bf34:	4a11      	ldr	r2, [pc, #68]	; (800bf7c <pvPortMalloc+0x194>)
 800bf36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf38:	f7fe fbf6 	bl	800a728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	f003 0307 	and.w	r3, r3, #7
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00a      	beq.n	800bf5c <pvPortMalloc+0x174>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	60fb      	str	r3, [r7, #12]
}
 800bf58:	bf00      	nop
 800bf5a:	e7fe      	b.n	800bf5a <pvPortMalloc+0x172>
	return pvReturn;
 800bf5c:	69fb      	ldr	r3, [r7, #28]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3728      	adds	r7, #40	; 0x28
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20004c64 	.word	0x20004c64
 800bf6c:	20004c78 	.word	0x20004c78
 800bf70:	20004c68 	.word	0x20004c68
 800bf74:	20004c5c 	.word	0x20004c5c
 800bf78:	20004c6c 	.word	0x20004c6c
 800bf7c:	20004c70 	.word	0x20004c70

0800bf80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d04d      	beq.n	800c02e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf92:	2308      	movs	r3, #8
 800bf94:	425b      	negs	r3, r3
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	4413      	add	r3, r2
 800bf9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	4b24      	ldr	r3, [pc, #144]	; (800c038 <vPortFree+0xb8>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10a      	bne.n	800bfc4 <vPortFree+0x44>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	60fb      	str	r3, [r7, #12]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00a      	beq.n	800bfe2 <vPortFree+0x62>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	60bb      	str	r3, [r7, #8]
}
 800bfde:	bf00      	nop
 800bfe0:	e7fe      	b.n	800bfe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	4b14      	ldr	r3, [pc, #80]	; (800c038 <vPortFree+0xb8>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4013      	ands	r3, r2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d01e      	beq.n	800c02e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d11a      	bne.n	800c02e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	4b0e      	ldr	r3, [pc, #56]	; (800c038 <vPortFree+0xb8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	43db      	mvns	r3, r3
 800c002:	401a      	ands	r2, r3
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c008:	f7fe fb80 	bl	800a70c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	4b0a      	ldr	r3, [pc, #40]	; (800c03c <vPortFree+0xbc>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4413      	add	r3, r2
 800c016:	4a09      	ldr	r2, [pc, #36]	; (800c03c <vPortFree+0xbc>)
 800c018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c01a:	6938      	ldr	r0, [r7, #16]
 800c01c:	f000 f874 	bl	800c108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <vPortFree+0xc0>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	3301      	adds	r3, #1
 800c026:	4a06      	ldr	r2, [pc, #24]	; (800c040 <vPortFree+0xc0>)
 800c028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c02a:	f7fe fb7d 	bl	800a728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c02e:	bf00      	nop
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20004c78 	.word	0x20004c78
 800c03c:	20004c68 	.word	0x20004c68
 800c040:	20004c74 	.word	0x20004c74

0800c044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c04a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c050:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <prvHeapInit+0xac>)
 800c052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00c      	beq.n	800c078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3307      	adds	r3, #7
 800c062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0307 	bic.w	r3, r3, #7
 800c06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	4a1f      	ldr	r2, [pc, #124]	; (800c0f0 <prvHeapInit+0xac>)
 800c074:	4413      	add	r3, r2
 800c076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c07c:	4a1d      	ldr	r2, [pc, #116]	; (800c0f4 <prvHeapInit+0xb0>)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c082:	4b1c      	ldr	r3, [pc, #112]	; (800c0f4 <prvHeapInit+0xb0>)
 800c084:	2200      	movs	r2, #0
 800c086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	4413      	add	r3, r2
 800c08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c090:	2208      	movs	r2, #8
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	1a9b      	subs	r3, r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f023 0307 	bic.w	r3, r3, #7
 800c09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	4a15      	ldr	r2, [pc, #84]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0a6:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0ae:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	1ad2      	subs	r2, r2, r3
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0c4:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <prvHeapInit+0xb8>)
 800c0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	4a09      	ldr	r2, [pc, #36]	; (800c100 <prvHeapInit+0xbc>)
 800c0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0dc:	4b09      	ldr	r3, [pc, #36]	; (800c104 <prvHeapInit+0xc0>)
 800c0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0e2:	601a      	str	r2, [r3, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	2000105c 	.word	0x2000105c
 800c0f4:	20004c5c 	.word	0x20004c5c
 800c0f8:	20004c64 	.word	0x20004c64
 800c0fc:	20004c6c 	.word	0x20004c6c
 800c100:	20004c68 	.word	0x20004c68
 800c104:	20004c78 	.word	0x20004c78

0800c108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c110:	4b28      	ldr	r3, [pc, #160]	; (800c1b4 <prvInsertBlockIntoFreeList+0xac>)
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	e002      	b.n	800c11c <prvInsertBlockIntoFreeList+0x14>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	429a      	cmp	r2, r3
 800c124:	d8f7      	bhi.n	800c116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	4413      	add	r3, r2
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	429a      	cmp	r2, r3
 800c136:	d108      	bne.n	800c14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	441a      	add	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	441a      	add	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d118      	bne.n	800c190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	4b15      	ldr	r3, [pc, #84]	; (800c1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	429a      	cmp	r2, r3
 800c168:	d00d      	beq.n	800c186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	441a      	add	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	e008      	b.n	800c198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c186:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	e003      	b.n	800c198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d002      	beq.n	800c1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	20004c5c 	.word	0x20004c5c
 800c1b8:	20004c64 	.word	0x20004c64

0800c1bc <std>:
 800c1bc:	2300      	movs	r3, #0
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1ca:	6083      	str	r3, [r0, #8]
 800c1cc:	8181      	strh	r1, [r0, #12]
 800c1ce:	6643      	str	r3, [r0, #100]	; 0x64
 800c1d0:	81c2      	strh	r2, [r0, #14]
 800c1d2:	6183      	str	r3, [r0, #24]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	2208      	movs	r2, #8
 800c1d8:	305c      	adds	r0, #92	; 0x5c
 800c1da:	f000 f9ff 	bl	800c5dc <memset>
 800c1de:	4b0d      	ldr	r3, [pc, #52]	; (800c214 <std+0x58>)
 800c1e0:	6263      	str	r3, [r4, #36]	; 0x24
 800c1e2:	4b0d      	ldr	r3, [pc, #52]	; (800c218 <std+0x5c>)
 800c1e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <std+0x60>)
 800c1e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1ea:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <std+0x64>)
 800c1ec:	6323      	str	r3, [r4, #48]	; 0x30
 800c1ee:	4b0d      	ldr	r3, [pc, #52]	; (800c224 <std+0x68>)
 800c1f0:	6224      	str	r4, [r4, #32]
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d006      	beq.n	800c204 <std+0x48>
 800c1f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c1fa:	4294      	cmp	r4, r2
 800c1fc:	d002      	beq.n	800c204 <std+0x48>
 800c1fe:	33d0      	adds	r3, #208	; 0xd0
 800c200:	429c      	cmp	r4, r3
 800c202:	d105      	bne.n	800c210 <std+0x54>
 800c204:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c20c:	f000 ba5e 	b.w	800c6cc <__retarget_lock_init_recursive>
 800c210:	bd10      	pop	{r4, pc}
 800c212:	bf00      	nop
 800c214:	0800c42d 	.word	0x0800c42d
 800c218:	0800c44f 	.word	0x0800c44f
 800c21c:	0800c487 	.word	0x0800c487
 800c220:	0800c4ab 	.word	0x0800c4ab
 800c224:	20004c7c 	.word	0x20004c7c

0800c228 <stdio_exit_handler>:
 800c228:	4a02      	ldr	r2, [pc, #8]	; (800c234 <stdio_exit_handler+0xc>)
 800c22a:	4903      	ldr	r1, [pc, #12]	; (800c238 <stdio_exit_handler+0x10>)
 800c22c:	4803      	ldr	r0, [pc, #12]	; (800c23c <stdio_exit_handler+0x14>)
 800c22e:	f000 b869 	b.w	800c304 <_fwalk_sglue>
 800c232:	bf00      	nop
 800c234:	20000014 	.word	0x20000014
 800c238:	0800cf95 	.word	0x0800cf95
 800c23c:	20000020 	.word	0x20000020

0800c240 <cleanup_stdio>:
 800c240:	6841      	ldr	r1, [r0, #4]
 800c242:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <cleanup_stdio+0x34>)
 800c244:	4299      	cmp	r1, r3
 800c246:	b510      	push	{r4, lr}
 800c248:	4604      	mov	r4, r0
 800c24a:	d001      	beq.n	800c250 <cleanup_stdio+0x10>
 800c24c:	f000 fea2 	bl	800cf94 <_fflush_r>
 800c250:	68a1      	ldr	r1, [r4, #8]
 800c252:	4b09      	ldr	r3, [pc, #36]	; (800c278 <cleanup_stdio+0x38>)
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <cleanup_stdio+0x1e>
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fe9b 	bl	800cf94 <_fflush_r>
 800c25e:	68e1      	ldr	r1, [r4, #12]
 800c260:	4b06      	ldr	r3, [pc, #24]	; (800c27c <cleanup_stdio+0x3c>)
 800c262:	4299      	cmp	r1, r3
 800c264:	d004      	beq.n	800c270 <cleanup_stdio+0x30>
 800c266:	4620      	mov	r0, r4
 800c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c26c:	f000 be92 	b.w	800cf94 <_fflush_r>
 800c270:	bd10      	pop	{r4, pc}
 800c272:	bf00      	nop
 800c274:	20004c7c 	.word	0x20004c7c
 800c278:	20004ce4 	.word	0x20004ce4
 800c27c:	20004d4c 	.word	0x20004d4c

0800c280 <global_stdio_init.part.0>:
 800c280:	b510      	push	{r4, lr}
 800c282:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <global_stdio_init.part.0+0x30>)
 800c284:	4c0b      	ldr	r4, [pc, #44]	; (800c2b4 <global_stdio_init.part.0+0x34>)
 800c286:	4a0c      	ldr	r2, [pc, #48]	; (800c2b8 <global_stdio_init.part.0+0x38>)
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	4620      	mov	r0, r4
 800c28c:	2200      	movs	r2, #0
 800c28e:	2104      	movs	r1, #4
 800c290:	f7ff ff94 	bl	800c1bc <std>
 800c294:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c298:	2201      	movs	r2, #1
 800c29a:	2109      	movs	r1, #9
 800c29c:	f7ff ff8e 	bl	800c1bc <std>
 800c2a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2aa:	2112      	movs	r1, #18
 800c2ac:	f7ff bf86 	b.w	800c1bc <std>
 800c2b0:	20004db4 	.word	0x20004db4
 800c2b4:	20004c7c 	.word	0x20004c7c
 800c2b8:	0800c229 	.word	0x0800c229

0800c2bc <__sfp_lock_acquire>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	; (800c2c4 <__sfp_lock_acquire+0x8>)
 800c2be:	f000 ba06 	b.w	800c6ce <__retarget_lock_acquire_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	20004dbd 	.word	0x20004dbd

0800c2c8 <__sfp_lock_release>:
 800c2c8:	4801      	ldr	r0, [pc, #4]	; (800c2d0 <__sfp_lock_release+0x8>)
 800c2ca:	f000 ba01 	b.w	800c6d0 <__retarget_lock_release_recursive>
 800c2ce:	bf00      	nop
 800c2d0:	20004dbd 	.word	0x20004dbd

0800c2d4 <__sinit>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	f7ff fff0 	bl	800c2bc <__sfp_lock_acquire>
 800c2dc:	6a23      	ldr	r3, [r4, #32]
 800c2de:	b11b      	cbz	r3, 800c2e8 <__sinit+0x14>
 800c2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2e4:	f7ff bff0 	b.w	800c2c8 <__sfp_lock_release>
 800c2e8:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <__sinit+0x28>)
 800c2ea:	6223      	str	r3, [r4, #32]
 800c2ec:	4b04      	ldr	r3, [pc, #16]	; (800c300 <__sinit+0x2c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1f5      	bne.n	800c2e0 <__sinit+0xc>
 800c2f4:	f7ff ffc4 	bl	800c280 <global_stdio_init.part.0>
 800c2f8:	e7f2      	b.n	800c2e0 <__sinit+0xc>
 800c2fa:	bf00      	nop
 800c2fc:	0800c241 	.word	0x0800c241
 800c300:	20004db4 	.word	0x20004db4

0800c304 <_fwalk_sglue>:
 800c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c308:	4607      	mov	r7, r0
 800c30a:	4688      	mov	r8, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	2600      	movs	r6, #0
 800c310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c314:	f1b9 0901 	subs.w	r9, r9, #1
 800c318:	d505      	bpl.n	800c326 <_fwalk_sglue+0x22>
 800c31a:	6824      	ldr	r4, [r4, #0]
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	d1f7      	bne.n	800c310 <_fwalk_sglue+0xc>
 800c320:	4630      	mov	r0, r6
 800c322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d907      	bls.n	800c33c <_fwalk_sglue+0x38>
 800c32c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c330:	3301      	adds	r3, #1
 800c332:	d003      	beq.n	800c33c <_fwalk_sglue+0x38>
 800c334:	4629      	mov	r1, r5
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	4306      	orrs	r6, r0
 800c33c:	3568      	adds	r5, #104	; 0x68
 800c33e:	e7e9      	b.n	800c314 <_fwalk_sglue+0x10>

0800c340 <iprintf>:
 800c340:	b40f      	push	{r0, r1, r2, r3}
 800c342:	b507      	push	{r0, r1, r2, lr}
 800c344:	4906      	ldr	r1, [pc, #24]	; (800c360 <iprintf+0x20>)
 800c346:	ab04      	add	r3, sp, #16
 800c348:	6808      	ldr	r0, [r1, #0]
 800c34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c34e:	6881      	ldr	r1, [r0, #8]
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	f000 faef 	bl	800c934 <_vfiprintf_r>
 800c356:	b003      	add	sp, #12
 800c358:	f85d eb04 	ldr.w	lr, [sp], #4
 800c35c:	b004      	add	sp, #16
 800c35e:	4770      	bx	lr
 800c360:	2000006c 	.word	0x2000006c

0800c364 <putchar>:
 800c364:	4b02      	ldr	r3, [pc, #8]	; (800c370 <putchar+0xc>)
 800c366:	4601      	mov	r1, r0
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	6882      	ldr	r2, [r0, #8]
 800c36c:	f000 be9c 	b.w	800d0a8 <_putc_r>
 800c370:	2000006c 	.word	0x2000006c

0800c374 <_puts_r>:
 800c374:	6a03      	ldr	r3, [r0, #32]
 800c376:	b570      	push	{r4, r5, r6, lr}
 800c378:	6884      	ldr	r4, [r0, #8]
 800c37a:	4605      	mov	r5, r0
 800c37c:	460e      	mov	r6, r1
 800c37e:	b90b      	cbnz	r3, 800c384 <_puts_r+0x10>
 800c380:	f7ff ffa8 	bl	800c2d4 <__sinit>
 800c384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c386:	07db      	lsls	r3, r3, #31
 800c388:	d405      	bmi.n	800c396 <_puts_r+0x22>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	0598      	lsls	r0, r3, #22
 800c38e:	d402      	bmi.n	800c396 <_puts_r+0x22>
 800c390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c392:	f000 f99c 	bl	800c6ce <__retarget_lock_acquire_recursive>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	0719      	lsls	r1, r3, #28
 800c39a:	d513      	bpl.n	800c3c4 <_puts_r+0x50>
 800c39c:	6923      	ldr	r3, [r4, #16]
 800c39e:	b18b      	cbz	r3, 800c3c4 <_puts_r+0x50>
 800c3a0:	3e01      	subs	r6, #1
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	60a3      	str	r3, [r4, #8]
 800c3ac:	b9e9      	cbnz	r1, 800c3ea <_puts_r+0x76>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	da2e      	bge.n	800c410 <_puts_r+0x9c>
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	210a      	movs	r1, #10
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 f87b 	bl	800c4b2 <__swbuf_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	d007      	beq.n	800c3d0 <_puts_r+0x5c>
 800c3c0:	250a      	movs	r5, #10
 800c3c2:	e007      	b.n	800c3d4 <_puts_r+0x60>
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 f8b0 	bl	800c52c <__swsetup_r>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d0e7      	beq.n	800c3a0 <_puts_r+0x2c>
 800c3d0:	f04f 35ff 	mov.w	r5, #4294967295
 800c3d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3d6:	07da      	lsls	r2, r3, #31
 800c3d8:	d405      	bmi.n	800c3e6 <_puts_r+0x72>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	059b      	lsls	r3, r3, #22
 800c3de:	d402      	bmi.n	800c3e6 <_puts_r+0x72>
 800c3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e2:	f000 f975 	bl	800c6d0 <__retarget_lock_release_recursive>
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	da04      	bge.n	800c3f8 <_puts_r+0x84>
 800c3ee:	69a2      	ldr	r2, [r4, #24]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	dc06      	bgt.n	800c402 <_puts_r+0x8e>
 800c3f4:	290a      	cmp	r1, #10
 800c3f6:	d004      	beq.n	800c402 <_puts_r+0x8e>
 800c3f8:	6823      	ldr	r3, [r4, #0]
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	6022      	str	r2, [r4, #0]
 800c3fe:	7019      	strb	r1, [r3, #0]
 800c400:	e7cf      	b.n	800c3a2 <_puts_r+0x2e>
 800c402:	4622      	mov	r2, r4
 800c404:	4628      	mov	r0, r5
 800c406:	f000 f854 	bl	800c4b2 <__swbuf_r>
 800c40a:	3001      	adds	r0, #1
 800c40c:	d1c9      	bne.n	800c3a2 <_puts_r+0x2e>
 800c40e:	e7df      	b.n	800c3d0 <_puts_r+0x5c>
 800c410:	6823      	ldr	r3, [r4, #0]
 800c412:	250a      	movs	r5, #10
 800c414:	1c5a      	adds	r2, r3, #1
 800c416:	6022      	str	r2, [r4, #0]
 800c418:	701d      	strb	r5, [r3, #0]
 800c41a:	e7db      	b.n	800c3d4 <_puts_r+0x60>

0800c41c <puts>:
 800c41c:	4b02      	ldr	r3, [pc, #8]	; (800c428 <puts+0xc>)
 800c41e:	4601      	mov	r1, r0
 800c420:	6818      	ldr	r0, [r3, #0]
 800c422:	f7ff bfa7 	b.w	800c374 <_puts_r>
 800c426:	bf00      	nop
 800c428:	2000006c 	.word	0x2000006c

0800c42c <__sread>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	460c      	mov	r4, r1
 800c430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c434:	f000 f8fc 	bl	800c630 <_read_r>
 800c438:	2800      	cmp	r0, #0
 800c43a:	bfab      	itete	ge
 800c43c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c43e:	89a3      	ldrhlt	r3, [r4, #12]
 800c440:	181b      	addge	r3, r3, r0
 800c442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c446:	bfac      	ite	ge
 800c448:	6563      	strge	r3, [r4, #84]	; 0x54
 800c44a:	81a3      	strhlt	r3, [r4, #12]
 800c44c:	bd10      	pop	{r4, pc}

0800c44e <__swrite>:
 800c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	461f      	mov	r7, r3
 800c454:	898b      	ldrh	r3, [r1, #12]
 800c456:	05db      	lsls	r3, r3, #23
 800c458:	4605      	mov	r5, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	4616      	mov	r6, r2
 800c45e:	d505      	bpl.n	800c46c <__swrite+0x1e>
 800c460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c464:	2302      	movs	r3, #2
 800c466:	2200      	movs	r2, #0
 800c468:	f000 f8d0 	bl	800c60c <_lseek_r>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	4632      	mov	r2, r6
 800c47a:	463b      	mov	r3, r7
 800c47c:	4628      	mov	r0, r5
 800c47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c482:	f000 b8e7 	b.w	800c654 <_write_r>

0800c486 <__sseek>:
 800c486:	b510      	push	{r4, lr}
 800c488:	460c      	mov	r4, r1
 800c48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48e:	f000 f8bd 	bl	800c60c <_lseek_r>
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	bf15      	itete	ne
 800c498:	6560      	strne	r0, [r4, #84]	; 0x54
 800c49a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c49e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4a2:	81a3      	strheq	r3, [r4, #12]
 800c4a4:	bf18      	it	ne
 800c4a6:	81a3      	strhne	r3, [r4, #12]
 800c4a8:	bd10      	pop	{r4, pc}

0800c4aa <__sclose>:
 800c4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ae:	f000 b89d 	b.w	800c5ec <_close_r>

0800c4b2 <__swbuf_r>:
 800c4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b4:	460e      	mov	r6, r1
 800c4b6:	4614      	mov	r4, r2
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	b118      	cbz	r0, 800c4c4 <__swbuf_r+0x12>
 800c4bc:	6a03      	ldr	r3, [r0, #32]
 800c4be:	b90b      	cbnz	r3, 800c4c4 <__swbuf_r+0x12>
 800c4c0:	f7ff ff08 	bl	800c2d4 <__sinit>
 800c4c4:	69a3      	ldr	r3, [r4, #24]
 800c4c6:	60a3      	str	r3, [r4, #8]
 800c4c8:	89a3      	ldrh	r3, [r4, #12]
 800c4ca:	071a      	lsls	r2, r3, #28
 800c4cc:	d525      	bpl.n	800c51a <__swbuf_r+0x68>
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	b31b      	cbz	r3, 800c51a <__swbuf_r+0x68>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	6922      	ldr	r2, [r4, #16]
 800c4d6:	1a98      	subs	r0, r3, r2
 800c4d8:	6963      	ldr	r3, [r4, #20]
 800c4da:	b2f6      	uxtb	r6, r6
 800c4dc:	4283      	cmp	r3, r0
 800c4de:	4637      	mov	r7, r6
 800c4e0:	dc04      	bgt.n	800c4ec <__swbuf_r+0x3a>
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f000 fd55 	bl	800cf94 <_fflush_r>
 800c4ea:	b9e0      	cbnz	r0, 800c526 <__swbuf_r+0x74>
 800c4ec:	68a3      	ldr	r3, [r4, #8]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	60a3      	str	r3, [r4, #8]
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	1c5a      	adds	r2, r3, #1
 800c4f6:	6022      	str	r2, [r4, #0]
 800c4f8:	701e      	strb	r6, [r3, #0]
 800c4fa:	6962      	ldr	r2, [r4, #20]
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d004      	beq.n	800c50c <__swbuf_r+0x5a>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	07db      	lsls	r3, r3, #31
 800c506:	d506      	bpl.n	800c516 <__swbuf_r+0x64>
 800c508:	2e0a      	cmp	r6, #10
 800c50a:	d104      	bne.n	800c516 <__swbuf_r+0x64>
 800c50c:	4621      	mov	r1, r4
 800c50e:	4628      	mov	r0, r5
 800c510:	f000 fd40 	bl	800cf94 <_fflush_r>
 800c514:	b938      	cbnz	r0, 800c526 <__swbuf_r+0x74>
 800c516:	4638      	mov	r0, r7
 800c518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51a:	4621      	mov	r1, r4
 800c51c:	4628      	mov	r0, r5
 800c51e:	f000 f805 	bl	800c52c <__swsetup_r>
 800c522:	2800      	cmp	r0, #0
 800c524:	d0d5      	beq.n	800c4d2 <__swbuf_r+0x20>
 800c526:	f04f 37ff 	mov.w	r7, #4294967295
 800c52a:	e7f4      	b.n	800c516 <__swbuf_r+0x64>

0800c52c <__swsetup_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4b2a      	ldr	r3, [pc, #168]	; (800c5d8 <__swsetup_r+0xac>)
 800c530:	4605      	mov	r5, r0
 800c532:	6818      	ldr	r0, [r3, #0]
 800c534:	460c      	mov	r4, r1
 800c536:	b118      	cbz	r0, 800c540 <__swsetup_r+0x14>
 800c538:	6a03      	ldr	r3, [r0, #32]
 800c53a:	b90b      	cbnz	r3, 800c540 <__swsetup_r+0x14>
 800c53c:	f7ff feca 	bl	800c2d4 <__sinit>
 800c540:	89a3      	ldrh	r3, [r4, #12]
 800c542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c546:	0718      	lsls	r0, r3, #28
 800c548:	d422      	bmi.n	800c590 <__swsetup_r+0x64>
 800c54a:	06d9      	lsls	r1, r3, #27
 800c54c:	d407      	bmi.n	800c55e <__swsetup_r+0x32>
 800c54e:	2309      	movs	r3, #9
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	f04f 30ff 	mov.w	r0, #4294967295
 800c55c:	e034      	b.n	800c5c8 <__swsetup_r+0x9c>
 800c55e:	0758      	lsls	r0, r3, #29
 800c560:	d512      	bpl.n	800c588 <__swsetup_r+0x5c>
 800c562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c564:	b141      	cbz	r1, 800c578 <__swsetup_r+0x4c>
 800c566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c56a:	4299      	cmp	r1, r3
 800c56c:	d002      	beq.n	800c574 <__swsetup_r+0x48>
 800c56e:	4628      	mov	r0, r5
 800c570:	f000 f8be 	bl	800c6f0 <_free_r>
 800c574:	2300      	movs	r3, #0
 800c576:	6363      	str	r3, [r4, #52]	; 0x34
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c57e:	81a3      	strh	r3, [r4, #12]
 800c580:	2300      	movs	r3, #0
 800c582:	6063      	str	r3, [r4, #4]
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	89a3      	ldrh	r3, [r4, #12]
 800c58a:	f043 0308 	orr.w	r3, r3, #8
 800c58e:	81a3      	strh	r3, [r4, #12]
 800c590:	6923      	ldr	r3, [r4, #16]
 800c592:	b94b      	cbnz	r3, 800c5a8 <__swsetup_r+0x7c>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c59a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c59e:	d003      	beq.n	800c5a8 <__swsetup_r+0x7c>
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	f000 fd44 	bl	800d030 <__smakebuf_r>
 800c5a8:	89a0      	ldrh	r0, [r4, #12]
 800c5aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5ae:	f010 0301 	ands.w	r3, r0, #1
 800c5b2:	d00a      	beq.n	800c5ca <__swsetup_r+0x9e>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60a3      	str	r3, [r4, #8]
 800c5b8:	6963      	ldr	r3, [r4, #20]
 800c5ba:	425b      	negs	r3, r3
 800c5bc:	61a3      	str	r3, [r4, #24]
 800c5be:	6923      	ldr	r3, [r4, #16]
 800c5c0:	b943      	cbnz	r3, 800c5d4 <__swsetup_r+0xa8>
 800c5c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5c6:	d1c4      	bne.n	800c552 <__swsetup_r+0x26>
 800c5c8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ca:	0781      	lsls	r1, r0, #30
 800c5cc:	bf58      	it	pl
 800c5ce:	6963      	ldrpl	r3, [r4, #20]
 800c5d0:	60a3      	str	r3, [r4, #8]
 800c5d2:	e7f4      	b.n	800c5be <__swsetup_r+0x92>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e7f7      	b.n	800c5c8 <__swsetup_r+0x9c>
 800c5d8:	2000006c 	.word	0x2000006c

0800c5dc <memset>:
 800c5dc:	4402      	add	r2, r0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d100      	bne.n	800c5e6 <memset+0xa>
 800c5e4:	4770      	bx	lr
 800c5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ea:	e7f9      	b.n	800c5e0 <memset+0x4>

0800c5ec <_close_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d06      	ldr	r5, [pc, #24]	; (800c608 <_close_r+0x1c>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	602b      	str	r3, [r5, #0]
 800c5f8:	f7f4 facb 	bl	8000b92 <_close>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	d102      	bne.n	800c606 <_close_r+0x1a>
 800c600:	682b      	ldr	r3, [r5, #0]
 800c602:	b103      	cbz	r3, 800c606 <_close_r+0x1a>
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	20004db8 	.word	0x20004db8

0800c60c <_lseek_r>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4d07      	ldr	r5, [pc, #28]	; (800c62c <_lseek_r+0x20>)
 800c610:	4604      	mov	r4, r0
 800c612:	4608      	mov	r0, r1
 800c614:	4611      	mov	r1, r2
 800c616:	2200      	movs	r2, #0
 800c618:	602a      	str	r2, [r5, #0]
 800c61a:	461a      	mov	r2, r3
 800c61c:	f7f4 fae0 	bl	8000be0 <_lseek>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_lseek_r+0x1e>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	b103      	cbz	r3, 800c62a <_lseek_r+0x1e>
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	20004db8 	.word	0x20004db8

0800c630 <_read_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	4d07      	ldr	r5, [pc, #28]	; (800c650 <_read_r+0x20>)
 800c634:	4604      	mov	r4, r0
 800c636:	4608      	mov	r0, r1
 800c638:	4611      	mov	r1, r2
 800c63a:	2200      	movs	r2, #0
 800c63c:	602a      	str	r2, [r5, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	f7f4 fa8a 	bl	8000b58 <_read>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d102      	bne.n	800c64e <_read_r+0x1e>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	b103      	cbz	r3, 800c64e <_read_r+0x1e>
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	20004db8 	.word	0x20004db8

0800c654 <_write_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d07      	ldr	r5, [pc, #28]	; (800c674 <_write_r+0x20>)
 800c658:	4604      	mov	r4, r0
 800c65a:	4608      	mov	r0, r1
 800c65c:	4611      	mov	r1, r2
 800c65e:	2200      	movs	r2, #0
 800c660:	602a      	str	r2, [r5, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	f7f4 f870 	bl	8000748 <_write>
 800c668:	1c43      	adds	r3, r0, #1
 800c66a:	d102      	bne.n	800c672 <_write_r+0x1e>
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	b103      	cbz	r3, 800c672 <_write_r+0x1e>
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	20004db8 	.word	0x20004db8

0800c678 <__errno>:
 800c678:	4b01      	ldr	r3, [pc, #4]	; (800c680 <__errno+0x8>)
 800c67a:	6818      	ldr	r0, [r3, #0]
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	2000006c 	.word	0x2000006c

0800c684 <__libc_init_array>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	4d0d      	ldr	r5, [pc, #52]	; (800c6bc <__libc_init_array+0x38>)
 800c688:	4c0d      	ldr	r4, [pc, #52]	; (800c6c0 <__libc_init_array+0x3c>)
 800c68a:	1b64      	subs	r4, r4, r5
 800c68c:	10a4      	asrs	r4, r4, #2
 800c68e:	2600      	movs	r6, #0
 800c690:	42a6      	cmp	r6, r4
 800c692:	d109      	bne.n	800c6a8 <__libc_init_array+0x24>
 800c694:	4d0b      	ldr	r5, [pc, #44]	; (800c6c4 <__libc_init_array+0x40>)
 800c696:	4c0c      	ldr	r4, [pc, #48]	; (800c6c8 <__libc_init_array+0x44>)
 800c698:	f000 fd6c 	bl	800d174 <_init>
 800c69c:	1b64      	subs	r4, r4, r5
 800c69e:	10a4      	asrs	r4, r4, #2
 800c6a0:	2600      	movs	r6, #0
 800c6a2:	42a6      	cmp	r6, r4
 800c6a4:	d105      	bne.n	800c6b2 <__libc_init_array+0x2e>
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ac:	4798      	blx	r3
 800c6ae:	3601      	adds	r6, #1
 800c6b0:	e7ee      	b.n	800c690 <__libc_init_array+0xc>
 800c6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b6:	4798      	blx	r3
 800c6b8:	3601      	adds	r6, #1
 800c6ba:	e7f2      	b.n	800c6a2 <__libc_init_array+0x1e>
 800c6bc:	0800db28 	.word	0x0800db28
 800c6c0:	0800db28 	.word	0x0800db28
 800c6c4:	0800db28 	.word	0x0800db28
 800c6c8:	0800db2c 	.word	0x0800db2c

0800c6cc <__retarget_lock_init_recursive>:
 800c6cc:	4770      	bx	lr

0800c6ce <__retarget_lock_acquire_recursive>:
 800c6ce:	4770      	bx	lr

0800c6d0 <__retarget_lock_release_recursive>:
 800c6d0:	4770      	bx	lr

0800c6d2 <memcpy>:
 800c6d2:	440a      	add	r2, r1
 800c6d4:	4291      	cmp	r1, r2
 800c6d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6da:	d100      	bne.n	800c6de <memcpy+0xc>
 800c6dc:	4770      	bx	lr
 800c6de:	b510      	push	{r4, lr}
 800c6e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6e8:	4291      	cmp	r1, r2
 800c6ea:	d1f9      	bne.n	800c6e0 <memcpy+0xe>
 800c6ec:	bd10      	pop	{r4, pc}
	...

0800c6f0 <_free_r>:
 800c6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6f2:	2900      	cmp	r1, #0
 800c6f4:	d044      	beq.n	800c780 <_free_r+0x90>
 800c6f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6fa:	9001      	str	r0, [sp, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f1a1 0404 	sub.w	r4, r1, #4
 800c702:	bfb8      	it	lt
 800c704:	18e4      	addlt	r4, r4, r3
 800c706:	f000 f8df 	bl	800c8c8 <__malloc_lock>
 800c70a:	4a1e      	ldr	r2, [pc, #120]	; (800c784 <_free_r+0x94>)
 800c70c:	9801      	ldr	r0, [sp, #4]
 800c70e:	6813      	ldr	r3, [r2, #0]
 800c710:	b933      	cbnz	r3, 800c720 <_free_r+0x30>
 800c712:	6063      	str	r3, [r4, #4]
 800c714:	6014      	str	r4, [r2, #0]
 800c716:	b003      	add	sp, #12
 800c718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c71c:	f000 b8da 	b.w	800c8d4 <__malloc_unlock>
 800c720:	42a3      	cmp	r3, r4
 800c722:	d908      	bls.n	800c736 <_free_r+0x46>
 800c724:	6825      	ldr	r5, [r4, #0]
 800c726:	1961      	adds	r1, r4, r5
 800c728:	428b      	cmp	r3, r1
 800c72a:	bf01      	itttt	eq
 800c72c:	6819      	ldreq	r1, [r3, #0]
 800c72e:	685b      	ldreq	r3, [r3, #4]
 800c730:	1949      	addeq	r1, r1, r5
 800c732:	6021      	streq	r1, [r4, #0]
 800c734:	e7ed      	b.n	800c712 <_free_r+0x22>
 800c736:	461a      	mov	r2, r3
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	b10b      	cbz	r3, 800c740 <_free_r+0x50>
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	d9fa      	bls.n	800c736 <_free_r+0x46>
 800c740:	6811      	ldr	r1, [r2, #0]
 800c742:	1855      	adds	r5, r2, r1
 800c744:	42a5      	cmp	r5, r4
 800c746:	d10b      	bne.n	800c760 <_free_r+0x70>
 800c748:	6824      	ldr	r4, [r4, #0]
 800c74a:	4421      	add	r1, r4
 800c74c:	1854      	adds	r4, r2, r1
 800c74e:	42a3      	cmp	r3, r4
 800c750:	6011      	str	r1, [r2, #0]
 800c752:	d1e0      	bne.n	800c716 <_free_r+0x26>
 800c754:	681c      	ldr	r4, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	6053      	str	r3, [r2, #4]
 800c75a:	440c      	add	r4, r1
 800c75c:	6014      	str	r4, [r2, #0]
 800c75e:	e7da      	b.n	800c716 <_free_r+0x26>
 800c760:	d902      	bls.n	800c768 <_free_r+0x78>
 800c762:	230c      	movs	r3, #12
 800c764:	6003      	str	r3, [r0, #0]
 800c766:	e7d6      	b.n	800c716 <_free_r+0x26>
 800c768:	6825      	ldr	r5, [r4, #0]
 800c76a:	1961      	adds	r1, r4, r5
 800c76c:	428b      	cmp	r3, r1
 800c76e:	bf04      	itt	eq
 800c770:	6819      	ldreq	r1, [r3, #0]
 800c772:	685b      	ldreq	r3, [r3, #4]
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	bf04      	itt	eq
 800c778:	1949      	addeq	r1, r1, r5
 800c77a:	6021      	streq	r1, [r4, #0]
 800c77c:	6054      	str	r4, [r2, #4]
 800c77e:	e7ca      	b.n	800c716 <_free_r+0x26>
 800c780:	b003      	add	sp, #12
 800c782:	bd30      	pop	{r4, r5, pc}
 800c784:	20004dc0 	.word	0x20004dc0

0800c788 <sbrk_aligned>:
 800c788:	b570      	push	{r4, r5, r6, lr}
 800c78a:	4e0e      	ldr	r6, [pc, #56]	; (800c7c4 <sbrk_aligned+0x3c>)
 800c78c:	460c      	mov	r4, r1
 800c78e:	6831      	ldr	r1, [r6, #0]
 800c790:	4605      	mov	r5, r0
 800c792:	b911      	cbnz	r1, 800c79a <sbrk_aligned+0x12>
 800c794:	f000 fcde 	bl	800d154 <_sbrk_r>
 800c798:	6030      	str	r0, [r6, #0]
 800c79a:	4621      	mov	r1, r4
 800c79c:	4628      	mov	r0, r5
 800c79e:	f000 fcd9 	bl	800d154 <_sbrk_r>
 800c7a2:	1c43      	adds	r3, r0, #1
 800c7a4:	d00a      	beq.n	800c7bc <sbrk_aligned+0x34>
 800c7a6:	1cc4      	adds	r4, r0, #3
 800c7a8:	f024 0403 	bic.w	r4, r4, #3
 800c7ac:	42a0      	cmp	r0, r4
 800c7ae:	d007      	beq.n	800c7c0 <sbrk_aligned+0x38>
 800c7b0:	1a21      	subs	r1, r4, r0
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f000 fcce 	bl	800d154 <_sbrk_r>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d101      	bne.n	800c7c0 <sbrk_aligned+0x38>
 800c7bc:	f04f 34ff 	mov.w	r4, #4294967295
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	20004dc4 	.word	0x20004dc4

0800c7c8 <_malloc_r>:
 800c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7cc:	1ccd      	adds	r5, r1, #3
 800c7ce:	f025 0503 	bic.w	r5, r5, #3
 800c7d2:	3508      	adds	r5, #8
 800c7d4:	2d0c      	cmp	r5, #12
 800c7d6:	bf38      	it	cc
 800c7d8:	250c      	movcc	r5, #12
 800c7da:	2d00      	cmp	r5, #0
 800c7dc:	4607      	mov	r7, r0
 800c7de:	db01      	blt.n	800c7e4 <_malloc_r+0x1c>
 800c7e0:	42a9      	cmp	r1, r5
 800c7e2:	d905      	bls.n	800c7f0 <_malloc_r+0x28>
 800c7e4:	230c      	movs	r3, #12
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	2600      	movs	r6, #0
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c8c4 <_malloc_r+0xfc>
 800c7f4:	f000 f868 	bl	800c8c8 <__malloc_lock>
 800c7f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7fc:	461c      	mov	r4, r3
 800c7fe:	bb5c      	cbnz	r4, 800c858 <_malloc_r+0x90>
 800c800:	4629      	mov	r1, r5
 800c802:	4638      	mov	r0, r7
 800c804:	f7ff ffc0 	bl	800c788 <sbrk_aligned>
 800c808:	1c43      	adds	r3, r0, #1
 800c80a:	4604      	mov	r4, r0
 800c80c:	d155      	bne.n	800c8ba <_malloc_r+0xf2>
 800c80e:	f8d8 4000 	ldr.w	r4, [r8]
 800c812:	4626      	mov	r6, r4
 800c814:	2e00      	cmp	r6, #0
 800c816:	d145      	bne.n	800c8a4 <_malloc_r+0xdc>
 800c818:	2c00      	cmp	r4, #0
 800c81a:	d048      	beq.n	800c8ae <_malloc_r+0xe6>
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	4631      	mov	r1, r6
 800c820:	4638      	mov	r0, r7
 800c822:	eb04 0903 	add.w	r9, r4, r3
 800c826:	f000 fc95 	bl	800d154 <_sbrk_r>
 800c82a:	4581      	cmp	r9, r0
 800c82c:	d13f      	bne.n	800c8ae <_malloc_r+0xe6>
 800c82e:	6821      	ldr	r1, [r4, #0]
 800c830:	1a6d      	subs	r5, r5, r1
 800c832:	4629      	mov	r1, r5
 800c834:	4638      	mov	r0, r7
 800c836:	f7ff ffa7 	bl	800c788 <sbrk_aligned>
 800c83a:	3001      	adds	r0, #1
 800c83c:	d037      	beq.n	800c8ae <_malloc_r+0xe6>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	442b      	add	r3, r5
 800c842:	6023      	str	r3, [r4, #0]
 800c844:	f8d8 3000 	ldr.w	r3, [r8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d038      	beq.n	800c8be <_malloc_r+0xf6>
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	42a2      	cmp	r2, r4
 800c850:	d12b      	bne.n	800c8aa <_malloc_r+0xe2>
 800c852:	2200      	movs	r2, #0
 800c854:	605a      	str	r2, [r3, #4]
 800c856:	e00f      	b.n	800c878 <_malloc_r+0xb0>
 800c858:	6822      	ldr	r2, [r4, #0]
 800c85a:	1b52      	subs	r2, r2, r5
 800c85c:	d41f      	bmi.n	800c89e <_malloc_r+0xd6>
 800c85e:	2a0b      	cmp	r2, #11
 800c860:	d917      	bls.n	800c892 <_malloc_r+0xca>
 800c862:	1961      	adds	r1, r4, r5
 800c864:	42a3      	cmp	r3, r4
 800c866:	6025      	str	r5, [r4, #0]
 800c868:	bf18      	it	ne
 800c86a:	6059      	strne	r1, [r3, #4]
 800c86c:	6863      	ldr	r3, [r4, #4]
 800c86e:	bf08      	it	eq
 800c870:	f8c8 1000 	streq.w	r1, [r8]
 800c874:	5162      	str	r2, [r4, r5]
 800c876:	604b      	str	r3, [r1, #4]
 800c878:	4638      	mov	r0, r7
 800c87a:	f104 060b 	add.w	r6, r4, #11
 800c87e:	f000 f829 	bl	800c8d4 <__malloc_unlock>
 800c882:	f026 0607 	bic.w	r6, r6, #7
 800c886:	1d23      	adds	r3, r4, #4
 800c888:	1af2      	subs	r2, r6, r3
 800c88a:	d0ae      	beq.n	800c7ea <_malloc_r+0x22>
 800c88c:	1b9b      	subs	r3, r3, r6
 800c88e:	50a3      	str	r3, [r4, r2]
 800c890:	e7ab      	b.n	800c7ea <_malloc_r+0x22>
 800c892:	42a3      	cmp	r3, r4
 800c894:	6862      	ldr	r2, [r4, #4]
 800c896:	d1dd      	bne.n	800c854 <_malloc_r+0x8c>
 800c898:	f8c8 2000 	str.w	r2, [r8]
 800c89c:	e7ec      	b.n	800c878 <_malloc_r+0xb0>
 800c89e:	4623      	mov	r3, r4
 800c8a0:	6864      	ldr	r4, [r4, #4]
 800c8a2:	e7ac      	b.n	800c7fe <_malloc_r+0x36>
 800c8a4:	4634      	mov	r4, r6
 800c8a6:	6876      	ldr	r6, [r6, #4]
 800c8a8:	e7b4      	b.n	800c814 <_malloc_r+0x4c>
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	e7cc      	b.n	800c848 <_malloc_r+0x80>
 800c8ae:	230c      	movs	r3, #12
 800c8b0:	603b      	str	r3, [r7, #0]
 800c8b2:	4638      	mov	r0, r7
 800c8b4:	f000 f80e 	bl	800c8d4 <__malloc_unlock>
 800c8b8:	e797      	b.n	800c7ea <_malloc_r+0x22>
 800c8ba:	6025      	str	r5, [r4, #0]
 800c8bc:	e7dc      	b.n	800c878 <_malloc_r+0xb0>
 800c8be:	605b      	str	r3, [r3, #4]
 800c8c0:	deff      	udf	#255	; 0xff
 800c8c2:	bf00      	nop
 800c8c4:	20004dc0 	.word	0x20004dc0

0800c8c8 <__malloc_lock>:
 800c8c8:	4801      	ldr	r0, [pc, #4]	; (800c8d0 <__malloc_lock+0x8>)
 800c8ca:	f7ff bf00 	b.w	800c6ce <__retarget_lock_acquire_recursive>
 800c8ce:	bf00      	nop
 800c8d0:	20004dbc 	.word	0x20004dbc

0800c8d4 <__malloc_unlock>:
 800c8d4:	4801      	ldr	r0, [pc, #4]	; (800c8dc <__malloc_unlock+0x8>)
 800c8d6:	f7ff befb 	b.w	800c6d0 <__retarget_lock_release_recursive>
 800c8da:	bf00      	nop
 800c8dc:	20004dbc 	.word	0x20004dbc

0800c8e0 <__sfputc_r>:
 800c8e0:	6893      	ldr	r3, [r2, #8]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	b410      	push	{r4}
 800c8e8:	6093      	str	r3, [r2, #8]
 800c8ea:	da08      	bge.n	800c8fe <__sfputc_r+0x1e>
 800c8ec:	6994      	ldr	r4, [r2, #24]
 800c8ee:	42a3      	cmp	r3, r4
 800c8f0:	db01      	blt.n	800c8f6 <__sfputc_r+0x16>
 800c8f2:	290a      	cmp	r1, #10
 800c8f4:	d103      	bne.n	800c8fe <__sfputc_r+0x1e>
 800c8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8fa:	f7ff bdda 	b.w	800c4b2 <__swbuf_r>
 800c8fe:	6813      	ldr	r3, [r2, #0]
 800c900:	1c58      	adds	r0, r3, #1
 800c902:	6010      	str	r0, [r2, #0]
 800c904:	7019      	strb	r1, [r3, #0]
 800c906:	4608      	mov	r0, r1
 800c908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <__sfputs_r>:
 800c90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c910:	4606      	mov	r6, r0
 800c912:	460f      	mov	r7, r1
 800c914:	4614      	mov	r4, r2
 800c916:	18d5      	adds	r5, r2, r3
 800c918:	42ac      	cmp	r4, r5
 800c91a:	d101      	bne.n	800c920 <__sfputs_r+0x12>
 800c91c:	2000      	movs	r0, #0
 800c91e:	e007      	b.n	800c930 <__sfputs_r+0x22>
 800c920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c924:	463a      	mov	r2, r7
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff ffda 	bl	800c8e0 <__sfputc_r>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d1f3      	bne.n	800c918 <__sfputs_r+0xa>
 800c930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c934 <_vfiprintf_r>:
 800c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c938:	460d      	mov	r5, r1
 800c93a:	b09d      	sub	sp, #116	; 0x74
 800c93c:	4614      	mov	r4, r2
 800c93e:	4698      	mov	r8, r3
 800c940:	4606      	mov	r6, r0
 800c942:	b118      	cbz	r0, 800c94c <_vfiprintf_r+0x18>
 800c944:	6a03      	ldr	r3, [r0, #32]
 800c946:	b90b      	cbnz	r3, 800c94c <_vfiprintf_r+0x18>
 800c948:	f7ff fcc4 	bl	800c2d4 <__sinit>
 800c94c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c94e:	07d9      	lsls	r1, r3, #31
 800c950:	d405      	bmi.n	800c95e <_vfiprintf_r+0x2a>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	059a      	lsls	r2, r3, #22
 800c956:	d402      	bmi.n	800c95e <_vfiprintf_r+0x2a>
 800c958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c95a:	f7ff feb8 	bl	800c6ce <__retarget_lock_acquire_recursive>
 800c95e:	89ab      	ldrh	r3, [r5, #12]
 800c960:	071b      	lsls	r3, r3, #28
 800c962:	d501      	bpl.n	800c968 <_vfiprintf_r+0x34>
 800c964:	692b      	ldr	r3, [r5, #16]
 800c966:	b99b      	cbnz	r3, 800c990 <_vfiprintf_r+0x5c>
 800c968:	4629      	mov	r1, r5
 800c96a:	4630      	mov	r0, r6
 800c96c:	f7ff fdde 	bl	800c52c <__swsetup_r>
 800c970:	b170      	cbz	r0, 800c990 <_vfiprintf_r+0x5c>
 800c972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c974:	07dc      	lsls	r4, r3, #31
 800c976:	d504      	bpl.n	800c982 <_vfiprintf_r+0x4e>
 800c978:	f04f 30ff 	mov.w	r0, #4294967295
 800c97c:	b01d      	add	sp, #116	; 0x74
 800c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c982:	89ab      	ldrh	r3, [r5, #12]
 800c984:	0598      	lsls	r0, r3, #22
 800c986:	d4f7      	bmi.n	800c978 <_vfiprintf_r+0x44>
 800c988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c98a:	f7ff fea1 	bl	800c6d0 <__retarget_lock_release_recursive>
 800c98e:	e7f3      	b.n	800c978 <_vfiprintf_r+0x44>
 800c990:	2300      	movs	r3, #0
 800c992:	9309      	str	r3, [sp, #36]	; 0x24
 800c994:	2320      	movs	r3, #32
 800c996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c99a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c99e:	2330      	movs	r3, #48	; 0x30
 800c9a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb54 <_vfiprintf_r+0x220>
 800c9a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9a8:	f04f 0901 	mov.w	r9, #1
 800c9ac:	4623      	mov	r3, r4
 800c9ae:	469a      	mov	sl, r3
 800c9b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9b4:	b10a      	cbz	r2, 800c9ba <_vfiprintf_r+0x86>
 800c9b6:	2a25      	cmp	r2, #37	; 0x25
 800c9b8:	d1f9      	bne.n	800c9ae <_vfiprintf_r+0x7a>
 800c9ba:	ebba 0b04 	subs.w	fp, sl, r4
 800c9be:	d00b      	beq.n	800c9d8 <_vfiprintf_r+0xa4>
 800c9c0:	465b      	mov	r3, fp
 800c9c2:	4622      	mov	r2, r4
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f7ff ffa1 	bl	800c90e <__sfputs_r>
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	f000 80a9 	beq.w	800cb24 <_vfiprintf_r+0x1f0>
 800c9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d4:	445a      	add	r2, fp
 800c9d6:	9209      	str	r2, [sp, #36]	; 0x24
 800c9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 80a1 	beq.w	800cb24 <_vfiprintf_r+0x1f0>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ec:	f10a 0a01 	add.w	sl, sl, #1
 800c9f0:	9304      	str	r3, [sp, #16]
 800c9f2:	9307      	str	r3, [sp, #28]
 800c9f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9f8:	931a      	str	r3, [sp, #104]	; 0x68
 800c9fa:	4654      	mov	r4, sl
 800c9fc:	2205      	movs	r2, #5
 800c9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca02:	4854      	ldr	r0, [pc, #336]	; (800cb54 <_vfiprintf_r+0x220>)
 800ca04:	f7f3 fbec 	bl	80001e0 <memchr>
 800ca08:	9a04      	ldr	r2, [sp, #16]
 800ca0a:	b9d8      	cbnz	r0, 800ca44 <_vfiprintf_r+0x110>
 800ca0c:	06d1      	lsls	r1, r2, #27
 800ca0e:	bf44      	itt	mi
 800ca10:	2320      	movmi	r3, #32
 800ca12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca16:	0713      	lsls	r3, r2, #28
 800ca18:	bf44      	itt	mi
 800ca1a:	232b      	movmi	r3, #43	; 0x2b
 800ca1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca20:	f89a 3000 	ldrb.w	r3, [sl]
 800ca24:	2b2a      	cmp	r3, #42	; 0x2a
 800ca26:	d015      	beq.n	800ca54 <_vfiprintf_r+0x120>
 800ca28:	9a07      	ldr	r2, [sp, #28]
 800ca2a:	4654      	mov	r4, sl
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f04f 0c0a 	mov.w	ip, #10
 800ca32:	4621      	mov	r1, r4
 800ca34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca38:	3b30      	subs	r3, #48	; 0x30
 800ca3a:	2b09      	cmp	r3, #9
 800ca3c:	d94d      	bls.n	800cada <_vfiprintf_r+0x1a6>
 800ca3e:	b1b0      	cbz	r0, 800ca6e <_vfiprintf_r+0x13a>
 800ca40:	9207      	str	r2, [sp, #28]
 800ca42:	e014      	b.n	800ca6e <_vfiprintf_r+0x13a>
 800ca44:	eba0 0308 	sub.w	r3, r0, r8
 800ca48:	fa09 f303 	lsl.w	r3, r9, r3
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	9304      	str	r3, [sp, #16]
 800ca50:	46a2      	mov	sl, r4
 800ca52:	e7d2      	b.n	800c9fa <_vfiprintf_r+0xc6>
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	1d19      	adds	r1, r3, #4
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	9103      	str	r1, [sp, #12]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	bfbb      	ittet	lt
 800ca60:	425b      	neglt	r3, r3
 800ca62:	f042 0202 	orrlt.w	r2, r2, #2
 800ca66:	9307      	strge	r3, [sp, #28]
 800ca68:	9307      	strlt	r3, [sp, #28]
 800ca6a:	bfb8      	it	lt
 800ca6c:	9204      	strlt	r2, [sp, #16]
 800ca6e:	7823      	ldrb	r3, [r4, #0]
 800ca70:	2b2e      	cmp	r3, #46	; 0x2e
 800ca72:	d10c      	bne.n	800ca8e <_vfiprintf_r+0x15a>
 800ca74:	7863      	ldrb	r3, [r4, #1]
 800ca76:	2b2a      	cmp	r3, #42	; 0x2a
 800ca78:	d134      	bne.n	800cae4 <_vfiprintf_r+0x1b0>
 800ca7a:	9b03      	ldr	r3, [sp, #12]
 800ca7c:	1d1a      	adds	r2, r3, #4
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	9203      	str	r2, [sp, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	bfb8      	it	lt
 800ca86:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca8a:	3402      	adds	r4, #2
 800ca8c:	9305      	str	r3, [sp, #20]
 800ca8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb64 <_vfiprintf_r+0x230>
 800ca92:	7821      	ldrb	r1, [r4, #0]
 800ca94:	2203      	movs	r2, #3
 800ca96:	4650      	mov	r0, sl
 800ca98:	f7f3 fba2 	bl	80001e0 <memchr>
 800ca9c:	b138      	cbz	r0, 800caae <_vfiprintf_r+0x17a>
 800ca9e:	9b04      	ldr	r3, [sp, #16]
 800caa0:	eba0 000a 	sub.w	r0, r0, sl
 800caa4:	2240      	movs	r2, #64	; 0x40
 800caa6:	4082      	lsls	r2, r0
 800caa8:	4313      	orrs	r3, r2
 800caaa:	3401      	adds	r4, #1
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab2:	4829      	ldr	r0, [pc, #164]	; (800cb58 <_vfiprintf_r+0x224>)
 800cab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cab8:	2206      	movs	r2, #6
 800caba:	f7f3 fb91 	bl	80001e0 <memchr>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d03f      	beq.n	800cb42 <_vfiprintf_r+0x20e>
 800cac2:	4b26      	ldr	r3, [pc, #152]	; (800cb5c <_vfiprintf_r+0x228>)
 800cac4:	bb1b      	cbnz	r3, 800cb0e <_vfiprintf_r+0x1da>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	3307      	adds	r3, #7
 800caca:	f023 0307 	bic.w	r3, r3, #7
 800cace:	3308      	adds	r3, #8
 800cad0:	9303      	str	r3, [sp, #12]
 800cad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad4:	443b      	add	r3, r7
 800cad6:	9309      	str	r3, [sp, #36]	; 0x24
 800cad8:	e768      	b.n	800c9ac <_vfiprintf_r+0x78>
 800cada:	fb0c 3202 	mla	r2, ip, r2, r3
 800cade:	460c      	mov	r4, r1
 800cae0:	2001      	movs	r0, #1
 800cae2:	e7a6      	b.n	800ca32 <_vfiprintf_r+0xfe>
 800cae4:	2300      	movs	r3, #0
 800cae6:	3401      	adds	r4, #1
 800cae8:	9305      	str	r3, [sp, #20]
 800caea:	4619      	mov	r1, r3
 800caec:	f04f 0c0a 	mov.w	ip, #10
 800caf0:	4620      	mov	r0, r4
 800caf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caf6:	3a30      	subs	r2, #48	; 0x30
 800caf8:	2a09      	cmp	r2, #9
 800cafa:	d903      	bls.n	800cb04 <_vfiprintf_r+0x1d0>
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d0c6      	beq.n	800ca8e <_vfiprintf_r+0x15a>
 800cb00:	9105      	str	r1, [sp, #20]
 800cb02:	e7c4      	b.n	800ca8e <_vfiprintf_r+0x15a>
 800cb04:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb08:	4604      	mov	r4, r0
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e7f0      	b.n	800caf0 <_vfiprintf_r+0x1bc>
 800cb0e:	ab03      	add	r3, sp, #12
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	462a      	mov	r2, r5
 800cb14:	4b12      	ldr	r3, [pc, #72]	; (800cb60 <_vfiprintf_r+0x22c>)
 800cb16:	a904      	add	r1, sp, #16
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f3af 8000 	nop.w
 800cb1e:	4607      	mov	r7, r0
 800cb20:	1c78      	adds	r0, r7, #1
 800cb22:	d1d6      	bne.n	800cad2 <_vfiprintf_r+0x19e>
 800cb24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb26:	07d9      	lsls	r1, r3, #31
 800cb28:	d405      	bmi.n	800cb36 <_vfiprintf_r+0x202>
 800cb2a:	89ab      	ldrh	r3, [r5, #12]
 800cb2c:	059a      	lsls	r2, r3, #22
 800cb2e:	d402      	bmi.n	800cb36 <_vfiprintf_r+0x202>
 800cb30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb32:	f7ff fdcd 	bl	800c6d0 <__retarget_lock_release_recursive>
 800cb36:	89ab      	ldrh	r3, [r5, #12]
 800cb38:	065b      	lsls	r3, r3, #25
 800cb3a:	f53f af1d 	bmi.w	800c978 <_vfiprintf_r+0x44>
 800cb3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb40:	e71c      	b.n	800c97c <_vfiprintf_r+0x48>
 800cb42:	ab03      	add	r3, sp, #12
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	462a      	mov	r2, r5
 800cb48:	4b05      	ldr	r3, [pc, #20]	; (800cb60 <_vfiprintf_r+0x22c>)
 800cb4a:	a904      	add	r1, sp, #16
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f000 f879 	bl	800cc44 <_printf_i>
 800cb52:	e7e4      	b.n	800cb1e <_vfiprintf_r+0x1ea>
 800cb54:	0800daec 	.word	0x0800daec
 800cb58:	0800daf6 	.word	0x0800daf6
 800cb5c:	00000000 	.word	0x00000000
 800cb60:	0800c90f 	.word	0x0800c90f
 800cb64:	0800daf2 	.word	0x0800daf2

0800cb68 <_printf_common>:
 800cb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb6c:	4616      	mov	r6, r2
 800cb6e:	4699      	mov	r9, r3
 800cb70:	688a      	ldr	r2, [r1, #8]
 800cb72:	690b      	ldr	r3, [r1, #16]
 800cb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	bfb8      	it	lt
 800cb7c:	4613      	movlt	r3, r2
 800cb7e:	6033      	str	r3, [r6, #0]
 800cb80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb84:	4607      	mov	r7, r0
 800cb86:	460c      	mov	r4, r1
 800cb88:	b10a      	cbz	r2, 800cb8e <_printf_common+0x26>
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	6033      	str	r3, [r6, #0]
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	0699      	lsls	r1, r3, #26
 800cb92:	bf42      	ittt	mi
 800cb94:	6833      	ldrmi	r3, [r6, #0]
 800cb96:	3302      	addmi	r3, #2
 800cb98:	6033      	strmi	r3, [r6, #0]
 800cb9a:	6825      	ldr	r5, [r4, #0]
 800cb9c:	f015 0506 	ands.w	r5, r5, #6
 800cba0:	d106      	bne.n	800cbb0 <_printf_common+0x48>
 800cba2:	f104 0a19 	add.w	sl, r4, #25
 800cba6:	68e3      	ldr	r3, [r4, #12]
 800cba8:	6832      	ldr	r2, [r6, #0]
 800cbaa:	1a9b      	subs	r3, r3, r2
 800cbac:	42ab      	cmp	r3, r5
 800cbae:	dc26      	bgt.n	800cbfe <_printf_common+0x96>
 800cbb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbb4:	1e13      	subs	r3, r2, #0
 800cbb6:	6822      	ldr	r2, [r4, #0]
 800cbb8:	bf18      	it	ne
 800cbba:	2301      	movne	r3, #1
 800cbbc:	0692      	lsls	r2, r2, #26
 800cbbe:	d42b      	bmi.n	800cc18 <_printf_common+0xb0>
 800cbc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	47c0      	blx	r8
 800cbca:	3001      	adds	r0, #1
 800cbcc:	d01e      	beq.n	800cc0c <_printf_common+0xa4>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	6922      	ldr	r2, [r4, #16]
 800cbd2:	f003 0306 	and.w	r3, r3, #6
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	bf02      	ittt	eq
 800cbda:	68e5      	ldreq	r5, [r4, #12]
 800cbdc:	6833      	ldreq	r3, [r6, #0]
 800cbde:	1aed      	subeq	r5, r5, r3
 800cbe0:	68a3      	ldr	r3, [r4, #8]
 800cbe2:	bf0c      	ite	eq
 800cbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbe8:	2500      	movne	r5, #0
 800cbea:	4293      	cmp	r3, r2
 800cbec:	bfc4      	itt	gt
 800cbee:	1a9b      	subgt	r3, r3, r2
 800cbf0:	18ed      	addgt	r5, r5, r3
 800cbf2:	2600      	movs	r6, #0
 800cbf4:	341a      	adds	r4, #26
 800cbf6:	42b5      	cmp	r5, r6
 800cbf8:	d11a      	bne.n	800cc30 <_printf_common+0xc8>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e008      	b.n	800cc10 <_printf_common+0xa8>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4652      	mov	r2, sl
 800cc02:	4649      	mov	r1, r9
 800cc04:	4638      	mov	r0, r7
 800cc06:	47c0      	blx	r8
 800cc08:	3001      	adds	r0, #1
 800cc0a:	d103      	bne.n	800cc14 <_printf_common+0xac>
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc14:	3501      	adds	r5, #1
 800cc16:	e7c6      	b.n	800cba6 <_printf_common+0x3e>
 800cc18:	18e1      	adds	r1, r4, r3
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	2030      	movs	r0, #48	; 0x30
 800cc1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc22:	4422      	add	r2, r4
 800cc24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc2c:	3302      	adds	r3, #2
 800cc2e:	e7c7      	b.n	800cbc0 <_printf_common+0x58>
 800cc30:	2301      	movs	r3, #1
 800cc32:	4622      	mov	r2, r4
 800cc34:	4649      	mov	r1, r9
 800cc36:	4638      	mov	r0, r7
 800cc38:	47c0      	blx	r8
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	d0e6      	beq.n	800cc0c <_printf_common+0xa4>
 800cc3e:	3601      	adds	r6, #1
 800cc40:	e7d9      	b.n	800cbf6 <_printf_common+0x8e>
	...

0800cc44 <_printf_i>:
 800cc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc48:	7e0f      	ldrb	r7, [r1, #24]
 800cc4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc4c:	2f78      	cmp	r7, #120	; 0x78
 800cc4e:	4691      	mov	r9, r2
 800cc50:	4680      	mov	r8, r0
 800cc52:	460c      	mov	r4, r1
 800cc54:	469a      	mov	sl, r3
 800cc56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc5a:	d807      	bhi.n	800cc6c <_printf_i+0x28>
 800cc5c:	2f62      	cmp	r7, #98	; 0x62
 800cc5e:	d80a      	bhi.n	800cc76 <_printf_i+0x32>
 800cc60:	2f00      	cmp	r7, #0
 800cc62:	f000 80d4 	beq.w	800ce0e <_printf_i+0x1ca>
 800cc66:	2f58      	cmp	r7, #88	; 0x58
 800cc68:	f000 80c0 	beq.w	800cdec <_printf_i+0x1a8>
 800cc6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc74:	e03a      	b.n	800ccec <_printf_i+0xa8>
 800cc76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc7a:	2b15      	cmp	r3, #21
 800cc7c:	d8f6      	bhi.n	800cc6c <_printf_i+0x28>
 800cc7e:	a101      	add	r1, pc, #4	; (adr r1, 800cc84 <_printf_i+0x40>)
 800cc80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc84:	0800ccdd 	.word	0x0800ccdd
 800cc88:	0800ccf1 	.word	0x0800ccf1
 800cc8c:	0800cc6d 	.word	0x0800cc6d
 800cc90:	0800cc6d 	.word	0x0800cc6d
 800cc94:	0800cc6d 	.word	0x0800cc6d
 800cc98:	0800cc6d 	.word	0x0800cc6d
 800cc9c:	0800ccf1 	.word	0x0800ccf1
 800cca0:	0800cc6d 	.word	0x0800cc6d
 800cca4:	0800cc6d 	.word	0x0800cc6d
 800cca8:	0800cc6d 	.word	0x0800cc6d
 800ccac:	0800cc6d 	.word	0x0800cc6d
 800ccb0:	0800cdf5 	.word	0x0800cdf5
 800ccb4:	0800cd1d 	.word	0x0800cd1d
 800ccb8:	0800cdaf 	.word	0x0800cdaf
 800ccbc:	0800cc6d 	.word	0x0800cc6d
 800ccc0:	0800cc6d 	.word	0x0800cc6d
 800ccc4:	0800ce17 	.word	0x0800ce17
 800ccc8:	0800cc6d 	.word	0x0800cc6d
 800cccc:	0800cd1d 	.word	0x0800cd1d
 800ccd0:	0800cc6d 	.word	0x0800cc6d
 800ccd4:	0800cc6d 	.word	0x0800cc6d
 800ccd8:	0800cdb7 	.word	0x0800cdb7
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	1d1a      	adds	r2, r3, #4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	602a      	str	r2, [r5, #0]
 800cce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccec:	2301      	movs	r3, #1
 800ccee:	e09f      	b.n	800ce30 <_printf_i+0x1ec>
 800ccf0:	6820      	ldr	r0, [r4, #0]
 800ccf2:	682b      	ldr	r3, [r5, #0]
 800ccf4:	0607      	lsls	r7, r0, #24
 800ccf6:	f103 0104 	add.w	r1, r3, #4
 800ccfa:	6029      	str	r1, [r5, #0]
 800ccfc:	d501      	bpl.n	800cd02 <_printf_i+0xbe>
 800ccfe:	681e      	ldr	r6, [r3, #0]
 800cd00:	e003      	b.n	800cd0a <_printf_i+0xc6>
 800cd02:	0646      	lsls	r6, r0, #25
 800cd04:	d5fb      	bpl.n	800ccfe <_printf_i+0xba>
 800cd06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd0a:	2e00      	cmp	r6, #0
 800cd0c:	da03      	bge.n	800cd16 <_printf_i+0xd2>
 800cd0e:	232d      	movs	r3, #45	; 0x2d
 800cd10:	4276      	negs	r6, r6
 800cd12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd16:	485a      	ldr	r0, [pc, #360]	; (800ce80 <_printf_i+0x23c>)
 800cd18:	230a      	movs	r3, #10
 800cd1a:	e012      	b.n	800cd42 <_printf_i+0xfe>
 800cd1c:	682b      	ldr	r3, [r5, #0]
 800cd1e:	6820      	ldr	r0, [r4, #0]
 800cd20:	1d19      	adds	r1, r3, #4
 800cd22:	6029      	str	r1, [r5, #0]
 800cd24:	0605      	lsls	r5, r0, #24
 800cd26:	d501      	bpl.n	800cd2c <_printf_i+0xe8>
 800cd28:	681e      	ldr	r6, [r3, #0]
 800cd2a:	e002      	b.n	800cd32 <_printf_i+0xee>
 800cd2c:	0641      	lsls	r1, r0, #25
 800cd2e:	d5fb      	bpl.n	800cd28 <_printf_i+0xe4>
 800cd30:	881e      	ldrh	r6, [r3, #0]
 800cd32:	4853      	ldr	r0, [pc, #332]	; (800ce80 <_printf_i+0x23c>)
 800cd34:	2f6f      	cmp	r7, #111	; 0x6f
 800cd36:	bf0c      	ite	eq
 800cd38:	2308      	moveq	r3, #8
 800cd3a:	230a      	movne	r3, #10
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd42:	6865      	ldr	r5, [r4, #4]
 800cd44:	60a5      	str	r5, [r4, #8]
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	bfa2      	ittt	ge
 800cd4a:	6821      	ldrge	r1, [r4, #0]
 800cd4c:	f021 0104 	bicge.w	r1, r1, #4
 800cd50:	6021      	strge	r1, [r4, #0]
 800cd52:	b90e      	cbnz	r6, 800cd58 <_printf_i+0x114>
 800cd54:	2d00      	cmp	r5, #0
 800cd56:	d04b      	beq.n	800cdf0 <_printf_i+0x1ac>
 800cd58:	4615      	mov	r5, r2
 800cd5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd5e:	fb03 6711 	mls	r7, r3, r1, r6
 800cd62:	5dc7      	ldrb	r7, [r0, r7]
 800cd64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd68:	4637      	mov	r7, r6
 800cd6a:	42bb      	cmp	r3, r7
 800cd6c:	460e      	mov	r6, r1
 800cd6e:	d9f4      	bls.n	800cd5a <_printf_i+0x116>
 800cd70:	2b08      	cmp	r3, #8
 800cd72:	d10b      	bne.n	800cd8c <_printf_i+0x148>
 800cd74:	6823      	ldr	r3, [r4, #0]
 800cd76:	07de      	lsls	r6, r3, #31
 800cd78:	d508      	bpl.n	800cd8c <_printf_i+0x148>
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	6861      	ldr	r1, [r4, #4]
 800cd7e:	4299      	cmp	r1, r3
 800cd80:	bfde      	ittt	le
 800cd82:	2330      	movle	r3, #48	; 0x30
 800cd84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd8c:	1b52      	subs	r2, r2, r5
 800cd8e:	6122      	str	r2, [r4, #16]
 800cd90:	f8cd a000 	str.w	sl, [sp]
 800cd94:	464b      	mov	r3, r9
 800cd96:	aa03      	add	r2, sp, #12
 800cd98:	4621      	mov	r1, r4
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	f7ff fee4 	bl	800cb68 <_printf_common>
 800cda0:	3001      	adds	r0, #1
 800cda2:	d14a      	bne.n	800ce3a <_printf_i+0x1f6>
 800cda4:	f04f 30ff 	mov.w	r0, #4294967295
 800cda8:	b004      	add	sp, #16
 800cdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	f043 0320 	orr.w	r3, r3, #32
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	4833      	ldr	r0, [pc, #204]	; (800ce84 <_printf_i+0x240>)
 800cdb8:	2778      	movs	r7, #120	; 0x78
 800cdba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	6829      	ldr	r1, [r5, #0]
 800cdc2:	061f      	lsls	r7, r3, #24
 800cdc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdc8:	d402      	bmi.n	800cdd0 <_printf_i+0x18c>
 800cdca:	065f      	lsls	r7, r3, #25
 800cdcc:	bf48      	it	mi
 800cdce:	b2b6      	uxthmi	r6, r6
 800cdd0:	07df      	lsls	r7, r3, #31
 800cdd2:	bf48      	it	mi
 800cdd4:	f043 0320 	orrmi.w	r3, r3, #32
 800cdd8:	6029      	str	r1, [r5, #0]
 800cdda:	bf48      	it	mi
 800cddc:	6023      	strmi	r3, [r4, #0]
 800cdde:	b91e      	cbnz	r6, 800cde8 <_printf_i+0x1a4>
 800cde0:	6823      	ldr	r3, [r4, #0]
 800cde2:	f023 0320 	bic.w	r3, r3, #32
 800cde6:	6023      	str	r3, [r4, #0]
 800cde8:	2310      	movs	r3, #16
 800cdea:	e7a7      	b.n	800cd3c <_printf_i+0xf8>
 800cdec:	4824      	ldr	r0, [pc, #144]	; (800ce80 <_printf_i+0x23c>)
 800cdee:	e7e4      	b.n	800cdba <_printf_i+0x176>
 800cdf0:	4615      	mov	r5, r2
 800cdf2:	e7bd      	b.n	800cd70 <_printf_i+0x12c>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	6826      	ldr	r6, [r4, #0]
 800cdf8:	6961      	ldr	r1, [r4, #20]
 800cdfa:	1d18      	adds	r0, r3, #4
 800cdfc:	6028      	str	r0, [r5, #0]
 800cdfe:	0635      	lsls	r5, r6, #24
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	d501      	bpl.n	800ce08 <_printf_i+0x1c4>
 800ce04:	6019      	str	r1, [r3, #0]
 800ce06:	e002      	b.n	800ce0e <_printf_i+0x1ca>
 800ce08:	0670      	lsls	r0, r6, #25
 800ce0a:	d5fb      	bpl.n	800ce04 <_printf_i+0x1c0>
 800ce0c:	8019      	strh	r1, [r3, #0]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	6123      	str	r3, [r4, #16]
 800ce12:	4615      	mov	r5, r2
 800ce14:	e7bc      	b.n	800cd90 <_printf_i+0x14c>
 800ce16:	682b      	ldr	r3, [r5, #0]
 800ce18:	1d1a      	adds	r2, r3, #4
 800ce1a:	602a      	str	r2, [r5, #0]
 800ce1c:	681d      	ldr	r5, [r3, #0]
 800ce1e:	6862      	ldr	r2, [r4, #4]
 800ce20:	2100      	movs	r1, #0
 800ce22:	4628      	mov	r0, r5
 800ce24:	f7f3 f9dc 	bl	80001e0 <memchr>
 800ce28:	b108      	cbz	r0, 800ce2e <_printf_i+0x1ea>
 800ce2a:	1b40      	subs	r0, r0, r5
 800ce2c:	6060      	str	r0, [r4, #4]
 800ce2e:	6863      	ldr	r3, [r4, #4]
 800ce30:	6123      	str	r3, [r4, #16]
 800ce32:	2300      	movs	r3, #0
 800ce34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce38:	e7aa      	b.n	800cd90 <_printf_i+0x14c>
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	462a      	mov	r2, r5
 800ce3e:	4649      	mov	r1, r9
 800ce40:	4640      	mov	r0, r8
 800ce42:	47d0      	blx	sl
 800ce44:	3001      	adds	r0, #1
 800ce46:	d0ad      	beq.n	800cda4 <_printf_i+0x160>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	079b      	lsls	r3, r3, #30
 800ce4c:	d413      	bmi.n	800ce76 <_printf_i+0x232>
 800ce4e:	68e0      	ldr	r0, [r4, #12]
 800ce50:	9b03      	ldr	r3, [sp, #12]
 800ce52:	4298      	cmp	r0, r3
 800ce54:	bfb8      	it	lt
 800ce56:	4618      	movlt	r0, r3
 800ce58:	e7a6      	b.n	800cda8 <_printf_i+0x164>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	4632      	mov	r2, r6
 800ce5e:	4649      	mov	r1, r9
 800ce60:	4640      	mov	r0, r8
 800ce62:	47d0      	blx	sl
 800ce64:	3001      	adds	r0, #1
 800ce66:	d09d      	beq.n	800cda4 <_printf_i+0x160>
 800ce68:	3501      	adds	r5, #1
 800ce6a:	68e3      	ldr	r3, [r4, #12]
 800ce6c:	9903      	ldr	r1, [sp, #12]
 800ce6e:	1a5b      	subs	r3, r3, r1
 800ce70:	42ab      	cmp	r3, r5
 800ce72:	dcf2      	bgt.n	800ce5a <_printf_i+0x216>
 800ce74:	e7eb      	b.n	800ce4e <_printf_i+0x20a>
 800ce76:	2500      	movs	r5, #0
 800ce78:	f104 0619 	add.w	r6, r4, #25
 800ce7c:	e7f5      	b.n	800ce6a <_printf_i+0x226>
 800ce7e:	bf00      	nop
 800ce80:	0800dafd 	.word	0x0800dafd
 800ce84:	0800db0e 	.word	0x0800db0e

0800ce88 <__sflush_r>:
 800ce88:	898a      	ldrh	r2, [r1, #12]
 800ce8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8e:	4605      	mov	r5, r0
 800ce90:	0710      	lsls	r0, r2, #28
 800ce92:	460c      	mov	r4, r1
 800ce94:	d458      	bmi.n	800cf48 <__sflush_r+0xc0>
 800ce96:	684b      	ldr	r3, [r1, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dc05      	bgt.n	800cea8 <__sflush_r+0x20>
 800ce9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	dc02      	bgt.n	800cea8 <__sflush_r+0x20>
 800cea2:	2000      	movs	r0, #0
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ceaa:	2e00      	cmp	r6, #0
 800ceac:	d0f9      	beq.n	800cea2 <__sflush_r+0x1a>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ceb4:	682f      	ldr	r7, [r5, #0]
 800ceb6:	6a21      	ldr	r1, [r4, #32]
 800ceb8:	602b      	str	r3, [r5, #0]
 800ceba:	d032      	beq.n	800cf22 <__sflush_r+0x9a>
 800cebc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	075a      	lsls	r2, r3, #29
 800cec2:	d505      	bpl.n	800ced0 <__sflush_r+0x48>
 800cec4:	6863      	ldr	r3, [r4, #4]
 800cec6:	1ac0      	subs	r0, r0, r3
 800cec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceca:	b10b      	cbz	r3, 800ced0 <__sflush_r+0x48>
 800cecc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cece:	1ac0      	subs	r0, r0, r3
 800ced0:	2300      	movs	r3, #0
 800ced2:	4602      	mov	r2, r0
 800ced4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ced6:	6a21      	ldr	r1, [r4, #32]
 800ced8:	4628      	mov	r0, r5
 800ceda:	47b0      	blx	r6
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	d106      	bne.n	800cef0 <__sflush_r+0x68>
 800cee2:	6829      	ldr	r1, [r5, #0]
 800cee4:	291d      	cmp	r1, #29
 800cee6:	d82b      	bhi.n	800cf40 <__sflush_r+0xb8>
 800cee8:	4a29      	ldr	r2, [pc, #164]	; (800cf90 <__sflush_r+0x108>)
 800ceea:	410a      	asrs	r2, r1
 800ceec:	07d6      	lsls	r6, r2, #31
 800ceee:	d427      	bmi.n	800cf40 <__sflush_r+0xb8>
 800cef0:	2200      	movs	r2, #0
 800cef2:	6062      	str	r2, [r4, #4]
 800cef4:	04d9      	lsls	r1, r3, #19
 800cef6:	6922      	ldr	r2, [r4, #16]
 800cef8:	6022      	str	r2, [r4, #0]
 800cefa:	d504      	bpl.n	800cf06 <__sflush_r+0x7e>
 800cefc:	1c42      	adds	r2, r0, #1
 800cefe:	d101      	bne.n	800cf04 <__sflush_r+0x7c>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b903      	cbnz	r3, 800cf06 <__sflush_r+0x7e>
 800cf04:	6560      	str	r0, [r4, #84]	; 0x54
 800cf06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf08:	602f      	str	r7, [r5, #0]
 800cf0a:	2900      	cmp	r1, #0
 800cf0c:	d0c9      	beq.n	800cea2 <__sflush_r+0x1a>
 800cf0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf12:	4299      	cmp	r1, r3
 800cf14:	d002      	beq.n	800cf1c <__sflush_r+0x94>
 800cf16:	4628      	mov	r0, r5
 800cf18:	f7ff fbea 	bl	800c6f0 <_free_r>
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	6360      	str	r0, [r4, #52]	; 0x34
 800cf20:	e7c0      	b.n	800cea4 <__sflush_r+0x1c>
 800cf22:	2301      	movs	r3, #1
 800cf24:	4628      	mov	r0, r5
 800cf26:	47b0      	blx	r6
 800cf28:	1c41      	adds	r1, r0, #1
 800cf2a:	d1c8      	bne.n	800cebe <__sflush_r+0x36>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0c5      	beq.n	800cebe <__sflush_r+0x36>
 800cf32:	2b1d      	cmp	r3, #29
 800cf34:	d001      	beq.n	800cf3a <__sflush_r+0xb2>
 800cf36:	2b16      	cmp	r3, #22
 800cf38:	d101      	bne.n	800cf3e <__sflush_r+0xb6>
 800cf3a:	602f      	str	r7, [r5, #0]
 800cf3c:	e7b1      	b.n	800cea2 <__sflush_r+0x1a>
 800cf3e:	89a3      	ldrh	r3, [r4, #12]
 800cf40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf44:	81a3      	strh	r3, [r4, #12]
 800cf46:	e7ad      	b.n	800cea4 <__sflush_r+0x1c>
 800cf48:	690f      	ldr	r7, [r1, #16]
 800cf4a:	2f00      	cmp	r7, #0
 800cf4c:	d0a9      	beq.n	800cea2 <__sflush_r+0x1a>
 800cf4e:	0793      	lsls	r3, r2, #30
 800cf50:	680e      	ldr	r6, [r1, #0]
 800cf52:	bf08      	it	eq
 800cf54:	694b      	ldreq	r3, [r1, #20]
 800cf56:	600f      	str	r7, [r1, #0]
 800cf58:	bf18      	it	ne
 800cf5a:	2300      	movne	r3, #0
 800cf5c:	eba6 0807 	sub.w	r8, r6, r7
 800cf60:	608b      	str	r3, [r1, #8]
 800cf62:	f1b8 0f00 	cmp.w	r8, #0
 800cf66:	dd9c      	ble.n	800cea2 <__sflush_r+0x1a>
 800cf68:	6a21      	ldr	r1, [r4, #32]
 800cf6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf6c:	4643      	mov	r3, r8
 800cf6e:	463a      	mov	r2, r7
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b0      	blx	r6
 800cf74:	2800      	cmp	r0, #0
 800cf76:	dc06      	bgt.n	800cf86 <__sflush_r+0xfe>
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf7e:	81a3      	strh	r3, [r4, #12]
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	e78e      	b.n	800cea4 <__sflush_r+0x1c>
 800cf86:	4407      	add	r7, r0
 800cf88:	eba8 0800 	sub.w	r8, r8, r0
 800cf8c:	e7e9      	b.n	800cf62 <__sflush_r+0xda>
 800cf8e:	bf00      	nop
 800cf90:	dfbffffe 	.word	0xdfbffffe

0800cf94 <_fflush_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	690b      	ldr	r3, [r1, #16]
 800cf98:	4605      	mov	r5, r0
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	b913      	cbnz	r3, 800cfa4 <_fflush_r+0x10>
 800cf9e:	2500      	movs	r5, #0
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	b118      	cbz	r0, 800cfae <_fflush_r+0x1a>
 800cfa6:	6a03      	ldr	r3, [r0, #32]
 800cfa8:	b90b      	cbnz	r3, 800cfae <_fflush_r+0x1a>
 800cfaa:	f7ff f993 	bl	800c2d4 <__sinit>
 800cfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0f3      	beq.n	800cf9e <_fflush_r+0xa>
 800cfb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfb8:	07d0      	lsls	r0, r2, #31
 800cfba:	d404      	bmi.n	800cfc6 <_fflush_r+0x32>
 800cfbc:	0599      	lsls	r1, r3, #22
 800cfbe:	d402      	bmi.n	800cfc6 <_fflush_r+0x32>
 800cfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfc2:	f7ff fb84 	bl	800c6ce <__retarget_lock_acquire_recursive>
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	4621      	mov	r1, r4
 800cfca:	f7ff ff5d 	bl	800ce88 <__sflush_r>
 800cfce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfd0:	07da      	lsls	r2, r3, #31
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	d4e4      	bmi.n	800cfa0 <_fflush_r+0xc>
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	059b      	lsls	r3, r3, #22
 800cfda:	d4e1      	bmi.n	800cfa0 <_fflush_r+0xc>
 800cfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfde:	f7ff fb77 	bl	800c6d0 <__retarget_lock_release_recursive>
 800cfe2:	e7dd      	b.n	800cfa0 <_fflush_r+0xc>

0800cfe4 <__swhatbuf_r>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfec:	2900      	cmp	r1, #0
 800cfee:	b096      	sub	sp, #88	; 0x58
 800cff0:	4615      	mov	r5, r2
 800cff2:	461e      	mov	r6, r3
 800cff4:	da0d      	bge.n	800d012 <__swhatbuf_r+0x2e>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cffc:	f04f 0100 	mov.w	r1, #0
 800d000:	bf0c      	ite	eq
 800d002:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d006:	2340      	movne	r3, #64	; 0x40
 800d008:	2000      	movs	r0, #0
 800d00a:	6031      	str	r1, [r6, #0]
 800d00c:	602b      	str	r3, [r5, #0]
 800d00e:	b016      	add	sp, #88	; 0x58
 800d010:	bd70      	pop	{r4, r5, r6, pc}
 800d012:	466a      	mov	r2, sp
 800d014:	f000 f87c 	bl	800d110 <_fstat_r>
 800d018:	2800      	cmp	r0, #0
 800d01a:	dbec      	blt.n	800cff6 <__swhatbuf_r+0x12>
 800d01c:	9901      	ldr	r1, [sp, #4]
 800d01e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d022:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d026:	4259      	negs	r1, r3
 800d028:	4159      	adcs	r1, r3
 800d02a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d02e:	e7eb      	b.n	800d008 <__swhatbuf_r+0x24>

0800d030 <__smakebuf_r>:
 800d030:	898b      	ldrh	r3, [r1, #12]
 800d032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d034:	079d      	lsls	r5, r3, #30
 800d036:	4606      	mov	r6, r0
 800d038:	460c      	mov	r4, r1
 800d03a:	d507      	bpl.n	800d04c <__smakebuf_r+0x1c>
 800d03c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	6123      	str	r3, [r4, #16]
 800d044:	2301      	movs	r3, #1
 800d046:	6163      	str	r3, [r4, #20]
 800d048:	b002      	add	sp, #8
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	ab01      	add	r3, sp, #4
 800d04e:	466a      	mov	r2, sp
 800d050:	f7ff ffc8 	bl	800cfe4 <__swhatbuf_r>
 800d054:	9900      	ldr	r1, [sp, #0]
 800d056:	4605      	mov	r5, r0
 800d058:	4630      	mov	r0, r6
 800d05a:	f7ff fbb5 	bl	800c7c8 <_malloc_r>
 800d05e:	b948      	cbnz	r0, 800d074 <__smakebuf_r+0x44>
 800d060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d064:	059a      	lsls	r2, r3, #22
 800d066:	d4ef      	bmi.n	800d048 <__smakebuf_r+0x18>
 800d068:	f023 0303 	bic.w	r3, r3, #3
 800d06c:	f043 0302 	orr.w	r3, r3, #2
 800d070:	81a3      	strh	r3, [r4, #12]
 800d072:	e7e3      	b.n	800d03c <__smakebuf_r+0xc>
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	6020      	str	r0, [r4, #0]
 800d078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d07c:	81a3      	strh	r3, [r4, #12]
 800d07e:	9b00      	ldr	r3, [sp, #0]
 800d080:	6163      	str	r3, [r4, #20]
 800d082:	9b01      	ldr	r3, [sp, #4]
 800d084:	6120      	str	r0, [r4, #16]
 800d086:	b15b      	cbz	r3, 800d0a0 <__smakebuf_r+0x70>
 800d088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d08c:	4630      	mov	r0, r6
 800d08e:	f000 f851 	bl	800d134 <_isatty_r>
 800d092:	b128      	cbz	r0, 800d0a0 <__smakebuf_r+0x70>
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	f023 0303 	bic.w	r3, r3, #3
 800d09a:	f043 0301 	orr.w	r3, r3, #1
 800d09e:	81a3      	strh	r3, [r4, #12]
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	431d      	orrs	r5, r3
 800d0a4:	81a5      	strh	r5, [r4, #12]
 800d0a6:	e7cf      	b.n	800d048 <__smakebuf_r+0x18>

0800d0a8 <_putc_r>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	4614      	mov	r4, r2
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	b118      	cbz	r0, 800d0ba <_putc_r+0x12>
 800d0b2:	6a03      	ldr	r3, [r0, #32]
 800d0b4:	b90b      	cbnz	r3, 800d0ba <_putc_r+0x12>
 800d0b6:	f7ff f90d 	bl	800c2d4 <__sinit>
 800d0ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0bc:	07d8      	lsls	r0, r3, #31
 800d0be:	d405      	bmi.n	800d0cc <_putc_r+0x24>
 800d0c0:	89a3      	ldrh	r3, [r4, #12]
 800d0c2:	0599      	lsls	r1, r3, #22
 800d0c4:	d402      	bmi.n	800d0cc <_putc_r+0x24>
 800d0c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0c8:	f7ff fb01 	bl	800c6ce <__retarget_lock_acquire_recursive>
 800d0cc:	68a3      	ldr	r3, [r4, #8]
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	60a3      	str	r3, [r4, #8]
 800d0d4:	da05      	bge.n	800d0e2 <_putc_r+0x3a>
 800d0d6:	69a2      	ldr	r2, [r4, #24]
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	db12      	blt.n	800d102 <_putc_r+0x5a>
 800d0dc:	b2eb      	uxtb	r3, r5
 800d0de:	2b0a      	cmp	r3, #10
 800d0e0:	d00f      	beq.n	800d102 <_putc_r+0x5a>
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	6022      	str	r2, [r4, #0]
 800d0e8:	701d      	strb	r5, [r3, #0]
 800d0ea:	b2ed      	uxtb	r5, r5
 800d0ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0ee:	07da      	lsls	r2, r3, #31
 800d0f0:	d405      	bmi.n	800d0fe <_putc_r+0x56>
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	059b      	lsls	r3, r3, #22
 800d0f6:	d402      	bmi.n	800d0fe <_putc_r+0x56>
 800d0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0fa:	f7ff fae9 	bl	800c6d0 <__retarget_lock_release_recursive>
 800d0fe:	4628      	mov	r0, r5
 800d100:	bd70      	pop	{r4, r5, r6, pc}
 800d102:	4629      	mov	r1, r5
 800d104:	4622      	mov	r2, r4
 800d106:	4630      	mov	r0, r6
 800d108:	f7ff f9d3 	bl	800c4b2 <__swbuf_r>
 800d10c:	4605      	mov	r5, r0
 800d10e:	e7ed      	b.n	800d0ec <_putc_r+0x44>

0800d110 <_fstat_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4d07      	ldr	r5, [pc, #28]	; (800d130 <_fstat_r+0x20>)
 800d114:	2300      	movs	r3, #0
 800d116:	4604      	mov	r4, r0
 800d118:	4608      	mov	r0, r1
 800d11a:	4611      	mov	r1, r2
 800d11c:	602b      	str	r3, [r5, #0]
 800d11e:	f7f3 fd44 	bl	8000baa <_fstat>
 800d122:	1c43      	adds	r3, r0, #1
 800d124:	d102      	bne.n	800d12c <_fstat_r+0x1c>
 800d126:	682b      	ldr	r3, [r5, #0]
 800d128:	b103      	cbz	r3, 800d12c <_fstat_r+0x1c>
 800d12a:	6023      	str	r3, [r4, #0]
 800d12c:	bd38      	pop	{r3, r4, r5, pc}
 800d12e:	bf00      	nop
 800d130:	20004db8 	.word	0x20004db8

0800d134 <_isatty_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4d06      	ldr	r5, [pc, #24]	; (800d150 <_isatty_r+0x1c>)
 800d138:	2300      	movs	r3, #0
 800d13a:	4604      	mov	r4, r0
 800d13c:	4608      	mov	r0, r1
 800d13e:	602b      	str	r3, [r5, #0]
 800d140:	f7f3 fd43 	bl	8000bca <_isatty>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	d102      	bne.n	800d14e <_isatty_r+0x1a>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	b103      	cbz	r3, 800d14e <_isatty_r+0x1a>
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	20004db8 	.word	0x20004db8

0800d154 <_sbrk_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4d06      	ldr	r5, [pc, #24]	; (800d170 <_sbrk_r+0x1c>)
 800d158:	2300      	movs	r3, #0
 800d15a:	4604      	mov	r4, r0
 800d15c:	4608      	mov	r0, r1
 800d15e:	602b      	str	r3, [r5, #0]
 800d160:	f7f3 fd4c 	bl	8000bfc <_sbrk>
 800d164:	1c43      	adds	r3, r0, #1
 800d166:	d102      	bne.n	800d16e <_sbrk_r+0x1a>
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	b103      	cbz	r3, 800d16e <_sbrk_r+0x1a>
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	bd38      	pop	{r3, r4, r5, pc}
 800d170:	20004db8 	.word	0x20004db8

0800d174 <_init>:
 800d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d176:	bf00      	nop
 800d178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d17a:	bc08      	pop	{r3}
 800d17c:	469e      	mov	lr, r3
 800d17e:	4770      	bx	lr

0800d180 <_fini>:
 800d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d182:	bf00      	nop
 800d184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d186:	bc08      	pop	{r3}
 800d188:	469e      	mov	lr, r3
 800d18a:	4770      	bx	lr
