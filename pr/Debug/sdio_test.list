
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060bc  080060bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c4  080060c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080060cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  08006134  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08006134  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001004d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3e  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00032b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae8  00000000  00000000  000339b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b4e  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131f0  00000000  00000000  0004cfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db7c  00000000  00000000  000601de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004074  00000000  00000000  000edd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000f1dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005ecc 	.word	0x08005ecc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08005ecc 	.word	0x08005ecc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d013      	beq.n	8000510 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00b      	beq.n	8000510 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004f8:	e000      	b.n	80004fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000506:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <print_err>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void print_err(FRESULT fr){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	switch(fr){
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b13      	cmp	r3, #19
 800052e:	d87b      	bhi.n	8000628 <print_err+0x108>
 8000530:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <print_err+0x18>)
 8000532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000536:	bf00      	nop
 8000538:	08000589 	.word	0x08000589
 800053c:	08000591 	.word	0x08000591
 8000540:	08000599 	.word	0x08000599
 8000544:	080005a1 	.word	0x080005a1
 8000548:	080005a9 	.word	0x080005a9
 800054c:	080005b1 	.word	0x080005b1
 8000550:	080005b9 	.word	0x080005b9
 8000554:	080005c1 	.word	0x080005c1
 8000558:	080005c9 	.word	0x080005c9
 800055c:	080005d1 	.word	0x080005d1
 8000560:	080005d9 	.word	0x080005d9
 8000564:	080005e1 	.word	0x080005e1
 8000568:	080005e9 	.word	0x080005e9
 800056c:	080005f1 	.word	0x080005f1
 8000570:	080005f9 	.word	0x080005f9
 8000574:	08000601 	.word	0x08000601
 8000578:	08000609 	.word	0x08000609
 800057c:	08000611 	.word	0x08000611
 8000580:	08000619 	.word	0x08000619
 8000584:	08000621 	.word	0x08000621
	case FR_OK:				/* (0) Succeeded */
		printf("SD: FR_OK \n");
 8000588:	4829      	ldr	r0, [pc, #164]	; (8000630 <print_err+0x110>)
 800058a:	f005 f909 	bl	80057a0 <puts>
		break;
 800058e:	e04b      	b.n	8000628 <print_err+0x108>
	case FR_DISK_ERR:			/* (1) A hard error occurred in the low level disk I/O layer */
		printf("SD: FR_DISK_ERR \n");
 8000590:	4828      	ldr	r0, [pc, #160]	; (8000634 <print_err+0x114>)
 8000592:	f005 f905 	bl	80057a0 <puts>
		break;
 8000596:	e047      	b.n	8000628 <print_err+0x108>
	case FR_INT_ERR:				/* (2) Assertion failed */
		printf("SD: FR_INT_ERR \n");
 8000598:	4827      	ldr	r0, [pc, #156]	; (8000638 <print_err+0x118>)
 800059a:	f005 f901 	bl	80057a0 <puts>
		break;
 800059e:	e043      	b.n	8000628 <print_err+0x108>
	case FR_NOT_READY:			/* (3) The physical drive cannot work */
		printf("SD: FR_NOT_READY \n");
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <print_err+0x11c>)
 80005a2:	f005 f8fd 	bl	80057a0 <puts>
		break;
 80005a6:	e03f      	b.n	8000628 <print_err+0x108>
	case FR_NO_FILE:				/* (4) Could not find the file */
		printf("SD: FR_NO_FILE \n");
 80005a8:	4825      	ldr	r0, [pc, #148]	; (8000640 <print_err+0x120>)
 80005aa:	f005 f8f9 	bl	80057a0 <puts>
		break;
 80005ae:	e03b      	b.n	8000628 <print_err+0x108>
	case FR_NO_PATH:				/* (5) Could not find the path */
		printf("SD: FR_NO_PATH \n");
 80005b0:	4824      	ldr	r0, [pc, #144]	; (8000644 <print_err+0x124>)
 80005b2:	f005 f8f5 	bl	80057a0 <puts>
		break;
 80005b6:	e037      	b.n	8000628 <print_err+0x108>
	case FR_INVALID_NAME:		/* (6) The path name format is invalid */
		printf("SD: FR_INVALID_NAME \n");
 80005b8:	4823      	ldr	r0, [pc, #140]	; (8000648 <print_err+0x128>)
 80005ba:	f005 f8f1 	bl	80057a0 <puts>
		break;
 80005be:	e033      	b.n	8000628 <print_err+0x108>
	case FR_DENIED:				/* (7) Access denied due to prohibited access or directory full */
		printf("SD: FR_DENIED \n");
 80005c0:	4822      	ldr	r0, [pc, #136]	; (800064c <print_err+0x12c>)
 80005c2:	f005 f8ed 	bl	80057a0 <puts>
		break;
 80005c6:	e02f      	b.n	8000628 <print_err+0x108>
	case FR_EXIST:				/* (8) Access denied due to prohibited access */
		printf("SD: FR_EXIST \n");
 80005c8:	4821      	ldr	r0, [pc, #132]	; (8000650 <print_err+0x130>)
 80005ca:	f005 f8e9 	bl	80057a0 <puts>
		break;
 80005ce:	e02b      	b.n	8000628 <print_err+0x108>
	case FR_INVALID_OBJECT:		/* (9) The file/directory object is invalid */
		printf("SD: FR_INVALID_OBJECT \n");
 80005d0:	4820      	ldr	r0, [pc, #128]	; (8000654 <print_err+0x134>)
 80005d2:	f005 f8e5 	bl	80057a0 <puts>
		break;
 80005d6:	e027      	b.n	8000628 <print_err+0x108>
	case FR_WRITE_PROTECTED:		/* (10) The physical drive is write protected */
		printf("SD: FR_WRITE_PROTECTED \n");
 80005d8:	481f      	ldr	r0, [pc, #124]	; (8000658 <print_err+0x138>)
 80005da:	f005 f8e1 	bl	80057a0 <puts>
		break;
 80005de:	e023      	b.n	8000628 <print_err+0x108>
	case FR_INVALID_DRIVE:		/* (11) The logical drive number is invalid */
		printf("SD: FR_INVALID_DRIVE \n");
 80005e0:	481e      	ldr	r0, [pc, #120]	; (800065c <print_err+0x13c>)
 80005e2:	f005 f8dd 	bl	80057a0 <puts>
		break;
 80005e6:	e01f      	b.n	8000628 <print_err+0x108>
	case FR_NOT_ENABLED:			/* (12) The volume has no work area */
		printf("SD: FR_NOT_ENABLED \n");
 80005e8:	481d      	ldr	r0, [pc, #116]	; (8000660 <print_err+0x140>)
 80005ea:	f005 f8d9 	bl	80057a0 <puts>
		break;
 80005ee:	e01b      	b.n	8000628 <print_err+0x108>
	case FR_NO_FILESYSTEM:		/* (13) There is no valid FAT volume */
		printf("SD: FR_NO_FILESYSTEM \n");
 80005f0:	481c      	ldr	r0, [pc, #112]	; (8000664 <print_err+0x144>)
 80005f2:	f005 f8d5 	bl	80057a0 <puts>
		break;
 80005f6:	e017      	b.n	8000628 <print_err+0x108>
	case FR_MKFS_ABORTED:		/* (14) The f_mkfs() aborted due to any problem */
		printf("SD: FR_MKFS_ABORTED \n");
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <print_err+0x148>)
 80005fa:	f005 f8d1 	bl	80057a0 <puts>
		break;
 80005fe:	e013      	b.n	8000628 <print_err+0x108>
	case FR_TIMEOUT:				/* (15) Could not get a grant to access the volume within defined period */
		printf("SD: FR_TIMEOUT \n");
 8000600:	481a      	ldr	r0, [pc, #104]	; (800066c <print_err+0x14c>)
 8000602:	f005 f8cd 	bl	80057a0 <puts>
		break;
 8000606:	e00f      	b.n	8000628 <print_err+0x108>
	case FR_LOCKED:				/* (16) The operation is rejected according to the file sharing policy */
		printf("SD: FR_LOCKED \n");
 8000608:	4819      	ldr	r0, [pc, #100]	; (8000670 <print_err+0x150>)
 800060a:	f005 f8c9 	bl	80057a0 <puts>
		break;
 800060e:	e00b      	b.n	8000628 <print_err+0x108>
	case FR_NOT_ENOUGH_CORE:		/* (17) LFN working buffer could not be allocated */
		printf("SD: FR_NOT_ENOUGH_CORE \n");
 8000610:	4818      	ldr	r0, [pc, #96]	; (8000674 <print_err+0x154>)
 8000612:	f005 f8c5 	bl	80057a0 <puts>
		break;
 8000616:	e007      	b.n	8000628 <print_err+0x108>
	case FR_TOO_MANY_OPEN_FILES:	/* (18) Number of open files > _FS_LOCK */
		printf("SD: FR_TOO_MANY_OPEN_FILES \n");
 8000618:	4817      	ldr	r0, [pc, #92]	; (8000678 <print_err+0x158>)
 800061a:	f005 f8c1 	bl	80057a0 <puts>
		break;
 800061e:	e003      	b.n	8000628 <print_err+0x108>
	case FR_INVALID_PARAMETER:	/* (19) Given parameter is invalid */
		printf("SD: FR_INVALID_PARAMETER \n");
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <print_err+0x15c>)
 8000622:	f005 f8bd 	bl	80057a0 <puts>
		break;
 8000626:	bf00      	nop
	}
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	08005ee4 	.word	0x08005ee4
 8000634:	08005ef0 	.word	0x08005ef0
 8000638:	08005f04 	.word	0x08005f04
 800063c:	08005f14 	.word	0x08005f14
 8000640:	08005f28 	.word	0x08005f28
 8000644:	08005f38 	.word	0x08005f38
 8000648:	08005f48 	.word	0x08005f48
 800064c:	08005f60 	.word	0x08005f60
 8000650:	08005f70 	.word	0x08005f70
 8000654:	08005f80 	.word	0x08005f80
 8000658:	08005f98 	.word	0x08005f98
 800065c:	08005fb0 	.word	0x08005fb0
 8000660:	08005fc8 	.word	0x08005fc8
 8000664:	08005fdc 	.word	0x08005fdc
 8000668:	08005ff4 	.word	0x08005ff4
 800066c:	0800600c 	.word	0x0800600c
 8000670:	0800601c 	.word	0x0800601c
 8000674:	0800602c 	.word	0x0800602c
 8000678:	08006044 	.word	0x08006044
 800067c:	08006060 	.word	0x08006060

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fc1b 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f843 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f91f 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000696:	f000 f8f5 	bl	8000884 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800069a:	f000 f8c9 	bl	8000830 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800069e:	f000 f8a7 	bl	80007f0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80006a2:	f004 f825 	bl	80046f0 <MX_FATFS_Init>

  FATFS FatFs;
  FIL fil;
  FRESULT fr;

  fr = f_mount(&FatFs, "", 1);
 80006a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80006aa:	f103 0308 	add.w	r3, r3, #8
 80006ae:	3b18      	subs	r3, #24
 80006b0:	2201      	movs	r2, #1
 80006b2:	4916      	ldr	r1, [pc, #88]	; (800070c <main+0x8c>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 febb 	bl	8005430 <f_mount>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80006c0:	f102 0227 	add.w	r2, r2, #39	; 0x27
 80006c4:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 80006c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80006ca:	f103 0327 	add.w	r3, r3, #39	; 0x27
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff25 	bl	8000520 <print_err>
  if(fr == FR_OK){
 80006d6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80006da:	f103 0327 	add.w	r3, r3, #39	; 0x27
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d105      	bne.n	80006f0 <main+0x70>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2120      	movs	r1, #32
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x90>)
 80006ea:	f001 fa93 	bl	8001c14 <HAL_GPIO_WritePin>
 80006ee:	e004      	b.n	80006fa <main+0x7a>
  } else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <main+0x90>)
 80006f6:	f001 fa8d 	bl	8001c14 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80006fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fe:	f000 fc53 	bl	8000fa8 <HAL_Delay>
	  printf("test\n");
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <main+0x94>)
 8000704:	f005 f84c 	bl	80057a0 <puts>
	  HAL_Delay(1000);
 8000708:	e7f7      	b.n	80006fa <main+0x7a>
 800070a:	bf00      	nop
 800070c:	0800607c 	.word	0x0800607c
 8000710:	40020000 	.word	0x40020000
 8000714:	08006080 	.word	0x08006080

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f91a 	bl	8005960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <SystemClock_Config+0xd0>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xd4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd4>)
 8000766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000790:	2354      	movs	r3, #84	; 0x54
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fa51 	bl	8001c48 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ac:	f000 f92a 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fcb2 	bl	8002138 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007da:	f000 f913 	bl	8000a04 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SDIO_SD_Init+0x38>)
 80007f6:	4a0d      	ldr	r2, [pc, #52]	; (800082c <MX_SDIO_SD_Init+0x3c>)
 80007f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_SDIO_SD_Init+0x38>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SDIO_SD_Init+0x38>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_SDIO_SD_Init+0x38>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SDIO_SD_Init+0x38>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_SDIO_SD_Init+0x38>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <MX_SDIO_SD_Init+0x38>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	20000084 	.word	0x20000084
 800082c:	40012c00 	.word	0x40012c00

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f002 ff1f 	bl	80036aa <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f8c7 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200001c8 	.word	0x200001c8
 8000880:	40004400 	.word	0x40004400

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_DMA_Init+0x4c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <MX_DMA_Init+0x4c>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_DMA_Init+0x4c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	203b      	movs	r0, #59	; 0x3b
 80008ac:	f000 fc7b 	bl	80011a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008b0:	203b      	movs	r0, #59	; 0x3b
 80008b2:	f000 fc94 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2045      	movs	r0, #69	; 0x45
 80008bc:	f000 fc73 	bl	80011a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008c0:	2045      	movs	r0, #69	; 0x45
 80008c2:	f000 fc8c 	bl	80011de <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <MX_GPIO_Init+0xec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a33      	ldr	r2, [pc, #204]	; (80009c0 <MX_GPIO_Init+0xec>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <MX_GPIO_Init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_GPIO_Init+0xec>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a25      	ldr	r2, [pc, #148]	; (80009c0 <MX_GPIO_Init+0xec>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <MX_GPIO_Init+0xec>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_GPIO_Init+0xec>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	4812      	ldr	r0, [pc, #72]	; (80009c4 <MX_GPIO_Init+0xf0>)
 800097c:	f001 f94a 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000986:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_GPIO_Init+0xf4>)
 8000998:	f000 ffb8 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_GPIO_Init+0xf0>)
 80009b4:	f000 ffaa 	bl	800190c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020800 	.word	0x40020800

080009cc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e009      	b.n	80009f2 <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60ba      	str	r2, [r7, #8]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fd72 	bl	80004d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	dbf1      	blt.n	80009de <_write+0x12>
	}
	return len;
 80009fa:	687b      	ldr	r3, [r7, #4]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4e:	2007      	movs	r0, #7
 8000a50:	f000 fb9e 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a64      	ldr	r2, [pc, #400]	; (8000c10 <HAL_SD_MspInit+0x1b0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	f040 80c1 	bne.w	8000c06 <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	4b62      	ldr	r3, [pc, #392]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8c:	4a61      	ldr	r2, [pc, #388]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000a8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a92:	6453      	str	r3, [r2, #68]	; 0x44
 8000a94:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b58      	ldr	r3, [pc, #352]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b54      	ldr	r3, [pc, #336]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a53      	ldr	r2, [pc, #332]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b51      	ldr	r3, [pc, #324]	; (8000c14 <HAL_SD_MspInit+0x1b4>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ad8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000adc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000aea:	230c      	movs	r3, #12
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4848      	ldr	r0, [pc, #288]	; (8000c18 <HAL_SD_MspInit+0x1b8>)
 8000af6:	f000 ff09 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000afa:	2304      	movs	r3, #4
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4841      	ldr	r0, [pc, #260]	; (8000c1c <HAL_SD_MspInit+0x1bc>)
 8000b16:	f000 fef9 	bl	800190c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000b1a:	4b41      	ldr	r3, [pc, #260]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b1c:	4a41      	ldr	r2, [pc, #260]	; (8000c24 <HAL_SD_MspInit+0x1c4>)
 8000b1e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b20:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b26:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b28:	4b3d      	ldr	r3, [pc, #244]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b3c:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b42:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b44:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b4e:	2220      	movs	r2, #32
 8000b50:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b58:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000b64:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b72:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000b74:	482a      	ldr	r0, [pc, #168]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b76:	f000 fb4d 	bl	8001214 <HAL_DMA_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000b80:	f7ff ff40 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
 8000b8a:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <HAL_SD_MspInit+0x1c0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000b92:	4a26      	ldr	r2, [pc, #152]	; (8000c2c <HAL_SD_MspInit+0x1cc>)
 8000b94:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000b98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000ba0:	2240      	movs	r2, #64	; 0x40
 8000ba2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bdc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000be4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bec:	f000 fb12 	bl	8001214 <HAL_DMA_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000bf6:	f7ff ff05 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <HAL_SD_MspInit+0x1c8>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012c00 	.word	0x40012c00
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	20000108 	.word	0x20000108
 8000c24:	40026458 	.word	0x40026458
 8000c28:	20000168 	.word	0x20000168
 8000c2c:	400264a0 	.word	0x400264a0

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca6:	f000 fe31 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f92c 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA2_Stream3_IRQHandler+0x10>)
 8000d1a:	f000 fb81 	bl	8001420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000108 	.word	0x20000108

08000d28 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DMA2_Stream6_IRQHandler+0x10>)
 8000d2e:	f000 fb77 	bl	8001420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000168 	.word	0x20000168

08000d3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
  }

  return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 fdf4 	bl	80059fc <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20018000 	.word	0x20018000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000020c 	.word	0x2000020c
 8000e48:	200003a8 	.word	0x200003a8

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 fdb3 	bl	8005a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fbed 	bl	8000680 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb4:	080060cc 	.word	0x080060cc
  ldr r2, =_sbss
 8000eb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ebc:	200003a4 	.word	0x200003a4

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f94f 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fd8a 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f967 	bl	80011fa <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f92f 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000210 	.word	0x20000210

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000210 	.word	0x20000210

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff3e 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff31 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff feb6 	bl	8000f90 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e099      	b.n	8001364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001250:	e00f      	b.n	8001272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001252:	f7ff fe9d 	bl	8000f90 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b05      	cmp	r3, #5
 800125e:	d908      	bls.n	8001272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2220      	movs	r2, #32
 8001264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e078      	b.n	8001364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e8      	bne.n	8001252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_DMA_Init+0x158>)
 800128c:	4013      	ands	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800129e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d107      	bne.n	80012dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4313      	orrs	r3, r2
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4313      	orrs	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f023 0307 	bic.w	r3, r3, #7
 80012f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	2b04      	cmp	r3, #4
 8001304:	d117      	bne.n	8001336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00e      	beq.n	8001336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fa7b 	bl	8001814 <DMA_CheckFifoParam>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2240      	movs	r2, #64	; 0x40
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001332:	2301      	movs	r3, #1
 8001334:	e016      	b.n	8001364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fa32 	bl	80017a8 <DMA_CalcBaseAndBitshift>
 8001344:	4603      	mov	r3, r0
 8001346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	223f      	movs	r2, #63	; 0x3f
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	f010803f 	.word	0xf010803f

08001370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_DMA_Start_IT+0x26>
 8001392:	2302      	movs	r3, #2
 8001394:	e040      	b.n	8001418 <HAL_DMA_Start_IT+0xa8>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d12f      	bne.n	800140a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2202      	movs	r2, #2
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 f9c4 	bl	800174c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	223f      	movs	r2, #63	; 0x3f
 80013ca:	409a      	lsls	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0216 	orr.w	r2, r2, #22
 80013de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 0208 	orr.w	r2, r2, #8
 80013f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e005      	b.n	8001416 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001412:	2302      	movs	r3, #2
 8001414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001416:	7dfb      	ldrb	r3, [r7, #23]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800142c:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_DMA_IRQHandler+0x248>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a8e      	ldr	r2, [pc, #568]	; (800166c <HAL_DMA_IRQHandler+0x24c>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0a9b      	lsrs	r3, r3, #10
 8001438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144a:	2208      	movs	r2, #8
 800144c:	409a      	lsls	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d01a      	beq.n	800148c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0204 	bic.w	r2, r2, #4
 8001472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001478:	2208      	movs	r2, #8
 800147a:	409a      	lsls	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	2201      	movs	r2, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d012      	beq.n	80014c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	2201      	movs	r2, #1
 80014b0:	409a      	lsls	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	f043 0202 	orr.w	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2204      	movs	r2, #4
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d012      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	2204      	movs	r2, #4
 80014e6:	409a      	lsls	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f0:	f043 0204 	orr.w	r2, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2210      	movs	r2, #16
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d043      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d03c      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2210      	movs	r2, #16
 800151c:	409a      	lsls	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d018      	beq.n	8001562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d024      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
 800154e:	e01f      	b.n	8001590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01b      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
 8001560:	e016      	b.n	8001590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d107      	bne.n	8001580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0208 	bic.w	r2, r2, #8
 800157e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	2220      	movs	r2, #32
 8001596:	409a      	lsls	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 808f 	beq.w	80016c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8087 	beq.w	80016c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2220      	movs	r2, #32
 80015b8:	409a      	lsls	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d136      	bne.n	8001638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0216 	bic.w	r2, r2, #22
 80015d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <HAL_DMA_IRQHandler+0x1da>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0208 	bic.w	r2, r2, #8
 8001608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	223f      	movs	r2, #63	; 0x3f
 8001610:	409a      	lsls	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162a:	2b00      	cmp	r3, #0
 800162c:	d07e      	beq.n	800172c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
        }
        return;
 8001636:	e079      	b.n	800172c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d01d      	beq.n	8001682 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10d      	bne.n	8001670 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	2b00      	cmp	r3, #0
 800165a:	d031      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
 8001664:	e02c      	b.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
 8001680:	e01e      	b.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10f      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0210 	bic.w	r2, r2, #16
 800169e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d032      	beq.n	800172e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d022      	beq.n	800171a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2205      	movs	r2, #5
 80016d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d307      	bcc.n	8001708 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f2      	bne.n	80016ec <HAL_DMA_IRQHandler+0x2cc>
 8001706:	e000      	b.n	800170a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001708:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
 800172a:	e000      	b.n	800172e <HAL_DMA_IRQHandler+0x30e>
        return;
 800172c:	bf00      	nop
    }
  }
}
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	d108      	bne.n	800178c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800178a:	e007      	b.n	800179c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	60da      	str	r2, [r3, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	3b10      	subs	r3, #16
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <DMA_CalcBaseAndBitshift+0x64>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <DMA_CalcBaseAndBitshift+0x68>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d909      	bls.n	80017ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	1d1a      	adds	r2, r3, #4
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	659a      	str	r2, [r3, #88]	; 0x58
 80017e8:	e007      	b.n	80017fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	aaaaaaab 	.word	0xaaaaaaab
 8001810:	080060a0 	.word	0x080060a0

08001814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11f      	bne.n	800186e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d856      	bhi.n	80018e2 <DMA_CheckFifoParam+0xce>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <DMA_CheckFifoParam+0x28>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800185f 	.word	0x0800185f
 8001844:	0800184d 	.word	0x0800184d
 8001848:	080018e3 	.word	0x080018e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d046      	beq.n	80018e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800185c:	e043      	b.n	80018e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001866:	d140      	bne.n	80018ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800186c:	e03d      	b.n	80018ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001876:	d121      	bne.n	80018bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d837      	bhi.n	80018ee <DMA_CheckFifoParam+0xda>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <DMA_CheckFifoParam+0x70>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001895 	.word	0x08001895
 8001888:	0800189b 	.word	0x0800189b
 800188c:	08001895 	.word	0x08001895
 8001890:	080018ad 	.word	0x080018ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
      break;
 8001898:	e030      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d025      	beq.n	80018f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018aa:	e022      	b.n	80018f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018b4:	d11f      	bne.n	80018f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ba:	e01c      	b.n	80018f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d903      	bls.n	80018ca <DMA_CheckFifoParam+0xb6>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d003      	beq.n	80018d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018c8:	e018      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
      break;
 80018ce:	e015      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00e      	beq.n	80018fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      break;
 80018e0:	e00b      	b.n	80018fa <DMA_CheckFifoParam+0xe6>
      break;
 80018e2:	bf00      	nop
 80018e4:	e00a      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
 80018e8:	e008      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018ea:	bf00      	nop
 80018ec:	e006      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018ee:	bf00      	nop
 80018f0:	e004      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
 80018f4:	e002      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;   
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018fa:	bf00      	nop
    }
  } 
  
  return status; 
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e159      	b.n	8001bdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 8148 	bne.w	8001bd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195a:	2b02      	cmp	r3, #2
 800195c:	d130      	bne.n	80019c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d017      	beq.n	80019fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a2 	beq.w	8001bd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aae:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x202>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x1fe>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_GPIO_Init+0x2f8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x1fa>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_GPIO_Init+0x2fc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x1f6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <HAL_GPIO_Init+0x300>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x1f2>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba6:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f aea2 	bls.w	8001928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e267      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d075      	beq.n	8001d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b7e      	ldr	r3, [pc, #504]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e242      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x74>
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6f      	ldr	r2, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6c      	ldr	r2, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001ce0:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a68      	ldr	r2, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a65      	ldr	r2, [pc, #404]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff f946 	bl	8000f90 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff f942 	bl	8000f90 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e207      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff f932 	bl	8000f90 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f92e 	bl	8000f90 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1f3      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1c7      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff f8e7 	bl	8000f90 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f8e3 	bl	8000f90 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1a8      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4925      	ldr	r1, [pc, #148]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8c6 	bl	8000f90 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff f8c2 	bl	8000f90 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e187      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d036      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff f8a6 	bl	8000f90 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff f8a2 	bl	8000f90 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e167      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e66:	e01b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f88f 	bl	8000f90 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f88b 	bl	8000f90 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d907      	bls.n	8001e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e150      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	42470000 	.word	0x42470000
 8001e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ea      	bne.n	8001e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8097 	beq.w	8001fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b7d      	ldr	r3, [pc, #500]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a7c      	ldr	r2, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b7a      	ldr	r3, [pc, #488]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b77      	ldr	r3, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b74      	ldr	r3, [pc, #464]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a73      	ldr	r2, [pc, #460]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f84b 	bl	8000f90 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff f847 	bl	8000f90 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e10c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2ea>
 8001f24:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a63      	ldr	r2, [pc, #396]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x30c>
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a54      	ldr	r2, [pc, #336]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff f80c 	bl	8000f90 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f808 	bl	8000f90 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0cb      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ee      	beq.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fff6 	bl	8000f90 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7fe fff2 	bl	8000f90 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0b5      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a1 	beq.w	8002128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d05c      	beq.n	80020ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d141      	bne.n	800207e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_OscConfig+0x478>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe ffc6 	bl	8000f90 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe ffc2 	bl	8000f90 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e087      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	019b      	lsls	r3, r3, #6
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe ff9b 	bl	8000f90 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe ff97 	bl	8000f90 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e05c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x416>
 800207c:	e054      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe ff84 	bl	8000f90 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe ff80 	bl	8000f90 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e045      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
 80020aa:	e03d      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e038      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d121      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cc      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d044      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4934      	ldr	r1, [pc, #208]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7fe feb2 	bl	8000f90 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7fe feae 	bl	8000f90 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fe12 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08006088 	.word	0x08006088
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b094      	sub	sp, #80	; 0x50
 800230a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	647b      	str	r3, [r7, #68]	; 0x44
 8002310:	2300      	movs	r3, #0
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002314:	2300      	movs	r3, #0
 8002316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231c:	4b79      	ldr	r3, [pc, #484]	; (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d00d      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 8002328:	2b08      	cmp	r3, #8
 800232a:	f200 80e1 	bhi.w	80024f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 8002332:	2b04      	cmp	r3, #4
 8002334:	d003      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x3a>
 8002336:	e0db      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b73      	ldr	r3, [pc, #460]	; (8002508 <HAL_RCC_GetSysClockFreq+0x204>)
 800233a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800233c:	e0db      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233e:	4b73      	ldr	r3, [pc, #460]	; (800250c <HAL_RCC_GetSysClockFreq+0x208>)
 8002340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002342:	e0d8      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800234c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	2200      	movs	r2, #0
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
 800236e:	2300      	movs	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
 8002372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002376:	4622      	mov	r2, r4
 8002378:	462b      	mov	r3, r5
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002388:	0150      	lsls	r0, r2, #5
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4621      	mov	r1, r4
 8002390:	1a51      	subs	r1, r2, r1
 8002392:	6139      	str	r1, [r7, #16]
 8002394:	4629      	mov	r1, r5
 8002396:	eb63 0301 	sbc.w	r3, r3, r1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023a8:	4659      	mov	r1, fp
 80023aa:	018b      	lsls	r3, r1, #6
 80023ac:	4651      	mov	r1, sl
 80023ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b2:	4651      	mov	r1, sl
 80023b4:	018a      	lsls	r2, r1, #6
 80023b6:	4651      	mov	r1, sl
 80023b8:	ebb2 0801 	subs.w	r8, r2, r1
 80023bc:	4659      	mov	r1, fp
 80023be:	eb63 0901 	sbc.w	r9, r3, r1
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023d6:	4690      	mov	r8, r2
 80023d8:	4699      	mov	r9, r3
 80023da:	4623      	mov	r3, r4
 80023dc:	eb18 0303 	adds.w	r3, r8, r3
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	462b      	mov	r3, r5
 80023e4:	eb49 0303 	adc.w	r3, r9, r3
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023f6:	4629      	mov	r1, r5
 80023f8:	024b      	lsls	r3, r1, #9
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002400:	4621      	mov	r1, r4
 8002402:	024a      	lsls	r2, r1, #9
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800240a:	2200      	movs	r2, #0
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
 800240e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002414:	f7fd fede 	bl	80001d4 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4613      	mov	r3, r2
 800241e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002420:	e058      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	4618      	mov	r0, r3
 800242c:	4611      	mov	r1, r2
 800242e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800243c:	4642      	mov	r2, r8
 800243e:	464b      	mov	r3, r9
 8002440:	f04f 0000 	mov.w	r0, #0
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	0159      	lsls	r1, r3, #5
 800244a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244e:	0150      	lsls	r0, r2, #5
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4641      	mov	r1, r8
 8002456:	ebb2 0a01 	subs.w	sl, r2, r1
 800245a:	4649      	mov	r1, r9
 800245c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800246c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002474:	ebb2 040a 	subs.w	r4, r2, sl
 8002478:	eb63 050b 	sbc.w	r5, r3, fp
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	00eb      	lsls	r3, r5, #3
 8002486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248a:	00e2      	lsls	r2, r4, #3
 800248c:	4614      	mov	r4, r2
 800248e:	461d      	mov	r5, r3
 8002490:	4643      	mov	r3, r8
 8002492:	18e3      	adds	r3, r4, r3
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	464b      	mov	r3, r9
 8002498:	eb45 0303 	adc.w	r3, r5, r3
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024aa:	4629      	mov	r1, r5
 80024ac:	028b      	lsls	r3, r1, #10
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b4:	4621      	mov	r1, r4
 80024b6:	028a      	lsls	r2, r1, #10
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024be:	2200      	movs	r2, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	61fa      	str	r2, [r7, #28]
 80024c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c8:	f7fd fe84 	bl	80001d4 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetSysClockFreq+0x204>)
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3750      	adds	r7, #80	; 0x50
 80024fc:	46bd      	mov	sp, r7
 80024fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	00f42400 	.word	0x00f42400
 800250c:	007a1200 	.word	0x007a1200

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4903      	ldr	r1, [pc, #12]	; (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	08006098 	.word	0x08006098

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff ffdc 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0b5b      	lsrs	r3, r3, #13
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08006098 	.word	0x08006098

08002578 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e022      	b.n	80025d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7fe fa5f 	bl	8000a60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f814 	bl	80025d8 <HAL_SD_InitCard>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00a      	b.n	80025d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b08e      	sub	sp, #56	; 0x38
 80025dc:	af04      	add	r7, sp, #16
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80025f4:	2376      	movs	r3, #118	; 0x76
 80025f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681d      	ldr	r5, [r3, #0]
 80025fc:	466c      	mov	r4, sp
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002610:	4628      	mov	r0, r5
 8002612:	f001 fb0b 	bl	8003c2c <SDIO_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800261c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e04f      	b.n	80026c8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_SD_InitCard+0xf8>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f001 fb32 	bl	8003c9c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_SD_InitCard+0xf8>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800263e:	2002      	movs	r0, #2
 8002640:	f7fe fcb2 	bl	8000fa8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fe11 	bl	800326c <SD_PowerON>
 800264a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e02e      	b.n	80026c8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fd30 	bl	80030d0 <SD_InitCard>
 8002670:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01b      	b.n	80026c8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fb91 	bl	8003dc0 <SDMMC_CmdBlockLength>
 800269e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00f      	beq.n	80026c6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_SD_InitCard+0xfc>)
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bdb0      	pop	{r4, r5, r7, pc}
 80026d0:	422580a0 	.word	0x422580a0
 80026d4:	004005ff 	.word	0x004005ff

080026d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0c0      	b.n	8002882 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	f040 80b9 	bne.w	8002880 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	441a      	add	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	429a      	cmp	r2, r3
 8002720:	d907      	bls.n	8002732 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0a7      	b.n	8002882 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800275c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002764:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2200      	movs	r2, #0
 800276c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3380      	adds	r3, #128	; 0x80
 800279c:	4619      	mov	r1, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	f7fe fde3 	bl	8001370 <HAL_DMA_Start_IT>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d017      	beq.n	80027e0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a33      	ldr	r2, [pc, #204]	; (8002894 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e050      	b.n	8002882 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d002      	beq.n	80027f4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	025b      	lsls	r3, r3, #9
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	025b      	lsls	r3, r3, #9
 80027fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002800:	2390      	movs	r3, #144	; 0x90
 8002802:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002804:	2302      	movs	r3, #2
 8002806:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800280c:	2301      	movs	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f107 0210 	add.w	r2, r7, #16
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f001 faa4 	bl	8003d68 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d90a      	bls.n	800283c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2282      	movs	r2, #130	; 0x82
 800282a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fb08 	bl	8003e48 <SDMMC_CmdReadMultiBlock>
 8002838:	62f8      	str	r0, [r7, #44]	; 0x2c
 800283a:	e009      	b.n	8002850 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2281      	movs	r2, #129	; 0x81
 8002840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002848:	4618      	mov	r0, r3
 800284a:	f001 fadb 	bl	8003e04 <SDMMC_CmdReadSingleBlock>
 800284e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800285c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e002      	b.n	8002882 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3730      	adds	r7, #48	; 0x30
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	08002fbb 	.word	0x08002fbb
 8002890:	0800302d 	.word	0x0800302d
 8002894:	004005ff 	.word	0x004005ff
 8002898:	4225858c 	.word	0x4225858c

0800289c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0c5      	b.n	8002a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 80be 	bne.w	8002a4e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	441a      	add	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d907      	bls.n	80028f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0ac      	b.n	8002a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2203      	movs	r2, #3
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	4a4e      	ldr	r2, [pc, #312]	; (8002a58 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002928:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2200      	movs	r2, #0
 8002930:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	2b01      	cmp	r3, #1
 8002938:	d002      	beq.n	8002940 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	025b      	lsls	r3, r3, #9
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d90a      	bls.n	800295c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	22a0      	movs	r2, #160	; 0xa0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fabc 	bl	8003ed0 <SDMMC_CmdWriteMultiBlock>
 8002958:	62f8      	str	r0, [r7, #44]	; 0x2c
 800295a:	e009      	b.n	8002970 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2290      	movs	r2, #144	; 0x90
 8002960:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fa8f 	bl	8003e8c <SDMMC_CmdWriteSingleBlock>
 800296e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d012      	beq.n	800299c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a39      	ldr	r2, [pc, #228]	; (8002a60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e059      	b.n	8002a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3380      	adds	r3, #128	; 0x80
 80029d2:	461a      	mov	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	f7fe fcc9 	bl	8001370 <HAL_DMA_Start_IT>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01c      	beq.n	8002a1e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80029f2:	f023 0302 	bic.w	r3, r3, #2
 80029f6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e018      	b.n	8002a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a2a:	2390      	movs	r3, #144	; 0x90
 8002a2c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f107 0210 	add.w	r2, r7, #16
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 f98f 	bl	8003d68 <SDIO_ConfigData>

      return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3730      	adds	r7, #48	; 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	08002f91 	.word	0x08002f91
 8002a5c:	0800302d 	.word	0x0800302d
 8002a60:	004005ff 	.word	0x004005ff
 8002a64:	4225858c 	.word	0x4225858c

08002a68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8a:	0f9b      	lsrs	r3, r3, #30
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa8:	0e1b      	lsrs	r3, r3, #24
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aba:	0c1b      	lsrs	r3, r3, #16
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002adc:	0d1b      	lsrs	r3, r3, #20
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afa:	0bdb      	lsrs	r3, r3, #15
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b0c:	0b9b      	lsrs	r3, r3, #14
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b30:	0b1b      	lsrs	r3, r3, #12
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d163      	bne.n	8002c14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b56:	4013      	ands	r3, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002b5c:	0f92      	lsrs	r2, r2, #30
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b68:	0edb      	lsrs	r3, r3, #27
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7a:	0e1b      	lsrs	r3, r3, #24
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	0c9b      	lsrs	r3, r3, #18
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb0:	0bdb      	lsrs	r3, r3, #15
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	7e1b      	ldrb	r3, [r3, #24]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002bde:	fb03 f202 	mul.w	r2, r3, r2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7a1b      	ldrb	r3, [r3, #8]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c00:	0a52      	lsrs	r2, r2, #9
 8002c02:	fb03 f202 	mul.w	r2, r3, r2
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60
 8002c12:	e031      	b.n	8002c78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d11d      	bne.n	8002c58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	3301      	adds	r3, #1
 8002c38:	029a      	lsls	r2, r3, #10
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	661a      	str	r2, [r3, #96]	; 0x60
 8002c56:	e00f      	b.n	8002c78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_SD_GetCardCSD+0x344>)
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e09d      	b.n	8002db4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7c:	0b9b      	lsrs	r3, r3, #14
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	09db      	lsrs	r3, r3, #7
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	0fdb      	lsrs	r3, r3, #31
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	0f5b      	lsrs	r3, r3, #29
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	0d9b      	lsrs	r3, r3, #22
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	0d5b      	lsrs	r3, r3, #21
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	0bdb      	lsrs	r3, r3, #15
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	0b9b      	lsrs	r3, r3, #14
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	0b5b      	lsrs	r3, r3, #13
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	0b1b      	lsrs	r3, r3, #12
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	0a9b      	lsrs	r3, r3, #10
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	004005ff 	.word	0x004005ff

08002dc4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002e1c:	b5b0      	push	{r4, r5, r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2203      	movs	r2, #3
 8002e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d02e      	beq.n	8002e9a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e42:	d106      	bne.n	8002e52 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e50:	e029      	b.n	8002ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e58:	d10a      	bne.n	8002e70 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fabc 	bl	80033d8 <SD_WideBus_Enable>
 8002e60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e6e:	e01a      	b.n	8002ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 faf9 	bl	800346e <SD_WideBus_Disable>
 8002e7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
 8002e8a:	e00c      	b.n	8002ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
 8002e98:	e005      	b.n	8002ea6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ec4:	e01f      	b.n	8002f06 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681d      	ldr	r5, [r3, #0]
 8002eec:	466c      	mov	r4, sp
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 fe93 	bl	8003c2c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 ff56 	bl	8003dc0 <SDMMC_CmdBlockLength>
 8002f14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00c      	beq.n	8002f36 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	004005ff 	.word	0x004005ff

08002f50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa10 	bl	8003388 <SD_SendStatus>
 8002f68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	0a5b      	lsrs	r3, r3, #9
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002f86:	693b      	ldr	r3, [r7, #16]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	2b82      	cmp	r3, #130	; 0x82
 8002fce:	d111      	bne.n	8002ff4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 ff9d 	bl	8003f14 <SDMMC_CmdStopTransfer>
 8002fda:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff fd3a 	bl	8002a68 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0208 	bic.w	r2, r2, #8
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f240 523a 	movw	r2, #1338	; 0x53a
 800300c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f001 fbf1 	bl	8004804 <HAL_SD_RxCpltCallback>
#endif
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe fb7a 	bl	8001734 <HAL_DMA_GetError>
 8003040:	4603      	mov	r3, r0
 8003042:	2b02      	cmp	r3, #2
 8003044:	d03e      	beq.n	80030c4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d002      	beq.n	8003062 <SD_DMAError+0x36>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d12d      	bne.n	80030be <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a19      	ldr	r2, [pc, #100]	; (80030cc <SD_DMAError+0xa0>)
 8003068:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ff62 	bl	8002f50 <HAL_SD_GetCardState>
 800308c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b06      	cmp	r3, #6
 8003092:	d002      	beq.n	800309a <SD_DMAError+0x6e>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d10a      	bne.n	80030b0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 ff38 	bl	8003f14 <SDMMC_CmdStopTransfer>
 80030a4:	4602      	mov	r2, r0
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	431a      	orrs	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff fcd2 	bl	8002a68 <HAL_SD_ErrorCallback>
#endif
  }
}
 80030c4:	bf00      	nop
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	004005ff 	.word	0x004005ff

080030d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b094      	sub	sp, #80	; 0x50
 80030d4:	af04      	add	r7, sp, #16
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80030d8:	2301      	movs	r3, #1
 80030da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fde9 	bl	8003cb8 <SDIO_GetPowerState>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030f0:	e0b8      	b.n	8003264 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d02f      	beq.n	800315a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 f812 	bl	8004128 <SDMMC_CmdSendCID>
 8003104:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <SD_InitCard+0x40>
    {
      return errorstate;
 800310c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310e:	e0a9      	b.n	8003264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fe13 	bl	8003d42 <SDIO_GetResponse>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2104      	movs	r1, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fe0a 	bl	8003d42 <SDIO_GetResponse>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2108      	movs	r1, #8
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fe01 	bl	8003d42 <SDIO_GetResponse>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	210c      	movs	r1, #12
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fdf8 	bl	8003d42 <SDIO_GetResponse>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	2b03      	cmp	r3, #3
 8003160:	d00d      	beq.n	800317e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f107 020e 	add.w	r2, r7, #14
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f001 f818 	bl	80041a2 <SDMMC_CmdSetRelAdd>
 8003172:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <SD_InitCard+0xae>
    {
      return errorstate;
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	e072      	b.n	8003264 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	2b03      	cmp	r3, #3
 8003184:	d036      	beq.n	80031f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003186:	89fb      	ldrh	r3, [r7, #14]
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f000 ffe2 	bl	8004164 <SDMMC_CmdSendCSD>
 80031a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80031a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	e05b      	b.n	8003264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fdc5 	bl	8003d42 <SDIO_GetResponse>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2104      	movs	r1, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fdbc 	bl	8003d42 <SDIO_GetResponse>
 80031ca:	4602      	mov	r2, r0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2108      	movs	r1, #8
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fdb3 	bl	8003d42 <SDIO_GetResponse>
 80031dc:	4602      	mov	r2, r0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	210c      	movs	r1, #12
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fdaa 	bl	8003d42 <SDIO_GetResponse>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2104      	movs	r1, #4
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fda1 	bl	8003d42 <SDIO_GetResponse>
 8003200:	4603      	mov	r3, r0
 8003202:	0d1a      	lsrs	r2, r3, #20
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003208:	f107 0310 	add.w	r3, r7, #16
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fc34 	bl	8002a7c <HAL_SD_GetCardCSD>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800321a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800321e:	e021      	b.n	8003264 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	2200      	movs	r2, #0
 800322c:	461c      	mov	r4, r3
 800322e:	4615      	mov	r5, r2
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	4608      	mov	r0, r1
 8003236:	f000 fe8f 	bl	8003f58 <SDMMC_CmdSelDesel>
 800323a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800323c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <SD_InitCard+0x176>
  {
    return errorstate;
 8003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003244:	e00e      	b.n	8003264 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681d      	ldr	r5, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	466c      	mov	r4, sp
 800324e:	f103 0210 	add.w	r2, r3, #16
 8003252:	ca07      	ldmia	r2, {r0, r1, r2}
 8003254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003258:	3304      	adds	r3, #4
 800325a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325c:	4628      	mov	r0, r5
 800325e:	f000 fce5 	bl	8003c2c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3740      	adds	r7, #64	; 0x40
 8003268:	46bd      	mov	sp, r7
 800326a:	bdb0      	pop	{r4, r5, r7, pc}

0800326c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fe8a 	bl	8003f9e <SDMMC_CmdGoIdleState>
 800328a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	e072      	b.n	800337c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fe9d 	bl	8003fda <SDMMC_CmdOperCond>
 80032a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fe73 	bl	8003f9e <SDMMC_CmdGoIdleState>
 80032b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	e05b      	b.n	800337c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d137      	bne.n	8003342 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fe9d 	bl	8004018 <SDMMC_CmdAppCommand>
 80032de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02d      	beq.n	8003342 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032ea:	e047      	b.n	800337c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fe90 	bl	8004018 <SDMMC_CmdAppCommand>
 80032f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <SD_PowerON+0x98>
    {
      return errorstate;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	e03b      	b.n	800337c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	491e      	ldr	r1, [pc, #120]	; (8003384 <SD_PowerON+0x118>)
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fea6 	bl	800405c <SDMMC_CmdAppOperCommand>
 8003310:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003318:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800331c:	e02e      	b.n	800337c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fd0c 	bl	8003d42 <SDIO_GetResponse>
 800332a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	0fdb      	lsrs	r3, r3, #31
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <SD_PowerON+0xcc>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <SD_PowerON+0xce>
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]

    count++;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3301      	adds	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003348:	4293      	cmp	r3, r2
 800334a:	d802      	bhi.n	8003352 <SD_PowerON+0xe6>
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0cc      	beq.n	80032ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003358:	4293      	cmp	r3, r2
 800335a:	d902      	bls.n	8003362 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800335c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003360:	e00c      	b.n	800337c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
 8003372:	e002      	b.n	800337a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	c1100000 	.word	0xc1100000

08003388 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800339c:	e018      	b.n	80033d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	041b      	lsls	r3, r3, #16
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f000 ff1a 	bl	80041e4 <SDMMC_CmdSendStatus>
 80033b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <SD_SendStatus+0x34>
  {
    return errorstate;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	e009      	b.n	80033d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fcbd 	bl	8003d42 <SDIO_GetResponse>
 80033c8:	4602      	mov	r2, r0
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fca7 	bl	8003d42 <SDIO_GetResponse>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033fe:	d102      	bne.n	8003406 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003404:	e02f      	b.n	8003466 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f879 	bl	8003504 <SD_FindSCR>
 8003412:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e023      	b.n	8003466 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01c      	beq.n	8003462 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	4619      	mov	r1, r3
 8003434:	4610      	mov	r0, r2
 8003436:	f000 fdef 	bl	8004018 <SDMMC_CmdAppCommand>
 800343a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e00f      	b.n	8003466 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2102      	movs	r1, #2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fe28 	bl	80040a2 <SDMMC_CmdBusWidth>
 8003452:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	e003      	b.n	8003466 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800345e:	2300      	movs	r3, #0
 8003460:	e001      	b.n	8003466 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003462:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fc5c 	bl	8003d42 <SDIO_GetResponse>
 800348a:	4603      	mov	r3, r0
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003494:	d102      	bne.n	800349c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800349a:	e02f      	b.n	80034fc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f82e 	bl	8003504 <SD_FindSCR>
 80034a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	e023      	b.n	80034fc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01c      	beq.n	80034f8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 fda4 	bl	8004018 <SDMMC_CmdAppCommand>
 80034d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	e00f      	b.n	80034fc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fddd 	bl	80040a2 <SDMMC_CmdBusWidth>
 80034e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	e003      	b.n	80034fc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e001      	b.n	80034fc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b08f      	sub	sp, #60	; 0x3c
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800350e:	f7fd fd3f 	bl	8000f90 <HAL_GetTick>
 8003512:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2108      	movs	r1, #8
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fc48 	bl	8003dc0 <SDMMC_CmdBlockLength>
 8003530:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	e0b2      	b.n	80036a2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f000 fd65 	bl	8004018 <SDMMC_CmdAppCommand>
 800354e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	e0a3      	b.n	80036a2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003560:	2308      	movs	r3, #8
 8003562:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003564:	2330      	movs	r3, #48	; 0x30
 8003566:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003568:	2302      	movs	r3, #2
 800356a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003570:	2301      	movs	r3, #1
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f107 0210 	add.w	r2, r7, #16
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fbf2 	bl	8003d68 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fdac 	bl	80040e6 <SDMMC_CmdSendSCR>
 800358e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	d02a      	beq.n	80035ec <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	e083      	b.n	80036a2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00f      	beq.n	80035c8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	f107 0208 	add.w	r2, r7, #8
 80035b4:	18d4      	adds	r4, r2, r3
 80035b6:	4608      	mov	r0, r1
 80035b8:	f000 fb63 	bl	8003c82 <SDIO_ReadFIFO>
 80035bc:	4603      	mov	r3, r0
 80035be:	6023      	str	r3, [r4, #0]
      index++;
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	3301      	adds	r3, #1
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
 80035c6:	e006      	b.n	80035d6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80035d6:	f7fd fcdb 	bl	8000f90 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d102      	bne.n	80035ec <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80035e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035ea:	e05a      	b.n	80036a2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0cf      	beq.n	800359a <SD_FindSCR+0x96>
 80035fa:	e000      	b.n	80035fe <SD_FindSCR+0xfa>
      break;
 80035fc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003614:	2308      	movs	r3, #8
 8003616:	e044      	b.n	80036a2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2202      	movs	r2, #2
 800362c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800362e:	2302      	movs	r3, #2
 8003630:	e037      	b.n	80036a2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2220      	movs	r2, #32
 8003646:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003648:	2320      	movs	r3, #32
 800364a:	e02a      	b.n	80036a2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f240 523a 	movw	r2, #1338	; 0x53a
 8003654:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	061a      	lsls	r2, r3, #24
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003662:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800366c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	601a      	str	r2, [r3, #0]
    scr++;
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	3304      	adds	r3, #4
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	061a      	lsls	r2, r3, #24
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800368a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003694:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	0e1b      	lsrs	r3, r3, #24
 800369a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	373c      	adds	r7, #60	; 0x3c
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}

080036aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e03f      	b.n	800373c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fd faad 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2224      	movs	r2, #36	; 0x24
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f828 	bl	8003744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003702:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003712:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003722:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b0c0      	sub	sp, #256	; 0x100
 800374a:	af00      	add	r7, sp, #0
 800374c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	68d9      	ldr	r1, [r3, #12]
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	ea40 0301 	orr.w	r3, r0, r1
 800376c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	431a      	orrs	r2, r3
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800379c:	f021 010c 	bic.w	r1, r1, #12
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037aa:	430b      	orrs	r3, r1
 80037ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	6999      	ldr	r1, [r3, #24]
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	ea40 0301 	orr.w	r3, r0, r1
 80037ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b8f      	ldr	r3, [pc, #572]	; (8003a10 <UART_SetConfig+0x2cc>)
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d005      	beq.n	80037e4 <UART_SetConfig+0xa0>
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b8d      	ldr	r3, [pc, #564]	; (8003a14 <UART_SetConfig+0x2d0>)
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d104      	bne.n	80037ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037e4:	f7fe feb4 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 80037e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037ec:	e003      	b.n	80037f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ee:	f7fe fe9b 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 80037f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003800:	f040 810c 	bne.w	8003a1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800380e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003816:	4622      	mov	r2, r4
 8003818:	462b      	mov	r3, r5
 800381a:	1891      	adds	r1, r2, r2
 800381c:	65b9      	str	r1, [r7, #88]	; 0x58
 800381e:	415b      	adcs	r3, r3
 8003820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003826:	4621      	mov	r1, r4
 8003828:	eb12 0801 	adds.w	r8, r2, r1
 800382c:	4629      	mov	r1, r5
 800382e:	eb43 0901 	adc.w	r9, r3, r1
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800383e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003846:	4690      	mov	r8, r2
 8003848:	4699      	mov	r9, r3
 800384a:	4623      	mov	r3, r4
 800384c:	eb18 0303 	adds.w	r3, r8, r3
 8003850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003854:	462b      	mov	r3, r5
 8003856:	eb49 0303 	adc.w	r3, r9, r3
 800385a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800386a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800386e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003872:	460b      	mov	r3, r1
 8003874:	18db      	adds	r3, r3, r3
 8003876:	653b      	str	r3, [r7, #80]	; 0x50
 8003878:	4613      	mov	r3, r2
 800387a:	eb42 0303 	adc.w	r3, r2, r3
 800387e:	657b      	str	r3, [r7, #84]	; 0x54
 8003880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003888:	f7fc fca4 	bl	80001d4 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <UART_SetConfig+0x2d4>)
 8003892:	fba3 2302 	umull	r2, r3, r3, r2
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	011c      	lsls	r4, r3, #4
 800389a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038ac:	4642      	mov	r2, r8
 80038ae:	464b      	mov	r3, r9
 80038b0:	1891      	adds	r1, r2, r2
 80038b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80038b4:	415b      	adcs	r3, r3
 80038b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038bc:	4641      	mov	r1, r8
 80038be:	eb12 0a01 	adds.w	sl, r2, r1
 80038c2:	4649      	mov	r1, r9
 80038c4:	eb43 0b01 	adc.w	fp, r3, r1
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038dc:	4692      	mov	sl, r2
 80038de:	469b      	mov	fp, r3
 80038e0:	4643      	mov	r3, r8
 80038e2:	eb1a 0303 	adds.w	r3, sl, r3
 80038e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038ea:	464b      	mov	r3, r9
 80038ec:	eb4b 0303 	adc.w	r3, fp, r3
 80038f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003900:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003908:	460b      	mov	r3, r1
 800390a:	18db      	adds	r3, r3, r3
 800390c:	643b      	str	r3, [r7, #64]	; 0x40
 800390e:	4613      	mov	r3, r2
 8003910:	eb42 0303 	adc.w	r3, r2, r3
 8003914:	647b      	str	r3, [r7, #68]	; 0x44
 8003916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800391a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800391e:	f7fc fc59 	bl	80001d4 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4611      	mov	r1, r2
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <UART_SetConfig+0x2d4>)
 800392a:	fba3 2301 	umull	r2, r3, r3, r1
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2264      	movs	r2, #100	; 0x64
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	1acb      	subs	r3, r1, r3
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <UART_SetConfig+0x2d4>)
 8003940:	fba3 2302 	umull	r2, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800394c:	441c      	add	r4, r3
 800394e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003958:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800395c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003960:	4642      	mov	r2, r8
 8003962:	464b      	mov	r3, r9
 8003964:	1891      	adds	r1, r2, r2
 8003966:	63b9      	str	r1, [r7, #56]	; 0x38
 8003968:	415b      	adcs	r3, r3
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003970:	4641      	mov	r1, r8
 8003972:	1851      	adds	r1, r2, r1
 8003974:	6339      	str	r1, [r7, #48]	; 0x30
 8003976:	4649      	mov	r1, r9
 8003978:	414b      	adcs	r3, r1
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003988:	4659      	mov	r1, fp
 800398a:	00cb      	lsls	r3, r1, #3
 800398c:	4651      	mov	r1, sl
 800398e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003992:	4651      	mov	r1, sl
 8003994:	00ca      	lsls	r2, r1, #3
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	4603      	mov	r3, r0
 800399c:	4642      	mov	r2, r8
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039a4:	464b      	mov	r3, r9
 80039a6:	460a      	mov	r2, r1
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039c4:	460b      	mov	r3, r1
 80039c6:	18db      	adds	r3, r3, r3
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ca:	4613      	mov	r3, r2
 80039cc:	eb42 0303 	adc.w	r3, r2, r3
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039da:	f7fc fbfb 	bl	80001d4 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <UART_SetConfig+0x2d4>)
 80039e4:	fba3 1302 	umull	r1, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	2164      	movs	r1, #100	; 0x64
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	3332      	adds	r3, #50	; 0x32
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <UART_SetConfig+0x2d4>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	f003 0207 	and.w	r2, r3, #7
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4422      	add	r2, r4
 8003a0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a0c:	e106      	b.n	8003c1c <UART_SetConfig+0x4d8>
 8003a0e:	bf00      	nop
 8003a10:	40011000 	.word	0x40011000
 8003a14:	40011400 	.word	0x40011400
 8003a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a2e:	4642      	mov	r2, r8
 8003a30:	464b      	mov	r3, r9
 8003a32:	1891      	adds	r1, r2, r2
 8003a34:	6239      	str	r1, [r7, #32]
 8003a36:	415b      	adcs	r3, r3
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a3e:	4641      	mov	r1, r8
 8003a40:	1854      	adds	r4, r2, r1
 8003a42:	4649      	mov	r1, r9
 8003a44:	eb43 0501 	adc.w	r5, r3, r1
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	00eb      	lsls	r3, r5, #3
 8003a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a56:	00e2      	lsls	r2, r4, #3
 8003a58:	4614      	mov	r4, r2
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	18e3      	adds	r3, r4, r3
 8003a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a64:	464b      	mov	r3, r9
 8003a66:	eb45 0303 	adc.w	r3, r5, r3
 8003a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	008b      	lsls	r3, r1, #2
 8003a8e:	4621      	mov	r1, r4
 8003a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a94:	4621      	mov	r1, r4
 8003a96:	008a      	lsls	r2, r1, #2
 8003a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a9c:	f7fc fb9a 	bl	80001d4 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <UART_SetConfig+0x4e4>)
 8003aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	011c      	lsls	r4, r3, #4
 8003aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ab8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	1891      	adds	r1, r2, r2
 8003ac6:	61b9      	str	r1, [r7, #24]
 8003ac8:	415b      	adcs	r3, r3
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	1851      	adds	r1, r2, r1
 8003ad4:	6139      	str	r1, [r7, #16]
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	414b      	adcs	r3, r1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae8:	4659      	mov	r1, fp
 8003aea:	00cb      	lsls	r3, r1, #3
 8003aec:	4651      	mov	r1, sl
 8003aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af2:	4651      	mov	r1, sl
 8003af4:	00ca      	lsls	r2, r1, #3
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	4642      	mov	r2, r8
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b04:	464b      	mov	r3, r9
 8003b06:	460a      	mov	r2, r1
 8003b08:	eb42 0303 	adc.w	r3, r2, r3
 8003b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b28:	4649      	mov	r1, r9
 8003b2a:	008b      	lsls	r3, r1, #2
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b32:	4641      	mov	r1, r8
 8003b34:	008a      	lsls	r2, r1, #2
 8003b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b3a:	f7fc fb4b 	bl	80001d4 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <UART_SetConfig+0x4e4>)
 8003b46:	fba3 2301 	umull	r2, r3, r3, r1
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2264      	movs	r2, #100	; 0x64
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	1acb      	subs	r3, r1, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	; 0x32
 8003b58:	4a33      	ldr	r2, [pc, #204]	; (8003c28 <UART_SetConfig+0x4e4>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b64:	441c      	add	r4, r3
 8003b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	673b      	str	r3, [r7, #112]	; 0x70
 8003b6e:	677a      	str	r2, [r7, #116]	; 0x74
 8003b70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b74:	4642      	mov	r2, r8
 8003b76:	464b      	mov	r3, r9
 8003b78:	1891      	adds	r1, r2, r2
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	415b      	adcs	r3, r3
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b84:	4641      	mov	r1, r8
 8003b86:	1851      	adds	r1, r2, r1
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	414b      	adcs	r3, r1
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	00cb      	lsls	r3, r1, #3
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	00ca      	lsls	r2, r1, #3
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	460a      	mov	r2, r1
 8003bba:	eb42 0303 	adc.w	r3, r2, r3
 8003bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bca:	667a      	str	r2, [r7, #100]	; 0x64
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bd8:	4649      	mov	r1, r9
 8003bda:	008b      	lsls	r3, r1, #2
 8003bdc:	4641      	mov	r1, r8
 8003bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003be2:	4641      	mov	r1, r8
 8003be4:	008a      	lsls	r2, r1, #2
 8003be6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bea:	f7fc faf3 	bl	80001d4 <__aeabi_uldivmod>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <UART_SetConfig+0x4e4>)
 8003bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	2164      	movs	r1, #100	; 0x64
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	3332      	adds	r3, #50	; 0x32
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <UART_SetConfig+0x4e4>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4422      	add	r2, r4
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c22:	46bd      	mov	sp, r7
 8003c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c28:	51eb851f 	.word	0x51eb851f

08003c2c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	f107 001c 	add.w	r0, r7, #28
 8003c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003c42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003c44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003c46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003c4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003c4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003c52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003c56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003c66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	b004      	add	sp, #16
 8003c80:	4770      	bx	lr

08003c82 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003cf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003cfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d0e:	f023 030f 	bic.w	r3, r3, #15
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	461a      	mov	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
}  
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d94:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0

}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003dce:	2310      	movs	r3, #16
 8003dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003de0:	f107 0308 	add.w	r3, r7, #8
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ff74 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	2110      	movs	r1, #16
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa18 	bl	8004228 <SDMMC_GetCmdResp1>
 8003df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003e12:	2311      	movs	r3, #17
 8003e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e24:	f107 0308 	add.w	r3, r7, #8
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff52 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	2111      	movs	r1, #17
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9f6 	bl	8004228 <SDMMC_GetCmdResp1>
 8003e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e56:	2312      	movs	r3, #18
 8003e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e5a:	2340      	movs	r3, #64	; 0x40
 8003e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff30 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	2112      	movs	r1, #18
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9d4 	bl	8004228 <SDMMC_GetCmdResp1>
 8003e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e82:	69fb      	ldr	r3, [r7, #28]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e9a:	2318      	movs	r3, #24
 8003e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e9e:	2340      	movs	r3, #64	; 0x40
 8003ea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ff0e 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	2118      	movs	r1, #24
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9b2 	bl	8004228 <SDMMC_GetCmdResp1>
 8003ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003ede:	2319      	movs	r3, #25
 8003ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ef0:	f107 0308 	add.w	r3, r7, #8
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff feec 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	2119      	movs	r1, #25
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f990 	bl	8004228 <SDMMC_GetCmdResp1>
 8003f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3720      	adds	r7, #32
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003f20:	230c      	movs	r3, #12
 8003f22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f24:	2340      	movs	r3, #64	; 0x40
 8003f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fecb 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003f3e:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <SDMMC_CmdStopTransfer+0x40>)
 8003f40:	210c      	movs	r1, #12
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f970 	bl	8004228 <SDMMC_GetCmdResp1>
 8003f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	05f5e100 	.word	0x05f5e100

08003f58 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	; 0x28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f68:	2307      	movs	r3, #7
 8003f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f78:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f7a:	f107 0310 	add.w	r3, r7, #16
 8003f7e:	4619      	mov	r1, r3
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff fea7 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	2107      	movs	r1, #7
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f94b 	bl	8004228 <SDMMC_GetCmdResp1>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b088      	sub	sp, #32
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fbc:	f107 0308 	add.w	r3, r7, #8
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fe86 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fb65 	bl	8004698 <SDMMC_GetCmdError>
 8003fce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b088      	sub	sp, #32
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003fe2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003fe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003fe8:	2308      	movs	r3, #8
 8003fea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fe67 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 faf8 	bl	80045fc <SDMMC_GetCmdResp7>
 800400c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800400e:	69fb      	ldr	r3, [r7, #28]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004026:	2337      	movs	r3, #55	; 0x37
 8004028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800402a:	2340      	movs	r3, #64	; 0x40
 800402c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004036:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004038:	f107 0308 	add.w	r3, r7, #8
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fe48 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	2137      	movs	r1, #55	; 0x37
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8ec 	bl	8004228 <SDMMC_GetCmdResp1>
 8004050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004052:	69fb      	ldr	r3, [r7, #28]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800406c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004072:	2329      	movs	r3, #41	; 0x29
 8004074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800407e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004082:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004084:	f107 0308 	add.w	r3, r7, #8
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fe22 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f9ff 	bl	8004494 <SDMMC_GetCmdResp3>
 8004096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004098:	69fb      	ldr	r3, [r7, #28]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b088      	sub	sp, #32
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80040b0:	2306      	movs	r3, #6
 80040b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040b4:	2340      	movs	r3, #64	; 0x40
 80040b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fe03 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80040ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d2:	2106      	movs	r1, #6
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8a7 	bl	8004228 <SDMMC_GetCmdResp1>
 80040da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040dc:	69fb      	ldr	r3, [r7, #28]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b088      	sub	sp, #32
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80040f2:	2333      	movs	r3, #51	; 0x33
 80040f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004102:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004104:	f107 0308 	add.w	r3, r7, #8
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fde2 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004110:	f241 3288 	movw	r2, #5000	; 0x1388
 8004114:	2133      	movs	r1, #51	; 0x33
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f886 	bl	8004228 <SDMMC_GetCmdResp1>
 800411c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800411e:	69fb      	ldr	r3, [r7, #28]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004134:	2302      	movs	r3, #2
 8004136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004138:	23c0      	movs	r3, #192	; 0xc0
 800413a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004144:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fdc1 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f956 	bl	8004404 <SDMMC_GetCmdResp2>
 8004158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800415a:	69fb      	ldr	r3, [r7, #28]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004172:	2309      	movs	r3, #9
 8004174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004176:	23c0      	movs	r3, #192	; 0xc0
 8004178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800417e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fda2 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f937 	bl	8004404 <SDMMC_GetCmdResp2>
 8004196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004198:	69fb      	ldr	r3, [r7, #28]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b088      	sub	sp, #32
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80041b0:	2303      	movs	r3, #3
 80041b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fd83 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	2103      	movs	r1, #3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f99c 	bl	8004510 <SDMMC_GetCmdResp6>
 80041d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041da:	69fb      	ldr	r3, [r7, #28]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80041f2:	230d      	movs	r3, #13
 80041f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041f6:	2340      	movs	r3, #64	; 0x40
 80041f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004204:	f107 0308 	add.w	r3, r7, #8
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fd62 	bl	8003cd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	210d      	movs	r1, #13
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f806 	bl	8004228 <SDMMC_GetCmdResp1>
 800421c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800421e:	69fb      	ldr	r3, [r7, #28]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	460b      	mov	r3, r1
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <SDMMC_GetCmdResp1+0x1d0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a70      	ldr	r2, [pc, #448]	; (80043fc <SDMMC_GetCmdResp1+0x1d4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0a5a      	lsrs	r2, r3, #9
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	1e5a      	subs	r2, r3, #1
 800424e:	61fa      	str	r2, [r7, #28]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004254:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004258:	e0c9      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ef      	beq.n	800424a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ea      	bne.n	800424a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2204      	movs	r2, #4
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004286:	2304      	movs	r3, #4
 8004288:	e0b1      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800429c:	2301      	movs	r3, #1
 800429e:	e0a6      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	22c5      	movs	r2, #197	; 0xc5
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fd3e 	bl	8003d28 <SDIO_GetCommandResponse>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	7afb      	ldrb	r3, [r7, #11]
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d001      	beq.n	80042ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e099      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80042ba:	2100      	movs	r1, #0
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff fd40 	bl	8003d42 <SDIO_GetResponse>
 80042c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <SDMMC_GetCmdResp1+0x1d8>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e08d      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da02      	bge.n	80042de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80042d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042dc:	e087      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80042e8:	2340      	movs	r3, #64	; 0x40
 80042ea:	e080      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	e079      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004308:	e071      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004318:	e069      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004328:	e061      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004338:	e059      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004348:	e051      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004358:	e049      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004368:	e041      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004378:	e039      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004388:	e031      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004398:	e029      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80043a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043a8:	e021      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80043b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043b8:	e019      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80043c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043c8:	e011      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80043d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043d8:	e009      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80043e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80043e8:	e001      	b.n	80043ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80043ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000
 80043fc:	10624dd3 	.word	0x10624dd3
 8004400:	fdffe008 	.word	0xfdffe008

08004404 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800440c:	4b1f      	ldr	r3, [pc, #124]	; (800448c <SDMMC_GetCmdResp2+0x88>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <SDMMC_GetCmdResp2+0x8c>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0a5b      	lsrs	r3, r3, #9
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800442c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004430:	e026      	b.n	8004480 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ef      	beq.n	8004422 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ea      	bne.n	8004422 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2204      	movs	r2, #4
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800445e:	2304      	movs	r3, #4
 8004460:	e00e      	b.n	8004480 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004474:	2301      	movs	r3, #1
 8004476:	e003      	b.n	8004480 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	22c5      	movs	r2, #197	; 0xc5
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	20000000 	.word	0x20000000
 8004490:	10624dd3 	.word	0x10624dd3

08004494 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800449c:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <SDMMC_GetCmdResp3+0x74>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <SDMMC_GetCmdResp3+0x78>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0a5b      	lsrs	r3, r3, #9
 80044a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1e5a      	subs	r2, r3, #1
 80044b6:	60fa      	str	r2, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044c0:	e01b      	b.n	80044fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ef      	beq.n	80044b2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ea      	bne.n	80044b2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2204      	movs	r2, #4
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044ee:	2304      	movs	r3, #4
 80044f0:	e003      	b.n	80044fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	22c5      	movs	r2, #197	; 0xc5
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000000 	.word	0x20000000
 800450c:	10624dd3 	.word	0x10624dd3

08004510 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	460b      	mov	r3, r1
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800451e:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <SDMMC_GetCmdResp6+0xe4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a35      	ldr	r2, [pc, #212]	; (80045f8 <SDMMC_GetCmdResp6+0xe8>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	0a5b      	lsrs	r3, r3, #9
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	61fa      	str	r2, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800453e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004542:	e052      	b.n	80045ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ef      	beq.n	8004534 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1ea      	bne.n	8004534 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2204      	movs	r2, #4
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004570:	2304      	movs	r3, #4
 8004572:	e03a      	b.n	80045ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004586:	2301      	movs	r3, #1
 8004588:	e02f      	b.n	80045ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fbcc 	bl	8003d28 <SDIO_GetCommandResponse>
 8004590:	4603      	mov	r3, r0
 8004592:	461a      	mov	r2, r3
 8004594:	7afb      	ldrb	r3, [r7, #11]
 8004596:	4293      	cmp	r3, r2
 8004598:	d001      	beq.n	800459e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800459a:	2301      	movs	r3, #1
 800459c:	e025      	b.n	80045ea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22c5      	movs	r2, #197	; 0xc5
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80045a4:	2100      	movs	r1, #0
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff fbcb 	bl	8003d42 <SDIO_GetResponse>
 80045ac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e011      	b.n	80045ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80045d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045d4:	e009      	b.n	80045ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80045e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045e4:	e001      	b.n	80045ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80045e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000000 	.word	0x20000000
 80045f8:	10624dd3 	.word	0x10624dd3

080045fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004604:	4b22      	ldr	r3, [pc, #136]	; (8004690 <SDMMC_GetCmdResp7+0x94>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a22      	ldr	r2, [pc, #136]	; (8004694 <SDMMC_GetCmdResp7+0x98>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0a5b      	lsrs	r3, r3, #9
 8004610:	f241 3288 	movw	r2, #5000	; 0x1388
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	60fa      	str	r2, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004628:	e02c      	b.n	8004684 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ef      	beq.n	800461a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ea      	bne.n	800461a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2204      	movs	r2, #4
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004656:	2304      	movs	r3, #4
 8004658:	e014      	b.n	8004684 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800466c:	2301      	movs	r3, #1
 800466e:	e009      	b.n	8004684 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004682:	2300      	movs	r3, #0
  
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000000 	.word	0x20000000
 8004694:	10624dd3 	.word	0x10624dd3

08004698 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <SDMMC_GetCmdError+0x50>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <SDMMC_GetCmdError+0x54>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	0a5b      	lsrs	r3, r3, #9
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	60fa      	str	r2, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80046c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046c4:	e009      	b.n	80046da <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f1      	beq.n	80046b6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	22c5      	movs	r2, #197	; 0xc5
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000000 	.word	0x20000000
 80046ec:	10624dd3 	.word	0x10624dd3

080046f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <MX_FATFS_Init+0x18>)
 80046f6:	4805      	ldr	r0, [pc, #20]	; (800470c <MX_FATFS_Init+0x1c>)
 80046f8:	f000 ff2c 	bl	8005554 <FATFS_LinkDriver>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <MX_FATFS_Init+0x20>)
 8004702:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000218 	.word	0x20000218
 800470c:	080060a8 	.word	0x080060a8
 8004710:	20000214 	.word	0x20000214

08004714 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800471e:	f000 f87b 	bl	8004818 <BSP_SD_IsDetected>
 8004722:	4603      	mov	r3, r0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e012      	b.n	8004752 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800472c:	480b      	ldr	r0, [pc, #44]	; (800475c <BSP_SD_Init+0x48>)
 800472e:	f7fd ff23 	bl	8002578 <HAL_SD_Init>
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800473c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004740:	4806      	ldr	r0, [pc, #24]	; (800475c <BSP_SD_Init+0x48>)
 8004742:	f7fe fb6b 	bl	8002e1c <HAL_SD_ConfigWideBusOperation>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004750:	79fb      	ldrb	r3, [r7, #7]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000084 	.word	0x20000084

08004760 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	68f9      	ldr	r1, [r7, #12]
 8004776:	4806      	ldr	r0, [pc, #24]	; (8004790 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004778:	f7fd ffae 	bl	80026d8 <HAL_SD_ReadBlocks_DMA>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000084 	.word	0x20000084

08004794 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	68f9      	ldr	r1, [r7, #12]
 80047aa:	4806      	ldr	r0, [pc, #24]	; (80047c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80047ac:	f7fe f876 	bl	800289c <HAL_SD_WriteBlocks_DMA>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000084 	.word	0x20000084

080047c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80047cc:	4805      	ldr	r0, [pc, #20]	; (80047e4 <BSP_SD_GetCardState+0x1c>)
 80047ce:	f7fe fbbf 	bl	8002f50 <HAL_SD_GetCardState>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
}
 80047de:	4618      	mov	r0, r3
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000084 	.word	0x20000084

080047e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4803      	ldr	r0, [pc, #12]	; (8004800 <BSP_SD_GetCardInfo+0x18>)
 80047f4:	f7fe fae6 	bl	8002dc4 <HAL_SD_GetCardInfo>
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000084 	.word	0x20000084

08004804 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800480c:	f000 f97a 	bl	8004b04 <BSP_SD_ReadCpltCallback>
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800481e:	2301      	movs	r3, #1
 8004820:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	b2db      	uxtb	r3, r3
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800483a:	f7fc fba9 	bl	8000f90 <HAL_GetTick>
 800483e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004840:	e006      	b.n	8004850 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004842:	f7ff ffc1 	bl	80047c8 <BSP_SD_GetCardState>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800484c:	2300      	movs	r3, #0
 800484e:	e009      	b.n	8004864 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004850:	f7fc fb9e 	bl	8000f90 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d8f0      	bhi.n	8004842 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <SD_CheckStatus+0x38>)
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800487c:	f7ff ffa4 	bl	80047c8 <BSP_SD_GetCardState>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d107      	bne.n	8004896 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004886:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <SD_CheckStatus+0x38>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <SD_CheckStatus+0x38>)
 8004894:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <SD_CheckStatus+0x38>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	b2db      	uxtb	r3, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000009 	.word	0x20000009

080048a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80048b2:	f7ff ff2f 	bl	8004714 <BSP_SD_Init>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d107      	bne.n	80048cc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ffd4 	bl	800486c <SD_CheckStatus>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b04      	ldr	r3, [pc, #16]	; (80048dc <SD_initialize+0x34>)
 80048ca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <SD_initialize+0x34>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b2db      	uxtb	r3, r3
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000009 	.word	0x20000009

080048e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ffbd 	bl	800486c <SD_CheckStatus>
 80048f2:	4603      	mov	r3, r0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004910:	f247 5030 	movw	r0, #30000	; 0x7530
 8004914:	f7ff ff8d 	bl	8004832 <SD_CheckStatusWithTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	da01      	bge.n	8004922 <SD_read+0x26>
  {
    return res;
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	e03b      	b.n	800499a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	68b8      	ldr	r0, [r7, #8]
 8004928:	f7ff ff1a 	bl	8004760 <BSP_SD_ReadBlocks_DMA>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d132      	bne.n	8004998 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <SD_read+0xa8>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004938:	f7fc fb2a 	bl	8000f90 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800493e:	bf00      	nop
 8004940:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <SD_read+0xa8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <SD_read+0x5e>
 8004948:	f7fc fb22 	bl	8000f90 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f247 522f 	movw	r2, #29999	; 0x752f
 8004956:	4293      	cmp	r3, r2
 8004958:	d9f2      	bls.n	8004940 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <SD_read+0xa8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
 8004966:	e017      	b.n	8004998 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <SD_read+0xa8>)
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800496e:	f7fc fb0f 	bl	8000f90 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004974:	e007      	b.n	8004986 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004976:	f7ff ff27 	bl	80047c8 <BSP_SD_GetCardState>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <SD_read+0x8a>
          {
            res = RES_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004984:	e008      	b.n	8004998 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004986:	f7fc fb03 	bl	8000f90 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f247 522f 	movw	r2, #29999	; 0x752f
 8004994:	4293      	cmp	r3, r2
 8004996:	d9ee      	bls.n	8004976 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000220 	.word	0x20000220

080049a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80049bc:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <SD_write+0xa8>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80049c2:	f247 5030 	movw	r0, #30000	; 0x7530
 80049c6:	f7ff ff34 	bl	8004832 <SD_CheckStatusWithTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da01      	bge.n	80049d4 <SD_write+0x2c>
  {
    return res;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	e038      	b.n	8004a46 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	68b8      	ldr	r0, [r7, #8]
 80049da:	f7ff fedb 	bl	8004794 <BSP_SD_WriteBlocks_DMA>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d12f      	bne.n	8004a44 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80049e4:	f7fc fad4 	bl	8000f90 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80049ea:	bf00      	nop
 80049ec:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <SD_write+0xa8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d108      	bne.n	8004a06 <SD_write+0x5e>
 80049f4:	f7fc facc 	bl	8000f90 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d9f2      	bls.n	80049ec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <SD_write+0xa8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
 8004a12:	e017      	b.n	8004a44 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <SD_write+0xa8>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004a1a:	f7fc fab9 	bl	8000f90 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a20:	e007      	b.n	8004a32 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004a22:	f7ff fed1 	bl	80047c8 <BSP_SD_GetCardState>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <SD_write+0x8a>
          {
            res = RES_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75fb      	strb	r3, [r7, #23]
            break;
 8004a30:	e008      	b.n	8004a44 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004a32:	f7fc faad 	bl	8000f90 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d9ee      	bls.n	8004a22 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	2000021c 	.word	0x2000021c

08004a54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	603a      	str	r2, [r7, #0]
 8004a5e:	71fb      	strb	r3, [r7, #7]
 8004a60:	460b      	mov	r3, r1
 8004a62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a6a:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <SD_ioctl+0xac>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <SD_ioctl+0x28>
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e03c      	b.n	8004af6 <SD_ioctl+0xa2>

  switch (cmd)
 8004a7c:	79bb      	ldrb	r3, [r7, #6]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d834      	bhi.n	8004aec <SD_ioctl+0x98>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <SD_ioctl+0x34>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aa1 	.word	0x08004aa1
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ad3 	.word	0x08004ad3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a9e:	e028      	b.n	8004af2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004aa0:	f107 030c 	add.w	r3, r7, #12
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fe9f 	bl	80047e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004ab6:	e01c      	b.n	8004af2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fe93 	bl	80047e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004ad0:	e00f      	b.n	8004af2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004ad2:	f107 030c 	add.w	r3, r7, #12
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fe86 	bl	80047e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	0a5a      	lsrs	r2, r3, #9
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004aea:	e002      	b.n	8004af2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004aec:	2304      	movs	r3, #4
 8004aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3730      	adds	r7, #48	; 0x30
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000009 	.word	0x20000009

08004b04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <BSP_SD_ReadCpltCallback+0x14>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	20000220 	.word	0x20000220

08004b1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <disk_status+0x30>)
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	79fa      	ldrb	r2, [r7, #7]
 8004b34:	4905      	ldr	r1, [pc, #20]	; (8004b4c <disk_status+0x30>)
 8004b36:	440a      	add	r2, r1
 8004b38:	7a12      	ldrb	r2, [r2, #8]
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4798      	blx	r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	2000024c 	.word	0x2000024c

08004b50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <disk_initialize+0x48>)
 8004b62:	5cd3      	ldrb	r3, [r2, r3]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d111      	bne.n	8004b8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <disk_initialize+0x48>)
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <disk_initialize+0x48>)
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	79fa      	ldrb	r2, [r7, #7]
 8004b7e:	4906      	ldr	r1, [pc, #24]	; (8004b98 <disk_initialize+0x48>)
 8004b80:	440a      	add	r2, r1
 8004b82:	7a12      	ldrb	r2, [r2, #8]
 8004b84:	4610      	mov	r0, r2
 8004b86:	4798      	blx	r3
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2000024c 	.word	0x2000024c

08004b9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4603      	mov	r3, r0
 8004baa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <disk_read+0x3c>)
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	689c      	ldr	r4, [r3, #8]
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	4a07      	ldr	r2, [pc, #28]	; (8004bd8 <disk_read+0x3c>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	7a18      	ldrb	r0, [r3, #8]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	47a0      	blx	r4
 8004bc8:	4603      	mov	r3, r0
 8004bca:	75fb      	strb	r3, [r7, #23]
  return res;
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd90      	pop	{r4, r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000024c 	.word	0x2000024c

08004bdc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4603      	mov	r3, r0
 8004bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <disk_write+0x3c>)
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68dc      	ldr	r4, [r3, #12]
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	4a07      	ldr	r2, [pc, #28]	; (8004c18 <disk_write+0x3c>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	7a18      	ldrb	r0, [r3, #8]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	47a0      	blx	r4
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	2000024c 	.word	0x2000024c

08004c1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	603a      	str	r2, [r7, #0]
 8004c26:	71fb      	strb	r3, [r7, #7]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <disk_ioctl+0x38>)
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	79fa      	ldrb	r2, [r7, #7]
 8004c3a:	4906      	ldr	r1, [pc, #24]	; (8004c54 <disk_ioctl+0x38>)
 8004c3c:	440a      	add	r2, r1
 8004c3e:	7a10      	ldrb	r0, [r2, #8]
 8004c40:	79b9      	ldrb	r1, [r7, #6]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4798      	blx	r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	2000024c 	.word	0x2000024c

08004c58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3301      	adds	r3, #1
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	b21a      	sxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b21b      	sxth	r3, r3
 8004c78:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3303      	adds	r3, #3
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	3202      	adds	r2, #2
 8004ca0:	7812      	ldrb	r2, [r2, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	3201      	adds	r2, #1
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
	return rv;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e010      	b.n	8004d00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004cde:	4a0d      	ldr	r2, [pc, #52]	; (8004d14 <clear_lock+0x44>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d105      	bne.n	8004cfa <clear_lock+0x2a>
 8004cee:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <clear_lock+0x44>)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d9eb      	bls.n	8004cde <clear_lock+0xe>
	}
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	2000022c 	.word	0x2000022c

08004d18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	78db      	ldrb	r3, [r3, #3]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d034      	beq.n	8004d96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7858      	ldrb	r0, [r3, #1]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	f7ff ff4c 	bl	8004bdc <disk_write>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
 8004d4e:	e022      	b.n	8004d96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	1ad2      	subs	r2, r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d217      	bcs.n	8004d96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	789b      	ldrb	r3, [r3, #2]
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e010      	b.n	8004d90 <sync_window+0x78>
					wsect += fs->fsize;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4413      	add	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7858      	ldrb	r0, [r3, #1]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d82:	2301      	movs	r3, #1
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	f7ff ff29 	bl	8004bdc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d8eb      	bhi.n	8004d6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d01b      	beq.n	8004df0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ffad 	bl	8004d18 <sync_window>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d113      	bne.n	8004df0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7858      	ldrb	r0, [r3, #1]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	f7ff fee1 	bl	8004b9c <disk_read>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004de0:	f04f 33ff 	mov.w	r3, #4294967295
 8004de4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004e02:	f04f 33ff 	mov.w	r3, #4294967295
 8004e06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d031      	beq.n	8004e74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e002      	b.n	8004e1e <get_ldnumber+0x24>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d903      	bls.n	8004e2e <get_ldnumber+0x34>
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b3a      	cmp	r3, #58	; 0x3a
 8004e2c:	d1f4      	bne.n	8004e18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b3a      	cmp	r3, #58	; 0x3a
 8004e34:	d11c      	bne.n	8004e70 <get_ldnumber+0x76>
			tp = *path;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	60fa      	str	r2, [r7, #12]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	3b30      	subs	r3, #48	; 0x30
 8004e46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	d80e      	bhi.n	8004e6c <get_ldnumber+0x72>
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d10a      	bne.n	8004e6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d107      	bne.n	8004e6c <get_ldnumber+0x72>
					vol = (int)i;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3301      	adds	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	e002      	b.n	8004e76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004e74:	693b      	ldr	r3, [r7, #16]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	70da      	strb	r2, [r3, #3]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff7e 	bl	8004da0 <move_window>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <check_fs+0x2a>
 8004eaa:	2304      	movs	r3, #4
 8004eac:	e038      	b.n	8004f20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3334      	adds	r3, #52	; 0x34
 8004eb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fece 	bl	8004c58 <ld_word>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <check_fs+0x48>
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e029      	b.n	8004f20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ed2:	2be9      	cmp	r3, #233	; 0xe9
 8004ed4:	d009      	beq.n	8004eea <check_fs+0x66>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004edc:	2beb      	cmp	r3, #235	; 0xeb
 8004ede:	d11e      	bne.n	8004f1e <check_fs+0x9a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ee6:	2b90      	cmp	r3, #144	; 0x90
 8004ee8:	d119      	bne.n	8004f1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3334      	adds	r3, #52	; 0x34
 8004eee:	3336      	adds	r3, #54	; 0x36
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fec9 	bl	8004c88 <ld_dword>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004efc:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <check_fs+0xa4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <check_fs+0x82>
 8004f02:	2300      	movs	r3, #0
 8004f04:	e00c      	b.n	8004f20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3334      	adds	r3, #52	; 0x34
 8004f0a:	3352      	adds	r3, #82	; 0x52
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff febb 	bl	8004c88 <ld_dword>
 8004f12:	4603      	mov	r3, r0
 8004f14:	4a05      	ldr	r2, [pc, #20]	; (8004f2c <check_fs+0xa8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <check_fs+0x9a>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004f1e:	2302      	movs	r3, #2
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	00544146 	.word	0x00544146
 8004f2c:	33544146 	.word	0x33544146

08004f30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b096      	sub	sp, #88	; 0x58
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff ff58 	bl	8004dfa <get_ldnumber>
 8004f4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da01      	bge.n	8004f56 <find_volume+0x26>
 8004f52:	230b      	movs	r3, #11
 8004f54:	e262      	b.n	800541c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004f56:	4a9f      	ldr	r2, [pc, #636]	; (80051d4 <find_volume+0x2a4>)
 8004f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <find_volume+0x3a>
 8004f66:	230c      	movs	r3, #12
 8004f68:	e258      	b.n	800541c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fdc9 	bl	8004b1c <disk_status>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <find_volume+0x82>
 8004fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004fae:	230a      	movs	r3, #10
 8004fb0:	e234      	b.n	800541c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e232      	b.n	800541c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fdc1 	bl	8004b50 <disk_initialize>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e21b      	b.n	800541c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <find_volume+0xca>
 8004fea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004ff6:	230a      	movs	r3, #10
 8004ff8:	e210      	b.n	800541c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	7858      	ldrb	r0, [r3, #1]
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	330c      	adds	r3, #12
 8005002:	461a      	mov	r2, r3
 8005004:	2102      	movs	r1, #2
 8005006:	f7ff fe09 	bl	8004c1c <disk_ioctl>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <find_volume+0xe4>
 8005010:	2301      	movs	r3, #1
 8005012:	e203      	b.n	800541c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	899b      	ldrh	r3, [r3, #12]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d80d      	bhi.n	800503a <find_volume+0x10a>
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	899b      	ldrh	r3, [r3, #12]
 8005022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005026:	d308      	bcc.n	800503a <find_volume+0x10a>
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	899b      	ldrh	r3, [r3, #12]
 800502c:	461a      	mov	r2, r3
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	899b      	ldrh	r3, [r3, #12]
 8005032:	3b01      	subs	r3, #1
 8005034:	4013      	ands	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <find_volume+0x10e>
 800503a:	2301      	movs	r3, #1
 800503c:	e1ee      	b.n	800541c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005042:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005046:	f7ff ff1d 	bl	8004e84 <check_fs>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005054:	2b02      	cmp	r3, #2
 8005056:	d149      	bne.n	80050ec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005058:	2300      	movs	r3, #0
 800505a:	643b      	str	r3, [r7, #64]	; 0x40
 800505c:	e01e      	b.n	800509c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800506c:	4413      	add	r3, r2
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	3304      	adds	r3, #4
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d006      	beq.n	8005088 <find_volume+0x158>
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	3308      	adds	r3, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fe02 	bl	8004c88 <ld_dword>
 8005084:	4602      	mov	r2, r0
 8005086:	e000      	b.n	800508a <find_volume+0x15a>
 8005088:	2200      	movs	r2, #0
 800508a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	3358      	adds	r3, #88	; 0x58
 8005090:	443b      	add	r3, r7
 8005092:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005098:	3301      	adds	r3, #1
 800509a:	643b      	str	r3, [r7, #64]	; 0x40
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d9dd      	bls.n	800505e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80050a2:	2300      	movs	r3, #0
 80050a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80050a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <find_volume+0x182>
 80050ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ae:	3b01      	subs	r3, #1
 80050b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80050b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	3358      	adds	r3, #88	; 0x58
 80050b8:	443b      	add	r3, r7
 80050ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80050be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80050c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <find_volume+0x1a2>
 80050c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050ca:	f7ff fedb 	bl	8004e84 <check_fs>
 80050ce:	4603      	mov	r3, r0
 80050d0:	e000      	b.n	80050d4 <find_volume+0x1a4>
 80050d2:	2303      	movs	r3, #3
 80050d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80050d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d905      	bls.n	80050ec <find_volume+0x1bc>
 80050e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e2:	3301      	adds	r3, #1
 80050e4:	643b      	str	r3, [r7, #64]	; 0x40
 80050e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d9e2      	bls.n	80050b2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80050ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d101      	bne.n	80050f8 <find_volume+0x1c8>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e191      	b.n	800541c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80050f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d901      	bls.n	8005104 <find_volume+0x1d4>
 8005100:	230d      	movs	r3, #13
 8005102:	e18b      	b.n	800541c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	3334      	adds	r3, #52	; 0x34
 8005108:	330b      	adds	r3, #11
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fda4 	bl	8004c58 <ld_word>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	899b      	ldrh	r3, [r3, #12]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <find_volume+0x1f0>
 800511c:	230d      	movs	r3, #13
 800511e:	e17d      	b.n	800541c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	3334      	adds	r3, #52	; 0x34
 8005124:	3316      	adds	r3, #22
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fd96 	bl	8004c58 <ld_word>
 800512c:	4603      	mov	r3, r0
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <find_volume+0x214>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	3334      	adds	r3, #52	; 0x34
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fda3 	bl	8004c88 <ld_dword>
 8005142:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005148:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	789b      	ldrb	r3, [r3, #2]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d005      	beq.n	8005168 <find_volume+0x238>
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	789b      	ldrb	r3, [r3, #2]
 8005160:	2b02      	cmp	r3, #2
 8005162:	d001      	beq.n	8005168 <find_volume+0x238>
 8005164:	230d      	movs	r3, #13
 8005166:	e159      	b.n	800541c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	789b      	ldrb	r3, [r3, #2]
 800516c:	461a      	mov	r2, r3
 800516e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005170:	fb02 f303 	mul.w	r3, r2, r3
 8005174:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517c:	b29a      	uxth	r2, r3
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	895b      	ldrh	r3, [r3, #10]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <find_volume+0x26c>
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	895b      	ldrh	r3, [r3, #10]
 800518e:	461a      	mov	r2, r3
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	895b      	ldrh	r3, [r3, #10]
 8005194:	3b01      	subs	r3, #1
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <find_volume+0x270>
 800519c:	230d      	movs	r3, #13
 800519e:	e13d      	b.n	800541c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	3334      	adds	r3, #52	; 0x34
 80051a4:	3311      	adds	r3, #17
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fd56 	bl	8004c58 <ld_word>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	891b      	ldrh	r3, [r3, #8]
 80051b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ba:	8992      	ldrh	r2, [r2, #12]
 80051bc:	0952      	lsrs	r2, r2, #5
 80051be:	b292      	uxth	r2, r2
 80051c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80051c4:	fb01 f202 	mul.w	r2, r1, r2
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <find_volume+0x2a8>
 80051d0:	230d      	movs	r3, #13
 80051d2:	e123      	b.n	800541c <find_volume+0x4ec>
 80051d4:	20000224 	.word	0x20000224

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	3334      	adds	r3, #52	; 0x34
 80051dc:	3313      	adds	r3, #19
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fd3a 	bl	8004c58 <ld_word>
 80051e4:	4603      	mov	r3, r0
 80051e6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80051e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <find_volume+0x2cc>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	3334      	adds	r3, #52	; 0x34
 80051f2:	3320      	adds	r3, #32
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fd47 	bl	8004c88 <ld_dword>
 80051fa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	3334      	adds	r3, #52	; 0x34
 8005200:	330e      	adds	r3, #14
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fd28 	bl	8004c58 <ld_word>
 8005208:	4603      	mov	r3, r0
 800520a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800520c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <find_volume+0x2e6>
 8005212:	230d      	movs	r3, #13
 8005214:	e102      	b.n	800541c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005216:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521a:	4413      	add	r3, r2
 800521c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800521e:	8911      	ldrh	r1, [r2, #8]
 8005220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005222:	8992      	ldrh	r2, [r2, #12]
 8005224:	0952      	lsrs	r2, r2, #5
 8005226:	b292      	uxth	r2, r2
 8005228:	fbb1 f2f2 	udiv	r2, r1, r2
 800522c:	b292      	uxth	r2, r2
 800522e:	4413      	add	r3, r2
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	429a      	cmp	r2, r3
 8005238:	d201      	bcs.n	800523e <find_volume+0x30e>
 800523a:	230d      	movs	r3, #13
 800523c:	e0ee      	b.n	800541c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800523e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005246:	8952      	ldrh	r2, [r2, #10]
 8005248:	fbb3 f3f2 	udiv	r3, r3, r2
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <find_volume+0x328>
 8005254:	230d      	movs	r3, #13
 8005256:	e0e1      	b.n	800541c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8005258:	2303      	movs	r3, #3
 800525a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005264:	4293      	cmp	r3, r2
 8005266:	d802      	bhi.n	800526e <find_volume+0x33e>
 8005268:	2302      	movs	r3, #2
 800526a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005274:	4293      	cmp	r3, r2
 8005276:	d802      	bhi.n	800527e <find_volume+0x34e>
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1c9a      	adds	r2, r3, #2
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800528a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800528c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	441a      	add	r2, r3
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005296:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	441a      	add	r2, r3
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80052a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d11e      	bne.n	80052e6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	3334      	adds	r3, #52	; 0x34
 80052ac:	332a      	adds	r3, #42	; 0x2a
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fcd2 	bl	8004c58 <ld_word>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <find_volume+0x38e>
 80052ba:	230d      	movs	r3, #13
 80052bc:	e0ae      	b.n	800541c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	891b      	ldrh	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <find_volume+0x39a>
 80052c6:	230d      	movs	r3, #13
 80052c8:	e0a8      	b.n	800541c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	3334      	adds	r3, #52	; 0x34
 80052ce:	332c      	adds	r3, #44	; 0x2c
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fcd9 	bl	8004c88 <ld_dword>
 80052d6:	4602      	mov	r2, r0
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
 80052e4:	e01f      	b.n	8005326 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	891b      	ldrh	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <find_volume+0x3c2>
 80052ee:	230d      	movs	r3, #13
 80052f0:	e094      	b.n	800541c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f8:	441a      	add	r2, r3
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80052fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005302:	2b02      	cmp	r3, #2
 8005304:	d103      	bne.n	800530e <find_volume+0x3de>
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	e00a      	b.n	8005324 <find_volume+0x3f4>
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	4613      	mov	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4413      	add	r3, r2
 8005318:	085a      	lsrs	r2, r3, #1
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	899b      	ldrh	r3, [r3, #12]
 800532e:	4619      	mov	r1, r3
 8005330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005332:	440b      	add	r3, r1
 8005334:	3b01      	subs	r3, #1
 8005336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005338:	8989      	ldrh	r1, [r1, #12]
 800533a:	fbb3 f3f1 	udiv	r3, r3, r1
 800533e:	429a      	cmp	r2, r3
 8005340:	d201      	bcs.n	8005346 <find_volume+0x416>
 8005342:	230d      	movs	r3, #13
 8005344:	e06a      	b.n	800541c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	615a      	str	r2, [r3, #20]
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2280      	movs	r2, #128	; 0x80
 800535a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800535c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005360:	2b03      	cmp	r3, #3
 8005362:	d149      	bne.n	80053f8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	3334      	adds	r3, #52	; 0x34
 8005368:	3330      	adds	r3, #48	; 0x30
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fc74 	bl	8004c58 <ld_word>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d140      	bne.n	80053f8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005378:	3301      	adds	r3, #1
 800537a:	4619      	mov	r1, r3
 800537c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800537e:	f7ff fd0f 	bl	8004da0 <move_window>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d137      	bne.n	80053f8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	2200      	movs	r2, #0
 800538c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	3334      	adds	r3, #52	; 0x34
 8005392:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fc5e 	bl	8004c58 <ld_word>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d127      	bne.n	80053f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	3334      	adds	r3, #52	; 0x34
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fc6b 	bl	8004c88 <ld_dword>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <find_volume+0x4f4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d11e      	bne.n	80053f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	3334      	adds	r3, #52	; 0x34
 80053be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fc60 	bl	8004c88 <ld_dword>
 80053c8:	4603      	mov	r3, r0
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <find_volume+0x4f8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d113      	bne.n	80053f8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	3334      	adds	r3, #52	; 0x34
 80053d4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fc55 	bl	8004c88 <ld_dword>
 80053de:	4602      	mov	r2, r0
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	3334      	adds	r3, #52	; 0x34
 80053e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fc4b 	bl	8004c88 <ld_dword>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80053fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <find_volume+0x4fc>)
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	4b08      	ldr	r3, [pc, #32]	; (800542c <find_volume+0x4fc>)
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <find_volume+0x4fc>)
 800540e:	881a      	ldrh	r2, [r3, #0]
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005416:	f7ff fc5b 	bl	8004cd0 <clear_lock>
#endif
	return FR_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3758      	adds	r7, #88	; 0x58
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	41615252 	.word	0x41615252
 8005428:	61417272 	.word	0x61417272
 800542c:	20000228 	.word	0x20000228

08005430 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fcd7 	bl	8004dfa <get_ldnumber>
 800544c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da01      	bge.n	8005458 <f_mount+0x28>
 8005454:	230b      	movs	r3, #11
 8005456:	e02b      	b.n	80054b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005458:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <f_mount+0x88>)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005460:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005468:	69b8      	ldr	r0, [r7, #24]
 800546a:	f7ff fc31 	bl	8004cd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	490d      	ldr	r1, [pc, #52]	; (80054b8 <f_mount+0x88>)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <f_mount+0x66>
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d001      	beq.n	800549a <f_mount+0x6a>
 8005496:	2300      	movs	r3, #0
 8005498:	e00a      	b.n	80054b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800549a:	f107 010c 	add.w	r1, r7, #12
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	2200      	movs	r2, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fd43 	bl	8004f30 <find_volume>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000224 	.word	0x20000224

080054bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80054d2:	4b1f      	ldr	r3, [pc, #124]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 80054d4:	7a5b      	ldrb	r3, [r3, #9]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d131      	bne.n	8005540 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 80054de:	7a5b      	ldrb	r3, [r3, #9]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 80054e6:	2100      	movs	r1, #0
 80054e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 80054ec:	7a5b      	ldrb	r3, [r3, #9]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	4a17      	ldr	r2, [pc, #92]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 80054fc:	7a5b      	ldrb	r3, [r3, #9]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	4b13      	ldr	r3, [pc, #76]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 8005504:	4413      	add	r3, r2
 8005506:	79fa      	ldrb	r2, [r7, #7]
 8005508:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 800550c:	7a5b      	ldrb	r3, [r3, #9]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	b2d1      	uxtb	r1, r2
 8005514:	4a0e      	ldr	r2, [pc, #56]	; (8005550 <FATFS_LinkDriverEx+0x94>)
 8005516:	7251      	strb	r1, [r2, #9]
 8005518:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800551a:	7dbb      	ldrb	r3, [r7, #22]
 800551c:	3330      	adds	r3, #48	; 0x30
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	3301      	adds	r3, #1
 8005528:	223a      	movs	r2, #58	; 0x3a
 800552a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	3302      	adds	r3, #2
 8005530:	222f      	movs	r2, #47	; 0x2f
 8005532:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	3303      	adds	r3, #3
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	2000024c 	.word	0x2000024c

08005554 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800555e:	2200      	movs	r2, #0
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff ffaa 	bl	80054bc <FATFS_LinkDriverEx>
 8005568:	4603      	mov	r3, r0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <std>:
 8005574:	2300      	movs	r3, #0
 8005576:	b510      	push	{r4, lr}
 8005578:	4604      	mov	r4, r0
 800557a:	e9c0 3300 	strd	r3, r3, [r0]
 800557e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005582:	6083      	str	r3, [r0, #8]
 8005584:	8181      	strh	r1, [r0, #12]
 8005586:	6643      	str	r3, [r0, #100]	; 0x64
 8005588:	81c2      	strh	r2, [r0, #14]
 800558a:	6183      	str	r3, [r0, #24]
 800558c:	4619      	mov	r1, r3
 800558e:	2208      	movs	r2, #8
 8005590:	305c      	adds	r0, #92	; 0x5c
 8005592:	f000 f9e5 	bl	8005960 <memset>
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <std+0x58>)
 8005598:	6263      	str	r3, [r4, #36]	; 0x24
 800559a:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <std+0x5c>)
 800559c:	62a3      	str	r3, [r4, #40]	; 0x28
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <std+0x60>)
 80055a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <std+0x64>)
 80055a4:	6323      	str	r3, [r4, #48]	; 0x30
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <std+0x68>)
 80055a8:	6224      	str	r4, [r4, #32]
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d006      	beq.n	80055bc <std+0x48>
 80055ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055b2:	4294      	cmp	r4, r2
 80055b4:	d002      	beq.n	80055bc <std+0x48>
 80055b6:	33d0      	adds	r3, #208	; 0xd0
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d105      	bne.n	80055c8 <std+0x54>
 80055bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c4:	f000 ba44 	b.w	8005a50 <__retarget_lock_init_recursive>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	bf00      	nop
 80055cc:	080057b1 	.word	0x080057b1
 80055d0:	080057d3 	.word	0x080057d3
 80055d4:	0800580b 	.word	0x0800580b
 80055d8:	0800582f 	.word	0x0800582f
 80055dc:	20000258 	.word	0x20000258

080055e0 <stdio_exit_handler>:
 80055e0:	4a02      	ldr	r2, [pc, #8]	; (80055ec <stdio_exit_handler+0xc>)
 80055e2:	4903      	ldr	r1, [pc, #12]	; (80055f0 <stdio_exit_handler+0x10>)
 80055e4:	4803      	ldr	r0, [pc, #12]	; (80055f4 <stdio_exit_handler+0x14>)
 80055e6:	f000 b869 	b.w	80056bc <_fwalk_sglue>
 80055ea:	bf00      	nop
 80055ec:	2000000c 	.word	0x2000000c
 80055f0:	08005d55 	.word	0x08005d55
 80055f4:	20000018 	.word	0x20000018

080055f8 <cleanup_stdio>:
 80055f8:	6841      	ldr	r1, [r0, #4]
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <cleanup_stdio+0x34>)
 80055fc:	4299      	cmp	r1, r3
 80055fe:	b510      	push	{r4, lr}
 8005600:	4604      	mov	r4, r0
 8005602:	d001      	beq.n	8005608 <cleanup_stdio+0x10>
 8005604:	f000 fba6 	bl	8005d54 <_fflush_r>
 8005608:	68a1      	ldr	r1, [r4, #8]
 800560a:	4b09      	ldr	r3, [pc, #36]	; (8005630 <cleanup_stdio+0x38>)
 800560c:	4299      	cmp	r1, r3
 800560e:	d002      	beq.n	8005616 <cleanup_stdio+0x1e>
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fb9f 	bl	8005d54 <_fflush_r>
 8005616:	68e1      	ldr	r1, [r4, #12]
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <cleanup_stdio+0x3c>)
 800561a:	4299      	cmp	r1, r3
 800561c:	d004      	beq.n	8005628 <cleanup_stdio+0x30>
 800561e:	4620      	mov	r0, r4
 8005620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005624:	f000 bb96 	b.w	8005d54 <_fflush_r>
 8005628:	bd10      	pop	{r4, pc}
 800562a:	bf00      	nop
 800562c:	20000258 	.word	0x20000258
 8005630:	200002c0 	.word	0x200002c0
 8005634:	20000328 	.word	0x20000328

08005638 <global_stdio_init.part.0>:
 8005638:	b510      	push	{r4, lr}
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <global_stdio_init.part.0+0x30>)
 800563c:	4c0b      	ldr	r4, [pc, #44]	; (800566c <global_stdio_init.part.0+0x34>)
 800563e:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <global_stdio_init.part.0+0x38>)
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	4620      	mov	r0, r4
 8005644:	2200      	movs	r2, #0
 8005646:	2104      	movs	r1, #4
 8005648:	f7ff ff94 	bl	8005574 <std>
 800564c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005650:	2201      	movs	r2, #1
 8005652:	2109      	movs	r1, #9
 8005654:	f7ff ff8e 	bl	8005574 <std>
 8005658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800565c:	2202      	movs	r2, #2
 800565e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005662:	2112      	movs	r1, #18
 8005664:	f7ff bf86 	b.w	8005574 <std>
 8005668:	20000390 	.word	0x20000390
 800566c:	20000258 	.word	0x20000258
 8005670:	080055e1 	.word	0x080055e1

08005674 <__sfp_lock_acquire>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sfp_lock_acquire+0x8>)
 8005676:	f000 b9ec 	b.w	8005a52 <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	20000399 	.word	0x20000399

08005680 <__sfp_lock_release>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__sfp_lock_release+0x8>)
 8005682:	f000 b9e7 	b.w	8005a54 <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	20000399 	.word	0x20000399

0800568c <__sinit>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	f7ff fff0 	bl	8005674 <__sfp_lock_acquire>
 8005694:	6a23      	ldr	r3, [r4, #32]
 8005696:	b11b      	cbz	r3, 80056a0 <__sinit+0x14>
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f7ff bff0 	b.w	8005680 <__sfp_lock_release>
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <__sinit+0x28>)
 80056a2:	6223      	str	r3, [r4, #32]
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <__sinit+0x2c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f5      	bne.n	8005698 <__sinit+0xc>
 80056ac:	f7ff ffc4 	bl	8005638 <global_stdio_init.part.0>
 80056b0:	e7f2      	b.n	8005698 <__sinit+0xc>
 80056b2:	bf00      	nop
 80056b4:	080055f9 	.word	0x080055f9
 80056b8:	20000390 	.word	0x20000390

080056bc <_fwalk_sglue>:
 80056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	4607      	mov	r7, r0
 80056c2:	4688      	mov	r8, r1
 80056c4:	4614      	mov	r4, r2
 80056c6:	2600      	movs	r6, #0
 80056c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056cc:	f1b9 0901 	subs.w	r9, r9, #1
 80056d0:	d505      	bpl.n	80056de <_fwalk_sglue+0x22>
 80056d2:	6824      	ldr	r4, [r4, #0]
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	d1f7      	bne.n	80056c8 <_fwalk_sglue+0xc>
 80056d8:	4630      	mov	r0, r6
 80056da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d907      	bls.n	80056f4 <_fwalk_sglue+0x38>
 80056e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056e8:	3301      	adds	r3, #1
 80056ea:	d003      	beq.n	80056f4 <_fwalk_sglue+0x38>
 80056ec:	4629      	mov	r1, r5
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	4306      	orrs	r6, r0
 80056f4:	3568      	adds	r5, #104	; 0x68
 80056f6:	e7e9      	b.n	80056cc <_fwalk_sglue+0x10>

080056f8 <_puts_r>:
 80056f8:	6a03      	ldr	r3, [r0, #32]
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	6884      	ldr	r4, [r0, #8]
 80056fe:	4605      	mov	r5, r0
 8005700:	460e      	mov	r6, r1
 8005702:	b90b      	cbnz	r3, 8005708 <_puts_r+0x10>
 8005704:	f7ff ffc2 	bl	800568c <__sinit>
 8005708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800570a:	07db      	lsls	r3, r3, #31
 800570c:	d405      	bmi.n	800571a <_puts_r+0x22>
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	0598      	lsls	r0, r3, #22
 8005712:	d402      	bmi.n	800571a <_puts_r+0x22>
 8005714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005716:	f000 f99c 	bl	8005a52 <__retarget_lock_acquire_recursive>
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	0719      	lsls	r1, r3, #28
 800571e:	d513      	bpl.n	8005748 <_puts_r+0x50>
 8005720:	6923      	ldr	r3, [r4, #16]
 8005722:	b18b      	cbz	r3, 8005748 <_puts_r+0x50>
 8005724:	3e01      	subs	r6, #1
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800572c:	3b01      	subs	r3, #1
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	b9e9      	cbnz	r1, 800576e <_puts_r+0x76>
 8005732:	2b00      	cmp	r3, #0
 8005734:	da2e      	bge.n	8005794 <_puts_r+0x9c>
 8005736:	4622      	mov	r2, r4
 8005738:	210a      	movs	r1, #10
 800573a:	4628      	mov	r0, r5
 800573c:	f000 f87b 	bl	8005836 <__swbuf_r>
 8005740:	3001      	adds	r0, #1
 8005742:	d007      	beq.n	8005754 <_puts_r+0x5c>
 8005744:	250a      	movs	r5, #10
 8005746:	e007      	b.n	8005758 <_puts_r+0x60>
 8005748:	4621      	mov	r1, r4
 800574a:	4628      	mov	r0, r5
 800574c:	f000 f8b0 	bl	80058b0 <__swsetup_r>
 8005750:	2800      	cmp	r0, #0
 8005752:	d0e7      	beq.n	8005724 <_puts_r+0x2c>
 8005754:	f04f 35ff 	mov.w	r5, #4294967295
 8005758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800575a:	07da      	lsls	r2, r3, #31
 800575c:	d405      	bmi.n	800576a <_puts_r+0x72>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	059b      	lsls	r3, r3, #22
 8005762:	d402      	bmi.n	800576a <_puts_r+0x72>
 8005764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005766:	f000 f975 	bl	8005a54 <__retarget_lock_release_recursive>
 800576a:	4628      	mov	r0, r5
 800576c:	bd70      	pop	{r4, r5, r6, pc}
 800576e:	2b00      	cmp	r3, #0
 8005770:	da04      	bge.n	800577c <_puts_r+0x84>
 8005772:	69a2      	ldr	r2, [r4, #24]
 8005774:	429a      	cmp	r2, r3
 8005776:	dc06      	bgt.n	8005786 <_puts_r+0x8e>
 8005778:	290a      	cmp	r1, #10
 800577a:	d004      	beq.n	8005786 <_puts_r+0x8e>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	7019      	strb	r1, [r3, #0]
 8005784:	e7cf      	b.n	8005726 <_puts_r+0x2e>
 8005786:	4622      	mov	r2, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 f854 	bl	8005836 <__swbuf_r>
 800578e:	3001      	adds	r0, #1
 8005790:	d1c9      	bne.n	8005726 <_puts_r+0x2e>
 8005792:	e7df      	b.n	8005754 <_puts_r+0x5c>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	250a      	movs	r5, #10
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	701d      	strb	r5, [r3, #0]
 800579e:	e7db      	b.n	8005758 <_puts_r+0x60>

080057a0 <puts>:
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <puts+0xc>)
 80057a2:	4601      	mov	r1, r0
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	f7ff bfa7 	b.w	80056f8 <_puts_r>
 80057aa:	bf00      	nop
 80057ac:	20000064 	.word	0x20000064

080057b0 <__sread>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	460c      	mov	r4, r1
 80057b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b8:	f000 f8fc 	bl	80059b4 <_read_r>
 80057bc:	2800      	cmp	r0, #0
 80057be:	bfab      	itete	ge
 80057c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057c2:	89a3      	ldrhlt	r3, [r4, #12]
 80057c4:	181b      	addge	r3, r3, r0
 80057c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ca:	bfac      	ite	ge
 80057cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ce:	81a3      	strhlt	r3, [r4, #12]
 80057d0:	bd10      	pop	{r4, pc}

080057d2 <__swrite>:
 80057d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	461f      	mov	r7, r3
 80057d8:	898b      	ldrh	r3, [r1, #12]
 80057da:	05db      	lsls	r3, r3, #23
 80057dc:	4605      	mov	r5, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	4616      	mov	r6, r2
 80057e2:	d505      	bpl.n	80057f0 <__swrite+0x1e>
 80057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e8:	2302      	movs	r3, #2
 80057ea:	2200      	movs	r2, #0
 80057ec:	f000 f8d0 	bl	8005990 <_lseek_r>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	4632      	mov	r2, r6
 80057fe:	463b      	mov	r3, r7
 8005800:	4628      	mov	r0, r5
 8005802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	f000 b8e7 	b.w	80059d8 <_write_r>

0800580a <__sseek>:
 800580a:	b510      	push	{r4, lr}
 800580c:	460c      	mov	r4, r1
 800580e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005812:	f000 f8bd 	bl	8005990 <_lseek_r>
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	bf15      	itete	ne
 800581c:	6560      	strne	r0, [r4, #84]	; 0x54
 800581e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005826:	81a3      	strheq	r3, [r4, #12]
 8005828:	bf18      	it	ne
 800582a:	81a3      	strhne	r3, [r4, #12]
 800582c:	bd10      	pop	{r4, pc}

0800582e <__sclose>:
 800582e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005832:	f000 b89d 	b.w	8005970 <_close_r>

08005836 <__swbuf_r>:
 8005836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005838:	460e      	mov	r6, r1
 800583a:	4614      	mov	r4, r2
 800583c:	4605      	mov	r5, r0
 800583e:	b118      	cbz	r0, 8005848 <__swbuf_r+0x12>
 8005840:	6a03      	ldr	r3, [r0, #32]
 8005842:	b90b      	cbnz	r3, 8005848 <__swbuf_r+0x12>
 8005844:	f7ff ff22 	bl	800568c <__sinit>
 8005848:	69a3      	ldr	r3, [r4, #24]
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	071a      	lsls	r2, r3, #28
 8005850:	d525      	bpl.n	800589e <__swbuf_r+0x68>
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	b31b      	cbz	r3, 800589e <__swbuf_r+0x68>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	1a98      	subs	r0, r3, r2
 800585c:	6963      	ldr	r3, [r4, #20]
 800585e:	b2f6      	uxtb	r6, r6
 8005860:	4283      	cmp	r3, r0
 8005862:	4637      	mov	r7, r6
 8005864:	dc04      	bgt.n	8005870 <__swbuf_r+0x3a>
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	f000 fa73 	bl	8005d54 <_fflush_r>
 800586e:	b9e0      	cbnz	r0, 80058aa <__swbuf_r+0x74>
 8005870:	68a3      	ldr	r3, [r4, #8]
 8005872:	3b01      	subs	r3, #1
 8005874:	60a3      	str	r3, [r4, #8]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	701e      	strb	r6, [r3, #0]
 800587e:	6962      	ldr	r2, [r4, #20]
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	429a      	cmp	r2, r3
 8005884:	d004      	beq.n	8005890 <__swbuf_r+0x5a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	07db      	lsls	r3, r3, #31
 800588a:	d506      	bpl.n	800589a <__swbuf_r+0x64>
 800588c:	2e0a      	cmp	r6, #10
 800588e:	d104      	bne.n	800589a <__swbuf_r+0x64>
 8005890:	4621      	mov	r1, r4
 8005892:	4628      	mov	r0, r5
 8005894:	f000 fa5e 	bl	8005d54 <_fflush_r>
 8005898:	b938      	cbnz	r0, 80058aa <__swbuf_r+0x74>
 800589a:	4638      	mov	r0, r7
 800589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589e:	4621      	mov	r1, r4
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 f805 	bl	80058b0 <__swsetup_r>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d0d5      	beq.n	8005856 <__swbuf_r+0x20>
 80058aa:	f04f 37ff 	mov.w	r7, #4294967295
 80058ae:	e7f4      	b.n	800589a <__swbuf_r+0x64>

080058b0 <__swsetup_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4b2a      	ldr	r3, [pc, #168]	; (800595c <__swsetup_r+0xac>)
 80058b4:	4605      	mov	r5, r0
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	460c      	mov	r4, r1
 80058ba:	b118      	cbz	r0, 80058c4 <__swsetup_r+0x14>
 80058bc:	6a03      	ldr	r3, [r0, #32]
 80058be:	b90b      	cbnz	r3, 80058c4 <__swsetup_r+0x14>
 80058c0:	f7ff fee4 	bl	800568c <__sinit>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058ca:	0718      	lsls	r0, r3, #28
 80058cc:	d422      	bmi.n	8005914 <__swsetup_r+0x64>
 80058ce:	06d9      	lsls	r1, r3, #27
 80058d0:	d407      	bmi.n	80058e2 <__swsetup_r+0x32>
 80058d2:	2309      	movs	r3, #9
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e034      	b.n	800594c <__swsetup_r+0x9c>
 80058e2:	0758      	lsls	r0, r3, #29
 80058e4:	d512      	bpl.n	800590c <__swsetup_r+0x5c>
 80058e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e8:	b141      	cbz	r1, 80058fc <__swsetup_r+0x4c>
 80058ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ee:	4299      	cmp	r1, r3
 80058f0:	d002      	beq.n	80058f8 <__swsetup_r+0x48>
 80058f2:	4628      	mov	r0, r5
 80058f4:	f000 f8b0 	bl	8005a58 <_free_r>
 80058f8:	2300      	movs	r3, #0
 80058fa:	6363      	str	r3, [r4, #52]	; 0x34
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	2300      	movs	r3, #0
 8005906:	6063      	str	r3, [r4, #4]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f043 0308 	orr.w	r3, r3, #8
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	b94b      	cbnz	r3, 800592c <__swsetup_r+0x7c>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800591e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005922:	d003      	beq.n	800592c <__swsetup_r+0x7c>
 8005924:	4621      	mov	r1, r4
 8005926:	4628      	mov	r0, r5
 8005928:	f000 fa62 	bl	8005df0 <__smakebuf_r>
 800592c:	89a0      	ldrh	r0, [r4, #12]
 800592e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005932:	f010 0301 	ands.w	r3, r0, #1
 8005936:	d00a      	beq.n	800594e <__swsetup_r+0x9e>
 8005938:	2300      	movs	r3, #0
 800593a:	60a3      	str	r3, [r4, #8]
 800593c:	6963      	ldr	r3, [r4, #20]
 800593e:	425b      	negs	r3, r3
 8005940:	61a3      	str	r3, [r4, #24]
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	b943      	cbnz	r3, 8005958 <__swsetup_r+0xa8>
 8005946:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800594a:	d1c4      	bne.n	80058d6 <__swsetup_r+0x26>
 800594c:	bd38      	pop	{r3, r4, r5, pc}
 800594e:	0781      	lsls	r1, r0, #30
 8005950:	bf58      	it	pl
 8005952:	6963      	ldrpl	r3, [r4, #20]
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	e7f4      	b.n	8005942 <__swsetup_r+0x92>
 8005958:	2000      	movs	r0, #0
 800595a:	e7f7      	b.n	800594c <__swsetup_r+0x9c>
 800595c:	20000064 	.word	0x20000064

08005960 <memset>:
 8005960:	4402      	add	r2, r0
 8005962:	4603      	mov	r3, r0
 8005964:	4293      	cmp	r3, r2
 8005966:	d100      	bne.n	800596a <memset+0xa>
 8005968:	4770      	bx	lr
 800596a:	f803 1b01 	strb.w	r1, [r3], #1
 800596e:	e7f9      	b.n	8005964 <memset+0x4>

08005970 <_close_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d06      	ldr	r5, [pc, #24]	; (800598c <_close_r+0x1c>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fb f9fb 	bl	8000d76 <_close>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_close_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_close_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000394 	.word	0x20000394

08005990 <_lseek_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	; (80059b0 <_lseek_r+0x20>)
 8005994:	4604      	mov	r4, r0
 8005996:	4608      	mov	r0, r1
 8005998:	4611      	mov	r1, r2
 800599a:	2200      	movs	r2, #0
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fb fa10 	bl	8000dc4 <_lseek>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_lseek_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_lseek_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20000394 	.word	0x20000394

080059b4 <_read_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	; (80059d4 <_read_r+0x20>)
 80059b8:	4604      	mov	r4, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	4611      	mov	r1, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	602a      	str	r2, [r5, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f7fb f9ba 	bl	8000d3c <_read>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_read_r+0x1e>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_read_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000394 	.word	0x20000394

080059d8 <_write_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d07      	ldr	r5, [pc, #28]	; (80059f8 <_write_r+0x20>)
 80059dc:	4604      	mov	r4, r0
 80059de:	4608      	mov	r0, r1
 80059e0:	4611      	mov	r1, r2
 80059e2:	2200      	movs	r2, #0
 80059e4:	602a      	str	r2, [r5, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f7fa fff0 	bl	80009cc <_write>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_write_r+0x1e>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_write_r+0x1e>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20000394 	.word	0x20000394

080059fc <__errno>:
 80059fc:	4b01      	ldr	r3, [pc, #4]	; (8005a04 <__errno+0x8>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000064 	.word	0x20000064

08005a08 <__libc_init_array>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	4d0d      	ldr	r5, [pc, #52]	; (8005a40 <__libc_init_array+0x38>)
 8005a0c:	4c0d      	ldr	r4, [pc, #52]	; (8005a44 <__libc_init_array+0x3c>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	2600      	movs	r6, #0
 8005a14:	42a6      	cmp	r6, r4
 8005a16:	d109      	bne.n	8005a2c <__libc_init_array+0x24>
 8005a18:	4d0b      	ldr	r5, [pc, #44]	; (8005a48 <__libc_init_array+0x40>)
 8005a1a:	4c0c      	ldr	r4, [pc, #48]	; (8005a4c <__libc_init_array+0x44>)
 8005a1c:	f000 fa56 	bl	8005ecc <_init>
 8005a20:	1b64      	subs	r4, r4, r5
 8005a22:	10a4      	asrs	r4, r4, #2
 8005a24:	2600      	movs	r6, #0
 8005a26:	42a6      	cmp	r6, r4
 8005a28:	d105      	bne.n	8005a36 <__libc_init_array+0x2e>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a30:	4798      	blx	r3
 8005a32:	3601      	adds	r6, #1
 8005a34:	e7ee      	b.n	8005a14 <__libc_init_array+0xc>
 8005a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3a:	4798      	blx	r3
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	e7f2      	b.n	8005a26 <__libc_init_array+0x1e>
 8005a40:	080060c4 	.word	0x080060c4
 8005a44:	080060c4 	.word	0x080060c4
 8005a48:	080060c4 	.word	0x080060c4
 8005a4c:	080060c8 	.word	0x080060c8

08005a50 <__retarget_lock_init_recursive>:
 8005a50:	4770      	bx	lr

08005a52 <__retarget_lock_acquire_recursive>:
 8005a52:	4770      	bx	lr

08005a54 <__retarget_lock_release_recursive>:
 8005a54:	4770      	bx	lr
	...

08005a58 <_free_r>:
 8005a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a5a:	2900      	cmp	r1, #0
 8005a5c:	d044      	beq.n	8005ae8 <_free_r+0x90>
 8005a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a62:	9001      	str	r0, [sp, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f1a1 0404 	sub.w	r4, r1, #4
 8005a6a:	bfb8      	it	lt
 8005a6c:	18e4      	addlt	r4, r4, r3
 8005a6e:	f000 f8df 	bl	8005c30 <__malloc_lock>
 8005a72:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <_free_r+0x94>)
 8005a74:	9801      	ldr	r0, [sp, #4]
 8005a76:	6813      	ldr	r3, [r2, #0]
 8005a78:	b933      	cbnz	r3, 8005a88 <_free_r+0x30>
 8005a7a:	6063      	str	r3, [r4, #4]
 8005a7c:	6014      	str	r4, [r2, #0]
 8005a7e:	b003      	add	sp, #12
 8005a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a84:	f000 b8da 	b.w	8005c3c <__malloc_unlock>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d908      	bls.n	8005a9e <_free_r+0x46>
 8005a8c:	6825      	ldr	r5, [r4, #0]
 8005a8e:	1961      	adds	r1, r4, r5
 8005a90:	428b      	cmp	r3, r1
 8005a92:	bf01      	itttt	eq
 8005a94:	6819      	ldreq	r1, [r3, #0]
 8005a96:	685b      	ldreq	r3, [r3, #4]
 8005a98:	1949      	addeq	r1, r1, r5
 8005a9a:	6021      	streq	r1, [r4, #0]
 8005a9c:	e7ed      	b.n	8005a7a <_free_r+0x22>
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	b10b      	cbz	r3, 8005aa8 <_free_r+0x50>
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d9fa      	bls.n	8005a9e <_free_r+0x46>
 8005aa8:	6811      	ldr	r1, [r2, #0]
 8005aaa:	1855      	adds	r5, r2, r1
 8005aac:	42a5      	cmp	r5, r4
 8005aae:	d10b      	bne.n	8005ac8 <_free_r+0x70>
 8005ab0:	6824      	ldr	r4, [r4, #0]
 8005ab2:	4421      	add	r1, r4
 8005ab4:	1854      	adds	r4, r2, r1
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	6011      	str	r1, [r2, #0]
 8005aba:	d1e0      	bne.n	8005a7e <_free_r+0x26>
 8005abc:	681c      	ldr	r4, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	6053      	str	r3, [r2, #4]
 8005ac2:	440c      	add	r4, r1
 8005ac4:	6014      	str	r4, [r2, #0]
 8005ac6:	e7da      	b.n	8005a7e <_free_r+0x26>
 8005ac8:	d902      	bls.n	8005ad0 <_free_r+0x78>
 8005aca:	230c      	movs	r3, #12
 8005acc:	6003      	str	r3, [r0, #0]
 8005ace:	e7d6      	b.n	8005a7e <_free_r+0x26>
 8005ad0:	6825      	ldr	r5, [r4, #0]
 8005ad2:	1961      	adds	r1, r4, r5
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	bf04      	itt	eq
 8005ad8:	6819      	ldreq	r1, [r3, #0]
 8005ada:	685b      	ldreq	r3, [r3, #4]
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	bf04      	itt	eq
 8005ae0:	1949      	addeq	r1, r1, r5
 8005ae2:	6021      	streq	r1, [r4, #0]
 8005ae4:	6054      	str	r4, [r2, #4]
 8005ae6:	e7ca      	b.n	8005a7e <_free_r+0x26>
 8005ae8:	b003      	add	sp, #12
 8005aea:	bd30      	pop	{r4, r5, pc}
 8005aec:	2000039c 	.word	0x2000039c

08005af0 <sbrk_aligned>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	4e0e      	ldr	r6, [pc, #56]	; (8005b2c <sbrk_aligned+0x3c>)
 8005af4:	460c      	mov	r4, r1
 8005af6:	6831      	ldr	r1, [r6, #0]
 8005af8:	4605      	mov	r5, r0
 8005afa:	b911      	cbnz	r1, 8005b02 <sbrk_aligned+0x12>
 8005afc:	f000 f9d6 	bl	8005eac <_sbrk_r>
 8005b00:	6030      	str	r0, [r6, #0]
 8005b02:	4621      	mov	r1, r4
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 f9d1 	bl	8005eac <_sbrk_r>
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	d00a      	beq.n	8005b24 <sbrk_aligned+0x34>
 8005b0e:	1cc4      	adds	r4, r0, #3
 8005b10:	f024 0403 	bic.w	r4, r4, #3
 8005b14:	42a0      	cmp	r0, r4
 8005b16:	d007      	beq.n	8005b28 <sbrk_aligned+0x38>
 8005b18:	1a21      	subs	r1, r4, r0
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f000 f9c6 	bl	8005eac <_sbrk_r>
 8005b20:	3001      	adds	r0, #1
 8005b22:	d101      	bne.n	8005b28 <sbrk_aligned+0x38>
 8005b24:	f04f 34ff 	mov.w	r4, #4294967295
 8005b28:	4620      	mov	r0, r4
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	200003a0 	.word	0x200003a0

08005b30 <_malloc_r>:
 8005b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b34:	1ccd      	adds	r5, r1, #3
 8005b36:	f025 0503 	bic.w	r5, r5, #3
 8005b3a:	3508      	adds	r5, #8
 8005b3c:	2d0c      	cmp	r5, #12
 8005b3e:	bf38      	it	cc
 8005b40:	250c      	movcc	r5, #12
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	4607      	mov	r7, r0
 8005b46:	db01      	blt.n	8005b4c <_malloc_r+0x1c>
 8005b48:	42a9      	cmp	r1, r5
 8005b4a:	d905      	bls.n	8005b58 <_malloc_r+0x28>
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	2600      	movs	r6, #0
 8005b52:	4630      	mov	r0, r6
 8005b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c2c <_malloc_r+0xfc>
 8005b5c:	f000 f868 	bl	8005c30 <__malloc_lock>
 8005b60:	f8d8 3000 	ldr.w	r3, [r8]
 8005b64:	461c      	mov	r4, r3
 8005b66:	bb5c      	cbnz	r4, 8005bc0 <_malloc_r+0x90>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f7ff ffc0 	bl	8005af0 <sbrk_aligned>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	4604      	mov	r4, r0
 8005b74:	d155      	bne.n	8005c22 <_malloc_r+0xf2>
 8005b76:	f8d8 4000 	ldr.w	r4, [r8]
 8005b7a:	4626      	mov	r6, r4
 8005b7c:	2e00      	cmp	r6, #0
 8005b7e:	d145      	bne.n	8005c0c <_malloc_r+0xdc>
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	d048      	beq.n	8005c16 <_malloc_r+0xe6>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	4631      	mov	r1, r6
 8005b88:	4638      	mov	r0, r7
 8005b8a:	eb04 0903 	add.w	r9, r4, r3
 8005b8e:	f000 f98d 	bl	8005eac <_sbrk_r>
 8005b92:	4581      	cmp	r9, r0
 8005b94:	d13f      	bne.n	8005c16 <_malloc_r+0xe6>
 8005b96:	6821      	ldr	r1, [r4, #0]
 8005b98:	1a6d      	subs	r5, r5, r1
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	f7ff ffa7 	bl	8005af0 <sbrk_aligned>
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d037      	beq.n	8005c16 <_malloc_r+0xe6>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	442b      	add	r3, r5
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d038      	beq.n	8005c26 <_malloc_r+0xf6>
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	42a2      	cmp	r2, r4
 8005bb8:	d12b      	bne.n	8005c12 <_malloc_r+0xe2>
 8005bba:	2200      	movs	r2, #0
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	e00f      	b.n	8005be0 <_malloc_r+0xb0>
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	1b52      	subs	r2, r2, r5
 8005bc4:	d41f      	bmi.n	8005c06 <_malloc_r+0xd6>
 8005bc6:	2a0b      	cmp	r2, #11
 8005bc8:	d917      	bls.n	8005bfa <_malloc_r+0xca>
 8005bca:	1961      	adds	r1, r4, r5
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	6025      	str	r5, [r4, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	6059      	strne	r1, [r3, #4]
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	bf08      	it	eq
 8005bd8:	f8c8 1000 	streq.w	r1, [r8]
 8005bdc:	5162      	str	r2, [r4, r5]
 8005bde:	604b      	str	r3, [r1, #4]
 8005be0:	4638      	mov	r0, r7
 8005be2:	f104 060b 	add.w	r6, r4, #11
 8005be6:	f000 f829 	bl	8005c3c <__malloc_unlock>
 8005bea:	f026 0607 	bic.w	r6, r6, #7
 8005bee:	1d23      	adds	r3, r4, #4
 8005bf0:	1af2      	subs	r2, r6, r3
 8005bf2:	d0ae      	beq.n	8005b52 <_malloc_r+0x22>
 8005bf4:	1b9b      	subs	r3, r3, r6
 8005bf6:	50a3      	str	r3, [r4, r2]
 8005bf8:	e7ab      	b.n	8005b52 <_malloc_r+0x22>
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	6862      	ldr	r2, [r4, #4]
 8005bfe:	d1dd      	bne.n	8005bbc <_malloc_r+0x8c>
 8005c00:	f8c8 2000 	str.w	r2, [r8]
 8005c04:	e7ec      	b.n	8005be0 <_malloc_r+0xb0>
 8005c06:	4623      	mov	r3, r4
 8005c08:	6864      	ldr	r4, [r4, #4]
 8005c0a:	e7ac      	b.n	8005b66 <_malloc_r+0x36>
 8005c0c:	4634      	mov	r4, r6
 8005c0e:	6876      	ldr	r6, [r6, #4]
 8005c10:	e7b4      	b.n	8005b7c <_malloc_r+0x4c>
 8005c12:	4613      	mov	r3, r2
 8005c14:	e7cc      	b.n	8005bb0 <_malloc_r+0x80>
 8005c16:	230c      	movs	r3, #12
 8005c18:	603b      	str	r3, [r7, #0]
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f000 f80e 	bl	8005c3c <__malloc_unlock>
 8005c20:	e797      	b.n	8005b52 <_malloc_r+0x22>
 8005c22:	6025      	str	r5, [r4, #0]
 8005c24:	e7dc      	b.n	8005be0 <_malloc_r+0xb0>
 8005c26:	605b      	str	r3, [r3, #4]
 8005c28:	deff      	udf	#255	; 0xff
 8005c2a:	bf00      	nop
 8005c2c:	2000039c 	.word	0x2000039c

08005c30 <__malloc_lock>:
 8005c30:	4801      	ldr	r0, [pc, #4]	; (8005c38 <__malloc_lock+0x8>)
 8005c32:	f7ff bf0e 	b.w	8005a52 <__retarget_lock_acquire_recursive>
 8005c36:	bf00      	nop
 8005c38:	20000398 	.word	0x20000398

08005c3c <__malloc_unlock>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	; (8005c44 <__malloc_unlock+0x8>)
 8005c3e:	f7ff bf09 	b.w	8005a54 <__retarget_lock_release_recursive>
 8005c42:	bf00      	nop
 8005c44:	20000398 	.word	0x20000398

08005c48 <__sflush_r>:
 8005c48:	898a      	ldrh	r2, [r1, #12]
 8005c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4e:	4605      	mov	r5, r0
 8005c50:	0710      	lsls	r0, r2, #28
 8005c52:	460c      	mov	r4, r1
 8005c54:	d458      	bmi.n	8005d08 <__sflush_r+0xc0>
 8005c56:	684b      	ldr	r3, [r1, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dc05      	bgt.n	8005c68 <__sflush_r+0x20>
 8005c5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	dc02      	bgt.n	8005c68 <__sflush_r+0x20>
 8005c62:	2000      	movs	r0, #0
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	d0f9      	beq.n	8005c62 <__sflush_r+0x1a>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c74:	682f      	ldr	r7, [r5, #0]
 8005c76:	6a21      	ldr	r1, [r4, #32]
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	d032      	beq.n	8005ce2 <__sflush_r+0x9a>
 8005c7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	075a      	lsls	r2, r3, #29
 8005c82:	d505      	bpl.n	8005c90 <__sflush_r+0x48>
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	1ac0      	subs	r0, r0, r3
 8005c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c8a:	b10b      	cbz	r3, 8005c90 <__sflush_r+0x48>
 8005c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c8e:	1ac0      	subs	r0, r0, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	4602      	mov	r2, r0
 8005c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c96:	6a21      	ldr	r1, [r4, #32]
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b0      	blx	r6
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	d106      	bne.n	8005cb0 <__sflush_r+0x68>
 8005ca2:	6829      	ldr	r1, [r5, #0]
 8005ca4:	291d      	cmp	r1, #29
 8005ca6:	d82b      	bhi.n	8005d00 <__sflush_r+0xb8>
 8005ca8:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <__sflush_r+0x108>)
 8005caa:	410a      	asrs	r2, r1
 8005cac:	07d6      	lsls	r6, r2, #31
 8005cae:	d427      	bmi.n	8005d00 <__sflush_r+0xb8>
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	6062      	str	r2, [r4, #4]
 8005cb4:	04d9      	lsls	r1, r3, #19
 8005cb6:	6922      	ldr	r2, [r4, #16]
 8005cb8:	6022      	str	r2, [r4, #0]
 8005cba:	d504      	bpl.n	8005cc6 <__sflush_r+0x7e>
 8005cbc:	1c42      	adds	r2, r0, #1
 8005cbe:	d101      	bne.n	8005cc4 <__sflush_r+0x7c>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b903      	cbnz	r3, 8005cc6 <__sflush_r+0x7e>
 8005cc4:	6560      	str	r0, [r4, #84]	; 0x54
 8005cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cc8:	602f      	str	r7, [r5, #0]
 8005cca:	2900      	cmp	r1, #0
 8005ccc:	d0c9      	beq.n	8005c62 <__sflush_r+0x1a>
 8005cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cd2:	4299      	cmp	r1, r3
 8005cd4:	d002      	beq.n	8005cdc <__sflush_r+0x94>
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7ff febe 	bl	8005a58 <_free_r>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	6360      	str	r0, [r4, #52]	; 0x34
 8005ce0:	e7c0      	b.n	8005c64 <__sflush_r+0x1c>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b0      	blx	r6
 8005ce8:	1c41      	adds	r1, r0, #1
 8005cea:	d1c8      	bne.n	8005c7e <__sflush_r+0x36>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0c5      	beq.n	8005c7e <__sflush_r+0x36>
 8005cf2:	2b1d      	cmp	r3, #29
 8005cf4:	d001      	beq.n	8005cfa <__sflush_r+0xb2>
 8005cf6:	2b16      	cmp	r3, #22
 8005cf8:	d101      	bne.n	8005cfe <__sflush_r+0xb6>
 8005cfa:	602f      	str	r7, [r5, #0]
 8005cfc:	e7b1      	b.n	8005c62 <__sflush_r+0x1a>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	e7ad      	b.n	8005c64 <__sflush_r+0x1c>
 8005d08:	690f      	ldr	r7, [r1, #16]
 8005d0a:	2f00      	cmp	r7, #0
 8005d0c:	d0a9      	beq.n	8005c62 <__sflush_r+0x1a>
 8005d0e:	0793      	lsls	r3, r2, #30
 8005d10:	680e      	ldr	r6, [r1, #0]
 8005d12:	bf08      	it	eq
 8005d14:	694b      	ldreq	r3, [r1, #20]
 8005d16:	600f      	str	r7, [r1, #0]
 8005d18:	bf18      	it	ne
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	eba6 0807 	sub.w	r8, r6, r7
 8005d20:	608b      	str	r3, [r1, #8]
 8005d22:	f1b8 0f00 	cmp.w	r8, #0
 8005d26:	dd9c      	ble.n	8005c62 <__sflush_r+0x1a>
 8005d28:	6a21      	ldr	r1, [r4, #32]
 8005d2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d2c:	4643      	mov	r3, r8
 8005d2e:	463a      	mov	r2, r7
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b0      	blx	r6
 8005d34:	2800      	cmp	r0, #0
 8005d36:	dc06      	bgt.n	8005d46 <__sflush_r+0xfe>
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	e78e      	b.n	8005c64 <__sflush_r+0x1c>
 8005d46:	4407      	add	r7, r0
 8005d48:	eba8 0800 	sub.w	r8, r8, r0
 8005d4c:	e7e9      	b.n	8005d22 <__sflush_r+0xda>
 8005d4e:	bf00      	nop
 8005d50:	dfbffffe 	.word	0xdfbffffe

08005d54 <_fflush_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	690b      	ldr	r3, [r1, #16]
 8005d58:	4605      	mov	r5, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	b913      	cbnz	r3, 8005d64 <_fflush_r+0x10>
 8005d5e:	2500      	movs	r5, #0
 8005d60:	4628      	mov	r0, r5
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	b118      	cbz	r0, 8005d6e <_fflush_r+0x1a>
 8005d66:	6a03      	ldr	r3, [r0, #32]
 8005d68:	b90b      	cbnz	r3, 8005d6e <_fflush_r+0x1a>
 8005d6a:	f7ff fc8f 	bl	800568c <__sinit>
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f3      	beq.n	8005d5e <_fflush_r+0xa>
 8005d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d78:	07d0      	lsls	r0, r2, #31
 8005d7a:	d404      	bmi.n	8005d86 <_fflush_r+0x32>
 8005d7c:	0599      	lsls	r1, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <_fflush_r+0x32>
 8005d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d82:	f7ff fe66 	bl	8005a52 <__retarget_lock_acquire_recursive>
 8005d86:	4628      	mov	r0, r5
 8005d88:	4621      	mov	r1, r4
 8005d8a:	f7ff ff5d 	bl	8005c48 <__sflush_r>
 8005d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d90:	07da      	lsls	r2, r3, #31
 8005d92:	4605      	mov	r5, r0
 8005d94:	d4e4      	bmi.n	8005d60 <_fflush_r+0xc>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	059b      	lsls	r3, r3, #22
 8005d9a:	d4e1      	bmi.n	8005d60 <_fflush_r+0xc>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9e:	f7ff fe59 	bl	8005a54 <__retarget_lock_release_recursive>
 8005da2:	e7dd      	b.n	8005d60 <_fflush_r+0xc>

08005da4 <__swhatbuf_r>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	460c      	mov	r4, r1
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	2900      	cmp	r1, #0
 8005dae:	b096      	sub	sp, #88	; 0x58
 8005db0:	4615      	mov	r5, r2
 8005db2:	461e      	mov	r6, r3
 8005db4:	da0d      	bge.n	8005dd2 <__swhatbuf_r+0x2e>
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dbc:	f04f 0100 	mov.w	r1, #0
 8005dc0:	bf0c      	ite	eq
 8005dc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005dc6:	2340      	movne	r3, #64	; 0x40
 8005dc8:	2000      	movs	r0, #0
 8005dca:	6031      	str	r1, [r6, #0]
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	b016      	add	sp, #88	; 0x58
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
 8005dd2:	466a      	mov	r2, sp
 8005dd4:	f000 f848 	bl	8005e68 <_fstat_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	dbec      	blt.n	8005db6 <__swhatbuf_r+0x12>
 8005ddc:	9901      	ldr	r1, [sp, #4]
 8005dde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005de2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005de6:	4259      	negs	r1, r3
 8005de8:	4159      	adcs	r1, r3
 8005dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dee:	e7eb      	b.n	8005dc8 <__swhatbuf_r+0x24>

08005df0 <__smakebuf_r>:
 8005df0:	898b      	ldrh	r3, [r1, #12]
 8005df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005df4:	079d      	lsls	r5, r3, #30
 8005df6:	4606      	mov	r6, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	d507      	bpl.n	8005e0c <__smakebuf_r+0x1c>
 8005dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	2301      	movs	r3, #1
 8005e06:	6163      	str	r3, [r4, #20]
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	ab01      	add	r3, sp, #4
 8005e0e:	466a      	mov	r2, sp
 8005e10:	f7ff ffc8 	bl	8005da4 <__swhatbuf_r>
 8005e14:	9900      	ldr	r1, [sp, #0]
 8005e16:	4605      	mov	r5, r0
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff fe89 	bl	8005b30 <_malloc_r>
 8005e1e:	b948      	cbnz	r0, 8005e34 <__smakebuf_r+0x44>
 8005e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e24:	059a      	lsls	r2, r3, #22
 8005e26:	d4ef      	bmi.n	8005e08 <__smakebuf_r+0x18>
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	e7e3      	b.n	8005dfc <__smakebuf_r+0xc>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	6020      	str	r0, [r4, #0]
 8005e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	9b00      	ldr	r3, [sp, #0]
 8005e40:	6163      	str	r3, [r4, #20]
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	6120      	str	r0, [r4, #16]
 8005e46:	b15b      	cbz	r3, 8005e60 <__smakebuf_r+0x70>
 8005e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f000 f81d 	bl	8005e8c <_isatty_r>
 8005e52:	b128      	cbz	r0, 8005e60 <__smakebuf_r+0x70>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	431d      	orrs	r5, r3
 8005e64:	81a5      	strh	r5, [r4, #12]
 8005e66:	e7cf      	b.n	8005e08 <__smakebuf_r+0x18>

08005e68 <_fstat_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d07      	ldr	r5, [pc, #28]	; (8005e88 <_fstat_r+0x20>)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	f7fa ff8a 	bl	8000d8e <_fstat>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d102      	bne.n	8005e84 <_fstat_r+0x1c>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	b103      	cbz	r3, 8005e84 <_fstat_r+0x1c>
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
 8005e86:	bf00      	nop
 8005e88:	20000394 	.word	0x20000394

08005e8c <_isatty_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d06      	ldr	r5, [pc, #24]	; (8005ea8 <_isatty_r+0x1c>)
 8005e90:	2300      	movs	r3, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	f7fa ff89 	bl	8000dae <_isatty>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_isatty_r+0x1a>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_isatty_r+0x1a>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	20000394 	.word	0x20000394

08005eac <_sbrk_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d06      	ldr	r5, [pc, #24]	; (8005ec8 <_sbrk_r+0x1c>)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	f7fa ff92 	bl	8000de0 <_sbrk>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_sbrk_r+0x1a>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_sbrk_r+0x1a>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	20000394 	.word	0x20000394

08005ecc <_init>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_fini>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr
