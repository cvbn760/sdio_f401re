
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800835c  0800835c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008364  08008364  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800836c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  080083d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080083d4  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010143  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6f  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae8  00000000  00000000  00033ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b4e  00000000  00000000  000345c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013210  00000000  00000000  0004d116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db96  00000000  00000000  00060326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041e8  00000000  00000000  000edebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000f20a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008060 	.word	0x08008060

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08008060 	.word	0x08008060

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <print_err>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void print_err(FRESULT fr){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	switch(fr){
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b13      	cmp	r3, #19
 80005da:	d87b      	bhi.n	80006d4 <print_err+0x108>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <print_err+0x18>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	08000635 	.word	0x08000635
 80005e8:	0800063d 	.word	0x0800063d
 80005ec:	08000645 	.word	0x08000645
 80005f0:	0800064d 	.word	0x0800064d
 80005f4:	08000655 	.word	0x08000655
 80005f8:	0800065d 	.word	0x0800065d
 80005fc:	08000665 	.word	0x08000665
 8000600:	0800066d 	.word	0x0800066d
 8000604:	08000675 	.word	0x08000675
 8000608:	0800067d 	.word	0x0800067d
 800060c:	08000685 	.word	0x08000685
 8000610:	0800068d 	.word	0x0800068d
 8000614:	08000695 	.word	0x08000695
 8000618:	0800069d 	.word	0x0800069d
 800061c:	080006a5 	.word	0x080006a5
 8000620:	080006ad 	.word	0x080006ad
 8000624:	080006b5 	.word	0x080006b5
 8000628:	080006bd 	.word	0x080006bd
 800062c:	080006c5 	.word	0x080006c5
 8000630:	080006cd 	.word	0x080006cd
	case FR_OK:				/* (0) Succeeded */
		printf("SD: FR_OK \n");
 8000634:	4829      	ldr	r0, [pc, #164]	; (80006dc <print_err+0x110>)
 8000636:	f006 fea9 	bl	800738c <puts>
		break;
 800063a:	e04b      	b.n	80006d4 <print_err+0x108>
	case FR_DISK_ERR:			/* (1) A hard error occurred in the low level disk I/O layer */
		printf("SD: FR_DISK_ERR \n");
 800063c:	4828      	ldr	r0, [pc, #160]	; (80006e0 <print_err+0x114>)
 800063e:	f006 fea5 	bl	800738c <puts>
		break;
 8000642:	e047      	b.n	80006d4 <print_err+0x108>
	case FR_INT_ERR:				/* (2) Assertion failed */
		printf("SD: FR_INT_ERR \n");
 8000644:	4827      	ldr	r0, [pc, #156]	; (80006e4 <print_err+0x118>)
 8000646:	f006 fea1 	bl	800738c <puts>
		break;
 800064a:	e043      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_READY:			/* (3) The physical drive cannot work */
		printf("SD: FR_NOT_READY \n");
 800064c:	4826      	ldr	r0, [pc, #152]	; (80006e8 <print_err+0x11c>)
 800064e:	f006 fe9d 	bl	800738c <puts>
		break;
 8000652:	e03f      	b.n	80006d4 <print_err+0x108>
	case FR_NO_FILE:				/* (4) Could not find the file */
		printf("SD: FR_NO_FILE \n");
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <print_err+0x120>)
 8000656:	f006 fe99 	bl	800738c <puts>
		break;
 800065a:	e03b      	b.n	80006d4 <print_err+0x108>
	case FR_NO_PATH:				/* (5) Could not find the path */
		printf("SD: FR_NO_PATH \n");
 800065c:	4824      	ldr	r0, [pc, #144]	; (80006f0 <print_err+0x124>)
 800065e:	f006 fe95 	bl	800738c <puts>
		break;
 8000662:	e037      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_NAME:		/* (6) The path name format is invalid */
		printf("SD: FR_INVALID_NAME \n");
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <print_err+0x128>)
 8000666:	f006 fe91 	bl	800738c <puts>
		break;
 800066a:	e033      	b.n	80006d4 <print_err+0x108>
	case FR_DENIED:				/* (7) Access denied due to prohibited access or directory full */
		printf("SD: FR_DENIED \n");
 800066c:	4822      	ldr	r0, [pc, #136]	; (80006f8 <print_err+0x12c>)
 800066e:	f006 fe8d 	bl	800738c <puts>
		break;
 8000672:	e02f      	b.n	80006d4 <print_err+0x108>
	case FR_EXIST:				/* (8) Access denied due to prohibited access */
		printf("SD: FR_EXIST \n");
 8000674:	4821      	ldr	r0, [pc, #132]	; (80006fc <print_err+0x130>)
 8000676:	f006 fe89 	bl	800738c <puts>
		break;
 800067a:	e02b      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_OBJECT:		/* (9) The file/directory object is invalid */
		printf("SD: FR_INVALID_OBJECT \n");
 800067c:	4820      	ldr	r0, [pc, #128]	; (8000700 <print_err+0x134>)
 800067e:	f006 fe85 	bl	800738c <puts>
		break;
 8000682:	e027      	b.n	80006d4 <print_err+0x108>
	case FR_WRITE_PROTECTED:		/* (10) The physical drive is write protected */
		printf("SD: FR_WRITE_PROTECTED \n");
 8000684:	481f      	ldr	r0, [pc, #124]	; (8000704 <print_err+0x138>)
 8000686:	f006 fe81 	bl	800738c <puts>
		break;
 800068a:	e023      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_DRIVE:		/* (11) The logical drive number is invalid */
		printf("SD: FR_INVALID_DRIVE \n");
 800068c:	481e      	ldr	r0, [pc, #120]	; (8000708 <print_err+0x13c>)
 800068e:	f006 fe7d 	bl	800738c <puts>
		break;
 8000692:	e01f      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_ENABLED:			/* (12) The volume has no work area */
		printf("SD: FR_NOT_ENABLED \n");
 8000694:	481d      	ldr	r0, [pc, #116]	; (800070c <print_err+0x140>)
 8000696:	f006 fe79 	bl	800738c <puts>
		break;
 800069a:	e01b      	b.n	80006d4 <print_err+0x108>
	case FR_NO_FILESYSTEM:		/* (13) There is no valid FAT volume */
		printf("SD: FR_NO_FILESYSTEM \n");
 800069c:	481c      	ldr	r0, [pc, #112]	; (8000710 <print_err+0x144>)
 800069e:	f006 fe75 	bl	800738c <puts>
		break;
 80006a2:	e017      	b.n	80006d4 <print_err+0x108>
	case FR_MKFS_ABORTED:		/* (14) The f_mkfs() aborted due to any problem */
		printf("SD: FR_MKFS_ABORTED \n");
 80006a4:	481b      	ldr	r0, [pc, #108]	; (8000714 <print_err+0x148>)
 80006a6:	f006 fe71 	bl	800738c <puts>
		break;
 80006aa:	e013      	b.n	80006d4 <print_err+0x108>
	case FR_TIMEOUT:				/* (15) Could not get a grant to access the volume within defined period */
		printf("SD: FR_TIMEOUT \n");
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <print_err+0x14c>)
 80006ae:	f006 fe6d 	bl	800738c <puts>
		break;
 80006b2:	e00f      	b.n	80006d4 <print_err+0x108>
	case FR_LOCKED:				/* (16) The operation is rejected according to the file sharing policy */
		printf("SD: FR_LOCKED \n");
 80006b4:	4819      	ldr	r0, [pc, #100]	; (800071c <print_err+0x150>)
 80006b6:	f006 fe69 	bl	800738c <puts>
		break;
 80006ba:	e00b      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_ENOUGH_CORE:		/* (17) LFN working buffer could not be allocated */
		printf("SD: FR_NOT_ENOUGH_CORE \n");
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <print_err+0x154>)
 80006be:	f006 fe65 	bl	800738c <puts>
		break;
 80006c2:	e007      	b.n	80006d4 <print_err+0x108>
	case FR_TOO_MANY_OPEN_FILES:	/* (18) Number of open files > _FS_LOCK */
		printf("SD: FR_TOO_MANY_OPEN_FILES \n");
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <print_err+0x158>)
 80006c6:	f006 fe61 	bl	800738c <puts>
		break;
 80006ca:	e003      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_PARAMETER:	/* (19) Given parameter is invalid */
		printf("SD: FR_INVALID_PARAMETER \n");
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <print_err+0x15c>)
 80006ce:	f006 fe5d 	bl	800738c <puts>
		break;
 80006d2:	bf00      	nop
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08008078 	.word	0x08008078
 80006e0:	08008084 	.word	0x08008084
 80006e4:	08008098 	.word	0x08008098
 80006e8:	080080a8 	.word	0x080080a8
 80006ec:	080080bc 	.word	0x080080bc
 80006f0:	080080cc 	.word	0x080080cc
 80006f4:	080080dc 	.word	0x080080dc
 80006f8:	080080f4 	.word	0x080080f4
 80006fc:	08008104 	.word	0x08008104
 8000700:	08008114 	.word	0x08008114
 8000704:	0800812c 	.word	0x0800812c
 8000708:	08008144 	.word	0x08008144
 800070c:	0800815c 	.word	0x0800815c
 8000710:	08008170 	.word	0x08008170
 8000714:	08008188 	.word	0x08008188
 8000718:	080081a0 	.word	0x080081a0
 800071c:	080081b0 	.word	0x080081b0
 8000720:	080081c0 	.word	0x080081c0
 8000724:	080081d8 	.word	0x080081d8
 8000728:	080081f4 	.word	0x080081f4

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	f5ad 5d06 	sub.w	sp, sp, #8576	; 0x2180
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc63 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f88b 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 f967 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000742:	f000 f93d 	bl	80009c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f911 	bl	800096c <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800074a:	f000 f8ef 	bl	800092c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800074e:	f004 f86d 	bl	800482c <MX_FATFS_Init>

  FATFS FatFs;
  FIL fil;
  FRESULT fr;

  fr = f_mount(&FatFs, "", 1);
 8000752:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8000756:	f103 0318 	add.w	r3, r3, #24
 800075a:	3b18      	subs	r3, #24
 800075c:	2201      	movs	r2, #1
 800075e:	4938      	ldr	r1, [pc, #224]	; (8000840 <main+0x114>)
 8000760:	4618      	mov	r0, r3
 8000762:	f006 f875 	bl	8006850 <f_mount>
 8000766:	4603      	mov	r3, r0
 8000768:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800076c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000770:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 8000772:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8000776:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff25 	bl	80005cc <print_err>
  if(fr == FR_OK){
 8000782:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8000786:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d105      	bne.n	800079c <main+0x70>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2120      	movs	r1, #32
 8000794:	482b      	ldr	r0, [pc, #172]	; (8000844 <main+0x118>)
 8000796:	f001 fadb 	bl	8001d50 <HAL_GPIO_WritePin>
 800079a:	e004      	b.n	80007a6 <main+0x7a>
  } else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4828      	ldr	r0, [pc, #160]	; (8000844 <main+0x118>)
 80007a2:	f001 fad5 	bl	8001d50 <HAL_GPIO_WritePin>
  }

  char line[200];
  fr = f_open(&fil, "test.txt", FA_READ);
 80007a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80007aa:	3b28      	subs	r3, #40	; 0x28
 80007ac:	2201      	movs	r2, #1
 80007ae:	4926      	ldr	r1, [pc, #152]	; (8000848 <main+0x11c>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 f893 	bl	80068dc <f_open>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80007bc:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80007c0:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 80007c2:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80007c6:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fefd 	bl	80005cc <print_err>



  char readBuff[128];
  memset(&readBuff[0], 0x00, 128);
 80007d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007d6:	3b30      	subs	r3, #48	; 0x30
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 feb5 	bl	800754c <memset>
  unsigned int bytesRead;
  fr = f_read(&fil, readBuff, sizeof(readBuff)-1, &bytesRead);
 80007e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e6:	3b34      	subs	r3, #52	; 0x34
 80007e8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007ec:	3930      	subs	r1, #48	; 0x30
 80007ee:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 80007f2:	3828      	subs	r0, #40	; 0x28
 80007f4:	227f      	movs	r2, #127	; 0x7f
 80007f6:	f006 fa3d 	bl	8006c74 <f_read>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8000800:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000804:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 8000806:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800080a:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fedb 	bl	80005cc <print_err>
  printf("%s\n ", readBuff);
 8000816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800081a:	3b30      	subs	r3, #48	; 0x30
 800081c:	4619      	mov	r1, r3
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <main+0x120>)
 8000820:	f006 fd4e 	bl	80072c0 <iprintf>

  f_close(&fil);
 8000824:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000828:	3b28      	subs	r3, #40	; 0x28
 800082a:	4618      	mov	r0, r3
 800082c:	f006 fbff 	bl	800702e <f_close>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000834:	f000 fc56 	bl	80010e4 <HAL_Delay>
	  printf("test\n");
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <main+0x124>)
 800083a:	f006 fda7 	bl	800738c <puts>
	  HAL_Delay(1000);
 800083e:	e7f7      	b.n	8000830 <main+0x104>
 8000840:	08008210 	.word	0x08008210
 8000844:	40020000 	.word	0x40020000
 8000848:	08008214 	.word	0x08008214
 800084c:	08008220 	.word	0x08008220
 8000850:	08008228 	.word	0x08008228

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f006 fe72 	bl	800754c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <SystemClock_Config+0xd0>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a28      	ldr	r2, [pc, #160]	; (8000924 <SystemClock_Config+0xd0>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <SystemClock_Config+0xd0>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <SystemClock_Config+0xd4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd4>)
 80008a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008cc:	2354      	movs	r3, #84	; 0x54
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fa51 	bl	8001d84 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e8:	f000 f92a 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2102      	movs	r1, #2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fcb2 	bl	8002274 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000916:	f000 f913 	bl	8000b40 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SDIO_SD_Init+0x38>)
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <MX_SDIO_SD_Init+0x3c>)
 8000934:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_SDIO_SD_Init+0x38>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SDIO_SD_Init+0x38>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_SDIO_SD_Init+0x38>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SDIO_SD_Init+0x38>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <MX_SDIO_SD_Init+0x38>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <MX_SDIO_SD_Init+0x38>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20000084 	.word	0x20000084
 8000968:	40012c00 	.word	0x40012c00

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f002 ff1f 	bl	80037e6 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f8c7 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001c8 	.word	0x200001c8
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_DMA_Init+0x4c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_DMA_Init+0x4c>)
 80009d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_DMA_Init+0x4c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	203b      	movs	r0, #59	; 0x3b
 80009e8:	f000 fc7b 	bl	80012e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009ec:	203b      	movs	r0, #59	; 0x3b
 80009ee:	f000 fc94 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2045      	movs	r0, #69	; 0x45
 80009f8:	f000 fc73 	bl	80012e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009fc:	2045      	movs	r0, #69	; 0x45
 80009fe:	f000 fc8c 	bl	800131a <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a33      	ldr	r2, [pc, #204]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a2c      	ldr	r2, [pc, #176]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a25      	ldr	r2, [pc, #148]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_GPIO_Init+0xec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_GPIO_Init+0xec>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_GPIO_Init+0xec>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	4812      	ldr	r0, [pc, #72]	; (8000b00 <MX_GPIO_Init+0xf0>)
 8000ab8:	f001 f94a 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_GPIO_Init+0xf4>)
 8000ad4:	f000 ffb8 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_GPIO_Init+0xf0>)
 8000af0:	f000 ffaa 	bl	8001a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020800 	.word	0x40020800

08000b08 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e009      	b.n	8000b2e <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	60ba      	str	r2, [r7, #8]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd2a 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf1      	blt.n	8000b1a <_write+0x12>
	}
	return len;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b8a:	2007      	movs	r0, #7
 8000b8c:	f000 fb9e 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a64      	ldr	r2, [pc, #400]	; (8000d4c <HAL_SD_MspInit+0x1b0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	f040 80c1 	bne.w	8000d42 <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	4b62      	ldr	r3, [pc, #392]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc8:	4a61      	ldr	r2, [pc, #388]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000bca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bce:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd0:	4b5f      	ldr	r3, [pc, #380]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a5a      	ldr	r2, [pc, #360]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b58      	ldr	r3, [pc, #352]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a53      	ldr	r2, [pc, #332]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b51      	ldr	r3, [pc, #324]	; (8000d50 <HAL_SD_MspInit+0x1b4>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0308 	and.w	r3, r3, #8
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c14:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c26:	230c      	movs	r3, #12
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4848      	ldr	r0, [pc, #288]	; (8000d54 <HAL_SD_MspInit+0x1b8>)
 8000c32:	f000 ff09 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c36:	2304      	movs	r3, #4
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c46:	230c      	movs	r3, #12
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4841      	ldr	r0, [pc, #260]	; (8000d58 <HAL_SD_MspInit+0x1bc>)
 8000c52:	f000 fef9 	bl	8001a48 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000c56:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c58:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <HAL_SD_MspInit+0x1c4>)
 8000c5a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c62:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c64:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c78:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000c88:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c94:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c9a:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000ca2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000caa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000cb0:	482a      	ldr	r0, [pc, #168]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000cb2:	f000 fb4d 	bl	8001350 <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000cbc:	f7ff ff40 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a26      	ldr	r2, [pc, #152]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <HAL_SD_MspInit+0x1c0>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000ccc:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_SD_MspInit+0x1cc>)
 8000cd0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000cd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d00:	2220      	movs	r2, #32
 8000d02:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000d26:	480f      	ldr	r0, [pc, #60]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d28:	f000 fb12 	bl	8001350 <HAL_DMA_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000d32:	f7ff ff05 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <HAL_SD_MspInit+0x1c8>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	20000108 	.word	0x20000108
 8000d60:	40026458 	.word	0x40026458
 8000d64:	20000168 	.word	0x20000168
 8000d68:	400264a0 	.word	0x400264a0

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12b      	bne.n	8000de6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_UART_MspInit+0x8c>)
 8000de2:	f000 fe31 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 f92c 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <DMA2_Stream3_IRQHandler+0x10>)
 8000e56:	f000 fb81 	bl	800155c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000108 	.word	0x20000108

08000e64 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <DMA2_Stream6_IRQHandler+0x10>)
 8000e6a:	f000 fb77 	bl	800155c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000168 	.word	0x20000168

08000e78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8a:	f3af 8000 	nop.w
 8000e8e:	4601      	mov	r1, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_read+0x12>
  }

  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	605a      	str	r2, [r3, #4]
  return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_isatty>:

int _isatty(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f006 fb4c 	bl	80075e8 <__errno>
 8000f50:	4603      	mov	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20018000 	.word	0x20018000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	2000020c 	.word	0x2000020c
 8000f84:	200003a8 	.word	0x200003a8

08000f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff ffd7 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f006 fb0b 	bl	80075f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fba5 	bl	800072c <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ff0:	0800836c 	.word	0x0800836c
  ldr r2, =_sbss
 8000ff4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ff8:	200003a4 	.word	0x200003a4

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_Init+0x40>)
 800100a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_Init+0x40>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x40>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f94f 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f808 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fd8a 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x54>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f967 	bl	8001336 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 f92f 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <HAL_InitTick+0x5c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000004 	.word	0x20000004

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000210 	.word	0x20000210

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000210 	.word	0x20000210

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffee 	bl	80010cc <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffde 	bl	80010cc <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008

0800112c <__NVIC_SetPriorityGrouping>:
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff29 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff3e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff31 	bl	8001190 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa2 	bl	8001288 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff feb6 	bl	80010cc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e099      	b.n	80014a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138c:	e00f      	b.n	80013ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800138e:	f7ff fe9d 	bl	80010cc <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b05      	cmp	r3, #5
 800139a:	d908      	bls.n	80013ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e078      	b.n	80014a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1e8      	bne.n	800138e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_DMA_Init+0x158>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	2b04      	cmp	r3, #4
 8001406:	d107      	bne.n	8001418 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4313      	orrs	r3, r2
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f023 0307 	bic.w	r3, r3, #7
 800142e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4313      	orrs	r3, r2
 8001438:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	2b04      	cmp	r3, #4
 8001440:	d117      	bne.n	8001472 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4313      	orrs	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fa7b 	bl	8001950 <DMA_CheckFifoParam>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800146e:	2301      	movs	r3, #1
 8001470:	e016      	b.n	80014a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fa32 	bl	80018e4 <DMA_CalcBaseAndBitshift>
 8001480:	4603      	mov	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	223f      	movs	r2, #63	; 0x3f
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	f010803f 	.word	0xf010803f

080014ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_DMA_Start_IT+0x26>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e040      	b.n	8001554 <HAL_DMA_Start_IT+0xa8>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d12f      	bne.n	8001546 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2202      	movs	r2, #2
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f9c4 	bl	8001888 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	223f      	movs	r2, #63	; 0x3f
 8001506:	409a      	lsls	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0216 	orr.w	r2, r2, #22
 800151a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0208 	orr.w	r2, r2, #8
 8001532:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e005      	b.n	8001552 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800154e:	2302      	movs	r3, #2
 8001550:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001552:	7dfb      	ldrb	r3, [r7, #23]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001568:	4b8e      	ldr	r3, [pc, #568]	; (80017a4 <HAL_DMA_IRQHandler+0x248>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a8e      	ldr	r2, [pc, #568]	; (80017a8 <HAL_DMA_IRQHandler+0x24c>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0a9b      	lsrs	r3, r3, #10
 8001574:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	2208      	movs	r2, #8
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d01a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d013      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2208      	movs	r2, #8
 80015b6:	409a      	lsls	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2201      	movs	r2, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d012      	beq.n	80015fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	2201      	movs	r2, #1
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f043 0202 	orr.w	r2, r3, #2
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2204      	movs	r2, #4
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d012      	beq.n	8001634 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00b      	beq.n	8001634 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2204      	movs	r2, #4
 8001622:	409a      	lsls	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f043 0204 	orr.w	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2210      	movs	r2, #16
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d043      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03c      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2210      	movs	r2, #16
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d018      	beq.n	800169e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d108      	bne.n	800168c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d024      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
 800168a:	e01f      	b.n	80016cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01b      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
 800169c:	e016      	b.n	80016cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d107      	bne.n	80016bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0208 	bic.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	2220      	movs	r2, #32
 80016d2:	409a      	lsls	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 808f 	beq.w	80017fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8087 	beq.w	80017fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	2220      	movs	r2, #32
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b05      	cmp	r3, #5
 8001704:	d136      	bne.n	8001774 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0216 	bic.w	r2, r2, #22
 8001714:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001724:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <HAL_DMA_IRQHandler+0x1da>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0208 	bic.w	r2, r2, #8
 8001744:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	223f      	movs	r2, #63	; 0x3f
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001766:	2b00      	cmp	r3, #0
 8001768:	d07e      	beq.n	8001868 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
        }
        return;
 8001772:	e079      	b.n	8001868 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01d      	beq.n	80017be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	2b00      	cmp	r3, #0
 8001796:	d031      	beq.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
 80017a0:	e02c      	b.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
 80017a2:	bf00      	nop
 80017a4:	20000000 	.word	0x20000000
 80017a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d023      	beq.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
 80017bc:	e01e      	b.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10f      	bne.n	80017ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0210 	bic.w	r2, r2, #16
 80017da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	2b00      	cmp	r3, #0
 8001802:	d032      	beq.n	800186a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d022      	beq.n	8001856 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2205      	movs	r2, #5
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	3301      	adds	r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	d307      	bcc.n	8001844 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f2      	bne.n	8001828 <HAL_DMA_IRQHandler+0x2cc>
 8001842:	e000      	b.n	8001846 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001844:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	4798      	blx	r3
 8001866:	e000      	b.n	800186a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001868:	bf00      	nop
    }
  }
}
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d108      	bne.n	80018c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018c6:	e007      	b.n	80018d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3b10      	subs	r3, #16
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <DMA_CalcBaseAndBitshift+0x64>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <DMA_CalcBaseAndBitshift+0x68>)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d909      	bls.n	8001926 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	1d1a      	adds	r2, r3, #4
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58
 8001924:	e007      	b.n	8001936 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192e:	f023 0303 	bic.w	r3, r3, #3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	aaaaaaab 	.word	0xaaaaaaab
 800194c:	0800828c 	.word	0x0800828c

08001950 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11f      	bne.n	80019aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d856      	bhi.n	8001a1e <DMA_CheckFifoParam+0xce>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <DMA_CheckFifoParam+0x28>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	0800199b 	.word	0x0800199b
 8001980:	08001989 	.word	0x08001989
 8001984:	08001a1f 	.word	0x08001a1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d046      	beq.n	8001a22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001998:	e043      	b.n	8001a22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019a2:	d140      	bne.n	8001a26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a8:	e03d      	b.n	8001a26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b2:	d121      	bne.n	80019f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d837      	bhi.n	8001a2a <DMA_CheckFifoParam+0xda>
 80019ba:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <DMA_CheckFifoParam+0x70>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	080019d7 	.word	0x080019d7
 80019c8:	080019d1 	.word	0x080019d1
 80019cc:	080019e9 	.word	0x080019e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      break;
 80019d4:	e030      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d025      	beq.n	8001a2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e6:	e022      	b.n	8001a2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f0:	d11f      	bne.n	8001a32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019f6:	e01c      	b.n	8001a32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d903      	bls.n	8001a06 <DMA_CheckFifoParam+0xb6>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d003      	beq.n	8001a0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a04:	e018      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0a:	e015      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a1c:	e00b      	b.n	8001a36 <DMA_CheckFifoParam+0xe6>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e00a      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e008      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
 8001a28:	e006      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e004      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2e:	bf00      	nop
 8001a30:	e002      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <DMA_CheckFifoParam+0xe8>
      break;
 8001a36:	bf00      	nop
    }
  } 
  
  return status; 
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e159      	b.n	8001d18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8148 	bne.w	8001d12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d005      	beq.n	8001a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d130      	bne.n	8001afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 0201 	and.w	r2, r3, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d017      	beq.n	8001b38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d123      	bne.n	8001b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	08da      	lsrs	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3208      	adds	r2, #8
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a2 	beq.w	8001d12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a56      	ldr	r2, [pc, #344]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bea:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_Init+0x202>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a48      	ldr	r2, [pc, #288]	; (8001d3c <HAL_GPIO_Init+0x2f4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0x1fe>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a47      	ldr	r2, [pc, #284]	; (8001d40 <HAL_GPIO_Init+0x2f8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_Init+0x1fa>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a46      	ldr	r2, [pc, #280]	; (8001d44 <HAL_GPIO_Init+0x2fc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_Init+0x1f6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a45      	ldr	r2, [pc, #276]	; (8001d48 <HAL_GPIO_Init+0x300>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_Init+0x1f2>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x204>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c5c:	4935      	ldr	r1, [pc, #212]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a24      	ldr	r2, [pc, #144]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f aea2 	bls.w	8001a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e267      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d075      	beq.n	8001e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d00c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d112      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc6:	d10b      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	4b7e      	ldr	r3, [pc, #504]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d05b      	beq.n	8001e8c <HAL_RCC_OscConfig+0x108>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d157      	bne.n	8001e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e242      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d106      	bne.n	8001df8 <HAL_RCC_OscConfig+0x74>
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x98>
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6f      	ldr	r2, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	4b69      	ldr	r3, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a68      	ldr	r2, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a65      	ldr	r2, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f946 	bl	80010cc <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f942 	bl	80010cc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e207      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xc0>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff f932 	bl	80010cc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f92e 	bl	80010cc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1f3      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0xe8>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1c7      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e03a      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff f8e7 	bl	80010cc <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff f8e3 	bl	80010cc <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1a8      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4925      	ldr	r1, [pc, #148]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f8c6 	bl	80010cc <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff f8c2 	bl	80010cc <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e187      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d036      	beq.n	8001fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f8a6 	bl	80010cc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff f8a2 	bl	80010cc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e167      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x200>
 8001fa2:	e01b      	b.n	8001fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff f88f 	bl	80010cc <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	e00e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff f88b 	bl	80010cc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d907      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e150      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470000 	.word	0x42470000
 8001fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ea      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8097 	beq.w	8002118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b81      	ldr	r3, [pc, #516]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b7d      	ldr	r3, [pc, #500]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a7c      	ldr	r2, [pc, #496]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b7a      	ldr	r3, [pc, #488]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b77      	ldr	r3, [pc, #476]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b74      	ldr	r3, [pc, #464]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a73      	ldr	r2, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff f84b 	bl	80010cc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f847 	bl	80010cc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e10c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x2ea>
 8002060:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a63      	ldr	r2, [pc, #396]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x30c>
 8002076:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a5e      	ldr	r2, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a5b      	ldr	r2, [pc, #364]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 8002090:	4b58      	ldr	r3, [pc, #352]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f80c 	bl	80010cc <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff f808 	bl	80010cc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0cb      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ee      	beq.n	80020b8 <HAL_RCC_OscConfig+0x334>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7fe fff6 	bl	80010cc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7fe fff2 	bl	80010cc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0b5      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ee      	bne.n	80020e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a1 	beq.w	8002264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d05c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d141      	bne.n	80021ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe ffc6 	bl	80010cc <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe ffc2 	bl	80010cc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e087      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	491b      	ldr	r1, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe ff9b 	bl	80010cc <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219a:	f7fe ff97 	bl	80010cc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e05c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x416>
 80021b8:	e054      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe ff84 	bl	80010cc <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe ff80 	bl	80010cc <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e045      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x444>
 80021e6:	e03d      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e038      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4ec>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d028      	beq.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d121      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d11a      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cc      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d90c      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e067      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4934      	ldr	r1, [pc, #208]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe feb2 	bl	80010cc <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe feae 	bl	80010cc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d20c      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fe12 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
 8002434:	08008274 	.word	0x08008274
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b094      	sub	sp, #80	; 0x50
 8002446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	647b      	str	r3, [r7, #68]	; 0x44
 800244c:	2300      	movs	r3, #0
 800244e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002450:	2300      	movs	r3, #0
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d00d      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x40>
 8002464:	2b08      	cmp	r3, #8
 8002466:	f200 80e1 	bhi.w	800262c <HAL_RCC_GetSysClockFreq+0x1ec>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x3a>
 8002472:	e0db      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_GetSysClockFreq+0x204>)
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002478:	e0db      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_GetSysClockFreq+0x208>)
 800247c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800247e:	e0d8      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002496:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	2200      	movs	r2, #0
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
 80024ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	f04f 0000 	mov.w	r0, #0
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	0159      	lsls	r1, r3, #5
 80024c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c4:	0150      	lsls	r0, r2, #5
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4621      	mov	r1, r4
 80024cc:	1a51      	subs	r1, r2, r1
 80024ce:	6139      	str	r1, [r7, #16]
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb63 0301 	sbc.w	r3, r3, r1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024e4:	4659      	mov	r1, fp
 80024e6:	018b      	lsls	r3, r1, #6
 80024e8:	4651      	mov	r1, sl
 80024ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ee:	4651      	mov	r1, sl
 80024f0:	018a      	lsls	r2, r1, #6
 80024f2:	4651      	mov	r1, sl
 80024f4:	ebb2 0801 	subs.w	r8, r2, r1
 80024f8:	4659      	mov	r1, fp
 80024fa:	eb63 0901 	sbc.w	r9, r3, r1
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800250a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002512:	4690      	mov	r8, r2
 8002514:	4699      	mov	r9, r3
 8002516:	4623      	mov	r3, r4
 8002518:	eb18 0303 	adds.w	r3, r8, r3
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	462b      	mov	r3, r5
 8002520:	eb49 0303 	adc.w	r3, r9, r3
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002532:	4629      	mov	r1, r5
 8002534:	024b      	lsls	r3, r1, #9
 8002536:	4621      	mov	r1, r4
 8002538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800253c:	4621      	mov	r1, r4
 800253e:	024a      	lsls	r2, r1, #9
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	2200      	movs	r2, #0
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
 800254a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800254c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002550:	f7fd fe96 	bl	8000280 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800255c:	e058      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	2200      	movs	r2, #0
 8002566:	4618      	mov	r0, r3
 8002568:	4611      	mov	r1, r2
 800256a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	f04f 0000 	mov.w	r0, #0
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	0159      	lsls	r1, r3, #5
 8002586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258a:	0150      	lsls	r0, r2, #5
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4641      	mov	r1, r8
 8002592:	ebb2 0a01 	subs.w	sl, r2, r1
 8002596:	4649      	mov	r1, r9
 8002598:	eb63 0b01 	sbc.w	fp, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025b0:	ebb2 040a 	subs.w	r4, r2, sl
 80025b4:	eb63 050b 	sbc.w	r5, r3, fp
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	00eb      	lsls	r3, r5, #3
 80025c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c6:	00e2      	lsls	r2, r4, #3
 80025c8:	4614      	mov	r4, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	4643      	mov	r3, r8
 80025ce:	18e3      	adds	r3, r4, r3
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	464b      	mov	r3, r9
 80025d4:	eb45 0303 	adc.w	r3, r5, r3
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e6:	4629      	mov	r1, r5
 80025e8:	028b      	lsls	r3, r1, #10
 80025ea:	4621      	mov	r1, r4
 80025ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f0:	4621      	mov	r1, r4
 80025f2:	028a      	lsls	r2, r1, #10
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fa:	2200      	movs	r2, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	61fa      	str	r2, [r7, #28]
 8002600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002604:	f7fd fe3c 	bl	8000280 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4613      	mov	r3, r2
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	3301      	adds	r3, #1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800262a:	e002      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002634:	4618      	mov	r0, r3
 8002636:	3750      	adds	r7, #80	; 0x50
 8002638:	46bd      	mov	sp, r7
 800263a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	00f42400 	.word	0x00f42400
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCC_GetHCLKFreq+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000000 	.word	0x20000000

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002668:	f7ff fff0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	08008284 	.word	0x08008284

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002690:	f7ff ffdc 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0b5b      	lsrs	r3, r3, #13
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	08008284 	.word	0x08008284

080026b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e022      	b.n	800270c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7fe fa5f 	bl	8000b9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f814 	bl	8002714 <HAL_SD_InitCard>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00a      	b.n	800270c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002714:	b5b0      	push	{r4, r5, r7, lr}
 8002716:	b08e      	sub	sp, #56	; 0x38
 8002718:	af04      	add	r7, sp, #16
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002730:	2376      	movs	r3, #118	; 0x76
 8002732:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681d      	ldr	r5, [r3, #0]
 8002738:	466c      	mov	r4, sp
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274c:	4628      	mov	r0, r5
 800274e:	f001 fb0b 	bl	8003d68 <SDIO_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e04f      	b.n	8002804 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <HAL_SD_InitCard+0xf8>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f001 fb32 	bl	8003dd8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_SD_InitCard+0xf8>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800277a:	2002      	movs	r0, #2
 800277c:	f7fe fcb2 	bl	80010e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fe11 	bl	80033a8 <SD_PowerON>
 8002786:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e02e      	b.n	8002804 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fd30 	bl	800320c <SD_InitCard>
 80027ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e01b      	b.n	8002804 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fb91 	bl	8003efc <SDMMC_CmdBlockLength>
 80027da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00f      	beq.n	8002802 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_SD_InitCard+0xfc>)
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3728      	adds	r7, #40	; 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bdb0      	pop	{r4, r5, r7, pc}
 800280c:	422580a0 	.word	0x422580a0
 8002810:	004005ff 	.word	0x004005ff

08002814 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0c0      	b.n	80029be <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 80b9 	bne.w	80029bc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	441a      	add	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	429a      	cmp	r2, r3
 800285c:	d907      	bls.n	800286e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0a7      	b.n	80029be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80028a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2200      	movs	r2, #0
 80028a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3380      	adds	r3, #128	; 0x80
 80028d8:	4619      	mov	r1, r3
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	f7fe fde3 	bl	80014ac <HAL_DMA_Start_IT>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a33      	ldr	r2, [pc, #204]	; (80029d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e050      	b.n	80029be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	2b01      	cmp	r3, #1
 8002928:	d002      	beq.n	8002930 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	025b      	lsls	r3, r3, #9
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	025b      	lsls	r3, r3, #9
 800293a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800293c:	2390      	movs	r3, #144	; 0x90
 800293e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002940:	2302      	movs	r3, #2
 8002942:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002948:	2301      	movs	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f107 0210 	add.w	r2, r7, #16
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f001 faa4 	bl	8003ea4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d90a      	bls.n	8002978 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2282      	movs	r2, #130	; 0x82
 8002966:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fb08 	bl	8003f84 <SDMMC_CmdReadMultiBlock>
 8002974:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002976:	e009      	b.n	800298c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2281      	movs	r2, #129	; 0x81
 800297c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fadb 	bl	8003f40 <SDMMC_CmdReadSingleBlock>
 800298a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d012      	beq.n	80029b8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e002      	b.n	80029be <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e000      	b.n	80029be <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3730      	adds	r7, #48	; 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	080030f7 	.word	0x080030f7
 80029cc:	08003169 	.word	0x08003169
 80029d0:	004005ff 	.word	0x004005ff
 80029d4:	4225858c 	.word	0x4225858c

080029d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0c5      	b.n	8002b8c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	f040 80be 	bne.w	8002b8a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	441a      	add	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d907      	bls.n	8002a32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0ac      	b.n	8002b8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	4a4e      	ldr	r2, [pc, #312]	; (8002b94 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	4a4d      	ldr	r2, [pc, #308]	; (8002b98 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002a64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d002      	beq.n	8002a7c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	025b      	lsls	r3, r3, #9
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d90a      	bls.n	8002a98 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	22a0      	movs	r2, #160	; 0xa0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fabc 	bl	800400c <SDMMC_CmdWriteMultiBlock>
 8002a94:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002a96:	e009      	b.n	8002aac <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2290      	movs	r2, #144	; 0x90
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 fa8f 	bl	8003fc8 <SDMMC_CmdWriteSingleBlock>
 8002aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a39      	ldr	r2, [pc, #228]	; (8002b9c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e059      	b.n	8002b8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002ad8:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2240      	movs	r2, #64	; 0x40
 8002ae4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3380      	adds	r3, #128	; 0x80
 8002b0e:	461a      	mov	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	025b      	lsls	r3, r3, #9
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	f7fe fcc9 	bl	80014ac <HAL_DMA_Start_IT>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01c      	beq.n	8002b5a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002b2e:	f023 0302 	bic.w	r3, r3, #2
 8002b32:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e018      	b.n	8002b8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	025b      	lsls	r3, r3, #9
 8002b64:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002b66:	2390      	movs	r3, #144	; 0x90
 8002b68:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f107 0210 	add.w	r2, r7, #16
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 f98f 	bl	8003ea4 <SDIO_ConfigData>

      return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
  }
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3730      	adds	r7, #48	; 0x30
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	080030cd 	.word	0x080030cd
 8002b98:	08003169 	.word	0x08003169
 8002b9c:	004005ff 	.word	0x004005ff
 8002ba0:	4225858c 	.word	0x4225858c

08002ba4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc6:	0f9b      	lsrs	r3, r3, #30
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be4:	0e1b      	lsrs	r3, r3, #24
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf6:	0c1b      	lsrs	r3, r3, #16
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c18:	0d1b      	lsrs	r3, r3, #20
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c36:	0bdb      	lsrs	r3, r3, #15
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c48:	0b9b      	lsrs	r3, r3, #14
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5a:	0b5b      	lsrs	r3, r3, #13
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6c:	0b1b      	lsrs	r3, r3, #12
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d163      	bne.n	8002d50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8c:	009a      	lsls	r2, r3, #2
 8002c8e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c92:	4013      	ands	r3, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002c98:	0f92      	lsrs	r2, r2, #30
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca4:	0edb      	lsrs	r3, r3, #27
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb6:	0e1b      	lsrs	r3, r3, #24
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc8:	0d5b      	lsrs	r3, r3, #21
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cec:	0bdb      	lsrs	r3, r3, #15
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7e1b      	ldrb	r3, [r3, #24]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	3302      	adds	r3, #2
 8002d10:	2201      	movs	r2, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d1a:	fb03 f202 	mul.w	r2, r3, r2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	7a1b      	ldrb	r3, [r3, #8]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d3c:	0a52      	lsrs	r2, r2, #9
 8002d3e:	fb03 f202 	mul.w	r2, r3, r2
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4c:	661a      	str	r2, [r3, #96]	; 0x60
 8002d4e:	e031      	b.n	8002db4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d11d      	bne.n	8002d94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	3301      	adds	r3, #1
 8002d74:	029a      	lsls	r2, r3, #10
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	661a      	str	r2, [r3, #96]	; 0x60
 8002d92:	e00f      	b.n	8002db4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a58      	ldr	r2, [pc, #352]	; (8002efc <HAL_SD_GetCardCSD+0x344>)
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e09d      	b.n	8002ef0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db8:	0b9b      	lsrs	r3, r3, #14
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dca:	09db      	lsrs	r3, r3, #7
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	0fdb      	lsrs	r3, r3, #31
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	0f5b      	lsrs	r3, r3, #29
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	0e9b      	lsrs	r3, r3, #26
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	0d9b      	lsrs	r3, r3, #22
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	0d5b      	lsrs	r3, r3, #21
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	0bdb      	lsrs	r3, r3, #15
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	0b9b      	lsrs	r3, r3, #14
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	0b5b      	lsrs	r3, r3, #13
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	0b1b      	lsrs	r3, r3, #12
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	0a9b      	lsrs	r3, r3, #10
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	004005ff 	.word	0x004005ff

08002f00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002f58:	b5b0      	push	{r4, r5, r7, lr}
 8002f5a:	b08e      	sub	sp, #56	; 0x38
 8002f5c:	af04      	add	r7, sp, #16
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d02e      	beq.n	8002fd6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7e:	d106      	bne.n	8002f8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8c:	e029      	b.n	8002fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f94:	d10a      	bne.n	8002fac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fabc 	bl	8003514 <SD_WideBus_Enable>
 8002f9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
 8002faa:	e01a      	b.n	8002fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 faf9 	bl	80035aa <SD_WideBus_Disable>
 8002fb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fc6:	e00c      	b.n	8002fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fd4:	e005      	b.n	8002fe2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003000:	e01f      	b.n	8003042 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681d      	ldr	r5, [r3, #0]
 8003028:	466c      	mov	r4, sp
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303c:	4628      	mov	r0, r5
 800303e:	f000 fe93 	bl	8003d68 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800304a:	4618      	mov	r0, r3
 800304c:	f000 ff56 	bl	8003efc <SDMMC_CmdBlockLength>
 8003050:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00c      	beq.n	8003072 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_SD_ConfigWideBusOperation+0x130>)
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800307a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800307e:	4618      	mov	r0, r3
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bdb0      	pop	{r4, r5, r7, pc}
 8003086:	bf00      	nop
 8003088:	004005ff 	.word	0x004005ff

0800308c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa10 	bl	80034c4 <SD_SendStatus>
 80030a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0a5b      	lsrs	r3, r3, #9
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80030c2:	693b      	ldr	r3, [r7, #16]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	2b82      	cmp	r3, #130	; 0x82
 800310a:	d111      	bne.n	8003130 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 ff9d 	bl	8004050 <SDMMC_CmdStopTransfer>
 8003116:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff fd3a 	bl	8002ba4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0208 	bic.w	r2, r2, #8
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f240 523a 	movw	r2, #1338	; 0x53a
 8003148:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f001 fbf9 	bl	8004950 <HAL_SD_RxCpltCallback>
#endif
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe fb7a 	bl	8001870 <HAL_DMA_GetError>
 800317c:	4603      	mov	r3, r0
 800317e:	2b02      	cmp	r3, #2
 8003180:	d03e      	beq.n	8003200 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d002      	beq.n	800319e <SD_DMAError+0x36>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d12d      	bne.n	80031fa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a19      	ldr	r2, [pc, #100]	; (8003208 <SD_DMAError+0xa0>)
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff62 	bl	800308c <HAL_SD_GetCardState>
 80031c8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d002      	beq.n	80031d6 <SD_DMAError+0x6e>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10a      	bne.n	80031ec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 ff38 	bl	8004050 <SDMMC_CmdStopTransfer>
 80031e0:	4602      	mov	r2, r0
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	431a      	orrs	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f7ff fcd2 	bl	8002ba4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	004005ff 	.word	0x004005ff

0800320c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800320c:	b5b0      	push	{r4, r5, r7, lr}
 800320e:	b094      	sub	sp, #80	; 0x50
 8003210:	af04      	add	r7, sp, #16
 8003212:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003214:	2301      	movs	r3, #1
 8003216:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fde9 	bl	8003df4 <SDIO_GetPowerState>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800322c:	e0b8      	b.n	80033a0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	2b03      	cmp	r3, #3
 8003234:	d02f      	beq.n	8003296 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f001 f812 	bl	8004264 <SDMMC_CmdSendCID>
 8003240:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <SD_InitCard+0x40>
    {
      return errorstate;
 8003248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324a:	e0a9      	b.n	80033a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fe13 	bl	8003e7e <SDIO_GetResponse>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2104      	movs	r1, #4
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fe0a 	bl	8003e7e <SDIO_GetResponse>
 800326a:	4602      	mov	r2, r0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2108      	movs	r1, #8
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fe01 	bl	8003e7e <SDIO_GetResponse>
 800327c:	4602      	mov	r2, r0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	210c      	movs	r1, #12
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fdf8 	bl	8003e7e <SDIO_GetResponse>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	2b03      	cmp	r3, #3
 800329c:	d00d      	beq.n	80032ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f107 020e 	add.w	r2, r7, #14
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f001 f818 	bl	80042de <SDMMC_CmdSetRelAdd>
 80032ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80032b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <SD_InitCard+0xae>
    {
      return errorstate;
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	e072      	b.n	80033a0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d036      	beq.n	8003330 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 ffe2 	bl	80042a0 <SDMMC_CmdSendCSD>
 80032dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e6:	e05b      	b.n	80033a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fdc5 	bl	8003e7e <SDIO_GetResponse>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2104      	movs	r1, #4
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fdbc 	bl	8003e7e <SDIO_GetResponse>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2108      	movs	r1, #8
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fdb3 	bl	8003e7e <SDIO_GetResponse>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	210c      	movs	r1, #12
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fdaa 	bl	8003e7e <SDIO_GetResponse>
 800332a:	4602      	mov	r2, r0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2104      	movs	r1, #4
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fda1 	bl	8003e7e <SDIO_GetResponse>
 800333c:	4603      	mov	r3, r0
 800333e:	0d1a      	lsrs	r2, r3, #20
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003344:	f107 0310 	add.w	r3, r7, #16
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fc34 	bl	8002bb8 <HAL_SD_GetCardCSD>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003356:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800335a:	e021      	b.n	80033a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	2200      	movs	r2, #0
 8003368:	461c      	mov	r4, r3
 800336a:	4615      	mov	r5, r2
 800336c:	4622      	mov	r2, r4
 800336e:	462b      	mov	r3, r5
 8003370:	4608      	mov	r0, r1
 8003372:	f000 fe8f 	bl	8004094 <SDMMC_CmdSelDesel>
 8003376:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <SD_InitCard+0x176>
  {
    return errorstate;
 800337e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003380:	e00e      	b.n	80033a0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681d      	ldr	r5, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	466c      	mov	r4, sp
 800338a:	f103 0210 	add.w	r2, r3, #16
 800338e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003394:	3304      	adds	r3, #4
 8003396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003398:	4628      	mov	r0, r5
 800339a:	f000 fce5 	bl	8003d68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3740      	adds	r7, #64	; 0x40
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bdb0      	pop	{r4, r5, r7, pc}

080033a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fe8a 	bl	80040da <SDMMC_CmdGoIdleState>
 80033c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	e072      	b.n	80034b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fe9d 	bl	8004116 <SDMMC_CmdOperCond>
 80033dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fe73 	bl	80040da <SDMMC_CmdGoIdleState>
 80033f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <SD_PowerON+0x5e>
    {
      return errorstate;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	e05b      	b.n	80034b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340a:	2b01      	cmp	r3, #1
 800340c:	d137      	bne.n	800347e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fe9d 	bl	8004154 <SDMMC_CmdAppCommand>
 800341a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d02d      	beq.n	800347e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003422:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003426:	e047      	b.n	80034b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fe90 	bl	8004154 <SDMMC_CmdAppCommand>
 8003434:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <SD_PowerON+0x98>
    {
      return errorstate;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	e03b      	b.n	80034b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	491e      	ldr	r1, [pc, #120]	; (80034c0 <SD_PowerON+0x118>)
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fea6 	bl	8004198 <SDMMC_CmdAppOperCommand>
 800344c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003458:	e02e      	b.n	80034b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd0c 	bl	8003e7e <SDIO_GetResponse>
 8003466:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	0fdb      	lsrs	r3, r3, #31
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <SD_PowerON+0xcc>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <SD_PowerON+0xce>
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]

    count++;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	3301      	adds	r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003484:	4293      	cmp	r3, r2
 8003486:	d802      	bhi.n	800348e <SD_PowerON+0xe6>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0cc      	beq.n	8003428 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003494:	4293      	cmp	r3, r2
 8003496:	d902      	bls.n	800349e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800349c:	e00c      	b.n	80034b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
 80034ae:	e002      	b.n	80034b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	c1100000 	.word	0xc1100000

080034c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80034d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034d8:	e018      	b.n	800350c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 ff1a 	bl	8004320 <SDMMC_CmdSendStatus>
 80034ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	e009      	b.n	800350c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fcbd 	bl	8003e7e <SDIO_GetResponse>
 8003504:	4602      	mov	r2, r0
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fca7 	bl	8003e7e <SDIO_GetResponse>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800353a:	d102      	bne.n	8003542 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800353c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003540:	e02f      	b.n	80035a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f879 	bl	8003640 <SD_FindSCR>
 800354e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	e023      	b.n	80035a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01c      	beq.n	800359e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 fdef 	bl	8004154 <SDMMC_CmdAppCommand>
 8003576:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	e00f      	b.n	80035a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2102      	movs	r1, #2
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fe28 	bl	80041de <SDMMC_CmdBusWidth>
 800358e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	e003      	b.n	80035a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800359a:	2300      	movs	r3, #0
 800359c:	e001      	b.n	80035a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800359e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fc5c 	bl	8003e7e <SDIO_GetResponse>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035d0:	d102      	bne.n	80035d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80035d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035d6:	e02f      	b.n	8003638 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f82e 	bl	8003640 <SD_FindSCR>
 80035e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	e023      	b.n	8003638 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01c      	beq.n	8003634 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 fda4 	bl	8004154 <SDMMC_CmdAppCommand>
 800360c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	e00f      	b.n	8003638 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fddd 	bl	80041de <SDMMC_CmdBusWidth>
 8003624:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	e003      	b.n	8003638 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003630:	2300      	movs	r3, #0
 8003632:	e001      	b.n	8003638 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003634:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b08f      	sub	sp, #60	; 0x3c
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800364a:	f7fd fd3f 	bl	80010cc <HAL_GetTick>
 800364e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2108      	movs	r1, #8
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fc48 	bl	8003efc <SDMMC_CmdBlockLength>
 800366c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	e0b2      	b.n	80037de <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 fd65 	bl	8004154 <SDMMC_CmdAppCommand>
 800368a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	e0a3      	b.n	80037de <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800369c:	2308      	movs	r3, #8
 800369e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80036a0:	2330      	movs	r3, #48	; 0x30
 80036a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80036a4:	2302      	movs	r3, #2
 80036a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fbf2 	bl	8003ea4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fdac 	bl	8004222 <SDMMC_CmdSendSCR>
 80036ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02a      	beq.n	8003728 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	e083      	b.n	80037de <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00f      	beq.n	8003704 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	f107 0208 	add.w	r2, r7, #8
 80036f0:	18d4      	adds	r4, r2, r3
 80036f2:	4608      	mov	r0, r1
 80036f4:	f000 fb63 	bl	8003dbe <SDIO_ReadFIFO>
 80036f8:	4603      	mov	r3, r0
 80036fa:	6023      	str	r3, [r4, #0]
      index++;
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fe:	3301      	adds	r3, #1
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
 8003702:	e006      	b.n	8003712 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d012      	beq.n	8003738 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003712:	f7fd fcdb 	bl	80010cc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d102      	bne.n	8003728 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003722:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003726:	e05a      	b.n	80037de <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0cf      	beq.n	80036d6 <SD_FindSCR+0x96>
 8003736:	e000      	b.n	800373a <SD_FindSCR+0xfa>
      break;
 8003738:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2208      	movs	r2, #8
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003750:	2308      	movs	r3, #8
 8003752:	e044      	b.n	80037de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2202      	movs	r2, #2
 8003768:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800376a:	2302      	movs	r3, #2
 800376c:	e037      	b.n	80037de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2220      	movs	r2, #32
 8003782:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003784:	2320      	movs	r3, #32
 8003786:	e02a      	b.n	80037de <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003790:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	061a      	lsls	r2, r3, #24
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800379e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80037a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0e1b      	lsrs	r3, r3, #24
 80037ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	601a      	str	r2, [r3, #0]
    scr++;
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	3304      	adds	r3, #4
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	061a      	lsls	r2, r3, #24
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0e1b      	lsrs	r3, r3, #24
 80037d6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	373c      	adds	r7, #60	; 0x3c
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}

080037e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e03f      	b.n	8003878 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fd faad 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2224      	movs	r2, #36	; 0x24
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003828:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f828 	bl	8003880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800385e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b0c0      	sub	sp, #256	; 0x100
 8003886:	af00      	add	r7, sp, #0
 8003888:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	ea40 0301 	orr.w	r3, r0, r1
 80038a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	431a      	orrs	r2, r3
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038d8:	f021 010c 	bic.w	r1, r1, #12
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038e6:	430b      	orrs	r3, r1
 80038e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fa:	6999      	ldr	r1, [r3, #24]
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	ea40 0301 	orr.w	r3, r0, r1
 8003906:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b8f      	ldr	r3, [pc, #572]	; (8003b4c <UART_SetConfig+0x2cc>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d005      	beq.n	8003920 <UART_SetConfig+0xa0>
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b8d      	ldr	r3, [pc, #564]	; (8003b50 <UART_SetConfig+0x2d0>)
 800391c:	429a      	cmp	r2, r3
 800391e:	d104      	bne.n	800392a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7fe feb4 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8003924:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003928:	e003      	b.n	8003932 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800392a:	f7fe fe9b 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 800392e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	f040 810c 	bne.w	8003b58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800394a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800394e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	1891      	adds	r1, r2, r2
 8003958:	65b9      	str	r1, [r7, #88]	; 0x58
 800395a:	415b      	adcs	r3, r3
 800395c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800395e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003962:	4621      	mov	r1, r4
 8003964:	eb12 0801 	adds.w	r8, r2, r1
 8003968:	4629      	mov	r1, r5
 800396a:	eb43 0901 	adc.w	r9, r3, r1
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800397e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003982:	4690      	mov	r8, r2
 8003984:	4699      	mov	r9, r3
 8003986:	4623      	mov	r3, r4
 8003988:	eb18 0303 	adds.w	r3, r8, r3
 800398c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003990:	462b      	mov	r3, r5
 8003992:	eb49 0303 	adc.w	r3, r9, r3
 8003996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ae:	460b      	mov	r3, r1
 80039b0:	18db      	adds	r3, r3, r3
 80039b2:	653b      	str	r3, [r7, #80]	; 0x50
 80039b4:	4613      	mov	r3, r2
 80039b6:	eb42 0303 	adc.w	r3, r2, r3
 80039ba:	657b      	str	r3, [r7, #84]	; 0x54
 80039bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039c4:	f7fc fc5c 	bl	8000280 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <UART_SetConfig+0x2d4>)
 80039ce:	fba3 2302 	umull	r2, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	011c      	lsls	r4, r3, #4
 80039d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039e8:	4642      	mov	r2, r8
 80039ea:	464b      	mov	r3, r9
 80039ec:	1891      	adds	r1, r2, r2
 80039ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80039f0:	415b      	adcs	r3, r3
 80039f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039f8:	4641      	mov	r1, r8
 80039fa:	eb12 0a01 	adds.w	sl, r2, r1
 80039fe:	4649      	mov	r1, r9
 8003a00:	eb43 0b01 	adc.w	fp, r3, r1
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a18:	4692      	mov	sl, r2
 8003a1a:	469b      	mov	fp, r3
 8003a1c:	4643      	mov	r3, r8
 8003a1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a26:	464b      	mov	r3, r9
 8003a28:	eb4b 0303 	adc.w	r3, fp, r3
 8003a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a44:	460b      	mov	r3, r1
 8003a46:	18db      	adds	r3, r3, r3
 8003a48:	643b      	str	r3, [r7, #64]	; 0x40
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	eb42 0303 	adc.w	r3, r2, r3
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
 8003a52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a5a:	f7fc fc11 	bl	8000280 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <UART_SetConfig+0x2d4>)
 8003a66:	fba3 2301 	umull	r2, r3, r3, r1
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2264      	movs	r2, #100	; 0x64
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	1acb      	subs	r3, r1, r3
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <UART_SetConfig+0x2d4>)
 8003a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a88:	441c      	add	r4, r3
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aac:	4641      	mov	r1, r8
 8003aae:	1851      	adds	r1, r2, r1
 8003ab0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	414b      	adcs	r3, r1
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	00cb      	lsls	r3, r1, #3
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ace:	4651      	mov	r1, sl
 8003ad0:	00ca      	lsls	r2, r1, #3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003af8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003afc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b00:	460b      	mov	r3, r1
 8003b02:	18db      	adds	r3, r3, r3
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b06:	4613      	mov	r3, r2
 8003b08:	eb42 0303 	adc.w	r3, r2, r3
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b16:	f7fc fbb3 	bl	8000280 <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <UART_SetConfig+0x2d4>)
 8003b20:	fba3 1302 	umull	r1, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	2164      	movs	r1, #100	; 0x64
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	3332      	adds	r3, #50	; 0x32
 8003b32:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <UART_SetConfig+0x2d4>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	f003 0207 	and.w	r2, r3, #7
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4422      	add	r2, r4
 8003b46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b48:	e106      	b.n	8003d58 <UART_SetConfig+0x4d8>
 8003b4a:	bf00      	nop
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	40011400 	.word	0x40011400
 8003b54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b6a:	4642      	mov	r2, r8
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	1891      	adds	r1, r2, r2
 8003b70:	6239      	str	r1, [r7, #32]
 8003b72:	415b      	adcs	r3, r3
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	1854      	adds	r4, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb43 0501 	adc.w	r5, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	eb45 0303 	adc.w	r3, r5, r3
 8003ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	008b      	lsls	r3, r1, #2
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	008a      	lsls	r2, r1, #2
 8003bd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bd8:	f7fc fb52 	bl	8000280 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4b60      	ldr	r3, [pc, #384]	; (8003d64 <UART_SetConfig+0x4e4>)
 8003be2:	fba3 2302 	umull	r2, r3, r3, r2
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	011c      	lsls	r4, r3, #4
 8003bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	1891      	adds	r1, r2, r2
 8003c02:	61b9      	str	r1, [r7, #24]
 8003c04:	415b      	adcs	r3, r3
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	1851      	adds	r1, r2, r1
 8003c10:	6139      	str	r1, [r7, #16]
 8003c12:	4649      	mov	r1, r9
 8003c14:	414b      	adcs	r3, r1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c24:	4659      	mov	r1, fp
 8003c26:	00cb      	lsls	r3, r1, #3
 8003c28:	4651      	mov	r1, sl
 8003c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c2e:	4651      	mov	r1, sl
 8003c30:	00ca      	lsls	r2, r1, #3
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	4642      	mov	r2, r8
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c40:	464b      	mov	r3, r9
 8003c42:	460a      	mov	r2, r1
 8003c44:	eb42 0303 	adc.w	r3, r2, r3
 8003c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c64:	4649      	mov	r1, r9
 8003c66:	008b      	lsls	r3, r1, #2
 8003c68:	4641      	mov	r1, r8
 8003c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c6e:	4641      	mov	r1, r8
 8003c70:	008a      	lsls	r2, r1, #2
 8003c72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c76:	f7fc fb03 	bl	8000280 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <UART_SetConfig+0x4e4>)
 8003c82:	fba3 2301 	umull	r2, r3, r3, r1
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	1acb      	subs	r3, r1, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a33      	ldr	r2, [pc, #204]	; (8003d64 <UART_SetConfig+0x4e4>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca0:	441c      	add	r4, r3
 8003ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	673b      	str	r3, [r7, #112]	; 0x70
 8003caa:	677a      	str	r2, [r7, #116]	; 0x74
 8003cac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	1891      	adds	r1, r2, r2
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	415b      	adcs	r3, r3
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	1851      	adds	r1, r2, r1
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cd8:	4659      	mov	r1, fp
 8003cda:	00cb      	lsls	r3, r1, #3
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	00ca      	lsls	r2, r1, #3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	4642      	mov	r2, r8
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	460a      	mov	r2, r1
 8003cf6:	eb42 0303 	adc.w	r3, r2, r3
 8003cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	663b      	str	r3, [r7, #96]	; 0x60
 8003d06:	667a      	str	r2, [r7, #100]	; 0x64
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d14:	4649      	mov	r1, r9
 8003d16:	008b      	lsls	r3, r1, #2
 8003d18:	4641      	mov	r1, r8
 8003d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1e:	4641      	mov	r1, r8
 8003d20:	008a      	lsls	r2, r1, #2
 8003d22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d26:	f7fc faab 	bl	8000280 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <UART_SetConfig+0x4e4>)
 8003d30:	fba3 1302 	umull	r1, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	2164      	movs	r1, #100	; 0x64
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	3332      	adds	r3, #50	; 0x32
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <UART_SetConfig+0x4e4>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4422      	add	r2, r4
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d64:	51eb851f 	.word	0x51eb851f

08003d68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003d68:	b084      	sub	sp, #16
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	f107 001c 	add.w	r0, r7, #28
 8003d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003d7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003d80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003d82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003d86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003d8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003d8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003d92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003da2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	b004      	add	sp, #16
 8003dbc:	4770      	bx	lr

08003dbe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0303 	and.w	r3, r3, #3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003e34:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003e3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003e4a:	f023 030f 	bic.w	r3, r3, #15
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	b2db      	uxtb	r3, r3
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
}  
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003eca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003ed0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003ed6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0

}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f0e:	2340      	movs	r3, #64	; 0x40
 8003f10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff74 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	2110      	movs	r1, #16
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa18 	bl	8004364 <SDMMC_GetCmdResp1>
 8003f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f36:	69fb      	ldr	r3, [r7, #28]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003f4e:	2311      	movs	r3, #17
 8003f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f60:	f107 0308 	add.w	r3, r7, #8
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff52 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	2111      	movs	r1, #17
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9f6 	bl	8004364 <SDMMC_GetCmdResp1>
 8003f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003f92:	2312      	movs	r3, #18
 8003f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f96:	2340      	movs	r3, #64	; 0x40
 8003f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fa4:	f107 0308 	add.w	r3, r7, #8
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff30 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	2112      	movs	r1, #18
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f9d4 	bl	8004364 <SDMMC_GetCmdResp1>
 8003fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003fd6:	2318      	movs	r3, #24
 8003fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff0e 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	2118      	movs	r1, #24
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f9b2 	bl	8004364 <SDMMC_GetCmdResp1>
 8004000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004002:	69fb      	ldr	r3, [r7, #28]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800401a:	2319      	movs	r3, #25
 800401c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800401e:	2340      	movs	r3, #64	; 0x40
 8004020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800402c:	f107 0308 	add.w	r3, r7, #8
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff feec 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	2119      	movs	r1, #25
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f990 	bl	8004364 <SDMMC_GetCmdResp1>
 8004044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004046:	69fb      	ldr	r3, [r7, #28]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800405c:	230c      	movs	r3, #12
 800405e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004060:	2340      	movs	r3, #64	; 0x40
 8004062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800406c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fecb 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800407a:	4a05      	ldr	r2, [pc, #20]	; (8004090 <SDMMC_CmdStopTransfer+0x40>)
 800407c:	210c      	movs	r1, #12
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f970 	bl	8004364 <SDMMC_GetCmdResp1>
 8004084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004086:	69fb      	ldr	r3, [r7, #28]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	05f5e100 	.word	0x05f5e100

08004094 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80040a4:	2307      	movs	r3, #7
 80040a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040b6:	f107 0310 	add.w	r3, r7, #16
 80040ba:	4619      	mov	r1, r3
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff fea7 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	2107      	movs	r1, #7
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f94b 	bl	8004364 <SDMMC_GetCmdResp1>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b088      	sub	sp, #32
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040f8:	f107 0308 	add.w	r3, r7, #8
 80040fc:	4619      	mov	r1, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fe86 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb65 	bl	80047d4 <SDMMC_GetCmdError>
 800410a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800410c:	69fb      	ldr	r3, [r7, #28]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b088      	sub	sp, #32
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800411e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004124:	2308      	movs	r3, #8
 8004126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004134:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff fe67 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 faf8 	bl	8004738 <SDMMC_GetCmdResp7>
 8004148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800414a:	69fb      	ldr	r3, [r7, #28]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004162:	2337      	movs	r3, #55	; 0x37
 8004164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004166:	2340      	movs	r3, #64	; 0x40
 8004168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800416e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004172:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004174:	f107 0308 	add.w	r3, r7, #8
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fe48 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004180:	f241 3288 	movw	r2, #5000	; 0x1388
 8004184:	2137      	movs	r1, #55	; 0x37
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8ec 	bl	8004364 <SDMMC_GetCmdResp1>
 800418c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800418e:	69fb      	ldr	r3, [r7, #28]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80041ae:	2329      	movs	r3, #41	; 0x29
 80041b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041b2:	2340      	movs	r3, #64	; 0x40
 80041b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041c0:	f107 0308 	add.w	r3, r7, #8
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fe22 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f9ff 	bl	80045d0 <SDMMC_GetCmdResp3>
 80041d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041d4:	69fb      	ldr	r3, [r7, #28]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b088      	sub	sp, #32
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80041ec:	2306      	movs	r3, #6
 80041ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fe03 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	2106      	movs	r1, #6
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f8a7 	bl	8004364 <SDMMC_GetCmdResp1>
 8004216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004218:	69fb      	ldr	r3, [r7, #28]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800422e:	2333      	movs	r3, #51	; 0x33
 8004230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004232:	2340      	movs	r3, #64	; 0x40
 8004234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800423a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800423e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004240:	f107 0308 	add.w	r3, r7, #8
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fde2 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	2133      	movs	r1, #51	; 0x33
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f886 	bl	8004364 <SDMMC_GetCmdResp1>
 8004258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800425a:	69fb      	ldr	r3, [r7, #28]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004270:	2302      	movs	r3, #2
 8004272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004274:	23c0      	movs	r3, #192	; 0xc0
 8004276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800427c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fdc1 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f956 	bl	8004540 <SDMMC_GetCmdResp2>
 8004294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004296:	69fb      	ldr	r3, [r7, #28]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80042ae:	2309      	movs	r3, #9
 80042b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80042b2:	23c0      	movs	r3, #192	; 0xc0
 80042b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042c0:	f107 0308 	add.w	r3, r7, #8
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff fda2 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f937 	bl	8004540 <SDMMC_GetCmdResp2>
 80042d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042d4:	69fb      	ldr	r3, [r7, #28]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b088      	sub	sp, #32
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80042ec:	2303      	movs	r3, #3
 80042ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042f0:	2340      	movs	r3, #64	; 0x40
 80042f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fd83 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	2103      	movs	r1, #3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f99c 	bl	800464c <SDMMC_GetCmdResp6>
 8004314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004316:	69fb      	ldr	r3, [r7, #28]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800432e:	230d      	movs	r3, #13
 8004330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004332:	2340      	movs	r3, #64	; 0x40
 8004334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800433a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4619      	mov	r1, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fd62 	bl	8003e10 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	210d      	movs	r1, #13
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f806 	bl	8004364 <SDMMC_GetCmdResp1>
 8004358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800435a:	69fb      	ldr	r3, [r7, #28]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	460b      	mov	r3, r1
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <SDMMC_GetCmdResp1+0x1d0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a70      	ldr	r2, [pc, #448]	; (8004538 <SDMMC_GetCmdResp1+0x1d4>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	0a5a      	lsrs	r2, r3, #9
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	61fa      	str	r2, [r7, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004394:	e0c9      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ef      	beq.n	8004386 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ea      	bne.n	8004386 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2204      	movs	r2, #4
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043c2:	2304      	movs	r3, #4
 80043c4:	e0b1      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0a6      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	22c5      	movs	r2, #197	; 0xc5
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fd3e 	bl	8003e64 <SDIO_GetCommandResponse>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d001      	beq.n	80043f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e099      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80043f6:	2100      	movs	r1, #0
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fd40 	bl	8003e7e <SDIO_GetResponse>
 80043fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4b4e      	ldr	r3, [pc, #312]	; (800453c <SDMMC_GetCmdResp1+0x1d8>)
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800440a:	2300      	movs	r3, #0
 800440c:	e08d      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	da02      	bge.n	800441a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004418:	e087      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004424:	2340      	movs	r3, #64	; 0x40
 8004426:	e080      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	e079      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004444:	e071      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004454:	e069      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004464:	e061      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004474:	e059      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004484:	e051      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004494:	e049      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80044a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044a4:	e041      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80044b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b4:	e039      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80044c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c4:	e031      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80044d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044d4:	e029      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80044e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044e4:	e021      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80044f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044f4:	e019      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004504:	e011      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004514:	e009      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004520:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004524:	e001      	b.n	800452a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000000 	.word	0x20000000
 8004538:	10624dd3 	.word	0x10624dd3
 800453c:	fdffe008 	.word	0xfdffe008

08004540 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004548:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <SDMMC_GetCmdResp2+0x88>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <SDMMC_GetCmdResp2+0x8c>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0a5b      	lsrs	r3, r3, #9
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	60fa      	str	r2, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800456c:	e026      	b.n	80045bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ef      	beq.n	800455e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ea      	bne.n	800455e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2204      	movs	r2, #4
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800459a:	2304      	movs	r3, #4
 800459c:	e00e      	b.n	80045bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e003      	b.n	80045bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	22c5      	movs	r2, #197	; 0xc5
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	20000000 	.word	0x20000000
 80045cc:	10624dd3 	.word	0x10624dd3

080045d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <SDMMC_GetCmdResp3+0x74>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <SDMMC_GetCmdResp3+0x78>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0a5b      	lsrs	r3, r3, #9
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	fb02 f303 	mul.w	r3, r2, r3
 80045ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1e5a      	subs	r2, r3, #1
 80045f2:	60fa      	str	r2, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045fc:	e01b      	b.n	8004636 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ef      	beq.n	80045ee <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ea      	bne.n	80045ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2204      	movs	r2, #4
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800462a:	2304      	movs	r3, #4
 800462c:	e003      	b.n	8004636 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	22c5      	movs	r2, #197	; 0xc5
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000000 	.word	0x20000000
 8004648:	10624dd3 	.word	0x10624dd3

0800464c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	460b      	mov	r3, r1
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <SDMMC_GetCmdResp6+0xe4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a35      	ldr	r2, [pc, #212]	; (8004734 <SDMMC_GetCmdResp6+0xe8>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	0a5b      	lsrs	r3, r3, #9
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	61fa      	str	r2, [r7, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800467a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800467e:	e052      	b.n	8004726 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ef      	beq.n	8004670 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ea      	bne.n	8004670 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2204      	movs	r2, #4
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80046ac:	2304      	movs	r3, #4
 80046ae:	e03a      	b.n	8004726 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d004      	beq.n	80046c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e02f      	b.n	8004726 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fbcc 	bl	8003e64 <SDIO_GetCommandResponse>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	7afb      	ldrb	r3, [r7, #11]
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d001      	beq.n	80046da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e025      	b.n	8004726 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	22c5      	movs	r2, #197	; 0xc5
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80046e0:	2100      	movs	r1, #0
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff fbcb 	bl	8003e7e <SDIO_GetResponse>
 80046e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80046fe:	2300      	movs	r3, #0
 8004700:	e011      	b.n	8004726 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800470c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004710:	e009      	b.n	8004726 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800471c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004720:	e001      	b.n	8004726 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000000 	.word	0x20000000
 8004734:	10624dd3 	.word	0x10624dd3

08004738 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004740:	4b22      	ldr	r3, [pc, #136]	; (80047cc <SDMMC_GetCmdResp7+0x94>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <SDMMC_GetCmdResp7+0x98>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0a5b      	lsrs	r3, r3, #9
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	60fa      	str	r2, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004764:	e02c      	b.n	80047c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0ef      	beq.n	8004756 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ea      	bne.n	8004756 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2204      	movs	r2, #4
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004792:	2304      	movs	r3, #4
 8004794:	e014      	b.n	80047c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e009      	b.n	80047c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80047be:	2300      	movs	r3, #0
  
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	20000000 	.word	0x20000000
 80047d0:	10624dd3 	.word	0x10624dd3

080047d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <SDMMC_GetCmdError+0x50>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a11      	ldr	r2, [pc, #68]	; (8004828 <SDMMC_GetCmdError+0x54>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	0a5b      	lsrs	r3, r3, #9
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	60fa      	str	r2, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004800:	e009      	b.n	8004816 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f1      	beq.n	80047f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	22c5      	movs	r2, #197	; 0xc5
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000000 	.word	0x20000000
 8004828:	10624dd3 	.word	0x10624dd3

0800482c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004830:	4904      	ldr	r1, [pc, #16]	; (8004844 <MX_FATFS_Init+0x18>)
 8004832:	4805      	ldr	r0, [pc, #20]	; (8004848 <MX_FATFS_Init+0x1c>)
 8004834:	f002 fc72 	bl	800711c <FATFS_LinkDriver>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <MX_FATFS_Init+0x20>)
 800483e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004840:	bf00      	nop
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000218 	.word	0x20000218
 8004848:	08008294 	.word	0x08008294
 800484c:	20000214 	.word	0x20000214

08004850 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004854:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800486a:	f000 f87b 	bl	8004964 <BSP_SD_IsDetected>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e012      	b.n	800489e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004878:	480b      	ldr	r0, [pc, #44]	; (80048a8 <BSP_SD_Init+0x48>)
 800487a:	f7fd ff1b 	bl	80026b4 <HAL_SD_Init>
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800488c:	4806      	ldr	r0, [pc, #24]	; (80048a8 <BSP_SD_Init+0x48>)
 800488e:	f7fe fb63 	bl	8002f58 <HAL_SD_ConfigWideBusOperation>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800489c:	79fb      	ldrb	r3, [r7, #7]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000084 	.word	0x20000084

080048ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	4806      	ldr	r0, [pc, #24]	; (80048dc <BSP_SD_ReadBlocks_DMA+0x30>)
 80048c4:	f7fd ffa6 	bl	8002814 <HAL_SD_ReadBlocks_DMA>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000084 	.word	0x20000084

080048e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4806      	ldr	r0, [pc, #24]	; (8004910 <BSP_SD_WriteBlocks_DMA+0x30>)
 80048f8:	f7fe f86e 	bl	80029d8 <HAL_SD_WriteBlocks_DMA>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004906:	7dfb      	ldrb	r3, [r7, #23]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000084 	.word	0x20000084

08004914 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004918:	4805      	ldr	r0, [pc, #20]	; (8004930 <BSP_SD_GetCardState+0x1c>)
 800491a:	f7fe fbb7 	bl	800308c <HAL_SD_GetCardState>
 800491e:	4603      	mov	r3, r0
 8004920:	2b04      	cmp	r3, #4
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
}
 800492a:	4618      	mov	r0, r3
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000084 	.word	0x20000084

08004934 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4803      	ldr	r0, [pc, #12]	; (800494c <BSP_SD_GetCardInfo+0x18>)
 8004940:	f7fe fade 	bl	8002f00 <HAL_SD_GetCardInfo>
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20000084 	.word	0x20000084

08004950 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004958:	f000 f97a 	bl	8004c50 <BSP_SD_ReadCpltCallback>
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800496a:	2301      	movs	r3, #1
 800496c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	b2db      	uxtb	r3, r3
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004986:	f7fc fba1 	bl	80010cc <HAL_GetTick>
 800498a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800498c:	e006      	b.n	800499c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800498e:	f7ff ffc1 	bl	8004914 <BSP_SD_GetCardState>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004998:	2300      	movs	r3, #0
 800499a:	e009      	b.n	80049b0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800499c:	f7fc fb96 	bl	80010cc <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d8f0      	bhi.n	800498e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <SD_CheckStatus+0x38>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80049c8:	f7ff ffa4 	bl	8004914 <BSP_SD_GetCardState>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <SD_CheckStatus+0x38>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <SD_CheckStatus+0x38>)
 80049e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80049e2:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <SD_CheckStatus+0x38>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b2db      	uxtb	r3, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000009 	.word	0x20000009

080049f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80049fe:	f7ff ff2f 	bl	8004860 <BSP_SD_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d107      	bne.n	8004a18 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff ffd4 	bl	80049b8 <SD_CheckStatus>
 8004a10:	4603      	mov	r3, r0
 8004a12:	461a      	mov	r2, r3
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <SD_initialize+0x34>)
 8004a16:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <SD_initialize+0x34>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	b2db      	uxtb	r3, r3
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000009 	.word	0x20000009

08004a2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ffbd 	bl	80049b8 <SD_CheckStatus>
 8004a3e:	4603      	mov	r3, r0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004a5c:	f247 5030 	movw	r0, #30000	; 0x7530
 8004a60:	f7ff ff8d 	bl	800497e <SD_CheckStatusWithTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da01      	bge.n	8004a6e <SD_read+0x26>
  {
    return res;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	e03b      	b.n	8004ae6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	68b8      	ldr	r0, [r7, #8]
 8004a74:	f7ff ff1a 	bl	80048ac <BSP_SD_ReadBlocks_DMA>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d132      	bne.n	8004ae4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <SD_read+0xa8>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004a84:	f7fc fb22 	bl	80010cc <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004a8a:	bf00      	nop
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <SD_read+0xa8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <SD_read+0x5e>
 8004a94:	f7fc fb1a 	bl	80010cc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d9f2      	bls.n	8004a8c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <SD_read+0xa8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
 8004ab2:	e017      	b.n	8004ae4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <SD_read+0xa8>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004aba:	f7fc fb07 	bl	80010cc <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ac0:	e007      	b.n	8004ad2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004ac2:	f7ff ff27 	bl	8004914 <BSP_SD_GetCardState>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <SD_read+0x8a>
          {
            res = RES_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004ad0:	e008      	b.n	8004ae4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ad2:	f7fc fafb 	bl	80010cc <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f247 522f 	movw	r2, #29999	; 0x752f
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d9ee      	bls.n	8004ac2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000220 	.word	0x20000220

08004af4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <SD_write+0xa8>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004b0e:	f247 5030 	movw	r0, #30000	; 0x7530
 8004b12:	f7ff ff34 	bl	800497e <SD_CheckStatusWithTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da01      	bge.n	8004b20 <SD_write+0x2c>
  {
    return res;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	e038      	b.n	8004b92 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68b8      	ldr	r0, [r7, #8]
 8004b26:	f7ff fedb 	bl	80048e0 <BSP_SD_WriteBlocks_DMA>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d12f      	bne.n	8004b90 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004b30:	f7fc facc 	bl	80010cc <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004b36:	bf00      	nop
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <SD_write+0xa8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d108      	bne.n	8004b52 <SD_write+0x5e>
 8004b40:	f7fc fac4 	bl	80010cc <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d9f2      	bls.n	8004b38 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <SD_write+0xa8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
 8004b5e:	e017      	b.n	8004b90 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004b60:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <SD_write+0xa8>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004b66:	f7fc fab1 	bl	80010cc <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004b6c:	e007      	b.n	8004b7e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004b6e:	f7ff fed1 	bl	8004914 <BSP_SD_GetCardState>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <SD_write+0x8a>
          {
            res = RES_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	75fb      	strb	r3, [r7, #23]
            break;
 8004b7c:	e008      	b.n	8004b90 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004b7e:	f7fc faa5 	bl	80010cc <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f247 522f 	movw	r2, #29999	; 0x752f
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d9ee      	bls.n	8004b6e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	2000021c 	.word	0x2000021c

08004ba0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	603a      	str	r2, [r7, #0]
 8004baa:	71fb      	strb	r3, [r7, #7]
 8004bac:	460b      	mov	r3, r1
 8004bae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004bb6:	4b25      	ldr	r3, [pc, #148]	; (8004c4c <SD_ioctl+0xac>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <SD_ioctl+0x28>
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e03c      	b.n	8004c42 <SD_ioctl+0xa2>

  switch (cmd)
 8004bc8:	79bb      	ldrb	r3, [r7, #6]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d834      	bhi.n	8004c38 <SD_ioctl+0x98>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <SD_ioctl+0x34>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004bed 	.word	0x08004bed
 8004bdc:	08004c05 	.word	0x08004c05
 8004be0:	08004c1f 	.word	0x08004c1f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004bea:	e028      	b.n	8004c3e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004bec:	f107 030c 	add.w	r3, r7, #12
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fe9f 	bl	8004934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004c02:	e01c      	b.n	8004c3e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004c04:	f107 030c 	add.w	r3, r7, #12
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fe93 	bl	8004934 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004c1c:	e00f      	b.n	8004c3e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fe86 	bl	8004934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	0a5a      	lsrs	r2, r3, #9
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004c36:	e002      	b.n	8004c3e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004c38:	2304      	movs	r3, #4
 8004c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3730      	adds	r7, #48	; 0x30
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000009 	.word	0x20000009

08004c50 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004c54:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <BSP_SD_ReadCpltCallback+0x14>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20000220 	.word	0x20000220

08004c68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <disk_status+0x30>)
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	79fa      	ldrb	r2, [r7, #7]
 8004c80:	4905      	ldr	r1, [pc, #20]	; (8004c98 <disk_status+0x30>)
 8004c82:	440a      	add	r2, r1
 8004c84:	7a12      	ldrb	r2, [r2, #8]
 8004c86:	4610      	mov	r0, r2
 8004c88:	4798      	blx	r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	2000024c 	.word	0x2000024c

08004c9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <disk_initialize+0x48>)
 8004cae:	5cd3      	ldrb	r3, [r2, r3]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <disk_initialize+0x48>)
 8004cb8:	2101      	movs	r1, #1
 8004cba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <disk_initialize+0x48>)
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	79fa      	ldrb	r2, [r7, #7]
 8004cca:	4906      	ldr	r1, [pc, #24]	; (8004ce4 <disk_initialize+0x48>)
 8004ccc:	440a      	add	r2, r1
 8004cce:	7a12      	ldrb	r2, [r2, #8]
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4798      	blx	r3
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2000024c 	.word	0x2000024c

08004ce8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	; (8004d24 <disk_read+0x3c>)
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	689c      	ldr	r4, [r3, #8]
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	4a07      	ldr	r2, [pc, #28]	; (8004d24 <disk_read+0x3c>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	7a18      	ldrb	r0, [r3, #8]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	47a0      	blx	r4
 8004d14:	4603      	mov	r3, r0
 8004d16:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	2000024c 	.word	0x2000024c

08004d28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <disk_write+0x3c>)
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68dc      	ldr	r4, [r3, #12]
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <disk_write+0x3c>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	7a18      	ldrb	r0, [r3, #8]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	47a0      	blx	r4
 8004d54:	4603      	mov	r3, r0
 8004d56:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd90      	pop	{r4, r7, pc}
 8004d62:	bf00      	nop
 8004d64:	2000024c 	.word	0x2000024c

08004d68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	603a      	str	r2, [r7, #0]
 8004d72:	71fb      	strb	r3, [r7, #7]
 8004d74:	460b      	mov	r3, r1
 8004d76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <disk_ioctl+0x38>)
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	79fa      	ldrb	r2, [r7, #7]
 8004d86:	4906      	ldr	r1, [pc, #24]	; (8004da0 <disk_ioctl+0x38>)
 8004d88:	440a      	add	r2, r1
 8004d8a:	7a10      	ldrb	r0, [r2, #8]
 8004d8c:	79b9      	ldrb	r1, [r7, #6]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	4798      	blx	r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	2000024c 	.word	0x2000024c

08004da4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3301      	adds	r3, #1
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004db4:	89fb      	ldrh	r3, [r7, #14]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	b21a      	sxth	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b21b      	sxth	r3, r3
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b21b      	sxth	r3, r3
 8004dc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3303      	adds	r3, #3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	3202      	adds	r2, #2
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	3201      	adds	r2, #1
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	887a      	ldrh	r2, [r7, #2]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	887b      	ldrh	r3, [r7, #2]
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	1c53      	adds	r3, r2, #1
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	6179      	str	r1, [r7, #20]
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f1      	bne.n	8004ec2 <mem_cpy+0x1a>
	}
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004eea:	b480      	push	{r7}
 8004eec:	b087      	sub	sp, #28
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	617a      	str	r2, [r7, #20]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f3      	bne.n	8004efa <mem_set+0x10>
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	; 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	61fa      	str	r2, [r7, #28]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	4619      	mov	r1, r3
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	61ba      	str	r2, [r7, #24]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	1acb      	subs	r3, r1, r3
 8004f4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <mem_cmp+0x40>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0eb      	beq.n	8004f38 <mem_cmp+0x18>

	return r;
 8004f60:	697b      	ldr	r3, [r7, #20]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3724      	adds	r7, #36	; 0x24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004f78:	e002      	b.n	8004f80 <chk_chr+0x12>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <chk_chr+0x26>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d1f2      	bne.n	8004f7a <chk_chr+0xc>
	return *str;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	781b      	ldrb	r3, [r3, #0]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e029      	b.n	800500c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <chk_lock+0xb4>)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4413      	add	r3, r2
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01d      	beq.n	8005002 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <chk_lock+0xb4>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	4413      	add	r3, r2
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d116      	bne.n	8005006 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <chk_lock+0xb4>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d10c      	bne.n	8005006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fec:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <chk_lock+0xb4>)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d102      	bne.n	8005006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005000:	e007      	b.n	8005012 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005002:	2301      	movs	r3, #1
 8005004:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3301      	adds	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d9d2      	bls.n	8004fb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d109      	bne.n	800502c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <chk_lock+0x80>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d101      	bne.n	8005028 <chk_lock+0x84>
 8005024:	2300      	movs	r3, #0
 8005026:	e010      	b.n	800504a <chk_lock+0xa6>
 8005028:	2312      	movs	r3, #18
 800502a:	e00e      	b.n	800504a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d108      	bne.n	8005044 <chk_lock+0xa0>
 8005032:	4a09      	ldr	r2, [pc, #36]	; (8005058 <chk_lock+0xb4>)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	4413      	add	r3, r2
 800503a:	330c      	adds	r3, #12
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005042:	d101      	bne.n	8005048 <chk_lock+0xa4>
 8005044:	2310      	movs	r3, #16
 8005046:	e000      	b.n	800504a <chk_lock+0xa6>
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000022c 	.word	0x2000022c

0800505c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	e002      	b.n	800506e <enq_lock+0x12>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3301      	adds	r3, #1
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d806      	bhi.n	8005082 <enq_lock+0x26>
 8005074:	4a09      	ldr	r2, [pc, #36]	; (800509c <enq_lock+0x40>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	4413      	add	r3, r2
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f2      	bne.n	8005068 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b02      	cmp	r3, #2
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	2000022c 	.word	0x2000022c

080050a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e01f      	b.n	80050f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80050b0:	4a41      	ldr	r2, [pc, #260]	; (80051b8 <inc_lock+0x118>)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	4413      	add	r3, r2
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d113      	bne.n	80050ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80050c2:	4a3d      	ldr	r2, [pc, #244]	; (80051b8 <inc_lock+0x118>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d109      	bne.n	80050ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80050d6:	4a38      	ldr	r2, [pc, #224]	; (80051b8 <inc_lock+0x118>)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	4413      	add	r3, r2
 80050de:	3308      	adds	r3, #8
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d006      	beq.n	80050f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d9dc      	bls.n	80050b0 <inc_lock+0x10>
 80050f6:	e000      	b.n	80050fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80050f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d132      	bne.n	8005166 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e002      	b.n	800510c <inc_lock+0x6c>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d806      	bhi.n	8005120 <inc_lock+0x80>
 8005112:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <inc_lock+0x118>)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	4413      	add	r3, r2
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f2      	bne.n	8005106 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d101      	bne.n	800512a <inc_lock+0x8a>
 8005126:	2300      	movs	r3, #0
 8005128:	e040      	b.n	80051ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4922      	ldr	r1, [pc, #136]	; (80051b8 <inc_lock+0x118>)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	440b      	add	r3, r1
 8005136:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	491e      	ldr	r1, [pc, #120]	; (80051b8 <inc_lock+0x118>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	440b      	add	r3, r1
 8005144:	3304      	adds	r3, #4
 8005146:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	491a      	ldr	r1, [pc, #104]	; (80051b8 <inc_lock+0x118>)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	440b      	add	r3, r1
 8005154:	3308      	adds	r3, #8
 8005156:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005158:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <inc_lock+0x118>)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	4413      	add	r3, r2
 8005160:	330c      	adds	r3, #12
 8005162:	2200      	movs	r2, #0
 8005164:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <inc_lock+0xe0>
 800516c:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <inc_lock+0x118>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	4413      	add	r3, r2
 8005174:	330c      	adds	r3, #12
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <inc_lock+0xe0>
 800517c:	2300      	movs	r3, #0
 800517e:	e015      	b.n	80051ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <inc_lock+0xf8>
 8005186:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <inc_lock+0x118>)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	4413      	add	r3, r2
 800518e:	330c      	adds	r3, #12
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	e001      	b.n	800519c <inc_lock+0xfc>
 8005198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800519c:	4906      	ldr	r1, [pc, #24]	; (80051b8 <inc_lock+0x118>)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	440b      	add	r3, r1
 80051a4:	330c      	adds	r3, #12
 80051a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	2000022c 	.word	0x2000022c

080051bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d825      	bhi.n	800521c <dec_lock+0x60>
		n = Files[i].ctr;
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <dec_lock+0x74>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	4413      	add	r3, r2
 80051d8:	330c      	adds	r3, #12
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e4:	d101      	bne.n	80051ea <dec_lock+0x2e>
 80051e6:	2300      	movs	r3, #0
 80051e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80051ea:	89fb      	ldrh	r3, [r7, #14]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <dec_lock+0x3a>
 80051f0:	89fb      	ldrh	r3, [r7, #14]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80051f6:	4a0e      	ldr	r2, [pc, #56]	; (8005230 <dec_lock+0x74>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	4413      	add	r3, r2
 80051fe:	330c      	adds	r3, #12
 8005200:	89fa      	ldrh	r2, [r7, #14]
 8005202:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005204:	89fb      	ldrh	r3, [r7, #14]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d105      	bne.n	8005216 <dec_lock+0x5a>
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <dec_lock+0x74>)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	737b      	strb	r3, [r7, #13]
 800521a:	e001      	b.n	8005220 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800521c:	2302      	movs	r3, #2
 800521e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005220:	7b7b      	ldrb	r3, [r7, #13]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	2000022c 	.word	0x2000022c

08005234 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e010      	b.n	8005264 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005242:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <clear_lock+0x44>)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	4413      	add	r3, r2
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d105      	bne.n	800525e <clear_lock+0x2a>
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <clear_lock+0x44>)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	4413      	add	r3, r2
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3301      	adds	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d9eb      	bls.n	8005242 <clear_lock+0xe>
	}
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	2000022c 	.word	0x2000022c

0800527c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	78db      	ldrb	r3, [r3, #3]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d034      	beq.n	80052fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7858      	ldrb	r0, [r3, #1]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052a0:	2301      	movs	r3, #1
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	f7ff fd40 	bl	8004d28 <disk_write>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	e022      	b.n	80052fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d217      	bcs.n	80052fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	789b      	ldrb	r3, [r3, #2]
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	e010      	b.n	80052f4 <sync_window+0x78>
					wsect += fs->fsize;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7858      	ldrb	r0, [r3, #1]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80052e6:	2301      	movs	r3, #1
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	f7ff fd1d 	bl	8004d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d8eb      	bhi.n	80052d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d01b      	beq.n	8005354 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ffad 	bl	800527c <sync_window>
 8005322:	4603      	mov	r3, r0
 8005324:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d113      	bne.n	8005354 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	7858      	ldrb	r0, [r3, #1]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005336:	2301      	movs	r3, #1
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	f7ff fcd5 	bl	8004ce8 <disk_read>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
 8005348:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ff87 	bl	800527c <sync_window>
 800536e:	4603      	mov	r3, r0
 8005370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d159      	bne.n	800542c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d149      	bne.n	8005414 <sync_fs+0xb4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	791b      	ldrb	r3, [r3, #4]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d145      	bne.n	8005414 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	899b      	ldrh	r3, [r3, #12]
 8005392:	461a      	mov	r2, r3
 8005394:	2100      	movs	r1, #0
 8005396:	f7ff fda8 	bl	8004eea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3334      	adds	r3, #52	; 0x34
 800539e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80053a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fd37 	bl	8004e1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3334      	adds	r3, #52	; 0x34
 80053b0:	4921      	ldr	r1, [pc, #132]	; (8005438 <sync_fs+0xd8>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fd4c 	bl	8004e50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3334      	adds	r3, #52	; 0x34
 80053bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80053c0:	491e      	ldr	r1, [pc, #120]	; (800543c <sync_fs+0xdc>)
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fd44 	bl	8004e50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3334      	adds	r3, #52	; 0x34
 80053cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7ff fd3a 	bl	8004e50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3334      	adds	r3, #52	; 0x34
 80053e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7ff fd30 	bl	8004e50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	7858      	ldrb	r0, [r3, #1]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005408:	2301      	movs	r3, #1
 800540a:	f7ff fc8d 	bl	8004d28 <disk_write>
			fs->fsi_flag = 0;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	2200      	movs	r2, #0
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fca3 	bl	8004d68 <disk_ioctl>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <sync_fs+0xcc>
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	41615252 	.word	0x41615252
 800543c:	61417272 	.word	0x61417272

08005440 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	3b02      	subs	r3, #2
 800544e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	3b02      	subs	r3, #2
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d301      	bcc.n	8005460 <clust2sect+0x20>
 800545c:	2300      	movs	r3, #0
 800545e:	e008      	b.n	8005472 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	895b      	ldrh	r3, [r3, #10]
 8005464:	461a      	mov	r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	fb03 f202 	mul.w	r2, r3, r2
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4413      	add	r3, r2
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d904      	bls.n	800549e <get_fat+0x20>
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d302      	bcc.n	80054a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800549e:	2301      	movs	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e0bb      	b.n	800561c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	f000 8083 	beq.w	80055ba <get_fat+0x13c>
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	f300 80a7 	bgt.w	8005608 <get_fat+0x18a>
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d002      	beq.n	80054c4 <get_fat+0x46>
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d056      	beq.n	8005570 <get_fat+0xf2>
 80054c2:	e0a1      	b.n	8005608 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	899b      	ldrh	r3, [r3, #12]
 80054da:	4619      	mov	r1, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	fbb3 f3f1 	udiv	r3, r3, r1
 80054e2:	4413      	add	r3, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	6938      	ldr	r0, [r7, #16]
 80054e8:	f7ff ff0c 	bl	8005304 <move_window>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 808d 	bne.w	800560e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	60fa      	str	r2, [r7, #12]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	8992      	ldrh	r2, [r2, #12]
 80054fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005502:	fb01 f202 	mul.w	r2, r1, r2
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005510:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	899b      	ldrh	r3, [r3, #12]
 800551a:	4619      	mov	r1, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005522:	4413      	add	r3, r2
 8005524:	4619      	mov	r1, r3
 8005526:	6938      	ldr	r0, [r7, #16]
 8005528:	f7ff feec 	bl	8005304 <move_window>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d16f      	bne.n	8005612 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	899b      	ldrh	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	fbb3 f1f2 	udiv	r1, r3, r2
 800553e:	fb01 f202 	mul.w	r2, r1, r2
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4413      	add	r3, r2
 8005548:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	461a      	mov	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <get_fat+0xe8>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	e002      	b.n	800556c <get_fat+0xee>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	617b      	str	r3, [r7, #20]
			break;
 800556e:	e055      	b.n	800561c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	899b      	ldrh	r3, [r3, #12]
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	4619      	mov	r1, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	fbb3 f3f1 	udiv	r3, r3, r1
 8005584:	4413      	add	r3, r2
 8005586:	4619      	mov	r1, r3
 8005588:	6938      	ldr	r0, [r7, #16]
 800558a:	f7ff febb 	bl	8005304 <move_window>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d140      	bne.n	8005616 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	8992      	ldrh	r2, [r2, #12]
 80055a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80055a6:	fb00 f202 	mul.w	r2, r0, r2
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	440b      	add	r3, r1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fbf8 	bl	8004da4 <ld_word>
 80055b4:	4603      	mov	r3, r0
 80055b6:	617b      	str	r3, [r7, #20]
			break;
 80055b8:	e030      	b.n	800561c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	899b      	ldrh	r3, [r3, #12]
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	4619      	mov	r1, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ce:	4413      	add	r3, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	6938      	ldr	r0, [r7, #16]
 80055d4:	f7ff fe96 	bl	8005304 <move_window>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11d      	bne.n	800561a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	8992      	ldrh	r2, [r2, #12]
 80055ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80055f0:	fb00 f202 	mul.w	r2, r0, r2
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	440b      	add	r3, r1
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fbeb 	bl	8004dd4 <ld_dword>
 80055fe:	4603      	mov	r3, r0
 8005600:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005604:	617b      	str	r3, [r7, #20]
			break;
 8005606:	e009      	b.n	800561c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e006      	b.n	800561c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800560e:	bf00      	nop
 8005610:	e004      	b.n	800561c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800561a:	bf00      	nop
		}
	}

	return val;
 800561c:	697b      	ldr	r3, [r7, #20]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005626:	b590      	push	{r4, r7, lr}
 8005628:	b089      	sub	sp, #36	; 0x24
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005632:	2302      	movs	r3, #2
 8005634:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b01      	cmp	r3, #1
 800563a:	f240 8109 	bls.w	8005850 <put_fat+0x22a>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	f080 8103 	bcs.w	8005850 <put_fat+0x22a>
		switch (fs->fs_type) {
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b03      	cmp	r3, #3
 8005650:	f000 80b6 	beq.w	80057c0 <put_fat+0x19a>
 8005654:	2b03      	cmp	r3, #3
 8005656:	f300 80fb 	bgt.w	8005850 <put_fat+0x22a>
 800565a:	2b01      	cmp	r3, #1
 800565c:	d003      	beq.n	8005666 <put_fat+0x40>
 800565e:	2b02      	cmp	r3, #2
 8005660:	f000 8083 	beq.w	800576a <put_fat+0x144>
 8005664:	e0f4      	b.n	8005850 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4413      	add	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	899b      	ldrh	r3, [r3, #12]
 800567c:	4619      	mov	r1, r3
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	fbb3 f3f1 	udiv	r3, r3, r1
 8005684:	4413      	add	r3, r2
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fe3b 	bl	8005304 <move_window>
 800568e:	4603      	mov	r3, r0
 8005690:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f040 80d4 	bne.w	8005842 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	61ba      	str	r2, [r7, #24]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	8992      	ldrh	r2, [r2, #12]
 80056aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80056ae:	fb00 f202 	mul.w	r2, r0, r2
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	440b      	add	r3, r1
 80056b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00d      	beq.n	80056de <put_fat+0xb8>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	b25a      	sxtb	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	b25b      	sxtb	r3, r3
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b25b      	sxtb	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e001      	b.n	80056e2 <put_fat+0xbc>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	899b      	ldrh	r3, [r3, #12]
 80056f4:	4619      	mov	r1, r3
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80056fc:	4413      	add	r3, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fdff 	bl	8005304 <move_window>
 8005706:	4603      	mov	r3, r0
 8005708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800570a:	7ffb      	ldrb	r3, [r7, #31]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 809a 	bne.w	8005846 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	899b      	ldrh	r3, [r3, #12]
 800571c:	461a      	mov	r2, r3
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	fbb3 f0f2 	udiv	r0, r3, r2
 8005724:	fb00 f202 	mul.w	r2, r0, r2
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	440b      	add	r3, r1
 800572c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <put_fat+0x11a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e00e      	b.n	800575e <put_fat+0x138>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	b25b      	sxtb	r3, r3
 8005746:	f023 030f 	bic.w	r3, r3, #15
 800574a:	b25a      	sxtb	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	b25b      	sxtb	r3, r3
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	b25b      	sxtb	r3, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	b25b      	sxtb	r3, r3
 800575c:	b2db      	uxtb	r3, r3
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	70da      	strb	r2, [r3, #3]
			break;
 8005768:	e072      	b.n	8005850 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	899b      	ldrh	r3, [r3, #12]
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	b29b      	uxth	r3, r3
 8005776:	4619      	mov	r1, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	fbb3 f3f1 	udiv	r3, r3, r1
 800577e:	4413      	add	r3, r2
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fdbe 	bl	8005304 <move_window>
 8005788:	4603      	mov	r3, r0
 800578a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800578c:	7ffb      	ldrb	r3, [r7, #31]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d15b      	bne.n	800584a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	8992      	ldrh	r2, [r2, #12]
 80057a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80057a4:	fb00 f202 	mul.w	r2, r0, r2
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	440b      	add	r3, r1
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	b292      	uxth	r2, r2
 80057b0:	4611      	mov	r1, r2
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fb31 	bl	8004e1a <st_word>
			fs->wflag = 1;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	70da      	strb	r2, [r3, #3]
			break;
 80057be:	e047      	b.n	8005850 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	899b      	ldrh	r3, [r3, #12]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80057d4:	4413      	add	r3, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff fd93 	bl	8005304 <move_window>
 80057de:	4603      	mov	r3, r0
 80057e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d132      	bne.n	800584e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	8992      	ldrh	r2, [r2, #12]
 80057fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005800:	fb00 f202 	mul.w	r2, r0, r2
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	440b      	add	r3, r1
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fae3 	bl	8004dd4 <ld_dword>
 800580e:	4603      	mov	r3, r0
 8005810:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005814:	4323      	orrs	r3, r4
 8005816:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	8992      	ldrh	r2, [r2, #12]
 8005826:	fbb3 f0f2 	udiv	r0, r3, r2
 800582a:	fb00 f202 	mul.w	r2, r0, r2
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	440b      	add	r3, r1
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fb0b 	bl	8004e50 <st_dword>
			fs->wflag = 1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	70da      	strb	r2, [r3, #3]
			break;
 8005840:	e006      	b.n	8005850 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005842:	bf00      	nop
 8005844:	e004      	b.n	8005850 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <put_fat+0x22a>
			if (res != FR_OK) break;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <put_fat+0x22a>
			if (res != FR_OK) break;
 800584e:	bf00      	nop
		}
	}
	return res;
 8005850:	7ffb      	ldrb	r3, [r7, #31]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3724      	adds	r7, #36	; 0x24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}

0800585a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b088      	sub	sp, #32
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d904      	bls.n	8005880 <remove_chain+0x26>
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	d301      	bcc.n	8005884 <remove_chain+0x2a>
 8005880:	2302      	movs	r3, #2
 8005882:	e04b      	b.n	800591c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00c      	beq.n	80058a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	69b8      	ldr	r0, [r7, #24]
 8005892:	f7ff fec8 	bl	8005626 <put_fat>
 8005896:	4603      	mov	r3, r0
 8005898:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800589a:	7ffb      	ldrb	r3, [r7, #31]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <remove_chain+0x4a>
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
 80058a2:	e03b      	b.n	800591c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fde9 	bl	800547e <get_fat>
 80058ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d031      	beq.n	8005918 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <remove_chain+0x64>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e02e      	b.n	800591c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d101      	bne.n	80058ca <remove_chain+0x70>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e028      	b.n	800591c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80058ca:	2200      	movs	r2, #0
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	69b8      	ldr	r0, [r7, #24]
 80058d0:	f7ff fea9 	bl	8005626 <put_fat>
 80058d4:	4603      	mov	r3, r0
 80058d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80058d8:	7ffb      	ldrb	r3, [r7, #31]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <remove_chain+0x88>
 80058de:	7ffb      	ldrb	r3, [r7, #31]
 80058e0:	e01c      	b.n	800591c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	3b02      	subs	r3, #2
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d20b      	bcs.n	8005908 <remove_chain+0xae>
			fs->free_clst++;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	791b      	ldrb	r3, [r3, #4]
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d3c6      	bcc.n	80058a4 <remove_chain+0x4a>
 8005916:	e000      	b.n	800591a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005918:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <create_chain+0x2c>
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	429a      	cmp	r2, r3
 800594e:	d31b      	bcc.n	8005988 <create_chain+0x64>
 8005950:	2301      	movs	r3, #1
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	e018      	b.n	8005988 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff fd90 	bl	800547e <get_fat>
 800595e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d801      	bhi.n	800596a <create_chain+0x46>
 8005966:	2301      	movs	r3, #1
 8005968:	e070      	b.n	8005a4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d101      	bne.n	8005976 <create_chain+0x52>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	e06a      	b.n	8005a4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	429a      	cmp	r2, r3
 800597e:	d201      	bcs.n	8005984 <create_chain+0x60>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	e063      	b.n	8005a4c <create_chain+0x128>
		scl = clst;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	3301      	adds	r3, #1
 8005990:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	429a      	cmp	r2, r3
 800599a:	d307      	bcc.n	80059ac <create_chain+0x88>
				ncl = 2;
 800599c:	2302      	movs	r3, #2
 800599e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d901      	bls.n	80059ac <create_chain+0x88>
 80059a8:	2300      	movs	r3, #0
 80059aa:	e04f      	b.n	8005a4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80059ac:	69f9      	ldr	r1, [r7, #28]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fd65 	bl	800547e <get_fat>
 80059b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00e      	beq.n	80059da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d003      	beq.n	80059ca <create_chain+0xa6>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d101      	bne.n	80059ce <create_chain+0xaa>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	e03e      	b.n	8005a4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d1da      	bne.n	800598c <create_chain+0x68>
 80059d6:	2300      	movs	r3, #0
 80059d8:	e038      	b.n	8005a4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80059da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295
 80059e0:	69f9      	ldr	r1, [r7, #28]
 80059e2:	6938      	ldr	r0, [r7, #16]
 80059e4:	f7ff fe1f 	bl	8005626 <put_fat>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <create_chain+0xe2>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6938      	ldr	r0, [r7, #16]
 80059fe:	f7ff fe12 	bl	8005626 <put_fat>
 8005a02:	4603      	mov	r3, r0
 8005a04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <create_chain+0x116>
		fs->last_clst = ncl;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	3b02      	subs	r3, #2
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d804      	bhi.n	8005a2a <create_chain+0x106>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	1e5a      	subs	r2, r3, #1
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	791b      	ldrb	r3, [r3, #4]
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	711a      	strb	r2, [r3, #4]
 8005a38:	e007      	b.n	8005a4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d102      	bne.n	8005a46 <create_chain+0x122>
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	e000      	b.n	8005a48 <create_chain+0x124>
 8005a46:	2301      	movs	r3, #1
 8005a48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005a4a:	69fb      	ldr	r3, [r7, #28]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	3304      	adds	r3, #4
 8005a6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	899b      	ldrh	r3, [r3, #12]
 8005a70:	461a      	mov	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	8952      	ldrh	r2, [r2, #10]
 8005a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1d1a      	adds	r2, r3, #4
 8005a86:	613a      	str	r2, [r7, #16]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <clmt_clust+0x42>
 8005a92:	2300      	movs	r3, #0
 8005a94:	e010      	b.n	8005ab8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d307      	bcc.n	8005aae <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005aac:	e7e9      	b.n	8005a82 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005aae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	4413      	add	r3, r2
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ada:	d204      	bcs.n	8005ae6 <dir_sdi+0x22>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <dir_sdi+0x26>
		return FR_INT_ERR;
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e071      	b.n	8005bce <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <dir_sdi+0x46>
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d902      	bls.n	8005b0a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10c      	bne.n	8005b2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	8912      	ldrh	r2, [r2, #8]
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d301      	bcc.n	8005b20 <dir_sdi+0x5c>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e056      	b.n	8005bce <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	61da      	str	r2, [r3, #28]
 8005b28:	e02d      	b.n	8005b86 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	895b      	ldrh	r3, [r3, #10]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	899b      	ldrh	r3, [r3, #12]
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b3a:	e019      	b.n	8005b70 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fc9c 	bl	800547e <get_fat>
 8005b46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d101      	bne.n	8005b54 <dir_sdi+0x90>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e03c      	b.n	8005bce <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d904      	bls.n	8005b64 <dir_sdi+0xa0>
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d301      	bcc.n	8005b68 <dir_sdi+0xa4>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e032      	b.n	8005bce <dir_sdi+0x10a>
			ofs -= csz;
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d2e1      	bcs.n	8005b3c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005b78:	6979      	ldr	r1, [r7, #20]
 8005b7a:	6938      	ldr	r0, [r7, #16]
 8005b7c:	f7ff fc60 	bl	8005440 <clust2sect>
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <dir_sdi+0xd4>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e01a      	b.n	8005bce <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	899b      	ldrh	r3, [r3, #12]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ba8:	441a      	add	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	899b      	ldrh	r3, [r3, #12]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bc0:	fb00 f202 	mul.w	r2, r0, r2
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	18ca      	adds	r2, r1, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	3320      	adds	r3, #32
 8005bec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <dir_next+0x28>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bfc:	d301      	bcc.n	8005c02 <dir_next+0x2c>
 8005bfe:	2304      	movs	r3, #4
 8005c00:	e0bb      	b.n	8005d7a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	899b      	ldrh	r3, [r3, #12]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c0e:	fb01 f202 	mul.w	r2, r1, r2
 8005c12:	1a9b      	subs	r3, r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 809d 	bne.w	8005d54 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	8912      	ldrh	r2, [r2, #8]
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f0c0 808d 	bcc.w	8005d54 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	61da      	str	r2, [r3, #28]
 8005c40:	2304      	movs	r3, #4
 8005c42:	e09a      	b.n	8005d7a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	899b      	ldrh	r3, [r3, #12]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	8952      	ldrh	r2, [r2, #10]
 8005c54:	3a01      	subs	r2, #1
 8005c56:	4013      	ands	r3, r2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d17b      	bne.n	8005d54 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f7ff fc0a 	bl	800547e <get_fat>
 8005c6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d801      	bhi.n	8005c76 <dir_next+0xa0>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e081      	b.n	8005d7a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d101      	bne.n	8005c82 <dir_next+0xac>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e07b      	b.n	8005d7a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d359      	bcc.n	8005d40 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	61da      	str	r2, [r3, #28]
 8005c98:	2304      	movs	r3, #4
 8005c9a:	e06e      	b.n	8005d7a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f7ff fe3d 	bl	8005924 <create_chain>
 8005caa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <dir_next+0xe0>
 8005cb2:	2307      	movs	r3, #7
 8005cb4:	e061      	b.n	8005d7a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <dir_next+0xea>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e05c      	b.n	8005d7a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d101      	bne.n	8005ccc <dir_next+0xf6>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e056      	b.n	8005d7a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff fad5 	bl	800527c <sync_window>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <dir_next+0x106>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e04e      	b.n	8005d7a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	899b      	ldrh	r3, [r3, #12]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	2100      	movs	r1, #0
 8005cea:	f7ff f8fe 	bl	8004eea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	6979      	ldr	r1, [r7, #20]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff fba3 	bl	8005440 <clust2sect>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8005d00:	e012      	b.n	8005d28 <dir_next+0x152>
						fs->wflag = 1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff fab7 	bl	800527c <sync_window>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <dir_next+0x142>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e030      	b.n	8005d7a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	895b      	ldrh	r3, [r3, #10]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d3e6      	bcc.n	8005d02 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff fb79 	bl	8005440 <clust2sect>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	899b      	ldrh	r3, [r3, #12]
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d6c:	fb00 f202 	mul.w	r2, r0, r2
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	18ca      	adds	r2, r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b086      	sub	sp, #24
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005d92:	2100      	movs	r1, #0
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff fe95 	bl	8005ac4 <dir_sdi>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d12b      	bne.n	8005dfc <dir_alloc+0x7a>
		n = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	4619      	mov	r1, r3
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff faa8 	bl	8005304 <move_window>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d11d      	bne.n	8005dfa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2be5      	cmp	r3, #229	; 0xe5
 8005dc6:	d004      	beq.n	8005dd2 <dir_alloc+0x50>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d107      	bne.n	8005de2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d102      	bne.n	8005de6 <dir_alloc+0x64>
 8005de0:	e00c      	b.n	8005dfc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005de6:	2101      	movs	r1, #1
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fef4 	bl	8005bd6 <dir_next>
 8005dee:	4603      	mov	r3, r0
 8005df0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0d7      	beq.n	8005da8 <dir_alloc+0x26>
 8005df8:	e000      	b.n	8005dfc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005dfa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d101      	bne.n	8005e06 <dir_alloc+0x84>
 8005e02:	2307      	movs	r3, #7
 8005e04:	75fb      	strb	r3, [r7, #23]
	return res;
 8005e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	331a      	adds	r3, #26
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe ffc0 	bl	8004da4 <ld_word>
 8005e24:	4603      	mov	r3, r0
 8005e26:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d109      	bne.n	8005e44 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe ffb5 	bl	8004da4 <ld_word>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	041b      	lsls	r3, r3, #16
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005e44:	68fb      	ldr	r3, [r7, #12]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	331a      	adds	r3, #26
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	b292      	uxth	r2, r2
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe ffd8 	bl	8004e1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d109      	bne.n	8005e86 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f103 0214 	add.w	r2, r3, #20
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	0c1b      	lsrs	r3, r3, #16
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fe ffca 	bl	8004e1a <st_word>
	}
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fe10 	bl	8005ac4 <dir_sdi>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <dir_find+0x24>
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	e03e      	b.n	8005f30 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6938      	ldr	r0, [r7, #16]
 8005eba:	f7ff fa23 	bl	8005304 <move_window>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d12f      	bne.n	8005f28 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <dir_find+0x4e>
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	75fb      	strb	r3, [r7, #23]
 8005eda:	e028      	b.n	8005f2e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	330b      	adds	r3, #11
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	330b      	adds	r3, #11
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <dir_find+0x86>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a18      	ldr	r0, [r3, #32]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3324      	adds	r3, #36	; 0x24
 8005f06:	220b      	movs	r2, #11
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f7ff f809 	bl	8004f20 <mem_cmp>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005f14:	2100      	movs	r1, #0
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fe5d 	bl	8005bd6 <dir_next>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0c5      	beq.n	8005eb2 <dir_find+0x24>
 8005f26:	e002      	b.n	8005f2e <dir_find+0xa0>
		if (res != FR_OK) break;
 8005f28:	bf00      	nop
 8005f2a:	e000      	b.n	8005f2e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005f2c:	bf00      	nop

	return res;
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005f46:	2101      	movs	r1, #1
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff1a 	bl	8005d82 <dir_alloc>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11c      	bne.n	8005f92 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	68b8      	ldr	r0, [r7, #8]
 8005f60:	f7ff f9d0 	bl	8005304 <move_window>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d111      	bne.n	8005f92 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	2220      	movs	r2, #32
 8005f74:	2100      	movs	r1, #0
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe ffb7 	bl	8004eea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a18      	ldr	r0, [r3, #32]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3324      	adds	r3, #36	; 0x24
 8005f84:	220b      	movs	r2, #11
 8005f86:	4619      	mov	r1, r3
 8005f88:	f7fe ff8e 	bl	8004ea8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3324      	adds	r3, #36	; 0x24
 8005fb0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005fb2:	220b      	movs	r2, #11
 8005fb4:	2120      	movs	r1, #32
 8005fb6:	68b8      	ldr	r0, [r7, #8]
 8005fb8:	f7fe ff97 	bl	8004eea <mem_set>
	si = i = 0; ni = 8;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	61fa      	str	r2, [r7, #28]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005fd6:	7efb      	ldrb	r3, [r7, #27]
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d94e      	bls.n	800607a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005fdc:	7efb      	ldrb	r3, [r7, #27]
 8005fde:	2b2f      	cmp	r3, #47	; 0x2f
 8005fe0:	d006      	beq.n	8005ff0 <create_name+0x54>
 8005fe2:	7efb      	ldrb	r3, [r7, #27]
 8005fe4:	2b5c      	cmp	r3, #92	; 0x5c
 8005fe6:	d110      	bne.n	800600a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005fe8:	e002      	b.n	8005ff0 <create_name+0x54>
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b2f      	cmp	r3, #47	; 0x2f
 8005ffa:	d0f6      	beq.n	8005fea <create_name+0x4e>
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b5c      	cmp	r3, #92	; 0x5c
 8006006:	d0f0      	beq.n	8005fea <create_name+0x4e>
			break;
 8006008:	e038      	b.n	800607c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800600a:	7efb      	ldrb	r3, [r7, #27]
 800600c:	2b2e      	cmp	r3, #46	; 0x2e
 800600e:	d003      	beq.n	8006018 <create_name+0x7c>
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	429a      	cmp	r2, r3
 8006016:	d30c      	bcc.n	8006032 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b0b      	cmp	r3, #11
 800601c:	d002      	beq.n	8006024 <create_name+0x88>
 800601e:	7efb      	ldrb	r3, [r7, #27]
 8006020:	2b2e      	cmp	r3, #46	; 0x2e
 8006022:	d001      	beq.n	8006028 <create_name+0x8c>
 8006024:	2306      	movs	r3, #6
 8006026:	e044      	b.n	80060b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006028:	2308      	movs	r3, #8
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	230b      	movs	r3, #11
 800602e:	617b      	str	r3, [r7, #20]
			continue;
 8006030:	e022      	b.n	8006078 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006032:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006036:	2b00      	cmp	r3, #0
 8006038:	da04      	bge.n	8006044 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800603a:	7efb      	ldrb	r3, [r7, #27]
 800603c:	3b80      	subs	r3, #128	; 0x80
 800603e:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <create_name+0x120>)
 8006040:	5cd3      	ldrb	r3, [r2, r3]
 8006042:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006044:	7efb      	ldrb	r3, [r7, #27]
 8006046:	4619      	mov	r1, r3
 8006048:	481d      	ldr	r0, [pc, #116]	; (80060c0 <create_name+0x124>)
 800604a:	f7fe ff90 	bl	8004f6e <chk_chr>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <create_name+0xbc>
 8006054:	2306      	movs	r3, #6
 8006056:	e02c      	b.n	80060b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006058:	7efb      	ldrb	r3, [r7, #27]
 800605a:	2b60      	cmp	r3, #96	; 0x60
 800605c:	d905      	bls.n	800606a <create_name+0xce>
 800605e:	7efb      	ldrb	r3, [r7, #27]
 8006060:	2b7a      	cmp	r3, #122	; 0x7a
 8006062:	d802      	bhi.n	800606a <create_name+0xce>
 8006064:	7efb      	ldrb	r3, [r7, #27]
 8006066:	3b20      	subs	r3, #32
 8006068:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	613a      	str	r2, [r7, #16]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4413      	add	r3, r2
 8006074:	7efa      	ldrb	r2, [r7, #27]
 8006076:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006078:	e7a6      	b.n	8005fc8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800607a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	441a      	add	r2, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <create_name+0xf4>
 800608c:	2306      	movs	r3, #6
 800608e:	e010      	b.n	80060b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2be5      	cmp	r3, #229	; 0xe5
 8006096:	d102      	bne.n	800609e <create_name+0x102>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2205      	movs	r2, #5
 800609c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800609e:	7efb      	ldrb	r3, [r7, #27]
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d801      	bhi.n	80060a8 <create_name+0x10c>
 80060a4:	2204      	movs	r2, #4
 80060a6:	e000      	b.n	80060aa <create_name+0x10e>
 80060a8:	2200      	movs	r2, #0
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	330b      	adds	r3, #11
 80060ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80060b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	080082a8 	.word	0x080082a8
 80060c0:	08008230 	.word	0x08008230

080060c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80060d8:	e002      	b.n	80060e0 <follow_path+0x1c>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b2f      	cmp	r3, #47	; 0x2f
 80060e6:	d0f8      	beq.n	80060da <follow_path+0x16>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b5c      	cmp	r3, #92	; 0x5c
 80060ee:	d0f4      	beq.n	80060da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b1f      	cmp	r3, #31
 80060fc:	d80a      	bhi.n	8006114 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2280      	movs	r2, #128	; 0x80
 8006102:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006106:	2100      	movs	r1, #0
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fcdb 	bl	8005ac4 <dir_sdi>
 800610e:	4603      	mov	r3, r0
 8006110:	75fb      	strb	r3, [r7, #23]
 8006112:	e048      	b.n	80061a6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006114:	463b      	mov	r3, r7
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff ff3f 	bl	8005f9c <create_name>
 800611e:	4603      	mov	r3, r0
 8006120:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d139      	bne.n	800619c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff feb0 	bl	8005e8e <dir_find>
 800612e:	4603      	mov	r3, r0
 8006130:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006138:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b04      	cmp	r3, #4
 8006144:	d12c      	bne.n	80061a0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006146:	7afb      	ldrb	r3, [r7, #11]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d127      	bne.n	80061a0 <follow_path+0xdc>
 8006150:	2305      	movs	r3, #5
 8006152:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006154:	e024      	b.n	80061a0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d121      	bne.n	80061a4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	799b      	ldrb	r3, [r3, #6]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800616c:	2305      	movs	r3, #5
 800616e:	75fb      	strb	r3, [r7, #23]
 8006170:	e019      	b.n	80061a6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	8992      	ldrh	r2, [r2, #12]
 8006180:	fbb3 f0f2 	udiv	r0, r3, r2
 8006184:	fb00 f202 	mul.w	r2, r0, r2
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	440b      	add	r3, r1
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fe3e 	bl	8005e10 <ld_clust>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800619a:	e7bb      	b.n	8006114 <follow_path+0x50>
			if (res != FR_OK) break;
 800619c:	bf00      	nop
 800619e:	e002      	b.n	80061a6 <follow_path+0xe2>
				break;
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061a4:	bf00      	nop
			}
		}
	}

	return res;
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d031      	beq.n	800622a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e002      	b.n	80061d4 <get_ldnumber+0x24>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	3301      	adds	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d903      	bls.n	80061e4 <get_ldnumber+0x34>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b3a      	cmp	r3, #58	; 0x3a
 80061e2:	d1f4      	bne.n	80061ce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b3a      	cmp	r3, #58	; 0x3a
 80061ea:	d11c      	bne.n	8006226 <get_ldnumber+0x76>
			tp = *path;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	60fa      	str	r2, [r7, #12]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	3b30      	subs	r3, #48	; 0x30
 80061fc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b09      	cmp	r3, #9
 8006202:	d80e      	bhi.n	8006222 <get_ldnumber+0x72>
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	429a      	cmp	r2, r3
 800620a:	d10a      	bne.n	8006222 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <get_ldnumber+0x72>
					vol = (int)i;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	3301      	adds	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	e002      	b.n	800622c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800622a:	693b      	ldr	r3, [r7, #16]
}
 800622c:	4618      	mov	r0, r3
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	70da      	strb	r2, [r3, #3]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff f856 	bl	8005304 <move_window>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <check_fs+0x2a>
 800625e:	2304      	movs	r3, #4
 8006260:	e038      	b.n	80062d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3334      	adds	r3, #52	; 0x34
 8006266:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe fd9a 	bl	8004da4 <ld_word>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006278:	429a      	cmp	r2, r3
 800627a:	d001      	beq.n	8006280 <check_fs+0x48>
 800627c:	2303      	movs	r3, #3
 800627e:	e029      	b.n	80062d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006286:	2be9      	cmp	r3, #233	; 0xe9
 8006288:	d009      	beq.n	800629e <check_fs+0x66>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006290:	2beb      	cmp	r3, #235	; 0xeb
 8006292:	d11e      	bne.n	80062d2 <check_fs+0x9a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800629a:	2b90      	cmp	r3, #144	; 0x90
 800629c:	d119      	bne.n	80062d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3334      	adds	r3, #52	; 0x34
 80062a2:	3336      	adds	r3, #54	; 0x36
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fd95 	bl	8004dd4 <ld_dword>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <check_fs+0xa4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <check_fs+0x82>
 80062b6:	2300      	movs	r3, #0
 80062b8:	e00c      	b.n	80062d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3334      	adds	r3, #52	; 0x34
 80062be:	3352      	adds	r3, #82	; 0x52
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fd87 	bl	8004dd4 <ld_dword>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4a05      	ldr	r2, [pc, #20]	; (80062e0 <check_fs+0xa8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <check_fs+0x9a>
 80062ce:	2300      	movs	r3, #0
 80062d0:	e000      	b.n	80062d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80062d2:	2302      	movs	r3, #2
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	00544146 	.word	0x00544146
 80062e0:	33544146 	.word	0x33544146

080062e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b096      	sub	sp, #88	; 0x58
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff59 	bl	80061b0 <get_ldnumber>
 80062fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006302:	2b00      	cmp	r3, #0
 8006304:	da01      	bge.n	800630a <find_volume+0x26>
 8006306:	230b      	movs	r3, #11
 8006308:	e262      	b.n	80067d0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800630a:	4a9f      	ldr	r2, [pc, #636]	; (8006588 <find_volume+0x2a4>)
 800630c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <find_volume+0x3a>
 800631a:	230c      	movs	r3, #12
 800631c:	e258      	b.n	80067d0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006322:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01a      	beq.n	800636a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe fc95 	bl	8004c68 <disk_status>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10c      	bne.n	800636a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <find_volume+0x82>
 8006356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006362:	230a      	movs	r3, #10
 8006364:	e234      	b.n	80067d0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006366:	2300      	movs	r3, #0
 8006368:	e232      	b.n	80067d0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006372:	b2da      	uxtb	r2, r3
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fc8d 	bl	8004c9c <disk_initialize>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006394:	2303      	movs	r3, #3
 8006396:	e21b      	b.n	80067d0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <find_volume+0xca>
 800639e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80063aa:	230a      	movs	r3, #10
 80063ac:	e210      	b.n	80067d0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	7858      	ldrb	r0, [r3, #1]
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	330c      	adds	r3, #12
 80063b6:	461a      	mov	r2, r3
 80063b8:	2102      	movs	r1, #2
 80063ba:	f7fe fcd5 	bl	8004d68 <disk_ioctl>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <find_volume+0xe4>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e203      	b.n	80067d0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	899b      	ldrh	r3, [r3, #12]
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d0:	d80d      	bhi.n	80063ee <find_volume+0x10a>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	899b      	ldrh	r3, [r3, #12]
 80063d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063da:	d308      	bcc.n	80063ee <find_volume+0x10a>
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	899b      	ldrh	r3, [r3, #12]
 80063e0:	461a      	mov	r2, r3
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	899b      	ldrh	r3, [r3, #12]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <find_volume+0x10e>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e1ee      	b.n	80067d0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80063f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063fa:	f7ff ff1d 	bl	8006238 <check_fs>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006408:	2b02      	cmp	r3, #2
 800640a:	d149      	bne.n	80064a0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800640c:	2300      	movs	r3, #0
 800640e:	643b      	str	r3, [r7, #64]	; 0x40
 8006410:	e01e      	b.n	8006450 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006420:	4413      	add	r3, r2
 8006422:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	3304      	adds	r3, #4
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <find_volume+0x158>
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	3308      	adds	r3, #8
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fcce 	bl	8004dd4 <ld_dword>
 8006438:	4602      	mov	r2, r0
 800643a:	e000      	b.n	800643e <find_volume+0x15a>
 800643c:	2200      	movs	r2, #0
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	3358      	adds	r3, #88	; 0x58
 8006444:	443b      	add	r3, r7
 8006446:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800644a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644c:	3301      	adds	r3, #1
 800644e:	643b      	str	r3, [r7, #64]	; 0x40
 8006450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006452:	2b03      	cmp	r3, #3
 8006454:	d9dd      	bls.n	8006412 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006456:	2300      	movs	r3, #0
 8006458:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <find_volume+0x182>
 8006460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006462:	3b01      	subs	r3, #1
 8006464:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	3358      	adds	r3, #88	; 0x58
 800646c:	443b      	add	r3, r7
 800646e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006472:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <find_volume+0x1a2>
 800647a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800647c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800647e:	f7ff fedb 	bl	8006238 <check_fs>
 8006482:	4603      	mov	r3, r0
 8006484:	e000      	b.n	8006488 <find_volume+0x1a4>
 8006486:	2303      	movs	r3, #3
 8006488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800648c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006490:	2b01      	cmp	r3, #1
 8006492:	d905      	bls.n	80064a0 <find_volume+0x1bc>
 8006494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006496:	3301      	adds	r3, #1
 8006498:	643b      	str	r3, [r7, #64]	; 0x40
 800649a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649c:	2b03      	cmp	r3, #3
 800649e:	d9e2      	bls.n	8006466 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80064a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d101      	bne.n	80064ac <find_volume+0x1c8>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e191      	b.n	80067d0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80064ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d901      	bls.n	80064b8 <find_volume+0x1d4>
 80064b4:	230d      	movs	r3, #13
 80064b6:	e18b      	b.n	80067d0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	3334      	adds	r3, #52	; 0x34
 80064bc:	330b      	adds	r3, #11
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fc70 	bl	8004da4 <ld_word>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	899b      	ldrh	r3, [r3, #12]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <find_volume+0x1f0>
 80064d0:	230d      	movs	r3, #13
 80064d2:	e17d      	b.n	80067d0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	3334      	adds	r3, #52	; 0x34
 80064d8:	3316      	adds	r3, #22
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fc62 	bl	8004da4 <ld_word>
 80064e0:	4603      	mov	r3, r0
 80064e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80064e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <find_volume+0x214>
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	3334      	adds	r3, #52	; 0x34
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fc6f 	bl	8004dd4 <ld_dword>
 80064f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064fc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	789b      	ldrb	r3, [r3, #2]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d005      	beq.n	800651c <find_volume+0x238>
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	789b      	ldrb	r3, [r3, #2]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d001      	beq.n	800651c <find_volume+0x238>
 8006518:	230d      	movs	r3, #13
 800651a:	e159      	b.n	80067d0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	789b      	ldrb	r3, [r3, #2]
 8006520:	461a      	mov	r2, r3
 8006522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006524:	fb02 f303 	mul.w	r3, r2, r3
 8006528:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006530:	b29a      	uxth	r2, r3
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	895b      	ldrh	r3, [r3, #10]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <find_volume+0x26c>
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	895b      	ldrh	r3, [r3, #10]
 8006542:	461a      	mov	r2, r3
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	895b      	ldrh	r3, [r3, #10]
 8006548:	3b01      	subs	r3, #1
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <find_volume+0x270>
 8006550:	230d      	movs	r3, #13
 8006552:	e13d      	b.n	80067d0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	3334      	adds	r3, #52	; 0x34
 8006558:	3311      	adds	r3, #17
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fc22 	bl	8004da4 <ld_word>
 8006560:	4603      	mov	r3, r0
 8006562:	461a      	mov	r2, r3
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	891b      	ldrh	r3, [r3, #8]
 800656c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656e:	8992      	ldrh	r2, [r2, #12]
 8006570:	0952      	lsrs	r2, r2, #5
 8006572:	b292      	uxth	r2, r2
 8006574:	fbb3 f1f2 	udiv	r1, r3, r2
 8006578:	fb01 f202 	mul.w	r2, r1, r2
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <find_volume+0x2a8>
 8006584:	230d      	movs	r3, #13
 8006586:	e123      	b.n	80067d0 <find_volume+0x4ec>
 8006588:	20000224 	.word	0x20000224

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	3334      	adds	r3, #52	; 0x34
 8006590:	3313      	adds	r3, #19
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fc06 	bl	8004da4 <ld_word>
 8006598:	4603      	mov	r3, r0
 800659a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800659c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <find_volume+0x2cc>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	3334      	adds	r3, #52	; 0x34
 80065a6:	3320      	adds	r3, #32
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fc13 	bl	8004dd4 <ld_dword>
 80065ae:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	3334      	adds	r3, #52	; 0x34
 80065b4:	330e      	adds	r3, #14
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe fbf4 	bl	8004da4 <ld_word>
 80065bc:	4603      	mov	r3, r0
 80065be:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80065c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <find_volume+0x2e6>
 80065c6:	230d      	movs	r3, #13
 80065c8:	e102      	b.n	80067d0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80065ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ce:	4413      	add	r3, r2
 80065d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d2:	8911      	ldrh	r1, [r2, #8]
 80065d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065d6:	8992      	ldrh	r2, [r2, #12]
 80065d8:	0952      	lsrs	r2, r2, #5
 80065da:	b292      	uxth	r2, r2
 80065dc:	fbb1 f2f2 	udiv	r2, r1, r2
 80065e0:	b292      	uxth	r2, r2
 80065e2:	4413      	add	r3, r2
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80065e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d201      	bcs.n	80065f2 <find_volume+0x30e>
 80065ee:	230d      	movs	r3, #13
 80065f0:	e0ee      	b.n	80067d0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80065f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065fa:	8952      	ldrh	r2, [r2, #10]
 80065fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <find_volume+0x328>
 8006608:	230d      	movs	r3, #13
 800660a:	e0e1      	b.n	80067d0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800660c:	2303      	movs	r3, #3
 800660e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006618:	4293      	cmp	r3, r2
 800661a:	d802      	bhi.n	8006622 <find_volume+0x33e>
 800661c:	2302      	movs	r3, #2
 800661e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006628:	4293      	cmp	r3, r2
 800662a:	d802      	bhi.n	8006632 <find_volume+0x34e>
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800663e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006640:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006644:	441a      	add	r2, r3
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800664a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	441a      	add	r2, r3
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006658:	2b03      	cmp	r3, #3
 800665a:	d11e      	bne.n	800669a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	3334      	adds	r3, #52	; 0x34
 8006660:	332a      	adds	r3, #42	; 0x2a
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fb9e 	bl	8004da4 <ld_word>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <find_volume+0x38e>
 800666e:	230d      	movs	r3, #13
 8006670:	e0ae      	b.n	80067d0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	891b      	ldrh	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <find_volume+0x39a>
 800667a:	230d      	movs	r3, #13
 800667c:	e0a8      	b.n	80067d0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	3334      	adds	r3, #52	; 0x34
 8006682:	332c      	adds	r3, #44	; 0x2c
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe fba5 	bl	8004dd4 <ld_dword>
 800668a:	4602      	mov	r2, r0
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	647b      	str	r3, [r7, #68]	; 0x44
 8006698:	e01f      	b.n	80066da <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	891b      	ldrh	r3, [r3, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <find_volume+0x3c2>
 80066a2:	230d      	movs	r3, #13
 80066a4:	e094      	b.n	80067d0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ac:	441a      	add	r2, r3
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80066b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d103      	bne.n	80066c2 <find_volume+0x3de>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	e00a      	b.n	80066d8 <find_volume+0x3f4>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	4613      	mov	r3, r2
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	4413      	add	r3, r2
 80066cc:	085a      	lsrs	r2, r3, #1
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	69da      	ldr	r2, [r3, #28]
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	899b      	ldrh	r3, [r3, #12]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e6:	440b      	add	r3, r1
 80066e8:	3b01      	subs	r3, #1
 80066ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066ec:	8989      	ldrh	r1, [r1, #12]
 80066ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d201      	bcs.n	80066fa <find_volume+0x416>
 80066f6:	230d      	movs	r3, #13
 80066f8:	e06a      	b.n	80067d0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006700:	615a      	str	r2, [r3, #20]
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2280      	movs	r2, #128	; 0x80
 800670e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006714:	2b03      	cmp	r3, #3
 8006716:	d149      	bne.n	80067ac <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	3334      	adds	r3, #52	; 0x34
 800671c:	3330      	adds	r3, #48	; 0x30
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fb40 	bl	8004da4 <ld_word>
 8006724:	4603      	mov	r3, r0
 8006726:	2b01      	cmp	r3, #1
 8006728:	d140      	bne.n	80067ac <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800672a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672c:	3301      	adds	r3, #1
 800672e:	4619      	mov	r1, r3
 8006730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006732:	f7fe fde7 	bl	8005304 <move_window>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d137      	bne.n	80067ac <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	2200      	movs	r2, #0
 8006740:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	3334      	adds	r3, #52	; 0x34
 8006746:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fb2a 	bl	8004da4 <ld_word>
 8006750:	4603      	mov	r3, r0
 8006752:	461a      	mov	r2, r3
 8006754:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006758:	429a      	cmp	r2, r3
 800675a:	d127      	bne.n	80067ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	3334      	adds	r3, #52	; 0x34
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fb37 	bl	8004dd4 <ld_dword>
 8006766:	4603      	mov	r3, r0
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <find_volume+0x4f4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d11e      	bne.n	80067ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	3334      	adds	r3, #52	; 0x34
 8006772:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fb2c 	bl	8004dd4 <ld_dword>
 800677c:	4603      	mov	r3, r0
 800677e:	4a17      	ldr	r2, [pc, #92]	; (80067dc <find_volume+0x4f8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d113      	bne.n	80067ac <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	3334      	adds	r3, #52	; 0x34
 8006788:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fb21 	bl	8004dd4 <ld_dword>
 8006792:	4602      	mov	r2, r0
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	3334      	adds	r3, #52	; 0x34
 800679c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe fb17 	bl	8004dd4 <ld_dword>
 80067a6:	4602      	mov	r2, r0
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80067b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <find_volume+0x4fc>)
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <find_volume+0x4fc>)
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <find_volume+0x4fc>)
 80067c2:	881a      	ldrh	r2, [r3, #0]
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80067c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067ca:	f7fe fd33 	bl	8005234 <clear_lock>
#endif
	return FR_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3758      	adds	r7, #88	; 0x58
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	41615252 	.word	0x41615252
 80067dc:	61417272 	.word	0x61417272
 80067e0:	20000228 	.word	0x20000228

080067e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80067ee:	2309      	movs	r3, #9
 80067f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01c      	beq.n	8006832 <validate+0x4e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d018      	beq.n	8006832 <validate+0x4e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <validate+0x4e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	889a      	ldrh	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	88db      	ldrh	r3, [r3, #6]
 8006814:	429a      	cmp	r2, r3
 8006816:	d10c      	bne.n	8006832 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fa22 	bl	8004c68 <disk_status>
 8006824:	4603      	mov	r3, r0
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <validate+0x4e>
			res = FR_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <validate+0x5a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	e000      	b.n	8006840 <validate+0x5c>
 800683e:	2300      	movs	r3, #0
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	6013      	str	r3, [r2, #0]
	return res;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006862:	f107 0310 	add.w	r3, r7, #16
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fca2 	bl	80061b0 <get_ldnumber>
 800686c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	da01      	bge.n	8006878 <f_mount+0x28>
 8006874:	230b      	movs	r3, #11
 8006876:	e02b      	b.n	80068d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006878:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <f_mount+0x88>)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006880:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006888:	69b8      	ldr	r0, [r7, #24]
 800688a:	f7fe fcd3 	bl	8005234 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	490d      	ldr	r1, [pc, #52]	; (80068d8 <f_mount+0x88>)
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <f_mount+0x66>
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d001      	beq.n	80068ba <f_mount+0x6a>
 80068b6:	2300      	movs	r3, #0
 80068b8:	e00a      	b.n	80068d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80068ba:	f107 010c 	add.w	r1, r7, #12
 80068be:	f107 0308 	add.w	r3, r7, #8
 80068c2:	2200      	movs	r2, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fd0d 	bl	80062e4 <find_volume>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3720      	adds	r7, #32
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000224 	.word	0x20000224

080068dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b098      	sub	sp, #96	; 0x60
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <f_open+0x18>
 80068f0:	2309      	movs	r3, #9
 80068f2:	e1bb      	b.n	8006c6c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80068fc:	79fa      	ldrb	r2, [r7, #7]
 80068fe:	f107 0110 	add.w	r1, r7, #16
 8006902:	f107 0308 	add.w	r3, r7, #8
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fcec 	bl	80062e4 <find_volume>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 819f 	bne.w	8006c5a <f_open+0x37e>
		dj.obj.fs = fs;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	f107 0314 	add.w	r3, r7, #20
 8006926:	4611      	mov	r1, r2
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fbcb 	bl	80060c4 <follow_path>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11a      	bne.n	8006972 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800693c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006940:	b25b      	sxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	da03      	bge.n	800694e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006946:	2306      	movs	r3, #6
 8006948:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800694c:	e011      	b.n	8006972 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	f023 0301 	bic.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	bf14      	ite	ne
 8006958:	2301      	movne	r3, #1
 800695a:	2300      	moveq	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	f107 0314 	add.w	r3, r7, #20
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fb1c 	bl	8004fa4 <chk_lock>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	f003 031c 	and.w	r3, r3, #28
 8006978:	2b00      	cmp	r3, #0
 800697a:	d07f      	beq.n	8006a7c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800697c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006980:	2b00      	cmp	r3, #0
 8006982:	d017      	beq.n	80069b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006988:	2b04      	cmp	r3, #4
 800698a:	d10e      	bne.n	80069aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800698c:	f7fe fb66 	bl	800505c <enq_lock>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d006      	beq.n	80069a4 <f_open+0xc8>
 8006996:	f107 0314 	add.w	r3, r7, #20
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff facc 	bl	8005f38 <dir_register>
 80069a0:	4603      	mov	r3, r0
 80069a2:	e000      	b.n	80069a6 <f_open+0xca>
 80069a4:	2312      	movs	r3, #18
 80069a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	f043 0308 	orr.w	r3, r3, #8
 80069b0:	71fb      	strb	r3, [r7, #7]
 80069b2:	e010      	b.n	80069d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80069b4:	7ebb      	ldrb	r3, [r7, #26]
 80069b6:	f003 0311 	and.w	r3, r3, #17
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <f_open+0xea>
					res = FR_DENIED;
 80069be:	2307      	movs	r3, #7
 80069c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80069c4:	e007      	b.n	80069d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <f_open+0xfa>
 80069d0:	2308      	movs	r3, #8
 80069d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80069d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d168      	bne.n	8006ab0 <f_open+0x1d4>
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d063      	beq.n	8006ab0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80069e8:	f7fd ff32 	bl	8004850 <get_fattime>
 80069ec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	330e      	adds	r3, #14
 80069f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fa2b 	bl	8004e50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80069fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fc:	3316      	adds	r3, #22
 80069fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fa25 	bl	8004e50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	330b      	adds	r3, #11
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a12:	4611      	mov	r1, r2
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff f9fb 	bl	8005e10 <ld_clust>
 8006a1a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a20:	2200      	movs	r2, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fa13 	bl	8005e4e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	331c      	adds	r3, #28
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fa0e 	bl	8004e50 <st_dword>
					fs->wflag = 1;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2201      	movs	r2, #1
 8006a38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d037      	beq.n	8006ab0 <f_open+0x1d4>
						dw = fs->winsect;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe ff03 	bl	800585a <remove_chain>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d126      	bne.n	8006ab0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe fc4c 	bl	8005304 <move_window>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a76:	3a01      	subs	r2, #1
 8006a78:	611a      	str	r2, [r3, #16]
 8006a7a:	e019      	b.n	8006ab0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d115      	bne.n	8006ab0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006a84:	7ebb      	ldrb	r3, [r7, #26]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006a8e:	2304      	movs	r3, #4
 8006a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006a94:	e00c      	b.n	8006ab0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <f_open+0x1d4>
 8006aa0:	7ebb      	ldrb	r3, [r7, #26]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <f_open+0x1d4>
						res = FR_DENIED;
 8006aaa:	2307      	movs	r3, #7
 8006aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d128      	bne.n	8006b0a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bf14      	ite	ne
 8006ae2:	2301      	movne	r3, #1
 8006ae4:	2300      	moveq	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f107 0314 	add.w	r3, r7, #20
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fad5 	bl	80050a0 <inc_lock>
 8006af6:	4602      	mov	r2, r0
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <f_open+0x22e>
 8006b04:	2302      	movs	r3, #2
 8006b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f040 80a3 	bne.w	8006c5a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff f978 	bl	8005e10 <ld_clust>
 8006b20:	4602      	mov	r2, r0
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b28:	331c      	adds	r3, #28
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe f952 	bl	8004dd4 <ld_dword>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	88da      	ldrh	r2, [r3, #6]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	79fa      	ldrb	r2, [r7, #7]
 8006b4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3330      	adds	r3, #48	; 0x30
 8006b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe f9bc 	bl	8004eea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d06e      	beq.n	8006c5a <f_open+0x37e>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d06a      	beq.n	8006c5a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	895b      	ldrh	r3, [r3, #10]
 8006b90:	461a      	mov	r2, r3
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	899b      	ldrh	r3, [r3, #12]
 8006b96:	fb02 f303 	mul.w	r3, r2, r3
 8006b9a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ba8:	e016      	b.n	8006bd8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fc65 	bl	800547e <get_fat>
 8006bb4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d802      	bhi.n	8006bc2 <f_open+0x2e6>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc8:	d102      	bne.n	8006bd0 <f_open+0x2f4>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006bd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8006bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <f_open+0x30c>
 8006be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d8e0      	bhi.n	8006baa <f_open+0x2ce>
				}
				fp->clust = clst;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d131      	bne.n	8006c5a <f_open+0x37e>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	899b      	ldrh	r3, [r3, #12]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c02:	fb01 f202 	mul.w	r2, r1, r2
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d026      	beq.n	8006c5a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fc15 	bl	8005440 <clust2sect>
 8006c16:	6478      	str	r0, [r7, #68]	; 0x44
 8006c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <f_open+0x34a>
						res = FR_INT_ERR;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c24:	e019      	b.n	8006c5a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	899b      	ldrh	r3, [r3, #12]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c34:	441a      	add	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	7858      	ldrb	r0, [r3, #1]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1a      	ldr	r2, [r3, #32]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f7fe f84d 	bl	8004ce8 <disk_read>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <f_open+0x37e>
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <f_open+0x38c>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3760      	adds	r7, #96	; 0x60
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08e      	sub	sp, #56	; 0x38
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f107 0214 	add.w	r2, r7, #20
 8006c92:	4611      	mov	r1, r2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fda5 	bl	80067e4 <validate>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006ca0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d107      	bne.n	8006cb8 <f_read+0x44>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	7d5b      	ldrb	r3, [r3, #21]
 8006cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <f_read+0x4a>
 8006cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cbc:	e135      	b.n	8006f2a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	7d1b      	ldrb	r3, [r3, #20]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <f_read+0x5a>
 8006cca:	2307      	movs	r3, #7
 8006ccc:	e12d      	b.n	8006f2a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	f240 811e 	bls.w	8006f20 <f_read+0x2ac>
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006ce8:	e11a      	b.n	8006f20 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	8992      	ldrh	r2, [r2, #12]
 8006cf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cf6:	fb01 f202 	mul.w	r2, r1, r2
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f040 80d5 	bne.w	8006eac <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	8992      	ldrh	r2, [r2, #12]
 8006d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	8952      	ldrh	r2, [r2, #10]
 8006d12:	3a01      	subs	r2, #1
 8006d14:	4013      	ands	r3, r2
 8006d16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d12f      	bne.n	8006d7e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d2c:	e013      	b.n	8006d56 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7fe fe89 	bl	8005a54 <clmt_clust>
 8006d42:	6338      	str	r0, [r7, #48]	; 0x30
 8006d44:	e007      	b.n	8006d56 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4610      	mov	r0, r2
 8006d50:	f7fe fb95 	bl	800547e <get_fat>
 8006d54:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d804      	bhi.n	8006d66 <f_read+0xf2>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	755a      	strb	r2, [r3, #21]
 8006d62:	2302      	movs	r3, #2
 8006d64:	e0e1      	b.n	8006f2a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d104      	bne.n	8006d78 <f_read+0x104>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	755a      	strb	r2, [r3, #21]
 8006d74:	2301      	movs	r3, #1
 8006d76:	e0d8      	b.n	8006f2a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	4619      	mov	r1, r3
 8006d86:	4610      	mov	r0, r2
 8006d88:	f7fe fb5a 	bl	8005440 <clust2sect>
 8006d8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <f_read+0x12a>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2202      	movs	r2, #2
 8006d98:	755a      	strb	r2, [r3, #21]
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e0c5      	b.n	8006f2a <f_read+0x2b6>
			sect += csect;
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	899b      	ldrh	r3, [r3, #12]
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d041      	beq.n	8006e3e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	4413      	add	r3, r2
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	8952      	ldrh	r2, [r2, #10]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d905      	bls.n	8006dd4 <f_read+0x160>
					cc = fs->csize - csect;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	895b      	ldrh	r3, [r3, #10]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	7858      	ldrb	r0, [r3, #1]
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dde:	f7fd ff83 	bl	8004ce8 <disk_read>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <f_read+0x17e>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	755a      	strb	r2, [r3, #21]
 8006dee:	2301      	movs	r3, #1
 8006df0:	e09b      	b.n	8006f2a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	7d1b      	ldrb	r3, [r3, #20]
 8006df6:	b25b      	sxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da18      	bge.n	8006e2e <f_read+0x1ba>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d911      	bls.n	8006e2e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	8992      	ldrh	r2, [r2, #12]
 8006e16:	fb02 f303 	mul.w	r3, r2, r3
 8006e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1c:	18d0      	adds	r0, r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	899b      	ldrh	r3, [r3, #12]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f7fe f83d 	bl	8004ea8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	899b      	ldrh	r3, [r3, #12]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
 8006e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006e3c:	e05c      	b.n	8006ef8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d02e      	beq.n	8006ea6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	7d1b      	ldrb	r3, [r3, #20]
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da18      	bge.n	8006e84 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	7858      	ldrb	r0, [r3, #1]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1a      	ldr	r2, [r3, #32]
 8006e60:	2301      	movs	r3, #1
 8006e62:	f7fd ff61 	bl	8004d28 <disk_write>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <f_read+0x202>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	755a      	strb	r2, [r3, #21]
 8006e72:	2301      	movs	r3, #1
 8006e74:	e059      	b.n	8006f2a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	7d1b      	ldrb	r3, [r3, #20]
 8006e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	7858      	ldrb	r0, [r3, #1]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e8e:	2301      	movs	r3, #1
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	f7fd ff29 	bl	8004ce8 <disk_read>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <f_read+0x232>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	755a      	strb	r2, [r3, #21]
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e041      	b.n	8006f2a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	899b      	ldrh	r3, [r3, #12]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	8992      	ldrh	r2, [r2, #12]
 8006eba:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ebe:	fb01 f202 	mul.w	r2, r1, r2
 8006ec2:	1a9b      	subs	r3, r3, r2
 8006ec4:	1ac3      	subs	r3, r0, r3
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d901      	bls.n	8006ed4 <f_read+0x260>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	8992      	ldrh	r2, [r2, #12]
 8006ee2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ee6:	fb00 f202 	mul.w	r2, r0, r2
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	440b      	add	r3, r1
 8006eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ef4:	f7fd ffd8 	bl	8004ea8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	4413      	add	r3, r2
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	441a      	add	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	619a      	str	r2, [r3, #24]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	441a      	add	r2, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f47f aee1 	bne.w	8006cea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3738      	adds	r7, #56	; 0x38
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f107 0208 	add.w	r2, r7, #8
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fc4e 	bl	80067e4 <validate>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d168      	bne.n	8007024 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7d1b      	ldrb	r3, [r3, #20]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d062      	beq.n	8007024 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7d1b      	ldrb	r3, [r3, #20]
 8006f62:	b25b      	sxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da15      	bge.n	8006f94 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	7858      	ldrb	r0, [r3, #1]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1a      	ldr	r2, [r3, #32]
 8006f76:	2301      	movs	r3, #1
 8006f78:	f7fd fed6 	bl	8004d28 <disk_write>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <f_sync+0x54>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e04f      	b.n	8007026 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7d1b      	ldrb	r3, [r3, #20]
 8006f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006f94:	f7fd fc5c 	bl	8004850 <get_fattime>
 8006f98:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fe f9ae 	bl	8005304 <move_window>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d138      	bne.n	8007024 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	330b      	adds	r3, #11
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	330b      	adds	r3, #11
 8006fc2:	f042 0220 	orr.w	r2, r2, #32
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68f9      	ldr	r1, [r7, #12]
 8006fd6:	f7fe ff3a 	bl	8005e4e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f103 021c 	add.w	r2, r3, #28
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7fd ff32 	bl	8004e50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3316      	adds	r3, #22
 8006ff0:	6939      	ldr	r1, [r7, #16]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fd ff2c 	bl	8004e50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3312      	adds	r3, #18
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fd ff0b 	bl	8004e1a <st_word>
					fs->wflag = 1;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2201      	movs	r2, #1
 8007008:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe f9a7 	bl	8005360 <sync_fs>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7d1b      	ldrb	r3, [r3, #20]
 800701a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701e:	b2da      	uxtb	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007024:	7dfb      	ldrb	r3, [r7, #23]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff ff7b 	bl	8006f32 <f_sync>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d118      	bne.n	8007078 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f107 0208 	add.w	r2, r7, #8
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff fbc8 	bl	80067e4 <validate>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe f8aa 	bl	80051bc <dec_lock>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007092:	2301      	movs	r3, #1
 8007094:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800709a:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 800709c:	7a5b      	ldrb	r3, [r3, #9]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d131      	bne.n	8007108 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80070a4:	4b1c      	ldr	r3, [pc, #112]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070a6:	7a5b      	ldrb	r3, [r3, #9]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	461a      	mov	r2, r3
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070ae:	2100      	movs	r1, #0
 80070b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80070b2:	4b19      	ldr	r3, [pc, #100]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070b4:	7a5b      	ldrb	r3, [r3, #9]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4a17      	ldr	r2, [pc, #92]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070c4:	7a5b      	ldrb	r3, [r3, #9]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	4b13      	ldr	r3, [pc, #76]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070cc:	4413      	add	r3, r2
 80070ce:	79fa      	ldrb	r2, [r7, #7]
 80070d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80070d2:	4b11      	ldr	r3, [pc, #68]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070d4:	7a5b      	ldrb	r3, [r3, #9]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	b2d1      	uxtb	r1, r2
 80070dc:	4a0e      	ldr	r2, [pc, #56]	; (8007118 <FATFS_LinkDriverEx+0x94>)
 80070de:	7251      	strb	r1, [r2, #9]
 80070e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070e2:	7dbb      	ldrb	r3, [r7, #22]
 80070e4:	3330      	adds	r3, #48	; 0x30
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	3301      	adds	r3, #1
 80070f0:	223a      	movs	r2, #58	; 0x3a
 80070f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	3302      	adds	r3, #2
 80070f8:	222f      	movs	r2, #47	; 0x2f
 80070fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3303      	adds	r3, #3
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
}
 800710a:	4618      	mov	r0, r3
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	2000024c 	.word	0x2000024c

0800711c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007126:	2200      	movs	r2, #0
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff ffaa 	bl	8007084 <FATFS_LinkDriverEx>
 8007130:	4603      	mov	r3, r0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <std>:
 800713c:	2300      	movs	r3, #0
 800713e:	b510      	push	{r4, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	e9c0 3300 	strd	r3, r3, [r0]
 8007146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800714a:	6083      	str	r3, [r0, #8]
 800714c:	8181      	strh	r1, [r0, #12]
 800714e:	6643      	str	r3, [r0, #100]	; 0x64
 8007150:	81c2      	strh	r2, [r0, #14]
 8007152:	6183      	str	r3, [r0, #24]
 8007154:	4619      	mov	r1, r3
 8007156:	2208      	movs	r2, #8
 8007158:	305c      	adds	r0, #92	; 0x5c
 800715a:	f000 f9f7 	bl	800754c <memset>
 800715e:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <std+0x58>)
 8007160:	6263      	str	r3, [r4, #36]	; 0x24
 8007162:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <std+0x5c>)
 8007164:	62a3      	str	r3, [r4, #40]	; 0x28
 8007166:	4b0d      	ldr	r3, [pc, #52]	; (800719c <std+0x60>)
 8007168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800716a:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <std+0x64>)
 800716c:	6323      	str	r3, [r4, #48]	; 0x30
 800716e:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <std+0x68>)
 8007170:	6224      	str	r4, [r4, #32]
 8007172:	429c      	cmp	r4, r3
 8007174:	d006      	beq.n	8007184 <std+0x48>
 8007176:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800717a:	4294      	cmp	r4, r2
 800717c:	d002      	beq.n	8007184 <std+0x48>
 800717e:	33d0      	adds	r3, #208	; 0xd0
 8007180:	429c      	cmp	r4, r3
 8007182:	d105      	bne.n	8007190 <std+0x54>
 8007184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718c:	f000 ba56 	b.w	800763c <__retarget_lock_init_recursive>
 8007190:	bd10      	pop	{r4, pc}
 8007192:	bf00      	nop
 8007194:	0800739d 	.word	0x0800739d
 8007198:	080073bf 	.word	0x080073bf
 800719c:	080073f7 	.word	0x080073f7
 80071a0:	0800741b 	.word	0x0800741b
 80071a4:	20000258 	.word	0x20000258

080071a8 <stdio_exit_handler>:
 80071a8:	4a02      	ldr	r2, [pc, #8]	; (80071b4 <stdio_exit_handler+0xc>)
 80071aa:	4903      	ldr	r1, [pc, #12]	; (80071b8 <stdio_exit_handler+0x10>)
 80071ac:	4803      	ldr	r0, [pc, #12]	; (80071bc <stdio_exit_handler+0x14>)
 80071ae:	f000 b869 	b.w	8007284 <_fwalk_sglue>
 80071b2:	bf00      	nop
 80071b4:	2000000c 	.word	0x2000000c
 80071b8:	08007ee9 	.word	0x08007ee9
 80071bc:	20000018 	.word	0x20000018

080071c0 <cleanup_stdio>:
 80071c0:	6841      	ldr	r1, [r0, #4]
 80071c2:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <cleanup_stdio+0x34>)
 80071c4:	4299      	cmp	r1, r3
 80071c6:	b510      	push	{r4, lr}
 80071c8:	4604      	mov	r4, r0
 80071ca:	d001      	beq.n	80071d0 <cleanup_stdio+0x10>
 80071cc:	f000 fe8c 	bl	8007ee8 <_fflush_r>
 80071d0:	68a1      	ldr	r1, [r4, #8]
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <cleanup_stdio+0x38>)
 80071d4:	4299      	cmp	r1, r3
 80071d6:	d002      	beq.n	80071de <cleanup_stdio+0x1e>
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fe85 	bl	8007ee8 <_fflush_r>
 80071de:	68e1      	ldr	r1, [r4, #12]
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <cleanup_stdio+0x3c>)
 80071e2:	4299      	cmp	r1, r3
 80071e4:	d004      	beq.n	80071f0 <cleanup_stdio+0x30>
 80071e6:	4620      	mov	r0, r4
 80071e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ec:	f000 be7c 	b.w	8007ee8 <_fflush_r>
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	bf00      	nop
 80071f4:	20000258 	.word	0x20000258
 80071f8:	200002c0 	.word	0x200002c0
 80071fc:	20000328 	.word	0x20000328

08007200 <global_stdio_init.part.0>:
 8007200:	b510      	push	{r4, lr}
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <global_stdio_init.part.0+0x30>)
 8007204:	4c0b      	ldr	r4, [pc, #44]	; (8007234 <global_stdio_init.part.0+0x34>)
 8007206:	4a0c      	ldr	r2, [pc, #48]	; (8007238 <global_stdio_init.part.0+0x38>)
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	4620      	mov	r0, r4
 800720c:	2200      	movs	r2, #0
 800720e:	2104      	movs	r1, #4
 8007210:	f7ff ff94 	bl	800713c <std>
 8007214:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007218:	2201      	movs	r2, #1
 800721a:	2109      	movs	r1, #9
 800721c:	f7ff ff8e 	bl	800713c <std>
 8007220:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007224:	2202      	movs	r2, #2
 8007226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800722a:	2112      	movs	r1, #18
 800722c:	f7ff bf86 	b.w	800713c <std>
 8007230:	20000390 	.word	0x20000390
 8007234:	20000258 	.word	0x20000258
 8007238:	080071a9 	.word	0x080071a9

0800723c <__sfp_lock_acquire>:
 800723c:	4801      	ldr	r0, [pc, #4]	; (8007244 <__sfp_lock_acquire+0x8>)
 800723e:	f000 b9fe 	b.w	800763e <__retarget_lock_acquire_recursive>
 8007242:	bf00      	nop
 8007244:	20000399 	.word	0x20000399

08007248 <__sfp_lock_release>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__sfp_lock_release+0x8>)
 800724a:	f000 b9f9 	b.w	8007640 <__retarget_lock_release_recursive>
 800724e:	bf00      	nop
 8007250:	20000399 	.word	0x20000399

08007254 <__sinit>:
 8007254:	b510      	push	{r4, lr}
 8007256:	4604      	mov	r4, r0
 8007258:	f7ff fff0 	bl	800723c <__sfp_lock_acquire>
 800725c:	6a23      	ldr	r3, [r4, #32]
 800725e:	b11b      	cbz	r3, 8007268 <__sinit+0x14>
 8007260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007264:	f7ff bff0 	b.w	8007248 <__sfp_lock_release>
 8007268:	4b04      	ldr	r3, [pc, #16]	; (800727c <__sinit+0x28>)
 800726a:	6223      	str	r3, [r4, #32]
 800726c:	4b04      	ldr	r3, [pc, #16]	; (8007280 <__sinit+0x2c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f5      	bne.n	8007260 <__sinit+0xc>
 8007274:	f7ff ffc4 	bl	8007200 <global_stdio_init.part.0>
 8007278:	e7f2      	b.n	8007260 <__sinit+0xc>
 800727a:	bf00      	nop
 800727c:	080071c1 	.word	0x080071c1
 8007280:	20000390 	.word	0x20000390

08007284 <_fwalk_sglue>:
 8007284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007288:	4607      	mov	r7, r0
 800728a:	4688      	mov	r8, r1
 800728c:	4614      	mov	r4, r2
 800728e:	2600      	movs	r6, #0
 8007290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007294:	f1b9 0901 	subs.w	r9, r9, #1
 8007298:	d505      	bpl.n	80072a6 <_fwalk_sglue+0x22>
 800729a:	6824      	ldr	r4, [r4, #0]
 800729c:	2c00      	cmp	r4, #0
 800729e:	d1f7      	bne.n	8007290 <_fwalk_sglue+0xc>
 80072a0:	4630      	mov	r0, r6
 80072a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d907      	bls.n	80072bc <_fwalk_sglue+0x38>
 80072ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072b0:	3301      	adds	r3, #1
 80072b2:	d003      	beq.n	80072bc <_fwalk_sglue+0x38>
 80072b4:	4629      	mov	r1, r5
 80072b6:	4638      	mov	r0, r7
 80072b8:	47c0      	blx	r8
 80072ba:	4306      	orrs	r6, r0
 80072bc:	3568      	adds	r5, #104	; 0x68
 80072be:	e7e9      	b.n	8007294 <_fwalk_sglue+0x10>

080072c0 <iprintf>:
 80072c0:	b40f      	push	{r0, r1, r2, r3}
 80072c2:	b507      	push	{r0, r1, r2, lr}
 80072c4:	4906      	ldr	r1, [pc, #24]	; (80072e0 <iprintf+0x20>)
 80072c6:	ab04      	add	r3, sp, #16
 80072c8:	6808      	ldr	r0, [r1, #0]
 80072ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ce:	6881      	ldr	r1, [r0, #8]
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	f000 fad9 	bl	8007888 <_vfiprintf_r>
 80072d6:	b003      	add	sp, #12
 80072d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072dc:	b004      	add	sp, #16
 80072de:	4770      	bx	lr
 80072e0:	20000064 	.word	0x20000064

080072e4 <_puts_r>:
 80072e4:	6a03      	ldr	r3, [r0, #32]
 80072e6:	b570      	push	{r4, r5, r6, lr}
 80072e8:	6884      	ldr	r4, [r0, #8]
 80072ea:	4605      	mov	r5, r0
 80072ec:	460e      	mov	r6, r1
 80072ee:	b90b      	cbnz	r3, 80072f4 <_puts_r+0x10>
 80072f0:	f7ff ffb0 	bl	8007254 <__sinit>
 80072f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072f6:	07db      	lsls	r3, r3, #31
 80072f8:	d405      	bmi.n	8007306 <_puts_r+0x22>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	0598      	lsls	r0, r3, #22
 80072fe:	d402      	bmi.n	8007306 <_puts_r+0x22>
 8007300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007302:	f000 f99c 	bl	800763e <__retarget_lock_acquire_recursive>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	0719      	lsls	r1, r3, #28
 800730a:	d513      	bpl.n	8007334 <_puts_r+0x50>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	b18b      	cbz	r3, 8007334 <_puts_r+0x50>
 8007310:	3e01      	subs	r6, #1
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007318:	3b01      	subs	r3, #1
 800731a:	60a3      	str	r3, [r4, #8]
 800731c:	b9e9      	cbnz	r1, 800735a <_puts_r+0x76>
 800731e:	2b00      	cmp	r3, #0
 8007320:	da2e      	bge.n	8007380 <_puts_r+0x9c>
 8007322:	4622      	mov	r2, r4
 8007324:	210a      	movs	r1, #10
 8007326:	4628      	mov	r0, r5
 8007328:	f000 f87b 	bl	8007422 <__swbuf_r>
 800732c:	3001      	adds	r0, #1
 800732e:	d007      	beq.n	8007340 <_puts_r+0x5c>
 8007330:	250a      	movs	r5, #10
 8007332:	e007      	b.n	8007344 <_puts_r+0x60>
 8007334:	4621      	mov	r1, r4
 8007336:	4628      	mov	r0, r5
 8007338:	f000 f8b0 	bl	800749c <__swsetup_r>
 800733c:	2800      	cmp	r0, #0
 800733e:	d0e7      	beq.n	8007310 <_puts_r+0x2c>
 8007340:	f04f 35ff 	mov.w	r5, #4294967295
 8007344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007346:	07da      	lsls	r2, r3, #31
 8007348:	d405      	bmi.n	8007356 <_puts_r+0x72>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	059b      	lsls	r3, r3, #22
 800734e:	d402      	bmi.n	8007356 <_puts_r+0x72>
 8007350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007352:	f000 f975 	bl	8007640 <__retarget_lock_release_recursive>
 8007356:	4628      	mov	r0, r5
 8007358:	bd70      	pop	{r4, r5, r6, pc}
 800735a:	2b00      	cmp	r3, #0
 800735c:	da04      	bge.n	8007368 <_puts_r+0x84>
 800735e:	69a2      	ldr	r2, [r4, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	dc06      	bgt.n	8007372 <_puts_r+0x8e>
 8007364:	290a      	cmp	r1, #10
 8007366:	d004      	beq.n	8007372 <_puts_r+0x8e>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	7019      	strb	r1, [r3, #0]
 8007370:	e7cf      	b.n	8007312 <_puts_r+0x2e>
 8007372:	4622      	mov	r2, r4
 8007374:	4628      	mov	r0, r5
 8007376:	f000 f854 	bl	8007422 <__swbuf_r>
 800737a:	3001      	adds	r0, #1
 800737c:	d1c9      	bne.n	8007312 <_puts_r+0x2e>
 800737e:	e7df      	b.n	8007340 <_puts_r+0x5c>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	250a      	movs	r5, #10
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	6022      	str	r2, [r4, #0]
 8007388:	701d      	strb	r5, [r3, #0]
 800738a:	e7db      	b.n	8007344 <_puts_r+0x60>

0800738c <puts>:
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <puts+0xc>)
 800738e:	4601      	mov	r1, r0
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	f7ff bfa7 	b.w	80072e4 <_puts_r>
 8007396:	bf00      	nop
 8007398:	20000064 	.word	0x20000064

0800739c <__sread>:
 800739c:	b510      	push	{r4, lr}
 800739e:	460c      	mov	r4, r1
 80073a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a4:	f000 f8fc 	bl	80075a0 <_read_r>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	bfab      	itete	ge
 80073ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ae:	89a3      	ldrhlt	r3, [r4, #12]
 80073b0:	181b      	addge	r3, r3, r0
 80073b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073b6:	bfac      	ite	ge
 80073b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ba:	81a3      	strhlt	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__swrite>:
 80073be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	461f      	mov	r7, r3
 80073c4:	898b      	ldrh	r3, [r1, #12]
 80073c6:	05db      	lsls	r3, r3, #23
 80073c8:	4605      	mov	r5, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	4616      	mov	r6, r2
 80073ce:	d505      	bpl.n	80073dc <__swrite+0x1e>
 80073d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d4:	2302      	movs	r3, #2
 80073d6:	2200      	movs	r2, #0
 80073d8:	f000 f8d0 	bl	800757c <_lseek_r>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	4632      	mov	r2, r6
 80073ea:	463b      	mov	r3, r7
 80073ec:	4628      	mov	r0, r5
 80073ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	f000 b8e7 	b.w	80075c4 <_write_r>

080073f6 <__sseek>:
 80073f6:	b510      	push	{r4, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fe:	f000 f8bd 	bl	800757c <_lseek_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	bf15      	itete	ne
 8007408:	6560      	strne	r0, [r4, #84]	; 0x54
 800740a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800740e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007412:	81a3      	strheq	r3, [r4, #12]
 8007414:	bf18      	it	ne
 8007416:	81a3      	strhne	r3, [r4, #12]
 8007418:	bd10      	pop	{r4, pc}

0800741a <__sclose>:
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	f000 b89d 	b.w	800755c <_close_r>

08007422 <__swbuf_r>:
 8007422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007424:	460e      	mov	r6, r1
 8007426:	4614      	mov	r4, r2
 8007428:	4605      	mov	r5, r0
 800742a:	b118      	cbz	r0, 8007434 <__swbuf_r+0x12>
 800742c:	6a03      	ldr	r3, [r0, #32]
 800742e:	b90b      	cbnz	r3, 8007434 <__swbuf_r+0x12>
 8007430:	f7ff ff10 	bl	8007254 <__sinit>
 8007434:	69a3      	ldr	r3, [r4, #24]
 8007436:	60a3      	str	r3, [r4, #8]
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	071a      	lsls	r2, r3, #28
 800743c:	d525      	bpl.n	800748a <__swbuf_r+0x68>
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	b31b      	cbz	r3, 800748a <__swbuf_r+0x68>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	6922      	ldr	r2, [r4, #16]
 8007446:	1a98      	subs	r0, r3, r2
 8007448:	6963      	ldr	r3, [r4, #20]
 800744a:	b2f6      	uxtb	r6, r6
 800744c:	4283      	cmp	r3, r0
 800744e:	4637      	mov	r7, r6
 8007450:	dc04      	bgt.n	800745c <__swbuf_r+0x3a>
 8007452:	4621      	mov	r1, r4
 8007454:	4628      	mov	r0, r5
 8007456:	f000 fd47 	bl	8007ee8 <_fflush_r>
 800745a:	b9e0      	cbnz	r0, 8007496 <__swbuf_r+0x74>
 800745c:	68a3      	ldr	r3, [r4, #8]
 800745e:	3b01      	subs	r3, #1
 8007460:	60a3      	str	r3, [r4, #8]
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	6022      	str	r2, [r4, #0]
 8007468:	701e      	strb	r6, [r3, #0]
 800746a:	6962      	ldr	r2, [r4, #20]
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	429a      	cmp	r2, r3
 8007470:	d004      	beq.n	800747c <__swbuf_r+0x5a>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	07db      	lsls	r3, r3, #31
 8007476:	d506      	bpl.n	8007486 <__swbuf_r+0x64>
 8007478:	2e0a      	cmp	r6, #10
 800747a:	d104      	bne.n	8007486 <__swbuf_r+0x64>
 800747c:	4621      	mov	r1, r4
 800747e:	4628      	mov	r0, r5
 8007480:	f000 fd32 	bl	8007ee8 <_fflush_r>
 8007484:	b938      	cbnz	r0, 8007496 <__swbuf_r+0x74>
 8007486:	4638      	mov	r0, r7
 8007488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748a:	4621      	mov	r1, r4
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f805 	bl	800749c <__swsetup_r>
 8007492:	2800      	cmp	r0, #0
 8007494:	d0d5      	beq.n	8007442 <__swbuf_r+0x20>
 8007496:	f04f 37ff 	mov.w	r7, #4294967295
 800749a:	e7f4      	b.n	8007486 <__swbuf_r+0x64>

0800749c <__swsetup_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4b2a      	ldr	r3, [pc, #168]	; (8007548 <__swsetup_r+0xac>)
 80074a0:	4605      	mov	r5, r0
 80074a2:	6818      	ldr	r0, [r3, #0]
 80074a4:	460c      	mov	r4, r1
 80074a6:	b118      	cbz	r0, 80074b0 <__swsetup_r+0x14>
 80074a8:	6a03      	ldr	r3, [r0, #32]
 80074aa:	b90b      	cbnz	r3, 80074b0 <__swsetup_r+0x14>
 80074ac:	f7ff fed2 	bl	8007254 <__sinit>
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074b6:	0718      	lsls	r0, r3, #28
 80074b8:	d422      	bmi.n	8007500 <__swsetup_r+0x64>
 80074ba:	06d9      	lsls	r1, r3, #27
 80074bc:	d407      	bmi.n	80074ce <__swsetup_r+0x32>
 80074be:	2309      	movs	r3, #9
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	e034      	b.n	8007538 <__swsetup_r+0x9c>
 80074ce:	0758      	lsls	r0, r3, #29
 80074d0:	d512      	bpl.n	80074f8 <__swsetup_r+0x5c>
 80074d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d4:	b141      	cbz	r1, 80074e8 <__swsetup_r+0x4c>
 80074d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074da:	4299      	cmp	r1, r3
 80074dc:	d002      	beq.n	80074e4 <__swsetup_r+0x48>
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 f8b0 	bl	8007644 <_free_r>
 80074e4:	2300      	movs	r3, #0
 80074e6:	6363      	str	r3, [r4, #52]	; 0x34
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	2300      	movs	r3, #0
 80074f2:	6063      	str	r3, [r4, #4]
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	f043 0308 	orr.w	r3, r3, #8
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	b94b      	cbnz	r3, 8007518 <__swsetup_r+0x7c>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800750a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750e:	d003      	beq.n	8007518 <__swsetup_r+0x7c>
 8007510:	4621      	mov	r1, r4
 8007512:	4628      	mov	r0, r5
 8007514:	f000 fd36 	bl	8007f84 <__smakebuf_r>
 8007518:	89a0      	ldrh	r0, [r4, #12]
 800751a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800751e:	f010 0301 	ands.w	r3, r0, #1
 8007522:	d00a      	beq.n	800753a <__swsetup_r+0x9e>
 8007524:	2300      	movs	r3, #0
 8007526:	60a3      	str	r3, [r4, #8]
 8007528:	6963      	ldr	r3, [r4, #20]
 800752a:	425b      	negs	r3, r3
 800752c:	61a3      	str	r3, [r4, #24]
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	b943      	cbnz	r3, 8007544 <__swsetup_r+0xa8>
 8007532:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007536:	d1c4      	bne.n	80074c2 <__swsetup_r+0x26>
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	0781      	lsls	r1, r0, #30
 800753c:	bf58      	it	pl
 800753e:	6963      	ldrpl	r3, [r4, #20]
 8007540:	60a3      	str	r3, [r4, #8]
 8007542:	e7f4      	b.n	800752e <__swsetup_r+0x92>
 8007544:	2000      	movs	r0, #0
 8007546:	e7f7      	b.n	8007538 <__swsetup_r+0x9c>
 8007548:	20000064 	.word	0x20000064

0800754c <memset>:
 800754c:	4402      	add	r2, r0
 800754e:	4603      	mov	r3, r0
 8007550:	4293      	cmp	r3, r2
 8007552:	d100      	bne.n	8007556 <memset+0xa>
 8007554:	4770      	bx	lr
 8007556:	f803 1b01 	strb.w	r1, [r3], #1
 800755a:	e7f9      	b.n	8007550 <memset+0x4>

0800755c <_close_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d06      	ldr	r5, [pc, #24]	; (8007578 <_close_r+0x1c>)
 8007560:	2300      	movs	r3, #0
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7f9 fca3 	bl	8000eb2 <_close>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_close_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_close_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20000394 	.word	0x20000394

0800757c <_lseek_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	; (800759c <_lseek_r+0x20>)
 8007580:	4604      	mov	r4, r0
 8007582:	4608      	mov	r0, r1
 8007584:	4611      	mov	r1, r2
 8007586:	2200      	movs	r2, #0
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7f9 fcb8 	bl	8000f00 <_lseek>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_lseek_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_lseek_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20000394 	.word	0x20000394

080075a0 <_read_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d07      	ldr	r5, [pc, #28]	; (80075c0 <_read_r+0x20>)
 80075a4:	4604      	mov	r4, r0
 80075a6:	4608      	mov	r0, r1
 80075a8:	4611      	mov	r1, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7f9 fc62 	bl	8000e78 <_read>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_read_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_read_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20000394 	.word	0x20000394

080075c4 <_write_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d07      	ldr	r5, [pc, #28]	; (80075e4 <_write_r+0x20>)
 80075c8:	4604      	mov	r4, r0
 80075ca:	4608      	mov	r0, r1
 80075cc:	4611      	mov	r1, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	602a      	str	r2, [r5, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f7f9 fa98 	bl	8000b08 <_write>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_write_r+0x1e>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_write_r+0x1e>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20000394 	.word	0x20000394

080075e8 <__errno>:
 80075e8:	4b01      	ldr	r3, [pc, #4]	; (80075f0 <__errno+0x8>)
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20000064 	.word	0x20000064

080075f4 <__libc_init_array>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4d0d      	ldr	r5, [pc, #52]	; (800762c <__libc_init_array+0x38>)
 80075f8:	4c0d      	ldr	r4, [pc, #52]	; (8007630 <__libc_init_array+0x3c>)
 80075fa:	1b64      	subs	r4, r4, r5
 80075fc:	10a4      	asrs	r4, r4, #2
 80075fe:	2600      	movs	r6, #0
 8007600:	42a6      	cmp	r6, r4
 8007602:	d109      	bne.n	8007618 <__libc_init_array+0x24>
 8007604:	4d0b      	ldr	r5, [pc, #44]	; (8007634 <__libc_init_array+0x40>)
 8007606:	4c0c      	ldr	r4, [pc, #48]	; (8007638 <__libc_init_array+0x44>)
 8007608:	f000 fd2a 	bl	8008060 <_init>
 800760c:	1b64      	subs	r4, r4, r5
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	2600      	movs	r6, #0
 8007612:	42a6      	cmp	r6, r4
 8007614:	d105      	bne.n	8007622 <__libc_init_array+0x2e>
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	f855 3b04 	ldr.w	r3, [r5], #4
 800761c:	4798      	blx	r3
 800761e:	3601      	adds	r6, #1
 8007620:	e7ee      	b.n	8007600 <__libc_init_array+0xc>
 8007622:	f855 3b04 	ldr.w	r3, [r5], #4
 8007626:	4798      	blx	r3
 8007628:	3601      	adds	r6, #1
 800762a:	e7f2      	b.n	8007612 <__libc_init_array+0x1e>
 800762c:	08008364 	.word	0x08008364
 8007630:	08008364 	.word	0x08008364
 8007634:	08008364 	.word	0x08008364
 8007638:	08008368 	.word	0x08008368

0800763c <__retarget_lock_init_recursive>:
 800763c:	4770      	bx	lr

0800763e <__retarget_lock_acquire_recursive>:
 800763e:	4770      	bx	lr

08007640 <__retarget_lock_release_recursive>:
 8007640:	4770      	bx	lr
	...

08007644 <_free_r>:
 8007644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007646:	2900      	cmp	r1, #0
 8007648:	d044      	beq.n	80076d4 <_free_r+0x90>
 800764a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764e:	9001      	str	r0, [sp, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	f1a1 0404 	sub.w	r4, r1, #4
 8007656:	bfb8      	it	lt
 8007658:	18e4      	addlt	r4, r4, r3
 800765a:	f000 f8df 	bl	800781c <__malloc_lock>
 800765e:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <_free_r+0x94>)
 8007660:	9801      	ldr	r0, [sp, #4]
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	b933      	cbnz	r3, 8007674 <_free_r+0x30>
 8007666:	6063      	str	r3, [r4, #4]
 8007668:	6014      	str	r4, [r2, #0]
 800766a:	b003      	add	sp, #12
 800766c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007670:	f000 b8da 	b.w	8007828 <__malloc_unlock>
 8007674:	42a3      	cmp	r3, r4
 8007676:	d908      	bls.n	800768a <_free_r+0x46>
 8007678:	6825      	ldr	r5, [r4, #0]
 800767a:	1961      	adds	r1, r4, r5
 800767c:	428b      	cmp	r3, r1
 800767e:	bf01      	itttt	eq
 8007680:	6819      	ldreq	r1, [r3, #0]
 8007682:	685b      	ldreq	r3, [r3, #4]
 8007684:	1949      	addeq	r1, r1, r5
 8007686:	6021      	streq	r1, [r4, #0]
 8007688:	e7ed      	b.n	8007666 <_free_r+0x22>
 800768a:	461a      	mov	r2, r3
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	b10b      	cbz	r3, 8007694 <_free_r+0x50>
 8007690:	42a3      	cmp	r3, r4
 8007692:	d9fa      	bls.n	800768a <_free_r+0x46>
 8007694:	6811      	ldr	r1, [r2, #0]
 8007696:	1855      	adds	r5, r2, r1
 8007698:	42a5      	cmp	r5, r4
 800769a:	d10b      	bne.n	80076b4 <_free_r+0x70>
 800769c:	6824      	ldr	r4, [r4, #0]
 800769e:	4421      	add	r1, r4
 80076a0:	1854      	adds	r4, r2, r1
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	6011      	str	r1, [r2, #0]
 80076a6:	d1e0      	bne.n	800766a <_free_r+0x26>
 80076a8:	681c      	ldr	r4, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	6053      	str	r3, [r2, #4]
 80076ae:	440c      	add	r4, r1
 80076b0:	6014      	str	r4, [r2, #0]
 80076b2:	e7da      	b.n	800766a <_free_r+0x26>
 80076b4:	d902      	bls.n	80076bc <_free_r+0x78>
 80076b6:	230c      	movs	r3, #12
 80076b8:	6003      	str	r3, [r0, #0]
 80076ba:	e7d6      	b.n	800766a <_free_r+0x26>
 80076bc:	6825      	ldr	r5, [r4, #0]
 80076be:	1961      	adds	r1, r4, r5
 80076c0:	428b      	cmp	r3, r1
 80076c2:	bf04      	itt	eq
 80076c4:	6819      	ldreq	r1, [r3, #0]
 80076c6:	685b      	ldreq	r3, [r3, #4]
 80076c8:	6063      	str	r3, [r4, #4]
 80076ca:	bf04      	itt	eq
 80076cc:	1949      	addeq	r1, r1, r5
 80076ce:	6021      	streq	r1, [r4, #0]
 80076d0:	6054      	str	r4, [r2, #4]
 80076d2:	e7ca      	b.n	800766a <_free_r+0x26>
 80076d4:	b003      	add	sp, #12
 80076d6:	bd30      	pop	{r4, r5, pc}
 80076d8:	2000039c 	.word	0x2000039c

080076dc <sbrk_aligned>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4e0e      	ldr	r6, [pc, #56]	; (8007718 <sbrk_aligned+0x3c>)
 80076e0:	460c      	mov	r4, r1
 80076e2:	6831      	ldr	r1, [r6, #0]
 80076e4:	4605      	mov	r5, r0
 80076e6:	b911      	cbnz	r1, 80076ee <sbrk_aligned+0x12>
 80076e8:	f000 fcaa 	bl	8008040 <_sbrk_r>
 80076ec:	6030      	str	r0, [r6, #0]
 80076ee:	4621      	mov	r1, r4
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 fca5 	bl	8008040 <_sbrk_r>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d00a      	beq.n	8007710 <sbrk_aligned+0x34>
 80076fa:	1cc4      	adds	r4, r0, #3
 80076fc:	f024 0403 	bic.w	r4, r4, #3
 8007700:	42a0      	cmp	r0, r4
 8007702:	d007      	beq.n	8007714 <sbrk_aligned+0x38>
 8007704:	1a21      	subs	r1, r4, r0
 8007706:	4628      	mov	r0, r5
 8007708:	f000 fc9a 	bl	8008040 <_sbrk_r>
 800770c:	3001      	adds	r0, #1
 800770e:	d101      	bne.n	8007714 <sbrk_aligned+0x38>
 8007710:	f04f 34ff 	mov.w	r4, #4294967295
 8007714:	4620      	mov	r0, r4
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	200003a0 	.word	0x200003a0

0800771c <_malloc_r>:
 800771c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007720:	1ccd      	adds	r5, r1, #3
 8007722:	f025 0503 	bic.w	r5, r5, #3
 8007726:	3508      	adds	r5, #8
 8007728:	2d0c      	cmp	r5, #12
 800772a:	bf38      	it	cc
 800772c:	250c      	movcc	r5, #12
 800772e:	2d00      	cmp	r5, #0
 8007730:	4607      	mov	r7, r0
 8007732:	db01      	blt.n	8007738 <_malloc_r+0x1c>
 8007734:	42a9      	cmp	r1, r5
 8007736:	d905      	bls.n	8007744 <_malloc_r+0x28>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	2600      	movs	r6, #0
 800773e:	4630      	mov	r0, r6
 8007740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007818 <_malloc_r+0xfc>
 8007748:	f000 f868 	bl	800781c <__malloc_lock>
 800774c:	f8d8 3000 	ldr.w	r3, [r8]
 8007750:	461c      	mov	r4, r3
 8007752:	bb5c      	cbnz	r4, 80077ac <_malloc_r+0x90>
 8007754:	4629      	mov	r1, r5
 8007756:	4638      	mov	r0, r7
 8007758:	f7ff ffc0 	bl	80076dc <sbrk_aligned>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	4604      	mov	r4, r0
 8007760:	d155      	bne.n	800780e <_malloc_r+0xf2>
 8007762:	f8d8 4000 	ldr.w	r4, [r8]
 8007766:	4626      	mov	r6, r4
 8007768:	2e00      	cmp	r6, #0
 800776a:	d145      	bne.n	80077f8 <_malloc_r+0xdc>
 800776c:	2c00      	cmp	r4, #0
 800776e:	d048      	beq.n	8007802 <_malloc_r+0xe6>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	4631      	mov	r1, r6
 8007774:	4638      	mov	r0, r7
 8007776:	eb04 0903 	add.w	r9, r4, r3
 800777a:	f000 fc61 	bl	8008040 <_sbrk_r>
 800777e:	4581      	cmp	r9, r0
 8007780:	d13f      	bne.n	8007802 <_malloc_r+0xe6>
 8007782:	6821      	ldr	r1, [r4, #0]
 8007784:	1a6d      	subs	r5, r5, r1
 8007786:	4629      	mov	r1, r5
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ffa7 	bl	80076dc <sbrk_aligned>
 800778e:	3001      	adds	r0, #1
 8007790:	d037      	beq.n	8007802 <_malloc_r+0xe6>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	442b      	add	r3, r5
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	f8d8 3000 	ldr.w	r3, [r8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d038      	beq.n	8007812 <_malloc_r+0xf6>
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	42a2      	cmp	r2, r4
 80077a4:	d12b      	bne.n	80077fe <_malloc_r+0xe2>
 80077a6:	2200      	movs	r2, #0
 80077a8:	605a      	str	r2, [r3, #4]
 80077aa:	e00f      	b.n	80077cc <_malloc_r+0xb0>
 80077ac:	6822      	ldr	r2, [r4, #0]
 80077ae:	1b52      	subs	r2, r2, r5
 80077b0:	d41f      	bmi.n	80077f2 <_malloc_r+0xd6>
 80077b2:	2a0b      	cmp	r2, #11
 80077b4:	d917      	bls.n	80077e6 <_malloc_r+0xca>
 80077b6:	1961      	adds	r1, r4, r5
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	6025      	str	r5, [r4, #0]
 80077bc:	bf18      	it	ne
 80077be:	6059      	strne	r1, [r3, #4]
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	bf08      	it	eq
 80077c4:	f8c8 1000 	streq.w	r1, [r8]
 80077c8:	5162      	str	r2, [r4, r5]
 80077ca:	604b      	str	r3, [r1, #4]
 80077cc:	4638      	mov	r0, r7
 80077ce:	f104 060b 	add.w	r6, r4, #11
 80077d2:	f000 f829 	bl	8007828 <__malloc_unlock>
 80077d6:	f026 0607 	bic.w	r6, r6, #7
 80077da:	1d23      	adds	r3, r4, #4
 80077dc:	1af2      	subs	r2, r6, r3
 80077de:	d0ae      	beq.n	800773e <_malloc_r+0x22>
 80077e0:	1b9b      	subs	r3, r3, r6
 80077e2:	50a3      	str	r3, [r4, r2]
 80077e4:	e7ab      	b.n	800773e <_malloc_r+0x22>
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	6862      	ldr	r2, [r4, #4]
 80077ea:	d1dd      	bne.n	80077a8 <_malloc_r+0x8c>
 80077ec:	f8c8 2000 	str.w	r2, [r8]
 80077f0:	e7ec      	b.n	80077cc <_malloc_r+0xb0>
 80077f2:	4623      	mov	r3, r4
 80077f4:	6864      	ldr	r4, [r4, #4]
 80077f6:	e7ac      	b.n	8007752 <_malloc_r+0x36>
 80077f8:	4634      	mov	r4, r6
 80077fa:	6876      	ldr	r6, [r6, #4]
 80077fc:	e7b4      	b.n	8007768 <_malloc_r+0x4c>
 80077fe:	4613      	mov	r3, r2
 8007800:	e7cc      	b.n	800779c <_malloc_r+0x80>
 8007802:	230c      	movs	r3, #12
 8007804:	603b      	str	r3, [r7, #0]
 8007806:	4638      	mov	r0, r7
 8007808:	f000 f80e 	bl	8007828 <__malloc_unlock>
 800780c:	e797      	b.n	800773e <_malloc_r+0x22>
 800780e:	6025      	str	r5, [r4, #0]
 8007810:	e7dc      	b.n	80077cc <_malloc_r+0xb0>
 8007812:	605b      	str	r3, [r3, #4]
 8007814:	deff      	udf	#255	; 0xff
 8007816:	bf00      	nop
 8007818:	2000039c 	.word	0x2000039c

0800781c <__malloc_lock>:
 800781c:	4801      	ldr	r0, [pc, #4]	; (8007824 <__malloc_lock+0x8>)
 800781e:	f7ff bf0e 	b.w	800763e <__retarget_lock_acquire_recursive>
 8007822:	bf00      	nop
 8007824:	20000398 	.word	0x20000398

08007828 <__malloc_unlock>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__malloc_unlock+0x8>)
 800782a:	f7ff bf09 	b.w	8007640 <__retarget_lock_release_recursive>
 800782e:	bf00      	nop
 8007830:	20000398 	.word	0x20000398

08007834 <__sfputc_r>:
 8007834:	6893      	ldr	r3, [r2, #8]
 8007836:	3b01      	subs	r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	b410      	push	{r4}
 800783c:	6093      	str	r3, [r2, #8]
 800783e:	da08      	bge.n	8007852 <__sfputc_r+0x1e>
 8007840:	6994      	ldr	r4, [r2, #24]
 8007842:	42a3      	cmp	r3, r4
 8007844:	db01      	blt.n	800784a <__sfputc_r+0x16>
 8007846:	290a      	cmp	r1, #10
 8007848:	d103      	bne.n	8007852 <__sfputc_r+0x1e>
 800784a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784e:	f7ff bde8 	b.w	8007422 <__swbuf_r>
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	1c58      	adds	r0, r3, #1
 8007856:	6010      	str	r0, [r2, #0]
 8007858:	7019      	strb	r1, [r3, #0]
 800785a:	4608      	mov	r0, r1
 800785c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007860:	4770      	bx	lr

08007862 <__sfputs_r>:
 8007862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	4614      	mov	r4, r2
 800786a:	18d5      	adds	r5, r2, r3
 800786c:	42ac      	cmp	r4, r5
 800786e:	d101      	bne.n	8007874 <__sfputs_r+0x12>
 8007870:	2000      	movs	r0, #0
 8007872:	e007      	b.n	8007884 <__sfputs_r+0x22>
 8007874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007878:	463a      	mov	r2, r7
 800787a:	4630      	mov	r0, r6
 800787c:	f7ff ffda 	bl	8007834 <__sfputc_r>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d1f3      	bne.n	800786c <__sfputs_r+0xa>
 8007884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007888 <_vfiprintf_r>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	460d      	mov	r5, r1
 800788e:	b09d      	sub	sp, #116	; 0x74
 8007890:	4614      	mov	r4, r2
 8007892:	4698      	mov	r8, r3
 8007894:	4606      	mov	r6, r0
 8007896:	b118      	cbz	r0, 80078a0 <_vfiprintf_r+0x18>
 8007898:	6a03      	ldr	r3, [r0, #32]
 800789a:	b90b      	cbnz	r3, 80078a0 <_vfiprintf_r+0x18>
 800789c:	f7ff fcda 	bl	8007254 <__sinit>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ae:	f7ff fec6 	bl	800763e <__retarget_lock_acquire_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	071b      	lsls	r3, r3, #28
 80078b6:	d501      	bpl.n	80078bc <_vfiprintf_r+0x34>
 80078b8:	692b      	ldr	r3, [r5, #16]
 80078ba:	b99b      	cbnz	r3, 80078e4 <_vfiprintf_r+0x5c>
 80078bc:	4629      	mov	r1, r5
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff fdec 	bl	800749c <__swsetup_r>
 80078c4:	b170      	cbz	r0, 80078e4 <_vfiprintf_r+0x5c>
 80078c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c8:	07dc      	lsls	r4, r3, #31
 80078ca:	d504      	bpl.n	80078d6 <_vfiprintf_r+0x4e>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	b01d      	add	sp, #116	; 0x74
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d4f7      	bmi.n	80078cc <_vfiprintf_r+0x44>
 80078dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078de:	f7ff feaf 	bl	8007640 <__retarget_lock_release_recursive>
 80078e2:	e7f3      	b.n	80078cc <_vfiprintf_r+0x44>
 80078e4:	2300      	movs	r3, #0
 80078e6:	9309      	str	r3, [sp, #36]	; 0x24
 80078e8:	2320      	movs	r3, #32
 80078ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f2:	2330      	movs	r3, #48	; 0x30
 80078f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007aa8 <_vfiprintf_r+0x220>
 80078f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078fc:	f04f 0901 	mov.w	r9, #1
 8007900:	4623      	mov	r3, r4
 8007902:	469a      	mov	sl, r3
 8007904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007908:	b10a      	cbz	r2, 800790e <_vfiprintf_r+0x86>
 800790a:	2a25      	cmp	r2, #37	; 0x25
 800790c:	d1f9      	bne.n	8007902 <_vfiprintf_r+0x7a>
 800790e:	ebba 0b04 	subs.w	fp, sl, r4
 8007912:	d00b      	beq.n	800792c <_vfiprintf_r+0xa4>
 8007914:	465b      	mov	r3, fp
 8007916:	4622      	mov	r2, r4
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa1 	bl	8007862 <__sfputs_r>
 8007920:	3001      	adds	r0, #1
 8007922:	f000 80a9 	beq.w	8007a78 <_vfiprintf_r+0x1f0>
 8007926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007928:	445a      	add	r2, fp
 800792a:	9209      	str	r2, [sp, #36]	; 0x24
 800792c:	f89a 3000 	ldrb.w	r3, [sl]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80a1 	beq.w	8007a78 <_vfiprintf_r+0x1f0>
 8007936:	2300      	movs	r3, #0
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007940:	f10a 0a01 	add.w	sl, sl, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800794c:	931a      	str	r3, [sp, #104]	; 0x68
 800794e:	4654      	mov	r4, sl
 8007950:	2205      	movs	r2, #5
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	4854      	ldr	r0, [pc, #336]	; (8007aa8 <_vfiprintf_r+0x220>)
 8007958:	f7f8 fc42 	bl	80001e0 <memchr>
 800795c:	9a04      	ldr	r2, [sp, #16]
 800795e:	b9d8      	cbnz	r0, 8007998 <_vfiprintf_r+0x110>
 8007960:	06d1      	lsls	r1, r2, #27
 8007962:	bf44      	itt	mi
 8007964:	2320      	movmi	r3, #32
 8007966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800796a:	0713      	lsls	r3, r2, #28
 800796c:	bf44      	itt	mi
 800796e:	232b      	movmi	r3, #43	; 0x2b
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b2a      	cmp	r3, #42	; 0x2a
 800797a:	d015      	beq.n	80079a8 <_vfiprintf_r+0x120>
 800797c:	9a07      	ldr	r2, [sp, #28]
 800797e:	4654      	mov	r4, sl
 8007980:	2000      	movs	r0, #0
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	4621      	mov	r1, r4
 8007988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798c:	3b30      	subs	r3, #48	; 0x30
 800798e:	2b09      	cmp	r3, #9
 8007990:	d94d      	bls.n	8007a2e <_vfiprintf_r+0x1a6>
 8007992:	b1b0      	cbz	r0, 80079c2 <_vfiprintf_r+0x13a>
 8007994:	9207      	str	r2, [sp, #28]
 8007996:	e014      	b.n	80079c2 <_vfiprintf_r+0x13a>
 8007998:	eba0 0308 	sub.w	r3, r0, r8
 800799c:	fa09 f303 	lsl.w	r3, r9, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	46a2      	mov	sl, r4
 80079a6:	e7d2      	b.n	800794e <_vfiprintf_r+0xc6>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d19      	adds	r1, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfbb      	ittet	lt
 80079b4:	425b      	neglt	r3, r3
 80079b6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ba:	9307      	strge	r3, [sp, #28]
 80079bc:	9307      	strlt	r3, [sp, #28]
 80079be:	bfb8      	it	lt
 80079c0:	9204      	strlt	r2, [sp, #16]
 80079c2:	7823      	ldrb	r3, [r4, #0]
 80079c4:	2b2e      	cmp	r3, #46	; 0x2e
 80079c6:	d10c      	bne.n	80079e2 <_vfiprintf_r+0x15a>
 80079c8:	7863      	ldrb	r3, [r4, #1]
 80079ca:	2b2a      	cmp	r3, #42	; 0x2a
 80079cc:	d134      	bne.n	8007a38 <_vfiprintf_r+0x1b0>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9203      	str	r2, [sp, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	f04f 33ff 	movlt.w	r3, #4294967295
 80079de:	3402      	adds	r4, #2
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ab8 <_vfiprintf_r+0x230>
 80079e6:	7821      	ldrb	r1, [r4, #0]
 80079e8:	2203      	movs	r2, #3
 80079ea:	4650      	mov	r0, sl
 80079ec:	f7f8 fbf8 	bl	80001e0 <memchr>
 80079f0:	b138      	cbz	r0, 8007a02 <_vfiprintf_r+0x17a>
 80079f2:	9b04      	ldr	r3, [sp, #16]
 80079f4:	eba0 000a 	sub.w	r0, r0, sl
 80079f8:	2240      	movs	r2, #64	; 0x40
 80079fa:	4082      	lsls	r2, r0
 80079fc:	4313      	orrs	r3, r2
 80079fe:	3401      	adds	r4, #1
 8007a00:	9304      	str	r3, [sp, #16]
 8007a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a06:	4829      	ldr	r0, [pc, #164]	; (8007aac <_vfiprintf_r+0x224>)
 8007a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0c:	2206      	movs	r2, #6
 8007a0e:	f7f8 fbe7 	bl	80001e0 <memchr>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d03f      	beq.n	8007a96 <_vfiprintf_r+0x20e>
 8007a16:	4b26      	ldr	r3, [pc, #152]	; (8007ab0 <_vfiprintf_r+0x228>)
 8007a18:	bb1b      	cbnz	r3, 8007a62 <_vfiprintf_r+0x1da>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	3307      	adds	r3, #7
 8007a1e:	f023 0307 	bic.w	r3, r3, #7
 8007a22:	3308      	adds	r3, #8
 8007a24:	9303      	str	r3, [sp, #12]
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	443b      	add	r3, r7
 8007a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2c:	e768      	b.n	8007900 <_vfiprintf_r+0x78>
 8007a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a32:	460c      	mov	r4, r1
 8007a34:	2001      	movs	r0, #1
 8007a36:	e7a6      	b.n	8007986 <_vfiprintf_r+0xfe>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f04f 0c0a 	mov.w	ip, #10
 8007a44:	4620      	mov	r0, r4
 8007a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4a:	3a30      	subs	r2, #48	; 0x30
 8007a4c:	2a09      	cmp	r2, #9
 8007a4e:	d903      	bls.n	8007a58 <_vfiprintf_r+0x1d0>
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0c6      	beq.n	80079e2 <_vfiprintf_r+0x15a>
 8007a54:	9105      	str	r1, [sp, #20]
 8007a56:	e7c4      	b.n	80079e2 <_vfiprintf_r+0x15a>
 8007a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7f0      	b.n	8007a44 <_vfiprintf_r+0x1bc>
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	462a      	mov	r2, r5
 8007a68:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <_vfiprintf_r+0x22c>)
 8007a6a:	a904      	add	r1, sp, #16
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f3af 8000 	nop.w
 8007a72:	4607      	mov	r7, r0
 8007a74:	1c78      	adds	r0, r7, #1
 8007a76:	d1d6      	bne.n	8007a26 <_vfiprintf_r+0x19e>
 8007a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a7a:	07d9      	lsls	r1, r3, #31
 8007a7c:	d405      	bmi.n	8007a8a <_vfiprintf_r+0x202>
 8007a7e:	89ab      	ldrh	r3, [r5, #12]
 8007a80:	059a      	lsls	r2, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_vfiprintf_r+0x202>
 8007a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a86:	f7ff fddb 	bl	8007640 <__retarget_lock_release_recursive>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	065b      	lsls	r3, r3, #25
 8007a8e:	f53f af1d 	bmi.w	80078cc <_vfiprintf_r+0x44>
 8007a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a94:	e71c      	b.n	80078d0 <_vfiprintf_r+0x48>
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <_vfiprintf_r+0x22c>)
 8007a9e:	a904      	add	r1, sp, #16
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 f879 	bl	8007b98 <_printf_i>
 8007aa6:	e7e4      	b.n	8007a72 <_vfiprintf_r+0x1ea>
 8007aa8:	08008328 	.word	0x08008328
 8007aac:	08008332 	.word	0x08008332
 8007ab0:	00000000 	.word	0x00000000
 8007ab4:	08007863 	.word	0x08007863
 8007ab8:	0800832e 	.word	0x0800832e

08007abc <_printf_common>:
 8007abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	4699      	mov	r9, r3
 8007ac4:	688a      	ldr	r2, [r1, #8]
 8007ac6:	690b      	ldr	r3, [r1, #16]
 8007ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	bfb8      	it	lt
 8007ad0:	4613      	movlt	r3, r2
 8007ad2:	6033      	str	r3, [r6, #0]
 8007ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ad8:	4607      	mov	r7, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	b10a      	cbz	r2, 8007ae2 <_printf_common+0x26>
 8007ade:	3301      	adds	r3, #1
 8007ae0:	6033      	str	r3, [r6, #0]
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	0699      	lsls	r1, r3, #26
 8007ae6:	bf42      	ittt	mi
 8007ae8:	6833      	ldrmi	r3, [r6, #0]
 8007aea:	3302      	addmi	r3, #2
 8007aec:	6033      	strmi	r3, [r6, #0]
 8007aee:	6825      	ldr	r5, [r4, #0]
 8007af0:	f015 0506 	ands.w	r5, r5, #6
 8007af4:	d106      	bne.n	8007b04 <_printf_common+0x48>
 8007af6:	f104 0a19 	add.w	sl, r4, #25
 8007afa:	68e3      	ldr	r3, [r4, #12]
 8007afc:	6832      	ldr	r2, [r6, #0]
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	dc26      	bgt.n	8007b52 <_printf_common+0x96>
 8007b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b08:	1e13      	subs	r3, r2, #0
 8007b0a:	6822      	ldr	r2, [r4, #0]
 8007b0c:	bf18      	it	ne
 8007b0e:	2301      	movne	r3, #1
 8007b10:	0692      	lsls	r2, r2, #26
 8007b12:	d42b      	bmi.n	8007b6c <_printf_common+0xb0>
 8007b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	47c0      	blx	r8
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d01e      	beq.n	8007b60 <_printf_common+0xa4>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	6922      	ldr	r2, [r4, #16]
 8007b26:	f003 0306 	and.w	r3, r3, #6
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	bf02      	ittt	eq
 8007b2e:	68e5      	ldreq	r5, [r4, #12]
 8007b30:	6833      	ldreq	r3, [r6, #0]
 8007b32:	1aed      	subeq	r5, r5, r3
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	bf0c      	ite	eq
 8007b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b3c:	2500      	movne	r5, #0
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	bfc4      	itt	gt
 8007b42:	1a9b      	subgt	r3, r3, r2
 8007b44:	18ed      	addgt	r5, r5, r3
 8007b46:	2600      	movs	r6, #0
 8007b48:	341a      	adds	r4, #26
 8007b4a:	42b5      	cmp	r5, r6
 8007b4c:	d11a      	bne.n	8007b84 <_printf_common+0xc8>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	e008      	b.n	8007b64 <_printf_common+0xa8>
 8007b52:	2301      	movs	r3, #1
 8007b54:	4652      	mov	r2, sl
 8007b56:	4649      	mov	r1, r9
 8007b58:	4638      	mov	r0, r7
 8007b5a:	47c0      	blx	r8
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	d103      	bne.n	8007b68 <_printf_common+0xac>
 8007b60:	f04f 30ff 	mov.w	r0, #4294967295
 8007b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b68:	3501      	adds	r5, #1
 8007b6a:	e7c6      	b.n	8007afa <_printf_common+0x3e>
 8007b6c:	18e1      	adds	r1, r4, r3
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	2030      	movs	r0, #48	; 0x30
 8007b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b76:	4422      	add	r2, r4
 8007b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b80:	3302      	adds	r3, #2
 8007b82:	e7c7      	b.n	8007b14 <_printf_common+0x58>
 8007b84:	2301      	movs	r3, #1
 8007b86:	4622      	mov	r2, r4
 8007b88:	4649      	mov	r1, r9
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	47c0      	blx	r8
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d0e6      	beq.n	8007b60 <_printf_common+0xa4>
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7d9      	b.n	8007b4a <_printf_common+0x8e>
	...

08007b98 <_printf_i>:
 8007b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	7e0f      	ldrb	r7, [r1, #24]
 8007b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ba0:	2f78      	cmp	r7, #120	; 0x78
 8007ba2:	4691      	mov	r9, r2
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	469a      	mov	sl, r3
 8007baa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bae:	d807      	bhi.n	8007bc0 <_printf_i+0x28>
 8007bb0:	2f62      	cmp	r7, #98	; 0x62
 8007bb2:	d80a      	bhi.n	8007bca <_printf_i+0x32>
 8007bb4:	2f00      	cmp	r7, #0
 8007bb6:	f000 80d4 	beq.w	8007d62 <_printf_i+0x1ca>
 8007bba:	2f58      	cmp	r7, #88	; 0x58
 8007bbc:	f000 80c0 	beq.w	8007d40 <_printf_i+0x1a8>
 8007bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bc8:	e03a      	b.n	8007c40 <_printf_i+0xa8>
 8007bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bce:	2b15      	cmp	r3, #21
 8007bd0:	d8f6      	bhi.n	8007bc0 <_printf_i+0x28>
 8007bd2:	a101      	add	r1, pc, #4	; (adr r1, 8007bd8 <_printf_i+0x40>)
 8007bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd8:	08007c31 	.word	0x08007c31
 8007bdc:	08007c45 	.word	0x08007c45
 8007be0:	08007bc1 	.word	0x08007bc1
 8007be4:	08007bc1 	.word	0x08007bc1
 8007be8:	08007bc1 	.word	0x08007bc1
 8007bec:	08007bc1 	.word	0x08007bc1
 8007bf0:	08007c45 	.word	0x08007c45
 8007bf4:	08007bc1 	.word	0x08007bc1
 8007bf8:	08007bc1 	.word	0x08007bc1
 8007bfc:	08007bc1 	.word	0x08007bc1
 8007c00:	08007bc1 	.word	0x08007bc1
 8007c04:	08007d49 	.word	0x08007d49
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007d03 	.word	0x08007d03
 8007c10:	08007bc1 	.word	0x08007bc1
 8007c14:	08007bc1 	.word	0x08007bc1
 8007c18:	08007d6b 	.word	0x08007d6b
 8007c1c:	08007bc1 	.word	0x08007bc1
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007bc1 	.word	0x08007bc1
 8007c28:	08007bc1 	.word	0x08007bc1
 8007c2c:	08007d0b 	.word	0x08007d0b
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	1d1a      	adds	r2, r3, #4
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	602a      	str	r2, [r5, #0]
 8007c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c40:	2301      	movs	r3, #1
 8007c42:	e09f      	b.n	8007d84 <_printf_i+0x1ec>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	0607      	lsls	r7, r0, #24
 8007c4a:	f103 0104 	add.w	r1, r3, #4
 8007c4e:	6029      	str	r1, [r5, #0]
 8007c50:	d501      	bpl.n	8007c56 <_printf_i+0xbe>
 8007c52:	681e      	ldr	r6, [r3, #0]
 8007c54:	e003      	b.n	8007c5e <_printf_i+0xc6>
 8007c56:	0646      	lsls	r6, r0, #25
 8007c58:	d5fb      	bpl.n	8007c52 <_printf_i+0xba>
 8007c5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	da03      	bge.n	8007c6a <_printf_i+0xd2>
 8007c62:	232d      	movs	r3, #45	; 0x2d
 8007c64:	4276      	negs	r6, r6
 8007c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6a:	485a      	ldr	r0, [pc, #360]	; (8007dd4 <_printf_i+0x23c>)
 8007c6c:	230a      	movs	r3, #10
 8007c6e:	e012      	b.n	8007c96 <_printf_i+0xfe>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	6820      	ldr	r0, [r4, #0]
 8007c74:	1d19      	adds	r1, r3, #4
 8007c76:	6029      	str	r1, [r5, #0]
 8007c78:	0605      	lsls	r5, r0, #24
 8007c7a:	d501      	bpl.n	8007c80 <_printf_i+0xe8>
 8007c7c:	681e      	ldr	r6, [r3, #0]
 8007c7e:	e002      	b.n	8007c86 <_printf_i+0xee>
 8007c80:	0641      	lsls	r1, r0, #25
 8007c82:	d5fb      	bpl.n	8007c7c <_printf_i+0xe4>
 8007c84:	881e      	ldrh	r6, [r3, #0]
 8007c86:	4853      	ldr	r0, [pc, #332]	; (8007dd4 <_printf_i+0x23c>)
 8007c88:	2f6f      	cmp	r7, #111	; 0x6f
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2308      	moveq	r3, #8
 8007c8e:	230a      	movne	r3, #10
 8007c90:	2100      	movs	r1, #0
 8007c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c96:	6865      	ldr	r5, [r4, #4]
 8007c98:	60a5      	str	r5, [r4, #8]
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	bfa2      	ittt	ge
 8007c9e:	6821      	ldrge	r1, [r4, #0]
 8007ca0:	f021 0104 	bicge.w	r1, r1, #4
 8007ca4:	6021      	strge	r1, [r4, #0]
 8007ca6:	b90e      	cbnz	r6, 8007cac <_printf_i+0x114>
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	d04b      	beq.n	8007d44 <_printf_i+0x1ac>
 8007cac:	4615      	mov	r5, r2
 8007cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8007cb6:	5dc7      	ldrb	r7, [r0, r7]
 8007cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cbc:	4637      	mov	r7, r6
 8007cbe:	42bb      	cmp	r3, r7
 8007cc0:	460e      	mov	r6, r1
 8007cc2:	d9f4      	bls.n	8007cae <_printf_i+0x116>
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d10b      	bne.n	8007ce0 <_printf_i+0x148>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	07de      	lsls	r6, r3, #31
 8007ccc:	d508      	bpl.n	8007ce0 <_printf_i+0x148>
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	6861      	ldr	r1, [r4, #4]
 8007cd2:	4299      	cmp	r1, r3
 8007cd4:	bfde      	ittt	le
 8007cd6:	2330      	movle	r3, #48	; 0x30
 8007cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ce0:	1b52      	subs	r2, r2, r5
 8007ce2:	6122      	str	r2, [r4, #16]
 8007ce4:	f8cd a000 	str.w	sl, [sp]
 8007ce8:	464b      	mov	r3, r9
 8007cea:	aa03      	add	r2, sp, #12
 8007cec:	4621      	mov	r1, r4
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7ff fee4 	bl	8007abc <_printf_common>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d14a      	bne.n	8007d8e <_printf_i+0x1f6>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	b004      	add	sp, #16
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f043 0320 	orr.w	r3, r3, #32
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	4833      	ldr	r0, [pc, #204]	; (8007dd8 <_printf_i+0x240>)
 8007d0c:	2778      	movs	r7, #120	; 0x78
 8007d0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	6829      	ldr	r1, [r5, #0]
 8007d16:	061f      	lsls	r7, r3, #24
 8007d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d1c:	d402      	bmi.n	8007d24 <_printf_i+0x18c>
 8007d1e:	065f      	lsls	r7, r3, #25
 8007d20:	bf48      	it	mi
 8007d22:	b2b6      	uxthmi	r6, r6
 8007d24:	07df      	lsls	r7, r3, #31
 8007d26:	bf48      	it	mi
 8007d28:	f043 0320 	orrmi.w	r3, r3, #32
 8007d2c:	6029      	str	r1, [r5, #0]
 8007d2e:	bf48      	it	mi
 8007d30:	6023      	strmi	r3, [r4, #0]
 8007d32:	b91e      	cbnz	r6, 8007d3c <_printf_i+0x1a4>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	f023 0320 	bic.w	r3, r3, #32
 8007d3a:	6023      	str	r3, [r4, #0]
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	e7a7      	b.n	8007c90 <_printf_i+0xf8>
 8007d40:	4824      	ldr	r0, [pc, #144]	; (8007dd4 <_printf_i+0x23c>)
 8007d42:	e7e4      	b.n	8007d0e <_printf_i+0x176>
 8007d44:	4615      	mov	r5, r2
 8007d46:	e7bd      	b.n	8007cc4 <_printf_i+0x12c>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	6826      	ldr	r6, [r4, #0]
 8007d4c:	6961      	ldr	r1, [r4, #20]
 8007d4e:	1d18      	adds	r0, r3, #4
 8007d50:	6028      	str	r0, [r5, #0]
 8007d52:	0635      	lsls	r5, r6, #24
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	d501      	bpl.n	8007d5c <_printf_i+0x1c4>
 8007d58:	6019      	str	r1, [r3, #0]
 8007d5a:	e002      	b.n	8007d62 <_printf_i+0x1ca>
 8007d5c:	0670      	lsls	r0, r6, #25
 8007d5e:	d5fb      	bpl.n	8007d58 <_printf_i+0x1c0>
 8007d60:	8019      	strh	r1, [r3, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	4615      	mov	r5, r2
 8007d68:	e7bc      	b.n	8007ce4 <_printf_i+0x14c>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	1d1a      	adds	r2, r3, #4
 8007d6e:	602a      	str	r2, [r5, #0]
 8007d70:	681d      	ldr	r5, [r3, #0]
 8007d72:	6862      	ldr	r2, [r4, #4]
 8007d74:	2100      	movs	r1, #0
 8007d76:	4628      	mov	r0, r5
 8007d78:	f7f8 fa32 	bl	80001e0 <memchr>
 8007d7c:	b108      	cbz	r0, 8007d82 <_printf_i+0x1ea>
 8007d7e:	1b40      	subs	r0, r0, r5
 8007d80:	6060      	str	r0, [r4, #4]
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	2300      	movs	r3, #0
 8007d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8c:	e7aa      	b.n	8007ce4 <_printf_i+0x14c>
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	462a      	mov	r2, r5
 8007d92:	4649      	mov	r1, r9
 8007d94:	4640      	mov	r0, r8
 8007d96:	47d0      	blx	sl
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d0ad      	beq.n	8007cf8 <_printf_i+0x160>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	079b      	lsls	r3, r3, #30
 8007da0:	d413      	bmi.n	8007dca <_printf_i+0x232>
 8007da2:	68e0      	ldr	r0, [r4, #12]
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	4298      	cmp	r0, r3
 8007da8:	bfb8      	it	lt
 8007daa:	4618      	movlt	r0, r3
 8007dac:	e7a6      	b.n	8007cfc <_printf_i+0x164>
 8007dae:	2301      	movs	r3, #1
 8007db0:	4632      	mov	r2, r6
 8007db2:	4649      	mov	r1, r9
 8007db4:	4640      	mov	r0, r8
 8007db6:	47d0      	blx	sl
 8007db8:	3001      	adds	r0, #1
 8007dba:	d09d      	beq.n	8007cf8 <_printf_i+0x160>
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	9903      	ldr	r1, [sp, #12]
 8007dc2:	1a5b      	subs	r3, r3, r1
 8007dc4:	42ab      	cmp	r3, r5
 8007dc6:	dcf2      	bgt.n	8007dae <_printf_i+0x216>
 8007dc8:	e7eb      	b.n	8007da2 <_printf_i+0x20a>
 8007dca:	2500      	movs	r5, #0
 8007dcc:	f104 0619 	add.w	r6, r4, #25
 8007dd0:	e7f5      	b.n	8007dbe <_printf_i+0x226>
 8007dd2:	bf00      	nop
 8007dd4:	08008339 	.word	0x08008339
 8007dd8:	0800834a 	.word	0x0800834a

08007ddc <__sflush_r>:
 8007ddc:	898a      	ldrh	r2, [r1, #12]
 8007dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de2:	4605      	mov	r5, r0
 8007de4:	0710      	lsls	r0, r2, #28
 8007de6:	460c      	mov	r4, r1
 8007de8:	d458      	bmi.n	8007e9c <__sflush_r+0xc0>
 8007dea:	684b      	ldr	r3, [r1, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dc05      	bgt.n	8007dfc <__sflush_r+0x20>
 8007df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dc02      	bgt.n	8007dfc <__sflush_r+0x20>
 8007df6:	2000      	movs	r0, #0
 8007df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	d0f9      	beq.n	8007df6 <__sflush_r+0x1a>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e08:	682f      	ldr	r7, [r5, #0]
 8007e0a:	6a21      	ldr	r1, [r4, #32]
 8007e0c:	602b      	str	r3, [r5, #0]
 8007e0e:	d032      	beq.n	8007e76 <__sflush_r+0x9a>
 8007e10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	075a      	lsls	r2, r3, #29
 8007e16:	d505      	bpl.n	8007e24 <__sflush_r+0x48>
 8007e18:	6863      	ldr	r3, [r4, #4]
 8007e1a:	1ac0      	subs	r0, r0, r3
 8007e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e1e:	b10b      	cbz	r3, 8007e24 <__sflush_r+0x48>
 8007e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e22:	1ac0      	subs	r0, r0, r3
 8007e24:	2300      	movs	r3, #0
 8007e26:	4602      	mov	r2, r0
 8007e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e2a:	6a21      	ldr	r1, [r4, #32]
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b0      	blx	r6
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	d106      	bne.n	8007e44 <__sflush_r+0x68>
 8007e36:	6829      	ldr	r1, [r5, #0]
 8007e38:	291d      	cmp	r1, #29
 8007e3a:	d82b      	bhi.n	8007e94 <__sflush_r+0xb8>
 8007e3c:	4a29      	ldr	r2, [pc, #164]	; (8007ee4 <__sflush_r+0x108>)
 8007e3e:	410a      	asrs	r2, r1
 8007e40:	07d6      	lsls	r6, r2, #31
 8007e42:	d427      	bmi.n	8007e94 <__sflush_r+0xb8>
 8007e44:	2200      	movs	r2, #0
 8007e46:	6062      	str	r2, [r4, #4]
 8007e48:	04d9      	lsls	r1, r3, #19
 8007e4a:	6922      	ldr	r2, [r4, #16]
 8007e4c:	6022      	str	r2, [r4, #0]
 8007e4e:	d504      	bpl.n	8007e5a <__sflush_r+0x7e>
 8007e50:	1c42      	adds	r2, r0, #1
 8007e52:	d101      	bne.n	8007e58 <__sflush_r+0x7c>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b903      	cbnz	r3, 8007e5a <__sflush_r+0x7e>
 8007e58:	6560      	str	r0, [r4, #84]	; 0x54
 8007e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e5c:	602f      	str	r7, [r5, #0]
 8007e5e:	2900      	cmp	r1, #0
 8007e60:	d0c9      	beq.n	8007df6 <__sflush_r+0x1a>
 8007e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e66:	4299      	cmp	r1, r3
 8007e68:	d002      	beq.n	8007e70 <__sflush_r+0x94>
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f7ff fbea 	bl	8007644 <_free_r>
 8007e70:	2000      	movs	r0, #0
 8007e72:	6360      	str	r0, [r4, #52]	; 0x34
 8007e74:	e7c0      	b.n	8007df8 <__sflush_r+0x1c>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b0      	blx	r6
 8007e7c:	1c41      	adds	r1, r0, #1
 8007e7e:	d1c8      	bne.n	8007e12 <__sflush_r+0x36>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0c5      	beq.n	8007e12 <__sflush_r+0x36>
 8007e86:	2b1d      	cmp	r3, #29
 8007e88:	d001      	beq.n	8007e8e <__sflush_r+0xb2>
 8007e8a:	2b16      	cmp	r3, #22
 8007e8c:	d101      	bne.n	8007e92 <__sflush_r+0xb6>
 8007e8e:	602f      	str	r7, [r5, #0]
 8007e90:	e7b1      	b.n	8007df6 <__sflush_r+0x1a>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e98:	81a3      	strh	r3, [r4, #12]
 8007e9a:	e7ad      	b.n	8007df8 <__sflush_r+0x1c>
 8007e9c:	690f      	ldr	r7, [r1, #16]
 8007e9e:	2f00      	cmp	r7, #0
 8007ea0:	d0a9      	beq.n	8007df6 <__sflush_r+0x1a>
 8007ea2:	0793      	lsls	r3, r2, #30
 8007ea4:	680e      	ldr	r6, [r1, #0]
 8007ea6:	bf08      	it	eq
 8007ea8:	694b      	ldreq	r3, [r1, #20]
 8007eaa:	600f      	str	r7, [r1, #0]
 8007eac:	bf18      	it	ne
 8007eae:	2300      	movne	r3, #0
 8007eb0:	eba6 0807 	sub.w	r8, r6, r7
 8007eb4:	608b      	str	r3, [r1, #8]
 8007eb6:	f1b8 0f00 	cmp.w	r8, #0
 8007eba:	dd9c      	ble.n	8007df6 <__sflush_r+0x1a>
 8007ebc:	6a21      	ldr	r1, [r4, #32]
 8007ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ec0:	4643      	mov	r3, r8
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b0      	blx	r6
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	dc06      	bgt.n	8007eda <__sflush_r+0xfe>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	e78e      	b.n	8007df8 <__sflush_r+0x1c>
 8007eda:	4407      	add	r7, r0
 8007edc:	eba8 0800 	sub.w	r8, r8, r0
 8007ee0:	e7e9      	b.n	8007eb6 <__sflush_r+0xda>
 8007ee2:	bf00      	nop
 8007ee4:	dfbffffe 	.word	0xdfbffffe

08007ee8 <_fflush_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	690b      	ldr	r3, [r1, #16]
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b913      	cbnz	r3, 8007ef8 <_fflush_r+0x10>
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	b118      	cbz	r0, 8007f02 <_fflush_r+0x1a>
 8007efa:	6a03      	ldr	r3, [r0, #32]
 8007efc:	b90b      	cbnz	r3, 8007f02 <_fflush_r+0x1a>
 8007efe:	f7ff f9a9 	bl	8007254 <__sinit>
 8007f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f3      	beq.n	8007ef2 <_fflush_r+0xa>
 8007f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f0c:	07d0      	lsls	r0, r2, #31
 8007f0e:	d404      	bmi.n	8007f1a <_fflush_r+0x32>
 8007f10:	0599      	lsls	r1, r3, #22
 8007f12:	d402      	bmi.n	8007f1a <_fflush_r+0x32>
 8007f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f16:	f7ff fb92 	bl	800763e <__retarget_lock_acquire_recursive>
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	f7ff ff5d 	bl	8007ddc <__sflush_r>
 8007f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f24:	07da      	lsls	r2, r3, #31
 8007f26:	4605      	mov	r5, r0
 8007f28:	d4e4      	bmi.n	8007ef4 <_fflush_r+0xc>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	059b      	lsls	r3, r3, #22
 8007f2e:	d4e1      	bmi.n	8007ef4 <_fflush_r+0xc>
 8007f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f32:	f7ff fb85 	bl	8007640 <__retarget_lock_release_recursive>
 8007f36:	e7dd      	b.n	8007ef4 <_fflush_r+0xc>

08007f38 <__swhatbuf_r>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f40:	2900      	cmp	r1, #0
 8007f42:	b096      	sub	sp, #88	; 0x58
 8007f44:	4615      	mov	r5, r2
 8007f46:	461e      	mov	r6, r3
 8007f48:	da0d      	bge.n	8007f66 <__swhatbuf_r+0x2e>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	bf0c      	ite	eq
 8007f56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f5a:	2340      	movne	r3, #64	; 0x40
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	6031      	str	r1, [r6, #0]
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	b016      	add	sp, #88	; 0x58
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	466a      	mov	r2, sp
 8007f68:	f000 f848 	bl	8007ffc <_fstat_r>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	dbec      	blt.n	8007f4a <__swhatbuf_r+0x12>
 8007f70:	9901      	ldr	r1, [sp, #4]
 8007f72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007f76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007f7a:	4259      	negs	r1, r3
 8007f7c:	4159      	adcs	r1, r3
 8007f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f82:	e7eb      	b.n	8007f5c <__swhatbuf_r+0x24>

08007f84 <__smakebuf_r>:
 8007f84:	898b      	ldrh	r3, [r1, #12]
 8007f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f88:	079d      	lsls	r5, r3, #30
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	d507      	bpl.n	8007fa0 <__smakebuf_r+0x1c>
 8007f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	6163      	str	r3, [r4, #20]
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	ab01      	add	r3, sp, #4
 8007fa2:	466a      	mov	r2, sp
 8007fa4:	f7ff ffc8 	bl	8007f38 <__swhatbuf_r>
 8007fa8:	9900      	ldr	r1, [sp, #0]
 8007faa:	4605      	mov	r5, r0
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff fbb5 	bl	800771c <_malloc_r>
 8007fb2:	b948      	cbnz	r0, 8007fc8 <__smakebuf_r+0x44>
 8007fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb8:	059a      	lsls	r2, r3, #22
 8007fba:	d4ef      	bmi.n	8007f9c <__smakebuf_r+0x18>
 8007fbc:	f023 0303 	bic.w	r3, r3, #3
 8007fc0:	f043 0302 	orr.w	r3, r3, #2
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	e7e3      	b.n	8007f90 <__smakebuf_r+0xc>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	6020      	str	r0, [r4, #0]
 8007fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	6163      	str	r3, [r4, #20]
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	6120      	str	r0, [r4, #16]
 8007fda:	b15b      	cbz	r3, 8007ff4 <__smakebuf_r+0x70>
 8007fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f81d 	bl	8008020 <_isatty_r>
 8007fe6:	b128      	cbz	r0, 8007ff4 <__smakebuf_r+0x70>
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	f023 0303 	bic.w	r3, r3, #3
 8007fee:	f043 0301 	orr.w	r3, r3, #1
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	431d      	orrs	r5, r3
 8007ff8:	81a5      	strh	r5, [r4, #12]
 8007ffa:	e7cf      	b.n	8007f9c <__smakebuf_r+0x18>

08007ffc <_fstat_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	; (800801c <_fstat_r+0x20>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	f7f8 ff5e 	bl	8000eca <_fstat>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d102      	bne.n	8008018 <_fstat_r+0x1c>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	b103      	cbz	r3, 8008018 <_fstat_r+0x1c>
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	bd38      	pop	{r3, r4, r5, pc}
 800801a:	bf00      	nop
 800801c:	20000394 	.word	0x20000394

08008020 <_isatty_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d06      	ldr	r5, [pc, #24]	; (800803c <_isatty_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	602b      	str	r3, [r5, #0]
 800802c:	f7f8 ff5d 	bl	8000eea <_isatty>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_isatty_r+0x1a>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_isatty_r+0x1a>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	20000394 	.word	0x20000394

08008040 <_sbrk_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d06      	ldr	r5, [pc, #24]	; (800805c <_sbrk_r+0x1c>)
 8008044:	2300      	movs	r3, #0
 8008046:	4604      	mov	r4, r0
 8008048:	4608      	mov	r0, r1
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	f7f8 ff66 	bl	8000f1c <_sbrk>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_sbrk_r+0x1a>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_sbrk_r+0x1a>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	20000394 	.word	0x20000394

08008060 <_init>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr

0800806c <_fini>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	bf00      	nop
 8008070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008072:	bc08      	pop	{r3}
 8008074:	469e      	mov	lr, r3
 8008076:	4770      	bx	lr
