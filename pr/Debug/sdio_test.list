
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  0800df10  0800df10  0001df10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea0c  0800ea0c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea0c  0800ea0c  0001ea0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea14  0800ea14  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea14  0800ea14  0001ea14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea18  0800ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ea1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d94  20000080  0800ea9c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006e14  0800ea9c  00026e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c736  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d17  00000000  00000000  0003c829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00041540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136c  00000000  00000000  00042eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007de3  00000000  00000000  0004421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022667  00000000  00000000  0004bfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad56  00000000  00000000  0006e666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000713c  00000000  00000000  001093bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  001104f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800def8 	.word	0x0800def8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800def8 	.word	0x0800def8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80005d0:	f001 fb56 	bl	8001c80 <HAL_Init>
    SystemClock_Config();
 80005d4:	f000 f820 	bl	8000618 <SystemClock_Config>
	//MX_USART2_UART_Init();
    if(init_tasks()) printf("Tasks was initialized\n");
 80005d8:	f001 fab4 	bl	8001b44 <init_tasks>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <main+0x1c>
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0x40>)
 80005e4:	f00c fcde 	bl	800cfa4 <puts>
	if(i2c_init()) printf("I2C1 was init success\n");
 80005e8:	f001 f946 	bl	8001878 <i2c_init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <main+0x2c>
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x44>)
 80005f4:	f00c fcd6 	bl	800cfa4 <puts>

	osKernelStart();
 80005f8:	f008 ff0c 	bl	8009414 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f001 fbb0 	bl	8001d64 <HAL_Delay>
	  printf("test\n");
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <main+0x48>)
 8000606:	f00c fccd 	bl	800cfa4 <puts>
	  HAL_Delay(1000);
 800060a:	e7f7      	b.n	80005fc <main+0x30>
 800060c:	0800df24 	.word	0x0800df24
 8000610:	0800df3c 	.word	0x0800df3c
 8000614:	0800df54 	.word	0x0800df54

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f00c fdd0 	bl	800d1cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd4>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000690:	2354      	movs	r3, #84	; 0x54
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 f95d 	bl	8003960 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f83c 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fbbe 	bl	8003e50 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006da:	f000 f825 	bl	8000728 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_write>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e009      	b.n	8000716 <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff36 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbf1      	blt.n	8000702 <_write+0x12>
	}
	return len;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <HAL_MspInit+0x54>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x54>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <HAL_MspInit+0x54>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_MspInit+0x54>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	210f      	movs	r1, #15
 8000776:	f06f 0001 	mvn.w	r0, #1
 800077a:	f001 fbf2 	bl	8001f62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_I2C_MspInit+0x84>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d12b      	bne.n	8000806 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ca:	23c0      	movs	r3, #192	; 0xc0
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007da:	2304      	movs	r3, #4
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <HAL_I2C_MspInit+0x8c>)
 80007e6:	f001 ff6f 	bl	80026c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_I2C_MspInit+0x88>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40005400 	.word	0x40005400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400

0800081c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a65      	ldr	r2, [pc, #404]	; (80009d0 <HAL_SD_MspInit+0x1b4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	f040 80c3 	bne.w	80009c6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	4b63      	ldr	r3, [pc, #396]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a62      	ldr	r2, [pc, #392]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800084a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
 8000850:	4b60      	ldr	r3, [pc, #384]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b5c      	ldr	r3, [pc, #368]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a5b      	ldr	r2, [pc, #364]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b59      	ldr	r3, [pc, #356]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b55      	ldr	r3, [pc, #340]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a54      	ldr	r2, [pc, #336]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b52      	ldr	r3, [pc, #328]	; (80009d4 <HAL_SD_MspInit+0x1b8>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000894:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000898:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008a6:	230c      	movs	r3, #12
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4849      	ldr	r0, [pc, #292]	; (80009d8 <HAL_SD_MspInit+0x1bc>)
 80008b2:	f001 ff09 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008c6:	230c      	movs	r3, #12
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <HAL_SD_MspInit+0x1c0>)
 80008d2:	f001 fef9 	bl	80026c8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008d8:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <HAL_SD_MspInit+0x1c8>)
 80008da:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80008dc:	4b40      	ldr	r3, [pc, #256]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008e2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 80008fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000900:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000906:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800090a:	2220      	movs	r2, #32
 800090c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000910:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000914:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000918:	2204      	movs	r2, #4
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800091e:	2203      	movs	r2, #3
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000924:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800092c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000932:	482b      	ldr	r0, [pc, #172]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000934:	f001 fb4c 	bl	8001fd0 <HAL_DMA_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800093e:	f7ff fef3 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 8000946:	641a      	str	r2, [r3, #64]	; 0x40
 8000948:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <HAL_SD_MspInit+0x1c4>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <HAL_SD_MspInit+0x1d0>)
 8000952:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800096a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000976:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000982:	2220      	movs	r2, #32
 8000984:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000988:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800098c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000990:	2204      	movs	r2, #4
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 8000996:	2203      	movs	r2, #3
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 800099c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009ac:	f001 fb10 	bl	8001fd0 <HAL_DMA_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80009b6:	f7ff feb7 	bl	8000728 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c0:	4a09      	ldr	r2, [pc, #36]	; (80009e8 <HAL_SD_MspInit+0x1cc>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	200021a4 	.word	0x200021a4
 80009e4:	40026458 	.word	0x40026458
 80009e8:	20002204 	.word	0x20002204
 80009ec:	400264a0 	.word	0x400264a0

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>
	...

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
   printf("HardFault_Handler\n");
 80009fc:	4801      	ldr	r0, [pc, #4]	; (8000a04 <HardFault_Handler+0xc>)
 80009fe:	f00c fad1 	bl	800cfa4 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0xa>
 8000a04:	0800df5c 	.word	0x0800df5c

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f001 f97a 	bl	8001d24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a30:	f00a ff74 	bl	800b91c <xTaskGetSchedulerState>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d001      	beq.n	8000a3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3a:	f00b fe5d 	bl	800c6f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DMA2_Stream3_IRQHandler+0x10>)
 8000a4a:	f001 fbc7 	bl	80021dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200021a4 	.word	0x200021a4

08000a58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <DMA2_Stream6_IRQHandler+0x10>)
 8000a5e:	f001 fbbd 	bl	80021dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20002204 	.word	0x20002204

08000a6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e00a      	b.n	8000a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7e:	f3af 8000 	nop.w
 8000a82:	4601      	mov	r1, r0
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	b2ca      	uxtb	r2, r1
 8000a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf0      	blt.n	8000a7e <_read+0x12>
  }

  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f00c fba2 	bl	800d288 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20018000 	.word	0x20018000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	20006e18 	.word	0x20006e18

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	; (8000bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd7 	bl	8000b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f00c fb61 	bl	800d294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcfb 	bl	80005cc <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000be4:	0800ea1c 	.word	0x0800ea1c
  ldr r2, =_sbss
 8000be8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000bec:	20006e14 	.word	0x20006e14

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <reverse_bits>:
        {
                0x0, 0x8, 0x4, 0xC, 0x2, 0xA, 0x6, 0xE,
                0x1, 0x9, 0x5, 0xD, 0x3, 0xB, 0x7, 0xF
        };

uint8_t reverse_bits(uint8_t byte) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    // Reverse the top and bottom nibble then swap them.
    return (reverse_table[byte & 0b1111] << 4) | reverse_table[byte >> 4];
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <reverse_bits+0x38>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	b25a      	sxtb	r2, r3
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <reverse_bits+0x38>)
 8000c16:	5c5b      	ldrb	r3, [r3, r1]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	b2db      	uxtb	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000004 	.word	0x20000004

08000c30 <reverse_word>:

uint16_t reverse_word(uint16_t word) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
    return ((reverse_bits(word & 0xFF) << 8) | reverse_bits(word >> 8));
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ffd8 	bl	8000bf4 <reverse_bits>
 8000c44:	4603      	mov	r3, r0
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21c      	sxth	r4, r3
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffce 	bl	8000bf4 <reverse_bits>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29b      	uxth	r3, r3
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}

08000c6a <crc16_common>:

uint16_t crc16_common(uint8_t *data, uint8_t len, uint16_t poly, uint16_t init,
                      uint16_t doXor, bool refIn, bool refOut) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	72fb      	strb	r3, [r7, #11]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	813b      	strh	r3, [r7, #8]
 8000c80:	4613      	mov	r3, r2
 8000c82:	80fb      	strh	r3, [r7, #6]
    uint8_t y;
    uint16_t crc;

    crc = init;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	82bb      	strh	r3, [r7, #20]
    while (len--) {
 8000c88:	e037      	b.n	8000cfa <crc16_common+0x90>
        if (refIn)
 8000c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00f      	beq.n	8000cb2 <crc16_common+0x48>
            crc = ((uint16_t) reverse_bits(*data++) << 8) ^ crc;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	60fa      	str	r2, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffaa 	bl	8000bf4 <reverse_bits>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000caa:	4053      	eors	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	82bb      	strh	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <crc16_common+0x5e>
        else
            crc = ((uint16_t) * data++ << 8) ^ crc;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	60fa      	str	r2, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cc2:	4053      	eors	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	82bb      	strh	r3, [r7, #20]
        for (y = 0; y < 8; y++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	75fb      	strb	r3, [r7, #23]
 8000ccc:	e012      	b.n	8000cf4 <crc16_common+0x8a>
            if (crc & 0x8000)
 8000cce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	da08      	bge.n	8000ce8 <crc16_common+0x7e>
                crc = (crc << 1) ^ poly;
 8000cd6:	8abb      	ldrh	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ce0:	4053      	eors	r3, r2
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	82bb      	strh	r3, [r7, #20]
 8000ce6:	e002      	b.n	8000cee <crc16_common+0x84>
            else
                crc = crc << 1;
 8000ce8:	8abb      	ldrh	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	82bb      	strh	r3, [r7, #20]
        for (y = 0; y < 8; y++) {
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	75fb      	strb	r3, [r7, #23]
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d9e9      	bls.n	8000cce <crc16_common+0x64>
    while (len--) {
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	1e5a      	subs	r2, r3, #1
 8000cfe:	72fa      	strb	r2, [r7, #11]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1c2      	bne.n	8000c8a <crc16_common+0x20>
        }
    }

    if (refOut)
 8000d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <crc16_common+0xae>
        crc = reverse_word(crc);
 8000d0c:	8abb      	ldrh	r3, [r7, #20]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff8e 	bl	8000c30 <reverse_word>
 8000d14:	4603      	mov	r3, r0
 8000d16:	82bb      	strh	r3, [r7, #20]
    return (crc ^ doXor);
 8000d18:	8aba      	ldrh	r2, [r7, #20]
 8000d1a:	8c3b      	ldrh	r3, [r7, #32]
 8000d1c:	4053      	eors	r3, r2
 8000d1e:	b29b      	uxth	r3, r3
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <crc16_augccitt_false>:

//uint16_t crc16_augccitt(uint8_t *data, uint8_t len) {
//    return crc16_common(data, len, 0x1021, 0x1d0f, 0x0000, false, false);
//}

uint16_t crc16_augccitt_false(uint8_t *data, uint8_t len) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
    return crc16_common(data, len, 0x1021, 0xFFFF, 0x0000, false, false);
 8000d34:	78f9      	ldrb	r1, [r7, #3]
 8000d36:	2300      	movs	r3, #0
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	f241 0221 	movw	r2, #4129	; 0x1021
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff8d 	bl	8000c6a <crc16_common>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <init_sd>:
static BOOLEAN init_sd(void);
static BOOLEAN read_sd_and_firmware(void);
static BOOLEAN check_firmware(void);
static BOOLEAN finish_firmware(void);

static BOOLEAN init_sd(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	if(is_init == FALSE){
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <init_sd+0x40>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d113      	bne.n	8000d90 <init_sd+0x34>
	   readBuff = (char*) malloc(100);
 8000d68:	2064      	movs	r0, #100	; 0x64
 8000d6a:	f00b ff3f 	bl	800cbec <malloc>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <init_sd+0x44>)
 8000d74:	601a      	str	r2, [r3, #0]
	   content = (char*) malloc(100);
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f00b ff38 	bl	800cbec <malloc>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <init_sd+0x48>)
 8000d82:	601a      	str	r2, [r3, #0]
	   MX_DMA_Init();
 8000d84:	f000 fbca 	bl	800151c <MX_DMA_Init>
	   MX_SDIO_SD_Init();
 8000d88:	f000 fb66 	bl	8001458 <MX_SDIO_SD_Init>
	   MX_FATFS_Init();
 8000d8c:	f005 f868 	bl	8005e60 <MX_FATFS_Init>
	}
	is_init = TRUE;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <init_sd+0x40>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20002266 	.word	0x20002266
 8000da0:	20002114 	.word	0x20002114
 8000da4:	20002118 	.word	0x20002118

08000da8 <read_sd_and_firmware>:



static BOOLEAN read_sd_and_firmware(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	  f_addr = 0x0000; // Сброс адреса регистров
 8000dac:	4b70      	ldr	r3, [pc, #448]	; (8000f70 <read_sd_and_firmware+0x1c8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	801a      	strh	r2, [r3, #0]

	  // Подключение флешки
	  fr = f_mount(&FatFs, "", 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	496f      	ldr	r1, [pc, #444]	; (8000f74 <read_sd_and_firmware+0x1cc>)
 8000db6:	4870      	ldr	r0, [pc, #448]	; (8000f78 <read_sd_and_firmware+0x1d0>)
 8000db8:	f007 fca0 	bl	80086fc <f_mount>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b6e      	ldr	r3, [pc, #440]	; (8000f7c <read_sd_and_firmware+0x1d4>)
 8000dc2:	701a      	strb	r2, [r3, #0]
	  if(fr != FR_OK){
 8000dc4:	4b6d      	ldr	r3, [pc, #436]	; (8000f7c <read_sd_and_firmware+0x1d4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <read_sd_and_firmware+0x34>
		  printf("SD card detection error %d\n", fr);
 8000dcc:	4b6b      	ldr	r3, [pc, #428]	; (8000f7c <read_sd_and_firmware+0x1d4>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	486b      	ldr	r0, [pc, #428]	; (8000f80 <read_sd_and_firmware+0x1d8>)
 8000dd4:	f00c f880 	bl	800ced8 <iprintf>
		  return FALSE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e0c7      	b.n	8000f6c <read_sd_and_firmware+0x1c4>
	  }
	  printf("SD card detected\n");
 8000ddc:	4869      	ldr	r0, [pc, #420]	; (8000f84 <read_sd_and_firmware+0x1dc>)
 8000dde:	f00c f8e1 	bl	800cfa4 <puts>

      // Открытие файла
	  fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 8000de2:	2201      	movs	r2, #1
 8000de4:	4968      	ldr	r1, [pc, #416]	; (8000f88 <read_sd_and_firmware+0x1e0>)
 8000de6:	4869      	ldr	r0, [pc, #420]	; (8000f8c <read_sd_and_firmware+0x1e4>)
 8000de8:	f007 fcec 	bl	80087c4 <f_open>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b62      	ldr	r3, [pc, #392]	; (8000f7c <read_sd_and_firmware+0x1d4>)
 8000df2:	701a      	strb	r2, [r3, #0]
	  if(fr != FR_OK){
 8000df4:	4b61      	ldr	r3, [pc, #388]	; (8000f7c <read_sd_and_firmware+0x1d4>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <read_sd_and_firmware+0x64>
		  printf("Can't open file >senasic_app_snp736.bin<  %d\n", fr);
 8000dfc:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <read_sd_and_firmware+0x1d4>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4863      	ldr	r0, [pc, #396]	; (8000f90 <read_sd_and_firmware+0x1e8>)
 8000e04:	f00c f868 	bl	800ced8 <iprintf>
		  return FALSE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e0af      	b.n	8000f6c <read_sd_and_firmware+0x1c4>
	  }
	  printf("File >senasic_app_snp736.bin< was opened success\n");
 8000e0c:	4861      	ldr	r0, [pc, #388]	; (8000f94 <read_sd_and_firmware+0x1ec>)
 8000e0e:	f00c f8c9 	bl	800cfa4 <puts>

	  memset(&readBuff[0], 0x00, 100);
 8000e12:	4b61      	ldr	r3, [pc, #388]	; (8000f98 <read_sd_and_firmware+0x1f0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2264      	movs	r2, #100	; 0x64
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f00c f9d6 	bl	800d1cc <memset>
	  memset(&content[0], 0x00, 100);
 8000e20:	4b5e      	ldr	r3, [pc, #376]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2264      	movs	r2, #100	; 0x64
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00c f9cf 	bl	800d1cc <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){
 8000e2e:	e08c      	b.n	8000f4a <read_sd_and_firmware+0x1a2>
	  if(bytesRead == 0) goto down; // Если ничего не прочитано
 8000e30:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 8094 	beq.w	8000f62 <read_sd_and_firmware+0x1ba>

	     // Добавляем адрес регистра
	     content[0] = f_addr >> 8;
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <read_sd_and_firmware+0x1c8>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	701a      	strb	r2, [r3, #0]
	     content[1] = f_addr;
 8000e4a:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <read_sd_and_firmware+0x1c8>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	4b53      	ldr	r3, [pc, #332]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	701a      	strb	r2, [r3, #0]
	     memcpy(&content[2], &readBuff[0], bytesRead);
 8000e58:	4b50      	ldr	r3, [pc, #320]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	4a4e      	ldr	r2, [pc, #312]	; (8000f98 <read_sd_and_firmware+0x1f0>)
 8000e60:	6811      	ldr	r1, [r2, #0]
 8000e62:	4a4f      	ldr	r2, [pc, #316]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00c fa3b 	bl	800d2e2 <memcpy>

	     if(f_addr == 0x1FC0){
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <read_sd_and_firmware+0x1c8>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 8000e74:	d116      	bne.n	8000ea4 <read_sd_and_firmware+0xfc>
	        content[bytesRead + 1] = 0xEF;
 8000e76:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	22ef      	movs	r2, #239	; 0xef
 8000e84:	701a      	strb	r2, [r3, #0]
		    content[bytesRead] = 0xCD;
 8000e86:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	22cd      	movs	r2, #205	; 0xcd
 8000e92:	701a      	strb	r2, [r3, #0]
		    content[bytesRead - 1] = 0xAB;
 8000e94:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	22ab      	movs	r2, #171	; 0xab
 8000ea2:	701a      	strb	r2, [r3, #0]
	     }

	     // Добавляем контрольную сумму
	     crc16 = crc16_augccitt_false(&content[0], bytesRead + 2);
 8000ea4:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3302      	adds	r3, #2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	f7ff ff39 	bl	8000d28 <crc16_augccitt_false>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000ebc:	801a      	strh	r2, [r3, #0]
	     content[bytesRead + 2] = crc16 >> 8;
 8000ebe:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
	     content[bytesRead + 3] = crc16;
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <read_sd_and_firmware+0x1fc>)
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3303      	adds	r3, #3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b2ca      	uxtb	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]

	     // Отправка
	     if(!i2c_send_data_to_device(0x36, content, bytesRead + 4)) {
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2036      	movs	r0, #54	; 0x36
 8000efc:	f000 fdb0 	bl	8001a60 <i2c_send_data_to_device>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <read_sd_and_firmware+0x174>
		    print_hex("ERROR TO SEND: ", content, bytesRead + 4);
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	461a      	mov	r2, r3
 8000f12:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <read_sd_and_firmware+0x200>)
 8000f14:	f000 fce2 	bl	80018dc <print_hex>
		    return FALSE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e027      	b.n	8000f6c <read_sd_and_firmware+0x1c4>
	     }

	     f_addr += bytesRead;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <read_sd_and_firmware+0x1c8>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <read_sd_and_firmware+0x1c8>)
 8000f2c:	801a      	strh	r2, [r3, #0]

	     memset(&readBuff[0], 0x00, 100);
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <read_sd_and_firmware+0x1f0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00c f948 	bl	800d1cc <memset>
	     memset(&content[0], 0x00, 100);
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <read_sd_and_firmware+0x1f4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2264      	movs	r2, #100	; 0x64
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00c f941 	bl	800d1cc <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <read_sd_and_firmware+0x1f0>)
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <read_sd_and_firmware+0x1f8>)
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <read_sd_and_firmware+0x1e4>)
 8000f54:	f007 fe1e 	bl	8008b94 <f_read>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f43f af68 	beq.w	8000e30 <read_sd_and_firmware+0x88>
	  }
	  down:
 8000f60:	e000      	b.n	8000f64 <read_sd_and_firmware+0x1bc>
	  if(bytesRead == 0) goto down; // Если ничего не прочитано
 8000f62:	bf00      	nop

	  // Закрытие файла
      f_close(&fil);
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <read_sd_and_firmware+0x1e4>)
 8000f66:	f008 f82c 	bl	8008fc2 <f_close>
      return TRUE;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20002264 	.word	0x20002264
 8000f74:	0800df70 	.word	0x0800df70
 8000f78:	200000a0 	.word	0x200000a0
 8000f7c:	2000210c 	.word	0x2000210c
 8000f80:	0800df74 	.word	0x0800df74
 8000f84:	0800df90 	.word	0x0800df90
 8000f88:	0800dfa4 	.word	0x0800dfa4
 8000f8c:	200010dc 	.word	0x200010dc
 8000f90:	0800dfbc 	.word	0x0800dfbc
 8000f94:	0800dfec 	.word	0x0800dfec
 8000f98:	20002114 	.word	0x20002114
 8000f9c:	20002118 	.word	0x20002118
 8000fa0:	20002110 	.word	0x20002110
 8000fa4:	2000211c 	.word	0x2000211c
 8000fa8:	0800e020 	.word	0x0800e020

08000fac <check_firmware>:

static BOOLEAN check_firmware(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	 f_addr = 0x0000; // Сброс адреса регистров
 8000fb2:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <check_firmware+0x1b4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	801a      	strh	r2, [r3, #0]

	 // Подключение флешки
     fr = f_mount(&FatFs, "", 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	496a      	ldr	r1, [pc, #424]	; (8001164 <check_firmware+0x1b8>)
 8000fbc:	486a      	ldr	r0, [pc, #424]	; (8001168 <check_firmware+0x1bc>)
 8000fbe:	f007 fb9d 	bl	80086fc <f_mount>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b69      	ldr	r3, [pc, #420]	; (800116c <check_firmware+0x1c0>)
 8000fc8:	701a      	strb	r2, [r3, #0]
	 if(fr != FR_OK){
 8000fca:	4b68      	ldr	r3, [pc, #416]	; (800116c <check_firmware+0x1c0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <check_firmware+0x36>
		printf("SD card detection error %d\n", fr);
 8000fd2:	4b66      	ldr	r3, [pc, #408]	; (800116c <check_firmware+0x1c0>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4865      	ldr	r0, [pc, #404]	; (8001170 <check_firmware+0x1c4>)
 8000fda:	f00b ff7d 	bl	800ced8 <iprintf>
		return FALSE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e0ba      	b.n	8001158 <check_firmware+0x1ac>
     }
     printf("SD card detected\n");
 8000fe2:	4864      	ldr	r0, [pc, #400]	; (8001174 <check_firmware+0x1c8>)
 8000fe4:	f00b ffde 	bl	800cfa4 <puts>

	 // Открытие файла
     fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4963      	ldr	r1, [pc, #396]	; (8001178 <check_firmware+0x1cc>)
 8000fec:	4863      	ldr	r0, [pc, #396]	; (800117c <check_firmware+0x1d0>)
 8000fee:	f007 fbe9 	bl	80087c4 <f_open>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	; (800116c <check_firmware+0x1c0>)
 8000ff8:	701a      	strb	r2, [r3, #0]
	 if(fr != FR_OK){
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <check_firmware+0x1c0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <check_firmware+0x66>
	     printf("Can't open file >senasic_app_snp736.bin<  %d\n", fr);
 8001002:	4b5a      	ldr	r3, [pc, #360]	; (800116c <check_firmware+0x1c0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	485d      	ldr	r0, [pc, #372]	; (8001180 <check_firmware+0x1d4>)
 800100a:	f00b ff65 	bl	800ced8 <iprintf>
		 return FALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	e0a2      	b.n	8001158 <check_firmware+0x1ac>
	  }
	  printf("File >senasic_app_snp736.bin< was opened success\n");
 8001012:	485c      	ldr	r0, [pc, #368]	; (8001184 <check_firmware+0x1d8>)
 8001014:	f00b ffc6 	bl	800cfa4 <puts>

	  memset(&readBuff[0], 0x00, 100);
 8001018:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <check_firmware+0x1dc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2264      	movs	r2, #100	; 0x64
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f00c f8d3 	bl	800d1cc <memset>
	  memset(&content[0], 0x00, 100);
 8001026:	4b59      	ldr	r3, [pc, #356]	; (800118c <check_firmware+0x1e0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2264      	movs	r2, #100	; 0x64
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00c f8cc 	bl	800d1cc <memset>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){            // Читаем из файла 64 байта
 8001034:	e084      	b.n	8001140 <check_firmware+0x194>
		     if(f_addr == 0x1FC0){
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <check_firmware+0x1b4>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 800103e:	d127      	bne.n	8001090 <check_firmware+0xe4>
		    	 print_hex("PRINT before: ", readBuff, bytesRead);
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <check_firmware+0x1dc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a52      	ldr	r2, [pc, #328]	; (8001190 <check_firmware+0x1e4>)
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	4852      	ldr	r0, [pc, #328]	; (8001194 <check_firmware+0x1e8>)
 800104c:	f000 fc46 	bl	80018dc <print_hex>
		    	 readBuff[bytesRead - 1] = 0xEF;
 8001050:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <check_firmware+0x1dc>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <check_firmware+0x1e4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	22ef      	movs	r2, #239	; 0xef
 800105e:	701a      	strb	r2, [r3, #0]
		    	 readBuff[bytesRead - 2] = 0xCD;
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <check_firmware+0x1dc>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <check_firmware+0x1e4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3b02      	subs	r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	22cd      	movs	r2, #205	; 0xcd
 800106e:	701a      	strb	r2, [r3, #0]
		    	 readBuff[bytesRead - 3] = 0xAB;
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <check_firmware+0x1dc>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b46      	ldr	r3, [pc, #280]	; (8001190 <check_firmware+0x1e4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b03      	subs	r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	22ab      	movs	r2, #171	; 0xab
 800107e:	701a      	strb	r2, [r3, #0]
		    	 print_hex("PRINT after: ", readBuff, bytesRead);
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <check_firmware+0x1dc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a42      	ldr	r2, [pc, #264]	; (8001190 <check_firmware+0x1e4>)
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	4843      	ldr	r0, [pc, #268]	; (8001198 <check_firmware+0x1ec>)
 800108c:	f000 fc26 	bl	80018dc <print_hex>
		  	 }

			 if(!i2c_read_data_from_device(0x36, f_addr, content, 66)){  // Читаем из памяти 66 байт
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <check_firmware+0x1b4>)
 8001092:	8819      	ldrh	r1, [r3, #0]
 8001094:	4b3d      	ldr	r3, [pc, #244]	; (800118c <check_firmware+0x1e0>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2342      	movs	r3, #66	; 0x42
 800109a:	2036      	movs	r0, #54	; 0x36
 800109c:	f000 fc84 	bl	80019a8 <i2c_read_data_from_device>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d104      	bne.n	80010b0 <check_firmware+0x104>
				printf("error check\n");
 80010a6:	483d      	ldr	r0, [pc, #244]	; (800119c <check_firmware+0x1f0>)
 80010a8:	f00b ff7c 	bl	800cfa4 <puts>
			    return FALSE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e053      	b.n	8001158 <check_firmware+0x1ac>
			 }

			 print_hex("PRINT content: ", content, 66);
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <check_firmware+0x1e0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2242      	movs	r2, #66	; 0x42
 80010b6:	4619      	mov	r1, r3
 80010b8:	4839      	ldr	r0, [pc, #228]	; (80011a0 <check_firmware+0x1f4>)
 80010ba:	f000 fc0f 	bl	80018dc <print_hex>

			 // Сравниваем
			 for(int i = 0; i < 64; i ++){
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	e02d      	b.n	8001120 <check_firmware+0x174>
				 if(readBuff[i] != content[i]){
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <check_firmware+0x1dc>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <check_firmware+0x1e0>)
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	440b      	add	r3, r1
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d01e      	beq.n	800111a <check_firmware+0x16e>
					 printf("expect/actual %02X %02X \n", readBuff[i], content[i]);
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <check_firmware+0x1dc>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <check_firmware+0x1e0>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	482b      	ldr	r0, [pc, #172]	; (80011a4 <check_firmware+0x1f8>)
 80010f6:	f00b feef 	bl	800ced8 <iprintf>
					 print_hex("SD:", readBuff, 64);
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <check_firmware+0x1dc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	4619      	mov	r1, r3
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <check_firmware+0x1fc>)
 8001104:	f000 fbea 	bl	80018dc <print_hex>
					 print_hex("SN:", content, 64);
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <check_firmware+0x1e0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	4619      	mov	r1, r3
 8001110:	4826      	ldr	r0, [pc, #152]	; (80011ac <check_firmware+0x200>)
 8001112:	f000 fbe3 	bl	80018dc <print_hex>
					 return FALSE;
 8001116:	2300      	movs	r3, #0
 8001118:	e01e      	b.n	8001158 <check_firmware+0x1ac>
			 for(int i = 0; i < 64; i ++){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b3f      	cmp	r3, #63	; 0x3f
 8001124:	ddce      	ble.n	80010c4 <check_firmware+0x118>
				 }
			 }

			 f_addr += 64;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <check_firmware+0x1b4>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	3340      	adds	r3, #64	; 0x40
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <check_firmware+0x1b4>)
 8001130:	801a      	strh	r2, [r3, #0]
			 if(f_addr == 0x4000) return TRUE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <check_firmware+0x1b4>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800113a:	d101      	bne.n	8001140 <check_firmware+0x194>
 800113c:	2301      	movs	r3, #1
 800113e:	e00b      	b.n	8001158 <check_firmware+0x1ac>
	  while(f_read(&fil, readBuff, 64, &bytesRead) == FR_OK){            // Читаем из файла 64 байта
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <check_firmware+0x1dc>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <check_firmware+0x1e4>)
 8001146:	2240      	movs	r2, #64	; 0x40
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <check_firmware+0x1d0>)
 800114a:	f007 fd23 	bl	8008b94 <f_read>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	f43f af70 	beq.w	8001036 <check_firmware+0x8a>
	  }
	  return TRUE;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20002264 	.word	0x20002264
 8001164:	0800df70 	.word	0x0800df70
 8001168:	200000a0 	.word	0x200000a0
 800116c:	2000210c 	.word	0x2000210c
 8001170:	0800df74 	.word	0x0800df74
 8001174:	0800df90 	.word	0x0800df90
 8001178:	0800dfa4 	.word	0x0800dfa4
 800117c:	200010dc 	.word	0x200010dc
 8001180:	0800dfbc 	.word	0x0800dfbc
 8001184:	0800dfec 	.word	0x0800dfec
 8001188:	20002114 	.word	0x20002114
 800118c:	20002118 	.word	0x20002118
 8001190:	20002110 	.word	0x20002110
 8001194:	0800e030 	.word	0x0800e030
 8001198:	0800e040 	.word	0x0800e040
 800119c:	0800e050 	.word	0x0800e050
 80011a0:	0800e05c 	.word	0x0800e05c
 80011a4:	0800e06c 	.word	0x0800e06c
 80011a8:	0800e088 	.word	0x0800e088
 80011ac:	0800e08c 	.word	0x0800e08c

080011b0 <reset_to_factory>:

static BOOLEAN reset_to_factory(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
     // 1) write to 0x36 ack data: 0xA2 0x01 0x76 0x32
     uint8_t reset_cmd_1[4] = {0xA2, 0x01, 0x76, 0x32};
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <reset_to_factory+0x4c>)
 80011b8:	607b      	str	r3, [r7, #4]
     if(!i2c_send_data_to_device(SNP_ADDR, &reset_cmd_1, 4)) return FALSE;
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2204      	movs	r2, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	2036      	movs	r0, #54	; 0x36
 80011c2:	f000 fc4d 	bl	8001a60 <i2c_send_data_to_device>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <reset_to_factory+0x20>
 80011cc:	2300      	movs	r3, #0
 80011ce:	e010      	b.n	80011f2 <reset_to_factory+0x42>
     osDelay(100);
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f008 f9ec 	bl	80095ae <osDelay>
     // 2) write to 0x36 ack data: 0xA2, 0x02, 0x46, 0x51
     uint8_t reset_cmd_2[4] = {0xA2, 0x02, 0x46, 0x51};
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <reset_to_factory+0x50>)
 80011d8:	603b      	str	r3, [r7, #0]
     if(!i2c_send_data_to_device(SNP_ADDR, reset_cmd_2, 4)) return FALSE;
 80011da:	463b      	mov	r3, r7
 80011dc:	2204      	movs	r2, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	2036      	movs	r0, #54	; 0x36
 80011e2:	f000 fc3d 	bl	8001a60 <i2c_send_data_to_device>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <reset_to_factory+0x40>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e000      	b.n	80011f2 <reset_to_factory+0x42>
     return TRUE;
 80011f0:	2301      	movs	r3, #1
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	327601a2 	.word	0x327601a2
 8001200:	514602a2 	.word	0x514602a2

08001204 <update_firmware>:

extern BOOLEAN update_firmware(void){
 8001204:	b580      	push	{r7, lr}
 8001206:	b09a      	sub	sp, #104	; 0x68
 8001208:	af00      	add	r7, sp, #0
	// Подготовка к прошивке
    if(!prep_firmware()) {
 800120a:	f000 f945 	bl	8001498 <prep_firmware>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d104      	bne.n	800121e <update_firmware+0x1a>
    	printf("Can't switch SNP73X to programming mode\n");
 8001214:	4887      	ldr	r0, [pc, #540]	; (8001434 <update_firmware+0x230>)
 8001216:	f00b fec5 	bl	800cfa4 <puts>
    	return FALSE;
 800121a:	2300      	movs	r3, #0
 800121c:	e105      	b.n	800142a <update_firmware+0x226>
    }
    printf("Switch SNP73X to factory state was success\n");
 800121e:	4886      	ldr	r0, [pc, #536]	; (8001438 <update_firmware+0x234>)
 8001220:	f00b fec0 	bl	800cfa4 <puts>

    // Возврат заводской прошивки
    if(!reset_to_factory()) {
 8001224:	f7ff ffc4 	bl	80011b0 <reset_to_factory>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d104      	bne.n	8001238 <update_firmware+0x34>
    	printf("Can't rollback SNP76X to factory state\n");
 800122e:	4883      	ldr	r0, [pc, #524]	; (800143c <update_firmware+0x238>)
 8001230:	f00b feb8 	bl	800cfa4 <puts>
    	return FALSE;
 8001234:	2300      	movs	r3, #0
 8001236:	e0f8      	b.n	800142a <update_firmware+0x226>
    }
    printf("Reset to factory was success\n");
 8001238:	4881      	ldr	r0, [pc, #516]	; (8001440 <update_firmware+0x23c>)
 800123a:	f00b feb3 	bl	800cfa4 <puts>
    osDelay(125);
 800123e:	207d      	movs	r0, #125	; 0x7d
 8001240:	f008 f9b5 	bl	80095ae <osDelay>
    finish_firmware();
 8001244:	f000 f94c 	bl	80014e0 <finish_firmware>
    // Инит SD карты
    init_sd();
 8001248:	f7ff fd88 	bl	8000d5c <init_sd>
    // Чтение файла с SD карты и прошивка датчика
    if(!read_sd_and_firmware()){
 800124c:	f7ff fdac 	bl	8000da8 <read_sd_and_firmware>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d104      	bne.n	8001260 <update_firmware+0x5c>
    	printf("Firmware error\n");
 8001256:	487b      	ldr	r0, [pc, #492]	; (8001444 <update_firmware+0x240>)
 8001258:	f00b fea4 	bl	800cfa4 <puts>
    	return FALSE;
 800125c:	2300      	movs	r3, #0
 800125e:	e0e4      	b.n	800142a <update_firmware+0x226>
    }

    // Запись OPT
    char opt_data[100] = {0x40, 0x00, sensor_number, 0x00, 0x00, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8001260:	463b      	mov	r3, r7
 8001262:	2264      	movs	r2, #100	; 0x64
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00b ffb0 	bl	800d1cc <memset>
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	703b      	strb	r3, [r7, #0]
 8001270:	4b75      	ldr	r3, [pc, #468]	; (8001448 <update_firmware+0x244>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	70bb      	strb	r3, [r7, #2]
 8001276:	2309      	movs	r3, #9
 8001278:	717b      	strb	r3, [r7, #5]
 800127a:	23ff      	movs	r3, #255	; 0xff
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	23ff      	movs	r3, #255	; 0xff
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	23ff      	movs	r3, #255	; 0xff
 8001284:	723b      	strb	r3, [r7, #8]
 8001286:	23ff      	movs	r3, #255	; 0xff
 8001288:	727b      	strb	r3, [r7, #9]
 800128a:	23ff      	movs	r3, #255	; 0xff
 800128c:	72bb      	strb	r3, [r7, #10]
 800128e:	23ff      	movs	r3, #255	; 0xff
 8001290:	72fb      	strb	r3, [r7, #11]
 8001292:	23ff      	movs	r3, #255	; 0xff
 8001294:	733b      	strb	r3, [r7, #12]
 8001296:	23ff      	movs	r3, #255	; 0xff
 8001298:	737b      	strb	r3, [r7, #13]
 800129a:	23ff      	movs	r3, #255	; 0xff
 800129c:	73bb      	strb	r3, [r7, #14]
 800129e:	23ff      	movs	r3, #255	; 0xff
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	23ff      	movs	r3, #255	; 0xff
 80012a4:	743b      	strb	r3, [r7, #16]
 80012a6:	23ff      	movs	r3, #255	; 0xff
 80012a8:	747b      	strb	r3, [r7, #17]
 80012aa:	23ff      	movs	r3, #255	; 0xff
 80012ac:	74bb      	strb	r3, [r7, #18]
 80012ae:	23ff      	movs	r3, #255	; 0xff
 80012b0:	74fb      	strb	r3, [r7, #19]
 80012b2:	23ff      	movs	r3, #255	; 0xff
 80012b4:	753b      	strb	r3, [r7, #20]
 80012b6:	23ff      	movs	r3, #255	; 0xff
 80012b8:	757b      	strb	r3, [r7, #21]
 80012ba:	23ff      	movs	r3, #255	; 0xff
 80012bc:	75bb      	strb	r3, [r7, #22]
 80012be:	23ff      	movs	r3, #255	; 0xff
 80012c0:	75fb      	strb	r3, [r7, #23]
 80012c2:	23ff      	movs	r3, #255	; 0xff
 80012c4:	763b      	strb	r3, [r7, #24]
 80012c6:	23ff      	movs	r3, #255	; 0xff
 80012c8:	767b      	strb	r3, [r7, #25]
 80012ca:	23ff      	movs	r3, #255	; 0xff
 80012cc:	76bb      	strb	r3, [r7, #26]
 80012ce:	23ff      	movs	r3, #255	; 0xff
 80012d0:	76fb      	strb	r3, [r7, #27]
 80012d2:	23ff      	movs	r3, #255	; 0xff
 80012d4:	773b      	strb	r3, [r7, #28]
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	777b      	strb	r3, [r7, #29]
 80012da:	23ff      	movs	r3, #255	; 0xff
 80012dc:	77bb      	strb	r3, [r7, #30]
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	77fb      	strb	r3, [r7, #31]
 80012e2:	23ff      	movs	r3, #255	; 0xff
 80012e4:	f887 3020 	strb.w	r3, [r7, #32]
 80012e8:	23ff      	movs	r3, #255	; 0xff
 80012ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80012f4:	23ff      	movs	r3, #255	; 0xff
 80012f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80012fa:	23ff      	movs	r3, #255	; 0xff
 80012fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001306:	23ff      	movs	r3, #255	; 0xff
 8001308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800130c:	23ff      	movs	r3, #255	; 0xff
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001312:	23ff      	movs	r3, #255	; 0xff
 8001314:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001318:	23ff      	movs	r3, #255	; 0xff
 800131a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001324:	23ff      	movs	r3, #255	; 0xff
 8001326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800132a:	23ff      	movs	r3, #255	; 0xff
 800132c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001330:	23ff      	movs	r3, #255	; 0xff
 8001332:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001336:	23ff      	movs	r3, #255	; 0xff
 8001338:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800133c:	23ff      	movs	r3, #255	; 0xff
 800133e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001342:	23ff      	movs	r3, #255	; 0xff
 8001344:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001348:	23ff      	movs	r3, #255	; 0xff
 800134a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800134e:	23ff      	movs	r3, #255	; 0xff
 8001350:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001354:	23ff      	movs	r3, #255	; 0xff
 8001356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001360:	23ff      	movs	r3, #255	; 0xff
 8001362:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001366:	23ff      	movs	r3, #255	; 0xff
 8001368:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800136c:	23ff      	movs	r3, #255	; 0xff
 800136e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001372:	23ff      	movs	r3, #255	; 0xff
 8001374:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001378:	23ff      	movs	r3, #255	; 0xff
 800137a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800137e:	23ff      	movs	r3, #255	; 0xff
 8001380:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001384:	23ff      	movs	r3, #255	; 0xff
 8001386:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800138a:	23ff      	movs	r3, #255	; 0xff
 800138c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001390:	23ff      	movs	r3, #255	; 0xff
 8001392:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001396:	23ff      	movs	r3, #255	; 0xff
 8001398:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800139c:	23ff      	movs	r3, #255	; 0xff
 800139e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80013a2:	23ff      	movs	r3, #255	; 0xff
 80013a4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80013a8:	23ff      	movs	r3, #255	; 0xff
 80013aa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                       // 0x40, 0x00, sensor_number, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
                       //  1     2         3          4     5     6     7     8      9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39   40     41    42    43    44    45   46     47    48    49    50    51    52    53    54    55   56     57    58    59    60    61    62     63    64   65    66
    UINT8 opt_data_size = 66;
 80013ae:	2342      	movs	r3, #66	; 0x42
 80013b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    crc16 = crc16_augccitt_false(&opt_data[0], opt_data_size);
 80013b4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80013b8:	463b      	mov	r3, r7
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fcb3 	bl	8000d28 <crc16_augccitt_false>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <update_firmware+0x248>)
 80013c8:	801a      	strh	r2, [r3, #0]
    opt_data[opt_data_size] = crc16 >> 8;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <update_firmware+0x248>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	3368      	adds	r3, #104	; 0x68
 80013da:	443b      	add	r3, r7
 80013dc:	f803 2c68 	strb.w	r2, [r3, #-104]
    opt_data[opt_data_size + 1] = crc16;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <update_firmware+0x248>)
 80013e2:	881a      	ldrh	r2, [r3, #0]
 80013e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	3368      	adds	r3, #104	; 0x68
 80013ee:	443b      	add	r3, r7
 80013f0:	f803 2c68 	strb.w	r2, [r3, #-104]

    // 0x40 0x00 0x02 0x00 0x00 0x09 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF0 0x5C
    //   1    2    3    4   5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68
    i2c_send_data_to_device(0x36, opt_data, opt_data_size + 2);
 80013f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3302      	adds	r3, #2
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	2036      	movs	r0, #54	; 0x36
 8001404:	f000 fb2c 	bl	8001a60 <i2c_send_data_to_device>

    // Прочитать все записанные данные (0x0000 > 0x4000)
    if(!check_firmware()){
 8001408:	f7ff fdd0 	bl	8000fac <check_firmware>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <update_firmware+0x214>
    	printf("error while check");
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <update_firmware+0x24c>)
 8001414:	f00b fd60 	bl	800ced8 <iprintf>
    }

    printf("FW was finish\n");
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <update_firmware+0x250>)
 800141a:	f00b fdc3 	bl	800cfa4 <puts>
    osDelay(45);
 800141e:	202d      	movs	r0, #45	; 0x2d
 8001420:	f008 f8c5 	bl	80095ae <osDelay>
    finish_firmware();
 8001424:	f000 f85c 	bl	80014e0 <finish_firmware>
    return TRUE;
 8001428:	2301      	movs	r3, #1
}
 800142a:	4618      	mov	r0, r3
 800142c:	3768      	adds	r7, #104	; 0x68
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	0800e090 	.word	0x0800e090
 8001438:	0800e0b8 	.word	0x0800e0b8
 800143c:	0800e0e4 	.word	0x0800e0e4
 8001440:	0800e10c 	.word	0x0800e10c
 8001444:	0800e12c 	.word	0x0800e12c
 8001448:	20000014 	.word	0x20000014
 800144c:	2000211c 	.word	0x2000211c
 8001450:	0800e13c 	.word	0x0800e13c
 8001454:	0800e150 	.word	0x0800e150

08001458 <MX_SDIO_SD_Init>:

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */static void MX_SDIO_SD_Init(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
    hsd.Instance = SDIO;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <MX_SDIO_SD_Init+0x3c>)
 8001460:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 0;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
    HAL_SD_Init(&hsd);
 8001486:	4802      	ldr	r0, [pc, #8]	; (8001490 <MX_SDIO_SD_Init+0x38>)
 8001488:	f002 feee 	bl	8004268 <HAL_SD_Init>
  }
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20002120 	.word	0x20002120
 8001494:	40012c00 	.word	0x40012c00

08001498 <prep_firmware>:

static BOOLEAN prep_firmware(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	// Перевод SDA/SCL пинов в режим GPIO
		switch_mode_sda_scl(GPIO_M);
 800149c:	2000      	movs	r0, #0
 800149e:	f000 f87b 	bl	8001598 <switch_mode_sda_scl>

		set_sda(GPIO_PIN_RESET);   // SDA off
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f996 	bl	80017d4 <set_sda>
		set_scl(GPIO_PIN_RESET);   // SCL off
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f9ad 	bl	8001808 <set_scl>
		set_power(GPIO_PIN_RESET); // VDD off
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f97e 	bl	80017b0 <set_power>
		osDelay(80);
 80014b4:	2050      	movs	r0, #80	; 0x50
 80014b6:	f008 f87a 	bl	80095ae <osDelay>
	 	set_power(GPIO_PIN_SET);   // VDD on
 80014ba:	2001      	movs	r0, #1
 80014bc:	f000 f978 	bl	80017b0 <set_power>

		// GPIO0(SCL) GPIO1(SDA) должны удерживаться в состояниий  GPIO1 = 1, GPIO0 = 0 не менее 256 мсек
		set_sda(GPIO_PIN_RESET);    // SDA on
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 f987 	bl	80017d4 <set_sda>
		set_scl(GPIO_PIN_SET);  // SCL off
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 f99e 	bl	8001808 <set_scl>
		osDelay(500);
 80014cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d0:	f008 f86d 	bl	80095ae <osDelay>

		// Перевод SDA/SCL пинов в режим I2C
		switch_mode_sda_scl(I2C_M);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f000 f85f 	bl	8001598 <switch_mode_sda_scl>
		return TRUE;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	bd80      	pop	{r7, pc}

080014e0 <finish_firmware>:

static BOOLEAN finish_firmware(void){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	switch_mode_sda_scl(GPIO_M);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f857 	bl	8001598 <switch_mode_sda_scl>
	set_sda(GPIO_PIN_RESET);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f972 	bl	80017d4 <set_sda>
	set_scl(GPIO_PIN_RESET);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 f989 	bl	8001808 <set_scl>
	osDelay(80);
 80014f6:	2050      	movs	r0, #80	; 0x50
 80014f8:	f008 f859 	bl	80095ae <osDelay>
	set_scl(GPIO_PIN_SET);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f000 f983 	bl	8001808 <set_scl>
	osDelay(320);
 8001502:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001506:	f008 f852 	bl	80095ae <osDelay>
	set_sda(GPIO_PIN_SET);
 800150a:	2001      	movs	r0, #1
 800150c:	f000 f962 	bl	80017d4 <set_sda>
	switch_mode_sda_scl(I2C_M);
 8001510:	2001      	movs	r0, #1
 8001512:	f000 f841 	bl	8001598 <switch_mode_sda_scl>
	return TRUE;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}

0800151c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_DMA_Init+0x4c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <MX_DMA_Init+0x4c>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_DMA_Init+0x4c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2105      	movs	r1, #5
 8001542:	203b      	movs	r0, #59	; 0x3b
 8001544:	f000 fd0d 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001548:	203b      	movs	r0, #59	; 0x3b
 800154a:	f000 fd26 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2105      	movs	r1, #5
 8001552:	2045      	movs	r0, #69	; 0x45
 8001554:	f000 fd05 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001558:	2045      	movs	r0, #69	; 0x45
 800155a:	f000 fd1e 	bl	8001f9a <HAL_NVIC_EnableIRQ>

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <gpio_start>:

static BOOLEAN init_io(void);
static void gpio_watcher(void);


extern BOOLEAN gpio_start(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
   if(is_init) return TRUE;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <gpio_start+0x28>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <gpio_start+0x10>
 8001578:	2301      	movs	r3, #1
 800157a:	e008      	b.n	800158e <gpio_start+0x22>
   is_init = init_io();
 800157c:	f000 f88c 	bl	8001698 <init_io>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <gpio_start+0x28>)
 8001586:	701a      	strb	r2, [r3, #0]
   gpio_watcher();
 8001588:	f000 f876 	bl	8001678 <gpio_watcher>
   return TRUE;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20002267 	.word	0x20002267

08001598 <switch_mode_sda_scl>:


extern BOOLEAN switch_mode_sda_scl(SDA_SCL_MODE mode){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <switch_mode_sda_scl+0x16>
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d00d      	beq.n	80015c8 <switch_mode_sda_scl+0x30>
 80015ac:	e01f      	b.n	80015ee <switch_mode_sda_scl+0x56>
	case GPIO_M:
		printf("SDA/SCL has GPIO_MODE\n");
 80015ae:	482a      	ldr	r0, [pc, #168]	; (8001658 <switch_mode_sda_scl+0xc0>)
 80015b0:	f00b fcf8 	bl	800cfa4 <puts>
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <switch_mode_sda_scl+0xc4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <switch_mode_sda_scl+0xc8>)
 80015bc:	2201      	movs	r2, #1
 80015be:	605a      	str	r2, [r3, #4]
		current_mode = GPIO_M;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <switch_mode_sda_scl+0xcc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
		break;
 80015c6:	e017      	b.n	80015f8 <switch_mode_sda_scl+0x60>
	case I2C_M:
		printf("SDA/SCL has I2C_MODE\n");
 80015c8:	4827      	ldr	r0, [pc, #156]	; (8001668 <switch_mode_sda_scl+0xd0>)
 80015ca:	f00b fceb 	bl	800cfa4 <puts>
	    GPIO_InitStruct_i2c_sda.Alternate = GPIO_AF4_I2C1;
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <switch_mode_sda_scl+0xc8>)
 80015d0:	2204      	movs	r2, #4
 80015d2:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Alternate = GPIO_AF4_I2C1;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <switch_mode_sda_scl+0xc4>)
 80015d6:	2204      	movs	r2, #4
 80015d8:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct_i2c_scl.Mode = GPIO_MODE_AF_OD;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <switch_mode_sda_scl+0xc4>)
 80015dc:	2212      	movs	r2, #18
 80015de:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct_i2c_sda.Mode = GPIO_MODE_AF_OD;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <switch_mode_sda_scl+0xc8>)
 80015e2:	2212      	movs	r2, #18
 80015e4:	605a      	str	r2, [r3, #4]
		current_mode = I2C_M;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <switch_mode_sda_scl+0xcc>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
        break;
 80015ec:	e004      	b.n	80015f8 <switch_mode_sda_scl+0x60>
	default:
		printf("Unknown state for SDA/SCL pins\n");
 80015ee:	481f      	ldr	r0, [pc, #124]	; (800166c <switch_mode_sda_scl+0xd4>)
 80015f0:	f00b fcd8 	bl	800cfa4 <puts>
		return FALSE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e02a      	b.n	800164e <switch_mode_sda_scl+0xb6>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <switch_mode_sda_scl+0xd8>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <switch_mode_sda_scl+0xd8>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <switch_mode_sda_scl+0xd8>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitStruct_i2c_scl.Pin = SCL;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <switch_mode_sda_scl+0xc4>)
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct_i2c_sda.Pin = SDA;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <switch_mode_sda_scl+0xc8>)
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	601a      	str	r2, [r3, #0]

	GPIO_InitStruct_i2c_scl.Pull = GPIO_PULLUP;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <switch_mode_sda_scl+0xc4>)
 8001626:	2201      	movs	r2, #1
 8001628:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct_i2c_sda.Pull = GPIO_PULLUP;
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <switch_mode_sda_scl+0xc8>)
 800162c:	2201      	movs	r2, #1
 800162e:	609a      	str	r2, [r3, #8]

	GPIO_InitStruct_i2c_scl.Speed = GPIO_SPEED_HIGH;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <switch_mode_sda_scl+0xc4>)
 8001632:	2203      	movs	r2, #3
 8001634:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct_i2c_sda.Speed = GPIO_SPEED_HIGH;
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <switch_mode_sda_scl+0xc8>)
 8001638:	2203      	movs	r2, #3
 800163a:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(SDA_PORT, &GPIO_InitStruct_i2c_sda);
 800163c:	4908      	ldr	r1, [pc, #32]	; (8001660 <switch_mode_sda_scl+0xc8>)
 800163e:	480d      	ldr	r0, [pc, #52]	; (8001674 <switch_mode_sda_scl+0xdc>)
 8001640:	f001 f842 	bl	80026c8 <HAL_GPIO_Init>
	HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct_i2c_scl);
 8001644:	4905      	ldr	r1, [pc, #20]	; (800165c <switch_mode_sda_scl+0xc4>)
 8001646:	480b      	ldr	r0, [pc, #44]	; (8001674 <switch_mode_sda_scl+0xdc>)
 8001648:	f001 f83e 	bl	80026c8 <HAL_GPIO_Init>
	return TRUE;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	0800e2f8 	.word	0x0800e2f8
 800165c:	200022a4 	.word	0x200022a4
 8001660:	20002290 	.word	0x20002290
 8001664:	20000015 	.word	0x20000015
 8001668:	0800e310 	.word	0x0800e310
 800166c:	0800e328 	.word	0x0800e328
 8001670:	40023800 	.word	0x40023800
 8001674:	40020400 	.word	0x40020400

08001678 <gpio_watcher>:

static void gpio_watcher(void){
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	while(is_init){
 800167c:	bf00      	nop
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <gpio_watcher+0x1c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1fb      	bne.n	800167e <gpio_watcher+0x6>

	}
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20002267 	.word	0x20002267

08001698 <init_io>:

extern void gpio_stop(void){
	is_init = FALSE;
}

static BOOLEAN init_io(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <init_io+0x100>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a3c      	ldr	r2, [pc, #240]	; (8001798 <init_io+0x100>)
 80016a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <init_io+0x100>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <init_io+0x100>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a35      	ldr	r2, [pc, #212]	; (8001798 <init_io+0x100>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <init_io+0x100>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_SDIO_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <init_io+0x100>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <init_io+0x100>)
 80016e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <init_io+0x100>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

	 // Инит кнопки
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <init_io+0x100>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a27      	ldr	r2, [pc, #156]	; (8001798 <init_io+0x100>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <init_io+0x100>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
	 GPIO_InitStruct_green_led.Pin = BLUE_BUTTON;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <init_io+0x104>)
 8001710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001714:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_green_led.Mode = GPIO_MODE_INPUT; // вход
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <init_io+0x104>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_green_led.Pull = GPIO_PULLDOWN;
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <init_io+0x104>)
 800171e:	2202      	movs	r2, #2
 8001720:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_green_led.Speed = GPIO_SPEED_HIGH;
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <init_io+0x104>)
 8001724:	2203      	movs	r2, #3
 8001726:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(BLUE_BUTTON_PORT, &GPIO_InitStruct_green_led);
 8001728:	491c      	ldr	r1, [pc, #112]	; (800179c <init_io+0x104>)
 800172a:	481d      	ldr	r0, [pc, #116]	; (80017a0 <init_io+0x108>)
 800172c:	f000 ffcc 	bl	80026c8 <HAL_GPIO_Init>

	 // Инит индикатора
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <init_io+0x100>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <init_io+0x100>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <init_io+0x100>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
	 GPIO_InitStruct_blue_button.Pin = LED_GREEN;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <init_io+0x10c>)
 800174e:	2220      	movs	r2, #32
 8001750:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_blue_button.Mode = GPIO_MODE_OUTPUT_PP; // выход
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <init_io+0x10c>)
 8001754:	2201      	movs	r2, #1
 8001756:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_blue_button.Pull = GPIO_NOPULL;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <init_io+0x10c>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_blue_button.Speed = GPIO_SPEED_HIGH;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <init_io+0x10c>)
 8001760:	2203      	movs	r2, #3
 8001762:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct_blue_button);
 8001764:	490f      	ldr	r1, [pc, #60]	; (80017a4 <init_io+0x10c>)
 8001766:	4810      	ldr	r0, [pc, #64]	; (80017a8 <init_io+0x110>)
 8001768:	f000 ffae 	bl	80026c8 <HAL_GPIO_Init>


	 // Инит питания
	 GPIO_InitStruct_power.Pin = POWER;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <init_io+0x114>)
 800176e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001772:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct_power.Mode = GPIO_MODE_OUTPUT_PP; // выход
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <init_io+0x114>)
 8001776:	2201      	movs	r2, #1
 8001778:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct_power.Pull = GPIO_PULLDOWN;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <init_io+0x114>)
 800177c:	2202      	movs	r2, #2
 800177e:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct_power.Speed = GPIO_SPEED_HIGH;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <init_io+0x114>)
 8001782:	2203      	movs	r2, #3
 8001784:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(POWER_PORT, &GPIO_InitStruct_power);
 8001786:	4909      	ldr	r1, [pc, #36]	; (80017ac <init_io+0x114>)
 8001788:	4807      	ldr	r0, [pc, #28]	; (80017a8 <init_io+0x110>)
 800178a:	f000 ff9d 	bl	80026c8 <HAL_GPIO_Init>

	 return TRUE;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	20002268 	.word	0x20002268
 80017a0:	40020800 	.word	0x40020800
 80017a4:	2000227c 	.word	0x2000227c
 80017a8:	40020000 	.word	0x40020000
 80017ac:	200022b8 	.word	0x200022b8

080017b0 <set_power>:

extern void set_power(GPIO_PinState state){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
     HAL_GPIO_WritePin(POWER_PORT, POWER, state);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	461a      	mov	r2, r3
 80017be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <set_power+0x20>)
 80017c4:	f001 f91c 	bl	8002a00 <HAL_GPIO_WritePin>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40020000 	.word	0x40020000

080017d4 <set_sda>:

extern void set_sda(GPIO_PinState state){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
     if(current_mode != GPIO_M) return;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <set_sda+0x2c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <set_sda+0x22>
	 HAL_GPIO_WritePin(SDA_PORT, SDA, state);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	461a      	mov	r2, r3
 80017ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <set_sda+0x30>)
 80017f0:	f001 f906 	bl	8002a00 <HAL_GPIO_WritePin>
 80017f4:	e000      	b.n	80017f8 <set_sda+0x24>
     if(current_mode != GPIO_M) return;
 80017f6:	bf00      	nop
}
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000015 	.word	0x20000015
 8001804:	40020400 	.word	0x40020400

08001808 <set_scl>:

extern void set_scl(GPIO_PinState state){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	 if(current_mode != GPIO_M) return;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <set_scl+0x2c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <set_scl+0x22>
	 HAL_GPIO_WritePin(SCL_PORT, SCL, state);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	461a      	mov	r2, r3
 800181e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <set_scl+0x30>)
 8001824:	f001 f8ec 	bl	8002a00 <HAL_GPIO_WritePin>
 8001828:	e000      	b.n	800182c <set_scl+0x24>
	 if(current_mode != GPIO_M) return;
 800182a:	bf00      	nop
}
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000015 	.word	0x20000015
 8001838:	40020400 	.word	0x40020400

0800183c <set_green_led>:

extern GPIO_PinState get_current_green_led(){
	 return HAL_GPIO_ReadPin(LED_GREEN_PORT, LED_GREEN);
}

extern void set_green_led(GPIO_PinState state){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	 HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN, state);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	461a      	mov	r2, r3
 800184a:	2120      	movs	r1, #32
 800184c:	4803      	ldr	r0, [pc, #12]	; (800185c <set_green_led+0x20>)
 800184e:	f001 f8d7 	bl	8002a00 <HAL_GPIO_WritePin>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020000 	.word	0x40020000

08001860 <get_current_button_state>:

extern GPIO_PinState get_current_button_state(void){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BLUE_BUTTON_PORT, BLUE_BUTTON);
 8001864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <get_current_button_state+0x14>)
 800186a:	f001 f8b1 	bl	80029d0 <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020800 	.word	0x40020800

08001878 <i2c_init>:
#include "i2c_manager.h"

static I2C_HandleTypeDef hi2c1;

extern BOOLEAN i2c_init(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <i2c_init+0x58>)
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <i2c_init+0x5c>)
 8001880:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <i2c_init+0x58>)
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <i2c_init+0x60>)
 8001886:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <i2c_init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0x0;
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <i2c_init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <i2c_init+0x58>)
 8001896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189a:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <i2c_init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <i2c_init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <i2c_init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <i2c_init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]

	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <i2c_init+0x58>)
 80018b6:	f001 f8bd 	bl	8002a34 <HAL_I2C_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <i2c_init+0x4c>
	  {
	    return FALSE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e003      	b.n	80018cc <i2c_init+0x54>
	  }
	  switch_mode_sda_scl(I2C_M);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fe67 	bl	8001598 <switch_mode_sda_scl>
      return TRUE;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200022cc 	.word	0x200022cc
 80018d4:	40005400 	.word	0x40005400
 80018d8:	00061a80 	.word	0x00061a80

080018dc <print_hex>:

void print_hex(char *caption, unsigned char *m, int length) {
 80018dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018e0:	b08d      	sub	sp, #52	; 0x34
 80018e2:	af02      	add	r7, sp, #8
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	466b      	mov	r3, sp
 80018ec:	461e      	mov	r6, r3
    int size = sizeof(caption) + 30 + length * 3 + 1;
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	3323      	adds	r3, #35	; 0x23
 80018f8:	61fb      	str	r3, [r7, #28]
    char buf[size];
 80018fa:	69f9      	ldr	r1, [r7, #28]
 80018fc:	1e4b      	subs	r3, r1, #1
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	460a      	mov	r2, r1
 8001902:	2300      	movs	r3, #0
 8001904:	4690      	mov	r8, r2
 8001906:	4699      	mov	r9, r3
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001914:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001918:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191c:	460a      	mov	r2, r1
 800191e:	2300      	movs	r3, #0
 8001920:	4614      	mov	r4, r2
 8001922:	461d      	mov	r5, r3
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	00eb      	lsls	r3, r5, #3
 800192e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001932:	00e2      	lsls	r2, r4, #3
 8001934:	460b      	mov	r3, r1
 8001936:	3307      	adds	r3, #7
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	ebad 0d03 	sub.w	sp, sp, r3
 8001940:	ab02      	add	r3, sp, #8
 8001942:	3300      	adds	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
    unsigned int pos = snprintf(buf, size, "%s [%i]: ", caption, length);
 8001946:	69f9      	ldr	r1, [r7, #28]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <print_hex+0xc4>)
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f00b fb2f 	bl	800cfb4 <sniprintf>
 8001956:	4603      	mov	r3, r0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < length; i++) pos += snprintf(buf + pos, 4, "%2.2X ", m[i]);
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	e012      	b.n	8001986 <print_hex+0xaa>
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	18d0      	adds	r0, r2, r3
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <print_hex+0xc8>)
 8001970:	2104      	movs	r1, #4
 8001972:	f00b fb1f 	bl	800cfb4 <sniprintf>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	4413      	add	r3, r2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	3301      	adds	r3, #1
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	6a3a      	ldr	r2, [r7, #32]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	dbe8      	blt.n	8001960 <print_hex+0x84>
    printf("%s\n", buf);
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f00b fb08 	bl	800cfa4 <puts>
 8001994:	46b5      	mov	sp, r6
}
 8001996:	bf00      	nop
 8001998:	372c      	adds	r7, #44	; 0x2c
 800199a:	46bd      	mov	sp, r7
 800199c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019a0:	0800e348 	.word	0x0800e348
 80019a4:	0800e354 	.word	0x0800e354

080019a8 <i2c_read_data_from_device>:

extern BOOLEAN i2c_read_data_from_device(uint16_t device_addr, uint16_t reg_addr, uint8_t *buffer, uint16_t buffer_size){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	81fb      	strh	r3, [r7, #14]
 80019b6:	460b      	mov	r3, r1
 80019b8:	81bb      	strh	r3, [r7, #12]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
	 uint8_t reg[2] = {reg_addr >> 8, reg_addr};
 80019be:	89bb      	ldrh	r3, [r7, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	753b      	strb	r3, [r7, #20]
 80019c8:	89bb      	ldrh	r3, [r7, #12]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	757b      	strb	r3, [r7, #21]

	 // Подготовка к чтению
	 if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) device_addr << 1, reg, 2, HAL_MAX_DELAY) != HAL_OK){
 80019ce:	89fb      	ldrh	r3, [r7, #14]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b299      	uxth	r1, r3
 80019d4:	f107 0214 	add.w	r2, r7, #20
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2302      	movs	r3, #2
 80019e0:	481a      	ldr	r0, [pc, #104]	; (8001a4c <i2c_read_data_from_device+0xa4>)
 80019e2:	f001 f96b 	bl	8002cbc <HAL_I2C_Master_Transmit>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <i2c_read_data_from_device+0x56>
	    	printf("Error prepare to read register %02X %02X\n", reg[0], reg[1]);
 80019ec:	7d3b      	ldrb	r3, [r7, #20]
 80019ee:	4619      	mov	r1, r3
 80019f0:	7d7b      	ldrb	r3, [r7, #21]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4816      	ldr	r0, [pc, #88]	; (8001a50 <i2c_read_data_from_device+0xa8>)
 80019f6:	f00b fa6f 	bl	800ced8 <iprintf>
	    	return FALSE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e022      	b.n	8001a44 <i2c_read_data_from_device+0x9c>
	 }
     print_hex("ack data: ", reg, 2);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	2202      	movs	r2, #2
 8001a04:	4619      	mov	r1, r3
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <i2c_read_data_from_device+0xac>)
 8001a08:	f7ff ff68 	bl	80018dc <print_hex>


	 // Чтение
  	 uint8_t res = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) device_addr << 1, &buffer[0], buffer_size, HAL_MAX_DELAY);
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b299      	uxth	r1, r3
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	9200      	str	r2, [sp, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <i2c_read_data_from_device+0xa4>)
 8001a1e:	f001 fa4b 	bl	8002eb8 <HAL_I2C_Master_Receive>
 8001a22:	4603      	mov	r3, r0
 8001a24:	75fb      	strb	r3, [r7, #23]
	 if(res != HAL_OK){
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <i2c_read_data_from_device+0x8e>
      	 printf("Error read data\n");
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <i2c_read_data_from_device+0xb0>)
 8001a2e:	f00b fab9 	bl	800cfa4 <puts>
    	 return FALSE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e006      	b.n	8001a44 <i2c_read_data_from_device+0x9c>
     }
     print_hex("read data: ", buffer, buffer_size);
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	4807      	ldr	r0, [pc, #28]	; (8001a5c <i2c_read_data_from_device+0xb4>)
 8001a3e:	f7ff ff4d 	bl	80018dc <print_hex>
     return TRUE;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200022cc 	.word	0x200022cc
 8001a50:	0800e35c 	.word	0x0800e35c
 8001a54:	0800e388 	.word	0x0800e388
 8001a58:	0800e394 	.word	0x0800e394
 8001a5c:	0800e3a4 	.word	0x0800e3a4

08001a60 <i2c_send_data_to_device>:

extern BOOLEAN i2c_send_data_to_device(uint16_t device_addr, uint8_t *data, uint16_t data_size){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	80fb      	strh	r3, [r7, #6]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80bb      	strh	r3, [r7, #4]
    if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) device_addr << 1, &data[0], data_size, HAL_MAX_DELAY) != HAL_OK){
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	b299      	uxth	r1, r3
 8001a76:	88bb      	ldrh	r3, [r7, #4]
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	9200      	str	r2, [sp, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	480a      	ldr	r0, [pc, #40]	; (8001aac <i2c_send_data_to_device+0x4c>)
 8001a82:	f001 f91b 	bl	8002cbc <HAL_I2C_Master_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <i2c_send_data_to_device+0x36>
    	printf("Error during data transfer\n");
 8001a8c:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <i2c_send_data_to_device+0x50>)
 8001a8e:	f00b fa89 	bl	800cfa4 <puts>
    	return FALSE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e006      	b.n	8001aa4 <i2c_send_data_to_device+0x44>
    }
    print_hex("ack data: ", data, data_size);
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6839      	ldr	r1, [r7, #0]
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <i2c_send_data_to_device+0x54>)
 8001a9e:	f7ff ff1d 	bl	80018dc <print_hex>
	return TRUE;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200022cc 	.word	0x200022cc
 8001ab0:	0800e3b0 	.word	0x0800e3b0
 8001ab4:	0800e388 	.word	0x0800e388

08001ab8 <start_indication>:
static UINT8 state = 0;
static void reset_task(void);
static void firmware_update(void);


extern void start_indication(void *argument){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	while(1){
        switch(current_task){
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <start_indication+0x1c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <start_indication+0x16>
             case 1:
            	 firmware_update();
 8001ac8:	f000 f806 	bl	8001ad8 <firmware_update>
            	 break;
 8001acc:	e000      	b.n	8001ad0 <start_indication+0x18>
             default:
            	 break;
 8001ace:	bf00      	nop
        switch(current_task){
 8001ad0:	e7f6      	b.n	8001ac0 <start_indication+0x8>
 8001ad2:	bf00      	nop
 8001ad4:	20002320 	.word	0x20002320

08001ad8 <firmware_update>:
        }
	}
}

static void firmware_update(void){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	if(state == 0){
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <firmware_update+0x30>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <firmware_update+0x1a>
		state = 1;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <firmware_update+0x30>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_RESET);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fea6 	bl	800183c <set_green_led>
 8001af0:	e005      	b.n	8001afe <firmware_update+0x26>
	} else {
	    state = 0;
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <firmware_update+0x30>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
	    set_green_led(GPIO_PIN_SET);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff fe9f 	bl	800183c <set_green_led>
	}
	osDelay(50);
 8001afe:	2032      	movs	r0, #50	; 0x32
 8001b00:	f007 fd55 	bl	80095ae <osDelay>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20002321 	.word	0x20002321

08001b0c <set_indication_task>:

extern void set_indication_task(UINT8 cmd){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	reset_task();
 8001b16:	f000 f809 	bl	8001b2c <reset_task>
	current_task = cmd;
 8001b1a:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <set_indication_task+0x1c>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	7013      	strb	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20002320 	.word	0x20002320

08001b2c <reset_task>:

static void reset_task(void){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	state = 0;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <reset_task+0x14>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	set_green_led(GPIO_PIN_RESET);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff fe80 	bl	800183c <set_green_led>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20002321 	.word	0x20002321

08001b44 <init_tasks>:
static void init_gpio_task(void *argument);
static void init_i2c_task(void *argument);
static void init_ind_task(void *argument);


extern BOOLEAN init_tasks(void){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
	  osKernelInitialize();
 8001b4a:	f007 fc1d 	bl	8009388 <osKernelInitialize>

	  UINT8 fail_cnt = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	71fb      	strb	r3, [r7, #7]
	  gpio_taskHandle = osThreadNew(init_gpio_task, NULL, &gpio_task_attributes);
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <init_tasks+0x90>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <init_tasks+0x94>)
 8001b58:	f007 fc97 	bl	800948a <osThreadNew>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <init_tasks+0x98>)
 8001b60:	6013      	str	r3, [r2, #0]
	  if(gpio_taskHandle == NULL){
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <init_tasks+0x98>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <init_tasks+0x32>
		 printf("Error init gpio task\n");
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <init_tasks+0x9c>)
 8001b6c:	f00b fa1a 	bl	800cfa4 <puts>
		 fail_cnt++;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	3301      	adds	r3, #1
 8001b74:	71fb      	strb	r3, [r7, #7]
	  }

	  i2c_taskHandle = osThreadNew(init_i2c_task, NULL, &i2c_task_attributes);
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <init_tasks+0xa0>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	481b      	ldr	r0, [pc, #108]	; (8001be8 <init_tasks+0xa4>)
 8001b7c:	f007 fc85 	bl	800948a <osThreadNew>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <init_tasks+0xa8>)
 8001b84:	6013      	str	r3, [r2, #0]
	  if(i2c_taskHandle == NULL){
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <init_tasks+0xa8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <init_tasks+0x56>
		 printf("Error init i2c task\n");
 8001b8e:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <init_tasks+0xac>)
 8001b90:	f00b fa08 	bl	800cfa4 <puts>
		 fail_cnt++;
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	3301      	adds	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
	  }

	  ind_taskHandle = osThreadNew(init_ind_task, NULL, &ind_task_attributes);
 8001b9a:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <init_tasks+0xb0>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4816      	ldr	r0, [pc, #88]	; (8001bf8 <init_tasks+0xb4>)
 8001ba0:	f007 fc73 	bl	800948a <osThreadNew>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <init_tasks+0xb8>)
 8001ba8:	6013      	str	r3, [r2, #0]
	  if(ind_taskHandle == NULL){
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <init_tasks+0xb8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <init_tasks+0x7a>
	 	 printf("Error init ind task\n");
 8001bb2:	4813      	ldr	r0, [pc, #76]	; (8001c00 <init_tasks+0xbc>)
 8001bb4:	f00b f9f6 	bl	800cfa4 <puts>
	 	 fail_cnt++;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
	  }

	  return (fail_cnt == 0) ? TRUE : FALSE;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	0800e510 	.word	0x0800e510
 8001bd8:	08001c05 	.word	0x08001c05
 8001bdc:	20002324 	.word	0x20002324
 8001be0:	0800e458 	.word	0x0800e458
 8001be4:	0800e534 	.word	0x0800e534
 8001be8:	08001c31 	.word	0x08001c31
 8001bec:	20002328 	.word	0x20002328
 8001bf0:	0800e470 	.word	0x0800e470
 8001bf4:	0800e558 	.word	0x0800e558
 8001bf8:	08001c19 	.word	0x08001c19
 8001bfc:	2000232c 	.word	0x2000232c
 8001c00:	0800e484 	.word	0x0800e484

08001c04 <init_gpio_task>:


static void init_gpio_task(void *argument){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	gpio_start();
 8001c0c:	f7ff fcae 	bl	800156c <gpio_start>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <init_ind_task>:

static void init_ind_task(void *argument){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	start_indication(NULL);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff49 	bl	8001ab8 <start_indication>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <init_i2c_task>:



static BOOLEAN is_start = FALSE;

static void init_i2c_task(void *argument){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	set_power(GPIO_PIN_SET);
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff fdb9 	bl	80017b0 <set_power>
	osDelay(1000);
 8001c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c42:	f007 fcb4 	bl	80095ae <osDelay>
	while(1){
		osDelay(100);
 8001c46:	2064      	movs	r0, #100	; 0x64
 8001c48:	f007 fcb1 	bl	80095ae <osDelay>
		if(get_current_button_state() == GPIO_PIN_RESET){
 8001c4c:	f7ff fe08 	bl	8001860 <get_current_button_state>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f7      	bne.n	8001c46 <init_i2c_task+0x16>
			if(!is_start){
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <init_i2c_task+0x4c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f3      	bne.n	8001c46 <init_i2c_task+0x16>
				is_start = TRUE;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <init_i2c_task+0x4c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
				set_indication_task(1);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff ff51 	bl	8001b0c <set_indication_task>
				update_firmware();
 8001c6a:	f7ff facb 	bl	8001204 <update_firmware>
				is_start = FALSE;
 8001c6e:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <init_i2c_task+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
				set_indication_task(0);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff ff49 	bl	8001b0c <set_indication_task>
		osDelay(100);
 8001c7a:	e7e4      	b.n	8001c46 <init_i2c_task+0x16>
 8001c7c:	20002330 	.word	0x20002330

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 f94f 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	200f      	movs	r0, #15
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7fe fd3e 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f967 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 f92f 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	2000001c 	.word	0x2000001c
 8001d20:	20000018 	.word	0x20000018

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000001c 	.word	0x2000001c
 8001d48:	20002334 	.word	0x20002334

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20002334 	.word	0x20002334

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000001c 	.word	0x2000001c

08001dac <__NVIC_SetPriorityGrouping>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff feb6 	bl	8001d4c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e099      	b.n	8002120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e00f      	b.n	800202e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff fe9d 	bl	8001d4c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d908      	bls.n	800202e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e078      	b.n	8002120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e8      	bne.n	800200e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_DMA_Init+0x158>)
 8002048:	4013      	ands	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2b04      	cmp	r3, #4
 8002086:	d107      	bne.n	8002098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4313      	orrs	r3, r2
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0307 	bic.w	r3, r3, #7
 80020ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d117      	bne.n	80020f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fa7b 	bl	80025d0 <DMA_CheckFifoParam>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ee:	2301      	movs	r3, #1
 80020f0:	e016      	b.n	8002120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa32 	bl	8002564 <DMA_CalcBaseAndBitshift>
 8002100:	4603      	mov	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	f010803f 	.word	0xf010803f

0800212c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_DMA_Start_IT+0x26>
 800214e:	2302      	movs	r3, #2
 8002150:	e040      	b.n	80021d4 <HAL_DMA_Start_IT+0xa8>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d12f      	bne.n	80021c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f9c4 	bl	8002508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	223f      	movs	r2, #63	; 0x3f
 8002186:	409a      	lsls	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0216 	orr.w	r2, r2, #22
 800219a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0208 	orr.w	r2, r2, #8
 80021b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e005      	b.n	80021d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021e8:	4b8e      	ldr	r3, [pc, #568]	; (8002424 <HAL_DMA_IRQHandler+0x248>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a8e      	ldr	r2, [pc, #568]	; (8002428 <HAL_DMA_IRQHandler+0x24c>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0a9b      	lsrs	r3, r3, #10
 80021f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	2208      	movs	r2, #8
 8002208:	409a      	lsls	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01a      	beq.n	8002248 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0204 	bic.w	r2, r2, #4
 800222e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	2208      	movs	r2, #8
 8002236:	409a      	lsls	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2201      	movs	r2, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d012      	beq.n	800227e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	2201      	movs	r2, #1
 800226c:	409a      	lsls	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2204      	movs	r2, #4
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d012      	beq.n	80022b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	2204      	movs	r2, #4
 80022a2:	409a      	lsls	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 0204 	orr.w	r2, r3, #4
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2210      	movs	r2, #16
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d043      	beq.n	800234c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d03c      	beq.n	800234c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d6:	2210      	movs	r2, #16
 80022d8:	409a      	lsls	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d018      	beq.n	800231e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d108      	bne.n	800230c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d024      	beq.n	800234c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
 800230a:	e01f      	b.n	800234c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01b      	beq.n	800234c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
 800231c:	e016      	b.n	800234c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0208 	bic.w	r2, r2, #8
 800233a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	2220      	movs	r2, #32
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 808f 	beq.w	800247c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8087 	beq.w	800247c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	2220      	movs	r2, #32
 8002374:	409a      	lsls	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b05      	cmp	r3, #5
 8002384:	d136      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0216 	bic.w	r2, r2, #22
 8002394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x1da>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0208 	bic.w	r2, r2, #8
 80023c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	223f      	movs	r2, #63	; 0x3f
 80023cc:	409a      	lsls	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d07e      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
        }
        return;
 80023f2:	e079      	b.n	80024e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01d      	beq.n	800243e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10d      	bne.n	800242c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	2b00      	cmp	r3, #0
 8002416:	d031      	beq.n	800247c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
 8002420:	e02c      	b.n	800247c <HAL_DMA_IRQHandler+0x2a0>
 8002422:	bf00      	nop
 8002424:	20000000 	.word	0x20000000
 8002428:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d023      	beq.n	800247c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e01e      	b.n	800247c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10f      	bne.n	800246c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0210 	bic.w	r2, r2, #16
 800245a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	2b00      	cmp	r3, #0
 8002482:	d032      	beq.n	80024ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d022      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2205      	movs	r2, #5
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	3301      	adds	r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d307      	bcc.n	80024c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f2      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x2cc>
 80024c2:	e000      	b.n	80024c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
 80024e6:	e000      	b.n	80024ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80024e8:	bf00      	nop
    }
  }
}
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d108      	bne.n	8002548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002546:	e007      	b.n	8002558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3b10      	subs	r3, #16
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800257e:	4a13      	ldr	r2, [pc, #76]	; (80025cc <DMA_CalcBaseAndBitshift+0x68>)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d909      	bls.n	80025a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58
 80025a4:	e007      	b.n	80025b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	aaaaaaab 	.word	0xaaaaaaab
 80025cc:	0800e57c 	.word	0x0800e57c

080025d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11f      	bne.n	800262a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d856      	bhi.n	800269e <DMA_CheckFifoParam+0xce>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <DMA_CheckFifoParam+0x28>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	08002609 	.word	0x08002609
 80025fc:	0800261b 	.word	0x0800261b
 8002600:	08002609 	.word	0x08002609
 8002604:	0800269f 	.word	0x0800269f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d046      	beq.n	80026a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002618:	e043      	b.n	80026a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002622:	d140      	bne.n	80026a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002628:	e03d      	b.n	80026a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002632:	d121      	bne.n	8002678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d837      	bhi.n	80026aa <DMA_CheckFifoParam+0xda>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <DMA_CheckFifoParam+0x70>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002651 	.word	0x08002651
 8002644:	08002657 	.word	0x08002657
 8002648:	08002651 	.word	0x08002651
 800264c:	08002669 	.word	0x08002669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
      break;
 8002654:	e030      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d025      	beq.n	80026ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e022      	b.n	80026ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002670:	d11f      	bne.n	80026b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002676:	e01c      	b.n	80026b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d903      	bls.n	8002686 <DMA_CheckFifoParam+0xb6>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d003      	beq.n	800268c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002684:	e018      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      break;
 800268a:	e015      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e00b      	b.n	80026b6 <DMA_CheckFifoParam+0xe6>
      break;
 800269e:	bf00      	nop
 80026a0:	e00a      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026a2:	bf00      	nop
 80026a4:	e008      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026a6:	bf00      	nop
 80026a8:	e006      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e004      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e002      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026b2:	bf00      	nop
 80026b4:	e000      	b.n	80026b8 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
    }
  } 
  
  return status; 
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e159      	b.n	8002998 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8148 	bne.w	8002992 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d005      	beq.n	800271a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	2b02      	cmp	r3, #2
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a2 	beq.w	8002992 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a56      	ldr	r2, [pc, #344]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286a:	4a52      	ldr	r2, [pc, #328]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a49      	ldr	r2, [pc, #292]	; (80029b8 <HAL_GPIO_Init+0x2f0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d019      	beq.n	80028ca <HAL_GPIO_Init+0x202>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a48      	ldr	r2, [pc, #288]	; (80029bc <HAL_GPIO_Init+0x2f4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0x1fe>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_GPIO_Init+0x2f8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00d      	beq.n	80028c2 <HAL_GPIO_Init+0x1fa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <HAL_GPIO_Init+0x2fc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x1f6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a45      	ldr	r2, [pc, #276]	; (80029c8 <HAL_GPIO_Init+0x300>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_GPIO_Init+0x1f2>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ba:	2307      	movs	r3, #7
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ca:	2300      	movs	r3, #0
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028dc:	4935      	ldr	r1, [pc, #212]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_GPIO_Init+0x304>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290e:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_GPIO_Init+0x304>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_GPIO_Init+0x304>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298c:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_GPIO_Init+0x304>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	f67f aea2 	bls.w	80026e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e001      	b.n	80029f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e12b      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd fe96 	bl	800078c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a98:	f001 fbd2 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8002a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4a81      	ldr	r2, [pc, #516]	; (8002ca8 <HAL_I2C_Init+0x274>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d807      	bhi.n	8002ab8 <HAL_I2C_Init+0x84>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a80      	ldr	r2, [pc, #512]	; (8002cac <HAL_I2C_Init+0x278>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e006      	b.n	8002ac6 <HAL_I2C_Init+0x92>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a7d      	ldr	r2, [pc, #500]	; (8002cb0 <HAL_I2C_Init+0x27c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	bf94      	ite	ls
 8002ac0:	2301      	movls	r3, #1
 8002ac2:	2300      	movhi	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0e7      	b.n	8002c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a78      	ldr	r2, [pc, #480]	; (8002cb4 <HAL_I2C_Init+0x280>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9b      	lsrs	r3, r3, #18
 8002ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a6a      	ldr	r2, [pc, #424]	; (8002ca8 <HAL_I2C_Init+0x274>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d802      	bhi.n	8002b08 <HAL_I2C_Init+0xd4>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3301      	adds	r3, #1
 8002b06:	e009      	b.n	8002b1c <HAL_I2C_Init+0xe8>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	4a69      	ldr	r2, [pc, #420]	; (8002cb8 <HAL_I2C_Init+0x284>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	495c      	ldr	r1, [pc, #368]	; (8002ca8 <HAL_I2C_Init+0x274>)
 8002b38:	428b      	cmp	r3, r1
 8002b3a:	d819      	bhi.n	8002b70 <HAL_I2C_Init+0x13c>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e59      	subs	r1, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4a:	1c59      	adds	r1, r3, #1
 8002b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b50:	400b      	ands	r3, r1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_I2C_Init+0x138>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e59      	subs	r1, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6a:	e051      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e04f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_I2C_Init+0x168>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e58      	subs	r0, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e012      	b.n	8002bc2 <HAL_I2C_Init+0x18e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e58      	subs	r0, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Init+0x196>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e022      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_I2C_Init+0x1bc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e58      	subs	r0, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	440b      	add	r3, r1
 8002be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bee:	e00f      	b.n	8002c10 <HAL_I2C_Init+0x1dc>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e58      	subs	r0, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	0099      	lsls	r1, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	6809      	ldr	r1, [r1, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6911      	ldr	r1, [r2, #16]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	000186a0 	.word	0x000186a0
 8002cac:	001e847f 	.word	0x001e847f
 8002cb0:	003d08ff 	.word	0x003d08ff
 8002cb4:	431bde83 	.word	0x431bde83
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff f83c 	bl	8001d4c <HAL_GetTick>
 8002cd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	f040 80e0 	bne.w	8002ea4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2319      	movs	r3, #25
 8002cea:	2201      	movs	r2, #1
 8002cec:	4970      	ldr	r1, [pc, #448]	; (8002eb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fc58 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0d3      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_I2C_Master_Transmit+0x50>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d007      	beq.n	8002d32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2221      	movs	r2, #33	; 0x21
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	893a      	ldrh	r2, [r7, #8]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a50      	ldr	r2, [pc, #320]	; (8002eb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fac2 	bl	8003304 <I2C_MasterRequestWrite>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e08d      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002da0:	e066      	b.n	8002e70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fcd2 	bl	8003750 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d11b      	bne.n	8002e44 <HAL_I2C_Master_Transmit+0x188>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d017      	beq.n	8002e44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	6a39      	ldr	r1, [r7, #32]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fcc2 	bl	80037d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d107      	bne.n	8002e6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e01a      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d194      	bne.n	8002da2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	00100002 	.word	0x00100002
 8002eb4:	ffff0000 	.word	0xffff0000

08002eb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	; 0x30
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7fe ff3e 	bl	8001d4c <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f040 820b 	bne.w	80032f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	497c      	ldr	r1, [pc, #496]	; (80030dc <HAL_I2C_Master_Receive+0x224>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fb5a 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e1fe      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Master_Receive+0x50>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e1f7      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2222      	movs	r2, #34	; 0x22
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a5c      	ldr	r2, [pc, #368]	; (80030e0 <HAL_I2C_Master_Receive+0x228>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa46 	bl	8003408 <I2C_MasterRequestRead>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1b8      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d113      	bne.n	8002fb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e18c      	b.n	80032d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d11b      	bne.n	8002ff6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e16c      	b.n	80032d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d11b      	bne.n	8003036 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	e14c      	b.n	80032d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800305c:	e138      	b.n	80032d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	2b03      	cmp	r3, #3
 8003064:	f200 80f1 	bhi.w	800324a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	2b01      	cmp	r3, #1
 800306e:	d123      	bne.n	80030b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fbed 	bl	8003854 <I2C_WaitOnRXNEFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e139      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b6:	e10b      	b.n	80032d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d14e      	bne.n	800315e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	2200      	movs	r2, #0
 80030c8:	4906      	ldr	r1, [pc, #24]	; (80030e4 <HAL_I2C_Master_Receive+0x22c>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa6a 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e10e      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000
 80030e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800315c:	e0b8      	b.n	80032d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	2200      	movs	r2, #0
 8003166:	4966      	ldr	r1, [pc, #408]	; (8003300 <HAL_I2C_Master_Receive+0x448>)
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fa1b 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0bf      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	2200      	movs	r2, #0
 80031c2:	494f      	ldr	r1, [pc, #316]	; (8003300 <HAL_I2C_Master_Receive+0x448>)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f9ed 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e091      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003248:	e042      	b.n	80032d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fb00 	bl	8003854 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e04c      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d118      	bne.n	80032d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f aec2 	bne.w	800305e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	00010004 	.word	0x00010004

08003304 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	460b      	mov	r3, r1
 8003312:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d006      	beq.n	800332e <I2C_MasterRequestWrite+0x2a>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d003      	beq.n	800332e <I2C_MasterRequestWrite+0x2a>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800332c:	d108      	bne.n	8003340 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e00b      	b.n	8003358 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	2b12      	cmp	r3, #18
 8003346:	d107      	bne.n	8003358 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003356:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f91d 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337e:	d103      	bne.n	8003388 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e035      	b.n	80033f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003394:	d108      	bne.n	80033a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a4:	611a      	str	r2, [r3, #16]
 80033a6:	e01b      	b.n	80033e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033a8:	897b      	ldrh	r3, [r7, #10]
 80033aa:	11db      	asrs	r3, r3, #7
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 0306 	and.w	r3, r3, #6
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f063 030f 	orn	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	490e      	ldr	r1, [pc, #56]	; (8003400 <I2C_MasterRequestWrite+0xfc>)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f943 	bl	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e010      	b.n	80033f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4907      	ldr	r1, [pc, #28]	; (8003404 <I2C_MasterRequestWrite+0x100>)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f933 	bl	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	00010008 	.word	0x00010008
 8003404:	00010002 	.word	0x00010002

08003408 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800342c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d006      	beq.n	8003442 <I2C_MasterRequestRead+0x3a>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d003      	beq.n	8003442 <I2C_MasterRequestRead+0x3a>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003440:	d108      	bne.n	8003454 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e00b      	b.n	800346c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	2b11      	cmp	r3, #17
 800345a:	d107      	bne.n	800346c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800346a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f893 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003492:	d103      	bne.n	800349c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e079      	b.n	8003594 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a8:	d108      	bne.n	80034bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]
 80034ba:	e05f      	b.n	800357c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034bc:	897b      	ldrh	r3, [r7, #10]
 80034be:	11db      	asrs	r3, r3, #7
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 0306 	and.w	r3, r3, #6
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f063 030f 	orn	r3, r3, #15
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4930      	ldr	r1, [pc, #192]	; (800359c <I2C_MasterRequestRead+0x194>)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8b9 	bl	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e054      	b.n	8003594 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4929      	ldr	r1, [pc, #164]	; (80035a0 <I2C_MasterRequestRead+0x198>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f8a9 	bl	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e044      	b.n	8003594 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f831 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d103      	bne.n	8003560 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e017      	b.n	8003594 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	11db      	asrs	r3, r3, #7
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f063 030e 	orn	r3, r3, #14
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <I2C_MasterRequestRead+0x198>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f865 	bl	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010008 	.word	0x00010008
 80035a0:	00010002 	.word	0x00010002

080035a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b4:	e025      	b.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d021      	beq.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe fbc5 	bl	8001d4c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e023      	b.n	800364a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10d      	bne.n	8003628 <I2C_WaitOnFlagUntilTimeout+0x84>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	e00c      	b.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d0b6      	beq.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003660:	e051      	b.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003670:	d123      	bne.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e046      	b.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d021      	beq.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe fb43 	bl	8001d4c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e020      	b.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10c      	bne.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e00b      	b.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	43da      	mvns	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d18d      	bne.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375c:	e02d      	b.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f8ce 	bl	8003900 <I2C_IsAcknowledgeFailed>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e02d      	b.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d021      	beq.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fe fae9 	bl	8001d4c <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e007      	b.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b80      	cmp	r3, #128	; 0x80
 80037c6:	d1ca      	bne.n	800375e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037de:	e02d      	b.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f88d 	bl	8003900 <I2C_IsAcknowledgeFailed>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e02d      	b.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d021      	beq.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	f7fe faa8 	bl	8001d4c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e007      	b.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d1ca      	bne.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003860:	e042      	b.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b10      	cmp	r3, #16
 800386e:	d119      	bne.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0210 	mvn.w	r2, #16
 8003878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e029      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a4:	f7fe fa52 	bl	8001d4c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d302      	bcc.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d1b5      	bne.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d11b      	bne.n	8003950 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003920:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e267      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d075      	beq.n	8003a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397e:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d112      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a2:	d10b      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d05b      	beq.n	8003a68 <HAL_RCC_OscConfig+0x108>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d157      	bne.n	8003a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e242      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x74>
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x98>
 80039de:	4b70      	ldr	r3, [pc, #448]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6f      	ldr	r2, [pc, #444]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6c      	ldr	r2, [pc, #432]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039f8:	4b69      	ldr	r3, [pc, #420]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b66      	ldr	r3, [pc, #408]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe f998 	bl	8001d4c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe f994 	bl	8001d4c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e207      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0xc0>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe f984 	bl	8001d4c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe f980 	bl	8001d4c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1f3      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	4b51      	ldr	r3, [pc, #324]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0xe8>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a76:	4b4a      	ldr	r3, [pc, #296]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1c7      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4937      	ldr	r1, [pc, #220]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe f939 	bl	8001d4c <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe f935 	bl	8001d4c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1a8      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4925      	ldr	r1, [pc, #148]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe f918 	bl	8001d4c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fe f914 	bl	8001d4c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e187      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fe f8f8 	bl	8001d4c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe f8f4 	bl	8001d4c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e167      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x200>
 8003b7e:	e01b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe f8e1 	bl	8001d4c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e00e      	b.n	8003bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fe f8dd 	bl	8001d4c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d907      	bls.n	8003bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e150      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ea      	bne.n	8003b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8097 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b7d      	ldr	r3, [pc, #500]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a7c      	ldr	r2, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
 8003be6:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a73      	ldr	r2, [pc, #460]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f89d 	bl	8001d4c <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe f899 	bl	8001d4c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e10c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2ea>
 8003c3c:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a63      	ldr	r2, [pc, #396]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x30c>
 8003c52:	4b5f      	ldr	r3, [pc, #380]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5e      	ldr	r2, [pc, #376]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a5b      	ldr	r2, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c6c:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a54      	ldr	r2, [pc, #336]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe f85e 	bl	8001d4c <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fe f85a 	bl	8001d4c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0cb      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x334>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fe f848 	bl	8001d4c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe f844 	bl	8001d4c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0b5      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a1 	beq.w	8003e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d05c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d141      	bne.n	8003d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fe f818 	bl	8001d4c <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe f814 	bl	8001d4c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e087      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd ffed 	bl	8001d4c <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd ffe9 	bl	8001d4c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e05c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x416>
 8003d94:	e054      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd ffd6 	bl	8001d4c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fd ffd2 	bl	8001d4c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e045      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x444>
 8003dc2:	e03d      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e038      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d028      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d121      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cc      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90c      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e067      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4934      	ldr	r1, [pc, #208]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fd ff04 	bl	8001d4c <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd ff00 	bl	8001d4c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e04f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b25      	ldr	r3, [pc, #148]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d20c      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f821 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fe64 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	0800e4f8 	.word	0x0800e4f8
 8004014:	20000000 	.word	0x20000000
 8004018:	20000018 	.word	0x20000018

0800401c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b094      	sub	sp, #80	; 0x50
 8004022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
 8004028:	2300      	movs	r3, #0
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402c:	2300      	movs	r3, #0
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004034:	4b79      	ldr	r3, [pc, #484]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d00d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x40>
 8004040:	2b08      	cmp	r3, #8
 8004042:	f200 80e1 	bhi.w	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x34>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x3a>
 800404e:	e0db      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b73      	ldr	r3, [pc, #460]	; (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004054:	e0db      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004056:	4b73      	ldr	r3, [pc, #460]	; (8004224 <HAL_RCC_GetSysClockFreq+0x208>)
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800405a:	e0d8      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800405c:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004066:	4b6d      	ldr	r3, [pc, #436]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d063      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	2200      	movs	r2, #0
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
 800407c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
 800408a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4621      	mov	r1, r4
 80040a8:	1a51      	subs	r1, r2, r1
 80040aa:	6139      	str	r1, [r7, #16]
 80040ac:	4629      	mov	r1, r5
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c0:	4659      	mov	r1, fp
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ca:	4651      	mov	r1, sl
 80040cc:	018a      	lsls	r2, r1, #6
 80040ce:	4651      	mov	r1, sl
 80040d0:	ebb2 0801 	subs.w	r8, r2, r1
 80040d4:	4659      	mov	r1, fp
 80040d6:	eb63 0901 	sbc.w	r9, r3, r1
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ee:	4690      	mov	r8, r2
 80040f0:	4699      	mov	r9, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	eb18 0303 	adds.w	r3, r8, r3
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	462b      	mov	r3, r5
 80040fc:	eb49 0303 	adc.w	r3, r9, r3
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410e:	4629      	mov	r1, r5
 8004110:	024b      	lsls	r3, r1, #9
 8004112:	4621      	mov	r1, r4
 8004114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004118:	4621      	mov	r1, r4
 800411a:	024a      	lsls	r2, r1, #9
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412c:	f7fc f8a8 	bl	8000280 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	e058      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	2200      	movs	r2, #0
 8004142:	4618      	mov	r0, r3
 8004144:	4611      	mov	r1, r2
 8004146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	f04f 0000 	mov.w	r0, #0
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	0159      	lsls	r1, r3, #5
 8004162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004166:	0150      	lsls	r0, r2, #5
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4641      	mov	r1, r8
 800416e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb63 0b01 	sbc.w	fp, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800418c:	ebb2 040a 	subs.w	r4, r2, sl
 8004190:	eb63 050b 	sbc.w	r5, r3, fp
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	00eb      	lsls	r3, r5, #3
 800419e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a2:	00e2      	lsls	r2, r4, #3
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	18e3      	adds	r3, r4, r3
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	464b      	mov	r3, r9
 80041b0:	eb45 0303 	adc.w	r3, r5, r3
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c2:	4629      	mov	r1, r5
 80041c4:	028b      	lsls	r3, r1, #10
 80041c6:	4621      	mov	r1, r4
 80041c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041cc:	4621      	mov	r1, r4
 80041ce:	028a      	lsls	r2, r1, #10
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d6:	2200      	movs	r2, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	61fa      	str	r2, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	f7fc f84e 	bl	8000280 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004206:	e002      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 800420a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800420c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004210:	4618      	mov	r0, r3
 8004212:	3750      	adds	r7, #80	; 0x50
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	00f42400 	.word	0x00f42400
 8004224:	007a1200 	.word	0x007a1200

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCC_GetHCLKFreq+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000000 	.word	0x20000000

08004240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004244:	f7ff fff0 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0a9b      	lsrs	r3, r3, #10
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	0800e508 	.word	0x0800e508

08004268 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e022      	b.n	80042c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fc fac5 	bl	800081c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f814 	bl	80042c8 <HAL_SD_InitCard>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00a      	b.n	80042c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042c8:	b5b0      	push	{r4, r5, r7, lr}
 80042ca:	b08e      	sub	sp, #56	; 0x38
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80042e4:	2376      	movs	r3, #118	; 0x76
 80042e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681d      	ldr	r5, [r3, #0]
 80042ec:	466c      	mov	r4, sp
 80042ee:	f107 0314 	add.w	r3, r7, #20
 80042f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004300:	4628      	mov	r0, r5
 8004302:	f001 f84a 	bl	800539a <SDIO_Init>
 8004306:	4603      	mov	r3, r0
 8004308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800430c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e04f      	b.n	80043b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004318:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <HAL_SD_InitCard+0xf8>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f001 f871 	bl	800540a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_SD_InitCard+0xf8>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800432e:	2002      	movs	r0, #2
 8004330:	f7fd fd18 	bl	8001d64 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fe11 	bl	8004f5c <SD_PowerON>
 800433a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e02e      	b.n	80043b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fd30 	bl	8004dc0 <SD_InitCard>
 8004360:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e01b      	b.n	80043b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f8d0 	bl	800552e <SDMMC_CmdBlockLength>
 800438e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00f      	beq.n	80043b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <HAL_SD_InitCard+0xfc>)
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bdb0      	pop	{r4, r5, r7, pc}
 80043c0:	422580a0 	.word	0x422580a0
 80043c4:	004005ff 	.word	0x004005ff

080043c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	; 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0c0      	b.n	8004572 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 80b9 	bne.w	8004570 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	441a      	add	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	429a      	cmp	r2, r3
 8004410:	d907      	bls.n	8004422 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0a7      	b.n	8004572 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004440:	f043 0302 	orr.w	r3, r3, #2
 8004444:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a4c      	ldr	r2, [pc, #304]	; (800457c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800444c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a4b      	ldr	r2, [pc, #300]	; (8004580 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004454:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2200      	movs	r2, #0
 800445c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3380      	adds	r3, #128	; 0x80
 800448c:	4619      	mov	r1, r3
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	025b      	lsls	r3, r3, #9
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	f7fd fe49 	bl	800212c <HAL_DMA_Start_IT>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d017      	beq.n	80044d0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80044ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a33      	ldr	r2, [pc, #204]	; (8004584 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e050      	b.n	8004572 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80044d0:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d002      	beq.n	80044e4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	025b      	lsls	r3, r3, #9
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044e4:	f04f 33ff 	mov.w	r3, #4294967295
 80044e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	025b      	lsls	r3, r3, #9
 80044ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80044f0:	2390      	movs	r3, #144	; 0x90
 80044f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80044f4:	2302      	movs	r3, #2
 80044f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f107 0210 	add.w	r2, r7, #16
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ffe3 	bl	80054d6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d90a      	bls.n	800452c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2282      	movs	r2, #130	; 0x82
 800451a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004522:	4618      	mov	r0, r3
 8004524:	f001 f847 	bl	80055b6 <SDMMC_CmdReadMultiBlock>
 8004528:	62f8      	str	r0, [r7, #44]	; 0x2c
 800452a:	e009      	b.n	8004540 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2281      	movs	r2, #129	; 0x81
 8004530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f81a 	bl	8005572 <SDMMC_CmdReadSingleBlock>
 800453e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	431a      	orrs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e002      	b.n	8004572 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3730      	adds	r7, #48	; 0x30
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	08004cab 	.word	0x08004cab
 8004580:	08004d1d 	.word	0x08004d1d
 8004584:	004005ff 	.word	0x004005ff
 8004588:	4225858c 	.word	0x4225858c

0800458c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	; 0x30
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0c5      	b.n	8004740 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f040 80be 	bne.w	800473e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d907      	bls.n	80045e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0ac      	b.n	8004740 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2203      	movs	r2, #3
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	4a4e      	ldr	r2, [pc, #312]	; (8004748 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	4a4d      	ldr	r2, [pc, #308]	; (800474c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	2200      	movs	r2, #0
 8004620:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	2b01      	cmp	r3, #1
 8004628:	d002      	beq.n	8004630 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	025b      	lsls	r3, r3, #9
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d90a      	bls.n	800464c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	22a0      	movs	r2, #160	; 0xa0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fffb 	bl	800563e <SDMMC_CmdWriteMultiBlock>
 8004648:	62f8      	str	r0, [r7, #44]	; 0x2c
 800464a:	e009      	b.n	8004660 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2290      	movs	r2, #144	; 0x90
 8004650:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004658:	4618      	mov	r0, r3
 800465a:	f000 ffce 	bl	80055fa <SDMMC_CmdWriteSingleBlock>
 800465e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a39      	ldr	r2, [pc, #228]	; (8004750 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e059      	b.n	8004740 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3380      	adds	r3, #128	; 0x80
 80046c2:	461a      	mov	r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	025b      	lsls	r3, r3, #9
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	f7fd fd2f 	bl	800212c <HAL_DMA_Start_IT>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01c      	beq.n	800470e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80046e2:	f023 0302 	bic.w	r3, r3, #2
 80046e6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e018      	b.n	8004740 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	025b      	lsls	r3, r3, #9
 8004718:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800471a:	2390      	movs	r3, #144	; 0x90
 800471c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004726:	2301      	movs	r3, #1
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f107 0210 	add.w	r2, r7, #16
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fece 	bl	80054d6 <SDIO_ConfigData>

      return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	; 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	08004c81 	.word	0x08004c81
 800474c:	08004d1d 	.word	0x08004d1d
 8004750:	004005ff 	.word	0x004005ff
 8004754:	4225858c 	.word	0x4225858c

08004758 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800477a:	0f9b      	lsrs	r3, r3, #30
 800477c:	b2da      	uxtb	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004786:	0e9b      	lsrs	r3, r3, #26
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	b2da      	uxtb	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004798:	0e1b      	lsrs	r3, r3, #24
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047cc:	0d1b      	lsrs	r3, r3, #20
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ea:	0bdb      	lsrs	r3, r3, #15
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fc:	0b9b      	lsrs	r3, r3, #14
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	b2da      	uxtb	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800480e:	0b5b      	lsrs	r3, r3, #13
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004820:	0b1b      	lsrs	r3, r3, #12
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	b2da      	uxtb	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2200      	movs	r2, #0
 8004832:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	2b00      	cmp	r3, #0
 800483a:	d163      	bne.n	8004904 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004840:	009a      	lsls	r2, r3, #2
 8004842:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004846:	4013      	ands	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800484c:	0f92      	lsrs	r2, r2, #30
 800484e:	431a      	orrs	r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004858:	0edb      	lsrs	r3, r3, #27
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	b2da      	uxtb	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486a:	0e1b      	lsrs	r3, r3, #24
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	b2da      	uxtb	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	0d5b      	lsrs	r3, r3, #21
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	b2da      	uxtb	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488e:	0c9b      	lsrs	r3, r3, #18
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	b2da      	uxtb	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a0:	0bdb      	lsrs	r3, r3, #15
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	7e1b      	ldrb	r3, [r3, #24]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	3302      	adds	r3, #2
 80048c4:	2201      	movs	r2, #1
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80048ce:	fb03 f202 	mul.w	r2, r3, r2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	7a1b      	ldrb	r3, [r3, #8]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80048f0:	0a52      	lsrs	r2, r2, #9
 80048f2:	fb03 f202 	mul.w	r2, r3, r2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004900:	661a      	str	r2, [r3, #96]	; 0x60
 8004902:	e031      	b.n	8004968 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	2b01      	cmp	r3, #1
 800490a:	d11d      	bne.n	8004948 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	431a      	orrs	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	3301      	adds	r3, #1
 8004928:	029a      	lsls	r2, r3, #10
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	661a      	str	r2, [r3, #96]	; 0x60
 8004946:	e00f      	b.n	8004968 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a58      	ldr	r2, [pc, #352]	; (8004ab0 <HAL_SD_GetCardCSD+0x344>)
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e09d      	b.n	8004aa4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496c:	0b9b      	lsrs	r3, r3, #14
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	b2da      	uxtb	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497e:	09db      	lsrs	r3, r3, #7
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004986:	b2da      	uxtb	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004996:	b2da      	uxtb	r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	0fdb      	lsrs	r3, r3, #31
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	0f5b      	lsrs	r3, r3, #29
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	0e9b      	lsrs	r3, r3, #26
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	0d9b      	lsrs	r3, r3, #22
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	0d5b      	lsrs	r3, r3, #21
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	0bdb      	lsrs	r3, r3, #15
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	0b9b      	lsrs	r3, r3, #14
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	0b5b      	lsrs	r3, r3, #13
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	0b1b      	lsrs	r3, r3, #12
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	0a9b      	lsrs	r3, r3, #10
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	004005ff 	.word	0x004005ff

08004ab4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004b0c:	b5b0      	push	{r4, r5, r7, lr}
 8004b0e:	b08e      	sub	sp, #56	; 0x38
 8004b10:	af04      	add	r7, sp, #16
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d02e      	beq.n	8004b8a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	d106      	bne.n	8004b42 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b40:	e029      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b48:	d10a      	bne.n	8004b60 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fabc 	bl	80050c8 <SD_WideBus_Enable>
 8004b50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b5e:	e01a      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 faf9 	bl	800515e <SD_WideBus_Disable>
 8004b6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
 8004b7a:	e00c      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
 8004b88:	e005      	b.n	8004b96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a26      	ldr	r2, [pc, #152]	; (8004c3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bb4:	e01f      	b.n	8004bf6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681d      	ldr	r5, [r3, #0]
 8004bdc:	466c      	mov	r4, sp
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004bea:	f107 0308 	add.w	r3, r7, #8
 8004bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 fbd2 	bl	800539a <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fc95 	bl	800552e <SDMMC_CmdBlockLength>
 8004c04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3728      	adds	r7, #40	; 0x28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	004005ff 	.word	0x004005ff

08004c40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004c4c:	f107 030c 	add.w	r3, r7, #12
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa10 	bl	8005078 <SD_SendStatus>
 8004c58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	0a5b      	lsrs	r3, r3, #9
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004c76:	693b      	ldr	r3, [r7, #16]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	2b82      	cmp	r3, #130	; 0x82
 8004cbe:	d111      	bne.n	8004ce4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fcdd 	bl	8005684 <SDMMC_CmdStopTransfer>
 8004cca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff fd3a 	bl	8004758 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0208 	bic.w	r2, r2, #8
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f240 523a 	movw	r2, #1338	; 0x53a
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f001 f939 	bl	8005f84 <HAL_SD_RxCpltCallback>
#endif
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fd fbe0 	bl	80024f0 <HAL_DMA_GetError>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d03e      	beq.n	8004db4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d002      	beq.n	8004d52 <SD_DMAError+0x36>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d12d      	bne.n	8004dae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <SD_DMAError+0xa0>)
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004d76:	6978      	ldr	r0, [r7, #20]
 8004d78:	f7ff ff62 	bl	8004c40 <HAL_SD_GetCardState>
 8004d7c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b06      	cmp	r3, #6
 8004d82:	d002      	beq.n	8004d8a <SD_DMAError+0x6e>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d10a      	bne.n	8004da0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fc78 	bl	8005684 <SDMMC_CmdStopTransfer>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f7ff fcd2 	bl	8004758 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004db4:	bf00      	nop
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	004005ff 	.word	0x004005ff

08004dc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004dc0:	b5b0      	push	{r4, r5, r7, lr}
 8004dc2:	b094      	sub	sp, #80	; 0x50
 8004dc4:	af04      	add	r7, sp, #16
 8004dc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fb28 	bl	8005426 <SDIO_GetPowerState>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ddc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004de0:	e0b8      	b.n	8004f54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d02f      	beq.n	8004e4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fd52 	bl	8005898 <SDMMC_CmdSendCID>
 8004df4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <SD_InitCard+0x40>
    {
      return errorstate;
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfe:	e0a9      	b.n	8004f54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fb52 	bl	80054b0 <SDIO_GetResponse>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2104      	movs	r1, #4
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fb49 	bl	80054b0 <SDIO_GetResponse>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2108      	movs	r1, #8
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fb40 	bl	80054b0 <SDIO_GetResponse>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	210c      	movs	r1, #12
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fb37 	bl	80054b0 <SDIO_GetResponse>
 8004e42:	4602      	mov	r2, r0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d00d      	beq.n	8004e6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f107 020e 	add.w	r2, r7, #14
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fd58 	bl	8005912 <SDMMC_CmdSetRelAdd>
 8004e62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <SD_InitCard+0xae>
    {
      return errorstate;
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6c:	e072      	b.n	8004f54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d036      	beq.n	8004ee4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004e76:	89fb      	ldrh	r3, [r7, #14]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 fd22 	bl	80058d4 <SDMMC_CmdSendCSD>
 8004e90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	e05b      	b.n	8004f54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fb04 	bl	80054b0 <SDIO_GetResponse>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fafb 	bl	80054b0 <SDIO_GetResponse>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2108      	movs	r1, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 faf2 	bl	80054b0 <SDIO_GetResponse>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	210c      	movs	r1, #12
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fae9 	bl	80054b0 <SDIO_GetResponse>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2104      	movs	r1, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fae0 	bl	80054b0 <SDIO_GetResponse>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	0d1a      	lsrs	r2, r3, #20
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ef8:	f107 0310 	add.w	r3, r7, #16
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fc34 	bl	800476c <HAL_SD_GetCardCSD>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f0e:	e021      	b.n	8004f54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	461c      	mov	r4, r3
 8004f1e:	4615      	mov	r5, r2
 8004f20:	4622      	mov	r2, r4
 8004f22:	462b      	mov	r3, r5
 8004f24:	4608      	mov	r0, r1
 8004f26:	f000 fbcf 	bl	80056c8 <SDMMC_CmdSelDesel>
 8004f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <SD_InitCard+0x176>
  {
    return errorstate;
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	e00e      	b.n	8004f54 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681d      	ldr	r5, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	466c      	mov	r4, sp
 8004f3e:	f103 0210 	add.w	r2, r3, #16
 8004f42:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f48:	3304      	adds	r3, #4
 8004f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f000 fa24 	bl	800539a <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3740      	adds	r7, #64	; 0x40
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bdb0      	pop	{r4, r5, r7, pc}

08004f5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fbca 	bl	800570e <SDMMC_CmdGoIdleState>
 8004f7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	e072      	b.n	800506c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fbdd 	bl	800574a <SDMMC_CmdOperCond>
 8004f90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fbb3 	bl	800570e <SDMMC_CmdGoIdleState>
 8004fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <SD_PowerON+0x5e>
    {
      return errorstate;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	e05b      	b.n	800506c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d137      	bne.n	8005032 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fbdd 	bl	8005788 <SDMMC_CmdAppCommand>
 8004fce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d02d      	beq.n	8005032 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fda:	e047      	b.n	800506c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fbd0 	bl	8005788 <SDMMC_CmdAppCommand>
 8004fe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <SD_PowerON+0x98>
    {
      return errorstate;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	e03b      	b.n	800506c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	491e      	ldr	r1, [pc, #120]	; (8005074 <SD_PowerON+0x118>)
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fbe6 	bl	80057cc <SDMMC_CmdAppOperCommand>
 8005000:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800500c:	e02e      	b.n	800506c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa4b 	bl	80054b0 <SDIO_GetResponse>
 800501a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	0fdb      	lsrs	r3, r3, #31
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <SD_PowerON+0xcc>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <SD_PowerON+0xce>
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]

    count++;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	3301      	adds	r3, #1
 8005030:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005038:	4293      	cmp	r3, r2
 800503a:	d802      	bhi.n	8005042 <SD_PowerON+0xe6>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0cc      	beq.n	8004fdc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005048:	4293      	cmp	r3, r2
 800504a:	d902      	bls.n	8005052 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800504c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005050:	e00c      	b.n	800506c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
 8005062:	e002      	b.n	800506a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	c1100000 	.word	0xc1100000

08005078 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005088:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800508c:	e018      	b.n	80050c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fc5a 	bl	8005954 <SDMMC_CmdSendStatus>
 80050a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	e009      	b.n	80050c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f9fc 	bl	80054b0 <SDIO_GetResponse>
 80050b8:	4602      	mov	r2, r0
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f9e6 	bl	80054b0 <SDIO_GetResponse>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ee:	d102      	bne.n	80050f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050f4:	e02f      	b.n	8005156 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f879 	bl	80051f4 <SD_FindSCR>
 8005102:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	e023      	b.n	8005156 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01c      	beq.n	8005152 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f000 fb2f 	bl	8005788 <SDMMC_CmdAppCommand>
 800512a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	e00f      	b.n	8005156 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2102      	movs	r1, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fb68 	bl	8005812 <SDMMC_CmdBusWidth>
 8005142:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	e003      	b.n	8005156 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800514e:	2300      	movs	r3, #0
 8005150:	e001      	b.n	8005156 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005152:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f99b 	bl	80054b0 <SDIO_GetResponse>
 800517a:	4603      	mov	r3, r0
 800517c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005184:	d102      	bne.n	800518c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800518a:	e02f      	b.n	80051ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f82e 	bl	80051f4 <SD_FindSCR>
 8005198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	e023      	b.n	80051ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01c      	beq.n	80051e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	4619      	mov	r1, r3
 80051ba:	4610      	mov	r0, r2
 80051bc:	f000 fae4 	bl	8005788 <SDMMC_CmdAppCommand>
 80051c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	e00f      	b.n	80051ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb1d 	bl	8005812 <SDMMC_CmdBusWidth>
 80051d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	e003      	b.n	80051ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e001      	b.n	80051ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b08f      	sub	sp, #60	; 0x3c
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051fe:	f7fc fda5 	bl	8001d4c <HAL_GetTick>
 8005202:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005208:	2300      	movs	r3, #0
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2108      	movs	r1, #8
 800521a:	4618      	mov	r0, r3
 800521c:	f000 f987 	bl	800552e <SDMMC_CmdBlockLength>
 8005220:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	e0b2      	b.n	8005392 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f000 faa5 	bl	8005788 <SDMMC_CmdAppCommand>
 800523e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	e0a3      	b.n	8005392 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800524a:	f04f 33ff 	mov.w	r3, #4294967295
 800524e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005250:	2308      	movs	r3, #8
 8005252:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005254:	2330      	movs	r3, #48	; 0x30
 8005256:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005258:	2302      	movs	r3, #2
 800525a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800525c:	2300      	movs	r3, #0
 800525e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005260:	2301      	movs	r3, #1
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f107 0210 	add.w	r2, r7, #16
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f931 	bl	80054d6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 faec 	bl	8005856 <SDMMC_CmdSendSCR>
 800527e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d02a      	beq.n	80052dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	e083      	b.n	8005392 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00f      	beq.n	80052b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	f107 0208 	add.w	r2, r7, #8
 80052a4:	18d4      	adds	r4, r2, r3
 80052a6:	4608      	mov	r0, r1
 80052a8:	f000 f8a2 	bl	80053f0 <SDIO_ReadFIFO>
 80052ac:	4603      	mov	r3, r0
 80052ae:	6023      	str	r3, [r4, #0]
      index++;
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	3301      	adds	r3, #1
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
 80052b6:	e006      	b.n	80052c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d012      	beq.n	80052ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80052c6:	f7fc fd41 	bl	8001d4c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d4:	d102      	bne.n	80052dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80052d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052da:	e05a      	b.n	8005392 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0cf      	beq.n	800528a <SD_FindSCR+0x96>
 80052ea:	e000      	b.n	80052ee <SD_FindSCR+0xfa>
      break;
 80052ec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2208      	movs	r2, #8
 8005302:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005304:	2308      	movs	r3, #8
 8005306:	e044      	b.n	8005392 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2202      	movs	r2, #2
 800531c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800531e:	2302      	movs	r3, #2
 8005320:	e037      	b.n	8005392 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2220      	movs	r2, #32
 8005336:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005338:	2320      	movs	r3, #32
 800533a:	e02a      	b.n	8005392 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f240 523a 	movw	r2, #1338	; 0x53a
 8005344:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	061a      	lsls	r2, r3, #24
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005352:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800535c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	0e1b      	lsrs	r3, r3, #24
 8005362:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	601a      	str	r2, [r3, #0]
    scr++;
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	3304      	adds	r3, #4
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	061a      	lsls	r2, r3, #24
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800537a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005384:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	0e1b      	lsrs	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	373c      	adds	r7, #60	; 0x3c
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}

0800539a <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800539a:	b084      	sub	sp, #16
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	f107 001c 	add.w	r0, r7, #28
 80053a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80053b0:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80053b2:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80053b4:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80053b8:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80053bc:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80053c0:	431a      	orrs	r2, r3
             Init.ClockDiv
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80053c4:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80053d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	b004      	add	sp, #16
 80053ee:	4770      	bx	lr

080053f0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2203      	movs	r2, #3
 8005416:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0303 	and.w	r3, r3, #3
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005460:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005466:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800546c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800547c:	f023 030f 	bic.w	r3, r3, #15
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	b2db      	uxtb	r3, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3314      	adds	r3, #20
 80054be:	461a      	mov	r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	4413      	add	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
}  
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80054fc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005502:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005508:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005520:	2300      	movs	r3, #0

}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b088      	sub	sp, #32
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800553c:	2310      	movs	r3, #16
 800553e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005540:	2340      	movs	r3, #64	; 0x40
 8005542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800554c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ff74 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	2110      	movs	r1, #16
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fa19 	bl	8005998 <SDMMC_GetCmdResp1>
 8005566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005568:	69fb      	ldr	r3, [r7, #28]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b088      	sub	sp, #32
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005580:	2311      	movs	r3, #17
 8005582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800558c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005590:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005592:	f107 0308 	add.w	r3, r7, #8
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ff52 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	2111      	movs	r1, #17
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9f7 	bl	8005998 <SDMMC_GetCmdResp1>
 80055aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055ac:	69fb      	ldr	r3, [r7, #28]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b088      	sub	sp, #32
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80055c4:	2312      	movs	r3, #18
 80055c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff30 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	2112      	movs	r1, #18
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f9d5 	bl	8005998 <SDMMC_GetCmdResp1>
 80055ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f0:	69fb      	ldr	r3, [r7, #28]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005608:	2318      	movs	r3, #24
 800560a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005618:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ff0e 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	2118      	movs	r1, #24
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f9b3 	bl	8005998 <SDMMC_GetCmdResp1>
 8005632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005634:	69fb      	ldr	r3, [r7, #28]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800564c:	2319      	movs	r3, #25
 800564e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005650:	2340      	movs	r3, #64	; 0x40
 8005652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800565c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800565e:	f107 0308 	add.w	r3, r7, #8
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff feec 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	2119      	movs	r1, #25
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f991 	bl	8005998 <SDMMC_GetCmdResp1>
 8005676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005678:	69fb      	ldr	r3, [r7, #28]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005690:	230c      	movs	r3, #12
 8005692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800569c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056a2:	f107 0308 	add.w	r3, r7, #8
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff feca 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80056ae:	4a05      	ldr	r2, [pc, #20]	; (80056c4 <SDMMC_CmdStopTransfer+0x40>)
 80056b0:	210c      	movs	r1, #12
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f970 	bl	8005998 <SDMMC_GetCmdResp1>
 80056b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056ba:	69fb      	ldr	r3, [r7, #28]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	05f5e100 	.word	0x05f5e100

080056c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80056d8:	2307      	movs	r3, #7
 80056da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056ea:	f107 0310 	add.w	r3, r7, #16
 80056ee:	4619      	mov	r1, r3
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7ff fea6 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	2107      	movs	r1, #7
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f94b 	bl	8005998 <SDMMC_GetCmdResp1>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005706:	4618      	mov	r0, r3
 8005708:	3728      	adds	r7, #40	; 0x28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b088      	sub	sp, #32
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800572a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fe85 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fb65 	bl	8005e08 <SDMMC_GetCmdError>
 800573e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005740:	69fb      	ldr	r3, [r7, #28]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b088      	sub	sp, #32
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005752:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005758:	2308      	movs	r3, #8
 800575a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800575c:	2340      	movs	r3, #64	; 0x40
 800575e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005768:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff fe66 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 faf8 	bl	8005d6c <SDMMC_GetCmdResp7>
 800577c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577e:	69fb      	ldr	r3, [r7, #28]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005796:	2337      	movs	r3, #55	; 0x37
 8005798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057a8:	f107 0308 	add.w	r3, r7, #8
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fe47 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	2137      	movs	r1, #55	; 0x37
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f8ec 	bl	8005998 <SDMMC_GetCmdResp1>
 80057c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057c2:	69fb      	ldr	r3, [r7, #28]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80057e2:	2329      	movs	r3, #41	; 0x29
 80057e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e6:	2340      	movs	r3, #64	; 0x40
 80057e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f4:	f107 0308 	add.w	r3, r7, #8
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fe21 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f9ff 	bl	8005c04 <SDMMC_GetCmdResp3>
 8005806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005808:	69fb      	ldr	r3, [r7, #28]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b088      	sub	sp, #32
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005820:	2306      	movs	r3, #6
 8005822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800582c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005830:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005832:	f107 0308 	add.w	r3, r7, #8
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fe02 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800583e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005842:	2106      	movs	r1, #6
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f8a7 	bl	8005998 <SDMMC_GetCmdResp1>
 800584a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800584c:	69fb      	ldr	r3, [r7, #28]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b088      	sub	sp, #32
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005862:	2333      	movs	r3, #51	; 0x33
 8005864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800586e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005872:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005874:	f107 0308 	add.w	r3, r7, #8
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fde1 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	2133      	movs	r1, #51	; 0x33
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f886 	bl	8005998 <SDMMC_GetCmdResp1>
 800588c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588e:	69fb      	ldr	r3, [r7, #28]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80058a4:	2302      	movs	r3, #2
 80058a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80058a8:	23c0      	movs	r3, #192	; 0xc0
 80058aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fdc0 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f956 	bl	8005b74 <SDMMC_GetCmdResp2>
 80058c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ca:	69fb      	ldr	r3, [r7, #28]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80058e2:	2309      	movs	r3, #9
 80058e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80058e6:	23c0      	movs	r3, #192	; 0xc0
 80058e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fda1 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f937 	bl	8005b74 <SDMMC_GetCmdResp2>
 8005906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005908:	69fb      	ldr	r3, [r7, #28]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b088      	sub	sp, #32
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005920:	2303      	movs	r3, #3
 8005922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005924:	2340      	movs	r3, #64	; 0x40
 8005926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800592c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005930:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005932:	f107 0308 	add.w	r3, r7, #8
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fd82 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	2103      	movs	r1, #3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f99c 	bl	8005c80 <SDMMC_GetCmdResp6>
 8005948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800594a:	69fb      	ldr	r3, [r7, #28]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005962:	230d      	movs	r3, #13
 8005964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800596e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005972:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005974:	f107 0308 	add.w	r3, r7, #8
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff fd61 	bl	8005442 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	210d      	movs	r1, #13
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f806 	bl	8005998 <SDMMC_GetCmdResp1>
 800598c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800598e:	69fb      	ldr	r3, [r7, #28]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	460b      	mov	r3, r1
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80059a6:	4b70      	ldr	r3, [pc, #448]	; (8005b68 <SDMMC_GetCmdResp1+0x1d0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a70      	ldr	r2, [pc, #448]	; (8005b6c <SDMMC_GetCmdResp1+0x1d4>)
 80059ac:	fba2 2303 	umull	r2, r3, r2, r3
 80059b0:	0a5a      	lsrs	r2, r3, #9
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	fb02 f303 	mul.w	r3, r2, r3
 80059b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	1e5a      	subs	r2, r3, #1
 80059be:	61fa      	str	r2, [r7, #28]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059c8:	e0c9      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0ef      	beq.n	80059ba <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ea      	bne.n	80059ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d004      	beq.n	80059fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2204      	movs	r2, #4
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059f6:	2304      	movs	r3, #4
 80059f8:	e0b1      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0a6      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	22c5      	movs	r2, #197	; 0xc5
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7ff fd3d 	bl	8005496 <SDIO_GetCommandResponse>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	7afb      	ldrb	r3, [r7, #11]
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d001      	beq.n	8005a2a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e099      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff fd3f 	bl	80054b0 <SDIO_GetResponse>
 8005a32:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4b4e      	ldr	r3, [pc, #312]	; (8005b70 <SDMMC_GetCmdResp1+0x1d8>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e08d      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	da02      	bge.n	8005a4e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a4c:	e087      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a58:	2340      	movs	r3, #64	; 0x40
 8005a5a:	e080      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a66:	2380      	movs	r3, #128	; 0x80
 8005a68:	e079      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a78:	e071      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a88:	e069      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a98:	e061      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005aa8:	e059      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ab8:	e051      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ac8:	e049      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ad8:	e041      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae8:	e039      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005af8:	e031      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005b04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b08:	e029      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005b14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b18:	e021      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005b24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b28:	e019      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b38:	e011      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b48:	e009      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b58:	e001      	b.n	8005b5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000000 	.word	0x20000000
 8005b6c:	10624dd3 	.word	0x10624dd3
 8005b70:	fdffe008 	.word	0xfdffe008

08005b74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b7c:	4b1f      	ldr	r3, [pc, #124]	; (8005bfc <SDMMC_GetCmdResp2+0x88>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <SDMMC_GetCmdResp2+0x8c>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0a5b      	lsrs	r3, r3, #9
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1e5a      	subs	r2, r3, #1
 8005b96:	60fa      	str	r2, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ba0:	e026      	b.n	8005bf0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0ef      	beq.n	8005b92 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ea      	bne.n	8005b92 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2204      	movs	r2, #4
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bce:	2304      	movs	r3, #4
 8005bd0:	e00e      	b.n	8005bf0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e003      	b.n	8005bf0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	22c5      	movs	r2, #197	; 0xc5
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	20000000 	.word	0x20000000
 8005c00:	10624dd3 	.word	0x10624dd3

08005c04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <SDMMC_GetCmdResp3+0x74>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <SDMMC_GetCmdResp3+0x78>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	0a5b      	lsrs	r3, r3, #9
 8005c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	60fa      	str	r2, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c30:	e01b      	b.n	8005c6a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0ef      	beq.n	8005c22 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ea      	bne.n	8005c22 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c5e:	2304      	movs	r3, #4
 8005c60:	e003      	b.n	8005c6a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	22c5      	movs	r2, #197	; 0xc5
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20000000 	.word	0x20000000
 8005c7c:	10624dd3 	.word	0x10624dd3

08005c80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c8e:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <SDMMC_GetCmdResp6+0xe4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a35      	ldr	r2, [pc, #212]	; (8005d68 <SDMMC_GetCmdResp6+0xe8>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	0a5b      	lsrs	r3, r3, #9
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	1e5a      	subs	r2, r3, #1
 8005ca8:	61fa      	str	r2, [r7, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cb2:	e052      	b.n	8005d5a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0ef      	beq.n	8005ca4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1ea      	bne.n	8005ca4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	e03a      	b.n	8005d5a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e02f      	b.n	8005d5a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff fbcb 	bl	8005496 <SDIO_GetCommandResponse>
 8005d00:	4603      	mov	r3, r0
 8005d02:	461a      	mov	r2, r3
 8005d04:	7afb      	ldrb	r3, [r7, #11]
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d001      	beq.n	8005d0e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e025      	b.n	8005d5a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22c5      	movs	r2, #197	; 0xc5
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005d14:	2100      	movs	r1, #0
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fbca 	bl	80054b0 <SDIO_GetResponse>
 8005d1c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	0c1b      	lsrs	r3, r3, #16
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e011      	b.n	8005d5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d44:	e009      	b.n	8005d5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d54:	e001      	b.n	8005d5a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000000 	.word	0x20000000
 8005d68:	10624dd3 	.word	0x10624dd3

08005d6c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d74:	4b22      	ldr	r3, [pc, #136]	; (8005e00 <SDMMC_GetCmdResp7+0x94>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <SDMMC_GetCmdResp7+0x98>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	0a5b      	lsrs	r3, r3, #9
 8005d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
 8005d88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	60fa      	str	r2, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d98:	e02c      	b.n	8005df4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ef      	beq.n	8005d8a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ea      	bne.n	8005d8a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dc6:	2304      	movs	r3, #4
 8005dc8:	e014      	b.n	8005df4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e009      	b.n	8005df4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005df2:	2300      	movs	r3, #0
  
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000000 	.word	0x20000000
 8005e04:	10624dd3 	.word	0x10624dd3

08005e08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e10:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <SDMMC_GetCmdError+0x50>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <SDMMC_GetCmdError+0x54>)
 8005e16:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1a:	0a5b      	lsrs	r3, r3, #9
 8005e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e20:	fb02 f303 	mul.w	r3, r2, r3
 8005e24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1e5a      	subs	r2, r3, #1
 8005e2a:	60fa      	str	r2, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e34:	e009      	b.n	8005e4a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f1      	beq.n	8005e26 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	22c5      	movs	r2, #197	; 0xc5
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20000000 	.word	0x20000000
 8005e5c:	10624dd3 	.word	0x10624dd3

08005e60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005e64:	4904      	ldr	r1, [pc, #16]	; (8005e78 <MX_FATFS_Init+0x18>)
 8005e66:	4805      	ldr	r0, [pc, #20]	; (8005e7c <MX_FATFS_Init+0x1c>)
 8005e68:	f003 f926 	bl	80090b8 <FATFS_LinkDriver>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <MX_FATFS_Init+0x20>)
 8005e72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e74:	bf00      	nop
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	2000233c 	.word	0x2000233c
 8005e7c:	0800e584 	.word	0x0800e584
 8005e80:	20002338 	.word	0x20002338

08005e84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e9e:	f000 f87b 	bl	8005f98 <BSP_SD_IsDetected>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d001      	beq.n	8005eac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e012      	b.n	8005ed2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005eac:	480b      	ldr	r0, [pc, #44]	; (8005edc <BSP_SD_Init+0x48>)
 8005eae:	f7fe f9db 	bl	8004268 <HAL_SD_Init>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ec0:	4806      	ldr	r0, [pc, #24]	; (8005edc <BSP_SD_Init+0x48>)
 8005ec2:	f7fe fe23 	bl	8004b0c <HAL_SD_ConfigWideBusOperation>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20002120 	.word	0x20002120

08005ee0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	68f9      	ldr	r1, [r7, #12]
 8005ef6:	4806      	ldr	r0, [pc, #24]	; (8005f10 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005ef8:	f7fe fa66 	bl	80043c8 <HAL_SD_ReadBlocks_DMA>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20002120 	.word	0x20002120

08005f14 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	68f9      	ldr	r1, [r7, #12]
 8005f2a:	4806      	ldr	r0, [pc, #24]	; (8005f44 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005f2c:	f7fe fb2e 	bl	800458c <HAL_SD_WriteBlocks_DMA>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20002120 	.word	0x20002120

08005f48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f4c:	4805      	ldr	r0, [pc, #20]	; (8005f64 <BSP_SD_GetCardState+0x1c>)
 8005f4e:	f7fe fe77 	bl	8004c40 <HAL_SD_GetCardState>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20002120 	.word	0x20002120

08005f68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4803      	ldr	r0, [pc, #12]	; (8005f80 <BSP_SD_GetCardInfo+0x18>)
 8005f74:	f7fe fd9e 	bl	8004ab4 <HAL_SD_GetCardInfo>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20002120 	.word	0x20002120

08005f84 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005f8c:	f000 f986 	bl	800629c <BSP_SD_ReadCpltCallback>
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	b2db      	uxtb	r3, r3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005fba:	f003 fa51 	bl	8009460 <osKernelGetTickCount>
 8005fbe:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005fc0:	e006      	b.n	8005fd0 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005fc2:	f7ff ffc1 	bl	8005f48 <BSP_SD_GetCardState>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e009      	b.n	8005fe4 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005fd0:	f003 fa46 	bl	8009460 <osKernelGetTickCount>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d8f0      	bhi.n	8005fc2 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <SD_CheckStatus+0x38>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ffc:	f7ff ffa4 	bl	8005f48 <BSP_SD_GetCardState>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d107      	bne.n	8006016 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006006:	4b07      	ldr	r3, [pc, #28]	; (8006024 <SD_CheckStatus+0x38>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4b04      	ldr	r3, [pc, #16]	; (8006024 <SD_CheckStatus+0x38>)
 8006014:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <SD_CheckStatus+0x38>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b2db      	uxtb	r3, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	2000001d 	.word	0x2000001d

08006028 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006032:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <SD_initialize+0x7c>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006038:	f003 f9ca 	bl	80093d0 <osKernelGetState>
 800603c:	4603      	mov	r3, r0
 800603e:	2b02      	cmp	r3, #2
 8006040:	d129      	bne.n	8006096 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006042:	f7ff ff27 	bl	8005e94 <BSP_SD_Init>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d107      	bne.n	800605c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff ffcc 	bl	8005fec <SD_CheckStatus>
 8006054:	4603      	mov	r3, r0
 8006056:	461a      	mov	r2, r3
 8006058:	4b12      	ldr	r3, [pc, #72]	; (80060a4 <SD_initialize+0x7c>)
 800605a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800605c:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <SD_initialize+0x7c>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d017      	beq.n	8006096 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <SD_initialize+0x80>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800606e:	2200      	movs	r2, #0
 8006070:	2102      	movs	r1, #2
 8006072:	200a      	movs	r0, #10
 8006074:	f003 fbfa 	bl	800986c <osMessageQueueNew>
 8006078:	4603      	mov	r3, r0
 800607a:	4a0b      	ldr	r2, [pc, #44]	; (80060a8 <SD_initialize+0x80>)
 800607c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <SD_initialize+0x80>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <SD_initialize+0x7c>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	b2da      	uxtb	r2, r3
 8006092:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <SD_initialize+0x7c>)
 8006094:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006096:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <SD_initialize+0x7c>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b2db      	uxtb	r3, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	2000001d 	.word	0x2000001d
 80060a8:	20002340 	.word	0x20002340

080060ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ff97 	bl	8005fec <SD_CheckStatus>
 80060be:	4603      	mov	r3, r0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060dc:	f247 5030 	movw	r0, #30000	; 0x7530
 80060e0:	f7ff ff67 	bl	8005fb2 <SD_CheckStatusWithTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da01      	bge.n	80060ee <SD_read+0x26>
  {
    return res;
 80060ea:	7ffb      	ldrb	r3, [r7, #31]
 80060ec:	e02f      	b.n	800614e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	68b8      	ldr	r0, [r7, #8]
 80060f4:	f7ff fef4 	bl	8005ee0 <BSP_SD_ReadBlocks_DMA>
 80060f8:	4603      	mov	r3, r0
 80060fa:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80060fc:	7fbb      	ldrb	r3, [r7, #30]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d124      	bne.n	800614c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <SD_read+0x90>)
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	f107 0112 	add.w	r1, r7, #18
 800610a:	f247 5330 	movw	r3, #30000	; 0x7530
 800610e:	2200      	movs	r2, #0
 8006110:	f003 fc80 	bl	8009a14 <osMessageQueueGet>
 8006114:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d117      	bne.n	800614c <SD_read+0x84>
 800611c:	8a7b      	ldrh	r3, [r7, #18]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d114      	bne.n	800614c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8006122:	f003 f99d 	bl	8009460 <osKernelGetTickCount>
 8006126:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006128:	e007      	b.n	800613a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800612a:	f7ff ff0d 	bl	8005f48 <BSP_SD_GetCardState>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d102      	bne.n	800613a <SD_read+0x72>
              {
                res = RES_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006138:	e008      	b.n	800614c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800613a:	f003 f991 	bl	8009460 <osKernelGetTickCount>
 800613e:	4602      	mov	r2, r0
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f247 522f 	movw	r2, #29999	; 0x752f
 8006148:	4293      	cmp	r3, r2
 800614a:	d9ee      	bls.n	800612a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800614c:	7ffb      	ldrb	r3, [r7, #31]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20002340 	.word	0x20002340

0800615c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006170:	f247 5030 	movw	r0, #30000	; 0x7530
 8006174:	f7ff ff1d 	bl	8005fb2 <SD_CheckStatusWithTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	da01      	bge.n	8006182 <SD_write+0x26>
  {
    return res;
 800617e:	7ffb      	ldrb	r3, [r7, #31]
 8006180:	e02d      	b.n	80061de <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	68b8      	ldr	r0, [r7, #8]
 8006188:	f7ff fec4 	bl	8005f14 <BSP_SD_WriteBlocks_DMA>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d124      	bne.n	80061dc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <SD_write+0x8c>)
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	f107 0112 	add.w	r1, r7, #18
 800619a:	f247 5330 	movw	r3, #30000	; 0x7530
 800619e:	2200      	movs	r2, #0
 80061a0:	f003 fc38 	bl	8009a14 <osMessageQueueGet>
 80061a4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d117      	bne.n	80061dc <SD_write+0x80>
 80061ac:	8a7b      	ldrh	r3, [r7, #18]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d114      	bne.n	80061dc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80061b2:	f003 f955 	bl	8009460 <osKernelGetTickCount>
 80061b6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80061b8:	e007      	b.n	80061ca <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061ba:	f7ff fec5 	bl	8005f48 <BSP_SD_GetCardState>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <SD_write+0x6e>
          {
            res = RES_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	77fb      	strb	r3, [r7, #31]
            break;
 80061c8:	e008      	b.n	80061dc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80061ca:	f003 f949 	bl	8009460 <osKernelGetTickCount>
 80061ce:	4602      	mov	r2, r0
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80061d8:	4293      	cmp	r3, r2
 80061da:	d9ee      	bls.n	80061ba <SD_write+0x5e>
    }

  }
#endif

  return res;
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20002340 	.word	0x20002340

080061ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	; 0x30
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	603a      	str	r2, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	460b      	mov	r3, r1
 80061fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006202:	4b25      	ldr	r3, [pc, #148]	; (8006298 <SD_ioctl+0xac>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <SD_ioctl+0x28>
 8006210:	2303      	movs	r3, #3
 8006212:	e03c      	b.n	800628e <SD_ioctl+0xa2>

  switch (cmd)
 8006214:	79bb      	ldrb	r3, [r7, #6]
 8006216:	2b03      	cmp	r3, #3
 8006218:	d834      	bhi.n	8006284 <SD_ioctl+0x98>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <SD_ioctl+0x34>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006231 	.word	0x08006231
 8006224:	08006239 	.word	0x08006239
 8006228:	08006251 	.word	0x08006251
 800622c:	0800626b 	.word	0x0800626b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006236:	e028      	b.n	800628a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fe93 	bl	8005f68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800624e:	e01c      	b.n	800628a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006250:	f107 030c 	add.w	r3, r7, #12
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fe87 	bl	8005f68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	b29a      	uxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006268:	e00f      	b.n	800628a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fe7a 	bl	8005f68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	0a5a      	lsrs	r2, r3, #9
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006282:	e002      	b.n	800628a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006284:	2304      	movs	r3, #4
 8006286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800628a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800628e:	4618      	mov	r0, r3
 8006290:	3730      	adds	r7, #48	; 0x30
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2000001d 	.word	0x2000001d

0800629c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80062a2:	2301      	movs	r3, #1
 80062a4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <BSP_SD_ReadCpltCallback+0x20>)
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	1db9      	adds	r1, r7, #6
 80062ac:	2300      	movs	r3, #0
 80062ae:	2200      	movs	r2, #0
 80062b0:	f003 fb50 	bl	8009954 <osMessageQueuePut>
#endif
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20002340 	.word	0x20002340

080062c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <disk_status+0x30>)
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	79fa      	ldrb	r2, [r7, #7]
 80062d8:	4905      	ldr	r1, [pc, #20]	; (80062f0 <disk_status+0x30>)
 80062da:	440a      	add	r2, r1
 80062dc:	7a12      	ldrb	r2, [r2, #8]
 80062de:	4610      	mov	r0, r2
 80062e0:	4798      	blx	r3
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	2000236c 	.word	0x2000236c

080062f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	4a0d      	ldr	r2, [pc, #52]	; (800633c <disk_initialize+0x48>)
 8006306:	5cd3      	ldrb	r3, [r2, r3]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d111      	bne.n	8006330 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	4a0b      	ldr	r2, [pc, #44]	; (800633c <disk_initialize+0x48>)
 8006310:	2101      	movs	r1, #1
 8006312:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <disk_initialize+0x48>)
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	79fa      	ldrb	r2, [r7, #7]
 8006322:	4906      	ldr	r1, [pc, #24]	; (800633c <disk_initialize+0x48>)
 8006324:	440a      	add	r2, r1
 8006326:	7a12      	ldrb	r2, [r2, #8]
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	2000236c 	.word	0x2000236c

08006340 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4a0a      	ldr	r2, [pc, #40]	; (800637c <disk_read+0x3c>)
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	689c      	ldr	r4, [r3, #8]
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	4a07      	ldr	r2, [pc, #28]	; (800637c <disk_read+0x3c>)
 8006360:	4413      	add	r3, r2
 8006362:	7a18      	ldrb	r0, [r3, #8]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	47a0      	blx	r4
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
}
 8006372:	4618      	mov	r0, r3
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd90      	pop	{r4, r7, pc}
 800637a:	bf00      	nop
 800637c:	2000236c 	.word	0x2000236c

08006380 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <disk_write+0x3c>)
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	68dc      	ldr	r4, [r3, #12]
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	4a07      	ldr	r2, [pc, #28]	; (80063bc <disk_write+0x3c>)
 80063a0:	4413      	add	r3, r2
 80063a2:	7a18      	ldrb	r0, [r3, #8]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	47a0      	blx	r4
 80063ac:	4603      	mov	r3, r0
 80063ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd90      	pop	{r4, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2000236c 	.word	0x2000236c

080063c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	603a      	str	r2, [r7, #0]
 80063ca:	71fb      	strb	r3, [r7, #7]
 80063cc:	460b      	mov	r3, r1
 80063ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <disk_ioctl+0x38>)
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	79fa      	ldrb	r2, [r7, #7]
 80063de:	4906      	ldr	r1, [pc, #24]	; (80063f8 <disk_ioctl+0x38>)
 80063e0:	440a      	add	r2, r1
 80063e2:	7a10      	ldrb	r0, [r2, #8]
 80063e4:	79b9      	ldrb	r1, [r7, #6]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4798      	blx	r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	2000236c 	.word	0x2000236c

080063fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3301      	adds	r3, #1
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800640c:	89fb      	ldrh	r3, [r7, #14]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	b21a      	sxth	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b21b      	sxth	r3, r3
 8006418:	4313      	orrs	r3, r2
 800641a:	b21b      	sxth	r3, r3
 800641c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800641e:	89fb      	ldrh	r3, [r7, #14]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3303      	adds	r3, #3
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	3202      	adds	r2, #2
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	3201      	adds	r2, #1
 8006452:	7812      	ldrb	r2, [r2, #0]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
	return rv;
 8006464:	68fb      	ldr	r3, [r7, #12]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	887a      	ldrh	r2, [r7, #2]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	887b      	ldrh	r3, [r7, #2]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	887a      	ldrh	r2, [r7, #2]
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	0a1b      	lsrs	r3, r3, #8
 80064c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	1c53      	adds	r3, r2, #1
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1c59      	adds	r1, r3, #1
 8006524:	6179      	str	r1, [r7, #20]
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3b01      	subs	r3, #1
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f1      	bne.n	800651a <mem_cpy+0x1a>
	}
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006542:	b480      	push	{r7}
 8006544:	b087      	sub	sp, #28
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	617a      	str	r2, [r7, #20]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3b01      	subs	r3, #1
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f3      	bne.n	8006552 <mem_set+0x10>
}
 800656a:	bf00      	nop
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	61fa      	str	r2, [r7, #28]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	4619      	mov	r1, r3
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	61ba      	str	r2, [r7, #24]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	1acb      	subs	r3, r1, r3
 80065a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <mem_cmp+0x40>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0eb      	beq.n	8006590 <mem_cmp+0x18>

	return r;
 80065b8:	697b      	ldr	r3, [r7, #20]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3724      	adds	r7, #36	; 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065d0:	e002      	b.n	80065d8 <chk_chr+0x12>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3301      	adds	r3, #1
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <chk_chr+0x26>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d1f2      	bne.n	80065d2 <chk_chr+0xc>
	return *str;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	781b      	ldrb	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <lock_fs+0x22>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	4618      	mov	r0, r3
 8006610:	f002 fe4f 	bl	80092b2 <ff_req_grant>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <lock_fs+0x22>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <lock_fs+0x24>
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <unlock_fs+0x2e>
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d00a      	beq.n	8006656 <unlock_fs+0x2e>
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	2b0b      	cmp	r3, #11
 8006644:	d007      	beq.n	8006656 <unlock_fs+0x2e>
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d004      	beq.n	8006656 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	4618      	mov	r0, r3
 8006652:	f002 fe43 	bl	80092dc <ff_rel_grant>
	}
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e029      	b.n	80066c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006674:	4a27      	ldr	r2, [pc, #156]	; (8006714 <chk_lock+0xb4>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4413      	add	r3, r2
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01d      	beq.n	80066be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006682:	4a24      	ldr	r2, [pc, #144]	; (8006714 <chk_lock+0xb4>)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	4413      	add	r3, r2
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d116      	bne.n	80066c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <chk_lock+0xb4>)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	4413      	add	r3, r2
 800669c:	3304      	adds	r3, #4
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d10c      	bne.n	80066c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <chk_lock+0xb4>)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	4413      	add	r3, r2
 80066b0:	3308      	adds	r3, #8
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d102      	bne.n	80066c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066bc:	e007      	b.n	80066ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80066be:	2301      	movs	r3, #1
 80066c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d9d2      	bls.n	8006674 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d109      	bne.n	80066e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <chk_lock+0x80>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d101      	bne.n	80066e4 <chk_lock+0x84>
 80066e0:	2300      	movs	r3, #0
 80066e2:	e010      	b.n	8006706 <chk_lock+0xa6>
 80066e4:	2312      	movs	r3, #18
 80066e6:	e00e      	b.n	8006706 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d108      	bne.n	8006700 <chk_lock+0xa0>
 80066ee:	4a09      	ldr	r2, [pc, #36]	; (8006714 <chk_lock+0xb4>)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	4413      	add	r3, r2
 80066f6:	330c      	adds	r3, #12
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fe:	d101      	bne.n	8006704 <chk_lock+0xa4>
 8006700:	2310      	movs	r3, #16
 8006702:	e000      	b.n	8006706 <chk_lock+0xa6>
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	2000234c 	.word	0x2000234c

08006718 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800671e:	2300      	movs	r3, #0
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	e002      	b.n	800672a <enq_lock+0x12>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3301      	adds	r3, #1
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d806      	bhi.n	800673e <enq_lock+0x26>
 8006730:	4a09      	ldr	r2, [pc, #36]	; (8006758 <enq_lock+0x40>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	4413      	add	r3, r2
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1f2      	bne.n	8006724 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b02      	cmp	r3, #2
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	2000234c 	.word	0x2000234c

0800675c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e01f      	b.n	80067ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800676c:	4a41      	ldr	r2, [pc, #260]	; (8006874 <inc_lock+0x118>)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	4413      	add	r3, r2
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d113      	bne.n	80067a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800677e:	4a3d      	ldr	r2, [pc, #244]	; (8006874 <inc_lock+0x118>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	4413      	add	r3, r2
 8006786:	3304      	adds	r3, #4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800678e:	429a      	cmp	r2, r3
 8006790:	d109      	bne.n	80067a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006792:	4a38      	ldr	r2, [pc, #224]	; (8006874 <inc_lock+0x118>)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	4413      	add	r3, r2
 800679a:	3308      	adds	r3, #8
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d006      	beq.n	80067b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d9dc      	bls.n	800676c <inc_lock+0x10>
 80067b2:	e000      	b.n	80067b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80067b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d132      	bne.n	8006822 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	e002      	b.n	80067c8 <inc_lock+0x6c>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d806      	bhi.n	80067dc <inc_lock+0x80>
 80067ce:	4a29      	ldr	r2, [pc, #164]	; (8006874 <inc_lock+0x118>)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	4413      	add	r3, r2
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f2      	bne.n	80067c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d101      	bne.n	80067e6 <inc_lock+0x8a>
 80067e2:	2300      	movs	r3, #0
 80067e4:	e040      	b.n	8006868 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4922      	ldr	r1, [pc, #136]	; (8006874 <inc_lock+0x118>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	440b      	add	r3, r1
 80067f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	491e      	ldr	r1, [pc, #120]	; (8006874 <inc_lock+0x118>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	440b      	add	r3, r1
 8006800:	3304      	adds	r3, #4
 8006802:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	491a      	ldr	r1, [pc, #104]	; (8006874 <inc_lock+0x118>)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	440b      	add	r3, r1
 8006810:	3308      	adds	r3, #8
 8006812:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006814:	4a17      	ldr	r2, [pc, #92]	; (8006874 <inc_lock+0x118>)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	4413      	add	r3, r2
 800681c:	330c      	adds	r3, #12
 800681e:	2200      	movs	r2, #0
 8006820:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <inc_lock+0xe0>
 8006828:	4a12      	ldr	r2, [pc, #72]	; (8006874 <inc_lock+0x118>)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	4413      	add	r3, r2
 8006830:	330c      	adds	r3, #12
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <inc_lock+0xe0>
 8006838:	2300      	movs	r3, #0
 800683a:	e015      	b.n	8006868 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d108      	bne.n	8006854 <inc_lock+0xf8>
 8006842:	4a0c      	ldr	r2, [pc, #48]	; (8006874 <inc_lock+0x118>)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	4413      	add	r3, r2
 800684a:	330c      	adds	r3, #12
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	3301      	adds	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	e001      	b.n	8006858 <inc_lock+0xfc>
 8006854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006858:	4906      	ldr	r1, [pc, #24]	; (8006874 <inc_lock+0x118>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	440b      	add	r3, r1
 8006860:	330c      	adds	r3, #12
 8006862:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3301      	adds	r3, #1
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	2000234c 	.word	0x2000234c

08006878 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3b01      	subs	r3, #1
 8006884:	607b      	str	r3, [r7, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d825      	bhi.n	80068d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800688c:	4a17      	ldr	r2, [pc, #92]	; (80068ec <dec_lock+0x74>)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	4413      	add	r3, r2
 8006894:	330c      	adds	r3, #12
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a0:	d101      	bne.n	80068a6 <dec_lock+0x2e>
 80068a2:	2300      	movs	r3, #0
 80068a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80068a6:	89fb      	ldrh	r3, [r7, #14]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <dec_lock+0x3a>
 80068ac:	89fb      	ldrh	r3, [r7, #14]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80068b2:	4a0e      	ldr	r2, [pc, #56]	; (80068ec <dec_lock+0x74>)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	4413      	add	r3, r2
 80068ba:	330c      	adds	r3, #12
 80068bc:	89fa      	ldrh	r2, [r7, #14]
 80068be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d105      	bne.n	80068d2 <dec_lock+0x5a>
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <dec_lock+0x74>)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	4413      	add	r3, r2
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	737b      	strb	r3, [r7, #13]
 80068d6:	e001      	b.n	80068dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80068d8:	2302      	movs	r3, #2
 80068da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80068dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	2000234c 	.word	0x2000234c

080068f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e010      	b.n	8006920 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80068fe:	4a0d      	ldr	r2, [pc, #52]	; (8006934 <clear_lock+0x44>)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	4413      	add	r3, r2
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d105      	bne.n	800691a <clear_lock+0x2a>
 800690e:	4a09      	ldr	r2, [pc, #36]	; (8006934 <clear_lock+0x44>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	4413      	add	r3, r2
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d9eb      	bls.n	80068fe <clear_lock+0xe>
	}
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	2000234c 	.word	0x2000234c

08006938 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	78db      	ldrb	r3, [r3, #3]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d034      	beq.n	80069b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7858      	ldrb	r0, [r3, #1]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800695c:	2301      	movs	r3, #1
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	f7ff fd0e 	bl	8006380 <disk_write>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <sync_window+0x38>
			res = FR_DISK_ERR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
 800696e:	e022      	b.n	80069b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	429a      	cmp	r2, r3
 8006984:	d217      	bcs.n	80069b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	789b      	ldrb	r3, [r3, #2]
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	e010      	b.n	80069b0 <sync_window+0x78>
					wsect += fs->fsize;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7858      	ldrb	r0, [r3, #1]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80069a2:	2301      	movs	r3, #1
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	f7ff fceb 	bl	8006380 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d8eb      	bhi.n	800698e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d01b      	beq.n	8006a10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff ffad 	bl	8006938 <sync_window>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d113      	bne.n	8006a10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7858      	ldrb	r0, [r3, #1]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80069f2:	2301      	movs	r3, #1
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	f7ff fca3 	bl	8006340 <disk_read>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff87 	bl	8006938 <sync_window>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d159      	bne.n	8006ae8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d149      	bne.n	8006ad0 <sync_fs+0xb4>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	791b      	ldrb	r3, [r3, #4]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d145      	bne.n	8006ad0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	899b      	ldrh	r3, [r3, #12]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	2100      	movs	r1, #0
 8006a52:	f7ff fd76 	bl	8006542 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	333c      	adds	r3, #60	; 0x3c
 8006a5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a5e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fd05 	bl	8006472 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	333c      	adds	r3, #60	; 0x3c
 8006a6c:	4921      	ldr	r1, [pc, #132]	; (8006af4 <sync_fs+0xd8>)
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff fd1a 	bl	80064a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	333c      	adds	r3, #60	; 0x3c
 8006a78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a7c:	491e      	ldr	r1, [pc, #120]	; (8006af8 <sync_fs+0xdc>)
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fd12 	bl	80064a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	333c      	adds	r3, #60	; 0x3c
 8006a88:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7ff fd08 	bl	80064a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	333c      	adds	r3, #60	; 0x3c
 8006a9c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7ff fcfe 	bl	80064a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	7858      	ldrb	r0, [r3, #1]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f7ff fc5b 	bl	8006380 <disk_write>
			fs->fsi_flag = 0;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff fc71 	bl	80063c0 <disk_ioctl>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <sync_fs+0xcc>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	41615252 	.word	0x41615252
 8006af8:	61417272 	.word	0x61417272

08006afc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	3b02      	subs	r3, #2
 8006b0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	3b02      	subs	r3, #2
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d301      	bcc.n	8006b1c <clust2sect+0x20>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e008      	b.n	8006b2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	895b      	ldrh	r3, [r3, #10]
 8006b20:	461a      	mov	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	fb03 f202 	mul.w	r2, r3, r2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2c:	4413      	add	r3, r2
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d904      	bls.n	8006b5a <get_fat+0x20>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e0bb      	b.n	8006cd8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b60:	f04f 33ff 	mov.w	r3, #4294967295
 8006b64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	f000 8083 	beq.w	8006c76 <get_fat+0x13c>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	f300 80a7 	bgt.w	8006cc4 <get_fat+0x18a>
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d002      	beq.n	8006b80 <get_fat+0x46>
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d056      	beq.n	8006c2c <get_fat+0xf2>
 8006b7e:	e0a1      	b.n	8006cc4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	899b      	ldrh	r3, [r3, #12]
 8006b96:	4619      	mov	r1, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6938      	ldr	r0, [r7, #16]
 8006ba4:	f7ff ff0c 	bl	80069c0 <move_window>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 808d 	bne.w	8006cca <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	60fa      	str	r2, [r7, #12]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	8992      	ldrh	r2, [r2, #12]
 8006bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bbe:	fb01 f202 	mul.w	r2, r1, r2
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	899b      	ldrh	r3, [r3, #12]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bde:	4413      	add	r3, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	6938      	ldr	r0, [r7, #16]
 8006be4:	f7ff feec 	bl	80069c0 <move_window>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d16f      	bne.n	8006cce <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	899b      	ldrh	r3, [r3, #12]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bfa:	fb01 f202 	mul.w	r2, r1, r2
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4413      	add	r3, r2
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <get_fat+0xe8>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	091b      	lsrs	r3, r3, #4
 8006c20:	e002      	b.n	8006c28 <get_fat+0xee>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c28:	617b      	str	r3, [r7, #20]
			break;
 8006c2a:	e055      	b.n	8006cd8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	899b      	ldrh	r3, [r3, #12]
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4619      	mov	r1, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c40:	4413      	add	r3, r2
 8006c42:	4619      	mov	r1, r3
 8006c44:	6938      	ldr	r0, [r7, #16]
 8006c46:	f7ff febb 	bl	80069c0 <move_window>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d140      	bne.n	8006cd2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	8992      	ldrh	r2, [r2, #12]
 8006c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c62:	fb00 f202 	mul.w	r2, r0, r2
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	440b      	add	r3, r1
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fbc6 	bl	80063fc <ld_word>
 8006c70:	4603      	mov	r3, r0
 8006c72:	617b      	str	r3, [r7, #20]
			break;
 8006c74:	e030      	b.n	8006cd8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	899b      	ldrh	r3, [r3, #12]
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f7ff fe96 	bl	80069c0 <move_window>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11d      	bne.n	8006cd6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	8992      	ldrh	r2, [r2, #12]
 8006ca8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cac:	fb00 f202 	mul.w	r2, r0, r2
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fbb9 	bl	800642c <ld_dword>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cc0:	617b      	str	r3, [r7, #20]
			break;
 8006cc2:	e009      	b.n	8006cd8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e006      	b.n	8006cd8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cca:	bf00      	nop
 8006ccc:	e004      	b.n	8006cd8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cce:	bf00      	nop
 8006cd0:	e002      	b.n	8006cd8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cd2:	bf00      	nop
 8006cd4:	e000      	b.n	8006cd8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006cd6:	bf00      	nop
		}
	}

	return val;
 8006cd8:	697b      	ldr	r3, [r7, #20]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006ce2:	b590      	push	{r4, r7, lr}
 8006ce4:	b089      	sub	sp, #36	; 0x24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	f240 8109 	bls.w	8006f0c <put_fat+0x22a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	f080 8103 	bcs.w	8006f0c <put_fat+0x22a>
		switch (fs->fs_type) {
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f000 80b6 	beq.w	8006e7c <put_fat+0x19a>
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	f300 80fb 	bgt.w	8006f0c <put_fat+0x22a>
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d003      	beq.n	8006d22 <put_fat+0x40>
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	f000 8083 	beq.w	8006e26 <put_fat+0x144>
 8006d20:	e0f4      	b.n	8006f0c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	899b      	ldrh	r3, [r3, #12]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d40:	4413      	add	r3, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff fe3b 	bl	80069c0 <move_window>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d4e:	7ffb      	ldrb	r3, [r7, #31]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 80d4 	bne.w	8006efe <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	61ba      	str	r2, [r7, #24]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	8992      	ldrh	r2, [r2, #12]
 8006d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d6a:	fb00 f202 	mul.w	r2, r0, r2
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	440b      	add	r3, r1
 8006d72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00d      	beq.n	8006d9a <put_fat+0xb8>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	b25a      	sxtb	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	4313      	orrs	r3, r2
 8006d94:	b25b      	sxtb	r3, r3
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e001      	b.n	8006d9e <put_fat+0xbc>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	899b      	ldrh	r3, [r3, #12]
 8006db0:	4619      	mov	r1, r3
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006db8:	4413      	add	r3, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fdff 	bl	80069c0 <move_window>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dc6:	7ffb      	ldrb	r3, [r7, #31]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 809a 	bne.w	8006f02 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	899b      	ldrh	r3, [r3, #12]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006de0:	fb00 f202 	mul.w	r2, r0, r2
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	440b      	add	r3, r1
 8006de8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <put_fat+0x11a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e00e      	b.n	8006e1a <put_fat+0x138>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	b25b      	sxtb	r3, r3
 8006e02:	f023 030f 	bic.w	r3, r3, #15
 8006e06:	b25a      	sxtb	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	b25b      	sxtb	r3, r3
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	b25b      	sxtb	r3, r3
 8006e14:	4313      	orrs	r3, r2
 8006e16:	b25b      	sxtb	r3, r3
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	70da      	strb	r2, [r3, #3]
			break;
 8006e24:	e072      	b.n	8006f0c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	899b      	ldrh	r3, [r3, #12]
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e3a:	4413      	add	r3, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fdbe 	bl	80069c0 <move_window>
 8006e44:	4603      	mov	r3, r0
 8006e46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e48:	7ffb      	ldrb	r3, [r7, #31]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d15b      	bne.n	8006f06 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	8992      	ldrh	r2, [r2, #12]
 8006e5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e60:	fb00 f202 	mul.w	r2, r0, r2
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	440b      	add	r3, r1
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	b292      	uxth	r2, r2
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff faff 	bl	8006472 <st_word>
			fs->wflag = 1;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	70da      	strb	r2, [r3, #3]
			break;
 8006e7a:	e047      	b.n	8006f0c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	899b      	ldrh	r3, [r3, #12]
 8006e84:	089b      	lsrs	r3, r3, #2
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e90:	4413      	add	r3, r2
 8006e92:	4619      	mov	r1, r3
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff fd93 	bl	80069c0 <move_window>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e9e:	7ffb      	ldrb	r3, [r7, #31]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d132      	bne.n	8006f0a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	8992      	ldrh	r2, [r2, #12]
 8006eb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ebc:	fb00 f202 	mul.w	r2, r0, r2
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff fab1 	bl	800642c <ld_dword>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006ed0:	4323      	orrs	r3, r4
 8006ed2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	8992      	ldrh	r2, [r2, #12]
 8006ee2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ee6:	fb00 f202 	mul.w	r2, r0, r2
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	440b      	add	r3, r1
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fad9 	bl	80064a8 <st_dword>
			fs->wflag = 1;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	70da      	strb	r2, [r3, #3]
			break;
 8006efc:	e006      	b.n	8006f0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006efe:	bf00      	nop
 8006f00:	e004      	b.n	8006f0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006f02:	bf00      	nop
 8006f04:	e002      	b.n	8006f0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <put_fat+0x22a>
			if (res != FR_OK) break;
 8006f0a:	bf00      	nop
		}
	}
	return res;
 8006f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3724      	adds	r7, #36	; 0x24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd90      	pop	{r4, r7, pc}

08006f16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b088      	sub	sp, #32
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d904      	bls.n	8006f3c <remove_chain+0x26>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d301      	bcc.n	8006f40 <remove_chain+0x2a>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e04b      	b.n	8006fd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	69b8      	ldr	r0, [r7, #24]
 8006f4e:	f7ff fec8 	bl	8006ce2 <put_fat>
 8006f52:	4603      	mov	r3, r0
 8006f54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006f56:	7ffb      	ldrb	r3, [r7, #31]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <remove_chain+0x4a>
 8006f5c:	7ffb      	ldrb	r3, [r7, #31]
 8006f5e:	e03b      	b.n	8006fd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fde9 	bl	8006b3a <get_fat>
 8006f68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d031      	beq.n	8006fd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <remove_chain+0x64>
 8006f76:	2302      	movs	r3, #2
 8006f78:	e02e      	b.n	8006fd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d101      	bne.n	8006f86 <remove_chain+0x70>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e028      	b.n	8006fd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f86:	2200      	movs	r2, #0
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	69b8      	ldr	r0, [r7, #24]
 8006f8c:	f7ff fea9 	bl	8006ce2 <put_fat>
 8006f90:	4603      	mov	r3, r0
 8006f92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f94:	7ffb      	ldrb	r3, [r7, #31]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <remove_chain+0x88>
 8006f9a:	7ffb      	ldrb	r3, [r7, #31]
 8006f9c:	e01c      	b.n	8006fd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	69da      	ldr	r2, [r3, #28]
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	3b02      	subs	r3, #2
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d20b      	bcs.n	8006fc4 <remove_chain+0xae>
			fs->free_clst++;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	791b      	ldrb	r3, [r3, #4]
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d3c6      	bcc.n	8006f60 <remove_chain+0x4a>
 8006fd2:	e000      	b.n	8006fd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006fd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3720      	adds	r7, #32
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10d      	bne.n	8007012 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <create_chain+0x2c>
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	429a      	cmp	r2, r3
 800700a:	d31b      	bcc.n	8007044 <create_chain+0x64>
 800700c:	2301      	movs	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e018      	b.n	8007044 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fd90 	bl	8006b3a <get_fat>
 800701a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d801      	bhi.n	8007026 <create_chain+0x46>
 8007022:	2301      	movs	r3, #1
 8007024:	e070      	b.n	8007108 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d101      	bne.n	8007032 <create_chain+0x52>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	e06a      	b.n	8007108 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	429a      	cmp	r2, r3
 800703a:	d201      	bcs.n	8007040 <create_chain+0x60>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	e063      	b.n	8007108 <create_chain+0x128>
		scl = clst;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	429a      	cmp	r2, r3
 8007056:	d307      	bcc.n	8007068 <create_chain+0x88>
				ncl = 2;
 8007058:	2302      	movs	r3, #2
 800705a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	429a      	cmp	r2, r3
 8007062:	d901      	bls.n	8007068 <create_chain+0x88>
 8007064:	2300      	movs	r3, #0
 8007066:	e04f      	b.n	8007108 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007068:	69f9      	ldr	r1, [r7, #28]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fd65 	bl	8006b3a <get_fat>
 8007070:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00e      	beq.n	8007096 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d003      	beq.n	8007086 <create_chain+0xa6>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d101      	bne.n	800708a <create_chain+0xaa>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	e03e      	b.n	8007108 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800708a:	69fa      	ldr	r2, [r7, #28]
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	429a      	cmp	r2, r3
 8007090:	d1da      	bne.n	8007048 <create_chain+0x68>
 8007092:	2300      	movs	r3, #0
 8007094:	e038      	b.n	8007108 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007096:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007098:	f04f 32ff 	mov.w	r2, #4294967295
 800709c:	69f9      	ldr	r1, [r7, #28]
 800709e:	6938      	ldr	r0, [r7, #16]
 80070a0:	f7ff fe1f 	bl	8006ce2 <put_fat>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <create_chain+0xe2>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6938      	ldr	r0, [r7, #16]
 80070ba:	f7ff fe12 	bl	8006ce2 <put_fat>
 80070be:	4603      	mov	r3, r0
 80070c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d116      	bne.n	80070f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	69da      	ldr	r2, [r3, #28]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	3b02      	subs	r3, #2
 80070d8:	429a      	cmp	r2, r3
 80070da:	d804      	bhi.n	80070e6 <create_chain+0x106>
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	1e5a      	subs	r2, r3, #1
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	791b      	ldrb	r3, [r3, #4]
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	711a      	strb	r2, [r3, #4]
 80070f4:	e007      	b.n	8007106 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d102      	bne.n	8007102 <create_chain+0x122>
 80070fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007100:	e000      	b.n	8007104 <create_chain+0x124>
 8007102:	2301      	movs	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3720      	adds	r7, #32
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	3304      	adds	r3, #4
 8007126:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	899b      	ldrh	r3, [r3, #12]
 800712c:	461a      	mov	r2, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	fbb3 f3f2 	udiv	r3, r3, r2
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	8952      	ldrh	r2, [r2, #10]
 8007138:	fbb3 f3f2 	udiv	r3, r3, r2
 800713c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1d1a      	adds	r2, r3, #4
 8007142:	613a      	str	r2, [r7, #16]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <clmt_clust+0x42>
 800714e:	2300      	movs	r3, #0
 8007150:	e010      	b.n	8007174 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d307      	bcc.n	800716a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3304      	adds	r3, #4
 8007166:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007168:	e7e9      	b.n	800713e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800716a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
}
 8007174:	4618      	mov	r0, r3
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007196:	d204      	bcs.n	80071a2 <dir_sdi+0x22>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80071a2:	2302      	movs	r3, #2
 80071a4:	e071      	b.n	800728a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <dir_sdi+0x46>
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d902      	bls.n	80071c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	8912      	ldrh	r2, [r2, #8]
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d301      	bcc.n	80071dc <dir_sdi+0x5c>
 80071d8:	2302      	movs	r3, #2
 80071da:	e056      	b.n	800728a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	61da      	str	r2, [r3, #28]
 80071e4:	e02d      	b.n	8007242 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	895b      	ldrh	r3, [r3, #10]
 80071ea:	461a      	mov	r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	899b      	ldrh	r3, [r3, #12]
 80071f0:	fb02 f303 	mul.w	r3, r2, r3
 80071f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071f6:	e019      	b.n	800722c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6979      	ldr	r1, [r7, #20]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fc9c 	bl	8006b3a <get_fat>
 8007202:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d101      	bne.n	8007210 <dir_sdi+0x90>
 800720c:	2301      	movs	r3, #1
 800720e:	e03c      	b.n	800728a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d904      	bls.n	8007220 <dir_sdi+0xa0>
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	429a      	cmp	r2, r3
 800721e:	d301      	bcc.n	8007224 <dir_sdi+0xa4>
 8007220:	2302      	movs	r3, #2
 8007222:	e032      	b.n	800728a <dir_sdi+0x10a>
			ofs -= csz;
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	429a      	cmp	r2, r3
 8007232:	d2e1      	bcs.n	80071f8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007234:	6979      	ldr	r1, [r7, #20]
 8007236:	6938      	ldr	r0, [r7, #16]
 8007238:	f7ff fc60 	bl	8006afc <clust2sect>
 800723c:	4602      	mov	r2, r0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <dir_sdi+0xd4>
 8007250:	2302      	movs	r3, #2
 8007252:	e01a      	b.n	800728a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	899b      	ldrh	r3, [r3, #12]
 800725c:	4619      	mov	r1, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	fbb3 f3f1 	udiv	r3, r3, r1
 8007264:	441a      	add	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	899b      	ldrh	r3, [r3, #12]
 8007274:	461a      	mov	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	fbb3 f0f2 	udiv	r0, r3, r2
 800727c:	fb00 f202 	mul.w	r2, r0, r2
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	18ca      	adds	r2, r1, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	3320      	adds	r3, #32
 80072a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <dir_next+0x28>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072b8:	d301      	bcc.n	80072be <dir_next+0x2c>
 80072ba:	2304      	movs	r3, #4
 80072bc:	e0bb      	b.n	8007436 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	899b      	ldrh	r3, [r3, #12]
 80072c2:	461a      	mov	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80072ca:	fb01 f202 	mul.w	r2, r1, r2
 80072ce:	1a9b      	subs	r3, r3, r2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 809d 	bne.w	8007410 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10b      	bne.n	8007300 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	8912      	ldrh	r2, [r2, #8]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	f0c0 808d 	bcc.w	8007410 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	61da      	str	r2, [r3, #28]
 80072fc:	2304      	movs	r3, #4
 80072fe:	e09a      	b.n	8007436 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	899b      	ldrh	r3, [r3, #12]
 8007304:	461a      	mov	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	fbb3 f3f2 	udiv	r3, r3, r2
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	8952      	ldrh	r2, [r2, #10]
 8007310:	3a01      	subs	r2, #1
 8007312:	4013      	ands	r3, r2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d17b      	bne.n	8007410 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f7ff fc0a 	bl	8006b3a <get_fat>
 8007326:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d801      	bhi.n	8007332 <dir_next+0xa0>
 800732e:	2302      	movs	r3, #2
 8007330:	e081      	b.n	8007436 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d101      	bne.n	800733e <dir_next+0xac>
 800733a:	2301      	movs	r3, #1
 800733c:	e07b      	b.n	8007436 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	429a      	cmp	r2, r3
 8007346:	d359      	bcc.n	80073fc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	61da      	str	r2, [r3, #28]
 8007354:	2304      	movs	r3, #4
 8007356:	e06e      	b.n	8007436 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f7ff fe3d 	bl	8006fe0 <create_chain>
 8007366:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <dir_next+0xe0>
 800736e:	2307      	movs	r3, #7
 8007370:	e061      	b.n	8007436 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <dir_next+0xea>
 8007378:	2302      	movs	r3, #2
 800737a:	e05c      	b.n	8007436 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d101      	bne.n	8007388 <dir_next+0xf6>
 8007384:	2301      	movs	r3, #1
 8007386:	e056      	b.n	8007436 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff fad5 	bl	8006938 <sync_window>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <dir_next+0x106>
 8007394:	2301      	movs	r3, #1
 8007396:	e04e      	b.n	8007436 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	899b      	ldrh	r3, [r3, #12]
 80073a2:	461a      	mov	r2, r3
 80073a4:	2100      	movs	r1, #0
 80073a6:	f7ff f8cc 	bl	8006542 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff fba3 	bl	8006afc <clust2sect>
 80073b6:	4602      	mov	r2, r0
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38
 80073bc:	e012      	b.n	80073e4 <dir_next+0x152>
						fs->wflag = 1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff fab7 	bl	8006938 <sync_window>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <dir_next+0x142>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e030      	b.n	8007436 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	3301      	adds	r3, #1
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	895b      	ldrh	r3, [r3, #10]
 80073e8:	461a      	mov	r2, r3
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d3e6      	bcc.n	80073be <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad2      	subs	r2, r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007402:	6979      	ldr	r1, [r7, #20]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fb79 	bl	8006afc <clust2sect>
 800740a:	4602      	mov	r2, r0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	899b      	ldrh	r3, [r3, #12]
 8007420:	461a      	mov	r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	fbb3 f0f2 	udiv	r0, r3, r2
 8007428:	fb00 f202 	mul.w	r2, r0, r2
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	18ca      	adds	r2, r1, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b086      	sub	sp, #24
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800744e:	2100      	movs	r1, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fe95 	bl	8007180 <dir_sdi>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d12b      	bne.n	80074b8 <dir_alloc+0x7a>
		n = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	4619      	mov	r1, r3
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff faa8 	bl	80069c0 <move_window>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d11d      	bne.n	80074b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2be5      	cmp	r3, #229	; 0xe5
 8007482:	d004      	beq.n	800748e <dir_alloc+0x50>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d107      	bne.n	800749e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3301      	adds	r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d102      	bne.n	80074a2 <dir_alloc+0x64>
 800749c:	e00c      	b.n	80074b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80074a2:	2101      	movs	r1, #1
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fef4 	bl	8007292 <dir_next>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0d7      	beq.n	8007464 <dir_alloc+0x26>
 80074b4:	e000      	b.n	80074b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80074b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d101      	bne.n	80074c2 <dir_alloc+0x84>
 80074be:	2307      	movs	r3, #7
 80074c0:	75fb      	strb	r3, [r7, #23]
	return res;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	331a      	adds	r3, #26
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe ff8e 	bl	80063fc <ld_word>
 80074e0:	4603      	mov	r3, r0
 80074e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d109      	bne.n	8007500 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe ff83 	bl	80063fc <ld_word>
 80074f6:	4603      	mov	r3, r0
 80074f8:	041b      	lsls	r3, r3, #16
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	331a      	adds	r3, #26
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	b292      	uxth	r2, r2
 800751e:	4611      	mov	r1, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe ffa6 	bl	8006472 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b03      	cmp	r3, #3
 800752c:	d109      	bne.n	8007542 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f103 0214 	add.w	r2, r3, #20
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	b29b      	uxth	r3, r3
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f7fe ff98 	bl	8006472 <st_word>
	}
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	331a      	adds	r3, #26
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe ff4e 	bl	80063fc <ld_word>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <cmp_lfn+0x1e>
 8007566:	2300      	movs	r3, #0
 8007568:	e059      	b.n	800761e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007572:	1e5a      	subs	r2, r3, #1
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007580:	2301      	movs	r3, #1
 8007582:	81fb      	strh	r3, [r7, #14]
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	e033      	b.n	80075f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800758a:	4a27      	ldr	r2, [pc, #156]	; (8007628 <cmp_lfn+0xdc>)
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	4413      	add	r3, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe ff2f 	bl	80063fc <ld_word>
 800759e:	4603      	mov	r3, r0
 80075a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80075a2:	89fb      	ldrh	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01a      	beq.n	80075de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2bfe      	cmp	r3, #254	; 0xfe
 80075ac:	d812      	bhi.n	80075d4 <cmp_lfn+0x88>
 80075ae:	89bb      	ldrh	r3, [r7, #12]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 fdcd 	bl	8009150 <ff_wtoupper>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461c      	mov	r4, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	617a      	str	r2, [r7, #20]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fdc1 	bl	8009150 <ff_wtoupper>
 80075ce:	4603      	mov	r3, r0
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d001      	beq.n	80075d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80075d4:	2300      	movs	r3, #0
 80075d6:	e022      	b.n	800761e <cmp_lfn+0xd2>
			}
			wc = uc;
 80075d8:	89bb      	ldrh	r3, [r7, #12]
 80075da:	81fb      	strh	r3, [r7, #14]
 80075dc:	e006      	b.n	80075ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80075de:	89bb      	ldrh	r3, [r7, #12]
 80075e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d001      	beq.n	80075ec <cmp_lfn+0xa0>
 80075e8:	2300      	movs	r3, #0
 80075ea:	e018      	b.n	800761e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	3301      	adds	r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b0c      	cmp	r3, #12
 80075f6:	d9c8      	bls.n	800758a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <cmp_lfn+0xd0>
 8007604:	89fb      	ldrh	r3, [r7, #14]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <cmp_lfn+0xd0>
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <cmp_lfn+0xd0>
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800761c:	2301      	movs	r3, #1
}
 800761e:	4618      	mov	r0, r3
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	bd90      	pop	{r4, r7, pc}
 8007626:	bf00      	nop
 8007628:	0800e618 	.word	0x0800e618

0800762c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4611      	mov	r1, r2
 8007638:	461a      	mov	r2, r3
 800763a:	460b      	mov	r3, r1
 800763c:	71fb      	strb	r3, [r7, #7]
 800763e:	4613      	mov	r3, r2
 8007640:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	330d      	adds	r3, #13
 8007646:	79ba      	ldrb	r2, [r7, #6]
 8007648:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	330b      	adds	r3, #11
 800764e:	220f      	movs	r2, #15
 8007650:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	330c      	adds	r3, #12
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	331a      	adds	r3, #26
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe ff06 	bl	8006472 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	1e5a      	subs	r2, r3, #1
 800766a:	4613      	mov	r3, r2
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	82fb      	strh	r3, [r7, #22]
 800767a:	2300      	movs	r3, #0
 800767c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800767e:	8afb      	ldrh	r3, [r7, #22]
 8007680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007684:	4293      	cmp	r3, r2
 8007686:	d007      	beq.n	8007698 <put_lfn+0x6c>
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	61fa      	str	r2, [r7, #28]
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007698:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <put_lfn+0xcc>)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	4413      	add	r3, r2
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4413      	add	r3, r2
 80076a6:	8afa      	ldrh	r2, [r7, #22]
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fee1 	bl	8006472 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80076b0:	8afb      	ldrh	r3, [r7, #22]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d102      	bne.n	80076bc <put_lfn+0x90>
 80076b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	3301      	adds	r3, #1
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	2b0c      	cmp	r3, #12
 80076c6:	d9da      	bls.n	800767e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80076c8:	8afb      	ldrh	r3, [r7, #22]
 80076ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d006      	beq.n	80076e0 <put_lfn+0xb4>
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <put_lfn+0xbc>
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	79fa      	ldrb	r2, [r7, #7]
 80076ec:	701a      	strb	r2, [r3, #0]
}
 80076ee:	bf00      	nop
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	0800e618 	.word	0x0800e618

080076fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08c      	sub	sp, #48	; 0x30
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800770a:	220b      	movs	r2, #11
 800770c:	68b9      	ldr	r1, [r7, #8]
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7fe fef6 	bl	8006500 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b05      	cmp	r3, #5
 8007718:	d92b      	bls.n	8007772 <gen_numname+0x76>
		sr = seq;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800771e:	e022      	b.n	8007766 <gen_numname+0x6a>
			wc = *lfn++;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	1c9a      	adds	r2, r3, #2
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800772a:	2300      	movs	r3, #0
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
 800772e:	e017      	b.n	8007760 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	005a      	lsls	r2, r3, #1
 8007734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	4413      	add	r3, r2
 800773c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800773e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <gen_numname+0x5e>
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007754:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007758:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	3301      	adds	r3, #1
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b0f      	cmp	r3, #15
 8007764:	d9e4      	bls.n	8007730 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1d8      	bne.n	8007720 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007772:	2307      	movs	r3, #7
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	b2db      	uxtb	r3, r3
 8007780:	3330      	adds	r3, #48	; 0x30
 8007782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800778a:	2b39      	cmp	r3, #57	; 0x39
 800778c:	d904      	bls.n	8007798 <gen_numname+0x9c>
 800778e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007792:	3307      	adds	r3, #7
 8007794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	1e5a      	subs	r2, r3, #1
 800779c:	62ba      	str	r2, [r7, #40]	; 0x28
 800779e:	3330      	adds	r3, #48	; 0x30
 80077a0:	443b      	add	r3, r7
 80077a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80077a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	603b      	str	r3, [r7, #0]
	} while (seq);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1df      	bne.n	8007776 <gen_numname+0x7a>
	ns[i] = '~';
 80077b6:	f107 0214 	add.w	r2, r7, #20
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	4413      	add	r3, r2
 80077be:	227e      	movs	r2, #126	; 0x7e
 80077c0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80077c2:	2300      	movs	r3, #0
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
 80077c6:	e002      	b.n	80077ce <gen_numname+0xd2>
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	3301      	adds	r3, #1
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d205      	bcs.n	80077e2 <gen_numname+0xe6>
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	4413      	add	r3, r2
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d1f2      	bne.n	80077c8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	2b07      	cmp	r3, #7
 80077e6:	d807      	bhi.n	80077f8 <gen_numname+0xfc>
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80077ee:	3330      	adds	r3, #48	; 0x30
 80077f0:	443b      	add	r3, r7
 80077f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80077f6:	e000      	b.n	80077fa <gen_numname+0xfe>
 80077f8:	2120      	movs	r1, #32
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	627a      	str	r2, [r7, #36]	; 0x24
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	460a      	mov	r2, r1
 8007806:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2b07      	cmp	r3, #7
 800780c:	d9e9      	bls.n	80077e2 <gen_numname+0xe6>
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	3730      	adds	r7, #48	; 0x30
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007824:	230b      	movs	r3, #11
 8007826:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	0852      	lsrs	r2, r2, #1
 800782e:	01db      	lsls	r3, r3, #7
 8007830:	4313      	orrs	r3, r2
 8007832:	b2da      	uxtb	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1c59      	adds	r1, r3, #1
 8007838:	6079      	str	r1, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	4413      	add	r3, r2
 800783e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	3b01      	subs	r3, #1
 8007844:	60bb      	str	r3, [r7, #8]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1ed      	bne.n	8007828 <sum_sfn+0x10>
	return sum;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b086      	sub	sp, #24
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007868:	2100      	movs	r1, #0
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fc88 	bl	8007180 <dir_sdi>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <dir_find+0x24>
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	e0a9      	b.n	80079d2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800787e:	23ff      	movs	r3, #255	; 0xff
 8007880:	753b      	strb	r3, [r7, #20]
 8007882:	7d3b      	ldrb	r3, [r7, #20]
 8007884:	757b      	strb	r3, [r7, #21]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	4619      	mov	r1, r3
 8007894:	6938      	ldr	r0, [r7, #16]
 8007896:	f7ff f893 	bl	80069c0 <move_window>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8090 	bne.w	80079c6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80078ae:	7dbb      	ldrb	r3, [r7, #22]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <dir_find+0x60>
 80078b4:	2304      	movs	r3, #4
 80078b6:	75fb      	strb	r3, [r7, #23]
 80078b8:	e08a      	b.n	80079d0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	330b      	adds	r3, #11
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c6:	73fb      	strb	r3, [r7, #15]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7bfa      	ldrb	r2, [r7, #15]
 80078cc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80078ce:	7dbb      	ldrb	r3, [r7, #22]
 80078d0:	2be5      	cmp	r3, #229	; 0xe5
 80078d2:	d007      	beq.n	80078e4 <dir_find+0x8a>
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <dir_find+0x98>
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b0f      	cmp	r3, #15
 80078e2:	d006      	beq.n	80078f2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80078e4:	23ff      	movs	r3, #255	; 0xff
 80078e6:	757b      	strb	r3, [r7, #21]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f04f 32ff 	mov.w	r2, #4294967295
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
 80078f0:	e05e      	b.n	80079b0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b0f      	cmp	r3, #15
 80078f6:	d136      	bne.n	8007966 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	d154      	bne.n	80079b0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007906:	7dbb      	ldrb	r3, [r7, #22]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00d      	beq.n	800792c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	7b5b      	ldrb	r3, [r3, #13]
 8007916:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007918:	7dbb      	ldrb	r3, [r7, #22]
 800791a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791e:	75bb      	strb	r3, [r7, #22]
 8007920:	7dbb      	ldrb	r3, [r7, #22]
 8007922:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695a      	ldr	r2, [r3, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800792c:	7dba      	ldrb	r2, [r7, #22]
 800792e:	7d7b      	ldrb	r3, [r7, #21]
 8007930:	429a      	cmp	r2, r3
 8007932:	d115      	bne.n	8007960 <dir_find+0x106>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	330d      	adds	r3, #13
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	7d3a      	ldrb	r2, [r7, #20]
 800793e:	429a      	cmp	r2, r3
 8007940:	d10e      	bne.n	8007960 <dir_find+0x106>
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f7ff fdfd 	bl	800754c <cmp_lfn>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <dir_find+0x106>
 8007958:	7d7b      	ldrb	r3, [r7, #21]
 800795a:	3b01      	subs	r3, #1
 800795c:	b2db      	uxtb	r3, r3
 800795e:	e000      	b.n	8007962 <dir_find+0x108>
 8007960:	23ff      	movs	r3, #255	; 0xff
 8007962:	757b      	strb	r3, [r7, #21]
 8007964:	e024      	b.n	80079b0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007966:	7d7b      	ldrb	r3, [r7, #21]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <dir_find+0x126>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff ff51 	bl	8007818 <sum_sfn>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	7d3b      	ldrb	r3, [r7, #20]
 800797c:	4293      	cmp	r3, r2
 800797e:	d024      	beq.n	80079ca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <dir_find+0x14a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a18      	ldr	r0, [r3, #32]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3324      	adds	r3, #36	; 0x24
 8007996:	220b      	movs	r2, #11
 8007998:	4619      	mov	r1, r3
 800799a:	f7fe fded 	bl	8006578 <mem_cmp>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d014      	beq.n	80079ce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80079a4:	23ff      	movs	r3, #255	; 0xff
 80079a6:	757b      	strb	r3, [r7, #21]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80079b0:	2100      	movs	r1, #0
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fc6d 	bl	8007292 <dir_next>
 80079b8:	4603      	mov	r3, r0
 80079ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f43f af65 	beq.w	800788e <dir_find+0x34>
 80079c4:	e004      	b.n	80079d0 <dir_find+0x176>
		if (res != FR_OK) break;
 80079c6:	bf00      	nop
 80079c8:	e002      	b.n	80079d0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80079ca:	bf00      	nop
 80079cc:	e000      	b.n	80079d0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80079ce:	bf00      	nop

	return res;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08c      	sub	sp, #48	; 0x30
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80079f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <dir_register+0x20>
 80079f8:	2306      	movs	r3, #6
 80079fa:	e0e0      	b.n	8007bbe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80079fc:	2300      	movs	r3, #0
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007a00:	e002      	b.n	8007a08 <dir_register+0x2c>
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	3301      	adds	r3, #1
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f4      	bne.n	8007a02 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007a1e:	f107 030c 	add.w	r3, r7, #12
 8007a22:	220c      	movs	r2, #12
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe fd6b 	bl	8006500 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d032      	beq.n	8007a9a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2240      	movs	r2, #64	; 0x40
 8007a38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a40:	e016      	b.n	8007a70 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	f107 010c 	add.w	r1, r7, #12
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	f7ff fe53 	bl	80076fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff feff 	bl	800785a <dir_find>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2b63      	cmp	r3, #99	; 0x63
 8007a74:	d9e5      	bls.n	8007a42 <dir_register+0x66>
 8007a76:	e000      	b.n	8007a7a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007a78:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	2b64      	cmp	r3, #100	; 0x64
 8007a7e:	d101      	bne.n	8007a84 <dir_register+0xa8>
 8007a80:	2307      	movs	r3, #7
 8007a82:	e09c      	b.n	8007bbe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d002      	beq.n	8007a92 <dir_register+0xb6>
 8007a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a90:	e095      	b.n	8007bbe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a92:	7dfa      	ldrb	r2, [r7, #23]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <dir_register+0xd8>
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	4a47      	ldr	r2, [pc, #284]	; (8007bc8 <dir_register+0x1ec>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	089b      	lsrs	r3, r3, #2
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <dir_register+0xda>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007ab8:	6a39      	ldr	r1, [r7, #32]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fcbf 	bl	800743e <dir_alloc>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d148      	bne.n	8007b60 <dir_register+0x184>
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	623b      	str	r3, [r7, #32]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d042      	beq.n	8007b60 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	015b      	lsls	r3, r3, #5
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fb4a 	bl	8007180 <dir_sdi>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d132      	bne.n	8007b60 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3324      	adds	r3, #36	; 0x24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fe8a 	bl	8007818 <sum_sfn>
 8007b04:	4603      	mov	r3, r0
 8007b06:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	69f8      	ldr	r0, [r7, #28]
 8007b10:	f7fe ff56 	bl	80069c0 <move_window>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d11d      	bne.n	8007b5e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	6918      	ldr	r0, [r3, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a19      	ldr	r1, [r3, #32]
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	7efb      	ldrb	r3, [r7, #27]
 8007b30:	f7ff fd7c 	bl	800762c <put_lfn>
				fs->wflag = 1;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2201      	movs	r2, #1
 8007b38:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fba8 	bl	8007292 <dir_next>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d107      	bne.n	8007b60 <dir_register+0x184>
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	623b      	str	r3, [r7, #32]
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1d5      	bne.n	8007b08 <dir_register+0x12c>
 8007b5c:	e000      	b.n	8007b60 <dir_register+0x184>
				if (res != FR_OK) break;
 8007b5e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d128      	bne.n	8007bba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	69f8      	ldr	r0, [r7, #28]
 8007b70:	f7fe ff26 	bl	80069c0 <move_window>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d11b      	bne.n	8007bba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	2220      	movs	r2, #32
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fcd9 	bl	8006542 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a18      	ldr	r0, [r3, #32]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3324      	adds	r3, #36	; 0x24
 8007b98:	220b      	movs	r2, #11
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	f7fe fcb0 	bl	8006500 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	330c      	adds	r3, #12
 8007bac:	f002 0218 	and.w	r2, r2, #24
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3730      	adds	r7, #48	; 0x30
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	4ec4ec4f 	.word	0x4ec4ec4f

08007bcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	61ba      	str	r2, [r7, #24]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bfc:	2b1f      	cmp	r3, #31
 8007bfe:	d940      	bls.n	8007c82 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c02:	2b2f      	cmp	r3, #47	; 0x2f
 8007c04:	d006      	beq.n	8007c14 <create_name+0x48>
 8007c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c08:	2b5c      	cmp	r3, #92	; 0x5c
 8007c0a:	d110      	bne.n	8007c2e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007c0c:	e002      	b.n	8007c14 <create_name+0x48>
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	3301      	adds	r3, #1
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	4413      	add	r3, r2
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8007c1e:	d0f6      	beq.n	8007c0e <create_name+0x42>
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	4413      	add	r3, r2
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b5c      	cmp	r3, #92	; 0x5c
 8007c2a:	d0f0      	beq.n	8007c0e <create_name+0x42>
			break;
 8007c2c:	e02a      	b.n	8007c84 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2bfe      	cmp	r3, #254	; 0xfe
 8007c32:	d901      	bls.n	8007c38 <create_name+0x6c>
 8007c34:	2306      	movs	r3, #6
 8007c36:	e17d      	b.n	8007f34 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c40:	2101      	movs	r1, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 fa48 	bl	80090d8 <ff_convert>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <create_name+0x8a>
 8007c52:	2306      	movs	r3, #6
 8007c54:	e16e      	b.n	8007f34 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c58:	2b7f      	cmp	r3, #127	; 0x7f
 8007c5a:	d809      	bhi.n	8007c70 <create_name+0xa4>
 8007c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c5e:	4619      	mov	r1, r3
 8007c60:	488d      	ldr	r0, [pc, #564]	; (8007e98 <create_name+0x2cc>)
 8007c62:	f7fe fcb0 	bl	80065c6 <chk_chr>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <create_name+0xa4>
 8007c6c:	2306      	movs	r3, #6
 8007c6e:	e161      	b.n	8007f34 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	617a      	str	r2, [r7, #20]
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007c80:	e7b4      	b.n	8007bec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007c82:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	441a      	add	r2, r3
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c90:	2b1f      	cmp	r3, #31
 8007c92:	d801      	bhi.n	8007c98 <create_name+0xcc>
 8007c94:	2304      	movs	r3, #4
 8007c96:	e000      	b.n	8007c9a <create_name+0xce>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c9e:	e011      	b.n	8007cc4 <create_name+0xf8>
		w = lfn[di - 1];
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d002      	beq.n	8007cbe <create_name+0xf2>
 8007cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cba:	2b2e      	cmp	r3, #46	; 0x2e
 8007cbc:	d106      	bne.n	8007ccc <create_name+0x100>
		di--;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1ea      	bne.n	8007ca0 <create_name+0xd4>
 8007cca:	e000      	b.n	8007cce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007ccc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <create_name+0x118>
 8007ce0:	2306      	movs	r3, #6
 8007ce2:	e127      	b.n	8007f34 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3324      	adds	r3, #36	; 0x24
 8007ce8:	220b      	movs	r2, #11
 8007cea:	2120      	movs	r1, #32
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fc28 	bl	8006542 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	e002      	b.n	8007cfe <create_name+0x132>
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d0f5      	beq.n	8007cf8 <create_name+0x12c>
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	d0ee      	beq.n	8007cf8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d009      	beq.n	8007d34 <create_name+0x168>
 8007d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d24:	f043 0303 	orr.w	r3, r3, #3
 8007d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007d2c:	e002      	b.n	8007d34 <create_name+0x168>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d009      	beq.n	8007d4e <create_name+0x182>
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	3b01      	subs	r3, #1
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4c:	d1ef      	bne.n	8007d2e <create_name+0x162>

	i = b = 0; ni = 8;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d54:	2300      	movs	r3, #0
 8007d56:	623b      	str	r3, [r7, #32]
 8007d58:	2308      	movs	r3, #8
 8007d5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	61ba      	str	r2, [r7, #24]
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 8090 	beq.w	8007e94 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d006      	beq.n	8007d88 <create_name+0x1bc>
 8007d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d7e:	d10a      	bne.n	8007d96 <create_name+0x1ca>
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d006      	beq.n	8007d96 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d8c:	f043 0303 	orr.w	r3, r3, #3
 8007d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d94:	e07d      	b.n	8007e92 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d96:	6a3a      	ldr	r2, [r7, #32]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d203      	bcs.n	8007da6 <create_name+0x1da>
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d123      	bne.n	8007dee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2b0b      	cmp	r3, #11
 8007daa:	d106      	bne.n	8007dba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db0:	f043 0303 	orr.w	r3, r3, #3
 8007db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007db8:	e075      	b.n	8007ea6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d005      	beq.n	8007dce <create_name+0x202>
 8007dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dc6:	f043 0303 	orr.w	r3, r3, #3
 8007dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d866      	bhi.n	8007ea4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	2308      	movs	r3, #8
 8007ddc:	623b      	str	r3, [r7, #32]
 8007dde:	230b      	movs	r3, #11
 8007de0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dec:	e051      	b.n	8007e92 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df0:	2b7f      	cmp	r3, #127	; 0x7f
 8007df2:	d914      	bls.n	8007e1e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df6:	2100      	movs	r1, #0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 f96d 	bl	80090d8 <ff_convert>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <create_name+0x246>
 8007e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e0a:	3b80      	subs	r3, #128	; 0x80
 8007e0c:	4a23      	ldr	r2, [pc, #140]	; (8007e9c <create_name+0x2d0>)
 8007e0e:	5cd3      	ldrb	r3, [r2, r3]
 8007e10:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e16:	f043 0302 	orr.w	r3, r3, #2
 8007e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d007      	beq.n	8007e34 <create_name+0x268>
 8007e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e26:	4619      	mov	r1, r3
 8007e28:	481d      	ldr	r0, [pc, #116]	; (8007ea0 <create_name+0x2d4>)
 8007e2a:	f7fe fbcc 	bl	80065c6 <chk_chr>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007e34:	235f      	movs	r3, #95	; 0x5f
 8007e36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e3c:	f043 0303 	orr.w	r3, r3, #3
 8007e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e44:	e01b      	b.n	8007e7e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d909      	bls.n	8007e60 <create_name+0x294>
 8007e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e4e:	2b5a      	cmp	r3, #90	; 0x5a
 8007e50:	d806      	bhi.n	8007e60 <create_name+0x294>
					b |= 2;
 8007e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e56:	f043 0302 	orr.w	r3, r3, #2
 8007e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e5e:	e00e      	b.n	8007e7e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e62:	2b60      	cmp	r3, #96	; 0x60
 8007e64:	d90b      	bls.n	8007e7e <create_name+0x2b2>
 8007e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e68:	2b7a      	cmp	r3, #122	; 0x7a
 8007e6a:	d808      	bhi.n	8007e7e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e7a:	3b20      	subs	r3, #32
 8007e7c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	623a      	str	r2, [r7, #32]
 8007e84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e86:	b2d1      	uxtb	r1, r2
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	460a      	mov	r2, r1
 8007e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007e92:	e763      	b.n	8007d5c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007e94:	bf00      	nop
 8007e96:	e006      	b.n	8007ea6 <create_name+0x2da>
 8007e98:	0800e498 	.word	0x0800e498
 8007e9c:	0800e598 	.word	0x0800e598
 8007ea0:	0800e4a4 	.word	0x0800e4a4
			if (si > di) break;			/* No extension */
 8007ea4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007eac:	2be5      	cmp	r3, #229	; 0xe5
 8007eae:	d103      	bne.n	8007eb8 <create_name+0x2ec>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d104      	bne.n	8007ec8 <create_name+0x2fc>
 8007ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ecc:	f003 030c 	and.w	r3, r3, #12
 8007ed0:	2b0c      	cmp	r3, #12
 8007ed2:	d005      	beq.n	8007ee0 <create_name+0x314>
 8007ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d105      	bne.n	8007eec <create_name+0x320>
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee4:	f043 0302 	orr.w	r3, r3, #2
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d117      	bne.n	8007f28 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d105      	bne.n	8007f10 <create_name+0x344>
 8007f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f08:	f043 0310 	orr.w	r3, r3, #16
 8007f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007f10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f14:	f003 030c 	and.w	r3, r3, #12
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d105      	bne.n	8007f28 <create_name+0x35c>
 8007f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f20:	f043 0308 	orr.w	r3, r3, #8
 8007f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007f32:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3728      	adds	r7, #40	; 0x28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f50:	e002      	b.n	8007f58 <follow_path+0x1c>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8007f5e:	d0f8      	beq.n	8007f52 <follow_path+0x16>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b5c      	cmp	r3, #92	; 0x5c
 8007f66:	d0f4      	beq.n	8007f52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b1f      	cmp	r3, #31
 8007f74:	d80a      	bhi.n	8007f8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2280      	movs	r2, #128	; 0x80
 8007f7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff f8fd 	bl	8007180 <dir_sdi>
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]
 8007f8a:	e048      	b.n	800801e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fe1b 	bl	8007bcc <create_name>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d139      	bne.n	8008014 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff fc5a 	bl	800785a <dir_find>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007fb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00a      	beq.n	8007fce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d12c      	bne.n	8008018 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007fbe:	7afb      	ldrb	r3, [r7, #11]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d127      	bne.n	8008018 <follow_path+0xdc>
 8007fc8:	2305      	movs	r3, #5
 8007fca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007fcc:	e024      	b.n	8008018 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fce:	7afb      	ldrb	r3, [r7, #11]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d121      	bne.n	800801c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	799b      	ldrb	r3, [r3, #6]
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d102      	bne.n	8007fea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007fe4:	2305      	movs	r3, #5
 8007fe6:	75fb      	strb	r3, [r7, #23]
 8007fe8:	e019      	b.n	800801e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	8992      	ldrh	r2, [r2, #12]
 8007ff8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ffc:	fb00 f202 	mul.w	r2, r0, r2
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	440b      	add	r3, r1
 8008004:	4619      	mov	r1, r3
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff fa60 	bl	80074cc <ld_clust>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008012:	e7bb      	b.n	8007f8c <follow_path+0x50>
			if (res != FR_OK) break;
 8008014:	bf00      	nop
 8008016:	e002      	b.n	800801e <follow_path+0xe2>
				break;
 8008018:	bf00      	nop
 800801a:	e000      	b.n	800801e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800801c:	bf00      	nop
			}
		}
	}

	return res;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008030:	f04f 33ff 	mov.w	r3, #4294967295
 8008034:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d031      	beq.n	80080a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e002      	b.n	800804c <get_ldnumber+0x24>
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	3301      	adds	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b1f      	cmp	r3, #31
 8008052:	d903      	bls.n	800805c <get_ldnumber+0x34>
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b3a      	cmp	r3, #58	; 0x3a
 800805a:	d1f4      	bne.n	8008046 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b3a      	cmp	r3, #58	; 0x3a
 8008062:	d11c      	bne.n	800809e <get_ldnumber+0x76>
			tp = *path;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	60fa      	str	r2, [r7, #12]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	3b30      	subs	r3, #48	; 0x30
 8008074:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b09      	cmp	r3, #9
 800807a:	d80e      	bhi.n	800809a <get_ldnumber+0x72>
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	429a      	cmp	r2, r3
 8008082:	d10a      	bne.n	800809a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d107      	bne.n	800809a <get_ldnumber+0x72>
					vol = (int)i;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	3301      	adds	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	e002      	b.n	80080a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800809e:	2300      	movs	r3, #0
 80080a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80080a2:	693b      	ldr	r3, [r7, #16]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	70da      	strb	r2, [r3, #3]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7fe fc78 	bl	80069c0 <move_window>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <check_fs+0x2a>
 80080d6:	2304      	movs	r3, #4
 80080d8:	e038      	b.n	800814c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	333c      	adds	r3, #60	; 0x3c
 80080de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe f98a 	bl	80063fc <ld_word>
 80080e8:	4603      	mov	r3, r0
 80080ea:	461a      	mov	r2, r3
 80080ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d001      	beq.n	80080f8 <check_fs+0x48>
 80080f4:	2303      	movs	r3, #3
 80080f6:	e029      	b.n	800814c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fe:	2be9      	cmp	r3, #233	; 0xe9
 8008100:	d009      	beq.n	8008116 <check_fs+0x66>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2beb      	cmp	r3, #235	; 0xeb
 800810a:	d11e      	bne.n	800814a <check_fs+0x9a>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008112:	2b90      	cmp	r3, #144	; 0x90
 8008114:	d119      	bne.n	800814a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	333c      	adds	r3, #60	; 0x3c
 800811a:	3336      	adds	r3, #54	; 0x36
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe f985 	bl	800642c <ld_dword>
 8008122:	4603      	mov	r3, r0
 8008124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008128:	4a0a      	ldr	r2, [pc, #40]	; (8008154 <check_fs+0xa4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d101      	bne.n	8008132 <check_fs+0x82>
 800812e:	2300      	movs	r3, #0
 8008130:	e00c      	b.n	800814c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	333c      	adds	r3, #60	; 0x3c
 8008136:	3352      	adds	r3, #82	; 0x52
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe f977 	bl	800642c <ld_dword>
 800813e:	4603      	mov	r3, r0
 8008140:	4a05      	ldr	r2, [pc, #20]	; (8008158 <check_fs+0xa8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d101      	bne.n	800814a <check_fs+0x9a>
 8008146:	2300      	movs	r3, #0
 8008148:	e000      	b.n	800814c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800814a:	2302      	movs	r3, #2
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	00544146 	.word	0x00544146
 8008158:	33544146 	.word	0x33544146

0800815c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b096      	sub	sp, #88	; 0x58
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f7ff ff59 	bl	8008028 <get_ldnumber>
 8008176:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817a:	2b00      	cmp	r3, #0
 800817c:	da01      	bge.n	8008182 <find_volume+0x26>
 800817e:	230b      	movs	r3, #11
 8008180:	e26a      	b.n	8008658 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008182:	4aa3      	ldr	r2, [pc, #652]	; (8008410 <find_volume+0x2b4>)
 8008184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <find_volume+0x3a>
 8008192:	230c      	movs	r3, #12
 8008194:	e260      	b.n	8008658 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8008196:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008198:	f7fe fa30 	bl	80065fc <lock_fs>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <find_volume+0x4a>
 80081a2:	230f      	movs	r3, #15
 80081a4:	e258      	b.n	8008658 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01a      	beq.n	80081f2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe f87d 	bl	80062c0 <disk_status>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80081cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10c      	bne.n	80081f2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d007      	beq.n	80081ee <find_volume+0x92>
 80081de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80081ea:	230a      	movs	r3, #10
 80081ec:	e234      	b.n	8008658 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 80081ee:	2300      	movs	r3, #0
 80081f0:	e232      	b.n	8008658 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80081f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe f875 	bl	80062f4 <disk_initialize>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800821c:	2303      	movs	r3, #3
 800821e:	e21b      	b.n	8008658 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d007      	beq.n	8008236 <find_volume+0xda>
 8008226:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008232:	230a      	movs	r3, #10
 8008234:	e210      	b.n	8008658 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	7858      	ldrb	r0, [r3, #1]
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	330c      	adds	r3, #12
 800823e:	461a      	mov	r2, r3
 8008240:	2102      	movs	r1, #2
 8008242:	f7fe f8bd 	bl	80063c0 <disk_ioctl>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <find_volume+0xf4>
 800824c:	2301      	movs	r3, #1
 800824e:	e203      	b.n	8008658 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	899b      	ldrh	r3, [r3, #12]
 8008254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008258:	d80d      	bhi.n	8008276 <find_volume+0x11a>
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	899b      	ldrh	r3, [r3, #12]
 800825e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008262:	d308      	bcc.n	8008276 <find_volume+0x11a>
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	899b      	ldrh	r3, [r3, #12]
 8008268:	461a      	mov	r2, r3
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	899b      	ldrh	r3, [r3, #12]
 800826e:	3b01      	subs	r3, #1
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <find_volume+0x11e>
 8008276:	2301      	movs	r3, #1
 8008278:	e1ee      	b.n	8008658 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800827e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008282:	f7ff ff15 	bl	80080b0 <check_fs>
 8008286:	4603      	mov	r3, r0
 8008288:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800828c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008290:	2b02      	cmp	r3, #2
 8008292:	d149      	bne.n	8008328 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008294:	2300      	movs	r3, #0
 8008296:	643b      	str	r3, [r7, #64]	; 0x40
 8008298:	e01e      	b.n	80082d8 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80082a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80082a8:	4413      	add	r3, r2
 80082aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	3304      	adds	r3, #4
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d006      	beq.n	80082c4 <find_volume+0x168>
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	3308      	adds	r3, #8
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe f8b6 	bl	800642c <ld_dword>
 80082c0:	4602      	mov	r2, r0
 80082c2:	e000      	b.n	80082c6 <find_volume+0x16a>
 80082c4:	2200      	movs	r2, #0
 80082c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	3358      	adds	r3, #88	; 0x58
 80082cc:	443b      	add	r3, r7
 80082ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d4:	3301      	adds	r3, #1
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
 80082d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d9dd      	bls.n	800829a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80082de:	2300      	movs	r3, #0
 80082e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80082e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <find_volume+0x192>
 80082e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ea:	3b01      	subs	r3, #1
 80082ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80082ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	3358      	adds	r3, #88	; 0x58
 80082f4:	443b      	add	r3, r7
 80082f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80082fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80082fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <find_volume+0x1b2>
 8008302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008306:	f7ff fed3 	bl	80080b0 <check_fs>
 800830a:	4603      	mov	r3, r0
 800830c:	e000      	b.n	8008310 <find_volume+0x1b4>
 800830e:	2303      	movs	r3, #3
 8008310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008318:	2b01      	cmp	r3, #1
 800831a:	d905      	bls.n	8008328 <find_volume+0x1cc>
 800831c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831e:	3301      	adds	r3, #1
 8008320:	643b      	str	r3, [r7, #64]	; 0x40
 8008322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008324:	2b03      	cmp	r3, #3
 8008326:	d9e2      	bls.n	80082ee <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800832c:	2b04      	cmp	r3, #4
 800832e:	d101      	bne.n	8008334 <find_volume+0x1d8>
 8008330:	2301      	movs	r3, #1
 8008332:	e191      	b.n	8008658 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008338:	2b01      	cmp	r3, #1
 800833a:	d901      	bls.n	8008340 <find_volume+0x1e4>
 800833c:	230d      	movs	r3, #13
 800833e:	e18b      	b.n	8008658 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	333c      	adds	r3, #60	; 0x3c
 8008344:	330b      	adds	r3, #11
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe f858 	bl	80063fc <ld_word>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	899b      	ldrh	r3, [r3, #12]
 8008354:	429a      	cmp	r2, r3
 8008356:	d001      	beq.n	800835c <find_volume+0x200>
 8008358:	230d      	movs	r3, #13
 800835a:	e17d      	b.n	8008658 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	333c      	adds	r3, #60	; 0x3c
 8008360:	3316      	adds	r3, #22
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe f84a 	bl	80063fc <ld_word>
 8008368:	4603      	mov	r3, r0
 800836a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800836c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <find_volume+0x224>
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	333c      	adds	r3, #60	; 0x3c
 8008376:	3324      	adds	r3, #36	; 0x24
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe f857 	bl	800642c <ld_dword>
 800837e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	789b      	ldrb	r3, [r3, #2]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d005      	beq.n	80083a4 <find_volume+0x248>
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	789b      	ldrb	r3, [r3, #2]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d001      	beq.n	80083a4 <find_volume+0x248>
 80083a0:	230d      	movs	r3, #13
 80083a2:	e159      	b.n	8008658 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	789b      	ldrb	r3, [r3, #2]
 80083a8:	461a      	mov	r2, r3
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
 80083b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	895b      	ldrh	r3, [r3, #10]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <find_volume+0x27c>
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	895b      	ldrh	r3, [r3, #10]
 80083ca:	461a      	mov	r2, r3
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	895b      	ldrh	r3, [r3, #10]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <find_volume+0x280>
 80083d8:	230d      	movs	r3, #13
 80083da:	e13d      	b.n	8008658 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	333c      	adds	r3, #60	; 0x3c
 80083e0:	3311      	adds	r3, #17
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe f80a 	bl	80063fc <ld_word>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	891b      	ldrh	r3, [r3, #8]
 80083f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083f6:	8992      	ldrh	r2, [r2, #12]
 80083f8:	0952      	lsrs	r2, r2, #5
 80083fa:	b292      	uxth	r2, r2
 80083fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008400:	fb01 f202 	mul.w	r2, r1, r2
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <find_volume+0x2b8>
 800840c:	230d      	movs	r3, #13
 800840e:	e123      	b.n	8008658 <find_volume+0x4fc>
 8008410:	20002344 	.word	0x20002344

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	333c      	adds	r3, #60	; 0x3c
 8008418:	3313      	adds	r3, #19
 800841a:	4618      	mov	r0, r3
 800841c:	f7fd ffee 	bl	80063fc <ld_word>
 8008420:	4603      	mov	r3, r0
 8008422:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <find_volume+0x2dc>
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	333c      	adds	r3, #60	; 0x3c
 800842e:	3320      	adds	r3, #32
 8008430:	4618      	mov	r0, r3
 8008432:	f7fd fffb 	bl	800642c <ld_dword>
 8008436:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	333c      	adds	r3, #60	; 0x3c
 800843c:	330e      	adds	r3, #14
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd ffdc 	bl	80063fc <ld_word>
 8008444:	4603      	mov	r3, r0
 8008446:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <find_volume+0x2f6>
 800844e:	230d      	movs	r3, #13
 8008450:	e102      	b.n	8008658 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008452:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008456:	4413      	add	r3, r2
 8008458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800845a:	8911      	ldrh	r1, [r2, #8]
 800845c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800845e:	8992      	ldrh	r2, [r2, #12]
 8008460:	0952      	lsrs	r2, r2, #5
 8008462:	b292      	uxth	r2, r2
 8008464:	fbb1 f2f2 	udiv	r2, r1, r2
 8008468:	b292      	uxth	r2, r2
 800846a:	4413      	add	r3, r2
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800846e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	429a      	cmp	r2, r3
 8008474:	d201      	bcs.n	800847a <find_volume+0x31e>
 8008476:	230d      	movs	r3, #13
 8008478:	e0ee      	b.n	8008658 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800847a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008482:	8952      	ldrh	r2, [r2, #10]
 8008484:	fbb3 f3f2 	udiv	r3, r3, r2
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <find_volume+0x338>
 8008490:	230d      	movs	r3, #13
 8008492:	e0e1      	b.n	8008658 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8008494:	2303      	movs	r3, #3
 8008496:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d802      	bhi.n	80084aa <find_volume+0x34e>
 80084a4:	2302      	movs	r3, #2
 80084a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d802      	bhi.n	80084ba <find_volume+0x35e>
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	1c9a      	adds	r2, r3, #2
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084c6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80084c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084cc:	441a      	add	r2, r3
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80084d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	441a      	add	r2, r3
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80084dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d11e      	bne.n	8008522 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	333c      	adds	r3, #60	; 0x3c
 80084e8:	332a      	adds	r3, #42	; 0x2a
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fd ff86 	bl	80063fc <ld_word>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <find_volume+0x39e>
 80084f6:	230d      	movs	r3, #13
 80084f8:	e0ae      	b.n	8008658 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	891b      	ldrh	r3, [r3, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <find_volume+0x3aa>
 8008502:	230d      	movs	r3, #13
 8008504:	e0a8      	b.n	8008658 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	333c      	adds	r3, #60	; 0x3c
 800850a:	332c      	adds	r3, #44	; 0x2c
 800850c:	4618      	mov	r0, r3
 800850e:	f7fd ff8d 	bl	800642c <ld_dword>
 8008512:	4602      	mov	r2, r0
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	e01f      	b.n	8008562 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	891b      	ldrh	r3, [r3, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <find_volume+0x3d2>
 800852a:	230d      	movs	r3, #13
 800852c:	e094      	b.n	8008658 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008534:	441a      	add	r2, r3
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800853a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800853e:	2b02      	cmp	r3, #2
 8008540:	d103      	bne.n	800854a <find_volume+0x3ee>
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	e00a      	b.n	8008560 <find_volume+0x404>
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	4613      	mov	r3, r2
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	4413      	add	r3, r2
 8008554:	085a      	lsrs	r2, r3, #1
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008560:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008568:	899b      	ldrh	r3, [r3, #12]
 800856a:	4619      	mov	r1, r3
 800856c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800856e:	440b      	add	r3, r1
 8008570:	3b01      	subs	r3, #1
 8008572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008574:	8989      	ldrh	r1, [r1, #12]
 8008576:	fbb3 f3f1 	udiv	r3, r3, r1
 800857a:	429a      	cmp	r2, r3
 800857c:	d201      	bcs.n	8008582 <find_volume+0x426>
 800857e:	230d      	movs	r3, #13
 8008580:	e06a      	b.n	8008658 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	f04f 32ff 	mov.w	r2, #4294967295
 8008588:	61da      	str	r2, [r3, #28]
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	69da      	ldr	r2, [r3, #28]
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	2280      	movs	r2, #128	; 0x80
 8008596:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008598:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800859c:	2b03      	cmp	r3, #3
 800859e:	d149      	bne.n	8008634 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	333c      	adds	r3, #60	; 0x3c
 80085a4:	3330      	adds	r3, #48	; 0x30
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd ff28 	bl	80063fc <ld_word>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d140      	bne.n	8008634 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80085b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085b4:	3301      	adds	r3, #1
 80085b6:	4619      	mov	r1, r3
 80085b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085ba:	f7fe fa01 	bl	80069c0 <move_window>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d137      	bne.n	8008634 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	2200      	movs	r2, #0
 80085c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	333c      	adds	r3, #60	; 0x3c
 80085ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fd ff12 	bl	80063fc <ld_word>
 80085d8:	4603      	mov	r3, r0
 80085da:	461a      	mov	r2, r3
 80085dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d127      	bne.n	8008634 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	333c      	adds	r3, #60	; 0x3c
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd ff1f 	bl	800642c <ld_dword>
 80085ee:	4603      	mov	r3, r0
 80085f0:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <find_volume+0x504>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d11e      	bne.n	8008634 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	333c      	adds	r3, #60	; 0x3c
 80085fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fd ff14 	bl	800642c <ld_dword>
 8008604:	4603      	mov	r3, r0
 8008606:	4a17      	ldr	r2, [pc, #92]	; (8008664 <find_volume+0x508>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d113      	bne.n	8008634 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	333c      	adds	r3, #60	; 0x3c
 8008610:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008614:	4618      	mov	r0, r3
 8008616:	f7fd ff09 	bl	800642c <ld_dword>
 800861a:	4602      	mov	r2, r0
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	333c      	adds	r3, #60	; 0x3c
 8008624:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd feff 	bl	800642c <ld_dword>
 800862e:	4602      	mov	r2, r0
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800863a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <find_volume+0x50c>)
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	3301      	adds	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	4b08      	ldr	r3, [pc, #32]	; (8008668 <find_volume+0x50c>)
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	4b07      	ldr	r3, [pc, #28]	; (8008668 <find_volume+0x50c>)
 800864a:	881a      	ldrh	r2, [r3, #0]
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008652:	f7fe f94d 	bl	80068f0 <clear_lock>
#endif
	return FR_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3758      	adds	r7, #88	; 0x58
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	41615252 	.word	0x41615252
 8008664:	61417272 	.word	0x61417272
 8008668:	20002348 	.word	0x20002348

0800866c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008676:	2309      	movs	r3, #9
 8008678:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d02e      	beq.n	80086de <validate+0x72>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d02a      	beq.n	80086de <validate+0x72>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d025      	beq.n	80086de <validate+0x72>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	889a      	ldrh	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	88db      	ldrh	r3, [r3, #6]
 800869c:	429a      	cmp	r2, r3
 800869e:	d11e      	bne.n	80086de <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd ffa9 	bl	80065fc <lock_fs>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d014      	beq.n	80086da <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fd fe02 	bl	80062c0 <disk_status>
 80086bc:	4603      	mov	r3, r0
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <validate+0x60>
				res = FR_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
 80086ca:	e008      	b.n	80086de <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fd ffa8 	bl	8006628 <unlock_fs>
 80086d8:	e001      	b.n	80086de <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80086da:	230f      	movs	r3, #15
 80086dc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d102      	bne.n	80086ea <validate+0x7e>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	e000      	b.n	80086ec <validate+0x80>
 80086ea:	2300      	movs	r3, #0
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	6013      	str	r3, [r2, #0]
	return res;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800870e:	f107 0310 	add.w	r3, r7, #16
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff fc88 	bl	8008028 <get_ldnumber>
 8008718:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	2b00      	cmp	r3, #0
 800871e:	da01      	bge.n	8008724 <f_mount+0x28>
 8008720:	230b      	movs	r3, #11
 8008722:	e048      	b.n	80087b6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008724:	4a26      	ldr	r2, [pc, #152]	; (80087c0 <f_mount+0xc4>)
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800872c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00f      	beq.n	8008754 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008734:	69b8      	ldr	r0, [r7, #24]
 8008736:	f7fe f8db 	bl	80068f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fdab 	bl	800929a <ff_del_syncobj>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <f_mount+0x52>
 800874a:	2302      	movs	r3, #2
 800874c:	e033      	b.n	80087b6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00f      	beq.n	800877a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3314      	adds	r3, #20
 8008768:	4619      	mov	r1, r3
 800876a:	4610      	mov	r0, r2
 800876c:	f000 fd7a 	bl	8009264 <ff_cre_syncobj>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <f_mount+0x7e>
 8008776:	2302      	movs	r3, #2
 8008778:	e01d      	b.n	80087b6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	4910      	ldr	r1, [pc, #64]	; (80087c0 <f_mount+0xc4>)
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <f_mount+0x94>
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d001      	beq.n	8008794 <f_mount+0x98>
 8008790:	2300      	movs	r3, #0
 8008792:	e010      	b.n	80087b6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008794:	f107 010c 	add.w	r1, r7, #12
 8008798:	f107 0308 	add.w	r3, r7, #8
 800879c:	2200      	movs	r2, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fcdc 	bl	800815c <find_volume>
 80087a4:	4603      	mov	r3, r0
 80087a6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	7dfa      	ldrb	r2, [r7, #23]
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fd ff3a 	bl	8006628 <unlock_fs>
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3720      	adds	r7, #32
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20002344 	.word	0x20002344

080087c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b09a      	sub	sp, #104	; 0x68
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <f_open+0x18>
 80087d8:	2309      	movs	r3, #9
 80087da:	e1d7      	b.n	8008b8c <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80087e4:	79fa      	ldrb	r2, [r7, #7]
 80087e6:	f107 0110 	add.w	r1, r7, #16
 80087ea:	f107 0308 	add.w	r3, r7, #8
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fcb4 	bl	800815c <find_volume>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80087fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 81b4 	bne.w	8008b6c <f_open+0x3a8>
		dj.obj.fs = fs;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008808:	f44f 7000 	mov.w	r0, #512	; 0x200
 800880c:	f000 fd71 	bl	80092f2 <ff_memalloc>
 8008810:	65b8      	str	r0, [r7, #88]	; 0x58
 8008812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <f_open+0x62>
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2111      	movs	r1, #17
 800881c:	4618      	mov	r0, r3
 800881e:	f7fd ff03 	bl	8006628 <unlock_fs>
 8008822:	2311      	movs	r3, #17
 8008824:	e1b2      	b.n	8008b8c <f_open+0x3c8>
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800882a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	f107 0314 	add.w	r3, r7, #20
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff fb81 	bl	8007f3c <follow_path>
 800883a:	4603      	mov	r3, r0
 800883c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008840:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008844:	2b00      	cmp	r3, #0
 8008846:	d11a      	bne.n	800887e <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008848:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800884c:	b25b      	sxtb	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	da03      	bge.n	800885a <f_open+0x96>
				res = FR_INVALID_NAME;
 8008852:	2306      	movs	r3, #6
 8008854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008858:	e011      	b.n	800887e <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf14      	ite	ne
 8008864:	2301      	movne	r3, #1
 8008866:	2300      	moveq	r3, #0
 8008868:	b2db      	uxtb	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7fd fef4 	bl	8006660 <chk_lock>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	f003 031c 	and.w	r3, r3, #28
 8008884:	2b00      	cmp	r3, #0
 8008886:	d07f      	beq.n	8008988 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 8008888:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800888c:	2b00      	cmp	r3, #0
 800888e:	d017      	beq.n	80088c0 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008894:	2b04      	cmp	r3, #4
 8008896:	d10e      	bne.n	80088b6 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008898:	f7fd ff3e 	bl	8006718 <enq_lock>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d006      	beq.n	80088b0 <f_open+0xec>
 80088a2:	f107 0314 	add.w	r3, r7, #20
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff f898 	bl	80079dc <dir_register>
 80088ac:	4603      	mov	r3, r0
 80088ae:	e000      	b.n	80088b2 <f_open+0xee>
 80088b0:	2312      	movs	r3, #18
 80088b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	f043 0308 	orr.w	r3, r3, #8
 80088bc:	71fb      	strb	r3, [r7, #7]
 80088be:	e010      	b.n	80088e2 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80088c0:	7ebb      	ldrb	r3, [r7, #26]
 80088c2:	f003 0311 	and.w	r3, r3, #17
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <f_open+0x10e>
					res = FR_DENIED;
 80088ca:	2307      	movs	r3, #7
 80088cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80088d0:	e007      	b.n	80088e2 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <f_open+0x11e>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80088e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d168      	bne.n	80089bc <f_open+0x1f8>
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d063      	beq.n	80089bc <f_open+0x1f8>
				dw = GET_FATTIME();
 80088f4:	f7fd fac6 	bl	8005e84 <get_fattime>
 80088f8:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	330e      	adds	r3, #14
 80088fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008900:	4618      	mov	r0, r3
 8008902:	f7fd fdd1 	bl	80064a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	3316      	adds	r3, #22
 800890a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800890c:	4618      	mov	r0, r3
 800890e:	f7fd fdcb 	bl	80064a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	330b      	adds	r3, #11
 8008916:	2220      	movs	r2, #32
 8008918:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fdd3 	bl	80074cc <ld_clust>
 8008926:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800892c:	2200      	movs	r2, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fdeb 	bl	800750a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008936:	331c      	adds	r3, #28
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd fdb4 	bl	80064a8 <st_dword>
					fs->wflag = 1;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2201      	movs	r2, #1
 8008944:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008948:	2b00      	cmp	r3, #0
 800894a:	d037      	beq.n	80089bc <f_open+0x1f8>
						dw = fs->winsect;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008952:	f107 0314 	add.w	r3, r7, #20
 8008956:	2200      	movs	r2, #0
 8008958:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fadb 	bl	8006f16 <remove_chain>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008966:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800896a:	2b00      	cmp	r3, #0
 800896c:	d126      	bne.n	80089bc <f_open+0x1f8>
							res = move_window(fs, dw);
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe f824 	bl	80069c0 <move_window>
 8008978:	4603      	mov	r3, r0
 800897a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008982:	3a01      	subs	r2, #1
 8008984:	619a      	str	r2, [r3, #24]
 8008986:	e019      	b.n	80089bc <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800898c:	2b00      	cmp	r3, #0
 800898e:	d115      	bne.n	80089bc <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008990:	7ebb      	ldrb	r3, [r7, #26]
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <f_open+0x1de>
					res = FR_NO_FILE;
 800899a:	2304      	movs	r3, #4
 800899c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80089a0:	e00c      	b.n	80089bc <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d007      	beq.n	80089bc <f_open+0x1f8>
 80089ac:	7ebb      	ldrb	r3, [r7, #26]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <f_open+0x1f8>
						res = FR_DENIED;
 80089b6:	2307      	movs	r3, #7
 80089b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80089bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d128      	bne.n	8008a16 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <f_open+0x212>
				mode |= FA_MODIFIED;
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80089de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	f023 0301 	bic.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bf14      	ite	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	2300      	moveq	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	f107 0314 	add.w	r3, r7, #20
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fd fead 	bl	800675c <inc_lock>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d102      	bne.n	8008a16 <f_open+0x252>
 8008a10:	2302      	movs	r3, #2
 8008a12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008a16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f040 80a3 	bne.w	8008b66 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fd50 	bl	80074cc <ld_clust>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	331c      	adds	r3, #28
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fd fcf8 	bl	800642c <ld_dword>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	88da      	ldrh	r2, [r3, #6]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	79fa      	ldrb	r2, [r7, #7]
 8008a5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3330      	adds	r3, #48	; 0x30
 8008a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fd fd62 	bl	8006542 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d06e      	beq.n	8008b66 <f_open+0x3a2>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d06a      	beq.n	8008b66 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	895b      	ldrh	r3, [r3, #10]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	899b      	ldrh	r3, [r3, #12]
 8008aa2:	fb02 f303 	mul.w	r3, r2, r3
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab4:	e016      	b.n	8008ae4 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe f83d 	bl	8006b3a <get_fat>
 8008ac0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d802      	bhi.n	8008ace <f_open+0x30a>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad4:	d102      	bne.n	8008adc <f_open+0x318>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008adc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ae4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d103      	bne.n	8008af4 <f_open+0x330>
 8008aec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d8e0      	bhi.n	8008ab6 <f_open+0x2f2>
				}
				fp->clust = clst;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008af8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008afa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d131      	bne.n	8008b66 <f_open+0x3a2>
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	899b      	ldrh	r3, [r3, #12]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b0e:	fb01 f202 	mul.w	r2, r1, r2
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d026      	beq.n	8008b66 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fd ffed 	bl	8006afc <clust2sect>
 8008b22:	64b8      	str	r0, [r7, #72]	; 0x48
 8008b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d103      	bne.n	8008b32 <f_open+0x36e>
						res = FR_INT_ERR;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008b30:	e019      	b.n	8008b66 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	899b      	ldrh	r3, [r3, #12]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b40:	441a      	add	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	7858      	ldrb	r0, [r3, #1]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6a1a      	ldr	r2, [r3, #32]
 8008b54:	2301      	movs	r3, #1
 8008b56:	f7fd fbf3 	bl	8006340 <disk_read>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <f_open+0x3a2>
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8008b66:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008b68:	f000 fbcf 	bl	800930a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <f_open+0x3b6>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd fd50 	bl	8006628 <unlock_fs>
 8008b88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3768      	adds	r7, #104	; 0x68
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08e      	sub	sp, #56	; 0x38
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f107 0214 	add.w	r2, r7, #20
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fd59 	bl	800866c <validate>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008bc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d107      	bne.n	8008bd8 <f_read+0x44>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	7d5b      	ldrb	r3, [r3, #21]
 8008bcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d009      	beq.n	8008bec <f_read+0x58>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fd fd21 	bl	8006628 <unlock_fs>
 8008be6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bea:	e15d      	b.n	8008ea8 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	7d1b      	ldrb	r3, [r3, #20]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <f_read+0x72>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2107      	movs	r1, #7
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fd fd13 	bl	8006628 <unlock_fs>
 8008c02:	2307      	movs	r3, #7
 8008c04:	e150      	b.n	8008ea8 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	f240 813c 	bls.w	8008e94 <f_read+0x300>
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008c20:	e138      	b.n	8008e94 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	8992      	ldrh	r2, [r2, #12]
 8008c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c2e:	fb01 f202 	mul.w	r2, r1, r2
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f040 80f3 	bne.w	8008e20 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	8992      	ldrh	r2, [r2, #12]
 8008c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	8952      	ldrh	r2, [r2, #10]
 8008c4a:	3a01      	subs	r2, #1
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d139      	bne.n	8008cca <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	633b      	str	r3, [r7, #48]	; 0x30
 8008c64:	e013      	b.n	8008c8e <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d007      	beq.n	8008c7e <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	4619      	mov	r1, r3
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7fe fa4b 	bl	8007110 <clmt_clust>
 8008c7a:	6338      	str	r0, [r7, #48]	; 0x30
 8008c7c:	e007      	b.n	8008c8e <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	4619      	mov	r1, r3
 8008c86:	4610      	mov	r0, r2
 8008c88:	f7fd ff57 	bl	8006b3a <get_fat>
 8008c8c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d809      	bhi.n	8008ca8 <f_read+0x114>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2202      	movs	r2, #2
 8008c98:	755a      	strb	r2, [r3, #21]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2102      	movs	r1, #2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd fcc2 	bl	8006628 <unlock_fs>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e0ff      	b.n	8008ea8 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cae:	d109      	bne.n	8008cc4 <f_read+0x130>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	755a      	strb	r2, [r3, #21]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2101      	movs	r1, #1
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fd fcb4 	bl	8006628 <unlock_fs>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e0f1      	b.n	8008ea8 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f7fd ff12 	bl	8006afc <clust2sect>
 8008cd8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <f_read+0x160>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	755a      	strb	r2, [r3, #21]
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2102      	movs	r1, #2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fd fc9c 	bl	8006628 <unlock_fs>
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	e0d9      	b.n	8008ea8 <f_read+0x314>
			sect += csect;
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	899b      	ldrh	r3, [r3, #12]
 8008d00:	461a      	mov	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d046      	beq.n	8008d9e <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	4413      	add	r3, r2
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	8952      	ldrh	r2, [r2, #10]
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d905      	bls.n	8008d2a <f_read+0x196>
					cc = fs->csize - csect;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	895b      	ldrh	r3, [r3, #10]
 8008d22:	461a      	mov	r2, r3
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	7858      	ldrb	r0, [r3, #1]
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d34:	f7fd fb04 	bl	8006340 <disk_read>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <f_read+0x1be>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	755a      	strb	r2, [r3, #21]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2101      	movs	r1, #1
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fd fc6d 	bl	8006628 <unlock_fs>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e0aa      	b.n	8008ea8 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	7d1b      	ldrb	r3, [r3, #20]
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da18      	bge.n	8008d8e <f_read+0x1fa>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a1a      	ldr	r2, [r3, #32]
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d911      	bls.n	8008d8e <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1a      	ldr	r2, [r3, #32]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	8992      	ldrh	r2, [r2, #12]
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7c:	18d0      	adds	r0, r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	899b      	ldrh	r3, [r3, #12]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f7fd fbb9 	bl	8006500 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	899b      	ldrh	r3, [r3, #12]
 8008d92:	461a      	mov	r2, r3
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	fb02 f303 	mul.w	r3, r2, r3
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008d9c:	e066      	b.n	8008e6c <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d038      	beq.n	8008e1a <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	7d1b      	ldrb	r3, [r3, #20]
 8008dac:	b25b      	sxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	da1d      	bge.n	8008dee <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	7858      	ldrb	r0, [r3, #1]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6a1a      	ldr	r2, [r3, #32]
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f7fd fadd 	bl	8006380 <disk_write>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d009      	beq.n	8008de0 <f_read+0x24c>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	755a      	strb	r2, [r3, #21]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fd fc26 	bl	8006628 <unlock_fs>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e063      	b.n	8008ea8 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	7d1b      	ldrb	r3, [r3, #20]
 8008de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	7858      	ldrb	r0, [r3, #1]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008df8:	2301      	movs	r3, #1
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	f7fd faa0 	bl	8006340 <disk_read>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <f_read+0x286>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	755a      	strb	r2, [r3, #21]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fd fc09 	bl	8006628 <unlock_fs>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e046      	b.n	8008ea8 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	899b      	ldrh	r3, [r3, #12]
 8008e24:	4618      	mov	r0, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	8992      	ldrh	r2, [r2, #12]
 8008e2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e32:	fb01 f202 	mul.w	r2, r1, r2
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	1ac3      	subs	r3, r0, r3
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d901      	bls.n	8008e48 <f_read+0x2b4>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	8992      	ldrh	r2, [r2, #12]
 8008e56:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e5a:	fb00 f202 	mul.w	r2, r0, r2
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	440b      	add	r3, r1
 8008e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e64:	4619      	mov	r1, r3
 8008e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e68:	f7fd fb4a 	bl	8006500 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	4413      	add	r3, r2
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	441a      	add	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	619a      	str	r2, [r3, #24]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	441a      	add	r2, r3
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f47f aec3 	bne.w	8008c22 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fd fbc1 	bl	8006628 <unlock_fs>
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3738      	adds	r7, #56	; 0x38
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f107 0208 	add.w	r2, r7, #8
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff fbd3 	bl	800866c <validate>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d16d      	bne.n	8008fac <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	7d1b      	ldrb	r3, [r3, #20]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d067      	beq.n	8008fac <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7d1b      	ldrb	r3, [r3, #20]
 8008ee0:	b25b      	sxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	da1a      	bge.n	8008f1c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	7858      	ldrb	r0, [r3, #1]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1a      	ldr	r2, [r3, #32]
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	f7fd fa43 	bl	8006380 <disk_write>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d006      	beq.n	8008f0e <f_sync+0x5e>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2101      	movs	r1, #1
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fd fb8f 	bl	8006628 <unlock_fs>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e055      	b.n	8008fba <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	7d1b      	ldrb	r3, [r3, #20]
 8008f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f1c:	f7fc ffb2 	bl	8005e84 <get_fattime>
 8008f20:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7fd fd48 	bl	80069c0 <move_window>
 8008f30:	4603      	mov	r3, r0
 8008f32:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d138      	bne.n	8008fac <f_sync+0xfc>
					dir = fp->dir_ptr;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	330b      	adds	r3, #11
 8008f44:	781a      	ldrb	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	330b      	adds	r3, #11
 8008f4a:	f042 0220 	orr.w	r2, r2, #32
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	68f9      	ldr	r1, [r7, #12]
 8008f5e:	f7fe fad4 	bl	800750a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f103 021c 	add.w	r2, r3, #28
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7fd fa9a 	bl	80064a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3316      	adds	r3, #22
 8008f78:	6939      	ldr	r1, [r7, #16]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fd fa94 	bl	80064a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3312      	adds	r3, #18
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fd fa73 	bl	8006472 <st_word>
					fs->wflag = 1;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fd fd41 	bl	8006a1c <sync_fs>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7d1b      	ldrb	r3, [r3, #20]
 8008fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	7dfa      	ldrb	r2, [r7, #23]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fd fb38 	bl	8006628 <unlock_fs>
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff ff70 	bl	8008eb0 <f_sync>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d11d      	bne.n	8009016 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f107 0208 	add.w	r2, r7, #8
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff fb42 	bl	800866c <validate>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d111      	bne.n	8009016 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fd fc3e 	bl	8006878 <dec_lock>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f7fd fb09 	bl	8006628 <unlock_fs>
#endif
		}
	}
	return res;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009036:	4b1f      	ldr	r3, [pc, #124]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009038:	7a5b      	ldrb	r3, [r3, #9]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d131      	bne.n	80090a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009040:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009042:	7a5b      	ldrb	r3, [r3, #9]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 800904a:	2100      	movs	r1, #0
 800904c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800904e:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009060:	7a5b      	ldrb	r3, [r3, #9]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009068:	4413      	add	r3, r2
 800906a:	79fa      	ldrb	r2, [r7, #7]
 800906c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800906e:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 8009070:	7a5b      	ldrb	r3, [r3, #9]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	b2d1      	uxtb	r1, r2
 8009078:	4a0e      	ldr	r2, [pc, #56]	; (80090b4 <FATFS_LinkDriverEx+0x94>)
 800907a:	7251      	strb	r1, [r2, #9]
 800907c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800907e:	7dbb      	ldrb	r3, [r7, #22]
 8009080:	3330      	adds	r3, #48	; 0x30
 8009082:	b2da      	uxtb	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	3301      	adds	r3, #1
 800908c:	223a      	movs	r2, #58	; 0x3a
 800908e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3302      	adds	r3, #2
 8009094:	222f      	movs	r2, #47	; 0x2f
 8009096:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	3303      	adds	r3, #3
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	2000236c 	.word	0x2000236c

080090b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090c2:	2200      	movs	r2, #0
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff ffaa 	bl	8009020 <FATFS_LinkDriverEx>
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	6039      	str	r1, [r7, #0]
 80090e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	2b7f      	cmp	r3, #127	; 0x7f
 80090e8:	d802      	bhi.n	80090f0 <ff_convert+0x18>
		c = chr;
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	81fb      	strh	r3, [r7, #14]
 80090ee:	e025      	b.n	800913c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090f6:	88fb      	ldrh	r3, [r7, #6]
 80090f8:	2bff      	cmp	r3, #255	; 0xff
 80090fa:	d805      	bhi.n	8009108 <ff_convert+0x30>
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	3b80      	subs	r3, #128	; 0x80
 8009100:	4a12      	ldr	r2, [pc, #72]	; (800914c <ff_convert+0x74>)
 8009102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009106:	e000      	b.n	800910a <ff_convert+0x32>
 8009108:	2300      	movs	r3, #0
 800910a:	81fb      	strh	r3, [r7, #14]
 800910c:	e016      	b.n	800913c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800910e:	2300      	movs	r3, #0
 8009110:	81fb      	strh	r3, [r7, #14]
 8009112:	e009      	b.n	8009128 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	4a0d      	ldr	r2, [pc, #52]	; (800914c <ff_convert+0x74>)
 8009118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911c:	88fa      	ldrh	r2, [r7, #6]
 800911e:	429a      	cmp	r2, r3
 8009120:	d006      	beq.n	8009130 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009122:	89fb      	ldrh	r3, [r7, #14]
 8009124:	3301      	adds	r3, #1
 8009126:	81fb      	strh	r3, [r7, #14]
 8009128:	89fb      	ldrh	r3, [r7, #14]
 800912a:	2b7f      	cmp	r3, #127	; 0x7f
 800912c:	d9f2      	bls.n	8009114 <ff_convert+0x3c>
 800912e:	e000      	b.n	8009132 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009130:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009132:	89fb      	ldrh	r3, [r7, #14]
 8009134:	3380      	adds	r3, #128	; 0x80
 8009136:	b29b      	uxth	r3, r3
 8009138:	b2db      	uxtb	r3, r3
 800913a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800913c:	89fb      	ldrh	r3, [r7, #14]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	0800e628 	.word	0x0800e628

08009150 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800915a:	88fb      	ldrh	r3, [r7, #6]
 800915c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009160:	d201      	bcs.n	8009166 <ff_wtoupper+0x16>
 8009162:	4b3e      	ldr	r3, [pc, #248]	; (800925c <ff_wtoupper+0x10c>)
 8009164:	e000      	b.n	8009168 <ff_wtoupper+0x18>
 8009166:	4b3e      	ldr	r3, [pc, #248]	; (8009260 <ff_wtoupper+0x110>)
 8009168:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	1c9a      	adds	r2, r3, #2
 800916e:	617a      	str	r2, [r7, #20]
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009174:	8a7b      	ldrh	r3, [r7, #18]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d068      	beq.n	800924c <ff_wtoupper+0xfc>
 800917a:	88fa      	ldrh	r2, [r7, #6]
 800917c:	8a7b      	ldrh	r3, [r7, #18]
 800917e:	429a      	cmp	r2, r3
 8009180:	d364      	bcc.n	800924c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	1c9a      	adds	r2, r3, #2
 8009186:	617a      	str	r2, [r7, #20]
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	823b      	strh	r3, [r7, #16]
 800918c:	8a3b      	ldrh	r3, [r7, #16]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	81fb      	strh	r3, [r7, #14]
 8009192:	8a3b      	ldrh	r3, [r7, #16]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009198:	88fa      	ldrh	r2, [r7, #6]
 800919a:	8a79      	ldrh	r1, [r7, #18]
 800919c:	8a3b      	ldrh	r3, [r7, #16]
 800919e:	440b      	add	r3, r1
 80091a0:	429a      	cmp	r2, r3
 80091a2:	da49      	bge.n	8009238 <ff_wtoupper+0xe8>
			switch (cmd) {
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	2b08      	cmp	r3, #8
 80091a8:	d84f      	bhi.n	800924a <ff_wtoupper+0xfa>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <ff_wtoupper+0x60>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091d5 	.word	0x080091d5
 80091b4:	080091e7 	.word	0x080091e7
 80091b8:	080091fd 	.word	0x080091fd
 80091bc:	08009205 	.word	0x08009205
 80091c0:	0800920d 	.word	0x0800920d
 80091c4:	08009215 	.word	0x08009215
 80091c8:	0800921d 	.word	0x0800921d
 80091cc:	08009225 	.word	0x08009225
 80091d0:	0800922d 	.word	0x0800922d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	8a7b      	ldrh	r3, [r7, #18]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	80fb      	strh	r3, [r7, #6]
 80091e4:	e027      	b.n	8009236 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091e6:	88fa      	ldrh	r2, [r7, #6]
 80091e8:	8a7b      	ldrh	r3, [r7, #18]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	88fa      	ldrh	r2, [r7, #6]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	80fb      	strh	r3, [r7, #6]
 80091fa:	e01c      	b.n	8009236 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	3b10      	subs	r3, #16
 8009200:	80fb      	strh	r3, [r7, #6]
 8009202:	e018      	b.n	8009236 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009204:	88fb      	ldrh	r3, [r7, #6]
 8009206:	3b20      	subs	r3, #32
 8009208:	80fb      	strh	r3, [r7, #6]
 800920a:	e014      	b.n	8009236 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	3b30      	subs	r3, #48	; 0x30
 8009210:	80fb      	strh	r3, [r7, #6]
 8009212:	e010      	b.n	8009236 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	3b1a      	subs	r3, #26
 8009218:	80fb      	strh	r3, [r7, #6]
 800921a:	e00c      	b.n	8009236 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800921c:	88fb      	ldrh	r3, [r7, #6]
 800921e:	3308      	adds	r3, #8
 8009220:	80fb      	strh	r3, [r7, #6]
 8009222:	e008      	b.n	8009236 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	3b50      	subs	r3, #80	; 0x50
 8009228:	80fb      	strh	r3, [r7, #6]
 800922a:	e004      	b.n	8009236 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009232:	80fb      	strh	r3, [r7, #6]
 8009234:	bf00      	nop
			}
			break;
 8009236:	e008      	b.n	800924a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009238:	89fb      	ldrh	r3, [r7, #14]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d195      	bne.n	800916a <ff_wtoupper+0x1a>
 800923e:	8a3b      	ldrh	r3, [r7, #16]
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4413      	add	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009248:	e78f      	b.n	800916a <ff_wtoupper+0x1a>
			break;
 800924a:	bf00      	nop
	}

	return chr;
 800924c:	88fb      	ldrh	r3, [r7, #6]
}
 800924e:	4618      	mov	r0, r3
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	0800e728 	.word	0x0800e728
 8009260:	0800e91c 	.word	0x0800e91c

08009264 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	6039      	str	r1, [r7, #0]
 800926e:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009270:	2200      	movs	r2, #0
 8009272:	2101      	movs	r1, #1
 8009274:	2001      	movs	r0, #1
 8009276:	f000 f9b5 	bl	80095e4 <osSemaphoreNew>
 800927a:	4602      	mov	r2, r0
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	bf14      	ite	ne
 8009288:	2301      	movne	r3, #1
 800928a:	2300      	moveq	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	60fb      	str	r3, [r7, #12]

    return ret;
 8009290:	68fb      	ldr	r3, [r7, #12]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fabe 	bl	8009824 <osSemaphoreDelete>
#endif
    return 1;
 80092a8:	2301      	movs	r3, #1
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80092be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa18 	bl	80096f8 <osSemaphoreAcquire>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80092ce:	2301      	movs	r3, #1
 80092d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80092d2:	68fb      	ldr	r3, [r7, #12]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fa59 	bl	800979c <osSemaphoreRelease>
#endif
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f003 fa8c 	bl	800c818 <pvPortMalloc>
 8009300:	4603      	mov	r3, r0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f003 fb4c 	bl	800c9b0 <vPortFree>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <__NVIC_SetPriority>:
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800932c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009330:	2b00      	cmp	r3, #0
 8009332:	db0a      	blt.n	800934a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	b2da      	uxtb	r2, r3
 8009338:	490c      	ldr	r1, [pc, #48]	; (800936c <__NVIC_SetPriority+0x4c>)
 800933a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933e:	0112      	lsls	r2, r2, #4
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	440b      	add	r3, r1
 8009344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009348:	e00a      	b.n	8009360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	b2da      	uxtb	r2, r3
 800934e:	4908      	ldr	r1, [pc, #32]	; (8009370 <__NVIC_SetPriority+0x50>)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	3b04      	subs	r3, #4
 8009358:	0112      	lsls	r2, r2, #4
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	440b      	add	r3, r1
 800935e:	761a      	strb	r2, [r3, #24]
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	e000e100 	.word	0xe000e100
 8009370:	e000ed00 	.word	0xe000ed00

08009374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009378:	2100      	movs	r1, #0
 800937a:	f06f 0004 	mvn.w	r0, #4
 800937e:	f7ff ffcf 	bl	8009320 <__NVIC_SetPriority>
#endif
}
 8009382:	bf00      	nop
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800938e:	f3ef 8305 	mrs	r3, IPSR
 8009392:	603b      	str	r3, [r7, #0]
  return(result);
 8009394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800939a:	f06f 0305 	mvn.w	r3, #5
 800939e:	607b      	str	r3, [r7, #4]
 80093a0:	e00c      	b.n	80093bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <osKernelInitialize+0x44>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80093aa:	4b08      	ldr	r3, [pc, #32]	; (80093cc <osKernelInitialize+0x44>)
 80093ac:	2201      	movs	r2, #1
 80093ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	607b      	str	r3, [r7, #4]
 80093b4:	e002      	b.n	80093bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80093b6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093bc:	687b      	ldr	r3, [r7, #4]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20002378 	.word	0x20002378

080093d0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80093d6:	f002 faa1 	bl	800b91c <xTaskGetSchedulerState>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d004      	beq.n	80093ea <osKernelGetState+0x1a>
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d105      	bne.n	80093f0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80093e4:	2302      	movs	r3, #2
 80093e6:	607b      	str	r3, [r7, #4]
      break;
 80093e8:	e00c      	b.n	8009404 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80093ea:	2303      	movs	r3, #3
 80093ec:	607b      	str	r3, [r7, #4]
      break;
 80093ee:	e009      	b.n	8009404 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <osKernelGetState+0x40>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d102      	bne.n	80093fe <osKernelGetState+0x2e>
        state = osKernelReady;
 80093f8:	2301      	movs	r3, #1
 80093fa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80093fc:	e001      	b.n	8009402 <osKernelGetState+0x32>
        state = osKernelInactive;
 80093fe:	2300      	movs	r3, #0
 8009400:	607b      	str	r3, [r7, #4]
      break;
 8009402:	bf00      	nop
  }

  return (state);
 8009404:	687b      	ldr	r3, [r7, #4]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20002378 	.word	0x20002378

08009414 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800941a:	f3ef 8305 	mrs	r3, IPSR
 800941e:	603b      	str	r3, [r7, #0]
  return(result);
 8009420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009426:	f06f 0305 	mvn.w	r3, #5
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	e010      	b.n	8009450 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800942e:	4b0b      	ldr	r3, [pc, #44]	; (800945c <osKernelStart+0x48>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d109      	bne.n	800944a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009436:	f7ff ff9d 	bl	8009374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800943a:	4b08      	ldr	r3, [pc, #32]	; (800945c <osKernelStart+0x48>)
 800943c:	2202      	movs	r2, #2
 800943e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009440:	f001 fe12 	bl	800b068 <vTaskStartScheduler>
      stat = osOK;
 8009444:	2300      	movs	r3, #0
 8009446:	607b      	str	r3, [r7, #4]
 8009448:	e002      	b.n	8009450 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800944a:	f04f 33ff 	mov.w	r3, #4294967295
 800944e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009450:	687b      	ldr	r3, [r7, #4]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20002378 	.word	0x20002378

08009460 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009466:	f3ef 8305 	mrs	r3, IPSR
 800946a:	603b      	str	r3, [r7, #0]
  return(result);
 800946c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009472:	f001 ff1b 	bl	800b2ac <xTaskGetTickCountFromISR>
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	e002      	b.n	8009480 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800947a:	f001 ff07 	bl	800b28c <xTaskGetTickCount>
 800947e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009480:	687b      	ldr	r3, [r7, #4]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800948a:	b580      	push	{r7, lr}
 800948c:	b08e      	sub	sp, #56	; 0x38
 800948e:	af04      	add	r7, sp, #16
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009496:	2300      	movs	r3, #0
 8009498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800949a:	f3ef 8305 	mrs	r3, IPSR
 800949e:	617b      	str	r3, [r7, #20]
  return(result);
 80094a0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d17e      	bne.n	80095a4 <osThreadNew+0x11a>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d07b      	beq.n	80095a4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80094ac:	2380      	movs	r3, #128	; 0x80
 80094ae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80094b0:	2318      	movs	r3, #24
 80094b2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80094b4:	2300      	movs	r3, #0
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80094b8:	f04f 33ff 	mov.w	r3, #4294967295
 80094bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d045      	beq.n	8009550 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <osThreadNew+0x48>
        name = attr->name;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d008      	beq.n	80094f8 <osThreadNew+0x6e>
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2b38      	cmp	r3, #56	; 0x38
 80094ea:	d805      	bhi.n	80094f8 <osThreadNew+0x6e>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <osThreadNew+0x72>
        return (NULL);
 80094f8:	2300      	movs	r3, #0
 80094fa:	e054      	b.n	80095a6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	089b      	lsrs	r3, r3, #2
 800950a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00e      	beq.n	8009532 <osThreadNew+0xa8>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b5b      	cmp	r3, #91	; 0x5b
 800951a:	d90a      	bls.n	8009532 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009520:	2b00      	cmp	r3, #0
 8009522:	d006      	beq.n	8009532 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <osThreadNew+0xa8>
        mem = 1;
 800952c:	2301      	movs	r3, #1
 800952e:	61bb      	str	r3, [r7, #24]
 8009530:	e010      	b.n	8009554 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10c      	bne.n	8009554 <osThreadNew+0xca>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d108      	bne.n	8009554 <osThreadNew+0xca>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d104      	bne.n	8009554 <osThreadNew+0xca>
          mem = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	61bb      	str	r3, [r7, #24]
 800954e:	e001      	b.n	8009554 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d110      	bne.n	800957c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009562:	9202      	str	r2, [sp, #8]
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6a3a      	ldr	r2, [r7, #32]
 800956e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f001 fba3 	bl	800acbc <xTaskCreateStatic>
 8009576:	4603      	mov	r3, r0
 8009578:	613b      	str	r3, [r7, #16]
 800957a:	e013      	b.n	80095a4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d110      	bne.n	80095a4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	b29a      	uxth	r2, r3
 8009586:	f107 0310 	add.w	r3, r7, #16
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f001 fbee 	bl	800ad76 <xTaskCreate>
 800959a:	4603      	mov	r3, r0
 800959c:	2b01      	cmp	r3, #1
 800959e:	d001      	beq.n	80095a4 <osThreadNew+0x11a>
            hTask = NULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80095a4:	693b      	ldr	r3, [r7, #16]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3728      	adds	r7, #40	; 0x28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095b6:	f3ef 8305 	mrs	r3, IPSR
 80095ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80095bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <osDelay+0x1c>
    stat = osErrorISR;
 80095c2:	f06f 0305 	mvn.w	r3, #5
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	e007      	b.n	80095da <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <osDelay+0x2c>
      vTaskDelay(ticks);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fd13 	bl	800b000 <vTaskDelay>
    }
  }

  return (stat);
 80095da:	68fb      	ldr	r3, [r7, #12]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08a      	sub	sp, #40	; 0x28
 80095e8:	af02      	add	r7, sp, #8
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f4:	f3ef 8305 	mrs	r3, IPSR
 80095f8:	613b      	str	r3, [r7, #16]
  return(result);
 80095fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d175      	bne.n	80096ec <osSemaphoreNew+0x108>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d072      	beq.n	80096ec <osSemaphoreNew+0x108>
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	429a      	cmp	r2, r3
 800960c:	d86e      	bhi.n	80096ec <osSemaphoreNew+0x108>
    mem = -1;
 800960e:	f04f 33ff 	mov.w	r3, #4294967295
 8009612:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d015      	beq.n	8009646 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d006      	beq.n	8009630 <osSemaphoreNew+0x4c>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	2b4f      	cmp	r3, #79	; 0x4f
 8009628:	d902      	bls.n	8009630 <osSemaphoreNew+0x4c>
        mem = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e00c      	b.n	800964a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d108      	bne.n	800964a <osSemaphoreNew+0x66>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d104      	bne.n	800964a <osSemaphoreNew+0x66>
          mem = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	61bb      	str	r3, [r7, #24]
 8009644:	e001      	b.n	800964a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d04c      	beq.n	80096ec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d128      	bne.n	80096aa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d10a      	bne.n	8009674 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	2203      	movs	r2, #3
 8009664:	9200      	str	r2, [sp, #0]
 8009666:	2200      	movs	r2, #0
 8009668:	2100      	movs	r1, #0
 800966a:	2001      	movs	r0, #1
 800966c:	f000 fb80 	bl	8009d70 <xQueueGenericCreateStatic>
 8009670:	61f8      	str	r0, [r7, #28]
 8009672:	e005      	b.n	8009680 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009674:	2203      	movs	r2, #3
 8009676:	2100      	movs	r1, #0
 8009678:	2001      	movs	r0, #1
 800967a:	f000 fbf1 	bl	8009e60 <xQueueGenericCreate>
 800967e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d022      	beq.n	80096cc <osSemaphoreNew+0xe8>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01f      	beq.n	80096cc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800968c:	2300      	movs	r3, #0
 800968e:	2200      	movs	r2, #0
 8009690:	2100      	movs	r1, #0
 8009692:	69f8      	ldr	r0, [r7, #28]
 8009694:	f000 fcac 	bl	8009ff0 <xQueueGenericSend>
 8009698:	4603      	mov	r3, r0
 800969a:	2b01      	cmp	r3, #1
 800969c:	d016      	beq.n	80096cc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800969e:	69f8      	ldr	r0, [r7, #28]
 80096a0:	f001 f938 	bl	800a914 <vQueueDelete>
            hSemaphore = NULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	e010      	b.n	80096cc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d108      	bne.n	80096c2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	461a      	mov	r2, r3
 80096b6:	68b9      	ldr	r1, [r7, #8]
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fc2e 	bl	8009f1a <xQueueCreateCountingSemaphoreStatic>
 80096be:	61f8      	str	r0, [r7, #28]
 80096c0:	e004      	b.n	80096cc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fc5f 	bl	8009f88 <xQueueCreateCountingSemaphore>
 80096ca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00c      	beq.n	80096ec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	617b      	str	r3, [r7, #20]
 80096de:	e001      	b.n	80096e4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80096e4:	6979      	ldr	r1, [r7, #20]
 80096e6:	69f8      	ldr	r0, [r7, #28]
 80096e8:	f001 fa60 	bl	800abac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80096ec:	69fb      	ldr	r3, [r7, #28]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3720      	adds	r7, #32
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009706:	2300      	movs	r3, #0
 8009708:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009710:	f06f 0303 	mvn.w	r3, #3
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e039      	b.n	800978c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009718:	f3ef 8305 	mrs	r3, IPSR
 800971c:	60fb      	str	r3, [r7, #12]
  return(result);
 800971e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009720:	2b00      	cmp	r3, #0
 8009722:	d022      	beq.n	800976a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800972a:	f06f 0303 	mvn.w	r3, #3
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	e02c      	b.n	800978c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009736:	f107 0308 	add.w	r3, r7, #8
 800973a:	461a      	mov	r2, r3
 800973c:	2100      	movs	r1, #0
 800973e:	6938      	ldr	r0, [r7, #16]
 8009740:	f001 f868 	bl	800a814 <xQueueReceiveFromISR>
 8009744:	4603      	mov	r3, r0
 8009746:	2b01      	cmp	r3, #1
 8009748:	d003      	beq.n	8009752 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800974a:	f06f 0302 	mvn.w	r3, #2
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e01c      	b.n	800978c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d019      	beq.n	800978c <osSemaphoreAcquire+0x94>
 8009758:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <osSemaphoreAcquire+0xa0>)
 800975a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	e010      	b.n	800978c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6938      	ldr	r0, [r7, #16]
 800976e:	f000 ff45 	bl	800a5fc <xQueueSemaphoreTake>
 8009772:	4603      	mov	r3, r0
 8009774:	2b01      	cmp	r3, #1
 8009776:	d009      	beq.n	800978c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d003      	beq.n	8009786 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800977e:	f06f 0301 	mvn.w	r3, #1
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	e002      	b.n	800978c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009786:	f06f 0302 	mvn.w	r3, #2
 800978a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800978c:	697b      	ldr	r3, [r7, #20]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d103      	bne.n	80097ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80097b2:	f06f 0303 	mvn.w	r3, #3
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	e02c      	b.n	8009814 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ba:	f3ef 8305 	mrs	r3, IPSR
 80097be:	60fb      	str	r3, [r7, #12]
  return(result);
 80097c0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01a      	beq.n	80097fc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80097ca:	f107 0308 	add.w	r3, r7, #8
 80097ce:	4619      	mov	r1, r3
 80097d0:	6938      	ldr	r0, [r7, #16]
 80097d2:	f000 fda6 	bl	800a322 <xQueueGiveFromISR>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d003      	beq.n	80097e4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80097dc:	f06f 0302 	mvn.w	r3, #2
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e017      	b.n	8009814 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d014      	beq.n	8009814 <osSemaphoreRelease+0x78>
 80097ea:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <osSemaphoreRelease+0x84>)
 80097ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	e00b      	b.n	8009814 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097fc:	2300      	movs	r3, #0
 80097fe:	2200      	movs	r2, #0
 8009800:	2100      	movs	r1, #0
 8009802:	6938      	ldr	r0, [r7, #16]
 8009804:	f000 fbf4 	bl	8009ff0 <xQueueGenericSend>
 8009808:	4603      	mov	r3, r0
 800980a:	2b01      	cmp	r3, #1
 800980c:	d002      	beq.n	8009814 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800980e:	f06f 0302 	mvn.w	r3, #2
 8009812:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009814:	697b      	ldr	r3, [r7, #20]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009830:	f3ef 8305 	mrs	r3, IPSR
 8009834:	60fb      	str	r3, [r7, #12]
  return(result);
 8009836:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800983c:	f06f 0305 	mvn.w	r3, #5
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	e00e      	b.n	8009862 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d103      	bne.n	8009852 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800984a:	f06f 0303 	mvn.w	r3, #3
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e007      	b.n	8009862 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009852:	6938      	ldr	r0, [r7, #16]
 8009854:	f001 f9d4 	bl	800ac00 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800985c:	6938      	ldr	r0, [r7, #16]
 800985e:	f001 f859 	bl	800a914 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009862:	697b      	ldr	r3, [r7, #20]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800986c:	b580      	push	{r7, lr}
 800986e:	b08a      	sub	sp, #40	; 0x28
 8009870:	af02      	add	r7, sp, #8
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009878:	2300      	movs	r3, #0
 800987a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800987c:	f3ef 8305 	mrs	r3, IPSR
 8009880:	613b      	str	r3, [r7, #16]
  return(result);
 8009882:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009884:	2b00      	cmp	r3, #0
 8009886:	d15f      	bne.n	8009948 <osMessageQueueNew+0xdc>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d05c      	beq.n	8009948 <osMessageQueueNew+0xdc>
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d059      	beq.n	8009948 <osMessageQueueNew+0xdc>
    mem = -1;
 8009894:	f04f 33ff 	mov.w	r3, #4294967295
 8009898:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d029      	beq.n	80098f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d012      	beq.n	80098ce <osMessageQueueNew+0x62>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	2b4f      	cmp	r3, #79	; 0x4f
 80098ae:	d90e      	bls.n	80098ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00a      	beq.n	80098ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695a      	ldr	r2, [r3, #20]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	fb01 f303 	mul.w	r3, r1, r3
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d302      	bcc.n	80098ce <osMessageQueueNew+0x62>
        mem = 1;
 80098c8:	2301      	movs	r3, #1
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	e014      	b.n	80098f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d110      	bne.n	80098f8 <osMessageQueueNew+0x8c>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10c      	bne.n	80098f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d108      	bne.n	80098f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d104      	bne.n	80098f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61bb      	str	r3, [r7, #24]
 80098f2:	e001      	b.n	80098f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d10b      	bne.n	8009916 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691a      	ldr	r2, [r3, #16]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2100      	movs	r1, #0
 8009908:	9100      	str	r1, [sp, #0]
 800990a:	68b9      	ldr	r1, [r7, #8]
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fa2f 	bl	8009d70 <xQueueGenericCreateStatic>
 8009912:	61f8      	str	r0, [r7, #28]
 8009914:	e008      	b.n	8009928 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d105      	bne.n	8009928 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800991c:	2200      	movs	r2, #0
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fa9d 	bl	8009e60 <xQueueGenericCreate>
 8009926:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00c      	beq.n	8009948 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	e001      	b.n	8009940 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009940:	6979      	ldr	r1, [r7, #20]
 8009942:	69f8      	ldr	r0, [r7, #28]
 8009944:	f001 f932 	bl	800abac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009948:	69fb      	ldr	r3, [r7, #28]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3720      	adds	r7, #32
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	4613      	mov	r3, r2
 8009962:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009968:	2300      	movs	r3, #0
 800996a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800996c:	f3ef 8305 	mrs	r3, IPSR
 8009970:	617b      	str	r3, [r7, #20]
  return(result);
 8009972:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009974:	2b00      	cmp	r3, #0
 8009976:	d028      	beq.n	80099ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <osMessageQueuePut+0x36>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <osMessageQueuePut+0x36>
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800998a:	f06f 0303 	mvn.w	r3, #3
 800998e:	61fb      	str	r3, [r7, #28]
 8009990:	e038      	b.n	8009a04 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009992:	2300      	movs	r3, #0
 8009994:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009996:	f107 0210 	add.w	r2, r7, #16
 800999a:	2300      	movs	r3, #0
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	69b8      	ldr	r0, [r7, #24]
 80099a0:	f000 fc24 	bl	800a1ec <xQueueGenericSendFromISR>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d003      	beq.n	80099b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80099aa:	f06f 0302 	mvn.w	r3, #2
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	e028      	b.n	8009a04 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d025      	beq.n	8009a04 <osMessageQueuePut+0xb0>
 80099b8:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <osMessageQueuePut+0xbc>)
 80099ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	e01c      	b.n	8009a04 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <osMessageQueuePut+0x82>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d103      	bne.n	80099de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80099d6:	f06f 0303 	mvn.w	r3, #3
 80099da:	61fb      	str	r3, [r7, #28]
 80099dc:	e012      	b.n	8009a04 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80099de:	2300      	movs	r3, #0
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	69b8      	ldr	r0, [r7, #24]
 80099e6:	f000 fb03 	bl	8009ff0 <xQueueGenericSend>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d009      	beq.n	8009a04 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80099f6:	f06f 0301 	mvn.w	r3, #1
 80099fa:	61fb      	str	r3, [r7, #28]
 80099fc:	e002      	b.n	8009a04 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80099fe:	f06f 0302 	mvn.w	r3, #2
 8009a02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a04:	69fb      	ldr	r3, [r7, #28]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	e000ed04 	.word	0xe000ed04

08009a14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a2a:	f3ef 8305 	mrs	r3, IPSR
 8009a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8009a30:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d028      	beq.n	8009a88 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d005      	beq.n	8009a48 <osMessageQueueGet+0x34>
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <osMessageQueueGet+0x34>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009a48:	f06f 0303 	mvn.w	r3, #3
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e037      	b.n	8009ac0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009a54:	f107 0310 	add.w	r3, r7, #16
 8009a58:	461a      	mov	r2, r3
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	69b8      	ldr	r0, [r7, #24]
 8009a5e:	f000 fed9 	bl	800a814 <xQueueReceiveFromISR>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d003      	beq.n	8009a70 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009a68:	f06f 0302 	mvn.w	r3, #2
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	e027      	b.n	8009ac0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d024      	beq.n	8009ac0 <osMessageQueueGet+0xac>
 8009a76:	4b15      	ldr	r3, [pc, #84]	; (8009acc <osMessageQueueGet+0xb8>)
 8009a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	e01b      	b.n	8009ac0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <osMessageQueueGet+0x80>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d103      	bne.n	8009a9c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a94:	f06f 0303 	mvn.w	r3, #3
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e011      	b.n	8009ac0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	68b9      	ldr	r1, [r7, #8]
 8009aa0:	69b8      	ldr	r0, [r7, #24]
 8009aa2:	f000 fccb 	bl	800a43c <xQueueReceive>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d009      	beq.n	8009ac0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009ab2:	f06f 0301 	mvn.w	r3, #1
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	e002      	b.n	8009ac0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009aba:	f06f 0302 	mvn.w	r3, #2
 8009abe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009ac0:	69fb      	ldr	r3, [r7, #28]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3720      	adds	r7, #32
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4a07      	ldr	r2, [pc, #28]	; (8009afc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4a06      	ldr	r2, [pc, #24]	; (8009b00 <vApplicationGetIdleTaskMemory+0x30>)
 8009ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2280      	movs	r2, #128	; 0x80
 8009aec:	601a      	str	r2, [r3, #0]
}
 8009aee:	bf00      	nop
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	2000237c 	.word	0x2000237c
 8009b00:	200023d8 	.word	0x200023d8

08009b04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4a07      	ldr	r2, [pc, #28]	; (8009b30 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	4a06      	ldr	r2, [pc, #24]	; (8009b34 <vApplicationGetTimerTaskMemory+0x30>)
 8009b1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b22:	601a      	str	r2, [r3, #0]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	200025d8 	.word	0x200025d8
 8009b34:	20002634 	.word	0x20002634

08009b38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f103 0208 	add.w	r2, r3, #8
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f103 0208 	add.w	r2, r3, #8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f103 0208 	add.w	r2, r3, #8
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b085      	sub	sp, #20
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf0:	d103      	bne.n	8009bfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e00c      	b.n	8009c14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e002      	b.n	8009c08 <vListInsert+0x2e>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d2f6      	bcs.n	8009c02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]
}
 8009c40:	bf00      	nop
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6892      	ldr	r2, [r2, #8]
 8009c62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6852      	ldr	r2, [r2, #4]
 8009c6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d103      	bne.n	8009c80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	1e5a      	subs	r2, r3, #1
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009cca:	f002 fc83 	bl	800c5d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd6:	68f9      	ldr	r1, [r7, #12]
 8009cd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cda:	fb01 f303 	mul.w	r3, r1, r3
 8009cde:	441a      	add	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	68f9      	ldr	r1, [r7, #12]
 8009cfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d00:	fb01 f303 	mul.w	r3, r1, r3
 8009d04:	441a      	add	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	22ff      	movs	r2, #255	; 0xff
 8009d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	22ff      	movs	r2, #255	; 0xff
 8009d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d114      	bne.n	8009d4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01a      	beq.n	8009d5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3310      	adds	r3, #16
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f001 fc37 	bl	800b5a0 <xTaskRemoveFromEventList>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d012      	beq.n	8009d5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d38:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <xQueueGenericReset+0xcc>)
 8009d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	e009      	b.n	8009d5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3310      	adds	r3, #16
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff fef2 	bl	8009b38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3324      	adds	r3, #36	; 0x24
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff feed 	bl	8009b38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d5e:	f002 fc69 	bl	800c634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d62:	2301      	movs	r3, #1
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08e      	sub	sp, #56	; 0x38
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <xQueueGenericCreateStatic+0x52>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <xQueueGenericCreateStatic+0x56>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <xQueueGenericCreateStatic+0x58>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10a      	bne.n	8009de2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	623b      	str	r3, [r7, #32]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <xQueueGenericCreateStatic+0x7e>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <xQueueGenericCreateStatic+0x82>
 8009dee:	2301      	movs	r3, #1
 8009df0:	e000      	b.n	8009df4 <xQueueGenericCreateStatic+0x84>
 8009df2:	2300      	movs	r3, #0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	61fb      	str	r3, [r7, #28]
}
 8009e0a:	bf00      	nop
 8009e0c:	e7fe      	b.n	8009e0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e0e:	2350      	movs	r3, #80	; 0x50
 8009e10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b50      	cmp	r3, #80	; 0x50
 8009e16:	d00a      	beq.n	8009e2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	61bb      	str	r3, [r7, #24]
}
 8009e2a:	bf00      	nop
 8009e2c:	e7fe      	b.n	8009e2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00d      	beq.n	8009e56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f83f 	bl	8009ed4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3730      	adds	r7, #48	; 0x30
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08a      	sub	sp, #40	; 0x28
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	613b      	str	r3, [r7, #16]
}
 8009e86:	bf00      	nop
 8009e88:	e7fe      	b.n	8009e88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	fb02 f303 	mul.w	r3, r2, r3
 8009e92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	3350      	adds	r3, #80	; 0x50
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f002 fcbd 	bl	800c818 <pvPortMalloc>
 8009e9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d011      	beq.n	8009eca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	3350      	adds	r3, #80	; 0x50
 8009eae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009eb8:	79fa      	ldrb	r2, [r7, #7]
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	68b9      	ldr	r1, [r7, #8]
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 f805 	bl	8009ed4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009eca:	69bb      	ldr	r3, [r7, #24]
	}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3720      	adds	r7, #32
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d103      	bne.n	8009ef0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	69ba      	ldr	r2, [r7, #24]
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e002      	b.n	8009ef6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f02:	2101      	movs	r1, #1
 8009f04:	69b8      	ldr	r0, [r7, #24]
 8009f06:	f7ff fecb 	bl	8009ca0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b08a      	sub	sp, #40	; 0x28
 8009f1e:	af02      	add	r7, sp, #8
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	61bb      	str	r3, [r7, #24]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d90a      	bls.n	8009f60 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	617b      	str	r3, [r7, #20]
}
 8009f5c:	bf00      	nop
 8009f5e:	e7fe      	b.n	8009f5e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f60:	2302      	movs	r3, #2
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff ff00 	bl	8009d70 <xQueueGenericCreateStatic>
 8009f70:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f7e:	69fb      	ldr	r3, [r7, #28]
	}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3720      	adds	r7, #32
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	613b      	str	r3, [r7, #16]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d90a      	bls.n	8009fcc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60fb      	str	r3, [r7, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009fcc:	2202      	movs	r2, #2
 8009fce:	2100      	movs	r1, #0
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff ff45 	bl	8009e60 <xQueueGenericCreate>
 8009fd6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fe4:	697b      	ldr	r3, [r7, #20]
	}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ffe:	2300      	movs	r3, #0
 800a000:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xQueueGenericSend+0x32>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <xQueueGenericSend+0x40>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <xQueueGenericSend+0x44>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <xQueueGenericSend+0x46>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <xQueueGenericSend+0x60>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d103      	bne.n	800a05e <xQueueGenericSend+0x6e>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <xQueueGenericSend+0x72>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <xQueueGenericSend+0x74>
 800a062:	2300      	movs	r3, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueGenericSend+0x8e>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	623b      	str	r3, [r7, #32]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a07e:	f001 fc4d 	bl	800b91c <xTaskGetSchedulerState>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <xQueueGenericSend+0x9e>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <xQueueGenericSend+0xa2>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <xQueueGenericSend+0xa4>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueGenericSend+0xbe>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	61fb      	str	r3, [r7, #28]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0ae:	f002 fa91 	bl	800c5d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <xQueueGenericSend+0xd4>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d129      	bne.n	800a118 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ca:	f000 fc5e 	bl	800a98a <prvCopyDataToQueue>
 800a0ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d010      	beq.n	800a0fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 fa5f 	bl	800b5a0 <xTaskRemoveFromEventList>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d013      	beq.n	800a110 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0e8:	4b3f      	ldr	r3, [pc, #252]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	e00a      	b.n	800a110 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d007      	beq.n	800a110 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a100:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a110:	f002 fa90 	bl	800c634 <vPortExitCritical>
				return pdPASS;
 800a114:	2301      	movs	r3, #1
 800a116:	e063      	b.n	800a1e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d103      	bne.n	800a126 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a11e:	f002 fa89 	bl	800c634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a122:	2300      	movs	r3, #0
 800a124:	e05c      	b.n	800a1e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	4618      	mov	r0, r3
 800a132:	f001 fa99 	bl	800b668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a136:	2301      	movs	r3, #1
 800a138:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a13a:	f002 fa7b 	bl	800c634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a13e:	f000 fff9 	bl	800b134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a142:	f002 fa47 	bl	800c5d4 <vPortEnterCritical>
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a14c:	b25b      	sxtb	r3, r3
 800a14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a152:	d103      	bne.n	800a15c <xQueueGenericSend+0x16c>
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a162:	b25b      	sxtb	r3, r3
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d103      	bne.n	800a172 <xQueueGenericSend+0x182>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a172:	f002 fa5f 	bl	800c634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a176:	1d3a      	adds	r2, r7, #4
 800a178:	f107 0314 	add.w	r3, r7, #20
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 fa88 	bl	800b694 <xTaskCheckForTimeOut>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d124      	bne.n	800a1d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18c:	f000 fcf5 	bl	800ab7a <prvIsQueueFull>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d018      	beq.n	800a1c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	3310      	adds	r3, #16
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	4611      	mov	r1, r2
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f001 f9ae 	bl	800b500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a6:	f000 fc80 	bl	800aaaa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1aa:	f000 ffd1 	bl	800b150 <xTaskResumeAll>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f47f af7c 	bne.w	800a0ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a1b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	e772      	b.n	800a0ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ca:	f000 fc6e 	bl	800aaaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ce:	f000 ffbf 	bl	800b150 <xTaskResumeAll>
 800a1d2:	e76c      	b.n	800a0ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d6:	f000 fc68 	bl	800aaaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1da:	f000 ffb9 	bl	800b150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3738      	adds	r7, #56	; 0x38
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	e000ed04 	.word	0xe000ed04

0800a1ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b090      	sub	sp, #64	; 0x40
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a216:	bf00      	nop
 800a218:	e7fe      	b.n	800a218 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <xQueueGenericSendFromISR+0x3c>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <xQueueGenericSendFromISR+0x40>
 800a228:	2301      	movs	r3, #1
 800a22a:	e000      	b.n	800a22e <xQueueGenericSendFromISR+0x42>
 800a22c:	2300      	movs	r3, #0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d103      	bne.n	800a256 <xQueueGenericSendFromISR+0x6a>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a252:	2b01      	cmp	r3, #1
 800a254:	d101      	bne.n	800a25a <xQueueGenericSendFromISR+0x6e>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <xQueueGenericSendFromISR+0x70>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	623b      	str	r3, [r7, #32]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a276:	f002 fa8f 	bl	800c798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a27a:	f3ef 8211 	mrs	r2, BASEPRI
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	61fa      	str	r2, [r7, #28]
 800a290:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a292:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <xQueueGenericSendFromISR+0xbc>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d12f      	bne.n	800a308 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2be:	f000 fb64 	bl	800a98a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ca:	d112      	bne.n	800a2f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d016      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	3324      	adds	r3, #36	; 0x24
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 f961 	bl	800b5a0 <xTaskRemoveFromEventList>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00e      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	e007      	b.n	800a302 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	b25a      	sxtb	r2, r3
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a302:	2301      	movs	r3, #1
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a306:	e001      	b.n	800a30c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a316:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3740      	adds	r7, #64	; 0x40
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b08e      	sub	sp, #56	; 0x38
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	623b      	str	r3, [r7, #32]
}
 800a348:	bf00      	nop
 800a34a:	e7fe      	b.n	800a34a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00a      	beq.n	800a36a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	61fb      	str	r3, [r7, #28]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d103      	bne.n	800a37a <xQueueGiveFromISR+0x58>
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <xQueueGiveFromISR+0x5c>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <xQueueGiveFromISR+0x5e>
 800a37e:	2300      	movs	r3, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	61bb      	str	r3, [r7, #24]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a39a:	f002 f9fd 	bl	800c798 <vPortValidateInterruptPriority>
	__asm volatile
 800a39e:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	617a      	str	r2, [r7, #20]
 800a3b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a3b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d22b      	bcs.n	800a422 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	1c5a      	adds	r2, r3, #1
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e4:	d112      	bne.n	800a40c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d016      	beq.n	800a41c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	3324      	adds	r3, #36	; 0x24
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f001 f8d4 	bl	800b5a0 <xTaskRemoveFromEventList>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00e      	beq.n	800a41c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2201      	movs	r2, #1
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	e007      	b.n	800a41c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a410:	3301      	adds	r3, #1
 800a412:	b2db      	uxtb	r3, r3
 800a414:	b25a      	sxtb	r2, r3
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a41c:	2301      	movs	r3, #1
 800a41e:	637b      	str	r3, [r7, #52]	; 0x34
 800a420:	e001      	b.n	800a426 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a422:	2300      	movs	r3, #0
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f383 8811 	msr	BASEPRI, r3
}
 800a430:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a434:	4618      	mov	r0, r3
 800a436:	3738      	adds	r7, #56	; 0x38
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08c      	sub	sp, #48	; 0x30
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a448:	2300      	movs	r3, #0
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <xQueueReceive+0x30>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	623b      	str	r3, [r7, #32]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <xQueueReceive+0x3e>
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <xQueueReceive+0x42>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e000      	b.n	800a480 <xQueueReceive+0x44>
 800a47e:	2300      	movs	r3, #0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xQueueReceive+0x5e>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	61fb      	str	r3, [r7, #28]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a49a:	f001 fa3f 	bl	800b91c <xTaskGetSchedulerState>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <xQueueReceive+0x6e>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <xQueueReceive+0x72>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <xQueueReceive+0x74>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xQueueReceive+0x8e>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61bb      	str	r3, [r7, #24]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4ca:	f002 f883 	bl	800c5d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d01f      	beq.n	800a51a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4da:	68b9      	ldr	r1, [r7, #8]
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4de:	f000 fabe 	bl	800aa5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	1e5a      	subs	r2, r3, #1
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00f      	beq.n	800a512 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	3310      	adds	r3, #16
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f001 f852 	bl	800b5a0 <xTaskRemoveFromEventList>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d007      	beq.n	800a512 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a502:	4b3d      	ldr	r3, [pc, #244]	; (800a5f8 <xQueueReceive+0x1bc>)
 800a504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a512:	f002 f88f 	bl	800c634 <vPortExitCritical>
				return pdPASS;
 800a516:	2301      	movs	r3, #1
 800a518:	e069      	b.n	800a5ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a520:	f002 f888 	bl	800c634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a524:	2300      	movs	r3, #0
 800a526:	e062      	b.n	800a5ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4618      	mov	r0, r3
 800a534:	f001 f898 	bl	800b668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a538:	2301      	movs	r3, #1
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a53c:	f002 f87a 	bl	800c634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a540:	f000 fdf8 	bl	800b134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a544:	f002 f846 	bl	800c5d4 <vPortEnterCritical>
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d103      	bne.n	800a55e <xQueueReceive+0x122>
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a564:	b25b      	sxtb	r3, r3
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56a:	d103      	bne.n	800a574 <xQueueReceive+0x138>
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a574:	f002 f85e 	bl	800c634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a578:	1d3a      	adds	r2, r7, #4
 800a57a:	f107 0310 	add.w	r3, r7, #16
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f001 f887 	bl	800b694 <xTaskCheckForTimeOut>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d123      	bne.n	800a5d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58e:	f000 fade 	bl	800ab4e <prvIsQueueEmpty>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d017      	beq.n	800a5c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	3324      	adds	r3, #36	; 0x24
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 ffad 	bl	800b500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f000 fa7f 	bl	800aaaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5ac:	f000 fdd0 	bl	800b150 <xTaskResumeAll>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d189      	bne.n	800a4ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5b6:	4b10      	ldr	r3, [pc, #64]	; (800a5f8 <xQueueReceive+0x1bc>)
 800a5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	e780      	b.n	800a4ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ca:	f000 fa6e 	bl	800aaaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5ce:	f000 fdbf 	bl	800b150 <xTaskResumeAll>
 800a5d2:	e77a      	b.n	800a4ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d6:	f000 fa68 	bl	800aaaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5da:	f000 fdb9 	bl	800b150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e0:	f000 fab5 	bl	800ab4e <prvIsQueueEmpty>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f43f af6f 	beq.w	800a4ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3730      	adds	r7, #48	; 0x30
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08e      	sub	sp, #56	; 0x38
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a606:	2300      	movs	r3, #0
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a60e:	2300      	movs	r3, #0
 800a610:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10a      	bne.n	800a62e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	623b      	str	r3, [r7, #32]
}
 800a62a:	bf00      	nop
 800a62c:	e7fe      	b.n	800a62c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	61fb      	str	r3, [r7, #28]
}
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a64c:	f001 f966 	bl	800b91c <xTaskGetSchedulerState>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d102      	bne.n	800a65c <xQueueSemaphoreTake+0x60>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <xQueueSemaphoreTake+0x64>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <xQueueSemaphoreTake+0x66>
 800a660:	2300      	movs	r3, #0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10a      	bne.n	800a67c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	61bb      	str	r3, [r7, #24]
}
 800a678:	bf00      	nop
 800a67a:	e7fe      	b.n	800a67a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67c:	f001 ffaa 	bl	800c5d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d024      	beq.n	800a6d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d104      	bne.n	800a6a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a69c:	f001 fab4 	bl	800bc08 <pvTaskIncrementMutexHeldCount>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00f      	beq.n	800a6ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	3310      	adds	r3, #16
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 ff74 	bl	800b5a0 <xTaskRemoveFromEventList>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6be:	4b54      	ldr	r3, [pc, #336]	; (800a810 <xQueueSemaphoreTake+0x214>)
 800a6c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6ce:	f001 ffb1 	bl	800c634 <vPortExitCritical>
				return pdPASS;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e097      	b.n	800a806 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d111      	bne.n	800a700 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	617b      	str	r3, [r7, #20]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6f8:	f001 ff9c 	bl	800c634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e082      	b.n	800a806 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a706:	f107 030c 	add.w	r3, r7, #12
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 ffac 	bl	800b668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a710:	2301      	movs	r3, #1
 800a712:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a714:	f001 ff8e 	bl	800c634 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a718:	f000 fd0c 	bl	800b134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a71c:	f001 ff5a 	bl	800c5d4 <vPortEnterCritical>
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a726:	b25b      	sxtb	r3, r3
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d103      	bne.n	800a736 <xQueueSemaphoreTake+0x13a>
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a73c:	b25b      	sxtb	r3, r3
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d103      	bne.n	800a74c <xQueueSemaphoreTake+0x150>
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a74c:	f001 ff72 	bl	800c634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a750:	463a      	mov	r2, r7
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 ff9b 	bl	800b694 <xTaskCheckForTimeOut>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d132      	bne.n	800a7ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a766:	f000 f9f2 	bl	800ab4e <prvIsQueueEmpty>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d026      	beq.n	800a7be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d109      	bne.n	800a78c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a778:	f001 ff2c 	bl	800c5d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	4618      	mov	r0, r3
 800a782:	f001 f8e9 	bl	800b958 <xTaskPriorityInherit>
 800a786:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a788:	f001 ff54 	bl	800c634 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	4611      	mov	r1, r2
 800a794:	4618      	mov	r0, r3
 800a796:	f000 feb3 	bl	800b500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a79c:	f000 f985 	bl	800aaaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7a0:	f000 fcd6 	bl	800b150 <xTaskResumeAll>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f47f af68 	bne.w	800a67c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a7ac:	4b18      	ldr	r3, [pc, #96]	; (800a810 <xQueueSemaphoreTake+0x214>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	e75e      	b.n	800a67c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a7be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7c0:	f000 f973 	bl	800aaaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7c4:	f000 fcc4 	bl	800b150 <xTaskResumeAll>
 800a7c8:	e758      	b.n	800a67c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a7ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7cc:	f000 f96d 	bl	800aaaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7d0:	f000 fcbe 	bl	800b150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7d6:	f000 f9ba 	bl	800ab4e <prvIsQueueEmpty>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f43f af4d 	beq.w	800a67c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00d      	beq.n	800a804 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a7e8:	f001 fef4 	bl	800c5d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7ee:	f000 f8b4 	bl	800a95a <prvGetDisinheritPriorityAfterTimeout>
 800a7f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 f982 	bl	800bb04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a800:	f001 ff18 	bl	800c634 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a804:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a806:	4618      	mov	r0, r3
 800a808:	3738      	adds	r7, #56	; 0x38
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08e      	sub	sp, #56	; 0x38
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10a      	bne.n	800a840 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	623b      	str	r3, [r7, #32]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <xQueueReceiveFromISR+0x3a>
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <xQueueReceiveFromISR+0x3e>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <xQueueReceiveFromISR+0x40>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	61fb      	str	r3, [r7, #28]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a86e:	f001 ff93 	bl	800c798 <vPortValidateInterruptPriority>
	__asm volatile
 800a872:	f3ef 8211 	mrs	r2, BASEPRI
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	61ba      	str	r2, [r7, #24]
 800a888:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a88a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d02f      	beq.n	800a8fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8a8:	f000 f8d9 	bl	800aa5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	1e5a      	subs	r2, r3, #1
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a8b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d112      	bne.n	800a8e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d016      	beq.n	800a8f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fe68 	bl	800b5a0 <xTaskRemoveFromEventList>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00b      	beq.n	800a8f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	e007      	b.n	800a8f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	b25a      	sxtb	r2, r3
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8f8:	e001      	b.n	800a8fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f383 8811 	msr	BASEPRI, r3
}
 800a908:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3738      	adds	r7, #56	; 0x38
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10a      	bne.n	800a93c <vQueueDelete+0x28>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60bb      	str	r3, [r7, #8]
}
 800a938:	bf00      	nop
 800a93a:	e7fe      	b.n	800a93a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 f95f 	bl	800ac00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f002 f82f 	bl	800c9b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	2b00      	cmp	r3, #0
 800a968:	d006      	beq.n	800a978 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	e001      	b.n	800a97c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a97c:	68fb      	ldr	r3, [r7, #12]
	}
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10d      	bne.n	800a9c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d14d      	bne.n	800aa4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f001 f837 	bl	800ba28 <xTaskPriorityDisinherit>
 800a9ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	609a      	str	r2, [r3, #8]
 800a9c2:	e043      	b.n	800aa4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d119      	bne.n	800a9fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6858      	ldr	r0, [r3, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	68b9      	ldr	r1, [r7, #8]
 800a9d6:	f002 fc84 	bl	800d2e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e2:	441a      	add	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d32b      	bcc.n	800aa4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	605a      	str	r2, [r3, #4]
 800a9fc:	e026      	b.n	800aa4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	68d8      	ldr	r0, [r3, #12]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	461a      	mov	r2, r3
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	f002 fc6a 	bl	800d2e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	425b      	negs	r3, r3
 800aa18:	441a      	add	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d207      	bcs.n	800aa3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	425b      	negs	r3, r3
 800aa34:	441a      	add	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d105      	bne.n	800aa4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa54:	697b      	ldr	r3, [r7, #20]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d018      	beq.n	800aaa2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68da      	ldr	r2, [r3, #12]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa78:	441a      	add	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d303      	bcc.n	800aa92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68d9      	ldr	r1, [r3, #12]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6838      	ldr	r0, [r7, #0]
 800aa9e:	f002 fc20 	bl	800d2e2 <memcpy>
	}
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aab2:	f001 fd8f 	bl	800c5d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aabc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aabe:	e011      	b.n	800aae4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d012      	beq.n	800aaee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	3324      	adds	r3, #36	; 0x24
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fd67 	bl	800b5a0 <xTaskRemoveFromEventList>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aad8:	f000 fe3e 	bl	800b758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	3b01      	subs	r3, #1
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	dce9      	bgt.n	800aac0 <prvUnlockQueue+0x16>
 800aaec:	e000      	b.n	800aaf0 <prvUnlockQueue+0x46>
					break;
 800aaee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	22ff      	movs	r2, #255	; 0xff
 800aaf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aaf8:	f001 fd9c 	bl	800c634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aafc:	f001 fd6a 	bl	800c5d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab08:	e011      	b.n	800ab2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d012      	beq.n	800ab38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	3310      	adds	r3, #16
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 fd42 	bl	800b5a0 <xTaskRemoveFromEventList>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab22:	f000 fe19 	bl	800b758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dce9      	bgt.n	800ab0a <prvUnlockQueue+0x60>
 800ab36:	e000      	b.n	800ab3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	22ff      	movs	r2, #255	; 0xff
 800ab3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab42:	f001 fd77 	bl	800c634 <vPortExitCritical>
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab56:	f001 fd3d 	bl	800c5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab62:	2301      	movs	r3, #1
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	e001      	b.n	800ab6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab6c:	f001 fd62 	bl	800c634 <vPortExitCritical>

	return xReturn;
 800ab70:	68fb      	ldr	r3, [r7, #12]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab82:	f001 fd27 	bl	800c5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d102      	bne.n	800ab98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab92:	2301      	movs	r3, #1
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	e001      	b.n	800ab9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab9c:	f001 fd4a 	bl	800c634 <vPortExitCritical>

	return xReturn;
 800aba0:	68fb      	ldr	r3, [r7, #12]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
 800abba:	e014      	b.n	800abe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abbc:	4a0f      	ldr	r2, [pc, #60]	; (800abfc <vQueueAddToRegistry+0x50>)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10b      	bne.n	800abe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abc8:	490c      	ldr	r1, [pc, #48]	; (800abfc <vQueueAddToRegistry+0x50>)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800abd2:	4a0a      	ldr	r2, [pc, #40]	; (800abfc <vQueueAddToRegistry+0x50>)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	4413      	add	r3, r2
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800abde:	e006      	b.n	800abee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b07      	cmp	r3, #7
 800abea:	d9e7      	bls.n	800abbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20002a34 	.word	0x20002a34

0800ac00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	e016      	b.n	800ac3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ac0e:	4a10      	ldr	r2, [pc, #64]	; (800ac50 <vQueueUnregisterQueue+0x50>)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	4413      	add	r3, r2
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d10b      	bne.n	800ac36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ac1e:	4a0c      	ldr	r2, [pc, #48]	; (800ac50 <vQueueUnregisterQueue+0x50>)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2100      	movs	r1, #0
 800ac24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ac28:	4a09      	ldr	r2, [pc, #36]	; (800ac50 <vQueueUnregisterQueue+0x50>)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	00db      	lsls	r3, r3, #3
 800ac2e:	4413      	add	r3, r2
 800ac30:	2200      	movs	r2, #0
 800ac32:	605a      	str	r2, [r3, #4]
				break;
 800ac34:	e006      	b.n	800ac44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b07      	cmp	r3, #7
 800ac40:	d9e5      	bls.n	800ac0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	20002a34 	.word	0x20002a34

0800ac54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac64:	f001 fcb6 	bl	800c5d4 <vPortEnterCritical>
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac6e:	b25b      	sxtb	r3, r3
 800ac70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac74:	d103      	bne.n	800ac7e <vQueueWaitForMessageRestricted+0x2a>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac84:	b25b      	sxtb	r3, r3
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d103      	bne.n	800ac94 <vQueueWaitForMessageRestricted+0x40>
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac94:	f001 fcce 	bl	800c634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	3324      	adds	r3, #36	; 0x24
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fc4d 	bl	800b548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800acae:	6978      	ldr	r0, [r7, #20]
 800acb0:	f7ff fefb 	bl	800aaaa <prvUnlockQueue>
	}
 800acb4:	bf00      	nop
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08e      	sub	sp, #56	; 0x38
 800acc0:	af04      	add	r7, sp, #16
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800acca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10a      	bne.n	800ace6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	623b      	str	r3, [r7, #32]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <xTaskCreateStatic+0x46>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	61fb      	str	r3, [r7, #28]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad02:	235c      	movs	r3, #92	; 0x5c
 800ad04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b5c      	cmp	r3, #92	; 0x5c
 800ad0a:	d00a      	beq.n	800ad22 <xTaskCreateStatic+0x66>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	61bb      	str	r3, [r7, #24]
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d01e      	beq.n	800ad68 <xTaskCreateStatic+0xac>
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01b      	beq.n	800ad68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad42:	2300      	movs	r3, #0
 800ad44:	9303      	str	r3, [sp, #12]
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	9302      	str	r3, [sp, #8]
 800ad4a:	f107 0314 	add.w	r3, r7, #20
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 f850 	bl	800ae00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad62:	f000 f8dd 	bl	800af20 <prvAddNewTaskToReadyList>
 800ad66:	e001      	b.n	800ad6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad6c:	697b      	ldr	r3, [r7, #20]
	}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3728      	adds	r7, #40	; 0x28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b08c      	sub	sp, #48	; 0x30
 800ad7a:	af04      	add	r7, sp, #16
 800ad7c:	60f8      	str	r0, [r7, #12]
 800ad7e:	60b9      	str	r1, [r7, #8]
 800ad80:	603b      	str	r3, [r7, #0]
 800ad82:	4613      	mov	r3, r2
 800ad84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad86:	88fb      	ldrh	r3, [r7, #6]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 fd44 	bl	800c818 <pvPortMalloc>
 800ad90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00e      	beq.n	800adb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad98:	205c      	movs	r0, #92	; 0x5c
 800ad9a:	f001 fd3d 	bl	800c818 <pvPortMalloc>
 800ad9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	631a      	str	r2, [r3, #48]	; 0x30
 800adac:	e005      	b.n	800adba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800adae:	6978      	ldr	r0, [r7, #20]
 800adb0:	f001 fdfe 	bl	800c9b0 <vPortFree>
 800adb4:	e001      	b.n	800adba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d017      	beq.n	800adf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800adc8:	88fa      	ldrh	r2, [r7, #6]
 800adca:	2300      	movs	r3, #0
 800adcc:	9303      	str	r3, [sp, #12]
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	9302      	str	r3, [sp, #8]
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	9301      	str	r3, [sp, #4]
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68b9      	ldr	r1, [r7, #8]
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 f80e 	bl	800ae00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ade4:	69f8      	ldr	r0, [r7, #28]
 800ade6:	f000 f89b 	bl	800af20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adea:	2301      	movs	r3, #1
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	e002      	b.n	800adf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adf6:	69bb      	ldr	r3, [r7, #24]
	}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3720      	adds	r7, #32
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b088      	sub	sp, #32
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	461a      	mov	r2, r3
 800ae18:	21a5      	movs	r1, #165	; 0xa5
 800ae1a:	f002 f9d7 	bl	800d1cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	f023 0307 	bic.w	r3, r3, #7
 800ae36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	f003 0307 	and.w	r3, r3, #7
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	617b      	str	r3, [r7, #20]
}
 800ae54:	bf00      	nop
 800ae56:	e7fe      	b.n	800ae56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01f      	beq.n	800ae9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae5e:	2300      	movs	r3, #0
 800ae60:	61fb      	str	r3, [r7, #28]
 800ae62:	e012      	b.n	800ae8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	4413      	add	r3, r2
 800ae6a:	7819      	ldrb	r1, [r3, #0]
 800ae6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	4413      	add	r3, r2
 800ae72:	3334      	adds	r3, #52	; 0x34
 800ae74:	460a      	mov	r2, r1
 800ae76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d006      	beq.n	800ae92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	3301      	adds	r3, #1
 800ae88:	61fb      	str	r3, [r7, #28]
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	2b0f      	cmp	r3, #15
 800ae8e:	d9e9      	bls.n	800ae64 <prvInitialiseNewTask+0x64>
 800ae90:	e000      	b.n	800ae94 <prvInitialiseNewTask+0x94>
			{
				break;
 800ae92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae9c:	e003      	b.n	800aea6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	2b37      	cmp	r3, #55	; 0x37
 800aeaa:	d901      	bls.n	800aeb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aeac:	2337      	movs	r3, #55	; 0x37
 800aeae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebe:	2200      	movs	r2, #0
 800aec0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	3304      	adds	r3, #4
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fe56 	bl	8009b78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	3318      	adds	r3, #24
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fe fe51 	bl	8009b78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	2200      	movs	r2, #0
 800aef0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	68f9      	ldr	r1, [r7, #12]
 800aefe:	69b8      	ldr	r0, [r7, #24]
 800af00:	f001 fa38 	bl	800c374 <pxPortInitialiseStack>
 800af04:	4602      	mov	r2, r0
 800af06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af16:	bf00      	nop
 800af18:	3720      	adds	r7, #32
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af28:	f001 fb54 	bl	800c5d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af2c:	4b2d      	ldr	r3, [pc, #180]	; (800afe4 <prvAddNewTaskToReadyList+0xc4>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	4a2c      	ldr	r2, [pc, #176]	; (800afe4 <prvAddNewTaskToReadyList+0xc4>)
 800af34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af36:	4b2c      	ldr	r3, [pc, #176]	; (800afe8 <prvAddNewTaskToReadyList+0xc8>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d109      	bne.n	800af52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af3e:	4a2a      	ldr	r2, [pc, #168]	; (800afe8 <prvAddNewTaskToReadyList+0xc8>)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af44:	4b27      	ldr	r3, [pc, #156]	; (800afe4 <prvAddNewTaskToReadyList+0xc4>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d110      	bne.n	800af6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af4c:	f000 fc28 	bl	800b7a0 <prvInitialiseTaskLists>
 800af50:	e00d      	b.n	800af6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af52:	4b26      	ldr	r3, [pc, #152]	; (800afec <prvAddNewTaskToReadyList+0xcc>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d109      	bne.n	800af6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af5a:	4b23      	ldr	r3, [pc, #140]	; (800afe8 <prvAddNewTaskToReadyList+0xc8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	429a      	cmp	r2, r3
 800af66:	d802      	bhi.n	800af6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af68:	4a1f      	ldr	r2, [pc, #124]	; (800afe8 <prvAddNewTaskToReadyList+0xc8>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af6e:	4b20      	ldr	r3, [pc, #128]	; (800aff0 <prvAddNewTaskToReadyList+0xd0>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3301      	adds	r3, #1
 800af74:	4a1e      	ldr	r2, [pc, #120]	; (800aff0 <prvAddNewTaskToReadyList+0xd0>)
 800af76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af78:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <prvAddNewTaskToReadyList+0xd0>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	4b1b      	ldr	r3, [pc, #108]	; (800aff4 <prvAddNewTaskToReadyList+0xd4>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d903      	bls.n	800af94 <prvAddNewTaskToReadyList+0x74>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	4a18      	ldr	r2, [pc, #96]	; (800aff4 <prvAddNewTaskToReadyList+0xd4>)
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4a15      	ldr	r2, [pc, #84]	; (800aff8 <prvAddNewTaskToReadyList+0xd8>)
 800afa2:	441a      	add	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3304      	adds	r3, #4
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f7fe fdf1 	bl	8009b92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afb0:	f001 fb40 	bl	800c634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <prvAddNewTaskToReadyList+0xcc>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00e      	beq.n	800afda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afbc:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <prvAddNewTaskToReadyList+0xc8>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d207      	bcs.n	800afda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afca:	4b0c      	ldr	r3, [pc, #48]	; (800affc <prvAddNewTaskToReadyList+0xdc>)
 800afcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20002f48 	.word	0x20002f48
 800afe8:	20002a74 	.word	0x20002a74
 800afec:	20002f54 	.word	0x20002f54
 800aff0:	20002f64 	.word	0x20002f64
 800aff4:	20002f50 	.word	0x20002f50
 800aff8:	20002a78 	.word	0x20002a78
 800affc:	e000ed04 	.word	0xe000ed04

0800b000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d017      	beq.n	800b042 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b012:	4b13      	ldr	r3, [pc, #76]	; (800b060 <vTaskDelay+0x60>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <vTaskDelay+0x30>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	60bb      	str	r3, [r7, #8]
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b030:	f000 f880 	bl	800b134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b034:	2100      	movs	r1, #0
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fdfa 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b03c:	f000 f888 	bl	800b150 <xTaskResumeAll>
 800b040:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d107      	bne.n	800b058 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b048:	4b06      	ldr	r3, [pc, #24]	; (800b064 <vTaskDelay+0x64>)
 800b04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b058:	bf00      	nop
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20002f70 	.word	0x20002f70
 800b064:	e000ed04 	.word	0xe000ed04

0800b068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	; 0x28
 800b06c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b072:	2300      	movs	r3, #0
 800b074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b076:	463a      	mov	r2, r7
 800b078:	1d39      	adds	r1, r7, #4
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe fd26 	bl	8009ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	9202      	str	r2, [sp, #8]
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	2300      	movs	r3, #0
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	2300      	movs	r3, #0
 800b094:	460a      	mov	r2, r1
 800b096:	4921      	ldr	r1, [pc, #132]	; (800b11c <vTaskStartScheduler+0xb4>)
 800b098:	4821      	ldr	r0, [pc, #132]	; (800b120 <vTaskStartScheduler+0xb8>)
 800b09a:	f7ff fe0f 	bl	800acbc <xTaskCreateStatic>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	4a20      	ldr	r2, [pc, #128]	; (800b124 <vTaskStartScheduler+0xbc>)
 800b0a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0a4:	4b1f      	ldr	r3, [pc, #124]	; (800b124 <vTaskStartScheduler+0xbc>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e001      	b.n	800b0b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d102      	bne.n	800b0c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0bc:	f000 fe0c 	bl	800bcd8 <xTimerCreateTimerTask>
 800b0c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d116      	bne.n	800b0f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0cc:	f383 8811 	msr	BASEPRI, r3
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f3bf 8f4f 	dsb	sy
 800b0d8:	613b      	str	r3, [r7, #16]
}
 800b0da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0dc:	4b12      	ldr	r3, [pc, #72]	; (800b128 <vTaskStartScheduler+0xc0>)
 800b0de:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0e4:	4b11      	ldr	r3, [pc, #68]	; (800b12c <vTaskStartScheduler+0xc4>)
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0ea:	4b11      	ldr	r3, [pc, #68]	; (800b130 <vTaskStartScheduler+0xc8>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0f0:	f001 f9ce 	bl	800c490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0f4:	e00e      	b.n	800b114 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d10a      	bne.n	800b114 <vTaskStartScheduler+0xac>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	60fb      	str	r3, [r7, #12]
}
 800b110:	bf00      	nop
 800b112:	e7fe      	b.n	800b112 <vTaskStartScheduler+0xaa>
}
 800b114:	bf00      	nop
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	0800e4e0 	.word	0x0800e4e0
 800b120:	0800b771 	.word	0x0800b771
 800b124:	20002f6c 	.word	0x20002f6c
 800b128:	20002f68 	.word	0x20002f68
 800b12c:	20002f54 	.word	0x20002f54
 800b130:	20002f4c 	.word	0x20002f4c

0800b134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b134:	b480      	push	{r7}
 800b136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <vTaskSuspendAll+0x18>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3301      	adds	r3, #1
 800b13e:	4a03      	ldr	r2, [pc, #12]	; (800b14c <vTaskSuspendAll+0x18>)
 800b140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b142:	bf00      	nop
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	20002f70 	.word	0x20002f70

0800b150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b15e:	4b42      	ldr	r3, [pc, #264]	; (800b268 <xTaskResumeAll+0x118>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <xTaskResumeAll+0x2c>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	603b      	str	r3, [r7, #0]
}
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b17c:	f001 fa2a 	bl	800c5d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b180:	4b39      	ldr	r3, [pc, #228]	; (800b268 <xTaskResumeAll+0x118>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3b01      	subs	r3, #1
 800b186:	4a38      	ldr	r2, [pc, #224]	; (800b268 <xTaskResumeAll+0x118>)
 800b188:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b18a:	4b37      	ldr	r3, [pc, #220]	; (800b268 <xTaskResumeAll+0x118>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d162      	bne.n	800b258 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b192:	4b36      	ldr	r3, [pc, #216]	; (800b26c <xTaskResumeAll+0x11c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d05e      	beq.n	800b258 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b19a:	e02f      	b.n	800b1fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b19c:	4b34      	ldr	r3, [pc, #208]	; (800b270 <xTaskResumeAll+0x120>)
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3318      	adds	r3, #24
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fd4f 	bl	8009c4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fd4a 	bl	8009c4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1bc:	4b2d      	ldr	r3, [pc, #180]	; (800b274 <xTaskResumeAll+0x124>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d903      	bls.n	800b1cc <xTaskResumeAll+0x7c>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	4a2a      	ldr	r2, [pc, #168]	; (800b274 <xTaskResumeAll+0x124>)
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4a27      	ldr	r2, [pc, #156]	; (800b278 <xTaskResumeAll+0x128>)
 800b1da:	441a      	add	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	f7fe fcd5 	bl	8009b92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	4b23      	ldr	r3, [pc, #140]	; (800b27c <xTaskResumeAll+0x12c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d302      	bcc.n	800b1fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b1f6:	4b22      	ldr	r3, [pc, #136]	; (800b280 <xTaskResumeAll+0x130>)
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1fc:	4b1c      	ldr	r3, [pc, #112]	; (800b270 <xTaskResumeAll+0x120>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1cb      	bne.n	800b19c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b20a:	f000 fb67 	bl	800b8dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b20e:	4b1d      	ldr	r3, [pc, #116]	; (800b284 <xTaskResumeAll+0x134>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d010      	beq.n	800b23c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b21a:	f000 f859 	bl	800b2d0 <xTaskIncrementTick>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b224:	4b16      	ldr	r3, [pc, #88]	; (800b280 <xTaskResumeAll+0x130>)
 800b226:	2201      	movs	r2, #1
 800b228:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1f1      	bne.n	800b21a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b236:	4b13      	ldr	r3, [pc, #76]	; (800b284 <xTaskResumeAll+0x134>)
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b23c:	4b10      	ldr	r3, [pc, #64]	; (800b280 <xTaskResumeAll+0x130>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d009      	beq.n	800b258 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b244:	2301      	movs	r3, #1
 800b246:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b248:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <xTaskResumeAll+0x138>)
 800b24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b258:	f001 f9ec 	bl	800c634 <vPortExitCritical>

	return xAlreadyYielded;
 800b25c:	68bb      	ldr	r3, [r7, #8]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20002f70 	.word	0x20002f70
 800b26c:	20002f48 	.word	0x20002f48
 800b270:	20002f08 	.word	0x20002f08
 800b274:	20002f50 	.word	0x20002f50
 800b278:	20002a78 	.word	0x20002a78
 800b27c:	20002a74 	.word	0x20002a74
 800b280:	20002f5c 	.word	0x20002f5c
 800b284:	20002f58 	.word	0x20002f58
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b292:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <xTaskGetTickCount+0x1c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b298:	687b      	ldr	r3, [r7, #4]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	20002f4c 	.word	0x20002f4c

0800b2ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2b2:	f001 fa71 	bl	800c798 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b2ba:	4b04      	ldr	r3, [pc, #16]	; (800b2cc <xTaskGetTickCountFromISR+0x20>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2c0:	683b      	ldr	r3, [r7, #0]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20002f4c 	.word	0x20002f4c

0800b2d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2da:	4b4f      	ldr	r3, [pc, #316]	; (800b418 <xTaskIncrementTick+0x148>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f040 808f 	bne.w	800b402 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2e4:	4b4d      	ldr	r3, [pc, #308]	; (800b41c <xTaskIncrementTick+0x14c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2ec:	4a4b      	ldr	r2, [pc, #300]	; (800b41c <xTaskIncrementTick+0x14c>)
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d120      	bne.n	800b33a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2f8:	4b49      	ldr	r3, [pc, #292]	; (800b420 <xTaskIncrementTick+0x150>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <xTaskIncrementTick+0x48>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	603b      	str	r3, [r7, #0]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <xTaskIncrementTick+0x46>
 800b318:	4b41      	ldr	r3, [pc, #260]	; (800b420 <xTaskIncrementTick+0x150>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]
 800b31e:	4b41      	ldr	r3, [pc, #260]	; (800b424 <xTaskIncrementTick+0x154>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a3f      	ldr	r2, [pc, #252]	; (800b420 <xTaskIncrementTick+0x150>)
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	4a3f      	ldr	r2, [pc, #252]	; (800b424 <xTaskIncrementTick+0x154>)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	4b3e      	ldr	r3, [pc, #248]	; (800b428 <xTaskIncrementTick+0x158>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	4a3d      	ldr	r2, [pc, #244]	; (800b428 <xTaskIncrementTick+0x158>)
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	f000 fad1 	bl	800b8dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b33a:	4b3c      	ldr	r3, [pc, #240]	; (800b42c <xTaskIncrementTick+0x15c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	429a      	cmp	r2, r3
 800b342:	d349      	bcc.n	800b3d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b344:	4b36      	ldr	r3, [pc, #216]	; (800b420 <xTaskIncrementTick+0x150>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d104      	bne.n	800b358 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b34e:	4b37      	ldr	r3, [pc, #220]	; (800b42c <xTaskIncrementTick+0x15c>)
 800b350:	f04f 32ff 	mov.w	r2, #4294967295
 800b354:	601a      	str	r2, [r3, #0]
					break;
 800b356:	e03f      	b.n	800b3d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b358:	4b31      	ldr	r3, [pc, #196]	; (800b420 <xTaskIncrementTick+0x150>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d203      	bcs.n	800b378 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b370:	4a2e      	ldr	r2, [pc, #184]	; (800b42c <xTaskIncrementTick+0x15c>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b376:	e02f      	b.n	800b3d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	3304      	adds	r3, #4
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe fc65 	bl	8009c4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	2b00      	cmp	r3, #0
 800b388:	d004      	beq.n	800b394 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	3318      	adds	r3, #24
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fc5c 	bl	8009c4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b398:	4b25      	ldr	r3, [pc, #148]	; (800b430 <xTaskIncrementTick+0x160>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d903      	bls.n	800b3a8 <xTaskIncrementTick+0xd8>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	4a22      	ldr	r2, [pc, #136]	; (800b430 <xTaskIncrementTick+0x160>)
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4a1f      	ldr	r2, [pc, #124]	; (800b434 <xTaskIncrementTick+0x164>)
 800b3b6:	441a      	add	r2, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f7fe fbe7 	bl	8009b92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c8:	4b1b      	ldr	r3, [pc, #108]	; (800b438 <xTaskIncrementTick+0x168>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d3b8      	bcc.n	800b344 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3d6:	e7b5      	b.n	800b344 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3d8:	4b17      	ldr	r3, [pc, #92]	; (800b438 <xTaskIncrementTick+0x168>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	4915      	ldr	r1, [pc, #84]	; (800b434 <xTaskIncrementTick+0x164>)
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	440b      	add	r3, r1
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d901      	bls.n	800b3f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3f4:	4b11      	ldr	r3, [pc, #68]	; (800b43c <xTaskIncrementTick+0x16c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d007      	beq.n	800b40c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	617b      	str	r3, [r7, #20]
 800b400:	e004      	b.n	800b40c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b402:	4b0f      	ldr	r3, [pc, #60]	; (800b440 <xTaskIncrementTick+0x170>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	4a0d      	ldr	r2, [pc, #52]	; (800b440 <xTaskIncrementTick+0x170>)
 800b40a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b40c:	697b      	ldr	r3, [r7, #20]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20002f70 	.word	0x20002f70
 800b41c:	20002f4c 	.word	0x20002f4c
 800b420:	20002f00 	.word	0x20002f00
 800b424:	20002f04 	.word	0x20002f04
 800b428:	20002f60 	.word	0x20002f60
 800b42c:	20002f68 	.word	0x20002f68
 800b430:	20002f50 	.word	0x20002f50
 800b434:	20002a78 	.word	0x20002a78
 800b438:	20002a74 	.word	0x20002a74
 800b43c:	20002f5c 	.word	0x20002f5c
 800b440:	20002f58 	.word	0x20002f58

0800b444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b44a:	4b28      	ldr	r3, [pc, #160]	; (800b4ec <vTaskSwitchContext+0xa8>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b452:	4b27      	ldr	r3, [pc, #156]	; (800b4f0 <vTaskSwitchContext+0xac>)
 800b454:	2201      	movs	r2, #1
 800b456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b458:	e041      	b.n	800b4de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b45a:	4b25      	ldr	r3, [pc, #148]	; (800b4f0 <vTaskSwitchContext+0xac>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b460:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <vTaskSwitchContext+0xb0>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	60fb      	str	r3, [r7, #12]
 800b466:	e010      	b.n	800b48a <vTaskSwitchContext+0x46>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10a      	bne.n	800b484 <vTaskSwitchContext+0x40>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	607b      	str	r3, [r7, #4]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <vTaskSwitchContext+0x3e>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	3b01      	subs	r3, #1
 800b488:	60fb      	str	r3, [r7, #12]
 800b48a:	491b      	ldr	r1, [pc, #108]	; (800b4f8 <vTaskSwitchContext+0xb4>)
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4613      	mov	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	440b      	add	r3, r1
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d0e4      	beq.n	800b468 <vTaskSwitchContext+0x24>
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4a13      	ldr	r2, [pc, #76]	; (800b4f8 <vTaskSwitchContext+0xb4>)
 800b4aa:	4413      	add	r3, r2
 800b4ac:	60bb      	str	r3, [r7, #8]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	605a      	str	r2, [r3, #4]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	3308      	adds	r3, #8
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d104      	bne.n	800b4ce <vTaskSwitchContext+0x8a>
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	605a      	str	r2, [r3, #4]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	4a09      	ldr	r2, [pc, #36]	; (800b4fc <vTaskSwitchContext+0xb8>)
 800b4d6:	6013      	str	r3, [r2, #0]
 800b4d8:	4a06      	ldr	r2, [pc, #24]	; (800b4f4 <vTaskSwitchContext+0xb0>)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6013      	str	r3, [r2, #0]
}
 800b4de:	bf00      	nop
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	20002f70 	.word	0x20002f70
 800b4f0:	20002f5c 	.word	0x20002f5c
 800b4f4:	20002f50 	.word	0x20002f50
 800b4f8:	20002a78 	.word	0x20002a78
 800b4fc:	20002a74 	.word	0x20002a74

0800b500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	60fb      	str	r3, [r7, #12]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b526:	4b07      	ldr	r3, [pc, #28]	; (800b544 <vTaskPlaceOnEventList+0x44>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3318      	adds	r3, #24
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7fe fb53 	bl	8009bda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b534:	2101      	movs	r1, #1
 800b536:	6838      	ldr	r0, [r7, #0]
 800b538:	f000 fb7a 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
}
 800b53c:	bf00      	nop
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20002a74 	.word	0x20002a74

0800b548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	617b      	str	r3, [r7, #20]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b570:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <vTaskPlaceOnEventListRestricted+0x54>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3318      	adds	r3, #24
 800b576:	4619      	mov	r1, r3
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f7fe fb0a 	bl	8009b92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	68b8      	ldr	r0, [r7, #8]
 800b58e:	f000 fb4f 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
	}
 800b592:	bf00      	nop
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20002a74 	.word	0x20002a74

0800b5a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	60fb      	str	r3, [r7, #12]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	3318      	adds	r3, #24
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fb3b 	bl	8009c4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5d6:	4b1e      	ldr	r3, [pc, #120]	; (800b650 <xTaskRemoveFromEventList+0xb0>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d11d      	bne.n	800b61a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe fb32 	bl	8009c4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ec:	4b19      	ldr	r3, [pc, #100]	; (800b654 <xTaskRemoveFromEventList+0xb4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <xTaskRemoveFromEventList+0x5c>
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	4a16      	ldr	r2, [pc, #88]	; (800b654 <xTaskRemoveFromEventList+0xb4>)
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b600:	4613      	mov	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4a13      	ldr	r2, [pc, #76]	; (800b658 <xTaskRemoveFromEventList+0xb8>)
 800b60a:	441a      	add	r2, r3
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f7fe fabd 	bl	8009b92 <vListInsertEnd>
 800b618:	e005      	b.n	800b626 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	3318      	adds	r3, #24
 800b61e:	4619      	mov	r1, r3
 800b620:	480e      	ldr	r0, [pc, #56]	; (800b65c <xTaskRemoveFromEventList+0xbc>)
 800b622:	f7fe fab6 	bl	8009b92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62a:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <xTaskRemoveFromEventList+0xc0>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	429a      	cmp	r2, r3
 800b632:	d905      	bls.n	800b640 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b634:	2301      	movs	r3, #1
 800b636:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b638:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <xTaskRemoveFromEventList+0xc4>)
 800b63a:	2201      	movs	r2, #1
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	e001      	b.n	800b644 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b640:	2300      	movs	r3, #0
 800b642:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b644:	697b      	ldr	r3, [r7, #20]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20002f70 	.word	0x20002f70
 800b654:	20002f50 	.word	0x20002f50
 800b658:	20002a78 	.word	0x20002a78
 800b65c:	20002f08 	.word	0x20002f08
 800b660:	20002a74 	.word	0x20002a74
 800b664:	20002f5c 	.word	0x20002f5c

0800b668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <vTaskInternalSetTimeOutState+0x24>)
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <vTaskInternalSetTimeOutState+0x28>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	605a      	str	r2, [r3, #4]
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20002f60 	.word	0x20002f60
 800b690:	20002f4c 	.word	0x20002f4c

0800b694 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10a      	bne.n	800b6ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	613b      	str	r3, [r7, #16]
}
 800b6b6:	bf00      	nop
 800b6b8:	e7fe      	b.n	800b6b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10a      	bne.n	800b6d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	60fb      	str	r3, [r7, #12]
}
 800b6d2:	bf00      	nop
 800b6d4:	e7fe      	b.n	800b6d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b6d6:	f000 ff7d 	bl	800c5d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6da:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <xTaskCheckForTimeOut+0xbc>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f2:	d102      	bne.n	800b6fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	61fb      	str	r3, [r7, #28]
 800b6f8:	e023      	b.n	800b742 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	4b15      	ldr	r3, [pc, #84]	; (800b754 <xTaskCheckForTimeOut+0xc0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d007      	beq.n	800b716 <xTaskCheckForTimeOut+0x82>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d302      	bcc.n	800b716 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b710:	2301      	movs	r3, #1
 800b712:	61fb      	str	r3, [r7, #28]
 800b714:	e015      	b.n	800b742 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d20b      	bcs.n	800b738 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff ff9b 	bl	800b668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b732:	2300      	movs	r3, #0
 800b734:	61fb      	str	r3, [r7, #28]
 800b736:	e004      	b.n	800b742 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2200      	movs	r2, #0
 800b73c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b73e:	2301      	movs	r3, #1
 800b740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b742:	f000 ff77 	bl	800c634 <vPortExitCritical>

	return xReturn;
 800b746:	69fb      	ldr	r3, [r7, #28]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3720      	adds	r7, #32
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	20002f4c 	.word	0x20002f4c
 800b754:	20002f60 	.word	0x20002f60

0800b758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b758:	b480      	push	{r7}
 800b75a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b75c:	4b03      	ldr	r3, [pc, #12]	; (800b76c <vTaskMissedYield+0x14>)
 800b75e:	2201      	movs	r2, #1
 800b760:	601a      	str	r2, [r3, #0]
}
 800b762:	bf00      	nop
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	20002f5c 	.word	0x20002f5c

0800b770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b778:	f000 f852 	bl	800b820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b77c:	4b06      	ldr	r3, [pc, #24]	; (800b798 <prvIdleTask+0x28>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d9f9      	bls.n	800b778 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b784:	4b05      	ldr	r3, [pc, #20]	; (800b79c <prvIdleTask+0x2c>)
 800b786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b794:	e7f0      	b.n	800b778 <prvIdleTask+0x8>
 800b796:	bf00      	nop
 800b798:	20002a78 	.word	0x20002a78
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	607b      	str	r3, [r7, #4]
 800b7aa:	e00c      	b.n	800b7c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4a12      	ldr	r2, [pc, #72]	; (800b800 <prvInitialiseTaskLists+0x60>)
 800b7b8:	4413      	add	r3, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe f9bc 	bl	8009b38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	607b      	str	r3, [r7, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b37      	cmp	r3, #55	; 0x37
 800b7ca:	d9ef      	bls.n	800b7ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7cc:	480d      	ldr	r0, [pc, #52]	; (800b804 <prvInitialiseTaskLists+0x64>)
 800b7ce:	f7fe f9b3 	bl	8009b38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7d2:	480d      	ldr	r0, [pc, #52]	; (800b808 <prvInitialiseTaskLists+0x68>)
 800b7d4:	f7fe f9b0 	bl	8009b38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7d8:	480c      	ldr	r0, [pc, #48]	; (800b80c <prvInitialiseTaskLists+0x6c>)
 800b7da:	f7fe f9ad 	bl	8009b38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7de:	480c      	ldr	r0, [pc, #48]	; (800b810 <prvInitialiseTaskLists+0x70>)
 800b7e0:	f7fe f9aa 	bl	8009b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7e4:	480b      	ldr	r0, [pc, #44]	; (800b814 <prvInitialiseTaskLists+0x74>)
 800b7e6:	f7fe f9a7 	bl	8009b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7ea:	4b0b      	ldr	r3, [pc, #44]	; (800b818 <prvInitialiseTaskLists+0x78>)
 800b7ec:	4a05      	ldr	r2, [pc, #20]	; (800b804 <prvInitialiseTaskLists+0x64>)
 800b7ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	; (800b81c <prvInitialiseTaskLists+0x7c>)
 800b7f2:	4a05      	ldr	r2, [pc, #20]	; (800b808 <prvInitialiseTaskLists+0x68>)
 800b7f4:	601a      	str	r2, [r3, #0]
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	20002a78 	.word	0x20002a78
 800b804:	20002ed8 	.word	0x20002ed8
 800b808:	20002eec 	.word	0x20002eec
 800b80c:	20002f08 	.word	0x20002f08
 800b810:	20002f1c 	.word	0x20002f1c
 800b814:	20002f34 	.word	0x20002f34
 800b818:	20002f00 	.word	0x20002f00
 800b81c:	20002f04 	.word	0x20002f04

0800b820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b826:	e019      	b.n	800b85c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b828:	f000 fed4 	bl	800c5d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b82c:	4b10      	ldr	r3, [pc, #64]	; (800b870 <prvCheckTasksWaitingTermination+0x50>)
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3304      	adds	r3, #4
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe fa07 	bl	8009c4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b83e:	4b0d      	ldr	r3, [pc, #52]	; (800b874 <prvCheckTasksWaitingTermination+0x54>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3b01      	subs	r3, #1
 800b844:	4a0b      	ldr	r2, [pc, #44]	; (800b874 <prvCheckTasksWaitingTermination+0x54>)
 800b846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b848:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <prvCheckTasksWaitingTermination+0x58>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3b01      	subs	r3, #1
 800b84e:	4a0a      	ldr	r2, [pc, #40]	; (800b878 <prvCheckTasksWaitingTermination+0x58>)
 800b850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b852:	f000 feef 	bl	800c634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f810 	bl	800b87c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b85c:	4b06      	ldr	r3, [pc, #24]	; (800b878 <prvCheckTasksWaitingTermination+0x58>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e1      	bne.n	800b828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20002f1c 	.word	0x20002f1c
 800b874:	20002f48 	.word	0x20002f48
 800b878:	20002f30 	.word	0x20002f30

0800b87c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d108      	bne.n	800b8a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b892:	4618      	mov	r0, r3
 800b894:	f001 f88c 	bl	800c9b0 <vPortFree>
				vPortFree( pxTCB );
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f001 f889 	bl	800c9b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b89e:	e018      	b.n	800b8d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d103      	bne.n	800b8b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f001 f880 	bl	800c9b0 <vPortFree>
	}
 800b8b0:	e00f      	b.n	800b8d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d00a      	beq.n	800b8d2 <prvDeleteTCB+0x56>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	60fb      	str	r3, [r7, #12]
}
 800b8ce:	bf00      	nop
 800b8d0:	e7fe      	b.n	800b8d0 <prvDeleteTCB+0x54>
	}
 800b8d2:	bf00      	nop
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8e2:	4b0c      	ldr	r3, [pc, #48]	; (800b914 <prvResetNextTaskUnblockTime+0x38>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d104      	bne.n	800b8f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8ec:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <prvResetNextTaskUnblockTime+0x3c>)
 800b8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8f4:	e008      	b.n	800b908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f6:	4b07      	ldr	r3, [pc, #28]	; (800b914 <prvResetNextTaskUnblockTime+0x38>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	4a04      	ldr	r2, [pc, #16]	; (800b918 <prvResetNextTaskUnblockTime+0x3c>)
 800b906:	6013      	str	r3, [r2, #0]
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	20002f00 	.word	0x20002f00
 800b918:	20002f68 	.word	0x20002f68

0800b91c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b922:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <xTaskGetSchedulerState+0x34>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d102      	bne.n	800b930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b92a:	2301      	movs	r3, #1
 800b92c:	607b      	str	r3, [r7, #4]
 800b92e:	e008      	b.n	800b942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b930:	4b08      	ldr	r3, [pc, #32]	; (800b954 <xTaskGetSchedulerState+0x38>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b938:	2302      	movs	r3, #2
 800b93a:	607b      	str	r3, [r7, #4]
 800b93c:	e001      	b.n	800b942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b93e:	2300      	movs	r3, #0
 800b940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b942:	687b      	ldr	r3, [r7, #4]
	}
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr
 800b950:	20002f54 	.word	0x20002f54
 800b954:	20002f70 	.word	0x20002f70

0800b958 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b964:	2300      	movs	r3, #0
 800b966:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d051      	beq.n	800ba12 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b972:	4b2a      	ldr	r3, [pc, #168]	; (800ba1c <xTaskPriorityInherit+0xc4>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	429a      	cmp	r2, r3
 800b97a:	d241      	bcs.n	800ba00 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	db06      	blt.n	800b992 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b984:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <xTaskPriorityInherit+0xc4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	6959      	ldr	r1, [r3, #20]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99a:	4613      	mov	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ba20 <xTaskPriorityInherit+0xc8>)
 800b9a4:	4413      	add	r3, r2
 800b9a6:	4299      	cmp	r1, r3
 800b9a8:	d122      	bne.n	800b9f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe f94c 	bl	8009c4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9b4:	4b19      	ldr	r3, [pc, #100]	; (800ba1c <xTaskPriorityInherit+0xc4>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c2:	4b18      	ldr	r3, [pc, #96]	; (800ba24 <xTaskPriorityInherit+0xcc>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d903      	bls.n	800b9d2 <xTaskPriorityInherit+0x7a>
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ce:	4a15      	ldr	r2, [pc, #84]	; (800ba24 <xTaskPriorityInherit+0xcc>)
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4a10      	ldr	r2, [pc, #64]	; (800ba20 <xTaskPriorityInherit+0xc8>)
 800b9e0:	441a      	add	r2, r3
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	f7fe f8d2 	bl	8009b92 <vListInsertEnd>
 800b9ee:	e004      	b.n	800b9fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <xTaskPriorityInherit+0xc4>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	60fb      	str	r3, [r7, #12]
 800b9fe:	e008      	b.n	800ba12 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <xTaskPriorityInherit+0xc4>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d201      	bcs.n	800ba12 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba12:	68fb      	ldr	r3, [r7, #12]
	}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20002a74 	.word	0x20002a74
 800ba20:	20002a78 	.word	0x20002a78
 800ba24:	20002f50 	.word	0x20002f50

0800ba28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d056      	beq.n	800baec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba3e:	4b2e      	ldr	r3, [pc, #184]	; (800baf8 <xTaskPriorityDisinherit+0xd0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d00a      	beq.n	800ba5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	60fb      	str	r3, [r7, #12]
}
 800ba5a:	bf00      	nop
 800ba5c:	e7fe      	b.n	800ba5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	60bb      	str	r3, [r7, #8]
}
 800ba78:	bf00      	nop
 800ba7a:	e7fe      	b.n	800ba7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba80:	1e5a      	subs	r2, r3, #1
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d02c      	beq.n	800baec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d128      	bne.n	800baec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe f8d4 	bl	8009c4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800babc:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <xTaskPriorityDisinherit+0xd4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d903      	bls.n	800bacc <xTaskPriorityDisinherit+0xa4>
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac8:	4a0c      	ldr	r2, [pc, #48]	; (800bafc <xTaskPriorityDisinherit+0xd4>)
 800baca:	6013      	str	r3, [r2, #0]
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad0:	4613      	mov	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4a09      	ldr	r2, [pc, #36]	; (800bb00 <xTaskPriorityDisinherit+0xd8>)
 800bada:	441a      	add	r2, r3
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	3304      	adds	r3, #4
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f7fe f855 	bl	8009b92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bae8:	2301      	movs	r3, #1
 800baea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800baec:	697b      	ldr	r3, [r7, #20]
	}
 800baee:	4618      	mov	r0, r3
 800baf0:	3718      	adds	r7, #24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20002a74 	.word	0x20002a74
 800bafc:	20002f50 	.word	0x20002f50
 800bb00:	20002a78 	.word	0x20002a78

0800bb04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb12:	2301      	movs	r3, #1
 800bb14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d06a      	beq.n	800bbf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10a      	bne.n	800bb3a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	60fb      	str	r3, [r7, #12]
}
 800bb36:	bf00      	nop
 800bb38:	e7fe      	b.n	800bb38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d902      	bls.n	800bb4a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	61fb      	str	r3, [r7, #28]
 800bb48:	e002      	b.n	800bb50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d04b      	beq.n	800bbf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d146      	bne.n	800bbf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb64:	4b25      	ldr	r3, [pc, #148]	; (800bbfc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	69ba      	ldr	r2, [r7, #24]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d10a      	bne.n	800bb84 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	60bb      	str	r3, [r7, #8]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	69fa      	ldr	r2, [r7, #28]
 800bb8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	db04      	blt.n	800bba2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	6959      	ldr	r1, [r3, #20]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4a13      	ldr	r2, [pc, #76]	; (800bc00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bbb2:	4413      	add	r3, r2
 800bbb4:	4299      	cmp	r1, r3
 800bbb6:	d11c      	bne.n	800bbf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe f845 	bl	8009c4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc6:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d903      	bls.n	800bbd6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd2:	4a0c      	ldr	r2, [pc, #48]	; (800bc04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbda:	4613      	mov	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4a07      	ldr	r2, [pc, #28]	; (800bc00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bbe4:	441a      	add	r2, r3
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f7fd ffd0 	bl	8009b92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbf2:	bf00      	nop
 800bbf4:	3720      	adds	r7, #32
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20002a74 	.word	0x20002a74
 800bc00:	20002a78 	.word	0x20002a78
 800bc04:	20002f50 	.word	0x20002f50

0800bc08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc14:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc1a:	3201      	adds	r2, #1
 800bc1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bc1e:	4b03      	ldr	r3, [pc, #12]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc20:	681b      	ldr	r3, [r3, #0]
	}
 800bc22:	4618      	mov	r0, r3
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	20002a74 	.word	0x20002a74

0800bc30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc3a:	4b21      	ldr	r3, [pc, #132]	; (800bcc0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc40:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe f800 	bl	8009c4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc52:	d10a      	bne.n	800bc6a <prvAddCurrentTaskToDelayedList+0x3a>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d007      	beq.n	800bc6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc5a:	4b1a      	ldr	r3, [pc, #104]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	4619      	mov	r1, r3
 800bc62:	4819      	ldr	r0, [pc, #100]	; (800bcc8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc64:	f7fd ff95 	bl	8009b92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc68:	e026      	b.n	800bcb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4413      	add	r3, r2
 800bc70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc72:	4b14      	ldr	r3, [pc, #80]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d209      	bcs.n	800bc96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc82:	4b12      	ldr	r3, [pc, #72]	; (800bccc <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	4b0f      	ldr	r3, [pc, #60]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4610      	mov	r0, r2
 800bc90:	f7fd ffa3 	bl	8009bda <vListInsert>
}
 800bc94:	e010      	b.n	800bcb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc96:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fd ff99 	bl	8009bda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bca8:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d202      	bcs.n	800bcb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcb2:	4a08      	ldr	r2, [pc, #32]	; (800bcd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	6013      	str	r3, [r2, #0]
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20002f4c 	.word	0x20002f4c
 800bcc4:	20002a74 	.word	0x20002a74
 800bcc8:	20002f34 	.word	0x20002f34
 800bccc:	20002f04 	.word	0x20002f04
 800bcd0:	20002f00 	.word	0x20002f00
 800bcd4:	20002f68 	.word	0x20002f68

0800bcd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	; 0x28
 800bcdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bce2:	f000 fb07 	bl	800c2f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bce6:	4b1c      	ldr	r3, [pc, #112]	; (800bd58 <xTimerCreateTimerTask+0x80>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d021      	beq.n	800bd32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcf6:	1d3a      	adds	r2, r7, #4
 800bcf8:	f107 0108 	add.w	r1, r7, #8
 800bcfc:	f107 030c 	add.w	r3, r7, #12
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd feff 	bl	8009b04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd06:	6879      	ldr	r1, [r7, #4]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	9202      	str	r2, [sp, #8]
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	2302      	movs	r3, #2
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	2300      	movs	r3, #0
 800bd16:	460a      	mov	r2, r1
 800bd18:	4910      	ldr	r1, [pc, #64]	; (800bd5c <xTimerCreateTimerTask+0x84>)
 800bd1a:	4811      	ldr	r0, [pc, #68]	; (800bd60 <xTimerCreateTimerTask+0x88>)
 800bd1c:	f7fe ffce 	bl	800acbc <xTaskCreateStatic>
 800bd20:	4603      	mov	r3, r0
 800bd22:	4a10      	ldr	r2, [pc, #64]	; (800bd64 <xTimerCreateTimerTask+0x8c>)
 800bd24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd26:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <xTimerCreateTimerTask+0x8c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10a      	bne.n	800bd4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	613b      	str	r3, [r7, #16]
}
 800bd4a:	bf00      	nop
 800bd4c:	e7fe      	b.n	800bd4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd4e:	697b      	ldr	r3, [r7, #20]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20002fa4 	.word	0x20002fa4
 800bd5c:	0800e4e8 	.word	0x0800e4e8
 800bd60:	0800be9d 	.word	0x0800be9d
 800bd64:	20002fa8 	.word	0x20002fa8

0800bd68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08a      	sub	sp, #40	; 0x28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	623b      	str	r3, [r7, #32]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd96:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <xTimerGenericCommand+0x98>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d02a      	beq.n	800bdf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b05      	cmp	r3, #5
 800bdae:	dc18      	bgt.n	800bde2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdb0:	f7ff fdb4 	bl	800b91c <xTaskGetSchedulerState>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d109      	bne.n	800bdce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdba:	4b11      	ldr	r3, [pc, #68]	; (800be00 <xTimerGenericCommand+0x98>)
 800bdbc:	6818      	ldr	r0, [r3, #0]
 800bdbe:	f107 0110 	add.w	r1, r7, #16
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc6:	f7fe f913 	bl	8009ff0 <xQueueGenericSend>
 800bdca:	6278      	str	r0, [r7, #36]	; 0x24
 800bdcc:	e012      	b.n	800bdf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bdce:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <xTimerGenericCommand+0x98>)
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	f107 0110 	add.w	r1, r7, #16
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f7fe f909 	bl	8009ff0 <xQueueGenericSend>
 800bdde:	6278      	str	r0, [r7, #36]	; 0x24
 800bde0:	e008      	b.n	800bdf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bde2:	4b07      	ldr	r3, [pc, #28]	; (800be00 <xTimerGenericCommand+0x98>)
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f107 0110 	add.w	r1, r7, #16
 800bdea:	2300      	movs	r3, #0
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	f7fe f9fd 	bl	800a1ec <xQueueGenericSendFromISR>
 800bdf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3728      	adds	r7, #40	; 0x28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20002fa4 	.word	0x20002fa4

0800be04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b088      	sub	sp, #32
 800be08:	af02      	add	r7, sp, #8
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be0e:	4b22      	ldr	r3, [pc, #136]	; (800be98 <prvProcessExpiredTimer+0x94>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	3304      	adds	r3, #4
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fd ff15 	bl	8009c4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d022      	beq.n	800be76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	699a      	ldr	r2, [r3, #24]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	18d1      	adds	r1, r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	6978      	ldr	r0, [r7, #20]
 800be3e:	f000 f8d1 	bl	800bfe4 <prvInsertTimerInActiveList>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d01f      	beq.n	800be88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be48:	2300      	movs	r3, #0
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	2300      	movs	r3, #0
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	2100      	movs	r1, #0
 800be52:	6978      	ldr	r0, [r7, #20]
 800be54:	f7ff ff88 	bl	800bd68 <xTimerGenericCommand>
 800be58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d113      	bne.n	800be88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	60fb      	str	r3, [r7, #12]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be7c:	f023 0301 	bic.w	r3, r3, #1
 800be80:	b2da      	uxtb	r2, r3
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	6978      	ldr	r0, [r7, #20]
 800be8e:	4798      	blx	r3
}
 800be90:	bf00      	nop
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20002f9c 	.word	0x20002f9c

0800be9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bea4:	f107 0308 	add.w	r3, r7, #8
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 f857 	bl	800bf5c <prvGetNextExpireTime>
 800beae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4619      	mov	r1, r3
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 f803 	bl	800bec0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800beba:	f000 f8d5 	bl	800c068 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bebe:	e7f1      	b.n	800bea4 <prvTimerTask+0x8>

0800bec0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800beca:	f7ff f933 	bl	800b134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bece:	f107 0308 	add.w	r3, r7, #8
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 f866 	bl	800bfa4 <prvSampleTimeNow>
 800bed8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d130      	bne.n	800bf42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <prvProcessTimerOrBlockTask+0x3c>
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	429a      	cmp	r2, r3
 800beec:	d806      	bhi.n	800befc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800beee:	f7ff f92f 	bl	800b150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bef2:	68f9      	ldr	r1, [r7, #12]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff ff85 	bl	800be04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800befa:	e024      	b.n	800bf46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d008      	beq.n	800bf14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf02:	4b13      	ldr	r3, [pc, #76]	; (800bf50 <prvProcessTimerOrBlockTask+0x90>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <prvProcessTimerOrBlockTask+0x50>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e000      	b.n	800bf12 <prvProcessTimerOrBlockTask+0x52>
 800bf10:	2300      	movs	r3, #0
 800bf12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf14:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <prvProcessTimerOrBlockTask+0x94>)
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	4619      	mov	r1, r3
 800bf22:	f7fe fe97 	bl	800ac54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf26:	f7ff f913 	bl	800b150 <xTaskResumeAll>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10a      	bne.n	800bf46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf30:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <prvProcessTimerOrBlockTask+0x98>)
 800bf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	f3bf 8f6f 	isb	sy
}
 800bf40:	e001      	b.n	800bf46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf42:	f7ff f905 	bl	800b150 <xTaskResumeAll>
}
 800bf46:	bf00      	nop
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20002fa0 	.word	0x20002fa0
 800bf54:	20002fa4 	.word	0x20002fa4
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf64:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <prvGetNextExpireTime+0x44>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <prvGetNextExpireTime+0x16>
 800bf6e:	2201      	movs	r2, #1
 800bf70:	e000      	b.n	800bf74 <prvGetNextExpireTime+0x18>
 800bf72:	2200      	movs	r2, #0
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d105      	bne.n	800bf8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf80:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <prvGetNextExpireTime+0x44>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	e001      	b.n	800bf90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf90:	68fb      	ldr	r3, [r7, #12]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	20002f9c 	.word	0x20002f9c

0800bfa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfac:	f7ff f96e 	bl	800b28c <xTaskGetTickCount>
 800bfb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfb2:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <prvSampleTimeNow+0x3c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d205      	bcs.n	800bfc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfbc:	f000 f936 	bl	800c22c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	e002      	b.n	800bfce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfce:	4a04      	ldr	r2, [pc, #16]	; (800bfe0 <prvSampleTimeNow+0x3c>)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20002fac 	.word	0x20002fac

0800bfe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	429a      	cmp	r2, r3
 800c008:	d812      	bhi.n	800c030 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	429a      	cmp	r2, r3
 800c016:	d302      	bcc.n	800c01e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e01b      	b.n	800c056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c01e:	4b10      	ldr	r3, [pc, #64]	; (800c060 <prvInsertTimerInActiveList+0x7c>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fd fdd6 	bl	8009bda <vListInsert>
 800c02e:	e012      	b.n	800c056 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	429a      	cmp	r2, r3
 800c036:	d206      	bcs.n	800c046 <prvInsertTimerInActiveList+0x62>
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d302      	bcc.n	800c046 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c040:	2301      	movs	r3, #1
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	e007      	b.n	800c056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c046:	4b07      	ldr	r3, [pc, #28]	; (800c064 <prvInsertTimerInActiveList+0x80>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7fd fdc2 	bl	8009bda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c056:	697b      	ldr	r3, [r7, #20]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	20002fa0 	.word	0x20002fa0
 800c064:	20002f9c 	.word	0x20002f9c

0800c068 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08e      	sub	sp, #56	; 0x38
 800c06c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c06e:	e0ca      	b.n	800c206 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	da18      	bge.n	800c0a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c076:	1d3b      	adds	r3, r7, #4
 800c078:	3304      	adds	r3, #4
 800c07a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10a      	bne.n	800c098 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	61fb      	str	r3, [r7, #28]
}
 800c094:	bf00      	nop
 800c096:	e7fe      	b.n	800c096 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c09e:	6850      	ldr	r0, [r2, #4]
 800c0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0a2:	6892      	ldr	r2, [r2, #8]
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f2c0 80ab 	blt.w	800c206 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	3304      	adds	r3, #4
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fd fdc3 	bl	8009c4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff ff6b 	bl	800bfa4 <prvSampleTimeNow>
 800c0ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b09      	cmp	r3, #9
 800c0d4:	f200 8096 	bhi.w	800c204 <prvProcessReceivedCommands+0x19c>
 800c0d8:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <prvProcessReceivedCommands+0x78>)
 800c0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0de:	bf00      	nop
 800c0e0:	0800c109 	.word	0x0800c109
 800c0e4:	0800c109 	.word	0x0800c109
 800c0e8:	0800c109 	.word	0x0800c109
 800c0ec:	0800c17d 	.word	0x0800c17d
 800c0f0:	0800c191 	.word	0x0800c191
 800c0f4:	0800c1db 	.word	0x0800c1db
 800c0f8:	0800c109 	.word	0x0800c109
 800c0fc:	0800c109 	.word	0x0800c109
 800c100:	0800c17d 	.word	0x0800c17d
 800c104:	0800c191 	.word	0x0800c191
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c10e:	f043 0301 	orr.w	r3, r3, #1
 800c112:	b2da      	uxtb	r2, r3
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	18d1      	adds	r1, r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c128:	f7ff ff5c 	bl	800bfe4 <prvInsertTimerInActiveList>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d069      	beq.n	800c206 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c138:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c140:	f003 0304 	and.w	r3, r3, #4
 800c144:	2b00      	cmp	r3, #0
 800c146:	d05e      	beq.n	800c206 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	441a      	add	r2, r3
 800c150:	2300      	movs	r3, #0
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	2100      	movs	r1, #0
 800c158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c15a:	f7ff fe05 	bl	800bd68 <xTimerGenericCommand>
 800c15e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d14f      	bne.n	800c206 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	61bb      	str	r3, [r7, #24]
}
 800c178:	bf00      	nop
 800c17a:	e7fe      	b.n	800c17a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c182:	f023 0301 	bic.w	r3, r3, #1
 800c186:	b2da      	uxtb	r2, r3
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c18e:	e03a      	b.n	800c206 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c196:	f043 0301 	orr.w	r3, r3, #1
 800c19a:	b2da      	uxtb	r2, r3
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	617b      	str	r3, [r7, #20]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c8:	699a      	ldr	r2, [r3, #24]
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	18d1      	adds	r1, r2, r3
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1d4:	f7ff ff06 	bl	800bfe4 <prvInsertTimerInActiveList>
					break;
 800c1d8:	e015      	b.n	800c206 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1e0:	f003 0302 	and.w	r3, r3, #2
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d103      	bne.n	800c1f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ea:	f000 fbe1 	bl	800c9b0 <vPortFree>
 800c1ee:	e00a      	b.n	800c206 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1f6:	f023 0301 	bic.w	r3, r3, #1
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c202:	e000      	b.n	800c206 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c204:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c206:	4b08      	ldr	r3, [pc, #32]	; (800c228 <prvProcessReceivedCommands+0x1c0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	1d39      	adds	r1, r7, #4
 800c20c:	2200      	movs	r2, #0
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe f914 	bl	800a43c <xQueueReceive>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	f47f af2a 	bne.w	800c070 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	3730      	adds	r7, #48	; 0x30
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20002fa4 	.word	0x20002fa4

0800c22c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b088      	sub	sp, #32
 800c230:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c232:	e048      	b.n	800c2c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c234:	4b2d      	ldr	r3, [pc, #180]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c23e:	4b2b      	ldr	r3, [pc, #172]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fd fcfd 	bl	8009c4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c260:	f003 0304 	and.w	r3, r3, #4
 800c264:	2b00      	cmp	r3, #0
 800c266:	d02e      	beq.n	800c2c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	4413      	add	r3, r2
 800c270:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	429a      	cmp	r2, r3
 800c278:	d90e      	bls.n	800c298 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c286:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3304      	adds	r3, #4
 800c28e:	4619      	mov	r1, r3
 800c290:	4610      	mov	r0, r2
 800c292:	f7fd fca2 	bl	8009bda <vListInsert>
 800c296:	e016      	b.n	800c2c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c298:	2300      	movs	r3, #0
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	2300      	movs	r3, #0
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f7ff fd60 	bl	800bd68 <xTimerGenericCommand>
 800c2a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	603b      	str	r3, [r7, #0]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2c6:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1b1      	bne.n	800c234 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2d0:	4b06      	ldr	r3, [pc, #24]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2d6:	4b06      	ldr	r3, [pc, #24]	; (800c2f0 <prvSwitchTimerLists+0xc4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a04      	ldr	r2, [pc, #16]	; (800c2ec <prvSwitchTimerLists+0xc0>)
 800c2dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2de:	4a04      	ldr	r2, [pc, #16]	; (800c2f0 <prvSwitchTimerLists+0xc4>)
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	6013      	str	r3, [r2, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20002f9c 	.word	0x20002f9c
 800c2f0:	20002fa0 	.word	0x20002fa0

0800c2f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2fa:	f000 f96b 	bl	800c5d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2fe:	4b15      	ldr	r3, [pc, #84]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d120      	bne.n	800c348 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c306:	4814      	ldr	r0, [pc, #80]	; (800c358 <prvCheckForValidListAndQueue+0x64>)
 800c308:	f7fd fc16 	bl	8009b38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c30c:	4813      	ldr	r0, [pc, #76]	; (800c35c <prvCheckForValidListAndQueue+0x68>)
 800c30e:	f7fd fc13 	bl	8009b38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c312:	4b13      	ldr	r3, [pc, #76]	; (800c360 <prvCheckForValidListAndQueue+0x6c>)
 800c314:	4a10      	ldr	r2, [pc, #64]	; (800c358 <prvCheckForValidListAndQueue+0x64>)
 800c316:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c318:	4b12      	ldr	r3, [pc, #72]	; (800c364 <prvCheckForValidListAndQueue+0x70>)
 800c31a:	4a10      	ldr	r2, [pc, #64]	; (800c35c <prvCheckForValidListAndQueue+0x68>)
 800c31c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c31e:	2300      	movs	r3, #0
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	4b11      	ldr	r3, [pc, #68]	; (800c368 <prvCheckForValidListAndQueue+0x74>)
 800c324:	4a11      	ldr	r2, [pc, #68]	; (800c36c <prvCheckForValidListAndQueue+0x78>)
 800c326:	2110      	movs	r1, #16
 800c328:	200a      	movs	r0, #10
 800c32a:	f7fd fd21 	bl	8009d70 <xQueueGenericCreateStatic>
 800c32e:	4603      	mov	r3, r0
 800c330:	4a08      	ldr	r2, [pc, #32]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c332:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c334:	4b07      	ldr	r3, [pc, #28]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c33c:	4b05      	ldr	r3, [pc, #20]	; (800c354 <prvCheckForValidListAndQueue+0x60>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	490b      	ldr	r1, [pc, #44]	; (800c370 <prvCheckForValidListAndQueue+0x7c>)
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe fc32 	bl	800abac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c348:	f000 f974 	bl	800c634 <vPortExitCritical>
}
 800c34c:	bf00      	nop
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	20002fa4 	.word	0x20002fa4
 800c358:	20002f74 	.word	0x20002f74
 800c35c:	20002f88 	.word	0x20002f88
 800c360:	20002f9c 	.word	0x20002f9c
 800c364:	20002fa0 	.word	0x20002fa0
 800c368:	20003050 	.word	0x20003050
 800c36c:	20002fb0 	.word	0x20002fb0
 800c370:	0800e4f0 	.word	0x0800e4f0

0800c374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3b04      	subs	r3, #4
 800c384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b04      	subs	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	f023 0201 	bic.w	r2, r3, #1
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3b04      	subs	r3, #4
 800c3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3a4:	4a0c      	ldr	r2, [pc, #48]	; (800c3d8 <pxPortInitialiseStack+0x64>)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3b14      	subs	r3, #20
 800c3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3b04      	subs	r3, #4
 800c3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f06f 0202 	mvn.w	r2, #2
 800c3c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3b20      	subs	r3, #32
 800c3c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	0800c3dd 	.word	0x0800c3dd

0800c3dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3e6:	4b12      	ldr	r3, [pc, #72]	; (800c430 <prvTaskExitError+0x54>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ee:	d00a      	beq.n	800c406 <prvTaskExitError+0x2a>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	60fb      	str	r3, [r7, #12]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <prvTaskExitError+0x28>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60bb      	str	r3, [r7, #8]
}
 800c418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c41a:	bf00      	nop
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0fc      	beq.n	800c41c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	20000020 	.word	0x20000020
	...

0800c440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c440:	4b07      	ldr	r3, [pc, #28]	; (800c460 <pxCurrentTCBConst2>)
 800c442:	6819      	ldr	r1, [r3, #0]
 800c444:	6808      	ldr	r0, [r1, #0]
 800c446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44a:	f380 8809 	msr	PSP, r0
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8811 	msr	BASEPRI, r0
 800c45a:	4770      	bx	lr
 800c45c:	f3af 8000 	nop.w

0800c460 <pxCurrentTCBConst2>:
 800c460:	20002a74 	.word	0x20002a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c464:	bf00      	nop
 800c466:	bf00      	nop

0800c468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c468:	4808      	ldr	r0, [pc, #32]	; (800c48c <prvPortStartFirstTask+0x24>)
 800c46a:	6800      	ldr	r0, [r0, #0]
 800c46c:	6800      	ldr	r0, [r0, #0]
 800c46e:	f380 8808 	msr	MSP, r0
 800c472:	f04f 0000 	mov.w	r0, #0
 800c476:	f380 8814 	msr	CONTROL, r0
 800c47a:	b662      	cpsie	i
 800c47c:	b661      	cpsie	f
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	df00      	svc	0
 800c488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c48a:	bf00      	nop
 800c48c:	e000ed08 	.word	0xe000ed08

0800c490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c496:	4b46      	ldr	r3, [pc, #280]	; (800c5b0 <xPortStartScheduler+0x120>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a46      	ldr	r2, [pc, #280]	; (800c5b4 <xPortStartScheduler+0x124>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d10a      	bne.n	800c4b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	613b      	str	r3, [r7, #16]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4b6:	4b3e      	ldr	r3, [pc, #248]	; (800c5b0 <xPortStartScheduler+0x120>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a3f      	ldr	r2, [pc, #252]	; (800c5b8 <xPortStartScheduler+0x128>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d10a      	bne.n	800c4d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	60fb      	str	r3, [r7, #12]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4d6:	4b39      	ldr	r3, [pc, #228]	; (800c5bc <xPortStartScheduler+0x12c>)
 800c4d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	22ff      	movs	r2, #255	; 0xff
 800c4e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	4b31      	ldr	r3, [pc, #196]	; (800c5c0 <xPortStartScheduler+0x130>)
 800c4fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4fe:	4b31      	ldr	r3, [pc, #196]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c500:	2207      	movs	r2, #7
 800c502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c504:	e009      	b.n	800c51a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c506:	4b2f      	ldr	r3, [pc, #188]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3b01      	subs	r3, #1
 800c50c:	4a2d      	ldr	r2, [pc, #180]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c50e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	b2db      	uxtb	r3, r3
 800c518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c51a:	78fb      	ldrb	r3, [r7, #3]
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c522:	2b80      	cmp	r3, #128	; 0x80
 800c524:	d0ef      	beq.n	800c506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c526:	4b27      	ldr	r3, [pc, #156]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f1c3 0307 	rsb	r3, r3, #7
 800c52e:	2b04      	cmp	r3, #4
 800c530:	d00a      	beq.n	800c548 <xPortStartScheduler+0xb8>
	__asm volatile
 800c532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	60bb      	str	r3, [r7, #8]
}
 800c544:	bf00      	nop
 800c546:	e7fe      	b.n	800c546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c548:	4b1e      	ldr	r3, [pc, #120]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	021b      	lsls	r3, r3, #8
 800c54e:	4a1d      	ldr	r2, [pc, #116]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c552:	4b1c      	ldr	r3, [pc, #112]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c55a:	4a1a      	ldr	r2, [pc, #104]	; (800c5c4 <xPortStartScheduler+0x134>)
 800c55c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	b2da      	uxtb	r2, r3
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c566:	4b18      	ldr	r3, [pc, #96]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a17      	ldr	r2, [pc, #92]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c56c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c572:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a14      	ldr	r2, [pc, #80]	; (800c5c8 <xPortStartScheduler+0x138>)
 800c578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c57c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c57e:	f000 f8dd 	bl	800c73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c582:	4b12      	ldr	r3, [pc, #72]	; (800c5cc <xPortStartScheduler+0x13c>)
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c588:	f000 f8fc 	bl	800c784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c58c:	4b10      	ldr	r3, [pc, #64]	; (800c5d0 <xPortStartScheduler+0x140>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0f      	ldr	r2, [pc, #60]	; (800c5d0 <xPortStartScheduler+0x140>)
 800c592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c598:	f7ff ff66 	bl	800c468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c59c:	f7fe ff52 	bl	800b444 <vTaskSwitchContext>
	prvTaskExitError();
 800c5a0:	f7ff ff1c 	bl	800c3dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	e000ed00 	.word	0xe000ed00
 800c5b4:	410fc271 	.word	0x410fc271
 800c5b8:	410fc270 	.word	0x410fc270
 800c5bc:	e000e400 	.word	0xe000e400
 800c5c0:	200030a0 	.word	0x200030a0
 800c5c4:	200030a4 	.word	0x200030a4
 800c5c8:	e000ed20 	.word	0xe000ed20
 800c5cc:	20000020 	.word	0x20000020
 800c5d0:	e000ef34 	.word	0xe000ef34

0800c5d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	607b      	str	r3, [r7, #4]
}
 800c5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <vPortEnterCritical+0x58>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	4a0d      	ldr	r2, [pc, #52]	; (800c62c <vPortEnterCritical+0x58>)
 800c5f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5f8:	4b0c      	ldr	r3, [pc, #48]	; (800c62c <vPortEnterCritical+0x58>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d10f      	bne.n	800c620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c600:	4b0b      	ldr	r3, [pc, #44]	; (800c630 <vPortEnterCritical+0x5c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <vPortEnterCritical+0x4c>
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	603b      	str	r3, [r7, #0]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <vPortEnterCritical+0x4a>
	}
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	20000020 	.word	0x20000020
 800c630:	e000ed04 	.word	0xe000ed04

0800c634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c63a:	4b12      	ldr	r3, [pc, #72]	; (800c684 <vPortExitCritical+0x50>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10a      	bne.n	800c658 <vPortExitCritical+0x24>
	__asm volatile
 800c642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c646:	f383 8811 	msr	BASEPRI, r3
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	607b      	str	r3, [r7, #4]
}
 800c654:	bf00      	nop
 800c656:	e7fe      	b.n	800c656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c658:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <vPortExitCritical+0x50>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	4a09      	ldr	r2, [pc, #36]	; (800c684 <vPortExitCritical+0x50>)
 800c660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c662:	4b08      	ldr	r3, [pc, #32]	; (800c684 <vPortExitCritical+0x50>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d105      	bne.n	800c676 <vPortExitCritical+0x42>
 800c66a:	2300      	movs	r3, #0
 800c66c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	f383 8811 	msr	BASEPRI, r3
}
 800c674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c676:	bf00      	nop
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	20000020 	.word	0x20000020
	...

0800c690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c690:	f3ef 8009 	mrs	r0, PSP
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	4b15      	ldr	r3, [pc, #84]	; (800c6f0 <pxCurrentTCBConst>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	f01e 0f10 	tst.w	lr, #16
 800c6a0:	bf08      	it	eq
 800c6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6aa:	6010      	str	r0, [r2, #0]
 800c6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6b4:	f380 8811 	msr	BASEPRI, r0
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f7fe fec0 	bl	800b444 <vTaskSwitchContext>
 800c6c4:	f04f 0000 	mov.w	r0, #0
 800c6c8:	f380 8811 	msr	BASEPRI, r0
 800c6cc:	bc09      	pop	{r0, r3}
 800c6ce:	6819      	ldr	r1, [r3, #0]
 800c6d0:	6808      	ldr	r0, [r1, #0]
 800c6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d6:	f01e 0f10 	tst.w	lr, #16
 800c6da:	bf08      	it	eq
 800c6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6e0:	f380 8809 	msr	PSP, r0
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	f3af 8000 	nop.w

0800c6f0 <pxCurrentTCBConst>:
 800c6f0:	20002a74 	.word	0x20002a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop

0800c6f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	607b      	str	r3, [r7, #4]
}
 800c710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c712:	f7fe fddd 	bl	800b2d0 <xTaskIncrementTick>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <xPortSysTickHandler+0x40>)
 800c71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	2300      	movs	r3, #0
 800c726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f383 8811 	msr	BASEPRI, r3
}
 800c72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c730:	bf00      	nop
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	e000ed04 	.word	0xe000ed04

0800c73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c73c:	b480      	push	{r7}
 800c73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <vPortSetupTimerInterrupt+0x34>)
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c746:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <vPortSetupTimerInterrupt+0x38>)
 800c748:	2200      	movs	r2, #0
 800c74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <vPortSetupTimerInterrupt+0x3c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a0a      	ldr	r2, [pc, #40]	; (800c77c <vPortSetupTimerInterrupt+0x40>)
 800c752:	fba2 2303 	umull	r2, r3, r2, r3
 800c756:	099b      	lsrs	r3, r3, #6
 800c758:	4a09      	ldr	r2, [pc, #36]	; (800c780 <vPortSetupTimerInterrupt+0x44>)
 800c75a:	3b01      	subs	r3, #1
 800c75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c75e:	4b04      	ldr	r3, [pc, #16]	; (800c770 <vPortSetupTimerInterrupt+0x34>)
 800c760:	2207      	movs	r2, #7
 800c762:	601a      	str	r2, [r3, #0]
}
 800c764:	bf00      	nop
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	e000e010 	.word	0xe000e010
 800c774:	e000e018 	.word	0xe000e018
 800c778:	20000000 	.word	0x20000000
 800c77c:	10624dd3 	.word	0x10624dd3
 800c780:	e000e014 	.word	0xe000e014

0800c784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c794 <vPortEnableVFP+0x10>
 800c788:	6801      	ldr	r1, [r0, #0]
 800c78a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c78e:	6001      	str	r1, [r0, #0]
 800c790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c792:	bf00      	nop
 800c794:	e000ed88 	.word	0xe000ed88

0800c798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c79e:	f3ef 8305 	mrs	r3, IPSR
 800c7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b0f      	cmp	r3, #15
 800c7a8:	d914      	bls.n	800c7d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7aa:	4a17      	ldr	r2, [pc, #92]	; (800c808 <vPortValidateInterruptPriority+0x70>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7b4:	4b15      	ldr	r3, [pc, #84]	; (800c80c <vPortValidateInterruptPriority+0x74>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	7afa      	ldrb	r2, [r7, #11]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d20a      	bcs.n	800c7d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	607b      	str	r3, [r7, #4]
}
 800c7d0:	bf00      	nop
 800c7d2:	e7fe      	b.n	800c7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7d4:	4b0e      	ldr	r3, [pc, #56]	; (800c810 <vPortValidateInterruptPriority+0x78>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7dc:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <vPortValidateInterruptPriority+0x7c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d90a      	bls.n	800c7fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	603b      	str	r3, [r7, #0]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <vPortValidateInterruptPriority+0x60>
	}
 800c7fa:	bf00      	nop
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	e000e3f0 	.word	0xe000e3f0
 800c80c:	200030a0 	.word	0x200030a0
 800c810:	e000ed0c 	.word	0xe000ed0c
 800c814:	200030a4 	.word	0x200030a4

0800c818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08a      	sub	sp, #40	; 0x28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c820:	2300      	movs	r3, #0
 800c822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c824:	f7fe fc86 	bl	800b134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c828:	4b5b      	ldr	r3, [pc, #364]	; (800c998 <pvPortMalloc+0x180>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c830:	f000 f920 	bl	800ca74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c834:	4b59      	ldr	r3, [pc, #356]	; (800c99c <pvPortMalloc+0x184>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4013      	ands	r3, r2
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f040 8093 	bne.w	800c968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d01d      	beq.n	800c884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c848:	2208      	movs	r2, #8
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4413      	add	r3, r2
 800c84e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	2b00      	cmp	r3, #0
 800c858:	d014      	beq.n	800c884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f023 0307 	bic.w	r3, r3, #7
 800c860:	3308      	adds	r3, #8
 800c862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <pvPortMalloc+0x6c>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	617b      	str	r3, [r7, #20]
}
 800c880:	bf00      	nop
 800c882:	e7fe      	b.n	800c882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d06e      	beq.n	800c968 <pvPortMalloc+0x150>
 800c88a:	4b45      	ldr	r3, [pc, #276]	; (800c9a0 <pvPortMalloc+0x188>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	429a      	cmp	r2, r3
 800c892:	d869      	bhi.n	800c968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c894:	4b43      	ldr	r3, [pc, #268]	; (800c9a4 <pvPortMalloc+0x18c>)
 800c896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c898:	4b42      	ldr	r3, [pc, #264]	; (800c9a4 <pvPortMalloc+0x18c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c89e:	e004      	b.n	800c8aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d903      	bls.n	800c8bc <pvPortMalloc+0xa4>
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1f1      	bne.n	800c8a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8bc:	4b36      	ldr	r3, [pc, #216]	; (800c998 <pvPortMalloc+0x180>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d050      	beq.n	800c968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2208      	movs	r2, #8
 800c8cc:	4413      	add	r3, r2
 800c8ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	1ad2      	subs	r2, r2, r3
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	005b      	lsls	r3, r3, #1
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d91f      	bls.n	800c928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <pvPortMalloc+0xf8>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	613b      	str	r3, [r7, #16]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	1ad2      	subs	r2, r2, r3
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c922:	69b8      	ldr	r0, [r7, #24]
 800c924:	f000 f908 	bl	800cb38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c928:	4b1d      	ldr	r3, [pc, #116]	; (800c9a0 <pvPortMalloc+0x188>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	4a1b      	ldr	r2, [pc, #108]	; (800c9a0 <pvPortMalloc+0x188>)
 800c934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c936:	4b1a      	ldr	r3, [pc, #104]	; (800c9a0 <pvPortMalloc+0x188>)
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	4b1b      	ldr	r3, [pc, #108]	; (800c9a8 <pvPortMalloc+0x190>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d203      	bcs.n	800c94a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c942:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <pvPortMalloc+0x188>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a18      	ldr	r2, [pc, #96]	; (800c9a8 <pvPortMalloc+0x190>)
 800c948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	4b13      	ldr	r3, [pc, #76]	; (800c99c <pvPortMalloc+0x184>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	431a      	orrs	r2, r3
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	2200      	movs	r2, #0
 800c95c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c95e:	4b13      	ldr	r3, [pc, #76]	; (800c9ac <pvPortMalloc+0x194>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3301      	adds	r3, #1
 800c964:	4a11      	ldr	r2, [pc, #68]	; (800c9ac <pvPortMalloc+0x194>)
 800c966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c968:	f7fe fbf2 	bl	800b150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00a      	beq.n	800c98c <pvPortMalloc+0x174>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	e7fe      	b.n	800c98a <pvPortMalloc+0x172>
	return pvReturn;
 800c98c:	69fb      	ldr	r3, [r7, #28]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3728      	adds	r7, #40	; 0x28
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20006cb0 	.word	0x20006cb0
 800c99c:	20006cc4 	.word	0x20006cc4
 800c9a0:	20006cb4 	.word	0x20006cb4
 800c9a4:	20006ca8 	.word	0x20006ca8
 800c9a8:	20006cb8 	.word	0x20006cb8
 800c9ac:	20006cbc 	.word	0x20006cbc

0800c9b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d04d      	beq.n	800ca5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	425b      	negs	r3, r3
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <vPortFree+0xb8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4013      	ands	r3, r2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10a      	bne.n	800c9f4 <vPortFree+0x44>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	60fb      	str	r3, [r7, #12]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00a      	beq.n	800ca12 <vPortFree+0x62>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	60bb      	str	r3, [r7, #8]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	4b14      	ldr	r3, [pc, #80]	; (800ca68 <vPortFree+0xb8>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d01e      	beq.n	800ca5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d11a      	bne.n	800ca5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <vPortFree+0xb8>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	43db      	mvns	r3, r3
 800ca32:	401a      	ands	r2, r3
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca38:	f7fe fb7c 	bl	800b134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <vPortFree+0xbc>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4413      	add	r3, r2
 800ca46:	4a09      	ldr	r2, [pc, #36]	; (800ca6c <vPortFree+0xbc>)
 800ca48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca4a:	6938      	ldr	r0, [r7, #16]
 800ca4c:	f000 f874 	bl	800cb38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <vPortFree+0xc0>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	4a06      	ldr	r2, [pc, #24]	; (800ca70 <vPortFree+0xc0>)
 800ca58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca5a:	f7fe fb79 	bl	800b150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca5e:	bf00      	nop
 800ca60:	3718      	adds	r7, #24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	20006cc4 	.word	0x20006cc4
 800ca6c:	20006cb4 	.word	0x20006cb4
 800ca70:	20006cc0 	.word	0x20006cc0

0800ca74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca80:	4b27      	ldr	r3, [pc, #156]	; (800cb20 <prvHeapInit+0xac>)
 800ca82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00c      	beq.n	800caa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3307      	adds	r3, #7
 800ca92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f023 0307 	bic.w	r3, r3, #7
 800ca9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	4a1f      	ldr	r2, [pc, #124]	; (800cb20 <prvHeapInit+0xac>)
 800caa4:	4413      	add	r3, r2
 800caa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800caac:	4a1d      	ldr	r2, [pc, #116]	; (800cb24 <prvHeapInit+0xb0>)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cab2:	4b1c      	ldr	r3, [pc, #112]	; (800cb24 <prvHeapInit+0xb0>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	4413      	add	r3, r2
 800cabe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cac0:	2208      	movs	r2, #8
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	1a9b      	subs	r3, r3, r2
 800cac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f023 0307 	bic.w	r3, r3, #7
 800cace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4a15      	ldr	r2, [pc, #84]	; (800cb28 <prvHeapInit+0xb4>)
 800cad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cad6:	4b14      	ldr	r3, [pc, #80]	; (800cb28 <prvHeapInit+0xb4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2200      	movs	r2, #0
 800cadc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cade:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <prvHeapInit+0xb4>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	1ad2      	subs	r2, r2, r3
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800caf4:	4b0c      	ldr	r3, [pc, #48]	; (800cb28 <prvHeapInit+0xb4>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	4a0a      	ldr	r2, [pc, #40]	; (800cb2c <prvHeapInit+0xb8>)
 800cb02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	4a09      	ldr	r2, [pc, #36]	; (800cb30 <prvHeapInit+0xbc>)
 800cb0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb0c:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <prvHeapInit+0xc0>)
 800cb0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb12:	601a      	str	r2, [r3, #0]
}
 800cb14:	bf00      	nop
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr
 800cb20:	200030a8 	.word	0x200030a8
 800cb24:	20006ca8 	.word	0x20006ca8
 800cb28:	20006cb0 	.word	0x20006cb0
 800cb2c:	20006cb8 	.word	0x20006cb8
 800cb30:	20006cb4 	.word	0x20006cb4
 800cb34:	20006cc4 	.word	0x20006cc4

0800cb38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb40:	4b28      	ldr	r3, [pc, #160]	; (800cbe4 <prvInsertBlockIntoFreeList+0xac>)
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	e002      	b.n	800cb4c <prvInsertBlockIntoFreeList+0x14>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d8f7      	bhi.n	800cb46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	4413      	add	r3, r2
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d108      	bne.n	800cb7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	441a      	add	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	441a      	add	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d118      	bne.n	800cbc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d00d      	beq.n	800cbb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	441a      	add	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	601a      	str	r2, [r3, #0]
 800cbb4:	e008      	b.n	800cbc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbb6:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	e003      	b.n	800cbc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d002      	beq.n	800cbd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbd6:	bf00      	nop
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	20006ca8 	.word	0x20006ca8
 800cbe8:	20006cb0 	.word	0x20006cb0

0800cbec <malloc>:
 800cbec:	4b02      	ldr	r3, [pc, #8]	; (800cbf8 <malloc+0xc>)
 800cbee:	4601      	mov	r1, r0
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	f000 b823 	b.w	800cc3c <_malloc_r>
 800cbf6:	bf00      	nop
 800cbf8:	2000007c 	.word	0x2000007c

0800cbfc <sbrk_aligned>:
 800cbfc:	b570      	push	{r4, r5, r6, lr}
 800cbfe:	4e0e      	ldr	r6, [pc, #56]	; (800cc38 <sbrk_aligned+0x3c>)
 800cc00:	460c      	mov	r4, r1
 800cc02:	6831      	ldr	r1, [r6, #0]
 800cc04:	4605      	mov	r5, r0
 800cc06:	b911      	cbnz	r1, 800cc0e <sbrk_aligned+0x12>
 800cc08:	f000 fb1c 	bl	800d244 <_sbrk_r>
 800cc0c:	6030      	str	r0, [r6, #0]
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4628      	mov	r0, r5
 800cc12:	f000 fb17 	bl	800d244 <_sbrk_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d00a      	beq.n	800cc30 <sbrk_aligned+0x34>
 800cc1a:	1cc4      	adds	r4, r0, #3
 800cc1c:	f024 0403 	bic.w	r4, r4, #3
 800cc20:	42a0      	cmp	r0, r4
 800cc22:	d007      	beq.n	800cc34 <sbrk_aligned+0x38>
 800cc24:	1a21      	subs	r1, r4, r0
 800cc26:	4628      	mov	r0, r5
 800cc28:	f000 fb0c 	bl	800d244 <_sbrk_r>
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	d101      	bne.n	800cc34 <sbrk_aligned+0x38>
 800cc30:	f04f 34ff 	mov.w	r4, #4294967295
 800cc34:	4620      	mov	r0, r4
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
 800cc38:	20006ccc 	.word	0x20006ccc

0800cc3c <_malloc_r>:
 800cc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc40:	1ccd      	adds	r5, r1, #3
 800cc42:	f025 0503 	bic.w	r5, r5, #3
 800cc46:	3508      	adds	r5, #8
 800cc48:	2d0c      	cmp	r5, #12
 800cc4a:	bf38      	it	cc
 800cc4c:	250c      	movcc	r5, #12
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	4607      	mov	r7, r0
 800cc52:	db01      	blt.n	800cc58 <_malloc_r+0x1c>
 800cc54:	42a9      	cmp	r1, r5
 800cc56:	d905      	bls.n	800cc64 <_malloc_r+0x28>
 800cc58:	230c      	movs	r3, #12
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	2600      	movs	r6, #0
 800cc5e:	4630      	mov	r0, r6
 800cc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd38 <_malloc_r+0xfc>
 800cc68:	f000 f868 	bl	800cd3c <__malloc_lock>
 800cc6c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc70:	461c      	mov	r4, r3
 800cc72:	bb5c      	cbnz	r4, 800cccc <_malloc_r+0x90>
 800cc74:	4629      	mov	r1, r5
 800cc76:	4638      	mov	r0, r7
 800cc78:	f7ff ffc0 	bl	800cbfc <sbrk_aligned>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	4604      	mov	r4, r0
 800cc80:	d155      	bne.n	800cd2e <_malloc_r+0xf2>
 800cc82:	f8d8 4000 	ldr.w	r4, [r8]
 800cc86:	4626      	mov	r6, r4
 800cc88:	2e00      	cmp	r6, #0
 800cc8a:	d145      	bne.n	800cd18 <_malloc_r+0xdc>
 800cc8c:	2c00      	cmp	r4, #0
 800cc8e:	d048      	beq.n	800cd22 <_malloc_r+0xe6>
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	4631      	mov	r1, r6
 800cc94:	4638      	mov	r0, r7
 800cc96:	eb04 0903 	add.w	r9, r4, r3
 800cc9a:	f000 fad3 	bl	800d244 <_sbrk_r>
 800cc9e:	4581      	cmp	r9, r0
 800cca0:	d13f      	bne.n	800cd22 <_malloc_r+0xe6>
 800cca2:	6821      	ldr	r1, [r4, #0]
 800cca4:	1a6d      	subs	r5, r5, r1
 800cca6:	4629      	mov	r1, r5
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7ff ffa7 	bl	800cbfc <sbrk_aligned>
 800ccae:	3001      	adds	r0, #1
 800ccb0:	d037      	beq.n	800cd22 <_malloc_r+0xe6>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	442b      	add	r3, r5
 800ccb6:	6023      	str	r3, [r4, #0]
 800ccb8:	f8d8 3000 	ldr.w	r3, [r8]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d038      	beq.n	800cd32 <_malloc_r+0xf6>
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	42a2      	cmp	r2, r4
 800ccc4:	d12b      	bne.n	800cd1e <_malloc_r+0xe2>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	605a      	str	r2, [r3, #4]
 800ccca:	e00f      	b.n	800ccec <_malloc_r+0xb0>
 800cccc:	6822      	ldr	r2, [r4, #0]
 800ccce:	1b52      	subs	r2, r2, r5
 800ccd0:	d41f      	bmi.n	800cd12 <_malloc_r+0xd6>
 800ccd2:	2a0b      	cmp	r2, #11
 800ccd4:	d917      	bls.n	800cd06 <_malloc_r+0xca>
 800ccd6:	1961      	adds	r1, r4, r5
 800ccd8:	42a3      	cmp	r3, r4
 800ccda:	6025      	str	r5, [r4, #0]
 800ccdc:	bf18      	it	ne
 800ccde:	6059      	strne	r1, [r3, #4]
 800cce0:	6863      	ldr	r3, [r4, #4]
 800cce2:	bf08      	it	eq
 800cce4:	f8c8 1000 	streq.w	r1, [r8]
 800cce8:	5162      	str	r2, [r4, r5]
 800ccea:	604b      	str	r3, [r1, #4]
 800ccec:	4638      	mov	r0, r7
 800ccee:	f104 060b 	add.w	r6, r4, #11
 800ccf2:	f000 f829 	bl	800cd48 <__malloc_unlock>
 800ccf6:	f026 0607 	bic.w	r6, r6, #7
 800ccfa:	1d23      	adds	r3, r4, #4
 800ccfc:	1af2      	subs	r2, r6, r3
 800ccfe:	d0ae      	beq.n	800cc5e <_malloc_r+0x22>
 800cd00:	1b9b      	subs	r3, r3, r6
 800cd02:	50a3      	str	r3, [r4, r2]
 800cd04:	e7ab      	b.n	800cc5e <_malloc_r+0x22>
 800cd06:	42a3      	cmp	r3, r4
 800cd08:	6862      	ldr	r2, [r4, #4]
 800cd0a:	d1dd      	bne.n	800ccc8 <_malloc_r+0x8c>
 800cd0c:	f8c8 2000 	str.w	r2, [r8]
 800cd10:	e7ec      	b.n	800ccec <_malloc_r+0xb0>
 800cd12:	4623      	mov	r3, r4
 800cd14:	6864      	ldr	r4, [r4, #4]
 800cd16:	e7ac      	b.n	800cc72 <_malloc_r+0x36>
 800cd18:	4634      	mov	r4, r6
 800cd1a:	6876      	ldr	r6, [r6, #4]
 800cd1c:	e7b4      	b.n	800cc88 <_malloc_r+0x4c>
 800cd1e:	4613      	mov	r3, r2
 800cd20:	e7cc      	b.n	800ccbc <_malloc_r+0x80>
 800cd22:	230c      	movs	r3, #12
 800cd24:	603b      	str	r3, [r7, #0]
 800cd26:	4638      	mov	r0, r7
 800cd28:	f000 f80e 	bl	800cd48 <__malloc_unlock>
 800cd2c:	e797      	b.n	800cc5e <_malloc_r+0x22>
 800cd2e:	6025      	str	r5, [r4, #0]
 800cd30:	e7dc      	b.n	800ccec <_malloc_r+0xb0>
 800cd32:	605b      	str	r3, [r3, #4]
 800cd34:	deff      	udf	#255	; 0xff
 800cd36:	bf00      	nop
 800cd38:	20006cc8 	.word	0x20006cc8

0800cd3c <__malloc_lock>:
 800cd3c:	4801      	ldr	r0, [pc, #4]	; (800cd44 <__malloc_lock+0x8>)
 800cd3e:	f000 bace 	b.w	800d2de <__retarget_lock_acquire_recursive>
 800cd42:	bf00      	nop
 800cd44:	20006e10 	.word	0x20006e10

0800cd48 <__malloc_unlock>:
 800cd48:	4801      	ldr	r0, [pc, #4]	; (800cd50 <__malloc_unlock+0x8>)
 800cd4a:	f000 bac9 	b.w	800d2e0 <__retarget_lock_release_recursive>
 800cd4e:	bf00      	nop
 800cd50:	20006e10 	.word	0x20006e10

0800cd54 <std>:
 800cd54:	2300      	movs	r3, #0
 800cd56:	b510      	push	{r4, lr}
 800cd58:	4604      	mov	r4, r0
 800cd5a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd62:	6083      	str	r3, [r0, #8]
 800cd64:	8181      	strh	r1, [r0, #12]
 800cd66:	6643      	str	r3, [r0, #100]	; 0x64
 800cd68:	81c2      	strh	r2, [r0, #14]
 800cd6a:	6183      	str	r3, [r0, #24]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	2208      	movs	r2, #8
 800cd70:	305c      	adds	r0, #92	; 0x5c
 800cd72:	f000 fa2b 	bl	800d1cc <memset>
 800cd76:	4b0d      	ldr	r3, [pc, #52]	; (800cdac <std+0x58>)
 800cd78:	6263      	str	r3, [r4, #36]	; 0x24
 800cd7a:	4b0d      	ldr	r3, [pc, #52]	; (800cdb0 <std+0x5c>)
 800cd7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd7e:	4b0d      	ldr	r3, [pc, #52]	; (800cdb4 <std+0x60>)
 800cd80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd82:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <std+0x64>)
 800cd84:	6323      	str	r3, [r4, #48]	; 0x30
 800cd86:	4b0d      	ldr	r3, [pc, #52]	; (800cdbc <std+0x68>)
 800cd88:	6224      	str	r4, [r4, #32]
 800cd8a:	429c      	cmp	r4, r3
 800cd8c:	d006      	beq.n	800cd9c <std+0x48>
 800cd8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cd92:	4294      	cmp	r4, r2
 800cd94:	d002      	beq.n	800cd9c <std+0x48>
 800cd96:	33d0      	adds	r3, #208	; 0xd0
 800cd98:	429c      	cmp	r4, r3
 800cd9a:	d105      	bne.n	800cda8 <std+0x54>
 800cd9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda4:	f000 ba9a 	b.w	800d2dc <__retarget_lock_init_recursive>
 800cda8:	bd10      	pop	{r4, pc}
 800cdaa:	bf00      	nop
 800cdac:	0800d01d 	.word	0x0800d01d
 800cdb0:	0800d03f 	.word	0x0800d03f
 800cdb4:	0800d077 	.word	0x0800d077
 800cdb8:	0800d09b 	.word	0x0800d09b
 800cdbc:	20006cd0 	.word	0x20006cd0

0800cdc0 <stdio_exit_handler>:
 800cdc0:	4a02      	ldr	r2, [pc, #8]	; (800cdcc <stdio_exit_handler+0xc>)
 800cdc2:	4903      	ldr	r1, [pc, #12]	; (800cdd0 <stdio_exit_handler+0x10>)
 800cdc4:	4803      	ldr	r0, [pc, #12]	; (800cdd4 <stdio_exit_handler+0x14>)
 800cdc6:	f000 b869 	b.w	800ce9c <_fwalk_sglue>
 800cdca:	bf00      	nop
 800cdcc:	20000024 	.word	0x20000024
 800cdd0:	0800dcfd 	.word	0x0800dcfd
 800cdd4:	20000030 	.word	0x20000030

0800cdd8 <cleanup_stdio>:
 800cdd8:	6841      	ldr	r1, [r0, #4]
 800cdda:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <cleanup_stdio+0x34>)
 800cddc:	4299      	cmp	r1, r3
 800cdde:	b510      	push	{r4, lr}
 800cde0:	4604      	mov	r4, r0
 800cde2:	d001      	beq.n	800cde8 <cleanup_stdio+0x10>
 800cde4:	f000 ff8a 	bl	800dcfc <_fflush_r>
 800cde8:	68a1      	ldr	r1, [r4, #8]
 800cdea:	4b09      	ldr	r3, [pc, #36]	; (800ce10 <cleanup_stdio+0x38>)
 800cdec:	4299      	cmp	r1, r3
 800cdee:	d002      	beq.n	800cdf6 <cleanup_stdio+0x1e>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 ff83 	bl	800dcfc <_fflush_r>
 800cdf6:	68e1      	ldr	r1, [r4, #12]
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <cleanup_stdio+0x3c>)
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	d004      	beq.n	800ce08 <cleanup_stdio+0x30>
 800cdfe:	4620      	mov	r0, r4
 800ce00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce04:	f000 bf7a 	b.w	800dcfc <_fflush_r>
 800ce08:	bd10      	pop	{r4, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20006cd0 	.word	0x20006cd0
 800ce10:	20006d38 	.word	0x20006d38
 800ce14:	20006da0 	.word	0x20006da0

0800ce18 <global_stdio_init.part.0>:
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	4b0b      	ldr	r3, [pc, #44]	; (800ce48 <global_stdio_init.part.0+0x30>)
 800ce1c:	4c0b      	ldr	r4, [pc, #44]	; (800ce4c <global_stdio_init.part.0+0x34>)
 800ce1e:	4a0c      	ldr	r2, [pc, #48]	; (800ce50 <global_stdio_init.part.0+0x38>)
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	4620      	mov	r0, r4
 800ce24:	2200      	movs	r2, #0
 800ce26:	2104      	movs	r1, #4
 800ce28:	f7ff ff94 	bl	800cd54 <std>
 800ce2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ce30:	2201      	movs	r2, #1
 800ce32:	2109      	movs	r1, #9
 800ce34:	f7ff ff8e 	bl	800cd54 <std>
 800ce38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce42:	2112      	movs	r1, #18
 800ce44:	f7ff bf86 	b.w	800cd54 <std>
 800ce48:	20006e08 	.word	0x20006e08
 800ce4c:	20006cd0 	.word	0x20006cd0
 800ce50:	0800cdc1 	.word	0x0800cdc1

0800ce54 <__sfp_lock_acquire>:
 800ce54:	4801      	ldr	r0, [pc, #4]	; (800ce5c <__sfp_lock_acquire+0x8>)
 800ce56:	f000 ba42 	b.w	800d2de <__retarget_lock_acquire_recursive>
 800ce5a:	bf00      	nop
 800ce5c:	20006e11 	.word	0x20006e11

0800ce60 <__sfp_lock_release>:
 800ce60:	4801      	ldr	r0, [pc, #4]	; (800ce68 <__sfp_lock_release+0x8>)
 800ce62:	f000 ba3d 	b.w	800d2e0 <__retarget_lock_release_recursive>
 800ce66:	bf00      	nop
 800ce68:	20006e11 	.word	0x20006e11

0800ce6c <__sinit>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	4604      	mov	r4, r0
 800ce70:	f7ff fff0 	bl	800ce54 <__sfp_lock_acquire>
 800ce74:	6a23      	ldr	r3, [r4, #32]
 800ce76:	b11b      	cbz	r3, 800ce80 <__sinit+0x14>
 800ce78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce7c:	f7ff bff0 	b.w	800ce60 <__sfp_lock_release>
 800ce80:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <__sinit+0x28>)
 800ce82:	6223      	str	r3, [r4, #32]
 800ce84:	4b04      	ldr	r3, [pc, #16]	; (800ce98 <__sinit+0x2c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1f5      	bne.n	800ce78 <__sinit+0xc>
 800ce8c:	f7ff ffc4 	bl	800ce18 <global_stdio_init.part.0>
 800ce90:	e7f2      	b.n	800ce78 <__sinit+0xc>
 800ce92:	bf00      	nop
 800ce94:	0800cdd9 	.word	0x0800cdd9
 800ce98:	20006e08 	.word	0x20006e08

0800ce9c <_fwalk_sglue>:
 800ce9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea0:	4607      	mov	r7, r0
 800cea2:	4688      	mov	r8, r1
 800cea4:	4614      	mov	r4, r2
 800cea6:	2600      	movs	r6, #0
 800cea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ceac:	f1b9 0901 	subs.w	r9, r9, #1
 800ceb0:	d505      	bpl.n	800cebe <_fwalk_sglue+0x22>
 800ceb2:	6824      	ldr	r4, [r4, #0]
 800ceb4:	2c00      	cmp	r4, #0
 800ceb6:	d1f7      	bne.n	800cea8 <_fwalk_sglue+0xc>
 800ceb8:	4630      	mov	r0, r6
 800ceba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cebe:	89ab      	ldrh	r3, [r5, #12]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d907      	bls.n	800ced4 <_fwalk_sglue+0x38>
 800cec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cec8:	3301      	adds	r3, #1
 800ceca:	d003      	beq.n	800ced4 <_fwalk_sglue+0x38>
 800cecc:	4629      	mov	r1, r5
 800cece:	4638      	mov	r0, r7
 800ced0:	47c0      	blx	r8
 800ced2:	4306      	orrs	r6, r0
 800ced4:	3568      	adds	r5, #104	; 0x68
 800ced6:	e7e9      	b.n	800ceac <_fwalk_sglue+0x10>

0800ced8 <iprintf>:
 800ced8:	b40f      	push	{r0, r1, r2, r3}
 800ceda:	b507      	push	{r0, r1, r2, lr}
 800cedc:	4906      	ldr	r1, [pc, #24]	; (800cef8 <iprintf+0x20>)
 800cede:	ab04      	add	r3, sp, #16
 800cee0:	6808      	ldr	r0, [r1, #0]
 800cee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cee6:	6881      	ldr	r1, [r0, #8]
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	f000 fbd7 	bl	800d69c <_vfiprintf_r>
 800ceee:	b003      	add	sp, #12
 800cef0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cef4:	b004      	add	sp, #16
 800cef6:	4770      	bx	lr
 800cef8:	2000007c 	.word	0x2000007c

0800cefc <_puts_r>:
 800cefc:	6a03      	ldr	r3, [r0, #32]
 800cefe:	b570      	push	{r4, r5, r6, lr}
 800cf00:	6884      	ldr	r4, [r0, #8]
 800cf02:	4605      	mov	r5, r0
 800cf04:	460e      	mov	r6, r1
 800cf06:	b90b      	cbnz	r3, 800cf0c <_puts_r+0x10>
 800cf08:	f7ff ffb0 	bl	800ce6c <__sinit>
 800cf0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf0e:	07db      	lsls	r3, r3, #31
 800cf10:	d405      	bmi.n	800cf1e <_puts_r+0x22>
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	0598      	lsls	r0, r3, #22
 800cf16:	d402      	bmi.n	800cf1e <_puts_r+0x22>
 800cf18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1a:	f000 f9e0 	bl	800d2de <__retarget_lock_acquire_recursive>
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	0719      	lsls	r1, r3, #28
 800cf22:	d513      	bpl.n	800cf4c <_puts_r+0x50>
 800cf24:	6923      	ldr	r3, [r4, #16]
 800cf26:	b18b      	cbz	r3, 800cf4c <_puts_r+0x50>
 800cf28:	3e01      	subs	r6, #1
 800cf2a:	68a3      	ldr	r3, [r4, #8]
 800cf2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf30:	3b01      	subs	r3, #1
 800cf32:	60a3      	str	r3, [r4, #8]
 800cf34:	b9e9      	cbnz	r1, 800cf72 <_puts_r+0x76>
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	da2e      	bge.n	800cf98 <_puts_r+0x9c>
 800cf3a:	4622      	mov	r2, r4
 800cf3c:	210a      	movs	r1, #10
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f000 f8af 	bl	800d0a2 <__swbuf_r>
 800cf44:	3001      	adds	r0, #1
 800cf46:	d007      	beq.n	800cf58 <_puts_r+0x5c>
 800cf48:	250a      	movs	r5, #10
 800cf4a:	e007      	b.n	800cf5c <_puts_r+0x60>
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4628      	mov	r0, r5
 800cf50:	f000 f8e4 	bl	800d11c <__swsetup_r>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d0e7      	beq.n	800cf28 <_puts_r+0x2c>
 800cf58:	f04f 35ff 	mov.w	r5, #4294967295
 800cf5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf5e:	07da      	lsls	r2, r3, #31
 800cf60:	d405      	bmi.n	800cf6e <_puts_r+0x72>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	059b      	lsls	r3, r3, #22
 800cf66:	d402      	bmi.n	800cf6e <_puts_r+0x72>
 800cf68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6a:	f000 f9b9 	bl	800d2e0 <__retarget_lock_release_recursive>
 800cf6e:	4628      	mov	r0, r5
 800cf70:	bd70      	pop	{r4, r5, r6, pc}
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	da04      	bge.n	800cf80 <_puts_r+0x84>
 800cf76:	69a2      	ldr	r2, [r4, #24]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	dc06      	bgt.n	800cf8a <_puts_r+0x8e>
 800cf7c:	290a      	cmp	r1, #10
 800cf7e:	d004      	beq.n	800cf8a <_puts_r+0x8e>
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	6022      	str	r2, [r4, #0]
 800cf86:	7019      	strb	r1, [r3, #0]
 800cf88:	e7cf      	b.n	800cf2a <_puts_r+0x2e>
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f000 f888 	bl	800d0a2 <__swbuf_r>
 800cf92:	3001      	adds	r0, #1
 800cf94:	d1c9      	bne.n	800cf2a <_puts_r+0x2e>
 800cf96:	e7df      	b.n	800cf58 <_puts_r+0x5c>
 800cf98:	6823      	ldr	r3, [r4, #0]
 800cf9a:	250a      	movs	r5, #10
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	6022      	str	r2, [r4, #0]
 800cfa0:	701d      	strb	r5, [r3, #0]
 800cfa2:	e7db      	b.n	800cf5c <_puts_r+0x60>

0800cfa4 <puts>:
 800cfa4:	4b02      	ldr	r3, [pc, #8]	; (800cfb0 <puts+0xc>)
 800cfa6:	4601      	mov	r1, r0
 800cfa8:	6818      	ldr	r0, [r3, #0]
 800cfaa:	f7ff bfa7 	b.w	800cefc <_puts_r>
 800cfae:	bf00      	nop
 800cfb0:	2000007c 	.word	0x2000007c

0800cfb4 <sniprintf>:
 800cfb4:	b40c      	push	{r2, r3}
 800cfb6:	b530      	push	{r4, r5, lr}
 800cfb8:	4b17      	ldr	r3, [pc, #92]	; (800d018 <sniprintf+0x64>)
 800cfba:	1e0c      	subs	r4, r1, #0
 800cfbc:	681d      	ldr	r5, [r3, #0]
 800cfbe:	b09d      	sub	sp, #116	; 0x74
 800cfc0:	da08      	bge.n	800cfd4 <sniprintf+0x20>
 800cfc2:	238b      	movs	r3, #139	; 0x8b
 800cfc4:	602b      	str	r3, [r5, #0]
 800cfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfca:	b01d      	add	sp, #116	; 0x74
 800cfcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd0:	b002      	add	sp, #8
 800cfd2:	4770      	bx	lr
 800cfd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cfd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cfdc:	bf14      	ite	ne
 800cfde:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cfe2:	4623      	moveq	r3, r4
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	9307      	str	r3, [sp, #28]
 800cfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	9006      	str	r0, [sp, #24]
 800cff0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cff4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cff6:	ab21      	add	r3, sp, #132	; 0x84
 800cff8:	a902      	add	r1, sp, #8
 800cffa:	4628      	mov	r0, r5
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	f000 fa25 	bl	800d44c <_svfiprintf_r>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	bfbc      	itt	lt
 800d006:	238b      	movlt	r3, #139	; 0x8b
 800d008:	602b      	strlt	r3, [r5, #0]
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	d0dd      	beq.n	800cfca <sniprintf+0x16>
 800d00e:	9b02      	ldr	r3, [sp, #8]
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	e7d9      	b.n	800cfca <sniprintf+0x16>
 800d016:	bf00      	nop
 800d018:	2000007c 	.word	0x2000007c

0800d01c <__sread>:
 800d01c:	b510      	push	{r4, lr}
 800d01e:	460c      	mov	r4, r1
 800d020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d024:	f000 f8fc 	bl	800d220 <_read_r>
 800d028:	2800      	cmp	r0, #0
 800d02a:	bfab      	itete	ge
 800d02c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d02e:	89a3      	ldrhlt	r3, [r4, #12]
 800d030:	181b      	addge	r3, r3, r0
 800d032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d036:	bfac      	ite	ge
 800d038:	6563      	strge	r3, [r4, #84]	; 0x54
 800d03a:	81a3      	strhlt	r3, [r4, #12]
 800d03c:	bd10      	pop	{r4, pc}

0800d03e <__swrite>:
 800d03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	461f      	mov	r7, r3
 800d044:	898b      	ldrh	r3, [r1, #12]
 800d046:	05db      	lsls	r3, r3, #23
 800d048:	4605      	mov	r5, r0
 800d04a:	460c      	mov	r4, r1
 800d04c:	4616      	mov	r6, r2
 800d04e:	d505      	bpl.n	800d05c <__swrite+0x1e>
 800d050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d054:	2302      	movs	r3, #2
 800d056:	2200      	movs	r2, #0
 800d058:	f000 f8d0 	bl	800d1fc <_lseek_r>
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d066:	81a3      	strh	r3, [r4, #12]
 800d068:	4632      	mov	r2, r6
 800d06a:	463b      	mov	r3, r7
 800d06c:	4628      	mov	r0, r5
 800d06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d072:	f000 b8f7 	b.w	800d264 <_write_r>

0800d076 <__sseek>:
 800d076:	b510      	push	{r4, lr}
 800d078:	460c      	mov	r4, r1
 800d07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d07e:	f000 f8bd 	bl	800d1fc <_lseek_r>
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	bf15      	itete	ne
 800d088:	6560      	strne	r0, [r4, #84]	; 0x54
 800d08a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d08e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d092:	81a3      	strheq	r3, [r4, #12]
 800d094:	bf18      	it	ne
 800d096:	81a3      	strhne	r3, [r4, #12]
 800d098:	bd10      	pop	{r4, pc}

0800d09a <__sclose>:
 800d09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d09e:	f000 b89d 	b.w	800d1dc <_close_r>

0800d0a2 <__swbuf_r>:
 800d0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a4:	460e      	mov	r6, r1
 800d0a6:	4614      	mov	r4, r2
 800d0a8:	4605      	mov	r5, r0
 800d0aa:	b118      	cbz	r0, 800d0b4 <__swbuf_r+0x12>
 800d0ac:	6a03      	ldr	r3, [r0, #32]
 800d0ae:	b90b      	cbnz	r3, 800d0b4 <__swbuf_r+0x12>
 800d0b0:	f7ff fedc 	bl	800ce6c <__sinit>
 800d0b4:	69a3      	ldr	r3, [r4, #24]
 800d0b6:	60a3      	str	r3, [r4, #8]
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	071a      	lsls	r2, r3, #28
 800d0bc:	d525      	bpl.n	800d10a <__swbuf_r+0x68>
 800d0be:	6923      	ldr	r3, [r4, #16]
 800d0c0:	b31b      	cbz	r3, 800d10a <__swbuf_r+0x68>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	6922      	ldr	r2, [r4, #16]
 800d0c6:	1a98      	subs	r0, r3, r2
 800d0c8:	6963      	ldr	r3, [r4, #20]
 800d0ca:	b2f6      	uxtb	r6, r6
 800d0cc:	4283      	cmp	r3, r0
 800d0ce:	4637      	mov	r7, r6
 800d0d0:	dc04      	bgt.n	800d0dc <__swbuf_r+0x3a>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f000 fe11 	bl	800dcfc <_fflush_r>
 800d0da:	b9e0      	cbnz	r0, 800d116 <__swbuf_r+0x74>
 800d0dc:	68a3      	ldr	r3, [r4, #8]
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	60a3      	str	r3, [r4, #8]
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	6022      	str	r2, [r4, #0]
 800d0e8:	701e      	strb	r6, [r3, #0]
 800d0ea:	6962      	ldr	r2, [r4, #20]
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d004      	beq.n	800d0fc <__swbuf_r+0x5a>
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	07db      	lsls	r3, r3, #31
 800d0f6:	d506      	bpl.n	800d106 <__swbuf_r+0x64>
 800d0f8:	2e0a      	cmp	r6, #10
 800d0fa:	d104      	bne.n	800d106 <__swbuf_r+0x64>
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	4628      	mov	r0, r5
 800d100:	f000 fdfc 	bl	800dcfc <_fflush_r>
 800d104:	b938      	cbnz	r0, 800d116 <__swbuf_r+0x74>
 800d106:	4638      	mov	r0, r7
 800d108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d10a:	4621      	mov	r1, r4
 800d10c:	4628      	mov	r0, r5
 800d10e:	f000 f805 	bl	800d11c <__swsetup_r>
 800d112:	2800      	cmp	r0, #0
 800d114:	d0d5      	beq.n	800d0c2 <__swbuf_r+0x20>
 800d116:	f04f 37ff 	mov.w	r7, #4294967295
 800d11a:	e7f4      	b.n	800d106 <__swbuf_r+0x64>

0800d11c <__swsetup_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4b2a      	ldr	r3, [pc, #168]	; (800d1c8 <__swsetup_r+0xac>)
 800d120:	4605      	mov	r5, r0
 800d122:	6818      	ldr	r0, [r3, #0]
 800d124:	460c      	mov	r4, r1
 800d126:	b118      	cbz	r0, 800d130 <__swsetup_r+0x14>
 800d128:	6a03      	ldr	r3, [r0, #32]
 800d12a:	b90b      	cbnz	r3, 800d130 <__swsetup_r+0x14>
 800d12c:	f7ff fe9e 	bl	800ce6c <__sinit>
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d136:	0718      	lsls	r0, r3, #28
 800d138:	d422      	bmi.n	800d180 <__swsetup_r+0x64>
 800d13a:	06d9      	lsls	r1, r3, #27
 800d13c:	d407      	bmi.n	800d14e <__swsetup_r+0x32>
 800d13e:	2309      	movs	r3, #9
 800d140:	602b      	str	r3, [r5, #0]
 800d142:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	f04f 30ff 	mov.w	r0, #4294967295
 800d14c:	e034      	b.n	800d1b8 <__swsetup_r+0x9c>
 800d14e:	0758      	lsls	r0, r3, #29
 800d150:	d512      	bpl.n	800d178 <__swsetup_r+0x5c>
 800d152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d154:	b141      	cbz	r1, 800d168 <__swsetup_r+0x4c>
 800d156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d15a:	4299      	cmp	r1, r3
 800d15c:	d002      	beq.n	800d164 <__swsetup_r+0x48>
 800d15e:	4628      	mov	r0, r5
 800d160:	f000 f8ce 	bl	800d300 <_free_r>
 800d164:	2300      	movs	r3, #0
 800d166:	6363      	str	r3, [r4, #52]	; 0x34
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d16e:	81a3      	strh	r3, [r4, #12]
 800d170:	2300      	movs	r3, #0
 800d172:	6063      	str	r3, [r4, #4]
 800d174:	6923      	ldr	r3, [r4, #16]
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	f043 0308 	orr.w	r3, r3, #8
 800d17e:	81a3      	strh	r3, [r4, #12]
 800d180:	6923      	ldr	r3, [r4, #16]
 800d182:	b94b      	cbnz	r3, 800d198 <__swsetup_r+0x7c>
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d18e:	d003      	beq.n	800d198 <__swsetup_r+0x7c>
 800d190:	4621      	mov	r1, r4
 800d192:	4628      	mov	r0, r5
 800d194:	f000 fe00 	bl	800dd98 <__smakebuf_r>
 800d198:	89a0      	ldrh	r0, [r4, #12]
 800d19a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d19e:	f010 0301 	ands.w	r3, r0, #1
 800d1a2:	d00a      	beq.n	800d1ba <__swsetup_r+0x9e>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	60a3      	str	r3, [r4, #8]
 800d1a8:	6963      	ldr	r3, [r4, #20]
 800d1aa:	425b      	negs	r3, r3
 800d1ac:	61a3      	str	r3, [r4, #24]
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	b943      	cbnz	r3, 800d1c4 <__swsetup_r+0xa8>
 800d1b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1b6:	d1c4      	bne.n	800d142 <__swsetup_r+0x26>
 800d1b8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ba:	0781      	lsls	r1, r0, #30
 800d1bc:	bf58      	it	pl
 800d1be:	6963      	ldrpl	r3, [r4, #20]
 800d1c0:	60a3      	str	r3, [r4, #8]
 800d1c2:	e7f4      	b.n	800d1ae <__swsetup_r+0x92>
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	e7f7      	b.n	800d1b8 <__swsetup_r+0x9c>
 800d1c8:	2000007c 	.word	0x2000007c

0800d1cc <memset>:
 800d1cc:	4402      	add	r2, r0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d100      	bne.n	800d1d6 <memset+0xa>
 800d1d4:	4770      	bx	lr
 800d1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1da:	e7f9      	b.n	800d1d0 <memset+0x4>

0800d1dc <_close_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d06      	ldr	r5, [pc, #24]	; (800d1f8 <_close_r+0x1c>)
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	602b      	str	r3, [r5, #0]
 800d1e8:	f7f3 fc5d 	bl	8000aa6 <_close>
 800d1ec:	1c43      	adds	r3, r0, #1
 800d1ee:	d102      	bne.n	800d1f6 <_close_r+0x1a>
 800d1f0:	682b      	ldr	r3, [r5, #0]
 800d1f2:	b103      	cbz	r3, 800d1f6 <_close_r+0x1a>
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	20006e0c 	.word	0x20006e0c

0800d1fc <_lseek_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4d07      	ldr	r5, [pc, #28]	; (800d21c <_lseek_r+0x20>)
 800d200:	4604      	mov	r4, r0
 800d202:	4608      	mov	r0, r1
 800d204:	4611      	mov	r1, r2
 800d206:	2200      	movs	r2, #0
 800d208:	602a      	str	r2, [r5, #0]
 800d20a:	461a      	mov	r2, r3
 800d20c:	f7f3 fc72 	bl	8000af4 <_lseek>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d102      	bne.n	800d21a <_lseek_r+0x1e>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	b103      	cbz	r3, 800d21a <_lseek_r+0x1e>
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	20006e0c 	.word	0x20006e0c

0800d220 <_read_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4d07      	ldr	r5, [pc, #28]	; (800d240 <_read_r+0x20>)
 800d224:	4604      	mov	r4, r0
 800d226:	4608      	mov	r0, r1
 800d228:	4611      	mov	r1, r2
 800d22a:	2200      	movs	r2, #0
 800d22c:	602a      	str	r2, [r5, #0]
 800d22e:	461a      	mov	r2, r3
 800d230:	f7f3 fc1c 	bl	8000a6c <_read>
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	d102      	bne.n	800d23e <_read_r+0x1e>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	b103      	cbz	r3, 800d23e <_read_r+0x1e>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	20006e0c 	.word	0x20006e0c

0800d244 <_sbrk_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d06      	ldr	r5, [pc, #24]	; (800d260 <_sbrk_r+0x1c>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	602b      	str	r3, [r5, #0]
 800d250:	f7f3 fc5e 	bl	8000b10 <_sbrk>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_sbrk_r+0x1a>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_sbrk_r+0x1a>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	20006e0c 	.word	0x20006e0c

0800d264 <_write_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d07      	ldr	r5, [pc, #28]	; (800d284 <_write_r+0x20>)
 800d268:	4604      	mov	r4, r0
 800d26a:	4608      	mov	r0, r1
 800d26c:	4611      	mov	r1, r2
 800d26e:	2200      	movs	r2, #0
 800d270:	602a      	str	r2, [r5, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	f7f3 fa3c 	bl	80006f0 <_write>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_write_r+0x1e>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_write_r+0x1e>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20006e0c 	.word	0x20006e0c

0800d288 <__errno>:
 800d288:	4b01      	ldr	r3, [pc, #4]	; (800d290 <__errno+0x8>)
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	2000007c 	.word	0x2000007c

0800d294 <__libc_init_array>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	4d0d      	ldr	r5, [pc, #52]	; (800d2cc <__libc_init_array+0x38>)
 800d298:	4c0d      	ldr	r4, [pc, #52]	; (800d2d0 <__libc_init_array+0x3c>)
 800d29a:	1b64      	subs	r4, r4, r5
 800d29c:	10a4      	asrs	r4, r4, #2
 800d29e:	2600      	movs	r6, #0
 800d2a0:	42a6      	cmp	r6, r4
 800d2a2:	d109      	bne.n	800d2b8 <__libc_init_array+0x24>
 800d2a4:	4d0b      	ldr	r5, [pc, #44]	; (800d2d4 <__libc_init_array+0x40>)
 800d2a6:	4c0c      	ldr	r4, [pc, #48]	; (800d2d8 <__libc_init_array+0x44>)
 800d2a8:	f000 fe26 	bl	800def8 <_init>
 800d2ac:	1b64      	subs	r4, r4, r5
 800d2ae:	10a4      	asrs	r4, r4, #2
 800d2b0:	2600      	movs	r6, #0
 800d2b2:	42a6      	cmp	r6, r4
 800d2b4:	d105      	bne.n	800d2c2 <__libc_init_array+0x2e>
 800d2b6:	bd70      	pop	{r4, r5, r6, pc}
 800d2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2bc:	4798      	blx	r3
 800d2be:	3601      	adds	r6, #1
 800d2c0:	e7ee      	b.n	800d2a0 <__libc_init_array+0xc>
 800d2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2c6:	4798      	blx	r3
 800d2c8:	3601      	adds	r6, #1
 800d2ca:	e7f2      	b.n	800d2b2 <__libc_init_array+0x1e>
 800d2cc:	0800ea14 	.word	0x0800ea14
 800d2d0:	0800ea14 	.word	0x0800ea14
 800d2d4:	0800ea14 	.word	0x0800ea14
 800d2d8:	0800ea18 	.word	0x0800ea18

0800d2dc <__retarget_lock_init_recursive>:
 800d2dc:	4770      	bx	lr

0800d2de <__retarget_lock_acquire_recursive>:
 800d2de:	4770      	bx	lr

0800d2e0 <__retarget_lock_release_recursive>:
 800d2e0:	4770      	bx	lr

0800d2e2 <memcpy>:
 800d2e2:	440a      	add	r2, r1
 800d2e4:	4291      	cmp	r1, r2
 800d2e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2ea:	d100      	bne.n	800d2ee <memcpy+0xc>
 800d2ec:	4770      	bx	lr
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2f8:	4291      	cmp	r1, r2
 800d2fa:	d1f9      	bne.n	800d2f0 <memcpy+0xe>
 800d2fc:	bd10      	pop	{r4, pc}
	...

0800d300 <_free_r>:
 800d300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d302:	2900      	cmp	r1, #0
 800d304:	d044      	beq.n	800d390 <_free_r+0x90>
 800d306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d30a:	9001      	str	r0, [sp, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f1a1 0404 	sub.w	r4, r1, #4
 800d312:	bfb8      	it	lt
 800d314:	18e4      	addlt	r4, r4, r3
 800d316:	f7ff fd11 	bl	800cd3c <__malloc_lock>
 800d31a:	4a1e      	ldr	r2, [pc, #120]	; (800d394 <_free_r+0x94>)
 800d31c:	9801      	ldr	r0, [sp, #4]
 800d31e:	6813      	ldr	r3, [r2, #0]
 800d320:	b933      	cbnz	r3, 800d330 <_free_r+0x30>
 800d322:	6063      	str	r3, [r4, #4]
 800d324:	6014      	str	r4, [r2, #0]
 800d326:	b003      	add	sp, #12
 800d328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d32c:	f7ff bd0c 	b.w	800cd48 <__malloc_unlock>
 800d330:	42a3      	cmp	r3, r4
 800d332:	d908      	bls.n	800d346 <_free_r+0x46>
 800d334:	6825      	ldr	r5, [r4, #0]
 800d336:	1961      	adds	r1, r4, r5
 800d338:	428b      	cmp	r3, r1
 800d33a:	bf01      	itttt	eq
 800d33c:	6819      	ldreq	r1, [r3, #0]
 800d33e:	685b      	ldreq	r3, [r3, #4]
 800d340:	1949      	addeq	r1, r1, r5
 800d342:	6021      	streq	r1, [r4, #0]
 800d344:	e7ed      	b.n	800d322 <_free_r+0x22>
 800d346:	461a      	mov	r2, r3
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	b10b      	cbz	r3, 800d350 <_free_r+0x50>
 800d34c:	42a3      	cmp	r3, r4
 800d34e:	d9fa      	bls.n	800d346 <_free_r+0x46>
 800d350:	6811      	ldr	r1, [r2, #0]
 800d352:	1855      	adds	r5, r2, r1
 800d354:	42a5      	cmp	r5, r4
 800d356:	d10b      	bne.n	800d370 <_free_r+0x70>
 800d358:	6824      	ldr	r4, [r4, #0]
 800d35a:	4421      	add	r1, r4
 800d35c:	1854      	adds	r4, r2, r1
 800d35e:	42a3      	cmp	r3, r4
 800d360:	6011      	str	r1, [r2, #0]
 800d362:	d1e0      	bne.n	800d326 <_free_r+0x26>
 800d364:	681c      	ldr	r4, [r3, #0]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	6053      	str	r3, [r2, #4]
 800d36a:	440c      	add	r4, r1
 800d36c:	6014      	str	r4, [r2, #0]
 800d36e:	e7da      	b.n	800d326 <_free_r+0x26>
 800d370:	d902      	bls.n	800d378 <_free_r+0x78>
 800d372:	230c      	movs	r3, #12
 800d374:	6003      	str	r3, [r0, #0]
 800d376:	e7d6      	b.n	800d326 <_free_r+0x26>
 800d378:	6825      	ldr	r5, [r4, #0]
 800d37a:	1961      	adds	r1, r4, r5
 800d37c:	428b      	cmp	r3, r1
 800d37e:	bf04      	itt	eq
 800d380:	6819      	ldreq	r1, [r3, #0]
 800d382:	685b      	ldreq	r3, [r3, #4]
 800d384:	6063      	str	r3, [r4, #4]
 800d386:	bf04      	itt	eq
 800d388:	1949      	addeq	r1, r1, r5
 800d38a:	6021      	streq	r1, [r4, #0]
 800d38c:	6054      	str	r4, [r2, #4]
 800d38e:	e7ca      	b.n	800d326 <_free_r+0x26>
 800d390:	b003      	add	sp, #12
 800d392:	bd30      	pop	{r4, r5, pc}
 800d394:	20006cc8 	.word	0x20006cc8

0800d398 <__ssputs_r>:
 800d398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d39c:	688e      	ldr	r6, [r1, #8]
 800d39e:	461f      	mov	r7, r3
 800d3a0:	42be      	cmp	r6, r7
 800d3a2:	680b      	ldr	r3, [r1, #0]
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	4690      	mov	r8, r2
 800d3aa:	d82c      	bhi.n	800d406 <__ssputs_r+0x6e>
 800d3ac:	898a      	ldrh	r2, [r1, #12]
 800d3ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3b2:	d026      	beq.n	800d402 <__ssputs_r+0x6a>
 800d3b4:	6965      	ldr	r5, [r4, #20]
 800d3b6:	6909      	ldr	r1, [r1, #16]
 800d3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3bc:	eba3 0901 	sub.w	r9, r3, r1
 800d3c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3c4:	1c7b      	adds	r3, r7, #1
 800d3c6:	444b      	add	r3, r9
 800d3c8:	106d      	asrs	r5, r5, #1
 800d3ca:	429d      	cmp	r5, r3
 800d3cc:	bf38      	it	cc
 800d3ce:	461d      	movcc	r5, r3
 800d3d0:	0553      	lsls	r3, r2, #21
 800d3d2:	d527      	bpl.n	800d424 <__ssputs_r+0x8c>
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	f7ff fc31 	bl	800cc3c <_malloc_r>
 800d3da:	4606      	mov	r6, r0
 800d3dc:	b360      	cbz	r0, 800d438 <__ssputs_r+0xa0>
 800d3de:	6921      	ldr	r1, [r4, #16]
 800d3e0:	464a      	mov	r2, r9
 800d3e2:	f7ff ff7e 	bl	800d2e2 <memcpy>
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	6126      	str	r6, [r4, #16]
 800d3f4:	6165      	str	r5, [r4, #20]
 800d3f6:	444e      	add	r6, r9
 800d3f8:	eba5 0509 	sub.w	r5, r5, r9
 800d3fc:	6026      	str	r6, [r4, #0]
 800d3fe:	60a5      	str	r5, [r4, #8]
 800d400:	463e      	mov	r6, r7
 800d402:	42be      	cmp	r6, r7
 800d404:	d900      	bls.n	800d408 <__ssputs_r+0x70>
 800d406:	463e      	mov	r6, r7
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	4632      	mov	r2, r6
 800d40c:	4641      	mov	r1, r8
 800d40e:	f000 fcff 	bl	800de10 <memmove>
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	1b9b      	subs	r3, r3, r6
 800d416:	60a3      	str	r3, [r4, #8]
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	4433      	add	r3, r6
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	2000      	movs	r0, #0
 800d420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d424:	462a      	mov	r2, r5
 800d426:	f000 fd2f 	bl	800de88 <_realloc_r>
 800d42a:	4606      	mov	r6, r0
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d1e0      	bne.n	800d3f2 <__ssputs_r+0x5a>
 800d430:	6921      	ldr	r1, [r4, #16]
 800d432:	4650      	mov	r0, sl
 800d434:	f7ff ff64 	bl	800d300 <_free_r>
 800d438:	230c      	movs	r3, #12
 800d43a:	f8ca 3000 	str.w	r3, [sl]
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d444:	81a3      	strh	r3, [r4, #12]
 800d446:	f04f 30ff 	mov.w	r0, #4294967295
 800d44a:	e7e9      	b.n	800d420 <__ssputs_r+0x88>

0800d44c <_svfiprintf_r>:
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	4698      	mov	r8, r3
 800d452:	898b      	ldrh	r3, [r1, #12]
 800d454:	061b      	lsls	r3, r3, #24
 800d456:	b09d      	sub	sp, #116	; 0x74
 800d458:	4607      	mov	r7, r0
 800d45a:	460d      	mov	r5, r1
 800d45c:	4614      	mov	r4, r2
 800d45e:	d50e      	bpl.n	800d47e <_svfiprintf_r+0x32>
 800d460:	690b      	ldr	r3, [r1, #16]
 800d462:	b963      	cbnz	r3, 800d47e <_svfiprintf_r+0x32>
 800d464:	2140      	movs	r1, #64	; 0x40
 800d466:	f7ff fbe9 	bl	800cc3c <_malloc_r>
 800d46a:	6028      	str	r0, [r5, #0]
 800d46c:	6128      	str	r0, [r5, #16]
 800d46e:	b920      	cbnz	r0, 800d47a <_svfiprintf_r+0x2e>
 800d470:	230c      	movs	r3, #12
 800d472:	603b      	str	r3, [r7, #0]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	e0d0      	b.n	800d61c <_svfiprintf_r+0x1d0>
 800d47a:	2340      	movs	r3, #64	; 0x40
 800d47c:	616b      	str	r3, [r5, #20]
 800d47e:	2300      	movs	r3, #0
 800d480:	9309      	str	r3, [sp, #36]	; 0x24
 800d482:	2320      	movs	r3, #32
 800d484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d488:	f8cd 800c 	str.w	r8, [sp, #12]
 800d48c:	2330      	movs	r3, #48	; 0x30
 800d48e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d634 <_svfiprintf_r+0x1e8>
 800d492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d496:	f04f 0901 	mov.w	r9, #1
 800d49a:	4623      	mov	r3, r4
 800d49c:	469a      	mov	sl, r3
 800d49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a2:	b10a      	cbz	r2, 800d4a8 <_svfiprintf_r+0x5c>
 800d4a4:	2a25      	cmp	r2, #37	; 0x25
 800d4a6:	d1f9      	bne.n	800d49c <_svfiprintf_r+0x50>
 800d4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ac:	d00b      	beq.n	800d4c6 <_svfiprintf_r+0x7a>
 800d4ae:	465b      	mov	r3, fp
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	f7ff ff6f 	bl	800d398 <__ssputs_r>
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	f000 80a9 	beq.w	800d612 <_svfiprintf_r+0x1c6>
 800d4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c2:	445a      	add	r2, fp
 800d4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 80a1 	beq.w	800d612 <_svfiprintf_r+0x1c6>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4da:	f10a 0a01 	add.w	sl, sl, #1
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	9307      	str	r3, [sp, #28]
 800d4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4e8:	4654      	mov	r4, sl
 800d4ea:	2205      	movs	r2, #5
 800d4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f0:	4850      	ldr	r0, [pc, #320]	; (800d634 <_svfiprintf_r+0x1e8>)
 800d4f2:	f7f2 fe75 	bl	80001e0 <memchr>
 800d4f6:	9a04      	ldr	r2, [sp, #16]
 800d4f8:	b9d8      	cbnz	r0, 800d532 <_svfiprintf_r+0xe6>
 800d4fa:	06d0      	lsls	r0, r2, #27
 800d4fc:	bf44      	itt	mi
 800d4fe:	2320      	movmi	r3, #32
 800d500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d504:	0711      	lsls	r1, r2, #28
 800d506:	bf44      	itt	mi
 800d508:	232b      	movmi	r3, #43	; 0x2b
 800d50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d50e:	f89a 3000 	ldrb.w	r3, [sl]
 800d512:	2b2a      	cmp	r3, #42	; 0x2a
 800d514:	d015      	beq.n	800d542 <_svfiprintf_r+0xf6>
 800d516:	9a07      	ldr	r2, [sp, #28]
 800d518:	4654      	mov	r4, sl
 800d51a:	2000      	movs	r0, #0
 800d51c:	f04f 0c0a 	mov.w	ip, #10
 800d520:	4621      	mov	r1, r4
 800d522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d526:	3b30      	subs	r3, #48	; 0x30
 800d528:	2b09      	cmp	r3, #9
 800d52a:	d94d      	bls.n	800d5c8 <_svfiprintf_r+0x17c>
 800d52c:	b1b0      	cbz	r0, 800d55c <_svfiprintf_r+0x110>
 800d52e:	9207      	str	r2, [sp, #28]
 800d530:	e014      	b.n	800d55c <_svfiprintf_r+0x110>
 800d532:	eba0 0308 	sub.w	r3, r0, r8
 800d536:	fa09 f303 	lsl.w	r3, r9, r3
 800d53a:	4313      	orrs	r3, r2
 800d53c:	9304      	str	r3, [sp, #16]
 800d53e:	46a2      	mov	sl, r4
 800d540:	e7d2      	b.n	800d4e8 <_svfiprintf_r+0x9c>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	1d19      	adds	r1, r3, #4
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	9103      	str	r1, [sp, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	bfbb      	ittet	lt
 800d54e:	425b      	neglt	r3, r3
 800d550:	f042 0202 	orrlt.w	r2, r2, #2
 800d554:	9307      	strge	r3, [sp, #28]
 800d556:	9307      	strlt	r3, [sp, #28]
 800d558:	bfb8      	it	lt
 800d55a:	9204      	strlt	r2, [sp, #16]
 800d55c:	7823      	ldrb	r3, [r4, #0]
 800d55e:	2b2e      	cmp	r3, #46	; 0x2e
 800d560:	d10c      	bne.n	800d57c <_svfiprintf_r+0x130>
 800d562:	7863      	ldrb	r3, [r4, #1]
 800d564:	2b2a      	cmp	r3, #42	; 0x2a
 800d566:	d134      	bne.n	800d5d2 <_svfiprintf_r+0x186>
 800d568:	9b03      	ldr	r3, [sp, #12]
 800d56a:	1d1a      	adds	r2, r3, #4
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	9203      	str	r2, [sp, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	bfb8      	it	lt
 800d574:	f04f 33ff 	movlt.w	r3, #4294967295
 800d578:	3402      	adds	r4, #2
 800d57a:	9305      	str	r3, [sp, #20]
 800d57c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d644 <_svfiprintf_r+0x1f8>
 800d580:	7821      	ldrb	r1, [r4, #0]
 800d582:	2203      	movs	r2, #3
 800d584:	4650      	mov	r0, sl
 800d586:	f7f2 fe2b 	bl	80001e0 <memchr>
 800d58a:	b138      	cbz	r0, 800d59c <_svfiprintf_r+0x150>
 800d58c:	9b04      	ldr	r3, [sp, #16]
 800d58e:	eba0 000a 	sub.w	r0, r0, sl
 800d592:	2240      	movs	r2, #64	; 0x40
 800d594:	4082      	lsls	r2, r0
 800d596:	4313      	orrs	r3, r2
 800d598:	3401      	adds	r4, #1
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a0:	4825      	ldr	r0, [pc, #148]	; (800d638 <_svfiprintf_r+0x1ec>)
 800d5a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5a6:	2206      	movs	r2, #6
 800d5a8:	f7f2 fe1a 	bl	80001e0 <memchr>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d038      	beq.n	800d622 <_svfiprintf_r+0x1d6>
 800d5b0:	4b22      	ldr	r3, [pc, #136]	; (800d63c <_svfiprintf_r+0x1f0>)
 800d5b2:	bb1b      	cbnz	r3, 800d5fc <_svfiprintf_r+0x1b0>
 800d5b4:	9b03      	ldr	r3, [sp, #12]
 800d5b6:	3307      	adds	r3, #7
 800d5b8:	f023 0307 	bic.w	r3, r3, #7
 800d5bc:	3308      	adds	r3, #8
 800d5be:	9303      	str	r3, [sp, #12]
 800d5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5c2:	4433      	add	r3, r6
 800d5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c6:	e768      	b.n	800d49a <_svfiprintf_r+0x4e>
 800d5c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	e7a6      	b.n	800d520 <_svfiprintf_r+0xd4>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	3401      	adds	r4, #1
 800d5d6:	9305      	str	r3, [sp, #20]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	f04f 0c0a 	mov.w	ip, #10
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e4:	3a30      	subs	r2, #48	; 0x30
 800d5e6:	2a09      	cmp	r2, #9
 800d5e8:	d903      	bls.n	800d5f2 <_svfiprintf_r+0x1a6>
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d0c6      	beq.n	800d57c <_svfiprintf_r+0x130>
 800d5ee:	9105      	str	r1, [sp, #20]
 800d5f0:	e7c4      	b.n	800d57c <_svfiprintf_r+0x130>
 800d5f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e7f0      	b.n	800d5de <_svfiprintf_r+0x192>
 800d5fc:	ab03      	add	r3, sp, #12
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	462a      	mov	r2, r5
 800d602:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <_svfiprintf_r+0x1f4>)
 800d604:	a904      	add	r1, sp, #16
 800d606:	4638      	mov	r0, r7
 800d608:	f3af 8000 	nop.w
 800d60c:	1c42      	adds	r2, r0, #1
 800d60e:	4606      	mov	r6, r0
 800d610:	d1d6      	bne.n	800d5c0 <_svfiprintf_r+0x174>
 800d612:	89ab      	ldrh	r3, [r5, #12]
 800d614:	065b      	lsls	r3, r3, #25
 800d616:	f53f af2d 	bmi.w	800d474 <_svfiprintf_r+0x28>
 800d61a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d61c:	b01d      	add	sp, #116	; 0x74
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d622:	ab03      	add	r3, sp, #12
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	462a      	mov	r2, r5
 800d628:	4b05      	ldr	r3, [pc, #20]	; (800d640 <_svfiprintf_r+0x1f4>)
 800d62a:	a904      	add	r1, sp, #16
 800d62c:	4638      	mov	r0, r7
 800d62e:	f000 f9bd 	bl	800d9ac <_printf_i>
 800d632:	e7eb      	b.n	800d60c <_svfiprintf_r+0x1c0>
 800d634:	0800e9d8 	.word	0x0800e9d8
 800d638:	0800e9e2 	.word	0x0800e9e2
 800d63c:	00000000 	.word	0x00000000
 800d640:	0800d399 	.word	0x0800d399
 800d644:	0800e9de 	.word	0x0800e9de

0800d648 <__sfputc_r>:
 800d648:	6893      	ldr	r3, [r2, #8]
 800d64a:	3b01      	subs	r3, #1
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	b410      	push	{r4}
 800d650:	6093      	str	r3, [r2, #8]
 800d652:	da08      	bge.n	800d666 <__sfputc_r+0x1e>
 800d654:	6994      	ldr	r4, [r2, #24]
 800d656:	42a3      	cmp	r3, r4
 800d658:	db01      	blt.n	800d65e <__sfputc_r+0x16>
 800d65a:	290a      	cmp	r1, #10
 800d65c:	d103      	bne.n	800d666 <__sfputc_r+0x1e>
 800d65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d662:	f7ff bd1e 	b.w	800d0a2 <__swbuf_r>
 800d666:	6813      	ldr	r3, [r2, #0]
 800d668:	1c58      	adds	r0, r3, #1
 800d66a:	6010      	str	r0, [r2, #0]
 800d66c:	7019      	strb	r1, [r3, #0]
 800d66e:	4608      	mov	r0, r1
 800d670:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <__sfputs_r>:
 800d676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d678:	4606      	mov	r6, r0
 800d67a:	460f      	mov	r7, r1
 800d67c:	4614      	mov	r4, r2
 800d67e:	18d5      	adds	r5, r2, r3
 800d680:	42ac      	cmp	r4, r5
 800d682:	d101      	bne.n	800d688 <__sfputs_r+0x12>
 800d684:	2000      	movs	r0, #0
 800d686:	e007      	b.n	800d698 <__sfputs_r+0x22>
 800d688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68c:	463a      	mov	r2, r7
 800d68e:	4630      	mov	r0, r6
 800d690:	f7ff ffda 	bl	800d648 <__sfputc_r>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d1f3      	bne.n	800d680 <__sfputs_r+0xa>
 800d698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d69c <_vfiprintf_r>:
 800d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	b09d      	sub	sp, #116	; 0x74
 800d6a4:	4614      	mov	r4, r2
 800d6a6:	4698      	mov	r8, r3
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	b118      	cbz	r0, 800d6b4 <_vfiprintf_r+0x18>
 800d6ac:	6a03      	ldr	r3, [r0, #32]
 800d6ae:	b90b      	cbnz	r3, 800d6b4 <_vfiprintf_r+0x18>
 800d6b0:	f7ff fbdc 	bl	800ce6c <__sinit>
 800d6b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6b6:	07d9      	lsls	r1, r3, #31
 800d6b8:	d405      	bmi.n	800d6c6 <_vfiprintf_r+0x2a>
 800d6ba:	89ab      	ldrh	r3, [r5, #12]
 800d6bc:	059a      	lsls	r2, r3, #22
 800d6be:	d402      	bmi.n	800d6c6 <_vfiprintf_r+0x2a>
 800d6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6c2:	f7ff fe0c 	bl	800d2de <__retarget_lock_acquire_recursive>
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	071b      	lsls	r3, r3, #28
 800d6ca:	d501      	bpl.n	800d6d0 <_vfiprintf_r+0x34>
 800d6cc:	692b      	ldr	r3, [r5, #16]
 800d6ce:	b99b      	cbnz	r3, 800d6f8 <_vfiprintf_r+0x5c>
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f7ff fd22 	bl	800d11c <__swsetup_r>
 800d6d8:	b170      	cbz	r0, 800d6f8 <_vfiprintf_r+0x5c>
 800d6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6dc:	07dc      	lsls	r4, r3, #31
 800d6de:	d504      	bpl.n	800d6ea <_vfiprintf_r+0x4e>
 800d6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e4:	b01d      	add	sp, #116	; 0x74
 800d6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ea:	89ab      	ldrh	r3, [r5, #12]
 800d6ec:	0598      	lsls	r0, r3, #22
 800d6ee:	d4f7      	bmi.n	800d6e0 <_vfiprintf_r+0x44>
 800d6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6f2:	f7ff fdf5 	bl	800d2e0 <__retarget_lock_release_recursive>
 800d6f6:	e7f3      	b.n	800d6e0 <_vfiprintf_r+0x44>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d6fc:	2320      	movs	r3, #32
 800d6fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d702:	f8cd 800c 	str.w	r8, [sp, #12]
 800d706:	2330      	movs	r3, #48	; 0x30
 800d708:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d8bc <_vfiprintf_r+0x220>
 800d70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d710:	f04f 0901 	mov.w	r9, #1
 800d714:	4623      	mov	r3, r4
 800d716:	469a      	mov	sl, r3
 800d718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d71c:	b10a      	cbz	r2, 800d722 <_vfiprintf_r+0x86>
 800d71e:	2a25      	cmp	r2, #37	; 0x25
 800d720:	d1f9      	bne.n	800d716 <_vfiprintf_r+0x7a>
 800d722:	ebba 0b04 	subs.w	fp, sl, r4
 800d726:	d00b      	beq.n	800d740 <_vfiprintf_r+0xa4>
 800d728:	465b      	mov	r3, fp
 800d72a:	4622      	mov	r2, r4
 800d72c:	4629      	mov	r1, r5
 800d72e:	4630      	mov	r0, r6
 800d730:	f7ff ffa1 	bl	800d676 <__sfputs_r>
 800d734:	3001      	adds	r0, #1
 800d736:	f000 80a9 	beq.w	800d88c <_vfiprintf_r+0x1f0>
 800d73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d73c:	445a      	add	r2, fp
 800d73e:	9209      	str	r2, [sp, #36]	; 0x24
 800d740:	f89a 3000 	ldrb.w	r3, [sl]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 80a1 	beq.w	800d88c <_vfiprintf_r+0x1f0>
 800d74a:	2300      	movs	r3, #0
 800d74c:	f04f 32ff 	mov.w	r2, #4294967295
 800d750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d754:	f10a 0a01 	add.w	sl, sl, #1
 800d758:	9304      	str	r3, [sp, #16]
 800d75a:	9307      	str	r3, [sp, #28]
 800d75c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d760:	931a      	str	r3, [sp, #104]	; 0x68
 800d762:	4654      	mov	r4, sl
 800d764:	2205      	movs	r2, #5
 800d766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d76a:	4854      	ldr	r0, [pc, #336]	; (800d8bc <_vfiprintf_r+0x220>)
 800d76c:	f7f2 fd38 	bl	80001e0 <memchr>
 800d770:	9a04      	ldr	r2, [sp, #16]
 800d772:	b9d8      	cbnz	r0, 800d7ac <_vfiprintf_r+0x110>
 800d774:	06d1      	lsls	r1, r2, #27
 800d776:	bf44      	itt	mi
 800d778:	2320      	movmi	r3, #32
 800d77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d77e:	0713      	lsls	r3, r2, #28
 800d780:	bf44      	itt	mi
 800d782:	232b      	movmi	r3, #43	; 0x2b
 800d784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d788:	f89a 3000 	ldrb.w	r3, [sl]
 800d78c:	2b2a      	cmp	r3, #42	; 0x2a
 800d78e:	d015      	beq.n	800d7bc <_vfiprintf_r+0x120>
 800d790:	9a07      	ldr	r2, [sp, #28]
 800d792:	4654      	mov	r4, sl
 800d794:	2000      	movs	r0, #0
 800d796:	f04f 0c0a 	mov.w	ip, #10
 800d79a:	4621      	mov	r1, r4
 800d79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7a0:	3b30      	subs	r3, #48	; 0x30
 800d7a2:	2b09      	cmp	r3, #9
 800d7a4:	d94d      	bls.n	800d842 <_vfiprintf_r+0x1a6>
 800d7a6:	b1b0      	cbz	r0, 800d7d6 <_vfiprintf_r+0x13a>
 800d7a8:	9207      	str	r2, [sp, #28]
 800d7aa:	e014      	b.n	800d7d6 <_vfiprintf_r+0x13a>
 800d7ac:	eba0 0308 	sub.w	r3, r0, r8
 800d7b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	9304      	str	r3, [sp, #16]
 800d7b8:	46a2      	mov	sl, r4
 800d7ba:	e7d2      	b.n	800d762 <_vfiprintf_r+0xc6>
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	1d19      	adds	r1, r3, #4
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	9103      	str	r1, [sp, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	bfbb      	ittet	lt
 800d7c8:	425b      	neglt	r3, r3
 800d7ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d7ce:	9307      	strge	r3, [sp, #28]
 800d7d0:	9307      	strlt	r3, [sp, #28]
 800d7d2:	bfb8      	it	lt
 800d7d4:	9204      	strlt	r2, [sp, #16]
 800d7d6:	7823      	ldrb	r3, [r4, #0]
 800d7d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d7da:	d10c      	bne.n	800d7f6 <_vfiprintf_r+0x15a>
 800d7dc:	7863      	ldrb	r3, [r4, #1]
 800d7de:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e0:	d134      	bne.n	800d84c <_vfiprintf_r+0x1b0>
 800d7e2:	9b03      	ldr	r3, [sp, #12]
 800d7e4:	1d1a      	adds	r2, r3, #4
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	9203      	str	r2, [sp, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	bfb8      	it	lt
 800d7ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7f2:	3402      	adds	r4, #2
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d8cc <_vfiprintf_r+0x230>
 800d7fa:	7821      	ldrb	r1, [r4, #0]
 800d7fc:	2203      	movs	r2, #3
 800d7fe:	4650      	mov	r0, sl
 800d800:	f7f2 fcee 	bl	80001e0 <memchr>
 800d804:	b138      	cbz	r0, 800d816 <_vfiprintf_r+0x17a>
 800d806:	9b04      	ldr	r3, [sp, #16]
 800d808:	eba0 000a 	sub.w	r0, r0, sl
 800d80c:	2240      	movs	r2, #64	; 0x40
 800d80e:	4082      	lsls	r2, r0
 800d810:	4313      	orrs	r3, r2
 800d812:	3401      	adds	r4, #1
 800d814:	9304      	str	r3, [sp, #16]
 800d816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d81a:	4829      	ldr	r0, [pc, #164]	; (800d8c0 <_vfiprintf_r+0x224>)
 800d81c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d820:	2206      	movs	r2, #6
 800d822:	f7f2 fcdd 	bl	80001e0 <memchr>
 800d826:	2800      	cmp	r0, #0
 800d828:	d03f      	beq.n	800d8aa <_vfiprintf_r+0x20e>
 800d82a:	4b26      	ldr	r3, [pc, #152]	; (800d8c4 <_vfiprintf_r+0x228>)
 800d82c:	bb1b      	cbnz	r3, 800d876 <_vfiprintf_r+0x1da>
 800d82e:	9b03      	ldr	r3, [sp, #12]
 800d830:	3307      	adds	r3, #7
 800d832:	f023 0307 	bic.w	r3, r3, #7
 800d836:	3308      	adds	r3, #8
 800d838:	9303      	str	r3, [sp, #12]
 800d83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83c:	443b      	add	r3, r7
 800d83e:	9309      	str	r3, [sp, #36]	; 0x24
 800d840:	e768      	b.n	800d714 <_vfiprintf_r+0x78>
 800d842:	fb0c 3202 	mla	r2, ip, r2, r3
 800d846:	460c      	mov	r4, r1
 800d848:	2001      	movs	r0, #1
 800d84a:	e7a6      	b.n	800d79a <_vfiprintf_r+0xfe>
 800d84c:	2300      	movs	r3, #0
 800d84e:	3401      	adds	r4, #1
 800d850:	9305      	str	r3, [sp, #20]
 800d852:	4619      	mov	r1, r3
 800d854:	f04f 0c0a 	mov.w	ip, #10
 800d858:	4620      	mov	r0, r4
 800d85a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d85e:	3a30      	subs	r2, #48	; 0x30
 800d860:	2a09      	cmp	r2, #9
 800d862:	d903      	bls.n	800d86c <_vfiprintf_r+0x1d0>
 800d864:	2b00      	cmp	r3, #0
 800d866:	d0c6      	beq.n	800d7f6 <_vfiprintf_r+0x15a>
 800d868:	9105      	str	r1, [sp, #20]
 800d86a:	e7c4      	b.n	800d7f6 <_vfiprintf_r+0x15a>
 800d86c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d870:	4604      	mov	r4, r0
 800d872:	2301      	movs	r3, #1
 800d874:	e7f0      	b.n	800d858 <_vfiprintf_r+0x1bc>
 800d876:	ab03      	add	r3, sp, #12
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	462a      	mov	r2, r5
 800d87c:	4b12      	ldr	r3, [pc, #72]	; (800d8c8 <_vfiprintf_r+0x22c>)
 800d87e:	a904      	add	r1, sp, #16
 800d880:	4630      	mov	r0, r6
 800d882:	f3af 8000 	nop.w
 800d886:	4607      	mov	r7, r0
 800d888:	1c78      	adds	r0, r7, #1
 800d88a:	d1d6      	bne.n	800d83a <_vfiprintf_r+0x19e>
 800d88c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d88e:	07d9      	lsls	r1, r3, #31
 800d890:	d405      	bmi.n	800d89e <_vfiprintf_r+0x202>
 800d892:	89ab      	ldrh	r3, [r5, #12]
 800d894:	059a      	lsls	r2, r3, #22
 800d896:	d402      	bmi.n	800d89e <_vfiprintf_r+0x202>
 800d898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d89a:	f7ff fd21 	bl	800d2e0 <__retarget_lock_release_recursive>
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	065b      	lsls	r3, r3, #25
 800d8a2:	f53f af1d 	bmi.w	800d6e0 <_vfiprintf_r+0x44>
 800d8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8a8:	e71c      	b.n	800d6e4 <_vfiprintf_r+0x48>
 800d8aa:	ab03      	add	r3, sp, #12
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	462a      	mov	r2, r5
 800d8b0:	4b05      	ldr	r3, [pc, #20]	; (800d8c8 <_vfiprintf_r+0x22c>)
 800d8b2:	a904      	add	r1, sp, #16
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f000 f879 	bl	800d9ac <_printf_i>
 800d8ba:	e7e4      	b.n	800d886 <_vfiprintf_r+0x1ea>
 800d8bc:	0800e9d8 	.word	0x0800e9d8
 800d8c0:	0800e9e2 	.word	0x0800e9e2
 800d8c4:	00000000 	.word	0x00000000
 800d8c8:	0800d677 	.word	0x0800d677
 800d8cc:	0800e9de 	.word	0x0800e9de

0800d8d0 <_printf_common>:
 800d8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d4:	4616      	mov	r6, r2
 800d8d6:	4699      	mov	r9, r3
 800d8d8:	688a      	ldr	r2, [r1, #8]
 800d8da:	690b      	ldr	r3, [r1, #16]
 800d8dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	bfb8      	it	lt
 800d8e4:	4613      	movlt	r3, r2
 800d8e6:	6033      	str	r3, [r6, #0]
 800d8e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	460c      	mov	r4, r1
 800d8f0:	b10a      	cbz	r2, 800d8f6 <_printf_common+0x26>
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	6033      	str	r3, [r6, #0]
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	0699      	lsls	r1, r3, #26
 800d8fa:	bf42      	ittt	mi
 800d8fc:	6833      	ldrmi	r3, [r6, #0]
 800d8fe:	3302      	addmi	r3, #2
 800d900:	6033      	strmi	r3, [r6, #0]
 800d902:	6825      	ldr	r5, [r4, #0]
 800d904:	f015 0506 	ands.w	r5, r5, #6
 800d908:	d106      	bne.n	800d918 <_printf_common+0x48>
 800d90a:	f104 0a19 	add.w	sl, r4, #25
 800d90e:	68e3      	ldr	r3, [r4, #12]
 800d910:	6832      	ldr	r2, [r6, #0]
 800d912:	1a9b      	subs	r3, r3, r2
 800d914:	42ab      	cmp	r3, r5
 800d916:	dc26      	bgt.n	800d966 <_printf_common+0x96>
 800d918:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d91c:	1e13      	subs	r3, r2, #0
 800d91e:	6822      	ldr	r2, [r4, #0]
 800d920:	bf18      	it	ne
 800d922:	2301      	movne	r3, #1
 800d924:	0692      	lsls	r2, r2, #26
 800d926:	d42b      	bmi.n	800d980 <_printf_common+0xb0>
 800d928:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d92c:	4649      	mov	r1, r9
 800d92e:	4638      	mov	r0, r7
 800d930:	47c0      	blx	r8
 800d932:	3001      	adds	r0, #1
 800d934:	d01e      	beq.n	800d974 <_printf_common+0xa4>
 800d936:	6823      	ldr	r3, [r4, #0]
 800d938:	6922      	ldr	r2, [r4, #16]
 800d93a:	f003 0306 	and.w	r3, r3, #6
 800d93e:	2b04      	cmp	r3, #4
 800d940:	bf02      	ittt	eq
 800d942:	68e5      	ldreq	r5, [r4, #12]
 800d944:	6833      	ldreq	r3, [r6, #0]
 800d946:	1aed      	subeq	r5, r5, r3
 800d948:	68a3      	ldr	r3, [r4, #8]
 800d94a:	bf0c      	ite	eq
 800d94c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d950:	2500      	movne	r5, #0
 800d952:	4293      	cmp	r3, r2
 800d954:	bfc4      	itt	gt
 800d956:	1a9b      	subgt	r3, r3, r2
 800d958:	18ed      	addgt	r5, r5, r3
 800d95a:	2600      	movs	r6, #0
 800d95c:	341a      	adds	r4, #26
 800d95e:	42b5      	cmp	r5, r6
 800d960:	d11a      	bne.n	800d998 <_printf_common+0xc8>
 800d962:	2000      	movs	r0, #0
 800d964:	e008      	b.n	800d978 <_printf_common+0xa8>
 800d966:	2301      	movs	r3, #1
 800d968:	4652      	mov	r2, sl
 800d96a:	4649      	mov	r1, r9
 800d96c:	4638      	mov	r0, r7
 800d96e:	47c0      	blx	r8
 800d970:	3001      	adds	r0, #1
 800d972:	d103      	bne.n	800d97c <_printf_common+0xac>
 800d974:	f04f 30ff 	mov.w	r0, #4294967295
 800d978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d97c:	3501      	adds	r5, #1
 800d97e:	e7c6      	b.n	800d90e <_printf_common+0x3e>
 800d980:	18e1      	adds	r1, r4, r3
 800d982:	1c5a      	adds	r2, r3, #1
 800d984:	2030      	movs	r0, #48	; 0x30
 800d986:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d98a:	4422      	add	r2, r4
 800d98c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d990:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d994:	3302      	adds	r3, #2
 800d996:	e7c7      	b.n	800d928 <_printf_common+0x58>
 800d998:	2301      	movs	r3, #1
 800d99a:	4622      	mov	r2, r4
 800d99c:	4649      	mov	r1, r9
 800d99e:	4638      	mov	r0, r7
 800d9a0:	47c0      	blx	r8
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	d0e6      	beq.n	800d974 <_printf_common+0xa4>
 800d9a6:	3601      	adds	r6, #1
 800d9a8:	e7d9      	b.n	800d95e <_printf_common+0x8e>
	...

0800d9ac <_printf_i>:
 800d9ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b0:	7e0f      	ldrb	r7, [r1, #24]
 800d9b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9b4:	2f78      	cmp	r7, #120	; 0x78
 800d9b6:	4691      	mov	r9, r2
 800d9b8:	4680      	mov	r8, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	469a      	mov	sl, r3
 800d9be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9c2:	d807      	bhi.n	800d9d4 <_printf_i+0x28>
 800d9c4:	2f62      	cmp	r7, #98	; 0x62
 800d9c6:	d80a      	bhi.n	800d9de <_printf_i+0x32>
 800d9c8:	2f00      	cmp	r7, #0
 800d9ca:	f000 80d4 	beq.w	800db76 <_printf_i+0x1ca>
 800d9ce:	2f58      	cmp	r7, #88	; 0x58
 800d9d0:	f000 80c0 	beq.w	800db54 <_printf_i+0x1a8>
 800d9d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9dc:	e03a      	b.n	800da54 <_printf_i+0xa8>
 800d9de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9e2:	2b15      	cmp	r3, #21
 800d9e4:	d8f6      	bhi.n	800d9d4 <_printf_i+0x28>
 800d9e6:	a101      	add	r1, pc, #4	; (adr r1, 800d9ec <_printf_i+0x40>)
 800d9e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9ec:	0800da45 	.word	0x0800da45
 800d9f0:	0800da59 	.word	0x0800da59
 800d9f4:	0800d9d5 	.word	0x0800d9d5
 800d9f8:	0800d9d5 	.word	0x0800d9d5
 800d9fc:	0800d9d5 	.word	0x0800d9d5
 800da00:	0800d9d5 	.word	0x0800d9d5
 800da04:	0800da59 	.word	0x0800da59
 800da08:	0800d9d5 	.word	0x0800d9d5
 800da0c:	0800d9d5 	.word	0x0800d9d5
 800da10:	0800d9d5 	.word	0x0800d9d5
 800da14:	0800d9d5 	.word	0x0800d9d5
 800da18:	0800db5d 	.word	0x0800db5d
 800da1c:	0800da85 	.word	0x0800da85
 800da20:	0800db17 	.word	0x0800db17
 800da24:	0800d9d5 	.word	0x0800d9d5
 800da28:	0800d9d5 	.word	0x0800d9d5
 800da2c:	0800db7f 	.word	0x0800db7f
 800da30:	0800d9d5 	.word	0x0800d9d5
 800da34:	0800da85 	.word	0x0800da85
 800da38:	0800d9d5 	.word	0x0800d9d5
 800da3c:	0800d9d5 	.word	0x0800d9d5
 800da40:	0800db1f 	.word	0x0800db1f
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	1d1a      	adds	r2, r3, #4
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	602a      	str	r2, [r5, #0]
 800da4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da54:	2301      	movs	r3, #1
 800da56:	e09f      	b.n	800db98 <_printf_i+0x1ec>
 800da58:	6820      	ldr	r0, [r4, #0]
 800da5a:	682b      	ldr	r3, [r5, #0]
 800da5c:	0607      	lsls	r7, r0, #24
 800da5e:	f103 0104 	add.w	r1, r3, #4
 800da62:	6029      	str	r1, [r5, #0]
 800da64:	d501      	bpl.n	800da6a <_printf_i+0xbe>
 800da66:	681e      	ldr	r6, [r3, #0]
 800da68:	e003      	b.n	800da72 <_printf_i+0xc6>
 800da6a:	0646      	lsls	r6, r0, #25
 800da6c:	d5fb      	bpl.n	800da66 <_printf_i+0xba>
 800da6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da72:	2e00      	cmp	r6, #0
 800da74:	da03      	bge.n	800da7e <_printf_i+0xd2>
 800da76:	232d      	movs	r3, #45	; 0x2d
 800da78:	4276      	negs	r6, r6
 800da7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da7e:	485a      	ldr	r0, [pc, #360]	; (800dbe8 <_printf_i+0x23c>)
 800da80:	230a      	movs	r3, #10
 800da82:	e012      	b.n	800daaa <_printf_i+0xfe>
 800da84:	682b      	ldr	r3, [r5, #0]
 800da86:	6820      	ldr	r0, [r4, #0]
 800da88:	1d19      	adds	r1, r3, #4
 800da8a:	6029      	str	r1, [r5, #0]
 800da8c:	0605      	lsls	r5, r0, #24
 800da8e:	d501      	bpl.n	800da94 <_printf_i+0xe8>
 800da90:	681e      	ldr	r6, [r3, #0]
 800da92:	e002      	b.n	800da9a <_printf_i+0xee>
 800da94:	0641      	lsls	r1, r0, #25
 800da96:	d5fb      	bpl.n	800da90 <_printf_i+0xe4>
 800da98:	881e      	ldrh	r6, [r3, #0]
 800da9a:	4853      	ldr	r0, [pc, #332]	; (800dbe8 <_printf_i+0x23c>)
 800da9c:	2f6f      	cmp	r7, #111	; 0x6f
 800da9e:	bf0c      	ite	eq
 800daa0:	2308      	moveq	r3, #8
 800daa2:	230a      	movne	r3, #10
 800daa4:	2100      	movs	r1, #0
 800daa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daaa:	6865      	ldr	r5, [r4, #4]
 800daac:	60a5      	str	r5, [r4, #8]
 800daae:	2d00      	cmp	r5, #0
 800dab0:	bfa2      	ittt	ge
 800dab2:	6821      	ldrge	r1, [r4, #0]
 800dab4:	f021 0104 	bicge.w	r1, r1, #4
 800dab8:	6021      	strge	r1, [r4, #0]
 800daba:	b90e      	cbnz	r6, 800dac0 <_printf_i+0x114>
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	d04b      	beq.n	800db58 <_printf_i+0x1ac>
 800dac0:	4615      	mov	r5, r2
 800dac2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dac6:	fb03 6711 	mls	r7, r3, r1, r6
 800daca:	5dc7      	ldrb	r7, [r0, r7]
 800dacc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dad0:	4637      	mov	r7, r6
 800dad2:	42bb      	cmp	r3, r7
 800dad4:	460e      	mov	r6, r1
 800dad6:	d9f4      	bls.n	800dac2 <_printf_i+0x116>
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d10b      	bne.n	800daf4 <_printf_i+0x148>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	07de      	lsls	r6, r3, #31
 800dae0:	d508      	bpl.n	800daf4 <_printf_i+0x148>
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	6861      	ldr	r1, [r4, #4]
 800dae6:	4299      	cmp	r1, r3
 800dae8:	bfde      	ittt	le
 800daea:	2330      	movle	r3, #48	; 0x30
 800daec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800daf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800daf4:	1b52      	subs	r2, r2, r5
 800daf6:	6122      	str	r2, [r4, #16]
 800daf8:	f8cd a000 	str.w	sl, [sp]
 800dafc:	464b      	mov	r3, r9
 800dafe:	aa03      	add	r2, sp, #12
 800db00:	4621      	mov	r1, r4
 800db02:	4640      	mov	r0, r8
 800db04:	f7ff fee4 	bl	800d8d0 <_printf_common>
 800db08:	3001      	adds	r0, #1
 800db0a:	d14a      	bne.n	800dba2 <_printf_i+0x1f6>
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
 800db10:	b004      	add	sp, #16
 800db12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db16:	6823      	ldr	r3, [r4, #0]
 800db18:	f043 0320 	orr.w	r3, r3, #32
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	4833      	ldr	r0, [pc, #204]	; (800dbec <_printf_i+0x240>)
 800db20:	2778      	movs	r7, #120	; 0x78
 800db22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	6829      	ldr	r1, [r5, #0]
 800db2a:	061f      	lsls	r7, r3, #24
 800db2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800db30:	d402      	bmi.n	800db38 <_printf_i+0x18c>
 800db32:	065f      	lsls	r7, r3, #25
 800db34:	bf48      	it	mi
 800db36:	b2b6      	uxthmi	r6, r6
 800db38:	07df      	lsls	r7, r3, #31
 800db3a:	bf48      	it	mi
 800db3c:	f043 0320 	orrmi.w	r3, r3, #32
 800db40:	6029      	str	r1, [r5, #0]
 800db42:	bf48      	it	mi
 800db44:	6023      	strmi	r3, [r4, #0]
 800db46:	b91e      	cbnz	r6, 800db50 <_printf_i+0x1a4>
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	f023 0320 	bic.w	r3, r3, #32
 800db4e:	6023      	str	r3, [r4, #0]
 800db50:	2310      	movs	r3, #16
 800db52:	e7a7      	b.n	800daa4 <_printf_i+0xf8>
 800db54:	4824      	ldr	r0, [pc, #144]	; (800dbe8 <_printf_i+0x23c>)
 800db56:	e7e4      	b.n	800db22 <_printf_i+0x176>
 800db58:	4615      	mov	r5, r2
 800db5a:	e7bd      	b.n	800dad8 <_printf_i+0x12c>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	6826      	ldr	r6, [r4, #0]
 800db60:	6961      	ldr	r1, [r4, #20]
 800db62:	1d18      	adds	r0, r3, #4
 800db64:	6028      	str	r0, [r5, #0]
 800db66:	0635      	lsls	r5, r6, #24
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	d501      	bpl.n	800db70 <_printf_i+0x1c4>
 800db6c:	6019      	str	r1, [r3, #0]
 800db6e:	e002      	b.n	800db76 <_printf_i+0x1ca>
 800db70:	0670      	lsls	r0, r6, #25
 800db72:	d5fb      	bpl.n	800db6c <_printf_i+0x1c0>
 800db74:	8019      	strh	r1, [r3, #0]
 800db76:	2300      	movs	r3, #0
 800db78:	6123      	str	r3, [r4, #16]
 800db7a:	4615      	mov	r5, r2
 800db7c:	e7bc      	b.n	800daf8 <_printf_i+0x14c>
 800db7e:	682b      	ldr	r3, [r5, #0]
 800db80:	1d1a      	adds	r2, r3, #4
 800db82:	602a      	str	r2, [r5, #0]
 800db84:	681d      	ldr	r5, [r3, #0]
 800db86:	6862      	ldr	r2, [r4, #4]
 800db88:	2100      	movs	r1, #0
 800db8a:	4628      	mov	r0, r5
 800db8c:	f7f2 fb28 	bl	80001e0 <memchr>
 800db90:	b108      	cbz	r0, 800db96 <_printf_i+0x1ea>
 800db92:	1b40      	subs	r0, r0, r5
 800db94:	6060      	str	r0, [r4, #4]
 800db96:	6863      	ldr	r3, [r4, #4]
 800db98:	6123      	str	r3, [r4, #16]
 800db9a:	2300      	movs	r3, #0
 800db9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba0:	e7aa      	b.n	800daf8 <_printf_i+0x14c>
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	462a      	mov	r2, r5
 800dba6:	4649      	mov	r1, r9
 800dba8:	4640      	mov	r0, r8
 800dbaa:	47d0      	blx	sl
 800dbac:	3001      	adds	r0, #1
 800dbae:	d0ad      	beq.n	800db0c <_printf_i+0x160>
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	079b      	lsls	r3, r3, #30
 800dbb4:	d413      	bmi.n	800dbde <_printf_i+0x232>
 800dbb6:	68e0      	ldr	r0, [r4, #12]
 800dbb8:	9b03      	ldr	r3, [sp, #12]
 800dbba:	4298      	cmp	r0, r3
 800dbbc:	bfb8      	it	lt
 800dbbe:	4618      	movlt	r0, r3
 800dbc0:	e7a6      	b.n	800db10 <_printf_i+0x164>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	4640      	mov	r0, r8
 800dbca:	47d0      	blx	sl
 800dbcc:	3001      	adds	r0, #1
 800dbce:	d09d      	beq.n	800db0c <_printf_i+0x160>
 800dbd0:	3501      	adds	r5, #1
 800dbd2:	68e3      	ldr	r3, [r4, #12]
 800dbd4:	9903      	ldr	r1, [sp, #12]
 800dbd6:	1a5b      	subs	r3, r3, r1
 800dbd8:	42ab      	cmp	r3, r5
 800dbda:	dcf2      	bgt.n	800dbc2 <_printf_i+0x216>
 800dbdc:	e7eb      	b.n	800dbb6 <_printf_i+0x20a>
 800dbde:	2500      	movs	r5, #0
 800dbe0:	f104 0619 	add.w	r6, r4, #25
 800dbe4:	e7f5      	b.n	800dbd2 <_printf_i+0x226>
 800dbe6:	bf00      	nop
 800dbe8:	0800e9e9 	.word	0x0800e9e9
 800dbec:	0800e9fa 	.word	0x0800e9fa

0800dbf0 <__sflush_r>:
 800dbf0:	898a      	ldrh	r2, [r1, #12]
 800dbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	0710      	lsls	r0, r2, #28
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	d458      	bmi.n	800dcb0 <__sflush_r+0xc0>
 800dbfe:	684b      	ldr	r3, [r1, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dc05      	bgt.n	800dc10 <__sflush_r+0x20>
 800dc04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	dc02      	bgt.n	800dc10 <__sflush_r+0x20>
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc12:	2e00      	cmp	r6, #0
 800dc14:	d0f9      	beq.n	800dc0a <__sflush_r+0x1a>
 800dc16:	2300      	movs	r3, #0
 800dc18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc1c:	682f      	ldr	r7, [r5, #0]
 800dc1e:	6a21      	ldr	r1, [r4, #32]
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	d032      	beq.n	800dc8a <__sflush_r+0x9a>
 800dc24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	075a      	lsls	r2, r3, #29
 800dc2a:	d505      	bpl.n	800dc38 <__sflush_r+0x48>
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	1ac0      	subs	r0, r0, r3
 800dc30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc32:	b10b      	cbz	r3, 800dc38 <__sflush_r+0x48>
 800dc34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc36:	1ac0      	subs	r0, r0, r3
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc3e:	6a21      	ldr	r1, [r4, #32]
 800dc40:	4628      	mov	r0, r5
 800dc42:	47b0      	blx	r6
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	89a3      	ldrh	r3, [r4, #12]
 800dc48:	d106      	bne.n	800dc58 <__sflush_r+0x68>
 800dc4a:	6829      	ldr	r1, [r5, #0]
 800dc4c:	291d      	cmp	r1, #29
 800dc4e:	d82b      	bhi.n	800dca8 <__sflush_r+0xb8>
 800dc50:	4a29      	ldr	r2, [pc, #164]	; (800dcf8 <__sflush_r+0x108>)
 800dc52:	410a      	asrs	r2, r1
 800dc54:	07d6      	lsls	r6, r2, #31
 800dc56:	d427      	bmi.n	800dca8 <__sflush_r+0xb8>
 800dc58:	2200      	movs	r2, #0
 800dc5a:	6062      	str	r2, [r4, #4]
 800dc5c:	04d9      	lsls	r1, r3, #19
 800dc5e:	6922      	ldr	r2, [r4, #16]
 800dc60:	6022      	str	r2, [r4, #0]
 800dc62:	d504      	bpl.n	800dc6e <__sflush_r+0x7e>
 800dc64:	1c42      	adds	r2, r0, #1
 800dc66:	d101      	bne.n	800dc6c <__sflush_r+0x7c>
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	b903      	cbnz	r3, 800dc6e <__sflush_r+0x7e>
 800dc6c:	6560      	str	r0, [r4, #84]	; 0x54
 800dc6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc70:	602f      	str	r7, [r5, #0]
 800dc72:	2900      	cmp	r1, #0
 800dc74:	d0c9      	beq.n	800dc0a <__sflush_r+0x1a>
 800dc76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc7a:	4299      	cmp	r1, r3
 800dc7c:	d002      	beq.n	800dc84 <__sflush_r+0x94>
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f7ff fb3e 	bl	800d300 <_free_r>
 800dc84:	2000      	movs	r0, #0
 800dc86:	6360      	str	r0, [r4, #52]	; 0x34
 800dc88:	e7c0      	b.n	800dc0c <__sflush_r+0x1c>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	47b0      	blx	r6
 800dc90:	1c41      	adds	r1, r0, #1
 800dc92:	d1c8      	bne.n	800dc26 <__sflush_r+0x36>
 800dc94:	682b      	ldr	r3, [r5, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d0c5      	beq.n	800dc26 <__sflush_r+0x36>
 800dc9a:	2b1d      	cmp	r3, #29
 800dc9c:	d001      	beq.n	800dca2 <__sflush_r+0xb2>
 800dc9e:	2b16      	cmp	r3, #22
 800dca0:	d101      	bne.n	800dca6 <__sflush_r+0xb6>
 800dca2:	602f      	str	r7, [r5, #0]
 800dca4:	e7b1      	b.n	800dc0a <__sflush_r+0x1a>
 800dca6:	89a3      	ldrh	r3, [r4, #12]
 800dca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcac:	81a3      	strh	r3, [r4, #12]
 800dcae:	e7ad      	b.n	800dc0c <__sflush_r+0x1c>
 800dcb0:	690f      	ldr	r7, [r1, #16]
 800dcb2:	2f00      	cmp	r7, #0
 800dcb4:	d0a9      	beq.n	800dc0a <__sflush_r+0x1a>
 800dcb6:	0793      	lsls	r3, r2, #30
 800dcb8:	680e      	ldr	r6, [r1, #0]
 800dcba:	bf08      	it	eq
 800dcbc:	694b      	ldreq	r3, [r1, #20]
 800dcbe:	600f      	str	r7, [r1, #0]
 800dcc0:	bf18      	it	ne
 800dcc2:	2300      	movne	r3, #0
 800dcc4:	eba6 0807 	sub.w	r8, r6, r7
 800dcc8:	608b      	str	r3, [r1, #8]
 800dcca:	f1b8 0f00 	cmp.w	r8, #0
 800dcce:	dd9c      	ble.n	800dc0a <__sflush_r+0x1a>
 800dcd0:	6a21      	ldr	r1, [r4, #32]
 800dcd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcd4:	4643      	mov	r3, r8
 800dcd6:	463a      	mov	r2, r7
 800dcd8:	4628      	mov	r0, r5
 800dcda:	47b0      	blx	r6
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	dc06      	bgt.n	800dcee <__sflush_r+0xfe>
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcec:	e78e      	b.n	800dc0c <__sflush_r+0x1c>
 800dcee:	4407      	add	r7, r0
 800dcf0:	eba8 0800 	sub.w	r8, r8, r0
 800dcf4:	e7e9      	b.n	800dcca <__sflush_r+0xda>
 800dcf6:	bf00      	nop
 800dcf8:	dfbffffe 	.word	0xdfbffffe

0800dcfc <_fflush_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	690b      	ldr	r3, [r1, #16]
 800dd00:	4605      	mov	r5, r0
 800dd02:	460c      	mov	r4, r1
 800dd04:	b913      	cbnz	r3, 800dd0c <_fflush_r+0x10>
 800dd06:	2500      	movs	r5, #0
 800dd08:	4628      	mov	r0, r5
 800dd0a:	bd38      	pop	{r3, r4, r5, pc}
 800dd0c:	b118      	cbz	r0, 800dd16 <_fflush_r+0x1a>
 800dd0e:	6a03      	ldr	r3, [r0, #32]
 800dd10:	b90b      	cbnz	r3, 800dd16 <_fflush_r+0x1a>
 800dd12:	f7ff f8ab 	bl	800ce6c <__sinit>
 800dd16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0f3      	beq.n	800dd06 <_fflush_r+0xa>
 800dd1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd20:	07d0      	lsls	r0, r2, #31
 800dd22:	d404      	bmi.n	800dd2e <_fflush_r+0x32>
 800dd24:	0599      	lsls	r1, r3, #22
 800dd26:	d402      	bmi.n	800dd2e <_fflush_r+0x32>
 800dd28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd2a:	f7ff fad8 	bl	800d2de <__retarget_lock_acquire_recursive>
 800dd2e:	4628      	mov	r0, r5
 800dd30:	4621      	mov	r1, r4
 800dd32:	f7ff ff5d 	bl	800dbf0 <__sflush_r>
 800dd36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd38:	07da      	lsls	r2, r3, #31
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	d4e4      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	059b      	lsls	r3, r3, #22
 800dd42:	d4e1      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd46:	f7ff facb 	bl	800d2e0 <__retarget_lock_release_recursive>
 800dd4a:	e7dd      	b.n	800dd08 <_fflush_r+0xc>

0800dd4c <__swhatbuf_r>:
 800dd4c:	b570      	push	{r4, r5, r6, lr}
 800dd4e:	460c      	mov	r4, r1
 800dd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd54:	2900      	cmp	r1, #0
 800dd56:	b096      	sub	sp, #88	; 0x58
 800dd58:	4615      	mov	r5, r2
 800dd5a:	461e      	mov	r6, r3
 800dd5c:	da0d      	bge.n	800dd7a <__swhatbuf_r+0x2e>
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd64:	f04f 0100 	mov.w	r1, #0
 800dd68:	bf0c      	ite	eq
 800dd6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd6e:	2340      	movne	r3, #64	; 0x40
 800dd70:	2000      	movs	r0, #0
 800dd72:	6031      	str	r1, [r6, #0]
 800dd74:	602b      	str	r3, [r5, #0]
 800dd76:	b016      	add	sp, #88	; 0x58
 800dd78:	bd70      	pop	{r4, r5, r6, pc}
 800dd7a:	466a      	mov	r2, sp
 800dd7c:	f000 f862 	bl	800de44 <_fstat_r>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	dbec      	blt.n	800dd5e <__swhatbuf_r+0x12>
 800dd84:	9901      	ldr	r1, [sp, #4]
 800dd86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd8e:	4259      	negs	r1, r3
 800dd90:	4159      	adcs	r1, r3
 800dd92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd96:	e7eb      	b.n	800dd70 <__swhatbuf_r+0x24>

0800dd98 <__smakebuf_r>:
 800dd98:	898b      	ldrh	r3, [r1, #12]
 800dd9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd9c:	079d      	lsls	r5, r3, #30
 800dd9e:	4606      	mov	r6, r0
 800dda0:	460c      	mov	r4, r1
 800dda2:	d507      	bpl.n	800ddb4 <__smakebuf_r+0x1c>
 800dda4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	6123      	str	r3, [r4, #16]
 800ddac:	2301      	movs	r3, #1
 800ddae:	6163      	str	r3, [r4, #20]
 800ddb0:	b002      	add	sp, #8
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
 800ddb4:	ab01      	add	r3, sp, #4
 800ddb6:	466a      	mov	r2, sp
 800ddb8:	f7ff ffc8 	bl	800dd4c <__swhatbuf_r>
 800ddbc:	9900      	ldr	r1, [sp, #0]
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f7fe ff3b 	bl	800cc3c <_malloc_r>
 800ddc6:	b948      	cbnz	r0, 800dddc <__smakebuf_r+0x44>
 800ddc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddcc:	059a      	lsls	r2, r3, #22
 800ddce:	d4ef      	bmi.n	800ddb0 <__smakebuf_r+0x18>
 800ddd0:	f023 0303 	bic.w	r3, r3, #3
 800ddd4:	f043 0302 	orr.w	r3, r3, #2
 800ddd8:	81a3      	strh	r3, [r4, #12]
 800ddda:	e7e3      	b.n	800dda4 <__smakebuf_r+0xc>
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	6020      	str	r0, [r4, #0]
 800dde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dde4:	81a3      	strh	r3, [r4, #12]
 800dde6:	9b00      	ldr	r3, [sp, #0]
 800dde8:	6163      	str	r3, [r4, #20]
 800ddea:	9b01      	ldr	r3, [sp, #4]
 800ddec:	6120      	str	r0, [r4, #16]
 800ddee:	b15b      	cbz	r3, 800de08 <__smakebuf_r+0x70>
 800ddf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f000 f837 	bl	800de68 <_isatty_r>
 800ddfa:	b128      	cbz	r0, 800de08 <__smakebuf_r+0x70>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	f023 0303 	bic.w	r3, r3, #3
 800de02:	f043 0301 	orr.w	r3, r3, #1
 800de06:	81a3      	strh	r3, [r4, #12]
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	431d      	orrs	r5, r3
 800de0c:	81a5      	strh	r5, [r4, #12]
 800de0e:	e7cf      	b.n	800ddb0 <__smakebuf_r+0x18>

0800de10 <memmove>:
 800de10:	4288      	cmp	r0, r1
 800de12:	b510      	push	{r4, lr}
 800de14:	eb01 0402 	add.w	r4, r1, r2
 800de18:	d902      	bls.n	800de20 <memmove+0x10>
 800de1a:	4284      	cmp	r4, r0
 800de1c:	4623      	mov	r3, r4
 800de1e:	d807      	bhi.n	800de30 <memmove+0x20>
 800de20:	1e43      	subs	r3, r0, #1
 800de22:	42a1      	cmp	r1, r4
 800de24:	d008      	beq.n	800de38 <memmove+0x28>
 800de26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de2e:	e7f8      	b.n	800de22 <memmove+0x12>
 800de30:	4402      	add	r2, r0
 800de32:	4601      	mov	r1, r0
 800de34:	428a      	cmp	r2, r1
 800de36:	d100      	bne.n	800de3a <memmove+0x2a>
 800de38:	bd10      	pop	{r4, pc}
 800de3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de42:	e7f7      	b.n	800de34 <memmove+0x24>

0800de44 <_fstat_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d07      	ldr	r5, [pc, #28]	; (800de64 <_fstat_r+0x20>)
 800de48:	2300      	movs	r3, #0
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	4611      	mov	r1, r2
 800de50:	602b      	str	r3, [r5, #0]
 800de52:	f7f2 fe34 	bl	8000abe <_fstat>
 800de56:	1c43      	adds	r3, r0, #1
 800de58:	d102      	bne.n	800de60 <_fstat_r+0x1c>
 800de5a:	682b      	ldr	r3, [r5, #0]
 800de5c:	b103      	cbz	r3, 800de60 <_fstat_r+0x1c>
 800de5e:	6023      	str	r3, [r4, #0]
 800de60:	bd38      	pop	{r3, r4, r5, pc}
 800de62:	bf00      	nop
 800de64:	20006e0c 	.word	0x20006e0c

0800de68 <_isatty_r>:
 800de68:	b538      	push	{r3, r4, r5, lr}
 800de6a:	4d06      	ldr	r5, [pc, #24]	; (800de84 <_isatty_r+0x1c>)
 800de6c:	2300      	movs	r3, #0
 800de6e:	4604      	mov	r4, r0
 800de70:	4608      	mov	r0, r1
 800de72:	602b      	str	r3, [r5, #0]
 800de74:	f7f2 fe33 	bl	8000ade <_isatty>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d102      	bne.n	800de82 <_isatty_r+0x1a>
 800de7c:	682b      	ldr	r3, [r5, #0]
 800de7e:	b103      	cbz	r3, 800de82 <_isatty_r+0x1a>
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	bd38      	pop	{r3, r4, r5, pc}
 800de84:	20006e0c 	.word	0x20006e0c

0800de88 <_realloc_r>:
 800de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	4680      	mov	r8, r0
 800de8e:	4614      	mov	r4, r2
 800de90:	460e      	mov	r6, r1
 800de92:	b921      	cbnz	r1, 800de9e <_realloc_r+0x16>
 800de94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de98:	4611      	mov	r1, r2
 800de9a:	f7fe becf 	b.w	800cc3c <_malloc_r>
 800de9e:	b92a      	cbnz	r2, 800deac <_realloc_r+0x24>
 800dea0:	f7ff fa2e 	bl	800d300 <_free_r>
 800dea4:	4625      	mov	r5, r4
 800dea6:	4628      	mov	r0, r5
 800dea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deac:	f000 f81b 	bl	800dee6 <_malloc_usable_size_r>
 800deb0:	4284      	cmp	r4, r0
 800deb2:	4607      	mov	r7, r0
 800deb4:	d802      	bhi.n	800debc <_realloc_r+0x34>
 800deb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800deba:	d812      	bhi.n	800dee2 <_realloc_r+0x5a>
 800debc:	4621      	mov	r1, r4
 800debe:	4640      	mov	r0, r8
 800dec0:	f7fe febc 	bl	800cc3c <_malloc_r>
 800dec4:	4605      	mov	r5, r0
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d0ed      	beq.n	800dea6 <_realloc_r+0x1e>
 800deca:	42bc      	cmp	r4, r7
 800decc:	4622      	mov	r2, r4
 800dece:	4631      	mov	r1, r6
 800ded0:	bf28      	it	cs
 800ded2:	463a      	movcs	r2, r7
 800ded4:	f7ff fa05 	bl	800d2e2 <memcpy>
 800ded8:	4631      	mov	r1, r6
 800deda:	4640      	mov	r0, r8
 800dedc:	f7ff fa10 	bl	800d300 <_free_r>
 800dee0:	e7e1      	b.n	800dea6 <_realloc_r+0x1e>
 800dee2:	4635      	mov	r5, r6
 800dee4:	e7df      	b.n	800dea6 <_realloc_r+0x1e>

0800dee6 <_malloc_usable_size_r>:
 800dee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deea:	1f18      	subs	r0, r3, #4
 800deec:	2b00      	cmp	r3, #0
 800deee:	bfbc      	itt	lt
 800def0:	580b      	ldrlt	r3, [r1, r0]
 800def2:	18c0      	addlt	r0, r0, r3
 800def4:	4770      	bx	lr
	...

0800def8 <_init>:
 800def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800defa:	bf00      	nop
 800defc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800defe:	bc08      	pop	{r3}
 800df00:	469e      	mov	lr, r3
 800df02:	4770      	bx	lr

0800df04 <_fini>:
 800df04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df06:	bf00      	nop
 800df08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df0a:	bc08      	pop	{r3}
 800df0c:	469e      	mov	lr, r3
 800df0e:	4770      	bx	lr
