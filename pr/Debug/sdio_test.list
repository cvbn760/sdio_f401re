
sdio_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800943c  0800943c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800943c  0800943c  0001943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009444  08009444  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800944c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000068  080094b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  080094b4  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013275  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ee8  00000000  00000000  00033350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00036238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d89  00000000  00000000  000373b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197ff  00000000  00000000  00038141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bfc  00000000  00000000  00051940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090481  00000000  00000000  0006a53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005050  00000000  00000000  000fa9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000ffa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d70 	.word	0x08008d70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08008d70 	.word	0x08008d70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <print_err>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void print_err(FRESULT fr){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	switch(fr){
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b13      	cmp	r3, #19
 80005da:	d87b      	bhi.n	80006d4 <print_err+0x108>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <print_err+0x18>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	08000635 	.word	0x08000635
 80005e8:	0800063d 	.word	0x0800063d
 80005ec:	08000645 	.word	0x08000645
 80005f0:	0800064d 	.word	0x0800064d
 80005f4:	08000655 	.word	0x08000655
 80005f8:	0800065d 	.word	0x0800065d
 80005fc:	08000665 	.word	0x08000665
 8000600:	0800066d 	.word	0x0800066d
 8000604:	08000675 	.word	0x08000675
 8000608:	0800067d 	.word	0x0800067d
 800060c:	08000685 	.word	0x08000685
 8000610:	0800068d 	.word	0x0800068d
 8000614:	08000695 	.word	0x08000695
 8000618:	0800069d 	.word	0x0800069d
 800061c:	080006a5 	.word	0x080006a5
 8000620:	080006ad 	.word	0x080006ad
 8000624:	080006b5 	.word	0x080006b5
 8000628:	080006bd 	.word	0x080006bd
 800062c:	080006c5 	.word	0x080006c5
 8000630:	080006cd 	.word	0x080006cd
	case FR_OK:				/* (0) Succeeded */
		printf("SD: FR_OK \n");
 8000634:	4829      	ldr	r0, [pc, #164]	; (80006dc <print_err+0x110>)
 8000636:	f007 fddd 	bl	80081f4 <puts>
		break;
 800063a:	e04b      	b.n	80006d4 <print_err+0x108>
	case FR_DISK_ERR:			/* (1) A hard error occurred in the low level disk I/O layer */
		printf("SD: FR_DISK_ERR \n");
 800063c:	4828      	ldr	r0, [pc, #160]	; (80006e0 <print_err+0x114>)
 800063e:	f007 fdd9 	bl	80081f4 <puts>
		break;
 8000642:	e047      	b.n	80006d4 <print_err+0x108>
	case FR_INT_ERR:				/* (2) Assertion failed */
		printf("SD: FR_INT_ERR \n");
 8000644:	4827      	ldr	r0, [pc, #156]	; (80006e4 <print_err+0x118>)
 8000646:	f007 fdd5 	bl	80081f4 <puts>
		break;
 800064a:	e043      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_READY:			/* (3) The physical drive cannot work */
		printf("SD: FR_NOT_READY \n");
 800064c:	4826      	ldr	r0, [pc, #152]	; (80006e8 <print_err+0x11c>)
 800064e:	f007 fdd1 	bl	80081f4 <puts>
		break;
 8000652:	e03f      	b.n	80006d4 <print_err+0x108>
	case FR_NO_FILE:				/* (4) Could not find the file */
		printf("SD: FR_NO_FILE \n");
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <print_err+0x120>)
 8000656:	f007 fdcd 	bl	80081f4 <puts>
		break;
 800065a:	e03b      	b.n	80006d4 <print_err+0x108>
	case FR_NO_PATH:				/* (5) Could not find the path */
		printf("SD: FR_NO_PATH \n");
 800065c:	4824      	ldr	r0, [pc, #144]	; (80006f0 <print_err+0x124>)
 800065e:	f007 fdc9 	bl	80081f4 <puts>
		break;
 8000662:	e037      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_NAME:		/* (6) The path name format is invalid */
		printf("SD: FR_INVALID_NAME \n");
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <print_err+0x128>)
 8000666:	f007 fdc5 	bl	80081f4 <puts>
		break;
 800066a:	e033      	b.n	80006d4 <print_err+0x108>
	case FR_DENIED:				/* (7) Access denied due to prohibited access or directory full */
		printf("SD: FR_DENIED \n");
 800066c:	4822      	ldr	r0, [pc, #136]	; (80006f8 <print_err+0x12c>)
 800066e:	f007 fdc1 	bl	80081f4 <puts>
		break;
 8000672:	e02f      	b.n	80006d4 <print_err+0x108>
	case FR_EXIST:				/* (8) Access denied due to prohibited access */
		printf("SD: FR_EXIST \n");
 8000674:	4821      	ldr	r0, [pc, #132]	; (80006fc <print_err+0x130>)
 8000676:	f007 fdbd 	bl	80081f4 <puts>
		break;
 800067a:	e02b      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_OBJECT:		/* (9) The file/directory object is invalid */
		printf("SD: FR_INVALID_OBJECT \n");
 800067c:	4820      	ldr	r0, [pc, #128]	; (8000700 <print_err+0x134>)
 800067e:	f007 fdb9 	bl	80081f4 <puts>
		break;
 8000682:	e027      	b.n	80006d4 <print_err+0x108>
	case FR_WRITE_PROTECTED:		/* (10) The physical drive is write protected */
		printf("SD: FR_WRITE_PROTECTED \n");
 8000684:	481f      	ldr	r0, [pc, #124]	; (8000704 <print_err+0x138>)
 8000686:	f007 fdb5 	bl	80081f4 <puts>
		break;
 800068a:	e023      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_DRIVE:		/* (11) The logical drive number is invalid */
		printf("SD: FR_INVALID_DRIVE \n");
 800068c:	481e      	ldr	r0, [pc, #120]	; (8000708 <print_err+0x13c>)
 800068e:	f007 fdb1 	bl	80081f4 <puts>
		break;
 8000692:	e01f      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_ENABLED:			/* (12) The volume has no work area */
		printf("SD: FR_NOT_ENABLED \n");
 8000694:	481d      	ldr	r0, [pc, #116]	; (800070c <print_err+0x140>)
 8000696:	f007 fdad 	bl	80081f4 <puts>
		break;
 800069a:	e01b      	b.n	80006d4 <print_err+0x108>
	case FR_NO_FILESYSTEM:		/* (13) There is no valid FAT volume */
		printf("SD: FR_NO_FILESYSTEM \n");
 800069c:	481c      	ldr	r0, [pc, #112]	; (8000710 <print_err+0x144>)
 800069e:	f007 fda9 	bl	80081f4 <puts>
		break;
 80006a2:	e017      	b.n	80006d4 <print_err+0x108>
	case FR_MKFS_ABORTED:		/* (14) The f_mkfs() aborted due to any problem */
		printf("SD: FR_MKFS_ABORTED \n");
 80006a4:	481b      	ldr	r0, [pc, #108]	; (8000714 <print_err+0x148>)
 80006a6:	f007 fda5 	bl	80081f4 <puts>
		break;
 80006aa:	e013      	b.n	80006d4 <print_err+0x108>
	case FR_TIMEOUT:				/* (15) Could not get a grant to access the volume within defined period */
		printf("SD: FR_TIMEOUT \n");
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <print_err+0x14c>)
 80006ae:	f007 fda1 	bl	80081f4 <puts>
		break;
 80006b2:	e00f      	b.n	80006d4 <print_err+0x108>
	case FR_LOCKED:				/* (16) The operation is rejected according to the file sharing policy */
		printf("SD: FR_LOCKED \n");
 80006b4:	4819      	ldr	r0, [pc, #100]	; (800071c <print_err+0x150>)
 80006b6:	f007 fd9d 	bl	80081f4 <puts>
		break;
 80006ba:	e00b      	b.n	80006d4 <print_err+0x108>
	case FR_NOT_ENOUGH_CORE:		/* (17) LFN working buffer could not be allocated */
		printf("SD: FR_NOT_ENOUGH_CORE \n");
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <print_err+0x154>)
 80006be:	f007 fd99 	bl	80081f4 <puts>
		break;
 80006c2:	e007      	b.n	80006d4 <print_err+0x108>
	case FR_TOO_MANY_OPEN_FILES:	/* (18) Number of open files > _FS_LOCK */
		printf("SD: FR_TOO_MANY_OPEN_FILES \n");
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <print_err+0x158>)
 80006c6:	f007 fd95 	bl	80081f4 <puts>
		break;
 80006ca:	e003      	b.n	80006d4 <print_err+0x108>
	case FR_INVALID_PARAMETER:	/* (19) Given parameter is invalid */
		printf("SD: FR_INVALID_PARAMETER \n");
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <print_err+0x15c>)
 80006ce:	f007 fd91 	bl	80081f4 <puts>
		break;
 80006d2:	bf00      	nop
	}
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08008d88 	.word	0x08008d88
 80006e0:	08008d94 	.word	0x08008d94
 80006e4:	08008da8 	.word	0x08008da8
 80006e8:	08008db8 	.word	0x08008db8
 80006ec:	08008dcc 	.word	0x08008dcc
 80006f0:	08008ddc 	.word	0x08008ddc
 80006f4:	08008dec 	.word	0x08008dec
 80006f8:	08008e04 	.word	0x08008e04
 80006fc:	08008e14 	.word	0x08008e14
 8000700:	08008e24 	.word	0x08008e24
 8000704:	08008e3c 	.word	0x08008e3c
 8000708:	08008e54 	.word	0x08008e54
 800070c:	08008e6c 	.word	0x08008e6c
 8000710:	08008e80 	.word	0x08008e80
 8000714:	08008e98 	.word	0x08008e98
 8000718:	08008eb0 	.word	0x08008eb0
 800071c:	08008ec0 	.word	0x08008ec0
 8000720:	08008ed0 	.word	0x08008ed0
 8000724:	08008ee8 	.word	0x08008ee8
 8000728:	08008f04 	.word	0x08008f04

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fccb 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f87d 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 f987 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000742:	f000 f95d 	bl	8000a00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f931 	bl	80009ac <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800074a:	f000 f90f 	bl	800096c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800074e:	f004 fa19 	bl	8004b84 <MX_FATFS_Init>
  MX_I2C1_Init();
 8000752:	f000 f8dd 	bl	8000910 <MX_I2C1_Init>

  FATFS FatFs;
  FIL fil;
  FRESULT fr;

  fr = f_mount(&FatFs, "", 1);
 8000756:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800075a:	f103 0310 	add.w	r3, r3, #16
 800075e:	3b1c      	subs	r3, #28
 8000760:	2201      	movs	r2, #1
 8000762:	4930      	ldr	r1, [pc, #192]	; (8000824 <main+0xf8>)
 8000764:	4618      	mov	r0, r3
 8000766:	f006 fdfd 	bl	8007364 <f_mount>
 800076a:	4603      	mov	r3, r0
 800076c:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8000770:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000774:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 8000776:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800077a:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff23 	bl	80005cc <print_err>
  if(fr == FR_OK){
 8000786:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800078a:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d105      	bne.n	80007a0 <main+0x74>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	2120      	movs	r1, #32
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <main+0xfc>)
 800079a:	f001 fb41 	bl	8001e20 <HAL_GPIO_WritePin>
 800079e:	e004      	b.n	80007aa <main+0x7e>
  } else {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2120      	movs	r1, #32
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <main+0xfc>)
 80007a6:	f001 fb3b 	bl	8001e20 <HAL_GPIO_WritePin>
  }

  fr = f_open(&fil, "senasic_app_snp736.bin", FA_READ);
 80007aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80007ae:	3b2c      	subs	r3, #44	; 0x2c
 80007b0:	2201      	movs	r2, #1
 80007b2:	491e      	ldr	r1, [pc, #120]	; (800082c <main+0x100>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f006 fe1b 	bl	80073f0 <f_open>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80007c0:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80007c4:	7013      	strb	r3, [r2, #0]
  print_err(fr);
 80007c6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80007ca:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fefb 	bl	80005cc <print_err>

  unsigned int bytesRead;
  char readBuff[128];
  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 80007d6:	e007      	b.n	80007e8 <main+0xbc>
	  printf("%02x\n ", readBuff[0]);
 80007d8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80007dc:	f813 3cf0 	ldrb.w	r3, [r3, #-240]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4813      	ldr	r0, [pc, #76]	; (8000830 <main+0x104>)
 80007e4:	f007 fca0 	bl	8008128 <iprintf>
  while(f_read(&fil, readBuff, 1, &bytesRead) == FR_OK){
 80007e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80007ec:	3b30      	subs	r3, #48	; 0x30
 80007ee:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80007f2:	3930      	subs	r1, #48	; 0x30
 80007f4:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80007f8:	382c      	subs	r0, #44	; 0x2c
 80007fa:	2201      	movs	r2, #1
 80007fc:	f006 ffd4 	bl	80077a8 <f_read>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0e8      	beq.n	80007d8 <main+0xac>
//  unsigned int bytesRead;
//  fr = f_read(&fil, readBuff, sizeof(readBuff)-1, &bytesRead);
//  print_err(fr);
//  printf("%s\n ", readBuff);

  f_close(&fil);
 8000806:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800080a:	3b2c      	subs	r3, #44	; 0x2c
 800080c:	4618      	mov	r0, r3
 800080e:	f007 f9a8 	bl	8007b62 <f_close>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000816:	f000 fccd 	bl	80011b4 <HAL_Delay>
	  printf("test\n");
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <main+0x108>)
 800081c:	f007 fcea 	bl	80081f4 <puts>
	  HAL_Delay(1000);
 8000820:	e7f7      	b.n	8000812 <main+0xe6>
 8000822:	bf00      	nop
 8000824:	08008f20 	.word	0x08008f20
 8000828:	40020000 	.word	0x40020000
 800082c:	08008f24 	.word	0x08008f24
 8000830:	08008f3c 	.word	0x08008f3c
 8000834:	08008f44 	.word	0x08008f44

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f007 fdb4 	bl	80083b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <SystemClock_Config+0xd0>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <SystemClock_Config+0xd0>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <SystemClock_Config+0xd0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b23      	ldr	r3, [pc, #140]	; (800090c <SystemClock_Config+0xd4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <SystemClock_Config+0xd4>)
 8000886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <SystemClock_Config+0xd4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089c:	2301      	movs	r3, #1
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2310      	movs	r3, #16
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2302      	movs	r3, #2
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008ac:	2308      	movs	r3, #8
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008b0:	2354      	movs	r3, #84	; 0x54
 80008b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0320 	add.w	r3, r7, #32
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fc0b 	bl	80020dc <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008cc:	f000 f958 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2302      	movs	r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2102      	movs	r1, #2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fe6c 	bl	80025cc <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008fa:	f000 f941 	bl	8000b80 <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	3750      	adds	r7, #80	; 0x50
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2C1_Init+0x50>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_I2C1_Init+0x54>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_I2C1_Init+0x50>)
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_I2C1_Init+0x58>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_I2C1_Init+0x50>)
 800092e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000932:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_I2C1_Init+0x50>)
 800094e:	f001 fa81 	bl	8001e54 <HAL_I2C_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000958:	f000 f912 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000084 	.word	0x20000084
 8000964:	40005400 	.word	0x40005400
 8000968:	000186a0 	.word	0x000186a0

0800096c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_SDIO_SD_Init+0x38>)
 8000972:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <MX_SDIO_SD_Init+0x3c>)
 8000974:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_SDIO_SD_Init+0x38>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_SDIO_SD_Init+0x38>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_SDIO_SD_Init+0x38>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_SDIO_SD_Init+0x38>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <MX_SDIO_SD_Init+0x38>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <MX_SDIO_SD_Init+0x38>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	200000d8 	.word	0x200000d8
 80009a8:	40012c00 	.word	0x40012c00

080009ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART2_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f003 f8ab 	bl	8003b3e <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 f8c7 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000021c 	.word	0x2000021c
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	203b      	movs	r0, #59	; 0x3b
 8000a28:	f000 fcc3 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a2c:	203b      	movs	r0, #59	; 0x3b
 8000a2e:	f000 fcdc 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2045      	movs	r0, #69	; 0x45
 8000a38:	f000 fcbb 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a3c:	2045      	movs	r0, #69	; 0x45
 8000a3e:	f000 fcd4 	bl	80013ea <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2120      	movs	r1, #32
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <MX_GPIO_Init+0xf0>)
 8000af8:	f001 f992 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_GPIO_Init+0xf4>)
 8000b14:	f001 f800 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0xf0>)
 8000b30:	f000 fff2 	bl	8001b18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020800 	.word	0x40020800

08000b48 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e009      	b.n	8000b6e <_write+0x26>
	{
		ITM_SendChar(*ptr ++); // Reset the printf function to ITM_SENDCHAR
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd0a 	bl	800057c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dbf1      	blt.n	8000b5a <_write+0x12>
	}
	return len;
 8000b76:	687b      	ldr	r3, [r7, #4]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bca:	2007      	movs	r0, #7
 8000bcc:	f000 fbe6 	bl	800139c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1a:	23c0      	movs	r3, #192	; 0xc0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <HAL_I2C_MspInit+0x8c>)
 8000c36:	f000 ff6f 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40005400 	.word	0x40005400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400

08000c6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a64      	ldr	r2, [pc, #400]	; (8000e1c <HAL_SD_MspInit+0x1b0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f040 80c1 	bne.w	8000e12 <HAL_SD_MspInit+0x1a6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b62      	ldr	r3, [pc, #392]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	4a61      	ldr	r2, [pc, #388]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000c9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca0:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b5b      	ldr	r3, [pc, #364]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a5a      	ldr	r2, [pc, #360]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b58      	ldr	r3, [pc, #352]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a53      	ldr	r2, [pc, #332]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <HAL_SD_MspInit+0x1b4>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ce4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ce8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4848      	ldr	r0, [pc, #288]	; (8000e24 <HAL_SD_MspInit+0x1b8>)
 8000d02:	f000 ff09 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d16:	230c      	movs	r3, #12
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4841      	ldr	r0, [pc, #260]	; (8000e28 <HAL_SD_MspInit+0x1bc>)
 8000d22:	f000 fef9 	bl	8001b18 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d26:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d28:	4a41      	ldr	r2, [pc, #260]	; (8000e30 <HAL_SD_MspInit+0x1c4>)
 8000d2a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d32:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d34:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3a:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d40:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d46:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d4e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d56:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d5e:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d64:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d80:	482a      	ldr	r0, [pc, #168]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d82:	f000 fb4d 	bl	8001420 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000d8c:	f7ff fef8 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
 8000d96:	4a25      	ldr	r2, [pc, #148]	; (8000e2c <HAL_SD_MspInit+0x1c0>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000d9e:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_SD_MspInit+0x1cc>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000da4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000dc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000dc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dcc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000de8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000df0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000df6:	480f      	ldr	r0, [pc, #60]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000df8:	f000 fb12 	bl	8001420 <HAL_DMA_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000e02:	f7ff febd 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e0c:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <HAL_SD_MspInit+0x1c8>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020c00 	.word	0x40020c00
 8000e2c:	2000015c 	.word	0x2000015c
 8000e30:	40026458 	.word	0x40026458
 8000e34:	200001bc 	.word	0x200001bc
 8000e38:	400264a0 	.word	0x400264a0

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0x8c>)
 8000eb2:	f000 fe31 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f92c 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA2_Stream3_IRQHandler+0x10>)
 8000f26:	f000 fb81 	bl	800162c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000015c 	.word	0x2000015c

08000f34 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DMA2_Stream6_IRQHandler+0x10>)
 8000f3a:	f000 fb77 	bl	800162c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001bc 	.word	0x200001bc

08000f48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
  }

  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
  return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f007 fa28 	bl	8008470 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20018000 	.word	0x20018000
 800104c:	00000400 	.word	0x00000400
 8001050:	20000260 	.word	0x20000260
 8001054:	200003f8 	.word	0x200003f8

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f007 f9e7 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fb3d 	bl	800072c <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010c0:	0800944c 	.word	0x0800944c
  ldr r2, =_sbss
 80010c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010c8:	200003f8 	.word	0x200003f8

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f94f 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fd42 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f967 	bl	8001406 <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f92f 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000008 	.word	0x20000008
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20000264 	.word	0x20000264

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000264 	.word	0x20000264

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff feb6 	bl	800119c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e099      	b.n	8001570 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145c:	e00f      	b.n	800147e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145e:	f7ff fe9d 	bl	800119c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b05      	cmp	r3, #5
 800146a:	d908      	bls.n	800147e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e078      	b.n	8001570 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e8      	bne.n	800145e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_DMA_Init+0x158>)
 8001498:	4013      	ands	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d107      	bne.n	80014e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4313      	orrs	r3, r2
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f023 0307 	bic.w	r3, r3, #7
 80014fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2b04      	cmp	r3, #4
 8001510:	d117      	bne.n	8001542 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fa7b 	bl	8001a20 <DMA_CheckFifoParam>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2240      	movs	r2, #64	; 0x40
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800153e:	2301      	movs	r3, #1
 8001540:	e016      	b.n	8001570 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fa32 	bl	80019b4 <DMA_CalcBaseAndBitshift>
 8001550:	4603      	mov	r3, r0
 8001552:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	409a      	lsls	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	f010803f 	.word	0xf010803f

0800157c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Start_IT+0x26>
 800159e:	2302      	movs	r3, #2
 80015a0:	e040      	b.n	8001624 <HAL_DMA_Start_IT+0xa8>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d12f      	bne.n	8001616 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f9c4 	bl	8001958 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	223f      	movs	r2, #63	; 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0216 	orr.w	r2, r2, #22
 80015ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0208 	orr.w	r2, r2, #8
 8001602:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e005      	b.n	8001622 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800161e:	2302      	movs	r3, #2
 8001620:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001622:	7dfb      	ldrb	r3, [r7, #23]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001638:	4b8e      	ldr	r3, [pc, #568]	; (8001874 <HAL_DMA_IRQHandler+0x248>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a8e      	ldr	r2, [pc, #568]	; (8001878 <HAL_DMA_IRQHandler+0x24c>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0a9b      	lsrs	r3, r3, #10
 8001644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2208      	movs	r2, #8
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01a      	beq.n	8001698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0204 	bic.w	r2, r2, #4
 800167e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2208      	movs	r2, #8
 8001686:	409a      	lsls	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	2201      	movs	r2, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d012      	beq.n	80016ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2201      	movs	r2, #1
 80016bc:	409a      	lsls	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	2204      	movs	r2, #4
 80016d4:	409a      	lsls	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d012      	beq.n	8001704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00b      	beq.n	8001704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2204      	movs	r2, #4
 80016f2:	409a      	lsls	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	2210      	movs	r2, #16
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d043      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d03c      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	2210      	movs	r2, #16
 8001728:	409a      	lsls	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d018      	beq.n	800176e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d024      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	4798      	blx	r3
 800175a:	e01f      	b.n	800179c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01b      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
 800176c:	e016      	b.n	800179c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0208 	bic.w	r2, r2, #8
 800178a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2220      	movs	r2, #32
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 808f 	beq.w	80018cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8087 	beq.w	80018cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2220      	movs	r2, #32
 80017c4:	409a      	lsls	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d136      	bne.n	8001844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0216 	bic.w	r2, r2, #22
 80017e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <HAL_DMA_IRQHandler+0x1da>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0208 	bic.w	r2, r2, #8
 8001814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	223f      	movs	r2, #63	; 0x3f
 800181c:	409a      	lsls	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001836:	2b00      	cmp	r3, #0
 8001838:	d07e      	beq.n	8001938 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
        }
        return;
 8001842:	e079      	b.n	8001938 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d01d      	beq.n	800188e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10d      	bne.n	800187c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	2b00      	cmp	r3, #0
 8001866:	d031      	beq.n	80018cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
 8001870:	e02c      	b.n	80018cc <HAL_DMA_IRQHandler+0x2a0>
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000
 8001878:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e01e      	b.n	80018cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10f      	bne.n	80018bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0210 	bic.w	r2, r2, #16
 80018aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d032      	beq.n	800193a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d022      	beq.n	8001926 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2205      	movs	r2, #5
 80018e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3301      	adds	r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	429a      	cmp	r2, r3
 8001902:	d307      	bcc.n	8001914 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f2      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x2cc>
 8001912:	e000      	b.n	8001916 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001914:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
 8001936:	e000      	b.n	800193a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001938:	bf00      	nop
    }
  }
}
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001974:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b40      	cmp	r3, #64	; 0x40
 8001984:	d108      	bne.n	8001998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001996:	e007      	b.n	80019a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3b10      	subs	r3, #16
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <DMA_CalcBaseAndBitshift+0x64>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <DMA_CalcBaseAndBitshift+0x68>)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d909      	bls.n	80019f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	1d1a      	adds	r2, r3, #4
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58
 80019f4:	e007      	b.n	8001a06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	aaaaaaab 	.word	0xaaaaaaab
 8001a1c:	08008fac 	.word	0x08008fac

08001a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11f      	bne.n	8001a7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d856      	bhi.n	8001aee <DMA_CheckFifoParam+0xce>
 8001a40:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <DMA_CheckFifoParam+0x28>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a59 	.word	0x08001a59
 8001a4c:	08001a6b 	.word	0x08001a6b
 8001a50:	08001a59 	.word	0x08001a59
 8001a54:	08001aef 	.word	0x08001aef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d046      	beq.n	8001af2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a68:	e043      	b.n	8001af2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a72:	d140      	bne.n	8001af6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a78:	e03d      	b.n	8001af6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a82:	d121      	bne.n	8001ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d837      	bhi.n	8001afa <DMA_CheckFifoParam+0xda>
 8001a8a:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <DMA_CheckFifoParam+0x70>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001aa1 	.word	0x08001aa1
 8001a94:	08001aa7 	.word	0x08001aa7
 8001a98:	08001aa1 	.word	0x08001aa1
 8001a9c:	08001ab9 	.word	0x08001ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa4:	e030      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d025      	beq.n	8001afe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab6:	e022      	b.n	8001afe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ac0:	d11f      	bne.n	8001b02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ac6:	e01c      	b.n	8001b02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d903      	bls.n	8001ad6 <DMA_CheckFifoParam+0xb6>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d003      	beq.n	8001adc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ad4:	e018      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8001ada:	e015      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00e      	beq.n	8001b06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
      break;
 8001aec:	e00b      	b.n	8001b06 <DMA_CheckFifoParam+0xe6>
      break;
 8001aee:	bf00      	nop
 8001af0:	e00a      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      break;
 8001af2:	bf00      	nop
 8001af4:	e008      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      break;
 8001af6:	bf00      	nop
 8001af8:	e006      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      break;
 8001afa:	bf00      	nop
 8001afc:	e004      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      break;
 8001afe:	bf00      	nop
 8001b00:	e002      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b02:	bf00      	nop
 8001b04:	e000      	b.n	8001b08 <DMA_CheckFifoParam+0xe8>
      break;
 8001b06:	bf00      	nop
    }
  } 
  
  return status; 
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e159      	b.n	8001de8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8148 	bne.w	8001de2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d005      	beq.n	8001b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a2 	beq.w	8001de2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_GPIO_Init+0x2e8>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a56      	ldr	r2, [pc, #344]	; (8001e00 <HAL_GPIO_Init+0x2e8>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <HAL_GPIO_Init+0x2e8>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cba:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x2ec>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a49      	ldr	r2, [pc, #292]	; (8001e08 <HAL_GPIO_Init+0x2f0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x202>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a48      	ldr	r2, [pc, #288]	; (8001e0c <HAL_GPIO_Init+0x2f4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x1fe>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x1fa>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a46      	ldr	r2, [pc, #280]	; (8001e14 <HAL_GPIO_Init+0x2fc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x1f6>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a45      	ldr	r2, [pc, #276]	; (8001e18 <HAL_GPIO_Init+0x300>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x1f2>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e008      	b.n	8001d1c <HAL_GPIO_Init+0x204>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x204>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x204>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x204>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x204>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f002 0203 	and.w	r2, r2, #3
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	4093      	lsls	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <HAL_GPIO_Init+0x2ec>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3a:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5e:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d64:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db2:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ddc:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_GPIO_Init+0x304>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	f67f aea2 	bls.w	8001b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e12b      	b.n	80020be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe feae 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eb8:	f000 fd80 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8001ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4a81      	ldr	r2, [pc, #516]	; (80020c8 <HAL_I2C_Init+0x274>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d807      	bhi.n	8001ed8 <HAL_I2C_Init+0x84>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a80      	ldr	r2, [pc, #512]	; (80020cc <HAL_I2C_Init+0x278>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	bf94      	ite	ls
 8001ed0:	2301      	movls	r3, #1
 8001ed2:	2300      	movhi	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	e006      	b.n	8001ee6 <HAL_I2C_Init+0x92>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a7d      	ldr	r2, [pc, #500]	; (80020d0 <HAL_I2C_Init+0x27c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	bf94      	ite	ls
 8001ee0:	2301      	movls	r3, #1
 8001ee2:	2300      	movhi	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0e7      	b.n	80020be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4a78      	ldr	r2, [pc, #480]	; (80020d4 <HAL_I2C_Init+0x280>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0c9b      	lsrs	r3, r3, #18
 8001ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <HAL_I2C_Init+0x274>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d802      	bhi.n	8001f28 <HAL_I2C_Init+0xd4>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3301      	adds	r3, #1
 8001f26:	e009      	b.n	8001f3c <HAL_I2C_Init+0xe8>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	4a69      	ldr	r2, [pc, #420]	; (80020d8 <HAL_I2C_Init+0x284>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	495c      	ldr	r1, [pc, #368]	; (80020c8 <HAL_I2C_Init+0x274>)
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	d819      	bhi.n	8001f90 <HAL_I2C_Init+0x13c>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1e59      	subs	r1, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f70:	400b      	ands	r3, r1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_I2C_Init+0x138>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1e59      	subs	r1, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8a:	e051      	b.n	8002030 <HAL_I2C_Init+0x1dc>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e04f      	b.n	8002030 <HAL_I2C_Init+0x1dc>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d111      	bne.n	8001fbc <HAL_I2C_Init+0x168>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e58      	subs	r0, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e012      	b.n	8001fe2 <HAL_I2C_Init+0x18e>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e58      	subs	r0, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	0099      	lsls	r1, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Init+0x196>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e022      	b.n	8002030 <HAL_I2C_Init+0x1dc>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <HAL_I2C_Init+0x1bc>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1e58      	subs	r0, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6859      	ldr	r1, [r3, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	440b      	add	r3, r1
 8002000:	fbb0 f3f3 	udiv	r3, r0, r3
 8002004:	3301      	adds	r3, #1
 8002006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200e:	e00f      	b.n	8002030 <HAL_I2C_Init+0x1dc>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	0099      	lsls	r1, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	fbb0 f3f3 	udiv	r3, r0, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	6809      	ldr	r1, [r1, #0]
 8002034:	4313      	orrs	r3, r2
 8002036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800205e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6911      	ldr	r1, [r2, #16]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68d2      	ldr	r2, [r2, #12]
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	430b      	orrs	r3, r1
 8002072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	000186a0 	.word	0x000186a0
 80020cc:	001e847f 	.word	0x001e847f
 80020d0:	003d08ff 	.word	0x003d08ff
 80020d4:	431bde83 	.word	0x431bde83
 80020d8:	10624dd3 	.word	0x10624dd3

080020dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e267      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d075      	beq.n	80021e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d00c      	beq.n	8002120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210e:	2b08      	cmp	r3, #8
 8002110:	d112      	bne.n	8002138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211e:	d10b      	bne.n	8002138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	4b7e      	ldr	r3, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d05b      	beq.n	80021e4 <HAL_RCC_OscConfig+0x108>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d157      	bne.n	80021e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e242      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x74>
 8002142:	4b76      	ldr	r3, [pc, #472]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a75      	ldr	r2, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xb0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x98>
 800215a:	4b70      	ldr	r3, [pc, #448]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6f      	ldr	r2, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6d      	ldr	r3, [pc, #436]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6c      	ldr	r2, [pc, #432]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xb0>
 8002174:	4b69      	ldr	r3, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a68      	ldr	r2, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a65      	ldr	r2, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff f802 	bl	800119c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe fffe 	bl	800119c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e207      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xc0>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe ffee 	bl	800119c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c4:	f7fe ffea 	bl	800119c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1f3      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0xe8>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x152>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1c7      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4937      	ldr	r1, [pc, #220]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_OscConfig+0x244>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe ffa3 	bl	800119c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225a:	f7fe ff9f 	bl	800119c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1a8      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4925      	ldr	r1, [pc, #148]	; (800231c <HAL_RCC_OscConfig+0x240>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_OscConfig+0x244>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe ff82 	bl	800119c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229c:	f7fe ff7e 	bl	800119c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e187      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d036      	beq.n	8002334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_RCC_OscConfig+0x248>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7fe ff62 	bl	800119c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022dc:	f7fe ff5e 	bl	800119c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e167      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_OscConfig+0x240>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x200>
 80022fa:	e01b      	b.n	8002334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x248>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe ff4b 	bl	800119c <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	e00e      	b.n	8002328 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230a:	f7fe ff47 	bl	800119c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d907      	bls.n	8002328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e150      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
 800231c:	40023800 	.word	0x40023800
 8002320:	42470000 	.word	0x42470000
 8002324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ea      	bne.n	800230a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8097 	beq.w	8002470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b7d      	ldr	r3, [pc, #500]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a7c      	ldr	r2, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b77      	ldr	r3, [pc, #476]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b74      	ldr	r3, [pc, #464]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7fe ff07 	bl	800119c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7fe ff03 	bl	800119c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e10c      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x474>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2ea>
 80023b8:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x324>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x30c>
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a5e      	ldr	r2, [pc, #376]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a5b      	ldr	r2, [pc, #364]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0x324>
 80023e8:	4b58      	ldr	r3, [pc, #352]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a57      	ldr	r2, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	4b55      	ldr	r3, [pc, #340]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fec8 	bl	800119c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe fec4 	bl	800119c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0cb      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	4b49      	ldr	r3, [pc, #292]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ee      	beq.n	8002410 <HAL_RCC_OscConfig+0x334>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe feb2 	bl	800119c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe feae 	bl	800119c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0b5      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ee      	bne.n	800243c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	4a38      	ldr	r2, [pc, #224]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a1 	beq.w	80025bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247a:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0x470>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b08      	cmp	r3, #8
 8002484:	d05c      	beq.n	8002540 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d141      	bne.n	8002512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_RCC_OscConfig+0x478>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fe82 	bl	800119c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fe7e 	bl	800119c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e087      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	491b      	ldr	r1, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x470>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x478>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fe57 	bl	800119c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fe53 	bl	800119c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e05c      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x416>
 8002510:	e054      	b.n	80025bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_OscConfig+0x478>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fe40 	bl	800119c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fe3c 	bl	800119c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e045      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_OscConfig+0x470>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x444>
 800253e:	e03d      	b.n	80025bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e038      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
 800254c:	40023800 	.word	0x40023800
 8002550:	40007000 	.word	0x40007000
 8002554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x4ec>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d028      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d121      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d11a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002588:	4013      	ands	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800258e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	4293      	cmp	r3, r2
 8002592:	d111      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0cc      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d90c      	bls.n	8002608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b65      	ldr	r3, [pc, #404]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d044      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d119      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	2b03      	cmp	r3, #3
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e067      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4934      	ldr	r1, [pc, #208]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fd6e 	bl	800119c <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fe fd6a 	bl	800119c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d20c      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f821 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fcce 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00
 8002788:	40023800 	.word	0x40023800
 800278c:	08008f94 	.word	0x08008f94
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800279c:	b094      	sub	sp, #80	; 0x50
 800279e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	647b      	str	r3, [r7, #68]	; 0x44
 80027a4:	2300      	movs	r3, #0
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a8:	2300      	movs	r3, #0
 80027aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b0:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d00d      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x40>
 80027bc:	2b08      	cmp	r3, #8
 80027be:	f200 80e1 	bhi.w	8002984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x34>
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ca:	e0db      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_GetSysClockFreq+0x204>)
 80027ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027d0:	e0db      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d6:	e0d8      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d8:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d063      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	2200      	movs	r2, #0
 80027f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
 8002802:	2300      	movs	r3, #0
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
 8002806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800280a:	4622      	mov	r2, r4
 800280c:	462b      	mov	r3, r5
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281c:	0150      	lsls	r0, r2, #5
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4621      	mov	r1, r4
 8002824:	1a51      	subs	r1, r2, r1
 8002826:	6139      	str	r1, [r7, #16]
 8002828:	4629      	mov	r1, r5
 800282a:	eb63 0301 	sbc.w	r3, r3, r1
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800283c:	4659      	mov	r1, fp
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	4651      	mov	r1, sl
 8002842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002846:	4651      	mov	r1, sl
 8002848:	018a      	lsls	r2, r1, #6
 800284a:	4651      	mov	r1, sl
 800284c:	ebb2 0801 	subs.w	r8, r2, r1
 8002850:	4659      	mov	r1, fp
 8002852:	eb63 0901 	sbc.w	r9, r3, r1
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800286a:	4690      	mov	r8, r2
 800286c:	4699      	mov	r9, r3
 800286e:	4623      	mov	r3, r4
 8002870:	eb18 0303 	adds.w	r3, r8, r3
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	462b      	mov	r3, r5
 8002878:	eb49 0303 	adc.w	r3, r9, r3
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800288a:	4629      	mov	r1, r5
 800288c:	024b      	lsls	r3, r1, #9
 800288e:	4621      	mov	r1, r4
 8002890:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002894:	4621      	mov	r1, r4
 8002896:	024a      	lsls	r2, r1, #9
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289e:	2200      	movs	r2, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028a8:	f7fd fcea 	bl	8000280 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4613      	mov	r3, r2
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	e058      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	099b      	lsrs	r3, r3, #6
 80028bc:	2200      	movs	r2, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	4611      	mov	r1, r2
 80028c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	2300      	movs	r3, #0
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028d0:	4642      	mov	r2, r8
 80028d2:	464b      	mov	r3, r9
 80028d4:	f04f 0000 	mov.w	r0, #0
 80028d8:	f04f 0100 	mov.w	r1, #0
 80028dc:	0159      	lsls	r1, r3, #5
 80028de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e2:	0150      	lsls	r0, r2, #5
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4641      	mov	r1, r8
 80028ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ee:	4649      	mov	r1, r9
 80028f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002900:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002904:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002908:	ebb2 040a 	subs.w	r4, r2, sl
 800290c:	eb63 050b 	sbc.w	r5, r3, fp
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	00eb      	lsls	r3, r5, #3
 800291a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291e:	00e2      	lsls	r2, r4, #3
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	4643      	mov	r3, r8
 8002926:	18e3      	adds	r3, r4, r3
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	464b      	mov	r3, r9
 800292c:	eb45 0303 	adc.w	r3, r5, r3
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293e:	4629      	mov	r1, r5
 8002940:	028b      	lsls	r3, r1, #10
 8002942:	4621      	mov	r1, r4
 8002944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002948:	4621      	mov	r1, r4
 800294a:	028a      	lsls	r2, r1, #10
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	61fa      	str	r2, [r7, #28]
 8002958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295c:	f7fd fc90 	bl	8000280 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_GetSysClockFreq+0x200>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	3301      	adds	r3, #1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800297a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetSysClockFreq+0x204>)
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800298c:	4618      	mov	r0, r3
 800298e:	3750      	adds	r7, #80	; 0x50
 8002990:	46bd      	mov	sp, r7
 8002992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff0 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08008fa4 	.word	0x08008fa4

080029e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e8:	f7ff ffdc 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0b5b      	lsrs	r3, r3, #13
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	08008fa4 	.word	0x08008fa4

08002a0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e022      	b.n	8002a64 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe f91b 	bl	8000c6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f814 	bl	8002a6c <HAL_SD_InitCard>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00a      	b.n	8002a64 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002a88:	2376      	movs	r3, #118	; 0x76
 8002a8a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681d      	ldr	r5, [r3, #0]
 8002a90:	466c      	mov	r4, sp
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a9e:	f107 0308 	add.w	r3, r7, #8
 8002aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f001 fb0b 	bl	80040c0 <SDIO_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e04f      	b.n	8002b5c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_SD_InitCard+0xf8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 fb32 	bl	8004130 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <HAL_SD_InitCard+0xf8>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002ad2:	2002      	movs	r0, #2
 8002ad4:	f7fe fb6e 	bl	80011b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fe11 	bl	8003700 <SD_PowerON>
 8002ade:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e02e      	b.n	8002b5c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fd30 	bl	8003564 <SD_InitCard>
 8002b04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e01b      	b.n	8002b5c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 fb91 	bl	8004254 <SDMMC_CmdBlockLength>
 8002b32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00f      	beq.n	8002b5a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_SD_InitCard+0xfc>)
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	422580a0 	.word	0x422580a0
 8002b68:	004005ff 	.word	0x004005ff

08002b6c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	; 0x30
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0c0      	b.n	8002d16 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f040 80b9 	bne.w	8002d14 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	441a      	add	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d907      	bls.n	8002bc6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0a7      	b.n	8002d16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a4c      	ldr	r2, [pc, #304]	; (8002d20 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a4b      	ldr	r2, [pc, #300]	; (8002d24 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002bf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2200      	movs	r2, #0
 8002c00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3380      	adds	r3, #128	; 0x80
 8002c30:	4619      	mov	r1, r3
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	025b      	lsls	r3, r3, #9
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	f7fe fc9f 	bl	800157c <HAL_DMA_Start_IT>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e050      	b.n	8002d16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d002      	beq.n	8002c88 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	025b      	lsls	r3, r3, #9
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	025b      	lsls	r3, r3, #9
 8002c92:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002c94:	2390      	movs	r3, #144	; 0x90
 8002c96:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f107 0210 	add.w	r2, r7, #16
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 faa4 	bl	80041fc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d90a      	bls.n	8002cd0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2282      	movs	r2, #130	; 0x82
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fb08 	bl	80042dc <SDMMC_CmdReadMultiBlock>
 8002ccc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002cce:	e009      	b.n	8002ce4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2281      	movs	r2, #129	; 0x81
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fadb 	bl	8004298 <SDMMC_CmdReadSingleBlock>
 8002ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e002      	b.n	8002d16 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3730      	adds	r7, #48	; 0x30
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	0800344f 	.word	0x0800344f
 8002d24:	080034c1 	.word	0x080034c1
 8002d28:	004005ff 	.word	0x004005ff
 8002d2c:	4225858c 	.word	0x4225858c

08002d30 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08c      	sub	sp, #48	; 0x30
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0c5      	b.n	8002ee4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 80be 	bne.w	8002ee2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	441a      	add	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d907      	bls.n	8002d8a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0ac      	b.n	8002ee4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	4a4e      	ldr	r2, [pc, #312]	; (8002eec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	4a4d      	ldr	r2, [pc, #308]	; (8002ef0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002dbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d002      	beq.n	8002dd4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	025b      	lsls	r3, r3, #9
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d90a      	bls.n	8002df0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22a0      	movs	r2, #160	; 0xa0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 fabc 	bl	8004364 <SDMMC_CmdWriteMultiBlock>
 8002dec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002dee:	e009      	b.n	8002e04 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2290      	movs	r2, #144	; 0x90
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fa8f 	bl	8004320 <SDMMC_CmdWriteSingleBlock>
 8002e02:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d012      	beq.n	8002e30 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a39      	ldr	r2, [pc, #228]	; (8002ef4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e059      	b.n	8002ee4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3380      	adds	r3, #128	; 0x80
 8002e66:	461a      	mov	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	025b      	lsls	r3, r3, #9
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	f7fe fb85 	bl	800157c <HAL_DMA_Start_IT>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01c      	beq.n	8002eb2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002e86:	f023 0302 	bic.w	r3, r3, #2
 8002e8a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e018      	b.n	8002ee4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	025b      	lsls	r3, r3, #9
 8002ebc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ebe:	2390      	movs	r3, #144	; 0x90
 8002ec0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f107 0210 	add.w	r2, r7, #16
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 f98f 	bl	80041fc <SDIO_ConfigData>

      return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8002ee2:	2302      	movs	r3, #2
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3730      	adds	r7, #48	; 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	08003425 	.word	0x08003425
 8002ef0:	080034c1 	.word	0x080034c1
 8002ef4:	004005ff 	.word	0x004005ff
 8002ef8:	4225858c 	.word	0x4225858c

08002efc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f1e:	0f9b      	lsrs	r3, r3, #30
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3c:	0e1b      	lsrs	r3, r3, #24
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f70:	0d1b      	lsrs	r3, r3, #20
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8e:	0bdb      	lsrs	r3, r3, #15
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa0:	0b9b      	lsrs	r3, r3, #14
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb2:	0b5b      	lsrs	r3, r3, #13
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fc4:	0b1b      	lsrs	r3, r3, #12
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d163      	bne.n	80030a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe4:	009a      	lsls	r2, r3, #2
 8002fe6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fea:	4013      	ands	r3, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002ff0:	0f92      	lsrs	r2, r2, #30
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffc:	0edb      	lsrs	r3, r3, #27
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	b2da      	uxtb	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300e:	0e1b      	lsrs	r3, r3, #24
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	b2da      	uxtb	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003020:	0d5b      	lsrs	r3, r3, #21
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	b2da      	uxtb	r2, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	b2da      	uxtb	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003044:	0bdb      	lsrs	r3, r3, #15
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	b2da      	uxtb	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	7e1b      	ldrb	r3, [r3, #24]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	3302      	adds	r3, #2
 8003068:	2201      	movs	r2, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003072:	fb03 f202 	mul.w	r2, r3, r2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	7a1b      	ldrb	r3, [r3, #8]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	2201      	movs	r2, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003094:	0a52      	lsrs	r2, r2, #9
 8003096:	fb03 f202 	mul.w	r2, r3, r2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a4:	661a      	str	r2, [r3, #96]	; 0x60
 80030a6:	e031      	b.n	800310c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d11d      	bne.n	80030ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	3301      	adds	r3, #1
 80030cc:	029a      	lsls	r2, r3, #10
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	661a      	str	r2, [r3, #96]	; 0x60
 80030ea:	e00f      	b.n	800310c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a58      	ldr	r2, [pc, #352]	; (8003254 <HAL_SD_GetCardCSD+0x344>)
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e09d      	b.n	8003248 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003110:	0b9b      	lsrs	r3, r3, #14
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	b2da      	uxtb	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	09db      	lsrs	r3, r3, #7
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312a:	b2da      	uxtb	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313a:	b2da      	uxtb	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	0fdb      	lsrs	r3, r3, #31
 8003146:	b2da      	uxtb	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	0f5b      	lsrs	r3, r3, #29
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	b2da      	uxtb	r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	b2da      	uxtb	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	0d9b      	lsrs	r3, r3, #22
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	b2da      	uxtb	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	0d5b      	lsrs	r3, r3, #21
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	b2da      	uxtb	r2, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	0bdb      	lsrs	r3, r3, #15
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	0b9b      	lsrs	r3, r3, #14
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	0b1b      	lsrs	r3, r3, #12
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	b2da      	uxtb	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	b2da      	uxtb	r2, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003236:	b2da      	uxtb	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	004005ff 	.word	0x004005ff

08003258 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2203      	movs	r2, #3
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d02e      	beq.n	800332e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	d106      	bne.n	80032e6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
 80032e4:	e029      	b.n	800333a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ec:	d10a      	bne.n	8003304 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fabc 	bl	800386c <SD_WideBus_Enable>
 80032f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
 8003302:	e01a      	b.n	800333a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 faf9 	bl	8003902 <SD_WideBus_Disable>
 8003310:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
 800331e:	e00c      	b.n	800333a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
 800332c:	e005      	b.n	800333a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003358:	e01f      	b.n	800339a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681d      	ldr	r5, [r3, #0]
 8003380:	466c      	mov	r4, sp
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800338a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800338e:	f107 0308 	add.w	r3, r7, #8
 8003392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003394:	4628      	mov	r0, r5
 8003396:	f000 fe93 	bl	80040c0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 ff56 	bl	8004254 <SDMMC_CmdBlockLength>
 80033a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00c      	beq.n	80033ca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80033d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3728      	adds	r7, #40	; 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bdb0      	pop	{r4, r5, r7, pc}
 80033de:	bf00      	nop
 80033e0:	004005ff 	.word	0x004005ff

080033e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80033f0:	f107 030c 	add.w	r3, r7, #12
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa10 	bl	800381c <SD_SendStatus>
 80033fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	0a5b      	lsrs	r3, r3, #9
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800341a:	693b      	ldr	r3, [r7, #16]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2b82      	cmp	r3, #130	; 0x82
 8003462:	d111      	bne.n	8003488 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 ff9d 	bl	80043a8 <SDMMC_CmdStopTransfer>
 800346e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff fd3a 	bl	8002efc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0208 	bic.w	r2, r2, #8
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f240 523a 	movw	r2, #1338	; 0x53a
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f001 fbf9 	bl	8004ca8 <HAL_SD_RxCpltCallback>
#endif
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe fa36 	bl	8001940 <HAL_DMA_GetError>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d03e      	beq.n	8003558 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d002      	beq.n	80034f6 <SD_DMAError+0x36>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12d      	bne.n	8003552 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <SD_DMAError+0xa0>)
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff ff62 	bl	80033e4 <HAL_SD_GetCardState>
 8003520:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d002      	beq.n	800352e <SD_DMAError+0x6e>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d10a      	bne.n	8003544 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 ff38 	bl	80043a8 <SDMMC_CmdStopTransfer>
 8003538:	4602      	mov	r2, r0
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	431a      	orrs	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff fcd2 	bl	8002efc <HAL_SD_ErrorCallback>
#endif
  }
}
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	004005ff 	.word	0x004005ff

08003564 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b094      	sub	sp, #80	; 0x50
 8003568:	af04      	add	r7, sp, #16
 800356a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800356c:	2301      	movs	r3, #1
 800356e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fde9 	bl	800414c <SDIO_GetPowerState>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003584:	e0b8      	b.n	80036f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	2b03      	cmp	r3, #3
 800358c:	d02f      	beq.n	80035ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f812 	bl	80045bc <SDMMC_CmdSendCID>
 8003598:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	e0a9      	b.n	80036f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fe13 	bl	80041d6 <SDIO_GetResponse>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2104      	movs	r1, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fe0a 	bl	80041d6 <SDIO_GetResponse>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2108      	movs	r1, #8
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fe01 	bl	80041d6 <SDIO_GetResponse>
 80035d4:	4602      	mov	r2, r0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	210c      	movs	r1, #12
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fdf8 	bl	80041d6 <SDIO_GetResponse>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d00d      	beq.n	8003612 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f107 020e 	add.w	r2, r7, #14
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f818 	bl	8004636 <SDMMC_CmdSetRelAdd>
 8003606:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <SD_InitCard+0xae>
    {
      return errorstate;
 800360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003610:	e072      	b.n	80036f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	2b03      	cmp	r3, #3
 8003618:	d036      	beq.n	8003688 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800361a:	89fb      	ldrh	r3, [r7, #14]
 800361c:	461a      	mov	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f000 ffe2 	bl	80045f8 <SDMMC_CmdSendCSD>
 8003634:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <SD_InitCard+0xdc>
    {
      return errorstate;
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	e05b      	b.n	80036f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fdc5 	bl	80041d6 <SDIO_GetResponse>
 800364c:	4602      	mov	r2, r0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2104      	movs	r1, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fdbc 	bl	80041d6 <SDIO_GetResponse>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2108      	movs	r1, #8
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fdb3 	bl	80041d6 <SDIO_GetResponse>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	210c      	movs	r1, #12
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fdaa 	bl	80041d6 <SDIO_GetResponse>
 8003682:	4602      	mov	r2, r0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2104      	movs	r1, #4
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fda1 	bl	80041d6 <SDIO_GetResponse>
 8003694:	4603      	mov	r3, r0
 8003696:	0d1a      	lsrs	r2, r3, #20
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800369c:	f107 0310 	add.w	r3, r7, #16
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fc34 	bl	8002f10 <HAL_SD_GetCardCSD>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036b2:	e021      	b.n	80036f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	2200      	movs	r2, #0
 80036c0:	461c      	mov	r4, r3
 80036c2:	4615      	mov	r5, r2
 80036c4:	4622      	mov	r2, r4
 80036c6:	462b      	mov	r3, r5
 80036c8:	4608      	mov	r0, r1
 80036ca:	f000 fe8f 	bl	80043ec <SDMMC_CmdSelDesel>
 80036ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80036d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <SD_InitCard+0x176>
  {
    return errorstate;
 80036d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d8:	e00e      	b.n	80036f8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	466c      	mov	r4, sp
 80036e2:	f103 0210 	add.w	r2, r3, #16
 80036e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80036e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036ec:	3304      	adds	r3, #4
 80036ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 fce5 	bl	80040c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3740      	adds	r7, #64	; 0x40
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdb0      	pop	{r4, r5, r7, pc}

08003700 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fe8a 	bl	8004432 <SDMMC_CmdGoIdleState>
 800371e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	e072      	b.n	8003810 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fe9d 	bl	800446e <SDMMC_CmdOperCond>
 8003734:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fe73 	bl	8004432 <SDMMC_CmdGoIdleState>
 800374c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	e05b      	b.n	8003810 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	2b01      	cmp	r3, #1
 8003764:	d137      	bne.n	80037d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fe9d 	bl	80044ac <SDMMC_CmdAppCommand>
 8003772:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d02d      	beq.n	80037d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800377a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800377e:	e047      	b.n	8003810 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fe90 	bl	80044ac <SDMMC_CmdAppCommand>
 800378c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <SD_PowerON+0x98>
    {
      return errorstate;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	e03b      	b.n	8003810 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	491e      	ldr	r1, [pc, #120]	; (8003818 <SD_PowerON+0x118>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fea6 	bl	80044f0 <SDMMC_CmdAppOperCommand>
 80037a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037b0:	e02e      	b.n	8003810 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fd0c 	bl	80041d6 <SDIO_GetResponse>
 80037be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	0fdb      	lsrs	r3, r3, #31
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <SD_PowerON+0xcc>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <SD_PowerON+0xce>
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]

    count++;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3301      	adds	r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037dc:	4293      	cmp	r3, r2
 80037de:	d802      	bhi.n	80037e6 <SD_PowerON+0xe6>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0cc      	beq.n	8003780 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d902      	bls.n	80037f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80037f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037f4:	e00c      	b.n	8003810 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
 8003806:	e002      	b.n	800380e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	c1100000 	.word	0xc1100000

0800381c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800382c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003830:	e018      	b.n	8003864 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f000 ff1a 	bl	8004678 <SDMMC_CmdSendStatus>
 8003844:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SD_SendStatus+0x34>
  {
    return errorstate;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	e009      	b.n	8003864 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fcbd 	bl	80041d6 <SDIO_GetResponse>
 800385c:	4602      	mov	r2, r0
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fca7 	bl	80041d6 <SDIO_GetResponse>
 8003888:	4603      	mov	r3, r0
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003892:	d102      	bne.n	800389a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003898:	e02f      	b.n	80038fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f879 	bl	8003998 <SD_FindSCR>
 80038a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	e023      	b.n	80038fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01c      	beq.n	80038f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f000 fdef 	bl	80044ac <SDMMC_CmdAppCommand>
 80038ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	e00f      	b.n	80038fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fe28 	bl	8004536 <SDMMC_CmdBusWidth>
 80038e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	e003      	b.n	80038fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e001      	b.n	80038fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fc5c 	bl	80041d6 <SDIO_GetResponse>
 800391e:	4603      	mov	r3, r0
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003928:	d102      	bne.n	8003930 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800392a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800392e:	e02f      	b.n	8003990 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f82e 	bl	8003998 <SD_FindSCR>
 800393c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	e023      	b.n	8003990 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01c      	beq.n	800398c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f000 fda4 	bl	80044ac <SDMMC_CmdAppCommand>
 8003964:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	e00f      	b.n	8003990 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fddd 	bl	8004536 <SDMMC_CmdBusWidth>
 800397c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	e003      	b.n	8003990 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003988:	2300      	movs	r3, #0
 800398a:	e001      	b.n	8003990 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800398c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b08f      	sub	sp, #60	; 0x3c
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80039a2:	f7fd fbfb 	bl	800119c <HAL_GetTick>
 80039a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2108      	movs	r1, #8
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fc48 	bl	8004254 <SDMMC_CmdBlockLength>
 80039c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	e0b2      	b.n	8003b36 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f000 fd65 	bl	80044ac <SDMMC_CmdAppCommand>
 80039e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	e0a3      	b.n	8003b36 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295
 80039f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80039f4:	2308      	movs	r3, #8
 80039f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80039f8:	2330      	movs	r3, #48	; 0x30
 80039fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f107 0210 	add.w	r2, r7, #16
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fbf2 	bl	80041fc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fdac 	bl	800457a <SDMMC_CmdSendSCR>
 8003a22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02a      	beq.n	8003a80 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	e083      	b.n	8003b36 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00f      	beq.n	8003a5c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	f107 0208 	add.w	r2, r7, #8
 8003a48:	18d4      	adds	r4, r2, r3
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	f000 fb63 	bl	8004116 <SDIO_ReadFIFO>
 8003a50:	4603      	mov	r3, r0
 8003a52:	6023      	str	r3, [r4, #0]
      index++;
 8003a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a56:	3301      	adds	r3, #1
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5a:	e006      	b.n	8003a6a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003a6a:	f7fd fb97 	bl	800119c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d102      	bne.n	8003a80 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003a7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a7e:	e05a      	b.n	8003b36 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0cf      	beq.n	8003a2e <SD_FindSCR+0x96>
 8003a8e:	e000      	b.n	8003a92 <SD_FindSCR+0xfa>
      break;
 8003a90:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	e044      	b.n	8003b36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e037      	b.n	8003b36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003adc:	2320      	movs	r3, #32
 8003ade:	e02a      	b.n	8003b36 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	061a      	lsls	r2, r3, #24
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003af6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0a:	601a      	str	r2, [r3, #0]
    scr++;
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	3304      	adds	r3, #4
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	061a      	lsls	r2, r3, #24
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	373c      	adds	r7, #60	; 0x3c
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}

08003b3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e03f      	b.n	8003bd0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fd f969 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2224      	movs	r2, #36	; 0x24
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f828 	bl	8003bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b0c0      	sub	sp, #256	; 0x100
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	ea40 0301 	orr.w	r3, r0, r1
 8003c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c30:	f021 010c 	bic.w	r1, r1, #12
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	6999      	ldr	r1, [r3, #24]
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	ea40 0301 	orr.w	r3, r0, r1
 8003c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b8f      	ldr	r3, [pc, #572]	; (8003ea4 <UART_SetConfig+0x2cc>)
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d005      	beq.n	8003c78 <UART_SetConfig+0xa0>
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b8d      	ldr	r3, [pc, #564]	; (8003ea8 <UART_SetConfig+0x2d0>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d104      	bne.n	8003c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7fe feb4 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 8003c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c80:	e003      	b.n	8003c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c82:	f7fe fe9b 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8003c86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c94:	f040 810c 	bne.w	8003eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003caa:	4622      	mov	r2, r4
 8003cac:	462b      	mov	r3, r5
 8003cae:	1891      	adds	r1, r2, r2
 8003cb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cb2:	415b      	adcs	r3, r3
 8003cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cba:	4621      	mov	r1, r4
 8003cbc:	eb12 0801 	adds.w	r8, r2, r1
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	eb43 0901 	adc.w	r9, r3, r1
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cda:	4690      	mov	r8, r2
 8003cdc:	4699      	mov	r9, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	eb18 0303 	adds.w	r3, r8, r3
 8003ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ce8:	462b      	mov	r3, r5
 8003cea:	eb49 0303 	adc.w	r3, r9, r3
 8003cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d06:	460b      	mov	r3, r1
 8003d08:	18db      	adds	r3, r3, r3
 8003d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	eb42 0303 	adc.w	r3, r2, r3
 8003d12:	657b      	str	r3, [r7, #84]	; 0x54
 8003d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d1c:	f7fc fab0 	bl	8000280 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <UART_SetConfig+0x2d4>)
 8003d26:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	011c      	lsls	r4, r3, #4
 8003d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d40:	4642      	mov	r2, r8
 8003d42:	464b      	mov	r3, r9
 8003d44:	1891      	adds	r1, r2, r2
 8003d46:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d48:	415b      	adcs	r3, r3
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d50:	4641      	mov	r1, r8
 8003d52:	eb12 0a01 	adds.w	sl, r2, r1
 8003d56:	4649      	mov	r1, r9
 8003d58:	eb43 0b01 	adc.w	fp, r3, r1
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d70:	4692      	mov	sl, r2
 8003d72:	469b      	mov	fp, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	eb1a 0303 	adds.w	r3, sl, r3
 8003d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	eb4b 0303 	adc.w	r3, fp, r3
 8003d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	18db      	adds	r3, r3, r3
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
 8003da2:	4613      	mov	r3, r2
 8003da4:	eb42 0303 	adc.w	r3, r2, r3
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
 8003daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003db2:	f7fc fa65 	bl	8000280 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <UART_SetConfig+0x2d4>)
 8003dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2264      	movs	r2, #100	; 0x64
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	1acb      	subs	r3, r1, r3
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <UART_SetConfig+0x2d4>)
 8003dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003de0:	441c      	add	r4, r3
 8003de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	1891      	adds	r1, r2, r2
 8003dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dfc:	415b      	adcs	r3, r3
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e04:	4641      	mov	r1, r8
 8003e06:	1851      	adds	r1, r2, r1
 8003e08:	6339      	str	r1, [r7, #48]	; 0x30
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	414b      	adcs	r3, r1
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	00cb      	lsls	r3, r1, #3
 8003e20:	4651      	mov	r1, sl
 8003e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e26:	4651      	mov	r1, sl
 8003e28:	00ca      	lsls	r2, r1, #3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4642      	mov	r2, r8
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e38:	464b      	mov	r3, r9
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	eb42 0303 	adc.w	r3, r2, r3
 8003e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e58:	460b      	mov	r3, r1
 8003e5a:	18db      	adds	r3, r3, r3
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	4613      	mov	r3, r2
 8003e60:	eb42 0303 	adc.w	r3, r2, r3
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e6e:	f7fc fa07 	bl	8000280 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <UART_SetConfig+0x2d4>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2164      	movs	r1, #100	; 0x64
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	4a08      	ldr	r2, [pc, #32]	; (8003eac <UART_SetConfig+0x2d4>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 0207 	and.w	r2, r3, #7
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4422      	add	r2, r4
 8003e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ea0:	e106      	b.n	80040b0 <UART_SetConfig+0x4d8>
 8003ea2:	bf00      	nop
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	6239      	str	r1, [r7, #32]
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	1854      	adds	r4, r2, r1
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	eb43 0501 	adc.w	r5, r3, r1
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	00eb      	lsls	r3, r5, #3
 8003ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eea:	00e2      	lsls	r2, r4, #3
 8003eec:	4614      	mov	r4, r2
 8003eee:	461d      	mov	r5, r3
 8003ef0:	4643      	mov	r3, r8
 8003ef2:	18e3      	adds	r3, r4, r3
 8003ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ef8:	464b      	mov	r3, r9
 8003efa:	eb45 0303 	adc.w	r3, r5, r3
 8003efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f1e:	4629      	mov	r1, r5
 8003f20:	008b      	lsls	r3, r1, #2
 8003f22:	4621      	mov	r1, r4
 8003f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f28:	4621      	mov	r1, r4
 8003f2a:	008a      	lsls	r2, r1, #2
 8003f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f30:	f7fc f9a6 	bl	8000280 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4b60      	ldr	r3, [pc, #384]	; (80040bc <UART_SetConfig+0x4e4>)
 8003f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	011c      	lsls	r4, r3, #4
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	61b9      	str	r1, [r7, #24]
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f64:	4641      	mov	r1, r8
 8003f66:	1851      	adds	r1, r2, r1
 8003f68:	6139      	str	r1, [r7, #16]
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	414b      	adcs	r3, r1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	00cb      	lsls	r3, r1, #3
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f86:	4651      	mov	r1, sl
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4642      	mov	r2, r8
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f98:	464b      	mov	r3, r9
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	008b      	lsls	r3, r1, #2
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	008a      	lsls	r2, r1, #2
 8003fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fce:	f7fc f957 	bl	8000280 <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4b38      	ldr	r3, [pc, #224]	; (80040bc <UART_SetConfig+0x4e4>)
 8003fda:	fba3 2301 	umull	r2, r3, r3, r1
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2264      	movs	r2, #100	; 0x64
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	1acb      	subs	r3, r1, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <UART_SetConfig+0x4e4>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff8:	441c      	add	r4, r3
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	673b      	str	r3, [r7, #112]	; 0x70
 8004002:	677a      	str	r2, [r7, #116]	; 0x74
 8004004:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004008:	4642      	mov	r2, r8
 800400a:	464b      	mov	r3, r9
 800400c:	1891      	adds	r1, r2, r2
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	415b      	adcs	r3, r3
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004018:	4641      	mov	r1, r8
 800401a:	1851      	adds	r1, r2, r1
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	4649      	mov	r1, r9
 8004020:	414b      	adcs	r3, r1
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004030:	4659      	mov	r1, fp
 8004032:	00cb      	lsls	r3, r1, #3
 8004034:	4651      	mov	r1, sl
 8004036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403a:	4651      	mov	r1, sl
 800403c:	00ca      	lsls	r2, r1, #3
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	4603      	mov	r3, r0
 8004044:	4642      	mov	r2, r8
 8004046:	189b      	adds	r3, r3, r2
 8004048:	66bb      	str	r3, [r7, #104]	; 0x68
 800404a:	464b      	mov	r3, r9
 800404c:	460a      	mov	r2, r1
 800404e:	eb42 0303 	adc.w	r3, r2, r3
 8004052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
 800405e:	667a      	str	r2, [r7, #100]	; 0x64
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800406c:	4649      	mov	r1, r9
 800406e:	008b      	lsls	r3, r1, #2
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004076:	4641      	mov	r1, r8
 8004078:	008a      	lsls	r2, r1, #2
 800407a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800407e:	f7fc f8ff 	bl	8000280 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <UART_SetConfig+0x4e4>)
 8004088:	fba3 1302 	umull	r1, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	2164      	movs	r1, #100	; 0x64
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	3332      	adds	r3, #50	; 0x32
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <UART_SetConfig+0x4e4>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4422      	add	r2, r4
 80040ae:	609a      	str	r2, [r3, #8]
}
 80040b0:	bf00      	nop
 80040b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040b6:	46bd      	mov	sp, r7
 80040b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040bc:	51eb851f 	.word	0x51eb851f

080040c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80040c0:	b084      	sub	sp, #16
 80040c2:	b480      	push	{r7}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	f107 001c 	add.w	r0, r7, #28
 80040ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80040d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80040d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80040da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80040de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80040e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80040e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80040ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80040fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	b004      	add	sp, #16
 8004114:	4770      	bx	lr

08004116 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2203      	movs	r2, #3
 800413c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0303 	and.w	r3, r3, #3
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004186:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800418c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004192:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80041a2:	f023 030f 	bic.w	r3, r3, #15
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	b2db      	uxtb	r3, r3
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3314      	adds	r3, #20
 80041e4:	461a      	mov	r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
}  
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004222:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004228:	431a      	orrs	r2, r3
                       Data->DPSM);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800422e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004246:	2300      	movs	r3, #0

}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004262:	2310      	movs	r3, #16
 8004264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800426e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004272:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff74 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004280:	f241 3288 	movw	r2, #5000	; 0x1388
 8004284:	2110      	movs	r1, #16
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fa18 	bl	80046bc <SDMMC_GetCmdResp1>
 800428c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800428e:	69fb      	ldr	r3, [r7, #28]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80042a6:	2311      	movs	r3, #17
 80042a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042aa:	2340      	movs	r3, #64	; 0x40
 80042ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042b8:	f107 0308 	add.w	r3, r7, #8
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ff52 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	2111      	movs	r1, #17
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9f6 	bl	80046bc <SDMMC_GetCmdResp1>
 80042d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042d2:	69fb      	ldr	r3, [r7, #28]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80042ea:	2312      	movs	r3, #18
 80042ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042fc:	f107 0308 	add.w	r3, r7, #8
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff30 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	2112      	movs	r1, #18
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f9d4 	bl	80046bc <SDMMC_GetCmdResp1>
 8004314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004316:	69fb      	ldr	r3, [r7, #28]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800432e:	2318      	movs	r3, #24
 8004330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004332:	2340      	movs	r3, #64	; 0x40
 8004334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800433a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4619      	mov	r1, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ff0e 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	2118      	movs	r1, #24
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f9b2 	bl	80046bc <SDMMC_GetCmdResp1>
 8004358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800435a:	69fb      	ldr	r3, [r7, #28]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004372:	2319      	movs	r3, #25
 8004374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004376:	2340      	movs	r3, #64	; 0x40
 8004378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800437e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004382:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004384:	f107 0308 	add.w	r3, r7, #8
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff feec 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	2119      	movs	r1, #25
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f990 	bl	80046bc <SDMMC_GetCmdResp1>
 800439c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800439e:	69fb      	ldr	r3, [r7, #28]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80043b4:	230c      	movs	r3, #12
 80043b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043b8:	2340      	movs	r3, #64	; 0x40
 80043ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff fecb 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80043d2:	4a05      	ldr	r2, [pc, #20]	; (80043e8 <SDMMC_CmdStopTransfer+0x40>)
 80043d4:	210c      	movs	r1, #12
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f970 	bl	80046bc <SDMMC_GetCmdResp1>
 80043dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043de:	69fb      	ldr	r3, [r7, #28]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	05f5e100 	.word	0x05f5e100

080043ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80043fc:	2307      	movs	r3, #7
 80043fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800440c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800440e:	f107 0310 	add.w	r3, r7, #16
 8004412:	4619      	mov	r1, r3
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fea7 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800441a:	f241 3288 	movw	r2, #5000	; 0x1388
 800441e:	2107      	movs	r1, #7
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f94b 	bl	80046bc <SDMMC_GetCmdResp1>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800442a:	4618      	mov	r0, r3
 800442c:	3728      	adds	r7, #40	; 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800444a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004450:	f107 0308 	add.w	r3, r7, #8
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fe86 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fb65 	bl	8004b2c <SDMMC_GetCmdError>
 8004462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004464:	69fb      	ldr	r3, [r7, #28]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b088      	sub	sp, #32
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004476:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800447a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800447c:	2308      	movs	r3, #8
 800447e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004480:	2340      	movs	r3, #64	; 0x40
 8004482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800448c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fe67 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 faf8 	bl	8004a90 <SDMMC_GetCmdResp7>
 80044a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044a2:	69fb      	ldr	r3, [r7, #28]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80044ba:	2337      	movs	r3, #55	; 0x37
 80044bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044be:	2340      	movs	r3, #64	; 0x40
 80044c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044cc:	f107 0308 	add.w	r3, r7, #8
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fe48 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80044d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044dc:	2137      	movs	r1, #55	; 0x37
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f8ec 	bl	80046bc <SDMMC_GetCmdResp1>
 80044e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044e6:	69fb      	ldr	r3, [r7, #28]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004506:	2329      	movs	r3, #41	; 0x29
 8004508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fe22 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f9ff 	bl	8004928 <SDMMC_GetCmdResp3>
 800452a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800452c:	69fb      	ldr	r3, [r7, #28]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004544:	2306      	movs	r3, #6
 8004546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004548:	2340      	movs	r3, #64	; 0x40
 800454a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004554:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fe03 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	2106      	movs	r1, #6
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8a7 	bl	80046bc <SDMMC_GetCmdResp1>
 800456e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004570:	69fb      	ldr	r3, [r7, #28]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b088      	sub	sp, #32
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004586:	2333      	movs	r3, #51	; 0x33
 8004588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800458a:	2340      	movs	r3, #64	; 0x40
 800458c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff fde2 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	2133      	movs	r1, #51	; 0x33
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f886 	bl	80046bc <SDMMC_GetCmdResp1>
 80045b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045b2:	69fb      	ldr	r3, [r7, #28]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80045c8:	2302      	movs	r3, #2
 80045ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80045cc:	23c0      	movs	r3, #192	; 0xc0
 80045ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fdc1 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f956 	bl	8004898 <SDMMC_GetCmdResp2>
 80045ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045ee:	69fb      	ldr	r3, [r7, #28]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004606:	2309      	movs	r3, #9
 8004608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800460a:	23c0      	movs	r3, #192	; 0xc0
 800460c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004616:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fda2 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f937 	bl	8004898 <SDMMC_GetCmdResp2>
 800462a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800462c:	69fb      	ldr	r3, [r7, #28]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b088      	sub	sp, #32
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004644:	2303      	movs	r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004648:	2340      	movs	r3, #64	; 0x40
 800464a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004654:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fd83 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	2103      	movs	r1, #3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f99c 	bl	80049a4 <SDMMC_GetCmdResp6>
 800466c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800466e:	69fb      	ldr	r3, [r7, #28]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004686:	230d      	movs	r3, #13
 8004688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800468a:	2340      	movs	r3, #64	; 0x40
 800468c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fd62 	bl	8004168 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	210d      	movs	r1, #13
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f806 	bl	80046bc <SDMMC_GetCmdResp1>
 80046b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046b2:	69fb      	ldr	r3, [r7, #28]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	460b      	mov	r3, r1
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80046ca:	4b70      	ldr	r3, [pc, #448]	; (800488c <SDMMC_GetCmdResp1+0x1d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a70      	ldr	r2, [pc, #448]	; (8004890 <SDMMC_GetCmdResp1+0x1d4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	0a5a      	lsrs	r2, r3, #9
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	1e5a      	subs	r2, r3, #1
 80046e2:	61fa      	str	r2, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80046e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046ec:	e0c9      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ea      	bne.n	80046de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2204      	movs	r2, #4
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800471a:	2304      	movs	r3, #4
 800471c:	e0b1      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004730:	2301      	movs	r3, #1
 8004732:	e0a6      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	22c5      	movs	r2, #197	; 0xc5
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff fd3e 	bl	80041bc <SDIO_GetCommandResponse>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	7afb      	ldrb	r3, [r7, #11]
 8004746:	4293      	cmp	r3, r2
 8004748:	d001      	beq.n	800474e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800474a:	2301      	movs	r3, #1
 800474c:	e099      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800474e:	2100      	movs	r1, #0
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff fd40 	bl	80041d6 <SDIO_GetResponse>
 8004756:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4b4e      	ldr	r3, [pc, #312]	; (8004894 <SDMMC_GetCmdResp1+0x1d8>)
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004762:	2300      	movs	r3, #0
 8004764:	e08d      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	da02      	bge.n	8004772 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800476c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004770:	e087      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	e080      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	e079      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800479c:	e071      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80047a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ac:	e069      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80047b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047bc:	e061      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80047c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047cc:	e059      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80047d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047dc:	e051      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80047e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ec:	e049      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80047f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047fc:	e041      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480c:	e039      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481c:	e031      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800482c:	e029      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004838:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800483c:	e021      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004848:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800484c:	e019      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004858:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800485c:	e011      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800486c:	e009      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004878:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800487c:	e001      	b.n	8004882 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800487e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000
 8004890:	10624dd3 	.word	0x10624dd3
 8004894:	fdffe008 	.word	0xfdffe008

08004898 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <SDMMC_GetCmdResp2+0x88>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <SDMMC_GetCmdResp2+0x8c>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	0a5b      	lsrs	r3, r3, #9
 80048ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	60fa      	str	r2, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048c4:	e026      	b.n	8004914 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ef      	beq.n	80048b6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1ea      	bne.n	80048b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2204      	movs	r2, #4
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048f2:	2304      	movs	r3, #4
 80048f4:	e00e      	b.n	8004914 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004908:	2301      	movs	r3, #1
 800490a:	e003      	b.n	8004914 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	22c5      	movs	r2, #197	; 0xc5
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000000 	.word	0x20000000
 8004924:	10624dd3 	.word	0x10624dd3

08004928 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <SDMMC_GetCmdResp3+0x74>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <SDMMC_GetCmdResp3+0x78>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	0a5b      	lsrs	r3, r3, #9
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1e5a      	subs	r2, r3, #1
 800494a:	60fa      	str	r2, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d102      	bne.n	8004956 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004954:	e01b      	b.n	800498e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ef      	beq.n	8004946 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ea      	bne.n	8004946 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2204      	movs	r2, #4
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004982:	2304      	movs	r3, #4
 8004984:	e003      	b.n	800498e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	22c5      	movs	r2, #197	; 0xc5
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000000 	.word	0x20000000
 80049a0:	10624dd3 	.word	0x10624dd3

080049a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	460b      	mov	r3, r1
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049b2:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <SDMMC_GetCmdResp6+0xe4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a35      	ldr	r2, [pc, #212]	; (8004a8c <SDMMC_GetCmdResp6+0xe8>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	0a5b      	lsrs	r3, r3, #9
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	1e5a      	subs	r2, r3, #1
 80049cc:	61fa      	str	r2, [r7, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049d6:	e052      	b.n	8004a7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0ef      	beq.n	80049c8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ea      	bne.n	80049c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2204      	movs	r2, #4
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a04:	2304      	movs	r3, #4
 8004a06:	e03a      	b.n	8004a7e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e02f      	b.n	8004a7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7ff fbcc 	bl	80041bc <SDIO_GetCommandResponse>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	7afb      	ldrb	r3, [r7, #11]
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d001      	beq.n	8004a32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e025      	b.n	8004a7e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	22c5      	movs	r2, #197	; 0xc5
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fbcb 	bl	80041d6 <SDIO_GetResponse>
 8004a40:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	0c1b      	lsrs	r3, r3, #16
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e011      	b.n	8004a7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a68:	e009      	b.n	8004a7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a78:	e001      	b.n	8004a7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	10624dd3 	.word	0x10624dd3

08004a90 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a98:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <SDMMC_GetCmdResp7+0x94>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <SDMMC_GetCmdResp7+0x98>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0a5b      	lsrs	r3, r3, #9
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1e5a      	subs	r2, r3, #1
 8004ab2:	60fa      	str	r2, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ab8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004abc:	e02c      	b.n	8004b18 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ef      	beq.n	8004aae <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ea      	bne.n	8004aae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004aea:	2304      	movs	r3, #4
 8004aec:	e014      	b.n	8004b18 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e009      	b.n	8004b18 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2240      	movs	r2, #64	; 0x40
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b16:	2300      	movs	r3, #0
  
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	20000000 	.word	0x20000000
 8004b28:	10624dd3 	.word	0x10624dd3

08004b2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b34:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <SDMMC_GetCmdError+0x50>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <SDMMC_GetCmdError+0x54>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0a5b      	lsrs	r3, r3, #9
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1e5a      	subs	r2, r3, #1
 8004b4e:	60fa      	str	r2, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b58:	e009      	b.n	8004b6e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f1      	beq.n	8004b4a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	22c5      	movs	r2, #197	; 0xc5
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000000 	.word	0x20000000
 8004b80:	10624dd3 	.word	0x10624dd3

08004b84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004b88:	4904      	ldr	r1, [pc, #16]	; (8004b9c <MX_FATFS_Init+0x18>)
 8004b8a:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <MX_FATFS_Init+0x1c>)
 8004b8c:	f003 f860 	bl	8007c50 <FATFS_LinkDriver>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <MX_FATFS_Init+0x20>)
 8004b96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004b98:	bf00      	nop
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	2000026c 	.word	0x2000026c
 8004ba0:	08008fb4 	.word	0x08008fb4
 8004ba4:	20000268 	.word	0x20000268

08004ba8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004bac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004bc2:	f000 f87b 	bl	8004cbc <BSP_SD_IsDetected>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d001      	beq.n	8004bd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e012      	b.n	8004bf6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004bd0:	480b      	ldr	r0, [pc, #44]	; (8004c00 <BSP_SD_Init+0x48>)
 8004bd2:	f7fd ff1b 	bl	8002a0c <HAL_SD_Init>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d109      	bne.n	8004bf4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004be4:	4806      	ldr	r0, [pc, #24]	; (8004c00 <BSP_SD_Init+0x48>)
 8004be6:	f7fe fb63 	bl	80032b0 <HAL_SD_ConfigWideBusOperation>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	200000d8 	.word	0x200000d8

08004c04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	68f9      	ldr	r1, [r7, #12]
 8004c1a:	4806      	ldr	r0, [pc, #24]	; (8004c34 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004c1c:	f7fd ffa6 	bl	8002b6c <HAL_SD_ReadBlocks_DMA>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200000d8 	.word	0x200000d8

08004c38 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	4806      	ldr	r0, [pc, #24]	; (8004c68 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004c50:	f7fe f86e 	bl	8002d30 <HAL_SD_WriteBlocks_DMA>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	200000d8 	.word	0x200000d8

08004c6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004c70:	4805      	ldr	r0, [pc, #20]	; (8004c88 <BSP_SD_GetCardState+0x1c>)
 8004c72:	f7fe fbb7 	bl	80033e4 <HAL_SD_GetCardState>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200000d8 	.word	0x200000d8

08004c8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4803      	ldr	r0, [pc, #12]	; (8004ca4 <BSP_SD_GetCardInfo+0x18>)
 8004c98:	f7fe fade 	bl	8003258 <HAL_SD_GetCardInfo>
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200000d8 	.word	0x200000d8

08004ca8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004cb0:	f000 f97a 	bl	8004fa8 <BSP_SD_ReadCpltCallback>
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	b2db      	uxtb	r3, r3
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004cde:	f7fc fa5d 	bl	800119c <HAL_GetTick>
 8004ce2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004ce4:	e006      	b.n	8004cf4 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004ce6:	f7ff ffc1 	bl	8004c6c <BSP_SD_GetCardState>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e009      	b.n	8004d08 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004cf4:	f7fc fa52 	bl	800119c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d8f0      	bhi.n	8004ce6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <SD_CheckStatus+0x38>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004d20:	f7ff ffa4 	bl	8004c6c <BSP_SD_GetCardState>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <SD_CheckStatus+0x38>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <SD_CheckStatus+0x38>)
 8004d38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004d3a:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <SD_CheckStatus+0x38>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b2db      	uxtb	r3, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000009 	.word	0x20000009

08004d4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004d56:	f7ff ff2f 	bl	8004bb8 <BSP_SD_Init>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff ffd4 	bl	8004d10 <SD_CheckStatus>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <SD_initialize+0x34>)
 8004d6e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <SD_initialize+0x34>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b2db      	uxtb	r3, r3
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000009 	.word	0x20000009

08004d84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ffbd 	bl	8004d10 <SD_CheckStatus>
 8004d96:	4603      	mov	r3, r0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004db4:	f247 5030 	movw	r0, #30000	; 0x7530
 8004db8:	f7ff ff8d 	bl	8004cd6 <SD_CheckStatusWithTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	da01      	bge.n	8004dc6 <SD_read+0x26>
  {
    return res;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	e03b      	b.n	8004e3e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f7ff ff1a 	bl	8004c04 <BSP_SD_ReadBlocks_DMA>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d132      	bne.n	8004e3c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <SD_read+0xa8>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004ddc:	f7fc f9de 	bl	800119c <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004de2:	bf00      	nop
 8004de4:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <SD_read+0xa8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <SD_read+0x5e>
 8004dec:	f7fc f9d6 	bl	800119c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f247 522f 	movw	r2, #29999	; 0x752f
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d9f2      	bls.n	8004de4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <SD_read+0xa8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
 8004e0a:	e017      	b.n	8004e3c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <SD_read+0xa8>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004e12:	f7fc f9c3 	bl	800119c <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004e18:	e007      	b.n	8004e2a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004e1a:	f7ff ff27 	bl	8004c6c <BSP_SD_GetCardState>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d102      	bne.n	8004e2a <SD_read+0x8a>
          {
            res = RES_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004e28:	e008      	b.n	8004e3c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004e2a:	f7fc f9b7 	bl	800119c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f247 522f 	movw	r2, #29999	; 0x752f
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d9ee      	bls.n	8004e1a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000274 	.word	0x20000274

08004e4c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004e60:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <SD_write+0xa8>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004e66:	f247 5030 	movw	r0, #30000	; 0x7530
 8004e6a:	f7ff ff34 	bl	8004cd6 <SD_CheckStatusWithTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da01      	bge.n	8004e78 <SD_write+0x2c>
  {
    return res;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	e038      	b.n	8004eea <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	68b8      	ldr	r0, [r7, #8]
 8004e7e:	f7ff fedb 	bl	8004c38 <BSP_SD_WriteBlocks_DMA>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d12f      	bne.n	8004ee8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004e88:	f7fc f988 	bl	800119c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004e8e:	bf00      	nop
 8004e90:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <SD_write+0xa8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <SD_write+0x5e>
 8004e98:	f7fc f980 	bl	800119c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f247 522f 	movw	r2, #29999	; 0x752f
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d9f2      	bls.n	8004e90 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <SD_write+0xa8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
 8004eb6:	e017      	b.n	8004ee8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <SD_write+0xa8>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004ebe:	f7fc f96d 	bl	800119c <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ec4:	e007      	b.n	8004ed6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004ec6:	f7ff fed1 	bl	8004c6c <BSP_SD_GetCardState>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <SD_write+0x8a>
          {
            res = RES_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ed4:	e008      	b.n	8004ee8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ed6:	f7fc f961 	bl	800119c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f247 522f 	movw	r2, #29999	; 0x752f
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d9ee      	bls.n	8004ec6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000270 	.word	0x20000270

08004ef8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	; 0x30
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	603a      	str	r2, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
 8004f04:	460b      	mov	r3, r1
 8004f06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004f0e:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <SD_ioctl+0xac>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <SD_ioctl+0x28>
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e03c      	b.n	8004f9a <SD_ioctl+0xa2>

  switch (cmd)
 8004f20:	79bb      	ldrb	r3, [r7, #6]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d834      	bhi.n	8004f90 <SD_ioctl+0x98>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <SD_ioctl+0x34>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f45 	.word	0x08004f45
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f77 	.word	0x08004f77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f42:	e028      	b.n	8004f96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f44:	f107 030c 	add.w	r3, r7, #12
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fe9f 	bl	8004c8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f5a:	e01c      	b.n	8004f96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f5c:	f107 030c 	add.w	r3, r7, #12
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fe93 	bl	8004c8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f74:	e00f      	b.n	8004f96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f76:	f107 030c 	add.w	r3, r7, #12
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fe86 	bl	8004c8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	0a5a      	lsrs	r2, r3, #9
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f8e:	e002      	b.n	8004f96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3730      	adds	r7, #48	; 0x30
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000009 	.word	0x20000009

08004fa8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <BSP_SD_ReadCpltCallback+0x14>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20000274 	.word	0x20000274

08004fc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <disk_status+0x30>)
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	79fa      	ldrb	r2, [r7, #7]
 8004fd8:	4905      	ldr	r1, [pc, #20]	; (8004ff0 <disk_status+0x30>)
 8004fda:	440a      	add	r2, r1
 8004fdc:	7a12      	ldrb	r2, [r2, #8]
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4798      	blx	r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200002a0 	.word	0x200002a0

08004ff4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	4a0d      	ldr	r2, [pc, #52]	; (800503c <disk_initialize+0x48>)
 8005006:	5cd3      	ldrb	r3, [r2, r3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d111      	bne.n	8005030 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	4a0b      	ldr	r2, [pc, #44]	; (800503c <disk_initialize+0x48>)
 8005010:	2101      	movs	r1, #1
 8005012:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <disk_initialize+0x48>)
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	79fa      	ldrb	r2, [r7, #7]
 8005022:	4906      	ldr	r1, [pc, #24]	; (800503c <disk_initialize+0x48>)
 8005024:	440a      	add	r2, r1
 8005026:	7a12      	ldrb	r2, [r2, #8]
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200002a0 	.word	0x200002a0

08005040 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4603      	mov	r3, r0
 800504e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <disk_read+0x3c>)
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	689c      	ldr	r4, [r3, #8]
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <disk_read+0x3c>)
 8005060:	4413      	add	r3, r2
 8005062:	7a18      	ldrb	r0, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	47a0      	blx	r4
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
}
 8005072:	4618      	mov	r0, r3
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bd90      	pop	{r4, r7, pc}
 800507a:	bf00      	nop
 800507c:	200002a0 	.word	0x200002a0

08005080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <disk_write+0x3c>)
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68dc      	ldr	r4, [r3, #12]
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	4a07      	ldr	r2, [pc, #28]	; (80050bc <disk_write+0x3c>)
 80050a0:	4413      	add	r3, r2
 80050a2:	7a18      	ldrb	r0, [r3, #8]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	47a0      	blx	r4
 80050ac:	4603      	mov	r3, r0
 80050ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200002a0 	.word	0x200002a0

080050c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	603a      	str	r2, [r7, #0]
 80050ca:	71fb      	strb	r3, [r7, #7]
 80050cc:	460b      	mov	r3, r1
 80050ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <disk_ioctl+0x38>)
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	79fa      	ldrb	r2, [r7, #7]
 80050de:	4906      	ldr	r1, [pc, #24]	; (80050f8 <disk_ioctl+0x38>)
 80050e0:	440a      	add	r2, r1
 80050e2:	7a10      	ldrb	r0, [r2, #8]
 80050e4:	79b9      	ldrb	r1, [r7, #6]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4798      	blx	r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	200002a0 	.word	0x200002a0

080050fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3301      	adds	r3, #1
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	b21a      	sxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	b21b      	sxth	r3, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	b21b      	sxth	r3, r3
 800511c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800511e:	89fb      	ldrh	r3, [r7, #14]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3303      	adds	r3, #3
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	3202      	adds	r2, #2
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	3201      	adds	r2, #1
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	7812      	ldrb	r2, [r2, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
	return rv;
 8005164:	68fb      	ldr	r3, [r7, #12]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	887b      	ldrh	r3, [r7, #2]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	1c53      	adds	r3, r2, #1
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	6179      	str	r1, [r7, #20]
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3b01      	subs	r3, #1
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f1      	bne.n	800521a <mem_cpy+0x1a>
	}
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005242:	b480      	push	{r7}
 8005244:	b087      	sub	sp, #28
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	617a      	str	r2, [r7, #20]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3b01      	subs	r3, #1
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f3      	bne.n	8005252 <mem_set+0x10>
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	; 0x24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	61fa      	str	r2, [r7, #28]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	4619      	mov	r1, r3
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	61ba      	str	r2, [r7, #24]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	1acb      	subs	r3, r1, r3
 80052a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <mem_cmp+0x40>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0eb      	beq.n	8005290 <mem_cmp+0x18>

	return r;
 80052b8:	697b      	ldr	r3, [r7, #20]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3724      	adds	r7, #36	; 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80052d0:	e002      	b.n	80052d8 <chk_chr+0x12>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3301      	adds	r3, #1
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <chk_chr+0x26>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d1f2      	bne.n	80052d2 <chk_chr+0xc>
	return *str;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	781b      	ldrb	r3, [r3, #0]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e029      	b.n	8005364 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005310:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <chk_lock+0xb4>)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	4413      	add	r3, r2
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01d      	beq.n	800535a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800531e:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <chk_lock+0xb4>)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	4413      	add	r3, r2
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d116      	bne.n	800535e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005330:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <chk_lock+0xb4>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	4413      	add	r3, r2
 8005338:	3304      	adds	r3, #4
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005340:	429a      	cmp	r2, r3
 8005342:	d10c      	bne.n	800535e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <chk_lock+0xb4>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	4413      	add	r3, r2
 800534c:	3308      	adds	r3, #8
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005354:	429a      	cmp	r2, r3
 8005356:	d102      	bne.n	800535e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005358:	e007      	b.n	800536a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3301      	adds	r3, #1
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d9d2      	bls.n	8005310 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d109      	bne.n	8005384 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <chk_lock+0x80>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d101      	bne.n	8005380 <chk_lock+0x84>
 800537c:	2300      	movs	r3, #0
 800537e:	e010      	b.n	80053a2 <chk_lock+0xa6>
 8005380:	2312      	movs	r3, #18
 8005382:	e00e      	b.n	80053a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d108      	bne.n	800539c <chk_lock+0xa0>
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <chk_lock+0xb4>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	4413      	add	r3, r2
 8005392:	330c      	adds	r3, #12
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d101      	bne.n	80053a0 <chk_lock+0xa4>
 800539c:	2310      	movs	r3, #16
 800539e:	e000      	b.n	80053a2 <chk_lock+0xa6>
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000280 	.word	0x20000280

080053b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	e002      	b.n	80053c6 <enq_lock+0x12>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3301      	adds	r3, #1
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d806      	bhi.n	80053da <enq_lock+0x26>
 80053cc:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <enq_lock+0x40>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4413      	add	r3, r2
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f2      	bne.n	80053c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000280 	.word	0x20000280

080053f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e01f      	b.n	8005448 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005408:	4a41      	ldr	r2, [pc, #260]	; (8005510 <inc_lock+0x118>)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	4413      	add	r3, r2
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d113      	bne.n	8005442 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800541a:	4a3d      	ldr	r2, [pc, #244]	; (8005510 <inc_lock+0x118>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	3304      	adds	r3, #4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800542a:	429a      	cmp	r2, r3
 800542c:	d109      	bne.n	8005442 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800542e:	4a38      	ldr	r2, [pc, #224]	; (8005510 <inc_lock+0x118>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	4413      	add	r3, r2
 8005436:	3308      	adds	r3, #8
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800543e:	429a      	cmp	r2, r3
 8005440:	d006      	beq.n	8005450 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d9dc      	bls.n	8005408 <inc_lock+0x10>
 800544e:	e000      	b.n	8005452 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005450:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d132      	bne.n	80054be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e002      	b.n	8005464 <inc_lock+0x6c>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d806      	bhi.n	8005478 <inc_lock+0x80>
 800546a:	4a29      	ldr	r2, [pc, #164]	; (8005510 <inc_lock+0x118>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4413      	add	r3, r2
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f2      	bne.n	800545e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d101      	bne.n	8005482 <inc_lock+0x8a>
 800547e:	2300      	movs	r3, #0
 8005480:	e040      	b.n	8005504 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4922      	ldr	r1, [pc, #136]	; (8005510 <inc_lock+0x118>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	440b      	add	r3, r1
 800548e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	491e      	ldr	r1, [pc, #120]	; (8005510 <inc_lock+0x118>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	440b      	add	r3, r1
 800549c:	3304      	adds	r3, #4
 800549e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	491a      	ldr	r1, [pc, #104]	; (8005510 <inc_lock+0x118>)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	440b      	add	r3, r1
 80054ac:	3308      	adds	r3, #8
 80054ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80054b0:	4a17      	ldr	r2, [pc, #92]	; (8005510 <inc_lock+0x118>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	4413      	add	r3, r2
 80054b8:	330c      	adds	r3, #12
 80054ba:	2200      	movs	r2, #0
 80054bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d009      	beq.n	80054d8 <inc_lock+0xe0>
 80054c4:	4a12      	ldr	r2, [pc, #72]	; (8005510 <inc_lock+0x118>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4413      	add	r3, r2
 80054cc:	330c      	adds	r3, #12
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <inc_lock+0xe0>
 80054d4:	2300      	movs	r3, #0
 80054d6:	e015      	b.n	8005504 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <inc_lock+0xf8>
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <inc_lock+0x118>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	4413      	add	r3, r2
 80054e6:	330c      	adds	r3, #12
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	e001      	b.n	80054f4 <inc_lock+0xfc>
 80054f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054f4:	4906      	ldr	r1, [pc, #24]	; (8005510 <inc_lock+0x118>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	440b      	add	r3, r1
 80054fc:	330c      	adds	r3, #12
 80054fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000280 	.word	0x20000280

08005514 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	607b      	str	r3, [r7, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d825      	bhi.n	8005574 <dec_lock+0x60>
		n = Files[i].ctr;
 8005528:	4a17      	ldr	r2, [pc, #92]	; (8005588 <dec_lock+0x74>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4413      	add	r3, r2
 8005530:	330c      	adds	r3, #12
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005536:	89fb      	ldrh	r3, [r7, #14]
 8005538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553c:	d101      	bne.n	8005542 <dec_lock+0x2e>
 800553e:	2300      	movs	r3, #0
 8005540:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <dec_lock+0x3a>
 8005548:	89fb      	ldrh	r3, [r7, #14]
 800554a:	3b01      	subs	r3, #1
 800554c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <dec_lock+0x74>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	4413      	add	r3, r2
 8005556:	330c      	adds	r3, #12
 8005558:	89fa      	ldrh	r2, [r7, #14]
 800555a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800555c:	89fb      	ldrh	r3, [r7, #14]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d105      	bne.n	800556e <dec_lock+0x5a>
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <dec_lock+0x74>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	4413      	add	r3, r2
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	737b      	strb	r3, [r7, #13]
 8005572:	e001      	b.n	8005578 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005574:	2302      	movs	r3, #2
 8005576:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005578:	7b7b      	ldrb	r3, [r7, #13]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000280 	.word	0x20000280

0800558c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e010      	b.n	80055bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800559a:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <clear_lock+0x44>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	4413      	add	r3, r2
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d105      	bne.n	80055b6 <clear_lock+0x2a>
 80055aa:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <clear_lock+0x44>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d9eb      	bls.n	800559a <clear_lock+0xe>
	}
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000280 	.word	0x20000280

080055d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d034      	beq.n	8005652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7858      	ldrb	r0, [r3, #1]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055f8:	2301      	movs	r3, #1
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	f7ff fd40 	bl	8005080 <disk_write>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	e022      	b.n	8005652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	1ad2      	subs	r2, r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	429a      	cmp	r2, r3
 8005620:	d217      	bcs.n	8005652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	789b      	ldrb	r3, [r3, #2]
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e010      	b.n	800564c <sync_window+0x78>
					wsect += fs->fsize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7858      	ldrb	r0, [r3, #1]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800563e:	2301      	movs	r3, #1
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	f7ff fd1d 	bl	8005080 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	3b01      	subs	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d8eb      	bhi.n	800562a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d01b      	beq.n	80056ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ffad 	bl	80055d4 <sync_window>
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d113      	bne.n	80056ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7858      	ldrb	r0, [r3, #1]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800568e:	2301      	movs	r3, #1
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	f7ff fcd5 	bl	8005040 <disk_read>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff87 	bl	80055d4 <sync_window>
 80056c6:	4603      	mov	r3, r0
 80056c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d159      	bne.n	8005784 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d149      	bne.n	800576c <sync_fs+0xb4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d145      	bne.n	800576c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	899b      	ldrh	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	2100      	movs	r1, #0
 80056ee:	f7ff fda8 	bl	8005242 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3338      	adds	r3, #56	; 0x38
 80056f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80056fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fd37 	bl	8005172 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3338      	adds	r3, #56	; 0x38
 8005708:	4921      	ldr	r1, [pc, #132]	; (8005790 <sync_fs+0xd8>)
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fd4c 	bl	80051a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3338      	adds	r3, #56	; 0x38
 8005714:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005718:	491e      	ldr	r1, [pc, #120]	; (8005794 <sync_fs+0xdc>)
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fd44 	bl	80051a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3338      	adds	r3, #56	; 0x38
 8005724:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7ff fd3a 	bl	80051a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3338      	adds	r3, #56	; 0x38
 8005738:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f7ff fd30 	bl	80051a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7858      	ldrb	r0, [r3, #1]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	2301      	movs	r3, #1
 8005762:	f7ff fc8d 	bl	8005080 <disk_write>
			fs->fsi_flag = 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2200      	movs	r2, #0
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fca3 	bl	80050c0 <disk_ioctl>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <sync_fs+0xcc>
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	41615252 	.word	0x41615252
 8005794:	61417272 	.word	0x61417272

08005798 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	3b02      	subs	r3, #2
 80057a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	3b02      	subs	r3, #2
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d301      	bcc.n	80057b8 <clust2sect+0x20>
 80057b4:	2300      	movs	r3, #0
 80057b6:	e008      	b.n	80057ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	895b      	ldrh	r3, [r3, #10]
 80057bc:	461a      	mov	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	fb03 f202 	mul.w	r2, r3, r2
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	4413      	add	r3, r2
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d904      	bls.n	80057f6 <get_fat+0x20>
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80057f6:	2301      	movs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e0bb      	b.n	8005974 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	f000 8083 	beq.w	8005912 <get_fat+0x13c>
 800580c:	2b03      	cmp	r3, #3
 800580e:	f300 80a7 	bgt.w	8005960 <get_fat+0x18a>
 8005812:	2b01      	cmp	r3, #1
 8005814:	d002      	beq.n	800581c <get_fat+0x46>
 8005816:	2b02      	cmp	r3, #2
 8005818:	d056      	beq.n	80058c8 <get_fat+0xf2>
 800581a:	e0a1      	b.n	8005960 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	899b      	ldrh	r3, [r3, #12]
 8005832:	4619      	mov	r1, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	fbb3 f3f1 	udiv	r3, r3, r1
 800583a:	4413      	add	r3, r2
 800583c:	4619      	mov	r1, r3
 800583e:	6938      	ldr	r0, [r7, #16]
 8005840:	f7ff ff0c 	bl	800565c <move_window>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 808d 	bne.w	8005966 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	8992      	ldrh	r2, [r2, #12]
 8005856:	fbb3 f1f2 	udiv	r1, r3, r2
 800585a:	fb01 f202 	mul.w	r2, r1, r2
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4413      	add	r3, r2
 8005864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005868:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	899b      	ldrh	r3, [r3, #12]
 8005872:	4619      	mov	r1, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	fbb3 f3f1 	udiv	r3, r3, r1
 800587a:	4413      	add	r3, r2
 800587c:	4619      	mov	r1, r3
 800587e:	6938      	ldr	r0, [r7, #16]
 8005880:	f7ff feec 	bl	800565c <move_window>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d16f      	bne.n	800596a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	899b      	ldrh	r3, [r3, #12]
 800588e:	461a      	mov	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	fbb3 f1f2 	udiv	r1, r3, r2
 8005896:	fb01 f202 	mul.w	r2, r1, r2
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4413      	add	r3, r2
 80058a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <get_fat+0xe8>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	e002      	b.n	80058c4 <get_fat+0xee>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c4:	617b      	str	r3, [r7, #20]
			break;
 80058c6:	e055      	b.n	8005974 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	899b      	ldrh	r3, [r3, #12]
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	4619      	mov	r1, r3
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80058dc:	4413      	add	r3, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	6938      	ldr	r0, [r7, #16]
 80058e2:	f7ff febb 	bl	800565c <move_window>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d140      	bne.n	800596e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	8992      	ldrh	r2, [r2, #12]
 80058fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80058fe:	fb00 f202 	mul.w	r2, r0, r2
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	440b      	add	r3, r1
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fbf8 	bl	80050fc <ld_word>
 800590c:	4603      	mov	r3, r0
 800590e:	617b      	str	r3, [r7, #20]
			break;
 8005910:	e030      	b.n	8005974 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	899b      	ldrh	r3, [r3, #12]
 800591a:	089b      	lsrs	r3, r3, #2
 800591c:	b29b      	uxth	r3, r3
 800591e:	4619      	mov	r1, r3
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	fbb3 f3f1 	udiv	r3, r3, r1
 8005926:	4413      	add	r3, r2
 8005928:	4619      	mov	r1, r3
 800592a:	6938      	ldr	r0, [r7, #16]
 800592c:	f7ff fe96 	bl	800565c <move_window>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11d      	bne.n	8005972 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	8992      	ldrh	r2, [r2, #12]
 8005944:	fbb3 f0f2 	udiv	r0, r3, r2
 8005948:	fb00 f202 	mul.w	r2, r0, r2
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	440b      	add	r3, r1
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fbeb 	bl	800512c <ld_dword>
 8005956:	4603      	mov	r3, r0
 8005958:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800595c:	617b      	str	r3, [r7, #20]
			break;
 800595e:	e009      	b.n	8005974 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005960:	2301      	movs	r3, #1
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e006      	b.n	8005974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005966:	bf00      	nop
 8005968:	e004      	b.n	8005974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005972:	bf00      	nop
		}
	}

	return val;
 8005974:	697b      	ldr	r3, [r7, #20]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800597e:	b590      	push	{r4, r7, lr}
 8005980:	b089      	sub	sp, #36	; 0x24
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800598a:	2302      	movs	r3, #2
 800598c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b01      	cmp	r3, #1
 8005992:	f240 8109 	bls.w	8005ba8 <put_fat+0x22a>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	429a      	cmp	r2, r3
 800599e:	f080 8103 	bcs.w	8005ba8 <put_fat+0x22a>
		switch (fs->fs_type) {
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	f000 80b6 	beq.w	8005b18 <put_fat+0x19a>
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	f300 80fb 	bgt.w	8005ba8 <put_fat+0x22a>
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d003      	beq.n	80059be <put_fat+0x40>
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	f000 8083 	beq.w	8005ac2 <put_fat+0x144>
 80059bc:	e0f4      	b.n	8005ba8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4413      	add	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	899b      	ldrh	r3, [r3, #12]
 80059d4:	4619      	mov	r1, r3
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80059dc:	4413      	add	r3, r2
 80059de:	4619      	mov	r1, r3
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff fe3b 	bl	800565c <move_window>
 80059e6:	4603      	mov	r3, r0
 80059e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059ea:	7ffb      	ldrb	r3, [r7, #31]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f040 80d4 	bne.w	8005b9a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	61ba      	str	r2, [r7, #24]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	8992      	ldrh	r2, [r2, #12]
 8005a02:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a06:	fb00 f202 	mul.w	r2, r0, r2
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <put_fat+0xb8>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	b25a      	sxtb	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	b25b      	sxtb	r3, r3
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	e001      	b.n	8005a3a <put_fat+0xbc>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	899b      	ldrh	r3, [r3, #12]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a54:	4413      	add	r3, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff fdff 	bl	800565c <move_window>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a62:	7ffb      	ldrb	r3, [r7, #31]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 809a 	bne.w	8005b9e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	899b      	ldrh	r3, [r3, #12]
 8005a74:	461a      	mov	r2, r3
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a7c:	fb00 f202 	mul.w	r2, r0, r2
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	440b      	add	r3, r1
 8005a84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <put_fat+0x11a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	091b      	lsrs	r3, r3, #4
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e00e      	b.n	8005ab6 <put_fat+0x138>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	b25b      	sxtb	r3, r3
 8005a9e:	f023 030f 	bic.w	r3, r3, #15
 8005aa2:	b25a      	sxtb	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	70da      	strb	r2, [r3, #3]
			break;
 8005ac0:	e072      	b.n	8005ba8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	899b      	ldrh	r3, [r3, #12]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4619      	mov	r1, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff fdbe 	bl	800565c <move_window>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ae4:	7ffb      	ldrb	r3, [r7, #31]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d15b      	bne.n	8005ba2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	8992      	ldrh	r2, [r2, #12]
 8005af8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005afc:	fb00 f202 	mul.w	r2, r0, r2
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	440b      	add	r3, r1
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	b292      	uxth	r2, r2
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fb31 	bl	8005172 <st_word>
			fs->wflag = 1;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	70da      	strb	r2, [r3, #3]
			break;
 8005b16:	e047      	b.n	8005ba8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	899b      	ldrh	r3, [r3, #12]
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	4619      	mov	r1, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff fd93 	bl	800565c <move_window>
 8005b36:	4603      	mov	r3, r0
 8005b38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b3a:	7ffb      	ldrb	r3, [r7, #31]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d132      	bne.n	8005ba6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	8992      	ldrh	r2, [r2, #12]
 8005b54:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b58:	fb00 f202 	mul.w	r2, r0, r2
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	440b      	add	r3, r1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fae3 	bl	800512c <ld_dword>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b6c:	4323      	orrs	r3, r4
 8005b6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	8992      	ldrh	r2, [r2, #12]
 8005b7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b82:	fb00 f202 	mul.w	r2, r0, r2
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	440b      	add	r3, r1
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fb0b 	bl	80051a8 <st_dword>
			fs->wflag = 1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	70da      	strb	r2, [r3, #3]
			break;
 8005b98:	e006      	b.n	8005ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b9a:	bf00      	nop
 8005b9c:	e004      	b.n	8005ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005ba6:	bf00      	nop
		}
	}
	return res;
 8005ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3724      	adds	r7, #36	; 0x24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd90      	pop	{r4, r7, pc}

08005bb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b088      	sub	sp, #32
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d904      	bls.n	8005bd8 <remove_chain+0x26>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d301      	bcc.n	8005bdc <remove_chain+0x2a>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e04b      	b.n	8005c74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	69b8      	ldr	r0, [r7, #24]
 8005bea:	f7ff fec8 	bl	800597e <put_fat>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005bf2:	7ffb      	ldrb	r3, [r7, #31]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <remove_chain+0x4a>
 8005bf8:	7ffb      	ldrb	r3, [r7, #31]
 8005bfa:	e03b      	b.n	8005c74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fde9 	bl	80057d6 <get_fat>
 8005c04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d031      	beq.n	8005c70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <remove_chain+0x64>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e02e      	b.n	8005c74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d101      	bne.n	8005c22 <remove_chain+0x70>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e028      	b.n	8005c74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c22:	2200      	movs	r2, #0
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	69b8      	ldr	r0, [r7, #24]
 8005c28:	f7ff fea9 	bl	800597e <put_fat>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <remove_chain+0x88>
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
 8005c38:	e01c      	b.n	8005c74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	3b02      	subs	r3, #2
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d20b      	bcs.n	8005c60 <remove_chain+0xae>
			fs->free_clst++;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	791b      	ldrb	r3, [r3, #4]
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3c6      	bcc.n	8005bfc <remove_chain+0x4a>
 8005c6e:	e000      	b.n	8005c72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10d      	bne.n	8005cae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d004      	beq.n	8005ca8 <create_chain+0x2c>
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d31b      	bcc.n	8005ce0 <create_chain+0x64>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	e018      	b.n	8005ce0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff fd90 	bl	80057d6 <get_fat>
 8005cb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d801      	bhi.n	8005cc2 <create_chain+0x46>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e070      	b.n	8005da4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d101      	bne.n	8005cce <create_chain+0x52>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	e06a      	b.n	8005da4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d201      	bcs.n	8005cdc <create_chain+0x60>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	e063      	b.n	8005da4 <create_chain+0x128>
		scl = clst;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d307      	bcc.n	8005d04 <create_chain+0x88>
				ncl = 2;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d901      	bls.n	8005d04 <create_chain+0x88>
 8005d00:	2300      	movs	r3, #0
 8005d02:	e04f      	b.n	8005da4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d04:	69f9      	ldr	r1, [r7, #28]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fd65 	bl	80057d6 <get_fat>
 8005d0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d003      	beq.n	8005d22 <create_chain+0xa6>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d101      	bne.n	8005d26 <create_chain+0xaa>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	e03e      	b.n	8005da4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d1da      	bne.n	8005ce4 <create_chain+0x68>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e038      	b.n	8005da4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295
 8005d38:	69f9      	ldr	r1, [r7, #28]
 8005d3a:	6938      	ldr	r0, [r7, #16]
 8005d3c:	f7ff fe1f 	bl	800597e <put_fat>
 8005d40:	4603      	mov	r3, r0
 8005d42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <create_chain+0xe2>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6938      	ldr	r0, [r7, #16]
 8005d56:	f7ff fe12 	bl	800597e <put_fat>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d116      	bne.n	8005d92 <create_chain+0x116>
		fs->last_clst = ncl;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	3b02      	subs	r3, #2
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d804      	bhi.n	8005d82 <create_chain+0x106>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	1e5a      	subs	r2, r3, #1
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	791b      	ldrb	r3, [r3, #4]
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	711a      	strb	r2, [r3, #4]
 8005d90:	e007      	b.n	8005da2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d102      	bne.n	8005d9e <create_chain+0x122>
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9c:	e000      	b.n	8005da0 <create_chain+0x124>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005da2:	69fb      	ldr	r3, [r7, #28]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	899b      	ldrh	r3, [r3, #12]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	8952      	ldrh	r2, [r2, #10]
 8005dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1d1a      	adds	r2, r3, #4
 8005dde:	613a      	str	r2, [r7, #16]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <clmt_clust+0x42>
 8005dea:	2300      	movs	r3, #0
 8005dec:	e010      	b.n	8005e10 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d307      	bcc.n	8005e06 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3304      	adds	r3, #4
 8005e02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e04:	e7e9      	b.n	8005dda <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005e06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4413      	add	r3, r2
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e32:	d204      	bcs.n	8005e3e <dir_sdi+0x22>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e071      	b.n	8005f26 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <dir_sdi+0x46>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d902      	bls.n	8005e62 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10c      	bne.n	8005e82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	8912      	ldrh	r2, [r2, #8]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d301      	bcc.n	8005e78 <dir_sdi+0x5c>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e056      	b.n	8005f26 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	61da      	str	r2, [r3, #28]
 8005e80:	e02d      	b.n	8005ede <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	895b      	ldrh	r3, [r3, #10]
 8005e86:	461a      	mov	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	899b      	ldrh	r3, [r3, #12]
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e92:	e019      	b.n	8005ec8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6979      	ldr	r1, [r7, #20]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fc9c 	bl	80057d6 <get_fat>
 8005e9e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d101      	bne.n	8005eac <dir_sdi+0x90>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e03c      	b.n	8005f26 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d904      	bls.n	8005ebc <dir_sdi+0xa0>
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d301      	bcc.n	8005ec0 <dir_sdi+0xa4>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e032      	b.n	8005f26 <dir_sdi+0x10a>
			ofs -= csz;
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d2e1      	bcs.n	8005e94 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005ed0:	6979      	ldr	r1, [r7, #20]
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f7ff fc60 	bl	8005798 <clust2sect>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <dir_sdi+0xd4>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e01a      	b.n	8005f26 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	899b      	ldrh	r3, [r3, #12]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f00:	441a      	add	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	899b      	ldrh	r3, [r3, #12]
 8005f10:	461a      	mov	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f18:	fb00 f202 	mul.w	r2, r0, r2
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	18ca      	adds	r2, r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	3320      	adds	r3, #32
 8005f44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <dir_next+0x28>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f54:	d301      	bcc.n	8005f5a <dir_next+0x2c>
 8005f56:	2304      	movs	r3, #4
 8005f58:	e0bb      	b.n	80060d2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	899b      	ldrh	r3, [r3, #12]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f66:	fb01 f202 	mul.w	r2, r1, r2
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 809d 	bne.w	80060ac <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	8912      	ldrh	r2, [r2, #8]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	f0c0 808d 	bcc.w	80060ac <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	61da      	str	r2, [r3, #28]
 8005f98:	2304      	movs	r3, #4
 8005f9a:	e09a      	b.n	80060d2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	899b      	ldrh	r3, [r3, #12]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	8952      	ldrh	r2, [r2, #10]
 8005fac:	3a01      	subs	r2, #1
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d17b      	bne.n	80060ac <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7ff fc0a 	bl	80057d6 <get_fat>
 8005fc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d801      	bhi.n	8005fce <dir_next+0xa0>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e081      	b.n	80060d2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d101      	bne.n	8005fda <dir_next+0xac>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e07b      	b.n	80060d2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d359      	bcc.n	8006098 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	61da      	str	r2, [r3, #28]
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	e06e      	b.n	80060d2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f7ff fe3d 	bl	8005c7c <create_chain>
 8006002:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <dir_next+0xe0>
 800600a:	2307      	movs	r3, #7
 800600c:	e061      	b.n	80060d2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <dir_next+0xea>
 8006014:	2302      	movs	r3, #2
 8006016:	e05c      	b.n	80060d2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d101      	bne.n	8006024 <dir_next+0xf6>
 8006020:	2301      	movs	r3, #1
 8006022:	e056      	b.n	80060d2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff fad5 	bl	80055d4 <sync_window>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <dir_next+0x106>
 8006030:	2301      	movs	r3, #1
 8006032:	e04e      	b.n	80060d2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	899b      	ldrh	r3, [r3, #12]
 800603e:	461a      	mov	r2, r3
 8006040:	2100      	movs	r1, #0
 8006042:	f7ff f8fe 	bl	8005242 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	6979      	ldr	r1, [r7, #20]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fba3 	bl	8005798 <clust2sect>
 8006052:	4602      	mov	r2, r0
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	635a      	str	r2, [r3, #52]	; 0x34
 8006058:	e012      	b.n	8006080 <dir_next+0x152>
						fs->wflag = 1;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fab7 	bl	80055d4 <sync_window>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <dir_next+0x142>
 800606c:	2301      	movs	r3, #1
 800606e:	e030      	b.n	80060d2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	3301      	adds	r3, #1
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	635a      	str	r2, [r3, #52]	; 0x34
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	895b      	ldrh	r3, [r3, #10]
 8006084:	461a      	mov	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4293      	cmp	r3, r2
 800608a:	d3e6      	bcc.n	800605a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad2      	subs	r2, r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800609e:	6979      	ldr	r1, [r7, #20]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff fb79 	bl	8005798 <clust2sect>
 80060a6:	4602      	mov	r2, r0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	899b      	ldrh	r3, [r3, #12]
 80060bc:	461a      	mov	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80060c4:	fb00 f202 	mul.w	r2, r0, r2
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	18ca      	adds	r2, r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b086      	sub	sp, #24
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80060ea:	2100      	movs	r1, #0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fe95 	bl	8005e1c <dir_sdi>
 80060f2:	4603      	mov	r3, r0
 80060f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d12b      	bne.n	8006154 <dir_alloc+0x7a>
		n = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	4619      	mov	r1, r3
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7ff faa8 	bl	800565c <move_window>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d11d      	bne.n	8006152 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2be5      	cmp	r3, #229	; 0xe5
 800611e:	d004      	beq.n	800612a <dir_alloc+0x50>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3301      	adds	r3, #1
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d102      	bne.n	800613e <dir_alloc+0x64>
 8006138:	e00c      	b.n	8006154 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800613a:	2300      	movs	r3, #0
 800613c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800613e:	2101      	movs	r1, #1
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fef4 	bl	8005f2e <dir_next>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0d7      	beq.n	8006100 <dir_alloc+0x26>
 8006150:	e000      	b.n	8006154 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006152:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b04      	cmp	r3, #4
 8006158:	d101      	bne.n	800615e <dir_alloc+0x84>
 800615a:	2307      	movs	r3, #7
 800615c:	75fb      	strb	r3, [r7, #23]
	return res;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	331a      	adds	r3, #26
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe ffc0 	bl	80050fc <ld_word>
 800617c:	4603      	mov	r3, r0
 800617e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d109      	bne.n	800619c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe ffb5 	bl	80050fc <ld_word>
 8006192:	4603      	mov	r3, r0
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800619c:	68fb      	ldr	r3, [r7, #12]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	331a      	adds	r3, #26
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	b292      	uxth	r2, r2
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe ffd8 	bl	8005172 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d109      	bne.n	80061de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f103 0214 	add.w	r2, r3, #20
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f7fe ffca 	bl	8005172 <st_word>
	}
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	331a      	adds	r3, #26
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe ff80 	bl	80050fc <ld_word>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <cmp_lfn+0x1e>
 8006202:	2300      	movs	r3, #0
 8006204:	e059      	b.n	80062ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800620e:	1e5a      	subs	r2, r3, #1
 8006210:	4613      	mov	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800621c:	2301      	movs	r3, #1
 800621e:	81fb      	strh	r3, [r7, #14]
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	e033      	b.n	800628e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006226:	4a27      	ldr	r2, [pc, #156]	; (80062c4 <cmp_lfn+0xdc>)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	4413      	add	r3, r2
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe ff61 	bl	80050fc <ld_word>
 800623a:	4603      	mov	r3, r0
 800623c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800623e:	89fb      	ldrh	r3, [r7, #14]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2bfe      	cmp	r3, #254	; 0xfe
 8006248:	d812      	bhi.n	8006270 <cmp_lfn+0x88>
 800624a:	89bb      	ldrh	r3, [r7, #12]
 800624c:	4618      	mov	r0, r3
 800624e:	f001 fd4b 	bl	8007ce8 <ff_wtoupper>
 8006252:	4603      	mov	r3, r0
 8006254:	461c      	mov	r4, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	617a      	str	r2, [r7, #20]
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f001 fd3f 	bl	8007ce8 <ff_wtoupper>
 800626a:	4603      	mov	r3, r0
 800626c:	429c      	cmp	r4, r3
 800626e:	d001      	beq.n	8006274 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006270:	2300      	movs	r3, #0
 8006272:	e022      	b.n	80062ba <cmp_lfn+0xd2>
			}
			wc = uc;
 8006274:	89bb      	ldrh	r3, [r7, #12]
 8006276:	81fb      	strh	r3, [r7, #14]
 8006278:	e006      	b.n	8006288 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800627a:	89bb      	ldrh	r3, [r7, #12]
 800627c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006280:	4293      	cmp	r3, r2
 8006282:	d001      	beq.n	8006288 <cmp_lfn+0xa0>
 8006284:	2300      	movs	r3, #0
 8006286:	e018      	b.n	80062ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3301      	adds	r3, #1
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b0c      	cmp	r3, #12
 8006292:	d9c8      	bls.n	8006226 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <cmp_lfn+0xd0>
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d008      	beq.n	80062b8 <cmp_lfn+0xd0>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <cmp_lfn+0xd0>
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80062b8:	2301      	movs	r3, #1
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd90      	pop	{r4, r7, pc}
 80062c2:	bf00      	nop
 80062c4:	08009048 	.word	0x08009048

080062c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4611      	mov	r1, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	460b      	mov	r3, r1
 80062d8:	71fb      	strb	r3, [r7, #7]
 80062da:	4613      	mov	r3, r2
 80062dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	330d      	adds	r3, #13
 80062e2:	79ba      	ldrb	r2, [r7, #6]
 80062e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	330b      	adds	r3, #11
 80062ea:	220f      	movs	r2, #15
 80062ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	330c      	adds	r3, #12
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	331a      	adds	r3, #26
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe ff38 	bl	8005172 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	1e5a      	subs	r2, r3, #1
 8006306:	4613      	mov	r3, r2
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	82fb      	strh	r3, [r7, #22]
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800631a:	8afb      	ldrh	r3, [r7, #22]
 800631c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006320:	4293      	cmp	r3, r2
 8006322:	d007      	beq.n	8006334 <put_lfn+0x6c>
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	61fa      	str	r2, [r7, #28]
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <put_lfn+0xcc>)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	4413      	add	r3, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	8afa      	ldrh	r2, [r7, #22]
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe ff13 	bl	8005172 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800634c:	8afb      	ldrh	r3, [r7, #22]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <put_lfn+0x90>
 8006352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006356:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	3301      	adds	r3, #1
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b0c      	cmp	r3, #12
 8006362:	d9da      	bls.n	800631a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006364:	8afb      	ldrh	r3, [r7, #22]
 8006366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800636a:	4293      	cmp	r3, r2
 800636c:	d006      	beq.n	800637c <put_lfn+0xb4>
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d103      	bne.n	8006384 <put_lfn+0xbc>
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006382:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	79fa      	ldrb	r2, [r7, #7]
 8006388:	701a      	strb	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	3720      	adds	r7, #32
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	08009048 	.word	0x08009048

08006398 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08c      	sub	sp, #48	; 0x30
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80063a6:	220b      	movs	r2, #11
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7fe ff28 	bl	8005200 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	d92b      	bls.n	800640e <gen_numname+0x76>
		sr = seq;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80063ba:	e022      	b.n	8006402 <gen_numname+0x6a>
			wc = *lfn++;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1c9a      	adds	r2, r3, #2
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80063c6:	2300      	movs	r3, #0
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ca:	e017      	b.n	80063fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	005a      	lsls	r2, r3, #1
 80063d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	4413      	add	r3, r2
 80063d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80063da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d005      	beq.n	80063f6 <gen_numname+0x5e>
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80063f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80063f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	3301      	adds	r3, #1
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d9e4      	bls.n	80063cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1d8      	bne.n	80063bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800640e:	2307      	movs	r3, #7
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	b2db      	uxtb	r3, r3
 800641c:	3330      	adds	r3, #48	; 0x30
 800641e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006426:	2b39      	cmp	r3, #57	; 0x39
 8006428:	d904      	bls.n	8006434 <gen_numname+0x9c>
 800642a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800642e:	3307      	adds	r3, #7
 8006430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	1e5a      	subs	r2, r3, #1
 8006438:	62ba      	str	r2, [r7, #40]	; 0x28
 800643a:	3330      	adds	r3, #48	; 0x30
 800643c:	443b      	add	r3, r7
 800643e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006442:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	091b      	lsrs	r3, r3, #4
 800644a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1df      	bne.n	8006412 <gen_numname+0x7a>
	ns[i] = '~';
 8006452:	f107 0214 	add.w	r2, r7, #20
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	4413      	add	r3, r2
 800645a:	227e      	movs	r2, #126	; 0x7e
 800645c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	e002      	b.n	800646a <gen_numname+0xd2>
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	3301      	adds	r3, #1
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	429a      	cmp	r2, r3
 8006470:	d205      	bcs.n	800647e <gen_numname+0xe6>
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	4413      	add	r3, r2
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b20      	cmp	r3, #32
 800647c:	d1f2      	bne.n	8006464 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	2b07      	cmp	r3, #7
 8006482:	d807      	bhi.n	8006494 <gen_numname+0xfc>
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	62ba      	str	r2, [r7, #40]	; 0x28
 800648a:	3330      	adds	r3, #48	; 0x30
 800648c:	443b      	add	r3, r7
 800648e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006492:	e000      	b.n	8006496 <gen_numname+0xfe>
 8006494:	2120      	movs	r1, #32
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	627a      	str	r2, [r7, #36]	; 0x24
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	460a      	mov	r2, r1
 80064a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	2b07      	cmp	r3, #7
 80064a8:	d9e9      	bls.n	800647e <gen_numname+0xe6>
}
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	3730      	adds	r7, #48	; 0x30
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80064c0:	230b      	movs	r3, #11
 80064c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	0852      	lsrs	r2, r2, #1
 80064ca:	01db      	lsls	r3, r3, #7
 80064cc:	4313      	orrs	r3, r2
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	6079      	str	r1, [r7, #4]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	4413      	add	r3, r2
 80064da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	3b01      	subs	r3, #1
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ed      	bne.n	80064c4 <sum_sfn+0x10>
	return sum;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006504:	2100      	movs	r1, #0
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fc88 	bl	8005e1c <dir_sdi>
 800650c:	4603      	mov	r3, r0
 800650e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <dir_find+0x24>
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	e0a9      	b.n	800666e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800651a:	23ff      	movs	r3, #255	; 0xff
 800651c:	753b      	strb	r3, [r7, #20]
 800651e:	7d3b      	ldrb	r3, [r7, #20]
 8006520:	757b      	strb	r3, [r7, #21]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	4619      	mov	r1, r3
 8006530:	6938      	ldr	r0, [r7, #16]
 8006532:	f7ff f893 	bl	800565c <move_window>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 8090 	bne.w	8006662 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800654a:	7dbb      	ldrb	r3, [r7, #22]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <dir_find+0x60>
 8006550:	2304      	movs	r3, #4
 8006552:	75fb      	strb	r3, [r7, #23]
 8006554:	e08a      	b.n	800666c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	330b      	adds	r3, #11
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7bfa      	ldrb	r2, [r7, #15]
 8006568:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800656a:	7dbb      	ldrb	r3, [r7, #22]
 800656c:	2be5      	cmp	r3, #229	; 0xe5
 800656e:	d007      	beq.n	8006580 <dir_find+0x8a>
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <dir_find+0x98>
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b0f      	cmp	r3, #15
 800657e:	d006      	beq.n	800658e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006580:	23ff      	movs	r3, #255	; 0xff
 8006582:	757b      	strb	r3, [r7, #21]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
 800658c:	e05e      	b.n	800664c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d136      	bne.n	8006602 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d154      	bne.n	800664c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80065a2:	7dbb      	ldrb	r3, [r7, #22]
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	7b5b      	ldrb	r3, [r3, #13]
 80065b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80065b4:	7dbb      	ldrb	r3, [r7, #22]
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ba:	75bb      	strb	r3, [r7, #22]
 80065bc:	7dbb      	ldrb	r3, [r7, #22]
 80065be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065c8:	7dba      	ldrb	r2, [r7, #22]
 80065ca:	7d7b      	ldrb	r3, [r7, #21]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d115      	bne.n	80065fc <dir_find+0x106>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	330d      	adds	r3, #13
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	7d3a      	ldrb	r2, [r7, #20]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d10e      	bne.n	80065fc <dir_find+0x106>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f7ff fdfd 	bl	80061e8 <cmp_lfn>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <dir_find+0x106>
 80065f4:	7d7b      	ldrb	r3, [r7, #21]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e000      	b.n	80065fe <dir_find+0x108>
 80065fc:	23ff      	movs	r3, #255	; 0xff
 80065fe:	757b      	strb	r3, [r7, #21]
 8006600:	e024      	b.n	800664c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006602:	7d7b      	ldrb	r3, [r7, #21]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <dir_find+0x126>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff ff51 	bl	80064b4 <sum_sfn>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	7d3b      	ldrb	r3, [r7, #20]
 8006618:	4293      	cmp	r3, r2
 800661a:	d024      	beq.n	8006666 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <dir_find+0x14a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a18      	ldr	r0, [r3, #32]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3324      	adds	r3, #36	; 0x24
 8006632:	220b      	movs	r2, #11
 8006634:	4619      	mov	r1, r3
 8006636:	f7fe fe1f 	bl	8005278 <mem_cmp>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d014      	beq.n	800666a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006640:	23ff      	movs	r3, #255	; 0xff
 8006642:	757b      	strb	r3, [r7, #21]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f04f 32ff 	mov.w	r2, #4294967295
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fc6d 	bl	8005f2e <dir_next>
 8006654:	4603      	mov	r3, r0
 8006656:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006658:	7dfb      	ldrb	r3, [r7, #23]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f43f af65 	beq.w	800652a <dir_find+0x34>
 8006660:	e004      	b.n	800666c <dir_find+0x176>
		if (res != FR_OK) break;
 8006662:	bf00      	nop
 8006664:	e002      	b.n	800666c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006666:	bf00      	nop
 8006668:	e000      	b.n	800666c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800666a:	bf00      	nop

	return res;
 800666c:	7dfb      	ldrb	r3, [r7, #23]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	; 0x30
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800668c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <dir_register+0x20>
 8006694:	2306      	movs	r3, #6
 8006696:	e0e0      	b.n	800685a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
 800669c:	e002      	b.n	80066a4 <dir_register+0x2c>
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	3301      	adds	r3, #1
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	4413      	add	r3, r2
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f4      	bne.n	800669e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80066ba:	f107 030c 	add.w	r3, r7, #12
 80066be:	220c      	movs	r2, #12
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fd9d 	bl	8005200 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d032      	beq.n	8006736 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2240      	movs	r2, #64	; 0x40
 80066d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80066d8:	2301      	movs	r3, #1
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
 80066dc:	e016      	b.n	800670c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	f107 010c 	add.w	r1, r7, #12
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	f7ff fe53 	bl	8006398 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff feff 	bl	80064f6 <dir_find>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80066fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	3301      	adds	r3, #1
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	2b63      	cmp	r3, #99	; 0x63
 8006710:	d9e5      	bls.n	80066de <dir_register+0x66>
 8006712:	e000      	b.n	8006716 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006714:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	2b64      	cmp	r3, #100	; 0x64
 800671a:	d101      	bne.n	8006720 <dir_register+0xa8>
 800671c:	2307      	movs	r3, #7
 800671e:	e09c      	b.n	800685a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006724:	2b04      	cmp	r3, #4
 8006726:	d002      	beq.n	800672e <dir_register+0xb6>
 8006728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800672c:	e095      	b.n	800685a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800672e:	7dfa      	ldrb	r2, [r7, #23]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <dir_register+0xd8>
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	330c      	adds	r3, #12
 8006744:	4a47      	ldr	r2, [pc, #284]	; (8006864 <dir_register+0x1ec>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	3301      	adds	r3, #1
 800674e:	e000      	b.n	8006752 <dir_register+0xda>
 8006750:	2301      	movs	r3, #1
 8006752:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006754:	6a39      	ldr	r1, [r7, #32]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fcbf 	bl	80060da <dir_alloc>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006766:	2b00      	cmp	r3, #0
 8006768:	d148      	bne.n	80067fc <dir_register+0x184>
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	3b01      	subs	r3, #1
 800676e:	623b      	str	r3, [r7, #32]
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d042      	beq.n	80067fc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695a      	ldr	r2, [r3, #20]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	015b      	lsls	r3, r3, #5
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff fb4a 	bl	8005e1c <dir_sdi>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800678e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006792:	2b00      	cmp	r3, #0
 8006794:	d132      	bne.n	80067fc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3324      	adds	r3, #36	; 0x24
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fe8a 	bl	80064b4 <sum_sfn>
 80067a0:	4603      	mov	r3, r0
 80067a2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4619      	mov	r1, r3
 80067aa:	69f8      	ldr	r0, [r7, #28]
 80067ac:	f7fe ff56 	bl	800565c <move_window>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80067b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d11d      	bne.n	80067fa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	6918      	ldr	r0, [r3, #16]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a19      	ldr	r1, [r3, #32]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	7efb      	ldrb	r3, [r7, #27]
 80067cc:	f7ff fd7c 	bl	80062c8 <put_lfn>
				fs->wflag = 1;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2201      	movs	r2, #1
 80067d4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80067d6:	2100      	movs	r1, #0
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fba8 	bl	8005f2e <dir_next>
 80067de:	4603      	mov	r3, r0
 80067e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80067e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <dir_register+0x184>
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1d5      	bne.n	80067a4 <dir_register+0x12c>
 80067f8:	e000      	b.n	80067fc <dir_register+0x184>
				if (res != FR_OK) break;
 80067fa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80067fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006800:	2b00      	cmp	r3, #0
 8006802:	d128      	bne.n	8006856 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	4619      	mov	r1, r3
 800680a:	69f8      	ldr	r0, [r7, #28]
 800680c:	f7fe ff26 	bl	800565c <move_window>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11b      	bne.n	8006856 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	2220      	movs	r2, #32
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fd0b 	bl	8005242 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a18      	ldr	r0, [r3, #32]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	220b      	movs	r2, #11
 8006836:	4619      	mov	r1, r3
 8006838:	f7fe fce2 	bl	8005200 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	330c      	adds	r3, #12
 8006848:	f002 0218 	and.w	r2, r2, #24
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2201      	movs	r2, #1
 8006854:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800685a:	4618      	mov	r0, r3
 800685c:	3730      	adds	r7, #48	; 0x30
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	4ec4ec4f 	.word	0x4ec4ec4f

08006868 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	61ba      	str	r2, [r7, #24]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4413      	add	r3, r2
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006898:	2b1f      	cmp	r3, #31
 800689a:	d940      	bls.n	800691e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800689c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800689e:	2b2f      	cmp	r3, #47	; 0x2f
 80068a0:	d006      	beq.n	80068b0 <create_name+0x48>
 80068a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068a4:	2b5c      	cmp	r3, #92	; 0x5c
 80068a6:	d110      	bne.n	80068ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80068a8:	e002      	b.n	80068b0 <create_name+0x48>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	3301      	adds	r3, #1
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	4413      	add	r3, r2
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b2f      	cmp	r3, #47	; 0x2f
 80068ba:	d0f6      	beq.n	80068aa <create_name+0x42>
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	4413      	add	r3, r2
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b5c      	cmp	r3, #92	; 0x5c
 80068c6:	d0f0      	beq.n	80068aa <create_name+0x42>
			break;
 80068c8:	e02a      	b.n	8006920 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2bfe      	cmp	r3, #254	; 0xfe
 80068ce:	d901      	bls.n	80068d4 <create_name+0x6c>
 80068d0:	2306      	movs	r3, #6
 80068d2:	e17d      	b.n	8006bd0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80068d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80068da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068dc:	2101      	movs	r1, #1
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 f9c6 	bl	8007c70 <ff_convert>
 80068e4:	4603      	mov	r3, r0
 80068e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80068e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <create_name+0x8a>
 80068ee:	2306      	movs	r3, #6
 80068f0:	e16e      	b.n	8006bd0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80068f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f4:	2b7f      	cmp	r3, #127	; 0x7f
 80068f6:	d809      	bhi.n	800690c <create_name+0xa4>
 80068f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068fa:	4619      	mov	r1, r3
 80068fc:	488d      	ldr	r0, [pc, #564]	; (8006b34 <create_name+0x2cc>)
 80068fe:	f7fe fce2 	bl	80052c6 <chk_chr>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <create_name+0xa4>
 8006908:	2306      	movs	r3, #6
 800690a:	e161      	b.n	8006bd0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	617a      	str	r2, [r7, #20]
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800691a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800691c:	e7b4      	b.n	8006888 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800691e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	441a      	add	r2, r3
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800692a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800692c:	2b1f      	cmp	r3, #31
 800692e:	d801      	bhi.n	8006934 <create_name+0xcc>
 8006930:	2304      	movs	r3, #4
 8006932:	e000      	b.n	8006936 <create_name+0xce>
 8006934:	2300      	movs	r3, #0
 8006936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800693a:	e011      	b.n	8006960 <create_name+0xf8>
		w = lfn[di - 1];
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006942:	3b01      	subs	r3, #1
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800694e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006950:	2b20      	cmp	r3, #32
 8006952:	d002      	beq.n	800695a <create_name+0xf2>
 8006954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006956:	2b2e      	cmp	r3, #46	; 0x2e
 8006958:	d106      	bne.n	8006968 <create_name+0x100>
		di--;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3b01      	subs	r3, #1
 800695e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ea      	bne.n	800693c <create_name+0xd4>
 8006966:	e000      	b.n	800696a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006968:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	2200      	movs	r2, #0
 8006974:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <create_name+0x118>
 800697c:	2306      	movs	r3, #6
 800697e:	e127      	b.n	8006bd0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	220b      	movs	r2, #11
 8006986:	2120      	movs	r1, #32
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe fc5a 	bl	8005242 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800698e:	2300      	movs	r3, #0
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	e002      	b.n	800699a <create_name+0x132>
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	3301      	adds	r3, #1
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d0f5      	beq.n	8006994 <create_name+0x12c>
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	2b2e      	cmp	r3, #46	; 0x2e
 80069b4:	d0ee      	beq.n	8006994 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <create_name+0x168>
 80069bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069c0:	f043 0303 	orr.w	r3, r3, #3
 80069c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80069c8:	e002      	b.n	80069d0 <create_name+0x168>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <create_name+0x182>
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80069dc:	3b01      	subs	r3, #1
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	2b2e      	cmp	r3, #46	; 0x2e
 80069e8:	d1ef      	bne.n	80069ca <create_name+0x162>

	i = b = 0; ni = 8;
 80069ea:	2300      	movs	r3, #0
 80069ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069f0:	2300      	movs	r3, #0
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	2308      	movs	r3, #8
 80069f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	61ba      	str	r2, [r7, #24]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8090 	beq.w	8006b30 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d006      	beq.n	8006a24 <create_name+0x1bc>
 8006a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a18:	2b2e      	cmp	r3, #46	; 0x2e
 8006a1a:	d10a      	bne.n	8006a32 <create_name+0x1ca>
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d006      	beq.n	8006a32 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a28:	f043 0303 	orr.w	r3, r3, #3
 8006a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a30:	e07d      	b.n	8006b2e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d203      	bcs.n	8006a42 <create_name+0x1da>
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d123      	bne.n	8006a8a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b0b      	cmp	r3, #11
 8006a46:	d106      	bne.n	8006a56 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4c:	f043 0303 	orr.w	r3, r3, #3
 8006a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a54:	e075      	b.n	8006b42 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d005      	beq.n	8006a6a <create_name+0x202>
 8006a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a62:	f043 0303 	orr.w	r3, r3, #3
 8006a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d866      	bhi.n	8006b40 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	2308      	movs	r3, #8
 8006a78:	623b      	str	r3, [r7, #32]
 8006a7a:	230b      	movs	r3, #11
 8006a7c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a88:	e051      	b.n	8006b2e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d914      	bls.n	8006aba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a92:	2100      	movs	r1, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f8eb 	bl	8007c70 <ff_convert>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <create_name+0x246>
 8006aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa6:	3b80      	subs	r3, #128	; 0x80
 8006aa8:	4a23      	ldr	r2, [pc, #140]	; (8006b38 <create_name+0x2d0>)
 8006aaa:	5cd3      	ldrb	r3, [r2, r3]
 8006aac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab2:	f043 0302 	orr.w	r3, r3, #2
 8006ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <create_name+0x268>
 8006ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	481d      	ldr	r0, [pc, #116]	; (8006b3c <create_name+0x2d4>)
 8006ac6:	f7fe fbfe 	bl	80052c6 <chk_chr>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006ad0:	235f      	movs	r3, #95	; 0x5f
 8006ad2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad8:	f043 0303 	orr.w	r3, r3, #3
 8006adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ae0:	e01b      	b.n	8006b1a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ae4:	2b40      	cmp	r3, #64	; 0x40
 8006ae6:	d909      	bls.n	8006afc <create_name+0x294>
 8006ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aea:	2b5a      	cmp	r3, #90	; 0x5a
 8006aec:	d806      	bhi.n	8006afc <create_name+0x294>
					b |= 2;
 8006aee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006af2:	f043 0302 	orr.w	r3, r3, #2
 8006af6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006afa:	e00e      	b.n	8006b1a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006afe:	2b60      	cmp	r3, #96	; 0x60
 8006b00:	d90b      	bls.n	8006b1a <create_name+0x2b2>
 8006b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b04:	2b7a      	cmp	r3, #122	; 0x7a
 8006b06:	d808      	bhi.n	8006b1a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b16:	3b20      	subs	r3, #32
 8006b18:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	623a      	str	r2, [r7, #32]
 8006b20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b22:	b2d1      	uxtb	r1, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	4413      	add	r3, r2
 8006b28:	460a      	mov	r2, r1
 8006b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006b2e:	e763      	b.n	80069f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006b30:	bf00      	nop
 8006b32:	e006      	b.n	8006b42 <create_name+0x2da>
 8006b34:	08008f4c 	.word	0x08008f4c
 8006b38:	08008fc8 	.word	0x08008fc8
 8006b3c:	08008f58 	.word	0x08008f58
			if (si > di) break;			/* No extension */
 8006b40:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b48:	2be5      	cmp	r3, #229	; 0xe5
 8006b4a:	d103      	bne.n	8006b54 <create_name+0x2ec>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2205      	movs	r2, #5
 8006b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d104      	bne.n	8006b64 <create_name+0x2fc>
 8006b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006b64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b68:	f003 030c 	and.w	r3, r3, #12
 8006b6c:	2b0c      	cmp	r3, #12
 8006b6e:	d005      	beq.n	8006b7c <create_name+0x314>
 8006b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d105      	bne.n	8006b88 <create_name+0x320>
 8006b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d117      	bne.n	8006bc4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006b94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d105      	bne.n	8006bac <create_name+0x344>
 8006ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ba4:	f043 0310 	orr.w	r3, r3, #16
 8006ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d105      	bne.n	8006bc4 <create_name+0x35c>
 8006bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bbc:	f043 0308 	orr.w	r3, r3, #8
 8006bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006bca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006bce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3728      	adds	r7, #40	; 0x28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006bec:	e002      	b.n	8006bf4 <follow_path+0x1c>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b2f      	cmp	r3, #47	; 0x2f
 8006bfa:	d0f8      	beq.n	8006bee <follow_path+0x16>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b5c      	cmp	r3, #92	; 0x5c
 8006c02:	d0f4      	beq.n	8006bee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b1f      	cmp	r3, #31
 8006c10:	d80a      	bhi.n	8006c28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2280      	movs	r2, #128	; 0x80
 8006c16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff f8fd 	bl	8005e1c <dir_sdi>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]
 8006c26:	e048      	b.n	8006cba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c28:	463b      	mov	r3, r7
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fe1b 	bl	8006868 <create_name>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d139      	bne.n	8006cb0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fc5a 	bl	80064f6 <dir_find>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d12c      	bne.n	8006cb4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d127      	bne.n	8006cb4 <follow_path+0xdc>
 8006c64:	2305      	movs	r3, #5
 8006c66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c68:	e024      	b.n	8006cb4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d121      	bne.n	8006cb8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	799b      	ldrb	r3, [r3, #6]
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c80:	2305      	movs	r3, #5
 8006c82:	75fb      	strb	r3, [r7, #23]
 8006c84:	e019      	b.n	8006cba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	8992      	ldrh	r2, [r2, #12]
 8006c94:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c98:	fb00 f202 	mul.w	r2, r0, r2
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7ff fa60 	bl	8006168 <ld_clust>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006cae:	e7bb      	b.n	8006c28 <follow_path+0x50>
			if (res != FR_OK) break;
 8006cb0:	bf00      	nop
 8006cb2:	e002      	b.n	8006cba <follow_path+0xe2>
				break;
 8006cb4:	bf00      	nop
 8006cb6:	e000      	b.n	8006cba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cb8:	bf00      	nop
			}
		}
	}

	return res;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d031      	beq.n	8006d3e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e002      	b.n	8006ce8 <get_ldnumber+0x24>
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b1f      	cmp	r3, #31
 8006cee:	d903      	bls.n	8006cf8 <get_ldnumber+0x34>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b3a      	cmp	r3, #58	; 0x3a
 8006cf6:	d1f4      	bne.n	8006ce2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b3a      	cmp	r3, #58	; 0x3a
 8006cfe:	d11c      	bne.n	8006d3a <get_ldnumber+0x76>
			tp = *path;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	60fa      	str	r2, [r7, #12]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	3b30      	subs	r3, #48	; 0x30
 8006d10:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	d80e      	bhi.n	8006d36 <get_ldnumber+0x72>
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d10a      	bne.n	8006d36 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <get_ldnumber+0x72>
					vol = (int)i;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	e002      	b.n	8006d40 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d3e:	693b      	ldr	r3, [r7, #16]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	70da      	strb	r2, [r3, #3]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d62:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fe fc78 	bl	800565c <move_window>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <check_fs+0x2a>
 8006d72:	2304      	movs	r3, #4
 8006d74:	e038      	b.n	8006de8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3338      	adds	r3, #56	; 0x38
 8006d7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe f9bc 	bl	80050fc <ld_word>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d001      	beq.n	8006d94 <check_fs+0x48>
 8006d90:	2303      	movs	r3, #3
 8006d92:	e029      	b.n	8006de8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d9a:	2be9      	cmp	r3, #233	; 0xe9
 8006d9c:	d009      	beq.n	8006db2 <check_fs+0x66>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006da4:	2beb      	cmp	r3, #235	; 0xeb
 8006da6:	d11e      	bne.n	8006de6 <check_fs+0x9a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006dae:	2b90      	cmp	r3, #144	; 0x90
 8006db0:	d119      	bne.n	8006de6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3338      	adds	r3, #56	; 0x38
 8006db6:	3336      	adds	r3, #54	; 0x36
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe f9b7 	bl	800512c <ld_dword>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006dc4:	4a0a      	ldr	r2, [pc, #40]	; (8006df0 <check_fs+0xa4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d101      	bne.n	8006dce <check_fs+0x82>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e00c      	b.n	8006de8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3338      	adds	r3, #56	; 0x38
 8006dd2:	3352      	adds	r3, #82	; 0x52
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe f9a9 	bl	800512c <ld_dword>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <check_fs+0xa8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d101      	bne.n	8006de6 <check_fs+0x9a>
 8006de2:	2300      	movs	r3, #0
 8006de4:	e000      	b.n	8006de8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006de6:	2302      	movs	r3, #2
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	00544146 	.word	0x00544146
 8006df4:	33544146 	.word	0x33544146

08006df8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b096      	sub	sp, #88	; 0x58
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff ff59 	bl	8006cc4 <get_ldnumber>
 8006e12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da01      	bge.n	8006e1e <find_volume+0x26>
 8006e1a:	230b      	movs	r3, #11
 8006e1c:	e262      	b.n	80072e4 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006e1e:	4a9f      	ldr	r2, [pc, #636]	; (800709c <find_volume+0x2a4>)
 8006e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <find_volume+0x3a>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	e258      	b.n	80072e4 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe f8b7 	bl	8004fc0 <disk_status>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10c      	bne.n	8006e7e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <find_volume+0x82>
 8006e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006e76:	230a      	movs	r3, #10
 8006e78:	e234      	b.n	80072e4 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e232      	b.n	80072e4 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe f8af 	bl	8004ff4 <disk_initialize>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e21b      	b.n	80072e4 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <find_volume+0xca>
 8006eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	e210      	b.n	80072e4 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	7858      	ldrb	r0, [r3, #1]
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	330c      	adds	r3, #12
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2102      	movs	r1, #2
 8006ece:	f7fe f8f7 	bl	80050c0 <disk_ioctl>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <find_volume+0xe4>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e203      	b.n	80072e4 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	899b      	ldrh	r3, [r3, #12]
 8006ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee4:	d80d      	bhi.n	8006f02 <find_volume+0x10a>
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	899b      	ldrh	r3, [r3, #12]
 8006eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eee:	d308      	bcc.n	8006f02 <find_volume+0x10a>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	899b      	ldrh	r3, [r3, #12]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	899b      	ldrh	r3, [r3, #12]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <find_volume+0x10e>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e1ee      	b.n	80072e4 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f0e:	f7ff ff1d 	bl	8006d4c <check_fs>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d149      	bne.n	8006fb4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f20:	2300      	movs	r3, #0
 8006f22:	643b      	str	r3, [r7, #64]	; 0x40
 8006f24:	e01e      	b.n	8006f64 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f34:	4413      	add	r3, r2
 8006f36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d006      	beq.n	8006f50 <find_volume+0x158>
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	3308      	adds	r3, #8
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f8f0 	bl	800512c <ld_dword>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	e000      	b.n	8006f52 <find_volume+0x15a>
 8006f50:	2200      	movs	r2, #0
 8006f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	3358      	adds	r3, #88	; 0x58
 8006f58:	443b      	add	r3, r7
 8006f5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f60:	3301      	adds	r3, #1
 8006f62:	643b      	str	r3, [r7, #64]	; 0x40
 8006f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d9dd      	bls.n	8006f26 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <find_volume+0x182>
 8006f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f76:	3b01      	subs	r3, #1
 8006f78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	3358      	adds	r3, #88	; 0x58
 8006f80:	443b      	add	r3, r7
 8006f82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <find_volume+0x1a2>
 8006f8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f92:	f7ff fedb 	bl	8006d4c <check_fs>
 8006f96:	4603      	mov	r3, r0
 8006f98:	e000      	b.n	8006f9c <find_volume+0x1a4>
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d905      	bls.n	8006fb4 <find_volume+0x1bc>
 8006fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006faa:	3301      	adds	r3, #1
 8006fac:	643b      	str	r3, [r7, #64]	; 0x40
 8006fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d9e2      	bls.n	8006f7a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d101      	bne.n	8006fc0 <find_volume+0x1c8>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e191      	b.n	80072e4 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d901      	bls.n	8006fcc <find_volume+0x1d4>
 8006fc8:	230d      	movs	r3, #13
 8006fca:	e18b      	b.n	80072e4 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	3338      	adds	r3, #56	; 0x38
 8006fd0:	330b      	adds	r3, #11
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe f892 	bl	80050fc <ld_word>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	899b      	ldrh	r3, [r3, #12]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <find_volume+0x1f0>
 8006fe4:	230d      	movs	r3, #13
 8006fe6:	e17d      	b.n	80072e4 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	3338      	adds	r3, #56	; 0x38
 8006fec:	3316      	adds	r3, #22
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe f884 	bl	80050fc <ld_word>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <find_volume+0x214>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	3338      	adds	r3, #56	; 0x38
 8007002:	3324      	adds	r3, #36	; 0x24
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe f891 	bl	800512c <ld_dword>
 800700a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007010:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	789b      	ldrb	r3, [r3, #2]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d005      	beq.n	8007030 <find_volume+0x238>
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	789b      	ldrb	r3, [r3, #2]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d001      	beq.n	8007030 <find_volume+0x238>
 800702c:	230d      	movs	r3, #13
 800702e:	e159      	b.n	80072e4 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	789b      	ldrb	r3, [r3, #2]
 8007034:	461a      	mov	r2, r3
 8007036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007038:	fb02 f303 	mul.w	r3, r2, r3
 800703c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007044:	b29a      	uxth	r2, r3
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	895b      	ldrh	r3, [r3, #10]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <find_volume+0x26c>
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	895b      	ldrh	r3, [r3, #10]
 8007056:	461a      	mov	r2, r3
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	895b      	ldrh	r3, [r3, #10]
 800705c:	3b01      	subs	r3, #1
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <find_volume+0x270>
 8007064:	230d      	movs	r3, #13
 8007066:	e13d      	b.n	80072e4 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	3338      	adds	r3, #56	; 0x38
 800706c:	3311      	adds	r3, #17
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe f844 	bl	80050fc <ld_word>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	891b      	ldrh	r3, [r3, #8]
 8007080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007082:	8992      	ldrh	r2, [r2, #12]
 8007084:	0952      	lsrs	r2, r2, #5
 8007086:	b292      	uxth	r2, r2
 8007088:	fbb3 f1f2 	udiv	r1, r3, r2
 800708c:	fb01 f202 	mul.w	r2, r1, r2
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <find_volume+0x2a8>
 8007098:	230d      	movs	r3, #13
 800709a:	e123      	b.n	80072e4 <find_volume+0x4ec>
 800709c:	20000278 	.word	0x20000278

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	3338      	adds	r3, #56	; 0x38
 80070a4:	3313      	adds	r3, #19
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe f828 	bl	80050fc <ld_word>
 80070ac:	4603      	mov	r3, r0
 80070ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80070b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <find_volume+0x2cc>
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	3338      	adds	r3, #56	; 0x38
 80070ba:	3320      	adds	r3, #32
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe f835 	bl	800512c <ld_dword>
 80070c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	3338      	adds	r3, #56	; 0x38
 80070c8:	330e      	adds	r3, #14
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe f816 	bl	80050fc <ld_word>
 80070d0:	4603      	mov	r3, r0
 80070d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80070d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <find_volume+0x2e6>
 80070da:	230d      	movs	r3, #13
 80070dc:	e102      	b.n	80072e4 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80070de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	4413      	add	r3, r2
 80070e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070e6:	8911      	ldrh	r1, [r2, #8]
 80070e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ea:	8992      	ldrh	r2, [r2, #12]
 80070ec:	0952      	lsrs	r2, r2, #5
 80070ee:	b292      	uxth	r2, r2
 80070f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80070f4:	b292      	uxth	r2, r2
 80070f6:	4413      	add	r3, r2
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80070fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	429a      	cmp	r2, r3
 8007100:	d201      	bcs.n	8007106 <find_volume+0x30e>
 8007102:	230d      	movs	r3, #13
 8007104:	e0ee      	b.n	80072e4 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800710e:	8952      	ldrh	r2, [r2, #10]
 8007110:	fbb3 f3f2 	udiv	r3, r3, r2
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <find_volume+0x328>
 800711c:	230d      	movs	r3, #13
 800711e:	e0e1      	b.n	80072e4 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007120:	2303      	movs	r3, #3
 8007122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800712c:	4293      	cmp	r3, r2
 800712e:	d802      	bhi.n	8007136 <find_volume+0x33e>
 8007130:	2302      	movs	r3, #2
 8007132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	f640 72f5 	movw	r2, #4085	; 0xff5
 800713c:	4293      	cmp	r3, r2
 800713e:	d802      	bhi.n	8007146 <find_volume+0x34e>
 8007140:	2301      	movs	r3, #1
 8007142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	1c9a      	adds	r2, r3, #2
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007152:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007154:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007158:	441a      	add	r2, r3
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800715e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	441a      	add	r2, r3
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800716c:	2b03      	cmp	r3, #3
 800716e:	d11e      	bne.n	80071ae <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	3338      	adds	r3, #56	; 0x38
 8007174:	332a      	adds	r3, #42	; 0x2a
 8007176:	4618      	mov	r0, r3
 8007178:	f7fd ffc0 	bl	80050fc <ld_word>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <find_volume+0x38e>
 8007182:	230d      	movs	r3, #13
 8007184:	e0ae      	b.n	80072e4 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	891b      	ldrh	r3, [r3, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <find_volume+0x39a>
 800718e:	230d      	movs	r3, #13
 8007190:	e0a8      	b.n	80072e4 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	3338      	adds	r3, #56	; 0x38
 8007196:	332c      	adds	r3, #44	; 0x2c
 8007198:	4618      	mov	r0, r3
 800719a:	f7fd ffc7 	bl	800512c <ld_dword>
 800719e:	4602      	mov	r2, r0
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	e01f      	b.n	80071ee <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	891b      	ldrh	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <find_volume+0x3c2>
 80071b6:	230d      	movs	r3, #13
 80071b8:	e094      	b.n	80072e4 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c0:	441a      	add	r2, r3
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80071c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d103      	bne.n	80071d6 <find_volume+0x3de>
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	e00a      	b.n	80071ec <find_volume+0x3f4>
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	69da      	ldr	r2, [r3, #28]
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	085a      	lsrs	r2, r3, #1
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80071ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	6a1a      	ldr	r2, [r3, #32]
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	899b      	ldrh	r3, [r3, #12]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fa:	440b      	add	r3, r1
 80071fc:	3b01      	subs	r3, #1
 80071fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007200:	8989      	ldrh	r1, [r1, #12]
 8007202:	fbb3 f3f1 	udiv	r3, r3, r1
 8007206:	429a      	cmp	r2, r3
 8007208:	d201      	bcs.n	800720e <find_volume+0x416>
 800720a:	230d      	movs	r3, #13
 800720c:	e06a      	b.n	80072e4 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	619a      	str	r2, [r3, #24]
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	2280      	movs	r2, #128	; 0x80
 8007222:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007228:	2b03      	cmp	r3, #3
 800722a:	d149      	bne.n	80072c0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	3338      	adds	r3, #56	; 0x38
 8007230:	3330      	adds	r3, #48	; 0x30
 8007232:	4618      	mov	r0, r3
 8007234:	f7fd ff62 	bl	80050fc <ld_word>
 8007238:	4603      	mov	r3, r0
 800723a:	2b01      	cmp	r3, #1
 800723c:	d140      	bne.n	80072c0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800723e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007240:	3301      	adds	r3, #1
 8007242:	4619      	mov	r1, r3
 8007244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007246:	f7fe fa09 	bl	800565c <move_window>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d137      	bne.n	80072c0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	2200      	movs	r2, #0
 8007254:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	3338      	adds	r3, #56	; 0x38
 800725a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800725e:	4618      	mov	r0, r3
 8007260:	f7fd ff4c 	bl	80050fc <ld_word>
 8007264:	4603      	mov	r3, r0
 8007266:	461a      	mov	r2, r3
 8007268:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800726c:	429a      	cmp	r2, r3
 800726e:	d127      	bne.n	80072c0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	3338      	adds	r3, #56	; 0x38
 8007274:	4618      	mov	r0, r3
 8007276:	f7fd ff59 	bl	800512c <ld_dword>
 800727a:	4603      	mov	r3, r0
 800727c:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <find_volume+0x4f4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d11e      	bne.n	80072c0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	3338      	adds	r3, #56	; 0x38
 8007286:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800728a:	4618      	mov	r0, r3
 800728c:	f7fd ff4e 	bl	800512c <ld_dword>
 8007290:	4603      	mov	r3, r0
 8007292:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <find_volume+0x4f8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d113      	bne.n	80072c0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	3338      	adds	r3, #56	; 0x38
 800729c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fd ff43 	bl	800512c <ld_dword>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	3338      	adds	r3, #56	; 0x38
 80072b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fd ff39 	bl	800512c <ld_dword>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80072c6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <find_volume+0x4fc>)
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	3301      	adds	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <find_volume+0x4fc>)
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <find_volume+0x4fc>)
 80072d6:	881a      	ldrh	r2, [r3, #0]
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80072dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072de:	f7fe f955 	bl	800558c <clear_lock>
#endif
	return FR_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3758      	adds	r7, #88	; 0x58
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	41615252 	.word	0x41615252
 80072f0:	61417272 	.word	0x61417272
 80072f4:	2000027c 	.word	0x2000027c

080072f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007302:	2309      	movs	r3, #9
 8007304:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <validate+0x4e>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d018      	beq.n	8007346 <validate+0x4e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d013      	beq.n	8007346 <validate+0x4e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	889a      	ldrh	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	88db      	ldrh	r3, [r3, #6]
 8007328:	429a      	cmp	r2, r3
 800732a:	d10c      	bne.n	8007346 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fd fe44 	bl	8004fc0 <disk_status>
 8007338:	4603      	mov	r3, r0
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <validate+0x4e>
			res = FR_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <validate+0x5a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	e000      	b.n	8007354 <validate+0x5c>
 8007352:	2300      	movs	r3, #0
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	6013      	str	r3, [r2, #0]
	return res;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007376:	f107 0310 	add.w	r3, r7, #16
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff fca2 	bl	8006cc4 <get_ldnumber>
 8007380:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	da01      	bge.n	800738c <f_mount+0x28>
 8007388:	230b      	movs	r3, #11
 800738a:	e02b      	b.n	80073e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800738c:	4a17      	ldr	r2, [pc, #92]	; (80073ec <f_mount+0x88>)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007394:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800739c:	69b8      	ldr	r0, [r7, #24]
 800739e:	f7fe f8f5 	bl	800558c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	490d      	ldr	r1, [pc, #52]	; (80073ec <f_mount+0x88>)
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <f_mount+0x66>
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d001      	beq.n	80073ce <f_mount+0x6a>
 80073ca:	2300      	movs	r3, #0
 80073cc:	e00a      	b.n	80073e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80073ce:	f107 010c 	add.w	r1, r7, #12
 80073d2:	f107 0308 	add.w	r3, r7, #8
 80073d6:	2200      	movs	r2, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fd0d 	bl	8006df8 <find_volume>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3720      	adds	r7, #32
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000278 	.word	0x20000278

080073f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b09a      	sub	sp, #104	; 0x68
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <f_open+0x18>
 8007404:	2309      	movs	r3, #9
 8007406:	e1cb      	b.n	80077a0 <f_open+0x3b0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800740e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007410:	79fa      	ldrb	r2, [r7, #7]
 8007412:	f107 0110 	add.w	r1, r7, #16
 8007416:	f107 0308 	add.w	r3, r7, #8
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fcec 	bl	8006df8 <find_volume>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007426:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800742a:	2b00      	cmp	r3, #0
 800742c:	f040 81af 	bne.w	800778e <f_open+0x39e>
		dj.obj.fs = fs;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8007434:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007438:	f000 fce0 	bl	8007dfc <ff_memalloc>
 800743c:	65b8      	str	r0, [r7, #88]	; 0x58
 800743e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <f_open+0x58>
 8007444:	2311      	movs	r3, #17
 8007446:	e1ab      	b.n	80077a0 <f_open+0x3b0>
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800744c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	f107 0314 	add.w	r3, r7, #20
 8007454:	4611      	mov	r1, r2
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff fbbe 	bl	8006bd8 <follow_path>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007462:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007466:	2b00      	cmp	r3, #0
 8007468:	d11a      	bne.n	80074a0 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800746a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800746e:	b25b      	sxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	da03      	bge.n	800747c <f_open+0x8c>
				res = FR_INVALID_NAME;
 8007474:	2306      	movs	r3, #6
 8007476:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800747a:	e011      	b.n	80074a0 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	f107 0314 	add.w	r3, r7, #20
 8007492:	4611      	mov	r1, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd ff31 	bl	80052fc <chk_lock>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	f003 031c 	and.w	r3, r3, #28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d07f      	beq.n	80075aa <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 80074aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d017      	beq.n	80074e2 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80074b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d10e      	bne.n	80074d8 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074ba:	f7fd ff7b 	bl	80053b4 <enq_lock>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d006      	beq.n	80074d2 <f_open+0xe2>
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff f8d5 	bl	8006678 <dir_register>
 80074ce:	4603      	mov	r3, r0
 80074d0:	e000      	b.n	80074d4 <f_open+0xe4>
 80074d2:	2312      	movs	r3, #18
 80074d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	f043 0308 	orr.w	r3, r3, #8
 80074de:	71fb      	strb	r3, [r7, #7]
 80074e0:	e010      	b.n	8007504 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80074e2:	7ebb      	ldrb	r3, [r7, #26]
 80074e4:	f003 0311 	and.w	r3, r3, #17
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <f_open+0x104>
					res = FR_DENIED;
 80074ec:	2307      	movs	r3, #7
 80074ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80074f2:	e007      	b.n	8007504 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <f_open+0x114>
 80074fe:	2308      	movs	r3, #8
 8007500:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007504:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007508:	2b00      	cmp	r3, #0
 800750a:	d168      	bne.n	80075de <f_open+0x1ee>
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d063      	beq.n	80075de <f_open+0x1ee>
				dw = GET_FATTIME();
 8007516:	f7fd fb47 	bl	8004ba8 <get_fattime>
 800751a:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800751c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751e:	330e      	adds	r3, #14
 8007520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007522:	4618      	mov	r0, r3
 8007524:	f7fd fe40 	bl	80051a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752a:	3316      	adds	r3, #22
 800752c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd fe3a 	bl	80051a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007536:	330b      	adds	r3, #11
 8007538:	2220      	movs	r2, #32
 800753a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fe10 	bl	8006168 <ld_clust>
 8007548:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800754e:	2200      	movs	r2, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe fe28 	bl	80061a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	331c      	adds	r3, #28
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f7fd fe23 	bl	80051a8 <st_dword>
					fs->wflag = 1;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2201      	movs	r2, #1
 8007566:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756a:	2b00      	cmp	r3, #0
 800756c:	d037      	beq.n	80075de <f_open+0x1ee>
						dw = fs->winsect;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8007574:	f107 0314 	add.w	r3, r7, #20
 8007578:	2200      	movs	r2, #0
 800757a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fb18 	bl	8005bb2 <remove_chain>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007588:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800758c:	2b00      	cmp	r3, #0
 800758e:	d126      	bne.n	80075de <f_open+0x1ee>
							res = move_window(fs, dw);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe f861 	bl	800565c <move_window>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075a4:	3a01      	subs	r2, #1
 80075a6:	615a      	str	r2, [r3, #20]
 80075a8:	e019      	b.n	80075de <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80075aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d115      	bne.n	80075de <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80075b2:	7ebb      	ldrb	r3, [r7, #26]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <f_open+0x1d4>
					res = FR_NO_FILE;
 80075bc:	2304      	movs	r3, #4
 80075be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075c2:	e00c      	b.n	80075de <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <f_open+0x1ee>
 80075ce:	7ebb      	ldrb	r3, [r7, #26]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <f_open+0x1ee>
						res = FR_DENIED;
 80075d8:	2307      	movs	r3, #7
 80075da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80075de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d128      	bne.n	8007638 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <f_open+0x208>
				mode |= FA_MODIFIED;
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf14      	ite	ne
 8007610:	2301      	movne	r3, #1
 8007612:	2300      	moveq	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	461a      	mov	r2, r3
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fd feea 	bl	80053f8 <inc_lock>
 8007624:	4602      	mov	r2, r0
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d102      	bne.n	8007638 <f_open+0x248>
 8007632:	2302      	movs	r3, #2
 8007634:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007638:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 80a3 	bne.w	8007788 <f_open+0x398>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe fd8d 	bl	8006168 <ld_clust>
 800764e:	4602      	mov	r2, r0
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007656:	331c      	adds	r3, #28
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd fd67 	bl	800512c <ld_dword>
 800765e:	4602      	mov	r2, r0
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	88da      	ldrh	r2, [r3, #6]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	79fa      	ldrb	r2, [r7, #7]
 800767c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3330      	adds	r3, #48	; 0x30
 8007694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f7fd fdd1 	bl	8005242 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d06e      	beq.n	8007788 <f_open+0x398>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d06a      	beq.n	8007788 <f_open+0x398>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	895b      	ldrh	r3, [r3, #10]
 80076be:	461a      	mov	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	899b      	ldrh	r3, [r3, #12]
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
 80076c8:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076d6:	e016      	b.n	8007706 <f_open+0x316>
					clst = get_fat(&fp->obj, clst);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe f87a 	bl	80057d6 <get_fat>
 80076e2:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80076e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d802      	bhi.n	80076f0 <f_open+0x300>
 80076ea:	2302      	movs	r3, #2
 80076ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80076f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f6:	d102      	bne.n	80076fe <f_open+0x30e>
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007706:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <f_open+0x326>
 800770e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007712:	429a      	cmp	r2, r3
 8007714:	d8e0      	bhi.n	80076d8 <f_open+0x2e8>
				}
				fp->clust = clst;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800771a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800771c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007720:	2b00      	cmp	r3, #0
 8007722:	d131      	bne.n	8007788 <f_open+0x398>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	899b      	ldrh	r3, [r3, #12]
 8007728:	461a      	mov	r2, r3
 800772a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800772c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007730:	fb01 f202 	mul.w	r2, r1, r2
 8007734:	1a9b      	subs	r3, r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d026      	beq.n	8007788 <f_open+0x398>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe f82a 	bl	8005798 <clust2sect>
 8007744:	64b8      	str	r0, [r7, #72]	; 0x48
 8007746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <f_open+0x364>
						res = FR_INT_ERR;
 800774c:	2302      	movs	r3, #2
 800774e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007752:	e019      	b.n	8007788 <f_open+0x398>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	899b      	ldrh	r3, [r3, #12]
 8007758:	461a      	mov	r2, r3
 800775a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007762:	441a      	add	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	7858      	ldrb	r0, [r3, #1]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a1a      	ldr	r2, [r3, #32]
 8007776:	2301      	movs	r3, #1
 8007778:	f7fd fc62 	bl	8005040 <disk_read>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <f_open+0x398>
 8007782:	2301      	movs	r3, #1
 8007784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8007788:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800778a:	f000 fb43 	bl	8007e14 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800778e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <f_open+0x3ac>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800779c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3768      	adds	r7, #104	; 0x68
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08e      	sub	sp, #56	; 0x38
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f107 0214 	add.w	r2, r7, #20
 80077c6:	4611      	mov	r1, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff fd95 	bl	80072f8 <validate>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80077d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d107      	bne.n	80077ec <f_read+0x44>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	7d5b      	ldrb	r3, [r3, #21]
 80077e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80077e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <f_read+0x4a>
 80077ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077f0:	e135      	b.n	8007a5e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	7d1b      	ldrb	r3, [r3, #20]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <f_read+0x5a>
 80077fe:	2307      	movs	r3, #7
 8007800:	e12d      	b.n	8007a5e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	429a      	cmp	r2, r3
 8007814:	f240 811e 	bls.w	8007a54 <f_read+0x2ac>
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800781c:	e11a      	b.n	8007a54 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	8992      	ldrh	r2, [r2, #12]
 8007826:	fbb3 f1f2 	udiv	r1, r3, r2
 800782a:	fb01 f202 	mul.w	r2, r1, r2
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 80d5 	bne.w	80079e0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	8992      	ldrh	r2, [r2, #12]
 800783e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	8952      	ldrh	r2, [r2, #10]
 8007846:	3a01      	subs	r2, #1
 8007848:	4013      	ands	r3, r2
 800784a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d12f      	bne.n	80078b2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d103      	bne.n	8007862 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	633b      	str	r3, [r7, #48]	; 0x30
 8007860:	e013      	b.n	800788a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	4619      	mov	r1, r3
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7fe fa9b 	bl	8005dac <clmt_clust>
 8007876:	6338      	str	r0, [r7, #48]	; 0x30
 8007878:	e007      	b.n	800788a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fd ffa7 	bl	80057d6 <get_fat>
 8007888:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	2b01      	cmp	r3, #1
 800788e:	d804      	bhi.n	800789a <f_read+0xf2>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2202      	movs	r2, #2
 8007894:	755a      	strb	r2, [r3, #21]
 8007896:	2302      	movs	r3, #2
 8007898:	e0e1      	b.n	8007a5e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d104      	bne.n	80078ac <f_read+0x104>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	755a      	strb	r2, [r3, #21]
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0d8      	b.n	8007a5e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fd ff6c 	bl	8005798 <clust2sect>
 80078c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <f_read+0x12a>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2202      	movs	r2, #2
 80078cc:	755a      	strb	r2, [r3, #21]
 80078ce:	2302      	movs	r3, #2
 80078d0:	e0c5      	b.n	8007a5e <f_read+0x2b6>
			sect += csect;
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	899b      	ldrh	r3, [r3, #12]
 80078de:	461a      	mov	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d041      	beq.n	8007972 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	4413      	add	r3, r2
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	8952      	ldrh	r2, [r2, #10]
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d905      	bls.n	8007908 <f_read+0x160>
					cc = fs->csize - csect;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	895b      	ldrh	r3, [r3, #10]
 8007900:	461a      	mov	r2, r3
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	7858      	ldrb	r0, [r3, #1]
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007912:	f7fd fb95 	bl	8005040 <disk_read>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <f_read+0x17e>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	755a      	strb	r2, [r3, #21]
 8007922:	2301      	movs	r3, #1
 8007924:	e09b      	b.n	8007a5e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	7d1b      	ldrb	r3, [r3, #20]
 800792a:	b25b      	sxtb	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	da18      	bge.n	8007962 <f_read+0x1ba>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1a      	ldr	r2, [r3, #32]
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793a:	429a      	cmp	r2, r3
 800793c:	d911      	bls.n	8007962 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	8992      	ldrh	r2, [r2, #12]
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007950:	18d0      	adds	r0, r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	899b      	ldrh	r3, [r3, #12]
 800795c:	461a      	mov	r2, r3
 800795e:	f7fd fc4f 	bl	8005200 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	899b      	ldrh	r3, [r3, #12]
 8007966:	461a      	mov	r2, r3
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	fb02 f303 	mul.w	r3, r2, r3
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007970:	e05c      	b.n	8007a2c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	429a      	cmp	r2, r3
 800797a:	d02e      	beq.n	80079da <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	7d1b      	ldrb	r3, [r3, #20]
 8007980:	b25b      	sxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	da18      	bge.n	80079b8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	7858      	ldrb	r0, [r3, #1]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	2301      	movs	r3, #1
 8007996:	f7fd fb73 	bl	8005080 <disk_write>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d004      	beq.n	80079aa <f_read+0x202>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	755a      	strb	r2, [r3, #21]
 80079a6:	2301      	movs	r3, #1
 80079a8:	e059      	b.n	8007a5e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	7d1b      	ldrb	r3, [r3, #20]
 80079ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	7858      	ldrb	r0, [r3, #1]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079c2:	2301      	movs	r3, #1
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	f7fd fb3b 	bl	8005040 <disk_read>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <f_read+0x232>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	755a      	strb	r2, [r3, #21]
 80079d6:	2301      	movs	r3, #1
 80079d8:	e041      	b.n	8007a5e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	899b      	ldrh	r3, [r3, #12]
 80079e4:	4618      	mov	r0, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	8992      	ldrh	r2, [r2, #12]
 80079ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80079f2:	fb01 f202 	mul.w	r2, r1, r2
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	1ac3      	subs	r3, r0, r3
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80079fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d901      	bls.n	8007a08 <f_read+0x260>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	8992      	ldrh	r2, [r2, #12]
 8007a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a1a:	fb00 f202 	mul.w	r2, r0, r2
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	440b      	add	r3, r1
 8007a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a24:	4619      	mov	r1, r3
 8007a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a28:	f7fd fbea 	bl	8005200 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	4413      	add	r3, r2
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	619a      	str	r2, [r3, #24]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	441a      	add	r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f47f aee1 	bne.w	800781e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3738      	adds	r7, #56	; 0x38
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b086      	sub	sp, #24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f107 0208 	add.w	r2, r7, #8
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fc3e 	bl	80072f8 <validate>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d168      	bne.n	8007b58 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7d1b      	ldrb	r3, [r3, #20]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d062      	beq.n	8007b58 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7d1b      	ldrb	r3, [r3, #20]
 8007a96:	b25b      	sxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	da15      	bge.n	8007ac8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	7858      	ldrb	r0, [r3, #1]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1a      	ldr	r2, [r3, #32]
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f7fd fae8 	bl	8005080 <disk_write>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <f_sync+0x54>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e04f      	b.n	8007b5a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7d1b      	ldrb	r3, [r3, #20]
 8007abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007ac8:	f7fd f86e 	bl	8004ba8 <get_fattime>
 8007acc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	f7fd fdc0 	bl	800565c <move_window>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d138      	bne.n	8007b58 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	330b      	adds	r3, #11
 8007af0:	781a      	ldrb	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	330b      	adds	r3, #11
 8007af6:	f042 0220 	orr.w	r2, r2, #32
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	461a      	mov	r2, r3
 8007b08:	68f9      	ldr	r1, [r7, #12]
 8007b0a:	f7fe fb4c 	bl	80061a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f103 021c 	add.w	r2, r3, #28
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7fd fb44 	bl	80051a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3316      	adds	r3, #22
 8007b24:	6939      	ldr	r1, [r7, #16]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fd fb3e 	bl	80051a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3312      	adds	r3, #18
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fd fb1d 	bl	8005172 <st_word>
					fs->wflag = 1;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fdb9 	bl	80056b8 <sync_fs>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7d1b      	ldrb	r3, [r3, #20]
 8007b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff ff7b 	bl	8007a66 <f_sync>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d118      	bne.n	8007bac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fbb8 	bl	80072f8 <validate>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10c      	bne.n	8007bac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fd fcbc 	bl	8005514 <dec_lock>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007bce:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007bd0:	7a5b      	ldrb	r3, [r3, #9]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d131      	bne.n	8007c3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007bd8:	4b1c      	ldr	r3, [pc, #112]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007bda:	7a5b      	ldrb	r3, [r3, #9]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	4b1a      	ldr	r3, [pc, #104]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007be2:	2100      	movs	r1, #0
 8007be4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007be6:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007be8:	7a5b      	ldrb	r3, [r3, #9]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	4a17      	ldr	r2, [pc, #92]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007bf6:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007bf8:	7a5b      	ldrb	r3, [r3, #9]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007c00:	4413      	add	r3, r2
 8007c02:	79fa      	ldrb	r2, [r7, #7]
 8007c04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007c06:	4b11      	ldr	r3, [pc, #68]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007c08:	7a5b      	ldrb	r3, [r3, #9]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	b2d1      	uxtb	r1, r2
 8007c10:	4a0e      	ldr	r2, [pc, #56]	; (8007c4c <FATFS_LinkDriverEx+0x94>)
 8007c12:	7251      	strb	r1, [r2, #9]
 8007c14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007c16:	7dbb      	ldrb	r3, [r7, #22]
 8007c18:	3330      	adds	r3, #48	; 0x30
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	3301      	adds	r3, #1
 8007c24:	223a      	movs	r2, #58	; 0x3a
 8007c26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	222f      	movs	r2, #47	; 0x2f
 8007c2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3303      	adds	r3, #3
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	200002a0 	.word	0x200002a0

08007c50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff ffaa 	bl	8007bb8 <FATFS_LinkDriverEx>
 8007c64:	4603      	mov	r3, r0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c80:	d802      	bhi.n	8007c88 <ff_convert+0x18>
		c = chr;
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	81fb      	strh	r3, [r7, #14]
 8007c86:	e025      	b.n	8007cd4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00b      	beq.n	8007ca6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	2bff      	cmp	r3, #255	; 0xff
 8007c92:	d805      	bhi.n	8007ca0 <ff_convert+0x30>
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	3b80      	subs	r3, #128	; 0x80
 8007c98:	4a12      	ldr	r2, [pc, #72]	; (8007ce4 <ff_convert+0x74>)
 8007c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c9e:	e000      	b.n	8007ca2 <ff_convert+0x32>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	81fb      	strh	r3, [r7, #14]
 8007ca4:	e016      	b.n	8007cd4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	81fb      	strh	r3, [r7, #14]
 8007caa:	e009      	b.n	8007cc0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007cac:	89fb      	ldrh	r3, [r7, #14]
 8007cae:	4a0d      	ldr	r2, [pc, #52]	; (8007ce4 <ff_convert+0x74>)
 8007cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cb4:	88fa      	ldrh	r2, [r7, #6]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d006      	beq.n	8007cc8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007cba:	89fb      	ldrh	r3, [r7, #14]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	81fb      	strh	r3, [r7, #14]
 8007cc0:	89fb      	ldrh	r3, [r7, #14]
 8007cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc4:	d9f2      	bls.n	8007cac <ff_convert+0x3c>
 8007cc6:	e000      	b.n	8007cca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007cc8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007cca:	89fb      	ldrh	r3, [r7, #14]
 8007ccc:	3380      	adds	r3, #128	; 0x80
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007cd4:	89fb      	ldrh	r3, [r7, #14]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	08009058 	.word	0x08009058

08007ce8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf8:	d201      	bcs.n	8007cfe <ff_wtoupper+0x16>
 8007cfa:	4b3e      	ldr	r3, [pc, #248]	; (8007df4 <ff_wtoupper+0x10c>)
 8007cfc:	e000      	b.n	8007d00 <ff_wtoupper+0x18>
 8007cfe:	4b3e      	ldr	r3, [pc, #248]	; (8007df8 <ff_wtoupper+0x110>)
 8007d00:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	1c9a      	adds	r2, r3, #2
 8007d06:	617a      	str	r2, [r7, #20]
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007d0c:	8a7b      	ldrh	r3, [r7, #18]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d068      	beq.n	8007de4 <ff_wtoupper+0xfc>
 8007d12:	88fa      	ldrh	r2, [r7, #6]
 8007d14:	8a7b      	ldrh	r3, [r7, #18]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d364      	bcc.n	8007de4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	617a      	str	r2, [r7, #20]
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	823b      	strh	r3, [r7, #16]
 8007d24:	8a3b      	ldrh	r3, [r7, #16]
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	81fb      	strh	r3, [r7, #14]
 8007d2a:	8a3b      	ldrh	r3, [r7, #16]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	8a79      	ldrh	r1, [r7, #18]
 8007d34:	8a3b      	ldrh	r3, [r7, #16]
 8007d36:	440b      	add	r3, r1
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	da49      	bge.n	8007dd0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007d3c:	89fb      	ldrh	r3, [r7, #14]
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d84f      	bhi.n	8007de2 <ff_wtoupper+0xfa>
 8007d42:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <ff_wtoupper+0x60>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d6d 	.word	0x08007d6d
 8007d4c:	08007d7f 	.word	0x08007d7f
 8007d50:	08007d95 	.word	0x08007d95
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007da5 	.word	0x08007da5
 8007d5c:	08007dad 	.word	0x08007dad
 8007d60:	08007db5 	.word	0x08007db5
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dc5 	.word	0x08007dc5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	8a7b      	ldrh	r3, [r7, #18]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4413      	add	r3, r2
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	80fb      	strh	r3, [r7, #6]
 8007d7c:	e027      	b.n	8007dce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	8a7b      	ldrh	r3, [r7, #18]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	80fb      	strh	r3, [r7, #6]
 8007d92:	e01c      	b.n	8007dce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	3b10      	subs	r3, #16
 8007d98:	80fb      	strh	r3, [r7, #6]
 8007d9a:	e018      	b.n	8007dce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	3b20      	subs	r3, #32
 8007da0:	80fb      	strh	r3, [r7, #6]
 8007da2:	e014      	b.n	8007dce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	3b30      	subs	r3, #48	; 0x30
 8007da8:	80fb      	strh	r3, [r7, #6]
 8007daa:	e010      	b.n	8007dce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	3b1a      	subs	r3, #26
 8007db0:	80fb      	strh	r3, [r7, #6]
 8007db2:	e00c      	b.n	8007dce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	3308      	adds	r3, #8
 8007db8:	80fb      	strh	r3, [r7, #6]
 8007dba:	e008      	b.n	8007dce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	3b50      	subs	r3, #80	; 0x50
 8007dc0:	80fb      	strh	r3, [r7, #6]
 8007dc2:	e004      	b.n	8007dce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007dca:	80fb      	strh	r3, [r7, #6]
 8007dcc:	bf00      	nop
			}
			break;
 8007dce:	e008      	b.n	8007de2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007dd0:	89fb      	ldrh	r3, [r7, #14]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d195      	bne.n	8007d02 <ff_wtoupper+0x1a>
 8007dd6:	8a3b      	ldrh	r3, [r7, #16]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4413      	add	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007de0:	e78f      	b.n	8007d02 <ff_wtoupper+0x1a>
			break;
 8007de2:	bf00      	nop
	}

	return chr;
 8007de4:	88fb      	ldrh	r3, [r7, #6]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	08009158 	.word	0x08009158
 8007df8:	0800934c 	.word	0x0800934c

08007dfc <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f811 	bl	8007e2c <malloc>
 8007e0a:	4603      	mov	r3, r0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f80d 	bl	8007e3c <free>
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <malloc>:
 8007e2c:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <malloc+0xc>)
 8007e2e:	4601      	mov	r1, r0
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	f000 b82b 	b.w	8007e8c <_malloc_r>
 8007e36:	bf00      	nop
 8007e38:	20000064 	.word	0x20000064

08007e3c <free>:
 8007e3c:	4b02      	ldr	r3, [pc, #8]	; (8007e48 <free+0xc>)
 8007e3e:	4601      	mov	r1, r0
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	f000 bb43 	b.w	80084cc <_free_r>
 8007e46:	bf00      	nop
 8007e48:	20000064 	.word	0x20000064

08007e4c <sbrk_aligned>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4e0e      	ldr	r6, [pc, #56]	; (8007e88 <sbrk_aligned+0x3c>)
 8007e50:	460c      	mov	r4, r1
 8007e52:	6831      	ldr	r1, [r6, #0]
 8007e54:	4605      	mov	r5, r0
 8007e56:	b911      	cbnz	r1, 8007e5e <sbrk_aligned+0x12>
 8007e58:	f000 fae8 	bl	800842c <_sbrk_r>
 8007e5c:	6030      	str	r0, [r6, #0]
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 fae3 	bl	800842c <_sbrk_r>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d00a      	beq.n	8007e80 <sbrk_aligned+0x34>
 8007e6a:	1cc4      	adds	r4, r0, #3
 8007e6c:	f024 0403 	bic.w	r4, r4, #3
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d007      	beq.n	8007e84 <sbrk_aligned+0x38>
 8007e74:	1a21      	subs	r1, r4, r0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 fad8 	bl	800842c <_sbrk_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d101      	bne.n	8007e84 <sbrk_aligned+0x38>
 8007e80:	f04f 34ff 	mov.w	r4, #4294967295
 8007e84:	4620      	mov	r0, r4
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	200002b0 	.word	0x200002b0

08007e8c <_malloc_r>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	1ccd      	adds	r5, r1, #3
 8007e92:	f025 0503 	bic.w	r5, r5, #3
 8007e96:	3508      	adds	r5, #8
 8007e98:	2d0c      	cmp	r5, #12
 8007e9a:	bf38      	it	cc
 8007e9c:	250c      	movcc	r5, #12
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	db01      	blt.n	8007ea8 <_malloc_r+0x1c>
 8007ea4:	42a9      	cmp	r1, r5
 8007ea6:	d905      	bls.n	8007eb4 <_malloc_r+0x28>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	2600      	movs	r6, #0
 8007eae:	4630      	mov	r0, r6
 8007eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f88 <_malloc_r+0xfc>
 8007eb8:	f000 f868 	bl	8007f8c <__malloc_lock>
 8007ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec0:	461c      	mov	r4, r3
 8007ec2:	bb5c      	cbnz	r4, 8007f1c <_malloc_r+0x90>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff ffc0 	bl	8007e4c <sbrk_aligned>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	4604      	mov	r4, r0
 8007ed0:	d155      	bne.n	8007f7e <_malloc_r+0xf2>
 8007ed2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed6:	4626      	mov	r6, r4
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	d145      	bne.n	8007f68 <_malloc_r+0xdc>
 8007edc:	2c00      	cmp	r4, #0
 8007ede:	d048      	beq.n	8007f72 <_malloc_r+0xe6>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	eb04 0903 	add.w	r9, r4, r3
 8007eea:	f000 fa9f 	bl	800842c <_sbrk_r>
 8007eee:	4581      	cmp	r9, r0
 8007ef0:	d13f      	bne.n	8007f72 <_malloc_r+0xe6>
 8007ef2:	6821      	ldr	r1, [r4, #0]
 8007ef4:	1a6d      	subs	r5, r5, r1
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7ff ffa7 	bl	8007e4c <sbrk_aligned>
 8007efe:	3001      	adds	r0, #1
 8007f00:	d037      	beq.n	8007f72 <_malloc_r+0xe6>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	442b      	add	r3, r5
 8007f06:	6023      	str	r3, [r4, #0]
 8007f08:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d038      	beq.n	8007f82 <_malloc_r+0xf6>
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	42a2      	cmp	r2, r4
 8007f14:	d12b      	bne.n	8007f6e <_malloc_r+0xe2>
 8007f16:	2200      	movs	r2, #0
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	e00f      	b.n	8007f3c <_malloc_r+0xb0>
 8007f1c:	6822      	ldr	r2, [r4, #0]
 8007f1e:	1b52      	subs	r2, r2, r5
 8007f20:	d41f      	bmi.n	8007f62 <_malloc_r+0xd6>
 8007f22:	2a0b      	cmp	r2, #11
 8007f24:	d917      	bls.n	8007f56 <_malloc_r+0xca>
 8007f26:	1961      	adds	r1, r4, r5
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	6025      	str	r5, [r4, #0]
 8007f2c:	bf18      	it	ne
 8007f2e:	6059      	strne	r1, [r3, #4]
 8007f30:	6863      	ldr	r3, [r4, #4]
 8007f32:	bf08      	it	eq
 8007f34:	f8c8 1000 	streq.w	r1, [r8]
 8007f38:	5162      	str	r2, [r4, r5]
 8007f3a:	604b      	str	r3, [r1, #4]
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f104 060b 	add.w	r6, r4, #11
 8007f42:	f000 f829 	bl	8007f98 <__malloc_unlock>
 8007f46:	f026 0607 	bic.w	r6, r6, #7
 8007f4a:	1d23      	adds	r3, r4, #4
 8007f4c:	1af2      	subs	r2, r6, r3
 8007f4e:	d0ae      	beq.n	8007eae <_malloc_r+0x22>
 8007f50:	1b9b      	subs	r3, r3, r6
 8007f52:	50a3      	str	r3, [r4, r2]
 8007f54:	e7ab      	b.n	8007eae <_malloc_r+0x22>
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	6862      	ldr	r2, [r4, #4]
 8007f5a:	d1dd      	bne.n	8007f18 <_malloc_r+0x8c>
 8007f5c:	f8c8 2000 	str.w	r2, [r8]
 8007f60:	e7ec      	b.n	8007f3c <_malloc_r+0xb0>
 8007f62:	4623      	mov	r3, r4
 8007f64:	6864      	ldr	r4, [r4, #4]
 8007f66:	e7ac      	b.n	8007ec2 <_malloc_r+0x36>
 8007f68:	4634      	mov	r4, r6
 8007f6a:	6876      	ldr	r6, [r6, #4]
 8007f6c:	e7b4      	b.n	8007ed8 <_malloc_r+0x4c>
 8007f6e:	4613      	mov	r3, r2
 8007f70:	e7cc      	b.n	8007f0c <_malloc_r+0x80>
 8007f72:	230c      	movs	r3, #12
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	4638      	mov	r0, r7
 8007f78:	f000 f80e 	bl	8007f98 <__malloc_unlock>
 8007f7c:	e797      	b.n	8007eae <_malloc_r+0x22>
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	e7dc      	b.n	8007f3c <_malloc_r+0xb0>
 8007f82:	605b      	str	r3, [r3, #4]
 8007f84:	deff      	udf	#255	; 0xff
 8007f86:	bf00      	nop
 8007f88:	200002ac 	.word	0x200002ac

08007f8c <__malloc_lock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__malloc_lock+0x8>)
 8007f8e:	f000 ba9a 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	200003f4 	.word	0x200003f4

08007f98 <__malloc_unlock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_unlock+0x8>)
 8007f9a:	f000 ba95 	b.w	80084c8 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	200003f4 	.word	0x200003f4

08007fa4 <std>:
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	4604      	mov	r4, r0
 8007faa:	e9c0 3300 	strd	r3, r3, [r0]
 8007fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fb2:	6083      	str	r3, [r0, #8]
 8007fb4:	8181      	strh	r1, [r0, #12]
 8007fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fb8:	81c2      	strh	r2, [r0, #14]
 8007fba:	6183      	str	r3, [r0, #24]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	305c      	adds	r0, #92	; 0x5c
 8007fc2:	f000 f9f7 	bl	80083b4 <memset>
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <std+0x58>)
 8007fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8007fca:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <std+0x5c>)
 8007fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fce:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <std+0x60>)
 8007fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <std+0x64>)
 8007fd4:	6323      	str	r3, [r4, #48]	; 0x30
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	; (800800c <std+0x68>)
 8007fd8:	6224      	str	r4, [r4, #32]
 8007fda:	429c      	cmp	r4, r3
 8007fdc:	d006      	beq.n	8007fec <std+0x48>
 8007fde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007fe2:	4294      	cmp	r4, r2
 8007fe4:	d002      	beq.n	8007fec <std+0x48>
 8007fe6:	33d0      	adds	r3, #208	; 0xd0
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	d105      	bne.n	8007ff8 <std+0x54>
 8007fec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	f000 ba66 	b.w	80084c4 <__retarget_lock_init_recursive>
 8007ff8:	bd10      	pop	{r4, pc}
 8007ffa:	bf00      	nop
 8007ffc:	08008205 	.word	0x08008205
 8008000:	08008227 	.word	0x08008227
 8008004:	0800825f 	.word	0x0800825f
 8008008:	08008283 	.word	0x08008283
 800800c:	200002b4 	.word	0x200002b4

08008010 <stdio_exit_handler>:
 8008010:	4a02      	ldr	r2, [pc, #8]	; (800801c <stdio_exit_handler+0xc>)
 8008012:	4903      	ldr	r1, [pc, #12]	; (8008020 <stdio_exit_handler+0x10>)
 8008014:	4803      	ldr	r0, [pc, #12]	; (8008024 <stdio_exit_handler+0x14>)
 8008016:	f000 b869 	b.w	80080ec <_fwalk_sglue>
 800801a:	bf00      	nop
 800801c:	2000000c 	.word	0x2000000c
 8008020:	08008c19 	.word	0x08008c19
 8008024:	20000018 	.word	0x20000018

08008028 <cleanup_stdio>:
 8008028:	6841      	ldr	r1, [r0, #4]
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <cleanup_stdio+0x34>)
 800802c:	4299      	cmp	r1, r3
 800802e:	b510      	push	{r4, lr}
 8008030:	4604      	mov	r4, r0
 8008032:	d001      	beq.n	8008038 <cleanup_stdio+0x10>
 8008034:	f000 fdf0 	bl	8008c18 <_fflush_r>
 8008038:	68a1      	ldr	r1, [r4, #8]
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <cleanup_stdio+0x38>)
 800803c:	4299      	cmp	r1, r3
 800803e:	d002      	beq.n	8008046 <cleanup_stdio+0x1e>
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fde9 	bl	8008c18 <_fflush_r>
 8008046:	68e1      	ldr	r1, [r4, #12]
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <cleanup_stdio+0x3c>)
 800804a:	4299      	cmp	r1, r3
 800804c:	d004      	beq.n	8008058 <cleanup_stdio+0x30>
 800804e:	4620      	mov	r0, r4
 8008050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008054:	f000 bde0 	b.w	8008c18 <_fflush_r>
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	200002b4 	.word	0x200002b4
 8008060:	2000031c 	.word	0x2000031c
 8008064:	20000384 	.word	0x20000384

08008068 <global_stdio_init.part.0>:
 8008068:	b510      	push	{r4, lr}
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <global_stdio_init.part.0+0x30>)
 800806c:	4c0b      	ldr	r4, [pc, #44]	; (800809c <global_stdio_init.part.0+0x34>)
 800806e:	4a0c      	ldr	r2, [pc, #48]	; (80080a0 <global_stdio_init.part.0+0x38>)
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	4620      	mov	r0, r4
 8008074:	2200      	movs	r2, #0
 8008076:	2104      	movs	r1, #4
 8008078:	f7ff ff94 	bl	8007fa4 <std>
 800807c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008080:	2201      	movs	r2, #1
 8008082:	2109      	movs	r1, #9
 8008084:	f7ff ff8e 	bl	8007fa4 <std>
 8008088:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800808c:	2202      	movs	r2, #2
 800808e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008092:	2112      	movs	r1, #18
 8008094:	f7ff bf86 	b.w	8007fa4 <std>
 8008098:	200003ec 	.word	0x200003ec
 800809c:	200002b4 	.word	0x200002b4
 80080a0:	08008011 	.word	0x08008011

080080a4 <__sfp_lock_acquire>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__sfp_lock_acquire+0x8>)
 80080a6:	f000 ba0e 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	200003f5 	.word	0x200003f5

080080b0 <__sfp_lock_release>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__sfp_lock_release+0x8>)
 80080b2:	f000 ba09 	b.w	80084c8 <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	200003f5 	.word	0x200003f5

080080bc <__sinit>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4604      	mov	r4, r0
 80080c0:	f7ff fff0 	bl	80080a4 <__sfp_lock_acquire>
 80080c4:	6a23      	ldr	r3, [r4, #32]
 80080c6:	b11b      	cbz	r3, 80080d0 <__sinit+0x14>
 80080c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080cc:	f7ff bff0 	b.w	80080b0 <__sfp_lock_release>
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <__sinit+0x28>)
 80080d2:	6223      	str	r3, [r4, #32]
 80080d4:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <__sinit+0x2c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f5      	bne.n	80080c8 <__sinit+0xc>
 80080dc:	f7ff ffc4 	bl	8008068 <global_stdio_init.part.0>
 80080e0:	e7f2      	b.n	80080c8 <__sinit+0xc>
 80080e2:	bf00      	nop
 80080e4:	08008029 	.word	0x08008029
 80080e8:	200003ec 	.word	0x200003ec

080080ec <_fwalk_sglue>:
 80080ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f0:	4607      	mov	r7, r0
 80080f2:	4688      	mov	r8, r1
 80080f4:	4614      	mov	r4, r2
 80080f6:	2600      	movs	r6, #0
 80080f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008100:	d505      	bpl.n	800810e <_fwalk_sglue+0x22>
 8008102:	6824      	ldr	r4, [r4, #0]
 8008104:	2c00      	cmp	r4, #0
 8008106:	d1f7      	bne.n	80080f8 <_fwalk_sglue+0xc>
 8008108:	4630      	mov	r0, r6
 800810a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d907      	bls.n	8008124 <_fwalk_sglue+0x38>
 8008114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008118:	3301      	adds	r3, #1
 800811a:	d003      	beq.n	8008124 <_fwalk_sglue+0x38>
 800811c:	4629      	mov	r1, r5
 800811e:	4638      	mov	r0, r7
 8008120:	47c0      	blx	r8
 8008122:	4306      	orrs	r6, r0
 8008124:	3568      	adds	r5, #104	; 0x68
 8008126:	e7e9      	b.n	80080fc <_fwalk_sglue+0x10>

08008128 <iprintf>:
 8008128:	b40f      	push	{r0, r1, r2, r3}
 800812a:	b507      	push	{r0, r1, r2, lr}
 800812c:	4906      	ldr	r1, [pc, #24]	; (8008148 <iprintf+0x20>)
 800812e:	ab04      	add	r3, sp, #16
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	f853 2b04 	ldr.w	r2, [r3], #4
 8008136:	6881      	ldr	r1, [r0, #8]
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f000 fa3d 	bl	80085b8 <_vfiprintf_r>
 800813e:	b003      	add	sp, #12
 8008140:	f85d eb04 	ldr.w	lr, [sp], #4
 8008144:	b004      	add	sp, #16
 8008146:	4770      	bx	lr
 8008148:	20000064 	.word	0x20000064

0800814c <_puts_r>:
 800814c:	6a03      	ldr	r3, [r0, #32]
 800814e:	b570      	push	{r4, r5, r6, lr}
 8008150:	6884      	ldr	r4, [r0, #8]
 8008152:	4605      	mov	r5, r0
 8008154:	460e      	mov	r6, r1
 8008156:	b90b      	cbnz	r3, 800815c <_puts_r+0x10>
 8008158:	f7ff ffb0 	bl	80080bc <__sinit>
 800815c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800815e:	07db      	lsls	r3, r3, #31
 8008160:	d405      	bmi.n	800816e <_puts_r+0x22>
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	0598      	lsls	r0, r3, #22
 8008166:	d402      	bmi.n	800816e <_puts_r+0x22>
 8008168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816a:	f000 f9ac 	bl	80084c6 <__retarget_lock_acquire_recursive>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	0719      	lsls	r1, r3, #28
 8008172:	d513      	bpl.n	800819c <_puts_r+0x50>
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	b18b      	cbz	r3, 800819c <_puts_r+0x50>
 8008178:	3e01      	subs	r6, #1
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008180:	3b01      	subs	r3, #1
 8008182:	60a3      	str	r3, [r4, #8]
 8008184:	b9e9      	cbnz	r1, 80081c2 <_puts_r+0x76>
 8008186:	2b00      	cmp	r3, #0
 8008188:	da2e      	bge.n	80081e8 <_puts_r+0x9c>
 800818a:	4622      	mov	r2, r4
 800818c:	210a      	movs	r1, #10
 800818e:	4628      	mov	r0, r5
 8008190:	f000 f87b 	bl	800828a <__swbuf_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d007      	beq.n	80081a8 <_puts_r+0x5c>
 8008198:	250a      	movs	r5, #10
 800819a:	e007      	b.n	80081ac <_puts_r+0x60>
 800819c:	4621      	mov	r1, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f8b0 	bl	8008304 <__swsetup_r>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d0e7      	beq.n	8008178 <_puts_r+0x2c>
 80081a8:	f04f 35ff 	mov.w	r5, #4294967295
 80081ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ae:	07da      	lsls	r2, r3, #31
 80081b0:	d405      	bmi.n	80081be <_puts_r+0x72>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	059b      	lsls	r3, r3, #22
 80081b6:	d402      	bmi.n	80081be <_puts_r+0x72>
 80081b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ba:	f000 f985 	bl	80084c8 <__retarget_lock_release_recursive>
 80081be:	4628      	mov	r0, r5
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da04      	bge.n	80081d0 <_puts_r+0x84>
 80081c6:	69a2      	ldr	r2, [r4, #24]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	dc06      	bgt.n	80081da <_puts_r+0x8e>
 80081cc:	290a      	cmp	r1, #10
 80081ce:	d004      	beq.n	80081da <_puts_r+0x8e>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	7019      	strb	r1, [r3, #0]
 80081d8:	e7cf      	b.n	800817a <_puts_r+0x2e>
 80081da:	4622      	mov	r2, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f854 	bl	800828a <__swbuf_r>
 80081e2:	3001      	adds	r0, #1
 80081e4:	d1c9      	bne.n	800817a <_puts_r+0x2e>
 80081e6:	e7df      	b.n	80081a8 <_puts_r+0x5c>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	250a      	movs	r5, #10
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	6022      	str	r2, [r4, #0]
 80081f0:	701d      	strb	r5, [r3, #0]
 80081f2:	e7db      	b.n	80081ac <_puts_r+0x60>

080081f4 <puts>:
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <puts+0xc>)
 80081f6:	4601      	mov	r1, r0
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f7ff bfa7 	b.w	800814c <_puts_r>
 80081fe:	bf00      	nop
 8008200:	20000064 	.word	0x20000064

08008204 <__sread>:
 8008204:	b510      	push	{r4, lr}
 8008206:	460c      	mov	r4, r1
 8008208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820c:	f000 f8fc 	bl	8008408 <_read_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	bfab      	itete	ge
 8008214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008216:	89a3      	ldrhlt	r3, [r4, #12]
 8008218:	181b      	addge	r3, r3, r0
 800821a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800821e:	bfac      	ite	ge
 8008220:	6563      	strge	r3, [r4, #84]	; 0x54
 8008222:	81a3      	strhlt	r3, [r4, #12]
 8008224:	bd10      	pop	{r4, pc}

08008226 <__swrite>:
 8008226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822a:	461f      	mov	r7, r3
 800822c:	898b      	ldrh	r3, [r1, #12]
 800822e:	05db      	lsls	r3, r3, #23
 8008230:	4605      	mov	r5, r0
 8008232:	460c      	mov	r4, r1
 8008234:	4616      	mov	r6, r2
 8008236:	d505      	bpl.n	8008244 <__swrite+0x1e>
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	2302      	movs	r3, #2
 800823e:	2200      	movs	r2, #0
 8008240:	f000 f8d0 	bl	80083e4 <_lseek_r>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	4632      	mov	r2, r6
 8008252:	463b      	mov	r3, r7
 8008254:	4628      	mov	r0, r5
 8008256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825a:	f000 b8f7 	b.w	800844c <_write_r>

0800825e <__sseek>:
 800825e:	b510      	push	{r4, lr}
 8008260:	460c      	mov	r4, r1
 8008262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008266:	f000 f8bd 	bl	80083e4 <_lseek_r>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	bf15      	itete	ne
 8008270:	6560      	strne	r0, [r4, #84]	; 0x54
 8008272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800827a:	81a3      	strheq	r3, [r4, #12]
 800827c:	bf18      	it	ne
 800827e:	81a3      	strhne	r3, [r4, #12]
 8008280:	bd10      	pop	{r4, pc}

08008282 <__sclose>:
 8008282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008286:	f000 b89d 	b.w	80083c4 <_close_r>

0800828a <__swbuf_r>:
 800828a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828c:	460e      	mov	r6, r1
 800828e:	4614      	mov	r4, r2
 8008290:	4605      	mov	r5, r0
 8008292:	b118      	cbz	r0, 800829c <__swbuf_r+0x12>
 8008294:	6a03      	ldr	r3, [r0, #32]
 8008296:	b90b      	cbnz	r3, 800829c <__swbuf_r+0x12>
 8008298:	f7ff ff10 	bl	80080bc <__sinit>
 800829c:	69a3      	ldr	r3, [r4, #24]
 800829e:	60a3      	str	r3, [r4, #8]
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	071a      	lsls	r2, r3, #28
 80082a4:	d525      	bpl.n	80082f2 <__swbuf_r+0x68>
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	b31b      	cbz	r3, 80082f2 <__swbuf_r+0x68>
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	6922      	ldr	r2, [r4, #16]
 80082ae:	1a98      	subs	r0, r3, r2
 80082b0:	6963      	ldr	r3, [r4, #20]
 80082b2:	b2f6      	uxtb	r6, r6
 80082b4:	4283      	cmp	r3, r0
 80082b6:	4637      	mov	r7, r6
 80082b8:	dc04      	bgt.n	80082c4 <__swbuf_r+0x3a>
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 fcab 	bl	8008c18 <_fflush_r>
 80082c2:	b9e0      	cbnz	r0, 80082fe <__swbuf_r+0x74>
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	6022      	str	r2, [r4, #0]
 80082d0:	701e      	strb	r6, [r3, #0]
 80082d2:	6962      	ldr	r2, [r4, #20]
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d004      	beq.n	80082e4 <__swbuf_r+0x5a>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	07db      	lsls	r3, r3, #31
 80082de:	d506      	bpl.n	80082ee <__swbuf_r+0x64>
 80082e0:	2e0a      	cmp	r6, #10
 80082e2:	d104      	bne.n	80082ee <__swbuf_r+0x64>
 80082e4:	4621      	mov	r1, r4
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 fc96 	bl	8008c18 <_fflush_r>
 80082ec:	b938      	cbnz	r0, 80082fe <__swbuf_r+0x74>
 80082ee:	4638      	mov	r0, r7
 80082f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f2:	4621      	mov	r1, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 f805 	bl	8008304 <__swsetup_r>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0d5      	beq.n	80082aa <__swbuf_r+0x20>
 80082fe:	f04f 37ff 	mov.w	r7, #4294967295
 8008302:	e7f4      	b.n	80082ee <__swbuf_r+0x64>

08008304 <__swsetup_r>:
 8008304:	b538      	push	{r3, r4, r5, lr}
 8008306:	4b2a      	ldr	r3, [pc, #168]	; (80083b0 <__swsetup_r+0xac>)
 8008308:	4605      	mov	r5, r0
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	460c      	mov	r4, r1
 800830e:	b118      	cbz	r0, 8008318 <__swsetup_r+0x14>
 8008310:	6a03      	ldr	r3, [r0, #32]
 8008312:	b90b      	cbnz	r3, 8008318 <__swsetup_r+0x14>
 8008314:	f7ff fed2 	bl	80080bc <__sinit>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800831e:	0718      	lsls	r0, r3, #28
 8008320:	d422      	bmi.n	8008368 <__swsetup_r+0x64>
 8008322:	06d9      	lsls	r1, r3, #27
 8008324:	d407      	bmi.n	8008336 <__swsetup_r+0x32>
 8008326:	2309      	movs	r3, #9
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	e034      	b.n	80083a0 <__swsetup_r+0x9c>
 8008336:	0758      	lsls	r0, r3, #29
 8008338:	d512      	bpl.n	8008360 <__swsetup_r+0x5c>
 800833a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833c:	b141      	cbz	r1, 8008350 <__swsetup_r+0x4c>
 800833e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008342:	4299      	cmp	r1, r3
 8008344:	d002      	beq.n	800834c <__swsetup_r+0x48>
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f8c0 	bl	80084cc <_free_r>
 800834c:	2300      	movs	r3, #0
 800834e:	6363      	str	r3, [r4, #52]	; 0x34
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	2300      	movs	r3, #0
 800835a:	6063      	str	r3, [r4, #4]
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	f043 0308 	orr.w	r3, r3, #8
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	b94b      	cbnz	r3, 8008380 <__swsetup_r+0x7c>
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008376:	d003      	beq.n	8008380 <__swsetup_r+0x7c>
 8008378:	4621      	mov	r1, r4
 800837a:	4628      	mov	r0, r5
 800837c:	f000 fc9a 	bl	8008cb4 <__smakebuf_r>
 8008380:	89a0      	ldrh	r0, [r4, #12]
 8008382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008386:	f010 0301 	ands.w	r3, r0, #1
 800838a:	d00a      	beq.n	80083a2 <__swsetup_r+0x9e>
 800838c:	2300      	movs	r3, #0
 800838e:	60a3      	str	r3, [r4, #8]
 8008390:	6963      	ldr	r3, [r4, #20]
 8008392:	425b      	negs	r3, r3
 8008394:	61a3      	str	r3, [r4, #24]
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	b943      	cbnz	r3, 80083ac <__swsetup_r+0xa8>
 800839a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800839e:	d1c4      	bne.n	800832a <__swsetup_r+0x26>
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	0781      	lsls	r1, r0, #30
 80083a4:	bf58      	it	pl
 80083a6:	6963      	ldrpl	r3, [r4, #20]
 80083a8:	60a3      	str	r3, [r4, #8]
 80083aa:	e7f4      	b.n	8008396 <__swsetup_r+0x92>
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7f7      	b.n	80083a0 <__swsetup_r+0x9c>
 80083b0:	20000064 	.word	0x20000064

080083b4 <memset>:
 80083b4:	4402      	add	r2, r0
 80083b6:	4603      	mov	r3, r0
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d100      	bne.n	80083be <memset+0xa>
 80083bc:	4770      	bx	lr
 80083be:	f803 1b01 	strb.w	r1, [r3], #1
 80083c2:	e7f9      	b.n	80083b8 <memset+0x4>

080083c4 <_close_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d06      	ldr	r5, [pc, #24]	; (80083e0 <_close_r+0x1c>)
 80083c8:	2300      	movs	r3, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	f7f8 fdd7 	bl	8000f82 <_close>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d102      	bne.n	80083de <_close_r+0x1a>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b103      	cbz	r3, 80083de <_close_r+0x1a>
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	200003f0 	.word	0x200003f0

080083e4 <_lseek_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d07      	ldr	r5, [pc, #28]	; (8008404 <_lseek_r+0x20>)
 80083e8:	4604      	mov	r4, r0
 80083ea:	4608      	mov	r0, r1
 80083ec:	4611      	mov	r1, r2
 80083ee:	2200      	movs	r2, #0
 80083f0:	602a      	str	r2, [r5, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f7f8 fdec 	bl	8000fd0 <_lseek>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_lseek_r+0x1e>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_lseek_r+0x1e>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	200003f0 	.word	0x200003f0

08008408 <_read_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4d07      	ldr	r5, [pc, #28]	; (8008428 <_read_r+0x20>)
 800840c:	4604      	mov	r4, r0
 800840e:	4608      	mov	r0, r1
 8008410:	4611      	mov	r1, r2
 8008412:	2200      	movs	r2, #0
 8008414:	602a      	str	r2, [r5, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	f7f8 fd96 	bl	8000f48 <_read>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_read_r+0x1e>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_read_r+0x1e>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	200003f0 	.word	0x200003f0

0800842c <_sbrk_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d06      	ldr	r5, [pc, #24]	; (8008448 <_sbrk_r+0x1c>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	f7f8 fdd8 	bl	8000fec <_sbrk>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_sbrk_r+0x1a>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_sbrk_r+0x1a>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	200003f0 	.word	0x200003f0

0800844c <_write_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	; (800846c <_write_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7f8 fb74 	bl	8000b48 <_write>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_write_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_write_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	200003f0 	.word	0x200003f0

08008470 <__errno>:
 8008470:	4b01      	ldr	r3, [pc, #4]	; (8008478 <__errno+0x8>)
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20000064 	.word	0x20000064

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4d0d      	ldr	r5, [pc, #52]	; (80084b4 <__libc_init_array+0x38>)
 8008480:	4c0d      	ldr	r4, [pc, #52]	; (80084b8 <__libc_init_array+0x3c>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	2600      	movs	r6, #0
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	4d0b      	ldr	r5, [pc, #44]	; (80084bc <__libc_init_array+0x40>)
 800848e:	4c0c      	ldr	r4, [pc, #48]	; (80084c0 <__libc_init_array+0x44>)
 8008490:	f000 fc6e 	bl	8008d70 <_init>
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	2600      	movs	r6, #0
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	08009444 	.word	0x08009444
 80084b8:	08009444 	.word	0x08009444
 80084bc:	08009444 	.word	0x08009444
 80084c0:	08009448 	.word	0x08009448

080084c4 <__retarget_lock_init_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_acquire_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_release_recursive>:
 80084c8:	4770      	bx	lr
	...

080084cc <_free_r>:
 80084cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ce:	2900      	cmp	r1, #0
 80084d0:	d044      	beq.n	800855c <_free_r+0x90>
 80084d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f1a1 0404 	sub.w	r4, r1, #4
 80084de:	bfb8      	it	lt
 80084e0:	18e4      	addlt	r4, r4, r3
 80084e2:	f7ff fd53 	bl	8007f8c <__malloc_lock>
 80084e6:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <_free_r+0x94>)
 80084e8:	9801      	ldr	r0, [sp, #4]
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	b933      	cbnz	r3, 80084fc <_free_r+0x30>
 80084ee:	6063      	str	r3, [r4, #4]
 80084f0:	6014      	str	r4, [r2, #0]
 80084f2:	b003      	add	sp, #12
 80084f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f8:	f7ff bd4e 	b.w	8007f98 <__malloc_unlock>
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d908      	bls.n	8008512 <_free_r+0x46>
 8008500:	6825      	ldr	r5, [r4, #0]
 8008502:	1961      	adds	r1, r4, r5
 8008504:	428b      	cmp	r3, r1
 8008506:	bf01      	itttt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	1949      	addeq	r1, r1, r5
 800850e:	6021      	streq	r1, [r4, #0]
 8008510:	e7ed      	b.n	80084ee <_free_r+0x22>
 8008512:	461a      	mov	r2, r3
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	b10b      	cbz	r3, 800851c <_free_r+0x50>
 8008518:	42a3      	cmp	r3, r4
 800851a:	d9fa      	bls.n	8008512 <_free_r+0x46>
 800851c:	6811      	ldr	r1, [r2, #0]
 800851e:	1855      	adds	r5, r2, r1
 8008520:	42a5      	cmp	r5, r4
 8008522:	d10b      	bne.n	800853c <_free_r+0x70>
 8008524:	6824      	ldr	r4, [r4, #0]
 8008526:	4421      	add	r1, r4
 8008528:	1854      	adds	r4, r2, r1
 800852a:	42a3      	cmp	r3, r4
 800852c:	6011      	str	r1, [r2, #0]
 800852e:	d1e0      	bne.n	80084f2 <_free_r+0x26>
 8008530:	681c      	ldr	r4, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	6053      	str	r3, [r2, #4]
 8008536:	440c      	add	r4, r1
 8008538:	6014      	str	r4, [r2, #0]
 800853a:	e7da      	b.n	80084f2 <_free_r+0x26>
 800853c:	d902      	bls.n	8008544 <_free_r+0x78>
 800853e:	230c      	movs	r3, #12
 8008540:	6003      	str	r3, [r0, #0]
 8008542:	e7d6      	b.n	80084f2 <_free_r+0x26>
 8008544:	6825      	ldr	r5, [r4, #0]
 8008546:	1961      	adds	r1, r4, r5
 8008548:	428b      	cmp	r3, r1
 800854a:	bf04      	itt	eq
 800854c:	6819      	ldreq	r1, [r3, #0]
 800854e:	685b      	ldreq	r3, [r3, #4]
 8008550:	6063      	str	r3, [r4, #4]
 8008552:	bf04      	itt	eq
 8008554:	1949      	addeq	r1, r1, r5
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	6054      	str	r4, [r2, #4]
 800855a:	e7ca      	b.n	80084f2 <_free_r+0x26>
 800855c:	b003      	add	sp, #12
 800855e:	bd30      	pop	{r4, r5, pc}
 8008560:	200002ac 	.word	0x200002ac

08008564 <__sfputc_r>:
 8008564:	6893      	ldr	r3, [r2, #8]
 8008566:	3b01      	subs	r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	b410      	push	{r4}
 800856c:	6093      	str	r3, [r2, #8]
 800856e:	da08      	bge.n	8008582 <__sfputc_r+0x1e>
 8008570:	6994      	ldr	r4, [r2, #24]
 8008572:	42a3      	cmp	r3, r4
 8008574:	db01      	blt.n	800857a <__sfputc_r+0x16>
 8008576:	290a      	cmp	r1, #10
 8008578:	d103      	bne.n	8008582 <__sfputc_r+0x1e>
 800857a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857e:	f7ff be84 	b.w	800828a <__swbuf_r>
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	1c58      	adds	r0, r3, #1
 8008586:	6010      	str	r0, [r2, #0]
 8008588:	7019      	strb	r1, [r3, #0]
 800858a:	4608      	mov	r0, r1
 800858c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008590:	4770      	bx	lr

08008592 <__sfputs_r>:
 8008592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	4614      	mov	r4, r2
 800859a:	18d5      	adds	r5, r2, r3
 800859c:	42ac      	cmp	r4, r5
 800859e:	d101      	bne.n	80085a4 <__sfputs_r+0x12>
 80085a0:	2000      	movs	r0, #0
 80085a2:	e007      	b.n	80085b4 <__sfputs_r+0x22>
 80085a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a8:	463a      	mov	r2, r7
 80085aa:	4630      	mov	r0, r6
 80085ac:	f7ff ffda 	bl	8008564 <__sfputc_r>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d1f3      	bne.n	800859c <__sfputs_r+0xa>
 80085b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085b8 <_vfiprintf_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	460d      	mov	r5, r1
 80085be:	b09d      	sub	sp, #116	; 0x74
 80085c0:	4614      	mov	r4, r2
 80085c2:	4698      	mov	r8, r3
 80085c4:	4606      	mov	r6, r0
 80085c6:	b118      	cbz	r0, 80085d0 <_vfiprintf_r+0x18>
 80085c8:	6a03      	ldr	r3, [r0, #32]
 80085ca:	b90b      	cbnz	r3, 80085d0 <_vfiprintf_r+0x18>
 80085cc:	f7ff fd76 	bl	80080bc <__sinit>
 80085d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085d2:	07d9      	lsls	r1, r3, #31
 80085d4:	d405      	bmi.n	80085e2 <_vfiprintf_r+0x2a>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	059a      	lsls	r2, r3, #22
 80085da:	d402      	bmi.n	80085e2 <_vfiprintf_r+0x2a>
 80085dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085de:	f7ff ff72 	bl	80084c6 <__retarget_lock_acquire_recursive>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	071b      	lsls	r3, r3, #28
 80085e6:	d501      	bpl.n	80085ec <_vfiprintf_r+0x34>
 80085e8:	692b      	ldr	r3, [r5, #16]
 80085ea:	b99b      	cbnz	r3, 8008614 <_vfiprintf_r+0x5c>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4630      	mov	r0, r6
 80085f0:	f7ff fe88 	bl	8008304 <__swsetup_r>
 80085f4:	b170      	cbz	r0, 8008614 <_vfiprintf_r+0x5c>
 80085f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f8:	07dc      	lsls	r4, r3, #31
 80085fa:	d504      	bpl.n	8008606 <_vfiprintf_r+0x4e>
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	b01d      	add	sp, #116	; 0x74
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	0598      	lsls	r0, r3, #22
 800860a:	d4f7      	bmi.n	80085fc <_vfiprintf_r+0x44>
 800860c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800860e:	f7ff ff5b 	bl	80084c8 <__retarget_lock_release_recursive>
 8008612:	e7f3      	b.n	80085fc <_vfiprintf_r+0x44>
 8008614:	2300      	movs	r3, #0
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	2320      	movs	r3, #32
 800861a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800861e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008622:	2330      	movs	r3, #48	; 0x30
 8008624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80087d8 <_vfiprintf_r+0x220>
 8008628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800862c:	f04f 0901 	mov.w	r9, #1
 8008630:	4623      	mov	r3, r4
 8008632:	469a      	mov	sl, r3
 8008634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008638:	b10a      	cbz	r2, 800863e <_vfiprintf_r+0x86>
 800863a:	2a25      	cmp	r2, #37	; 0x25
 800863c:	d1f9      	bne.n	8008632 <_vfiprintf_r+0x7a>
 800863e:	ebba 0b04 	subs.w	fp, sl, r4
 8008642:	d00b      	beq.n	800865c <_vfiprintf_r+0xa4>
 8008644:	465b      	mov	r3, fp
 8008646:	4622      	mov	r2, r4
 8008648:	4629      	mov	r1, r5
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ffa1 	bl	8008592 <__sfputs_r>
 8008650:	3001      	adds	r0, #1
 8008652:	f000 80a9 	beq.w	80087a8 <_vfiprintf_r+0x1f0>
 8008656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008658:	445a      	add	r2, fp
 800865a:	9209      	str	r2, [sp, #36]	; 0x24
 800865c:	f89a 3000 	ldrb.w	r3, [sl]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80a1 	beq.w	80087a8 <_vfiprintf_r+0x1f0>
 8008666:	2300      	movs	r3, #0
 8008668:	f04f 32ff 	mov.w	r2, #4294967295
 800866c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008670:	f10a 0a01 	add.w	sl, sl, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800867c:	931a      	str	r3, [sp, #104]	; 0x68
 800867e:	4654      	mov	r4, sl
 8008680:	2205      	movs	r2, #5
 8008682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008686:	4854      	ldr	r0, [pc, #336]	; (80087d8 <_vfiprintf_r+0x220>)
 8008688:	f7f7 fdaa 	bl	80001e0 <memchr>
 800868c:	9a04      	ldr	r2, [sp, #16]
 800868e:	b9d8      	cbnz	r0, 80086c8 <_vfiprintf_r+0x110>
 8008690:	06d1      	lsls	r1, r2, #27
 8008692:	bf44      	itt	mi
 8008694:	2320      	movmi	r3, #32
 8008696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869a:	0713      	lsls	r3, r2, #28
 800869c:	bf44      	itt	mi
 800869e:	232b      	movmi	r3, #43	; 0x2b
 80086a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b2a      	cmp	r3, #42	; 0x2a
 80086aa:	d015      	beq.n	80086d8 <_vfiprintf_r+0x120>
 80086ac:	9a07      	ldr	r2, [sp, #28]
 80086ae:	4654      	mov	r4, sl
 80086b0:	2000      	movs	r0, #0
 80086b2:	f04f 0c0a 	mov.w	ip, #10
 80086b6:	4621      	mov	r1, r4
 80086b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086bc:	3b30      	subs	r3, #48	; 0x30
 80086be:	2b09      	cmp	r3, #9
 80086c0:	d94d      	bls.n	800875e <_vfiprintf_r+0x1a6>
 80086c2:	b1b0      	cbz	r0, 80086f2 <_vfiprintf_r+0x13a>
 80086c4:	9207      	str	r2, [sp, #28]
 80086c6:	e014      	b.n	80086f2 <_vfiprintf_r+0x13a>
 80086c8:	eba0 0308 	sub.w	r3, r0, r8
 80086cc:	fa09 f303 	lsl.w	r3, r9, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	46a2      	mov	sl, r4
 80086d6:	e7d2      	b.n	800867e <_vfiprintf_r+0xc6>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	1d19      	adds	r1, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	9103      	str	r1, [sp, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfbb      	ittet	lt
 80086e4:	425b      	neglt	r3, r3
 80086e6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ea:	9307      	strge	r3, [sp, #28]
 80086ec:	9307      	strlt	r3, [sp, #28]
 80086ee:	bfb8      	it	lt
 80086f0:	9204      	strlt	r2, [sp, #16]
 80086f2:	7823      	ldrb	r3, [r4, #0]
 80086f4:	2b2e      	cmp	r3, #46	; 0x2e
 80086f6:	d10c      	bne.n	8008712 <_vfiprintf_r+0x15a>
 80086f8:	7863      	ldrb	r3, [r4, #1]
 80086fa:	2b2a      	cmp	r3, #42	; 0x2a
 80086fc:	d134      	bne.n	8008768 <_vfiprintf_r+0x1b0>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	1d1a      	adds	r2, r3, #4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	9203      	str	r2, [sp, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	bfb8      	it	lt
 800870a:	f04f 33ff 	movlt.w	r3, #4294967295
 800870e:	3402      	adds	r4, #2
 8008710:	9305      	str	r3, [sp, #20]
 8008712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80087e8 <_vfiprintf_r+0x230>
 8008716:	7821      	ldrb	r1, [r4, #0]
 8008718:	2203      	movs	r2, #3
 800871a:	4650      	mov	r0, sl
 800871c:	f7f7 fd60 	bl	80001e0 <memchr>
 8008720:	b138      	cbz	r0, 8008732 <_vfiprintf_r+0x17a>
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	eba0 000a 	sub.w	r0, r0, sl
 8008728:	2240      	movs	r2, #64	; 0x40
 800872a:	4082      	lsls	r2, r0
 800872c:	4313      	orrs	r3, r2
 800872e:	3401      	adds	r4, #1
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008736:	4829      	ldr	r0, [pc, #164]	; (80087dc <_vfiprintf_r+0x224>)
 8008738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800873c:	2206      	movs	r2, #6
 800873e:	f7f7 fd4f 	bl	80001e0 <memchr>
 8008742:	2800      	cmp	r0, #0
 8008744:	d03f      	beq.n	80087c6 <_vfiprintf_r+0x20e>
 8008746:	4b26      	ldr	r3, [pc, #152]	; (80087e0 <_vfiprintf_r+0x228>)
 8008748:	bb1b      	cbnz	r3, 8008792 <_vfiprintf_r+0x1da>
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	3307      	adds	r3, #7
 800874e:	f023 0307 	bic.w	r3, r3, #7
 8008752:	3308      	adds	r3, #8
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008758:	443b      	add	r3, r7
 800875a:	9309      	str	r3, [sp, #36]	; 0x24
 800875c:	e768      	b.n	8008630 <_vfiprintf_r+0x78>
 800875e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008762:	460c      	mov	r4, r1
 8008764:	2001      	movs	r0, #1
 8008766:	e7a6      	b.n	80086b6 <_vfiprintf_r+0xfe>
 8008768:	2300      	movs	r3, #0
 800876a:	3401      	adds	r4, #1
 800876c:	9305      	str	r3, [sp, #20]
 800876e:	4619      	mov	r1, r3
 8008770:	f04f 0c0a 	mov.w	ip, #10
 8008774:	4620      	mov	r0, r4
 8008776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877a:	3a30      	subs	r2, #48	; 0x30
 800877c:	2a09      	cmp	r2, #9
 800877e:	d903      	bls.n	8008788 <_vfiprintf_r+0x1d0>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d0c6      	beq.n	8008712 <_vfiprintf_r+0x15a>
 8008784:	9105      	str	r1, [sp, #20]
 8008786:	e7c4      	b.n	8008712 <_vfiprintf_r+0x15a>
 8008788:	fb0c 2101 	mla	r1, ip, r1, r2
 800878c:	4604      	mov	r4, r0
 800878e:	2301      	movs	r3, #1
 8008790:	e7f0      	b.n	8008774 <_vfiprintf_r+0x1bc>
 8008792:	ab03      	add	r3, sp, #12
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	462a      	mov	r2, r5
 8008798:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <_vfiprintf_r+0x22c>)
 800879a:	a904      	add	r1, sp, #16
 800879c:	4630      	mov	r0, r6
 800879e:	f3af 8000 	nop.w
 80087a2:	4607      	mov	r7, r0
 80087a4:	1c78      	adds	r0, r7, #1
 80087a6:	d1d6      	bne.n	8008756 <_vfiprintf_r+0x19e>
 80087a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087aa:	07d9      	lsls	r1, r3, #31
 80087ac:	d405      	bmi.n	80087ba <_vfiprintf_r+0x202>
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	059a      	lsls	r2, r3, #22
 80087b2:	d402      	bmi.n	80087ba <_vfiprintf_r+0x202>
 80087b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087b6:	f7ff fe87 	bl	80084c8 <__retarget_lock_release_recursive>
 80087ba:	89ab      	ldrh	r3, [r5, #12]
 80087bc:	065b      	lsls	r3, r3, #25
 80087be:	f53f af1d 	bmi.w	80085fc <_vfiprintf_r+0x44>
 80087c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c4:	e71c      	b.n	8008600 <_vfiprintf_r+0x48>
 80087c6:	ab03      	add	r3, sp, #12
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	462a      	mov	r2, r5
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <_vfiprintf_r+0x22c>)
 80087ce:	a904      	add	r1, sp, #16
 80087d0:	4630      	mov	r0, r6
 80087d2:	f000 f879 	bl	80088c8 <_printf_i>
 80087d6:	e7e4      	b.n	80087a2 <_vfiprintf_r+0x1ea>
 80087d8:	08009408 	.word	0x08009408
 80087dc:	08009412 	.word	0x08009412
 80087e0:	00000000 	.word	0x00000000
 80087e4:	08008593 	.word	0x08008593
 80087e8:	0800940e 	.word	0x0800940e

080087ec <_printf_common>:
 80087ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	4616      	mov	r6, r2
 80087f2:	4699      	mov	r9, r3
 80087f4:	688a      	ldr	r2, [r1, #8]
 80087f6:	690b      	ldr	r3, [r1, #16]
 80087f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bfb8      	it	lt
 8008800:	4613      	movlt	r3, r2
 8008802:	6033      	str	r3, [r6, #0]
 8008804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008808:	4607      	mov	r7, r0
 800880a:	460c      	mov	r4, r1
 800880c:	b10a      	cbz	r2, 8008812 <_printf_common+0x26>
 800880e:	3301      	adds	r3, #1
 8008810:	6033      	str	r3, [r6, #0]
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	0699      	lsls	r1, r3, #26
 8008816:	bf42      	ittt	mi
 8008818:	6833      	ldrmi	r3, [r6, #0]
 800881a:	3302      	addmi	r3, #2
 800881c:	6033      	strmi	r3, [r6, #0]
 800881e:	6825      	ldr	r5, [r4, #0]
 8008820:	f015 0506 	ands.w	r5, r5, #6
 8008824:	d106      	bne.n	8008834 <_printf_common+0x48>
 8008826:	f104 0a19 	add.w	sl, r4, #25
 800882a:	68e3      	ldr	r3, [r4, #12]
 800882c:	6832      	ldr	r2, [r6, #0]
 800882e:	1a9b      	subs	r3, r3, r2
 8008830:	42ab      	cmp	r3, r5
 8008832:	dc26      	bgt.n	8008882 <_printf_common+0x96>
 8008834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008838:	1e13      	subs	r3, r2, #0
 800883a:	6822      	ldr	r2, [r4, #0]
 800883c:	bf18      	it	ne
 800883e:	2301      	movne	r3, #1
 8008840:	0692      	lsls	r2, r2, #26
 8008842:	d42b      	bmi.n	800889c <_printf_common+0xb0>
 8008844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008848:	4649      	mov	r1, r9
 800884a:	4638      	mov	r0, r7
 800884c:	47c0      	blx	r8
 800884e:	3001      	adds	r0, #1
 8008850:	d01e      	beq.n	8008890 <_printf_common+0xa4>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	6922      	ldr	r2, [r4, #16]
 8008856:	f003 0306 	and.w	r3, r3, #6
 800885a:	2b04      	cmp	r3, #4
 800885c:	bf02      	ittt	eq
 800885e:	68e5      	ldreq	r5, [r4, #12]
 8008860:	6833      	ldreq	r3, [r6, #0]
 8008862:	1aed      	subeq	r5, r5, r3
 8008864:	68a3      	ldr	r3, [r4, #8]
 8008866:	bf0c      	ite	eq
 8008868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800886c:	2500      	movne	r5, #0
 800886e:	4293      	cmp	r3, r2
 8008870:	bfc4      	itt	gt
 8008872:	1a9b      	subgt	r3, r3, r2
 8008874:	18ed      	addgt	r5, r5, r3
 8008876:	2600      	movs	r6, #0
 8008878:	341a      	adds	r4, #26
 800887a:	42b5      	cmp	r5, r6
 800887c:	d11a      	bne.n	80088b4 <_printf_common+0xc8>
 800887e:	2000      	movs	r0, #0
 8008880:	e008      	b.n	8008894 <_printf_common+0xa8>
 8008882:	2301      	movs	r3, #1
 8008884:	4652      	mov	r2, sl
 8008886:	4649      	mov	r1, r9
 8008888:	4638      	mov	r0, r7
 800888a:	47c0      	blx	r8
 800888c:	3001      	adds	r0, #1
 800888e:	d103      	bne.n	8008898 <_printf_common+0xac>
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008898:	3501      	adds	r5, #1
 800889a:	e7c6      	b.n	800882a <_printf_common+0x3e>
 800889c:	18e1      	adds	r1, r4, r3
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	2030      	movs	r0, #48	; 0x30
 80088a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088a6:	4422      	add	r2, r4
 80088a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088b0:	3302      	adds	r3, #2
 80088b2:	e7c7      	b.n	8008844 <_printf_common+0x58>
 80088b4:	2301      	movs	r3, #1
 80088b6:	4622      	mov	r2, r4
 80088b8:	4649      	mov	r1, r9
 80088ba:	4638      	mov	r0, r7
 80088bc:	47c0      	blx	r8
 80088be:	3001      	adds	r0, #1
 80088c0:	d0e6      	beq.n	8008890 <_printf_common+0xa4>
 80088c2:	3601      	adds	r6, #1
 80088c4:	e7d9      	b.n	800887a <_printf_common+0x8e>
	...

080088c8 <_printf_i>:
 80088c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088cc:	7e0f      	ldrb	r7, [r1, #24]
 80088ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d0:	2f78      	cmp	r7, #120	; 0x78
 80088d2:	4691      	mov	r9, r2
 80088d4:	4680      	mov	r8, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	469a      	mov	sl, r3
 80088da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088de:	d807      	bhi.n	80088f0 <_printf_i+0x28>
 80088e0:	2f62      	cmp	r7, #98	; 0x62
 80088e2:	d80a      	bhi.n	80088fa <_printf_i+0x32>
 80088e4:	2f00      	cmp	r7, #0
 80088e6:	f000 80d4 	beq.w	8008a92 <_printf_i+0x1ca>
 80088ea:	2f58      	cmp	r7, #88	; 0x58
 80088ec:	f000 80c0 	beq.w	8008a70 <_printf_i+0x1a8>
 80088f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088f8:	e03a      	b.n	8008970 <_printf_i+0xa8>
 80088fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088fe:	2b15      	cmp	r3, #21
 8008900:	d8f6      	bhi.n	80088f0 <_printf_i+0x28>
 8008902:	a101      	add	r1, pc, #4	; (adr r1, 8008908 <_printf_i+0x40>)
 8008904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008908:	08008961 	.word	0x08008961
 800890c:	08008975 	.word	0x08008975
 8008910:	080088f1 	.word	0x080088f1
 8008914:	080088f1 	.word	0x080088f1
 8008918:	080088f1 	.word	0x080088f1
 800891c:	080088f1 	.word	0x080088f1
 8008920:	08008975 	.word	0x08008975
 8008924:	080088f1 	.word	0x080088f1
 8008928:	080088f1 	.word	0x080088f1
 800892c:	080088f1 	.word	0x080088f1
 8008930:	080088f1 	.word	0x080088f1
 8008934:	08008a79 	.word	0x08008a79
 8008938:	080089a1 	.word	0x080089a1
 800893c:	08008a33 	.word	0x08008a33
 8008940:	080088f1 	.word	0x080088f1
 8008944:	080088f1 	.word	0x080088f1
 8008948:	08008a9b 	.word	0x08008a9b
 800894c:	080088f1 	.word	0x080088f1
 8008950:	080089a1 	.word	0x080089a1
 8008954:	080088f1 	.word	0x080088f1
 8008958:	080088f1 	.word	0x080088f1
 800895c:	08008a3b 	.word	0x08008a3b
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	1d1a      	adds	r2, r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	602a      	str	r2, [r5, #0]
 8008968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800896c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008970:	2301      	movs	r3, #1
 8008972:	e09f      	b.n	8008ab4 <_printf_i+0x1ec>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	682b      	ldr	r3, [r5, #0]
 8008978:	0607      	lsls	r7, r0, #24
 800897a:	f103 0104 	add.w	r1, r3, #4
 800897e:	6029      	str	r1, [r5, #0]
 8008980:	d501      	bpl.n	8008986 <_printf_i+0xbe>
 8008982:	681e      	ldr	r6, [r3, #0]
 8008984:	e003      	b.n	800898e <_printf_i+0xc6>
 8008986:	0646      	lsls	r6, r0, #25
 8008988:	d5fb      	bpl.n	8008982 <_printf_i+0xba>
 800898a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800898e:	2e00      	cmp	r6, #0
 8008990:	da03      	bge.n	800899a <_printf_i+0xd2>
 8008992:	232d      	movs	r3, #45	; 0x2d
 8008994:	4276      	negs	r6, r6
 8008996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800899a:	485a      	ldr	r0, [pc, #360]	; (8008b04 <_printf_i+0x23c>)
 800899c:	230a      	movs	r3, #10
 800899e:	e012      	b.n	80089c6 <_printf_i+0xfe>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	1d19      	adds	r1, r3, #4
 80089a6:	6029      	str	r1, [r5, #0]
 80089a8:	0605      	lsls	r5, r0, #24
 80089aa:	d501      	bpl.n	80089b0 <_printf_i+0xe8>
 80089ac:	681e      	ldr	r6, [r3, #0]
 80089ae:	e002      	b.n	80089b6 <_printf_i+0xee>
 80089b0:	0641      	lsls	r1, r0, #25
 80089b2:	d5fb      	bpl.n	80089ac <_printf_i+0xe4>
 80089b4:	881e      	ldrh	r6, [r3, #0]
 80089b6:	4853      	ldr	r0, [pc, #332]	; (8008b04 <_printf_i+0x23c>)
 80089b8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ba:	bf0c      	ite	eq
 80089bc:	2308      	moveq	r3, #8
 80089be:	230a      	movne	r3, #10
 80089c0:	2100      	movs	r1, #0
 80089c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089c6:	6865      	ldr	r5, [r4, #4]
 80089c8:	60a5      	str	r5, [r4, #8]
 80089ca:	2d00      	cmp	r5, #0
 80089cc:	bfa2      	ittt	ge
 80089ce:	6821      	ldrge	r1, [r4, #0]
 80089d0:	f021 0104 	bicge.w	r1, r1, #4
 80089d4:	6021      	strge	r1, [r4, #0]
 80089d6:	b90e      	cbnz	r6, 80089dc <_printf_i+0x114>
 80089d8:	2d00      	cmp	r5, #0
 80089da:	d04b      	beq.n	8008a74 <_printf_i+0x1ac>
 80089dc:	4615      	mov	r5, r2
 80089de:	fbb6 f1f3 	udiv	r1, r6, r3
 80089e2:	fb03 6711 	mls	r7, r3, r1, r6
 80089e6:	5dc7      	ldrb	r7, [r0, r7]
 80089e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089ec:	4637      	mov	r7, r6
 80089ee:	42bb      	cmp	r3, r7
 80089f0:	460e      	mov	r6, r1
 80089f2:	d9f4      	bls.n	80089de <_printf_i+0x116>
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d10b      	bne.n	8008a10 <_printf_i+0x148>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	07de      	lsls	r6, r3, #31
 80089fc:	d508      	bpl.n	8008a10 <_printf_i+0x148>
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	6861      	ldr	r1, [r4, #4]
 8008a02:	4299      	cmp	r1, r3
 8008a04:	bfde      	ittt	le
 8008a06:	2330      	movle	r3, #48	; 0x30
 8008a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a10:	1b52      	subs	r2, r2, r5
 8008a12:	6122      	str	r2, [r4, #16]
 8008a14:	f8cd a000 	str.w	sl, [sp]
 8008a18:	464b      	mov	r3, r9
 8008a1a:	aa03      	add	r2, sp, #12
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4640      	mov	r0, r8
 8008a20:	f7ff fee4 	bl	80087ec <_printf_common>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d14a      	bne.n	8008abe <_printf_i+0x1f6>
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	b004      	add	sp, #16
 8008a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	f043 0320 	orr.w	r3, r3, #32
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	4833      	ldr	r0, [pc, #204]	; (8008b08 <_printf_i+0x240>)
 8008a3c:	2778      	movs	r7, #120	; 0x78
 8008a3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	6829      	ldr	r1, [r5, #0]
 8008a46:	061f      	lsls	r7, r3, #24
 8008a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a4c:	d402      	bmi.n	8008a54 <_printf_i+0x18c>
 8008a4e:	065f      	lsls	r7, r3, #25
 8008a50:	bf48      	it	mi
 8008a52:	b2b6      	uxthmi	r6, r6
 8008a54:	07df      	lsls	r7, r3, #31
 8008a56:	bf48      	it	mi
 8008a58:	f043 0320 	orrmi.w	r3, r3, #32
 8008a5c:	6029      	str	r1, [r5, #0]
 8008a5e:	bf48      	it	mi
 8008a60:	6023      	strmi	r3, [r4, #0]
 8008a62:	b91e      	cbnz	r6, 8008a6c <_printf_i+0x1a4>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	f023 0320 	bic.w	r3, r3, #32
 8008a6a:	6023      	str	r3, [r4, #0]
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	e7a7      	b.n	80089c0 <_printf_i+0xf8>
 8008a70:	4824      	ldr	r0, [pc, #144]	; (8008b04 <_printf_i+0x23c>)
 8008a72:	e7e4      	b.n	8008a3e <_printf_i+0x176>
 8008a74:	4615      	mov	r5, r2
 8008a76:	e7bd      	b.n	80089f4 <_printf_i+0x12c>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	6826      	ldr	r6, [r4, #0]
 8008a7c:	6961      	ldr	r1, [r4, #20]
 8008a7e:	1d18      	adds	r0, r3, #4
 8008a80:	6028      	str	r0, [r5, #0]
 8008a82:	0635      	lsls	r5, r6, #24
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	d501      	bpl.n	8008a8c <_printf_i+0x1c4>
 8008a88:	6019      	str	r1, [r3, #0]
 8008a8a:	e002      	b.n	8008a92 <_printf_i+0x1ca>
 8008a8c:	0670      	lsls	r0, r6, #25
 8008a8e:	d5fb      	bpl.n	8008a88 <_printf_i+0x1c0>
 8008a90:	8019      	strh	r1, [r3, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	4615      	mov	r5, r2
 8008a98:	e7bc      	b.n	8008a14 <_printf_i+0x14c>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	1d1a      	adds	r2, r3, #4
 8008a9e:	602a      	str	r2, [r5, #0]
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	6862      	ldr	r2, [r4, #4]
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f7f7 fb9a 	bl	80001e0 <memchr>
 8008aac:	b108      	cbz	r0, 8008ab2 <_printf_i+0x1ea>
 8008aae:	1b40      	subs	r0, r0, r5
 8008ab0:	6060      	str	r0, [r4, #4]
 8008ab2:	6863      	ldr	r3, [r4, #4]
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008abc:	e7aa      	b.n	8008a14 <_printf_i+0x14c>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	47d0      	blx	sl
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d0ad      	beq.n	8008a28 <_printf_i+0x160>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	079b      	lsls	r3, r3, #30
 8008ad0:	d413      	bmi.n	8008afa <_printf_i+0x232>
 8008ad2:	68e0      	ldr	r0, [r4, #12]
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	4298      	cmp	r0, r3
 8008ad8:	bfb8      	it	lt
 8008ada:	4618      	movlt	r0, r3
 8008adc:	e7a6      	b.n	8008a2c <_printf_i+0x164>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	47d0      	blx	sl
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d09d      	beq.n	8008a28 <_printf_i+0x160>
 8008aec:	3501      	adds	r5, #1
 8008aee:	68e3      	ldr	r3, [r4, #12]
 8008af0:	9903      	ldr	r1, [sp, #12]
 8008af2:	1a5b      	subs	r3, r3, r1
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	dcf2      	bgt.n	8008ade <_printf_i+0x216>
 8008af8:	e7eb      	b.n	8008ad2 <_printf_i+0x20a>
 8008afa:	2500      	movs	r5, #0
 8008afc:	f104 0619 	add.w	r6, r4, #25
 8008b00:	e7f5      	b.n	8008aee <_printf_i+0x226>
 8008b02:	bf00      	nop
 8008b04:	08009419 	.word	0x08009419
 8008b08:	0800942a 	.word	0x0800942a

08008b0c <__sflush_r>:
 8008b0c:	898a      	ldrh	r2, [r1, #12]
 8008b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b12:	4605      	mov	r5, r0
 8008b14:	0710      	lsls	r0, r2, #28
 8008b16:	460c      	mov	r4, r1
 8008b18:	d458      	bmi.n	8008bcc <__sflush_r+0xc0>
 8008b1a:	684b      	ldr	r3, [r1, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dc05      	bgt.n	8008b2c <__sflush_r+0x20>
 8008b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dc02      	bgt.n	8008b2c <__sflush_r+0x20>
 8008b26:	2000      	movs	r0, #0
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b2e:	2e00      	cmp	r6, #0
 8008b30:	d0f9      	beq.n	8008b26 <__sflush_r+0x1a>
 8008b32:	2300      	movs	r3, #0
 8008b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b38:	682f      	ldr	r7, [r5, #0]
 8008b3a:	6a21      	ldr	r1, [r4, #32]
 8008b3c:	602b      	str	r3, [r5, #0]
 8008b3e:	d032      	beq.n	8008ba6 <__sflush_r+0x9a>
 8008b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	075a      	lsls	r2, r3, #29
 8008b46:	d505      	bpl.n	8008b54 <__sflush_r+0x48>
 8008b48:	6863      	ldr	r3, [r4, #4]
 8008b4a:	1ac0      	subs	r0, r0, r3
 8008b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b4e:	b10b      	cbz	r3, 8008b54 <__sflush_r+0x48>
 8008b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b52:	1ac0      	subs	r0, r0, r3
 8008b54:	2300      	movs	r3, #0
 8008b56:	4602      	mov	r2, r0
 8008b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b5a:	6a21      	ldr	r1, [r4, #32]
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b0      	blx	r6
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	d106      	bne.n	8008b74 <__sflush_r+0x68>
 8008b66:	6829      	ldr	r1, [r5, #0]
 8008b68:	291d      	cmp	r1, #29
 8008b6a:	d82b      	bhi.n	8008bc4 <__sflush_r+0xb8>
 8008b6c:	4a29      	ldr	r2, [pc, #164]	; (8008c14 <__sflush_r+0x108>)
 8008b6e:	410a      	asrs	r2, r1
 8008b70:	07d6      	lsls	r6, r2, #31
 8008b72:	d427      	bmi.n	8008bc4 <__sflush_r+0xb8>
 8008b74:	2200      	movs	r2, #0
 8008b76:	6062      	str	r2, [r4, #4]
 8008b78:	04d9      	lsls	r1, r3, #19
 8008b7a:	6922      	ldr	r2, [r4, #16]
 8008b7c:	6022      	str	r2, [r4, #0]
 8008b7e:	d504      	bpl.n	8008b8a <__sflush_r+0x7e>
 8008b80:	1c42      	adds	r2, r0, #1
 8008b82:	d101      	bne.n	8008b88 <__sflush_r+0x7c>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b903      	cbnz	r3, 8008b8a <__sflush_r+0x7e>
 8008b88:	6560      	str	r0, [r4, #84]	; 0x54
 8008b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b8c:	602f      	str	r7, [r5, #0]
 8008b8e:	2900      	cmp	r1, #0
 8008b90:	d0c9      	beq.n	8008b26 <__sflush_r+0x1a>
 8008b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b96:	4299      	cmp	r1, r3
 8008b98:	d002      	beq.n	8008ba0 <__sflush_r+0x94>
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f7ff fc96 	bl	80084cc <_free_r>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ba4:	e7c0      	b.n	8008b28 <__sflush_r+0x1c>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	4628      	mov	r0, r5
 8008baa:	47b0      	blx	r6
 8008bac:	1c41      	adds	r1, r0, #1
 8008bae:	d1c8      	bne.n	8008b42 <__sflush_r+0x36>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0c5      	beq.n	8008b42 <__sflush_r+0x36>
 8008bb6:	2b1d      	cmp	r3, #29
 8008bb8:	d001      	beq.n	8008bbe <__sflush_r+0xb2>
 8008bba:	2b16      	cmp	r3, #22
 8008bbc:	d101      	bne.n	8008bc2 <__sflush_r+0xb6>
 8008bbe:	602f      	str	r7, [r5, #0]
 8008bc0:	e7b1      	b.n	8008b26 <__sflush_r+0x1a>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	e7ad      	b.n	8008b28 <__sflush_r+0x1c>
 8008bcc:	690f      	ldr	r7, [r1, #16]
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	d0a9      	beq.n	8008b26 <__sflush_r+0x1a>
 8008bd2:	0793      	lsls	r3, r2, #30
 8008bd4:	680e      	ldr	r6, [r1, #0]
 8008bd6:	bf08      	it	eq
 8008bd8:	694b      	ldreq	r3, [r1, #20]
 8008bda:	600f      	str	r7, [r1, #0]
 8008bdc:	bf18      	it	ne
 8008bde:	2300      	movne	r3, #0
 8008be0:	eba6 0807 	sub.w	r8, r6, r7
 8008be4:	608b      	str	r3, [r1, #8]
 8008be6:	f1b8 0f00 	cmp.w	r8, #0
 8008bea:	dd9c      	ble.n	8008b26 <__sflush_r+0x1a>
 8008bec:	6a21      	ldr	r1, [r4, #32]
 8008bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bf0:	4643      	mov	r3, r8
 8008bf2:	463a      	mov	r2, r7
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b0      	blx	r6
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	dc06      	bgt.n	8008c0a <__sflush_r+0xfe>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	e78e      	b.n	8008b28 <__sflush_r+0x1c>
 8008c0a:	4407      	add	r7, r0
 8008c0c:	eba8 0800 	sub.w	r8, r8, r0
 8008c10:	e7e9      	b.n	8008be6 <__sflush_r+0xda>
 8008c12:	bf00      	nop
 8008c14:	dfbffffe 	.word	0xdfbffffe

08008c18 <_fflush_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	690b      	ldr	r3, [r1, #16]
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	b913      	cbnz	r3, 8008c28 <_fflush_r+0x10>
 8008c22:	2500      	movs	r5, #0
 8008c24:	4628      	mov	r0, r5
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	b118      	cbz	r0, 8008c32 <_fflush_r+0x1a>
 8008c2a:	6a03      	ldr	r3, [r0, #32]
 8008c2c:	b90b      	cbnz	r3, 8008c32 <_fflush_r+0x1a>
 8008c2e:	f7ff fa45 	bl	80080bc <__sinit>
 8008c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0f3      	beq.n	8008c22 <_fflush_r+0xa>
 8008c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c3c:	07d0      	lsls	r0, r2, #31
 8008c3e:	d404      	bmi.n	8008c4a <_fflush_r+0x32>
 8008c40:	0599      	lsls	r1, r3, #22
 8008c42:	d402      	bmi.n	8008c4a <_fflush_r+0x32>
 8008c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c46:	f7ff fc3e 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f7ff ff5d 	bl	8008b0c <__sflush_r>
 8008c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c54:	07da      	lsls	r2, r3, #31
 8008c56:	4605      	mov	r5, r0
 8008c58:	d4e4      	bmi.n	8008c24 <_fflush_r+0xc>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	059b      	lsls	r3, r3, #22
 8008c5e:	d4e1      	bmi.n	8008c24 <_fflush_r+0xc>
 8008c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c62:	f7ff fc31 	bl	80084c8 <__retarget_lock_release_recursive>
 8008c66:	e7dd      	b.n	8008c24 <_fflush_r+0xc>

08008c68 <__swhatbuf_r>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c70:	2900      	cmp	r1, #0
 8008c72:	b096      	sub	sp, #88	; 0x58
 8008c74:	4615      	mov	r5, r2
 8008c76:	461e      	mov	r6, r3
 8008c78:	da0d      	bge.n	8008c96 <__swhatbuf_r+0x2e>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c80:	f04f 0100 	mov.w	r1, #0
 8008c84:	bf0c      	ite	eq
 8008c86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c8a:	2340      	movne	r3, #64	; 0x40
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	6031      	str	r1, [r6, #0]
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	b016      	add	sp, #88	; 0x58
 8008c94:	bd70      	pop	{r4, r5, r6, pc}
 8008c96:	466a      	mov	r2, sp
 8008c98:	f000 f848 	bl	8008d2c <_fstat_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	dbec      	blt.n	8008c7a <__swhatbuf_r+0x12>
 8008ca0:	9901      	ldr	r1, [sp, #4]
 8008ca2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ca6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008caa:	4259      	negs	r1, r3
 8008cac:	4159      	adcs	r1, r3
 8008cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb2:	e7eb      	b.n	8008c8c <__swhatbuf_r+0x24>

08008cb4 <__smakebuf_r>:
 8008cb4:	898b      	ldrh	r3, [r1, #12]
 8008cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cb8:	079d      	lsls	r5, r3, #30
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	d507      	bpl.n	8008cd0 <__smakebuf_r+0x1c>
 8008cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	2301      	movs	r3, #1
 8008cca:	6163      	str	r3, [r4, #20]
 8008ccc:	b002      	add	sp, #8
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	ab01      	add	r3, sp, #4
 8008cd2:	466a      	mov	r2, sp
 8008cd4:	f7ff ffc8 	bl	8008c68 <__swhatbuf_r>
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	4605      	mov	r5, r0
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff f8d5 	bl	8007e8c <_malloc_r>
 8008ce2:	b948      	cbnz	r0, 8008cf8 <__smakebuf_r+0x44>
 8008ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce8:	059a      	lsls	r2, r3, #22
 8008cea:	d4ef      	bmi.n	8008ccc <__smakebuf_r+0x18>
 8008cec:	f023 0303 	bic.w	r3, r3, #3
 8008cf0:	f043 0302 	orr.w	r3, r3, #2
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	e7e3      	b.n	8008cc0 <__smakebuf_r+0xc>
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	6020      	str	r0, [r4, #0]
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	6163      	str	r3, [r4, #20]
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	6120      	str	r0, [r4, #16]
 8008d0a:	b15b      	cbz	r3, 8008d24 <__smakebuf_r+0x70>
 8008d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 f81d 	bl	8008d50 <_isatty_r>
 8008d16:	b128      	cbz	r0, 8008d24 <__smakebuf_r+0x70>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	f043 0301 	orr.w	r3, r3, #1
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	431d      	orrs	r5, r3
 8008d28:	81a5      	strh	r5, [r4, #12]
 8008d2a:	e7cf      	b.n	8008ccc <__smakebuf_r+0x18>

08008d2c <_fstat_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d07      	ldr	r5, [pc, #28]	; (8008d4c <_fstat_r+0x20>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	4611      	mov	r1, r2
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	f7f8 f92e 	bl	8000f9a <_fstat>
 8008d3e:	1c43      	adds	r3, r0, #1
 8008d40:	d102      	bne.n	8008d48 <_fstat_r+0x1c>
 8008d42:	682b      	ldr	r3, [r5, #0]
 8008d44:	b103      	cbz	r3, 8008d48 <_fstat_r+0x1c>
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	bd38      	pop	{r3, r4, r5, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200003f0 	.word	0x200003f0

08008d50 <_isatty_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d06      	ldr	r5, [pc, #24]	; (8008d6c <_isatty_r+0x1c>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	f7f8 f92d 	bl	8000fba <_isatty>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_isatty_r+0x1a>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_isatty_r+0x1a>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	200003f0 	.word	0x200003f0

08008d70 <_init>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	bf00      	nop
 8008d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d76:	bc08      	pop	{r3}
 8008d78:	469e      	mov	lr, r3
 8008d7a:	4770      	bx	lr

08008d7c <_fini>:
 8008d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7e:	bf00      	nop
 8008d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d82:	bc08      	pop	{r3}
 8008d84:	469e      	mov	lr, r3
 8008d86:	4770      	bx	lr
